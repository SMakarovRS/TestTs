
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// работа с пользователями
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	
	// работа с файлами
	СпрашиватьРежимРедактированияПриОткрытииФайла = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла");
	Если СпрашиватьРежимРедактированияПриОткрытииФайла = Неопределено Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла = Истина;
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
	КонецЕсли;
	
	ДействиеПоДвойномуЩелчкуМыши = ХранилищеОбщихНастроек.Загрузить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши");
	Если ДействиеПоДвойномуЩелчкуМыши = Неопределено Тогда
		ДействиеПоДвойномуЩелчкуМыши = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", ДействиеПоДвойномуЩелчкуМыши);
	КонецЕсли;
	
	СпособСравненияВерсийФайлов = ХранилищеОбщихНастроек.Загрузить("НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов");
	ПоказыватьПодсказкиПриРедактированииФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов");
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы");
	Если ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Неопределено Тогда 
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Истина;
		ХранилищеОбщихНастроек.Сохранить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	КонецЕсли;	
	
	ПоказыватьКолонкуРазмер = ХранилищеОбщихНастроек.Загрузить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер");
	Если ПоказыватьКолонкуРазмер = Неопределено Тогда
		ПоказыватьКолонкуРазмер = Ложь;
		ХранилищеОбщихНастроек.Сохранить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ПоказыватьКолонкуРазмер);
	КонецЕсли;
	
	// работа с документами
	ВидВнутреннегоДокумента = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ВидВнутреннегоДокумента");
	ВидВходящегоДокумента	= ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ВидВходящегоДокумента");
	ВидИсходящегоДокумента 	= ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ВидИсходящегоДокумента");
	
	СпособОтправки  = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "СпособОтправки");
	СпособПолучения = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "СпособПолучения");
	
	ПоказыватьПредупреждениеПриРегистрации = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ПоказыватьПредупреждениеПриРегистрации");
	Если ПоказыватьПредупреждениеПриРегистрации = Неопределено Тогда 
		ПоказыватьПредупреждениеПриРегистрации = Истина;
		ХранилищеОбщихНастроек.Сохранить("НастройкиРаботыСДокументами", "ПоказыватьПредупреждениеПриРегистрации", ПоказыватьПредупреждениеПриРегистрации);
	КонецЕсли;	
	
	знПоказыватьЗапросКомментария = ХранилищеОбщихНастроек.Загрузить("ТехподдержкаЗаявки", "ПоказыватьЗапросКомментария");
	Если знПоказыватьЗапросКомментария <> 0 И знПоказыватьЗапросКомментария <> 1 И знПоказыватьЗапросКомментария <> 2 Тогда
		ПоказыватьЗапросКомментария = 0;
		ХранилищеОбщихНастроек.Сохранить("ТехподдержкаЗаявки", "ПоказыватьЗапросКомментария", ПоказыватьЗапросКомментария);
	Иначе
		ПоказыватьЗапросКомментария = знПоказыватьЗапросКомментария;
	КонецЕсли;
		
	ЗаполнятьПроект = ХранилищеОбщихНастроек.Загрузить("ТехподдержкаЗаявки", "ЗаполнятьПроект")<>Ложь; // Неопределено == Истина
	ЗаполнятьИнициатор = ХранилищеОбщихНастроек.Загрузить("ТехподдержкаЗаявки", "ЗаполнятьИнициатор")<>Ложь;
	ЗаполнятьКлиента =  ХранилищеОбщихНастроек.Загрузить("ТехподдержкаЗаявки", "ЗаполнятьКлиента")<>Ложь;
	ЗаполнятьОрганизация = ХранилищеОбщихНастроек.Загрузить("ТехподдержкаЗаявки", "ЗаполнятьОрганизация")<>Ложь;
	
	Если Параметры.Свойство("ЭтоВебКлиент") Тогда 
		Если Не Параметры.ЭтоВебКлиент Тогда
			Элементы.УстановитьРасширениеРаботыСФайламиНаКлиенте.Видимость = Ложь;
		КонецЕсли;		
	КонецЕсли;
	
	// Проверка можно ли изменять пароль пользователю
	ЗапрещеноИзменятьПароль = Ложь;
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ПользовательИБ 	= Неопределено;	
		Если Пользователи.СвойстваПользователяИБ(Пользователи.ТекущийПользователь().ИдентификаторПользователяИБ) Тогда
			ЗапрещеноИзменятьПароль = ПользовательИБ.ЗапрещеноИзменятьПароль;			
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
	КонецПопытки;
	
	Элементы.ИзменитьПароль.Доступность = НЕ УправлениеITОтделом8УФПовтИсп.ЭтоДемоВерсия() И НЕ ЗапрещеноИзменятьПароль;
	
	ЗапрашиватьПодтверждениеПриЗавершенииПрограммы = СтандартныеПодсистемыСервер.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы();
	
	// Мобильные клиенты.
	ИспользоватьМобильныхКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьМобильноеПриложение");
	Если ИспользоватьМобильныхКлиентов = Истина Тогда
		Элементы.ГруппаМобильныеКлиенты.Видимость = Истина;
	Иначе
		Элементы.ГруппаМобильныеКлиенты.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПерсональныеНастройки = Новый Структура;	
	ПерсональныеНастройки.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", ЗапрашиватьПодтверждениеПриЗавершенииПрограммы);
	ОбщегоНазначенияКлиент.СохранитьПерсональныеНастройки(ПерсональныеНастройки);
	
	МассивСтруктур = Новый Массив;
	
	// работа с файлами
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиОткрытияФайлов");
	Элемент.Вставить("Настройка", "ДействиеПоДвойномуЩелчкуМыши");
	Элемент.Вставить("Значение", ДействиеПоДвойномуЩелчкуМыши);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиОткрытияФайлов");
	Элемент.Вставить("Настройка", "СпрашиватьРежимРедактированияПриОткрытииФайла");
	Элемент.Вставить("Значение", СпрашиватьРежимРедактированияПриОткрытииФайла);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиПрограммы");
	Элемент.Вставить("Настройка", "ПоказыватьПодсказкиПриРедактированииФайлов");
	Элемент.Вставить("Значение", ПоказыватьПодсказкиПриРедактированииФайлов);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиПрограммы");
	Элемент.Вставить("Настройка", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы");
	Элемент.Вставить("Значение", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиСравненияФайлов");
	Элемент.Вставить("Настройка", "СпособСравненияВерсийФайлов");
	Элемент.Вставить("Значение", СпособСравненияВерсийФайлов);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиПрограммы");
	Элемент.Вставить("Настройка", "ПоказыватьКолонкуРазмер");
	Элемент.Вставить("Значение", ПоказыватьКолонкуРазмер);
	МассивСтруктур.Добавить(Элемент);
	
	ПоказыватьЗапросКомментария = ?(ПоказыватьЗапросКомментария=1, 1, ?(ПоказыватьЗапросКомментария=2, 2, 0));
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ТехподдержкаЗаявки");
	Элемент.Вставить("Настройка", "ПоказыватьЗапросКомментария");
	Элемент.Вставить("Значение", ПоказыватьЗапросКомментария);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ТехподдержкаЗаявки");
	Элемент.Вставить("Настройка", "ЗаполнятьПроект");
	Элемент.Вставить("Значение", ЗаполнятьПроект);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ТехподдержкаЗаявки");
	Элемент.Вставить("Настройка", "ЗаполнятьИнициатор");
	Элемент.Вставить("Значение", ЗаполнятьИнициатор);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ТехподдержкаЗаявки");
	Элемент.Вставить("Настройка", "ЗаполнятьКлиента");
	Элемент.Вставить("Значение", ЗаполнятьКлиента);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ТехподдержкаЗаявки");
	Элемент.Вставить("Настройка", "ЗаполнятьОрганизация");
	Элемент.Вставить("Значение", ЗаполнятьОрганизация);
	МассивСтруктур.Добавить(Элемент);
		
	ЗаписатьМассив(МассивСтруктур, ПерсональныеНастройки);
	Закрыть();
	
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРабочегоКаталога(Команда)
	// idm.
	РаботаСФайламиКлиент.ОткрытьФормуНастройкиРабочегоКаталога();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСФайламиНаКлиенте(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьРасширениеРаботыСФайламиНаКлиентеЗавершение", ЭтотОбъект);
	НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСФайламиНаКлиентеЗавершение(ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСканирования(Команда)
	
	РаботаСФайламиКлиент.ОткрытьФормуНастройкиСканирования();
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОПользователе(Команда)
	
	ПоказатьЗначение(, АвторизованныйПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьДействиеПриВыбореМакетаПечатнойФормы(Команда)
	ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.ВыбораРежимаОткрытияМакета");
КонецПроцедуры

&НаКлиенте
Процедура ПерсональнаяНастройкаПроксиСервера(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера",
					Новый Структура("НастройкаПроксиНаКлиенте", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭЦП(Команда)
	
	ЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСКриптографиейНаКлиенте(Команда)
	НачатьУстановкуРасширенияРаботыСКриптографией(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыСистемы(Команда)
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпактныйРежимФорм(Команда)
	
	УстановитьКомпактныйРежимФормНаСервере();
	ПоказатьПредупреждение(,НСтр("ru = 'Для вступления в силу настроек компактности перезапустите сеанс'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтоРежимФорм(Команда)
	
	УстановитьАвтоРежимФормНаСервере();
	ПоказатьПредупреждение(, НСтр("ru = 'Для вступления в силу настроек компактности перезапустите сеанс'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАвтоРежимФормНаСервере()
	
	РежимКомпактности = ВариантМасштабаФормКлиентскогоПриложения.Авто; 
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();

	Если Не Пользователь = Неопределено Тогда

		Настройка = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения", "",, Пользователь.Имя);

		Если Не ТипЗнч(Настройка) = Тип("НастройкиКлиентскогоПриложения") Тогда
		    Настройка = Новый НастройкиКлиентскогоПриложения;
		КонецЕсли;

		Настройка.ВариантМасштабаФормКлиентскогоПриложения = РежимКомпактности;
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", Настройка,, Пользователь.Имя);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПользователя(Команда)
	
	ПараметрыФормы = Новый Структура("Пользователь", ПользователиКлиент.ТекущийПользователь());
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПароль(Команда)
		
	СвойстваСтруктура = СвойстваПользователя();	
	Если СвойстваСтруктура <> Неопределено Тогда		
		Если СвойстваСтруктура.Свойство("ПарольУстановлен") Тогда
			Если СвойстваСтруктура.ПарольУстановлен = Истина Тогда
				СтарыйПароль = "";
				ПоказатьВводСтроки(Новый ОписаниеОповещения("ЗапросСтарогоПароляЗавершение", ЭтотОбъект, СвойстваСтруктура), СтарыйПароль, НСтр("ru = 'Введите СТАРЫЙ пароль'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;		
		ЗапросСтарогоПароляЗавершение("", СвойстваСтруктура);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Пользователь не определен'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаМобильныхКлиентов(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиПодключенияМобильныхКлиентов");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаписатьМассив(МассивСтруктур, ПерсональныеНастройки)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	ОбщегоНазначения.СохранитьПерсональныеНастройки(ПерсональныеНастройки);
КонецПроцедуры

&НаСервере
Процедура УстановитьКомпактныйРежимФормНаСервере()
	
	РежимКомпактности = ВариантМасштабаФормКлиентскогоПриложения.Компактный; 
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();

	Если Не Пользователь = Неопределено Тогда

		Настройка = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения", "",, Пользователь.Имя);

		Если Не ТипЗнч(Настройка) = Тип("НастройкиКлиентскогоПриложения") Тогда
		    Настройка = Новый НастройкиКлиентскогоПриложения;
		КонецЕсли;

		Настройка.ВариантМасштабаФормКлиентскогоПриложения = РежимКомпактности;
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", Настройка,, Пользователь.Имя);

	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СвойстваПользователя()
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваСтруктура = Пользователи.СвойстваПользователяИБ(Пользователи.ТекущийПользователь().ИдентификаторПользователяИБ);
	Если СвойстваСтруктура <> Неопределено Тогда
		Возврат Новый Структура("ПарольУстановлен, СтарыйПароль", СвойстваСтруктура.ПарольУстановлен, СвойстваСтруктура.СтарыйПароль);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗапросСтарогоПароляЗавершение(СтарыйПароль, Свойства) Экспорт
	
	Если СтарыйПароль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтарыйПароль <> "" Тогда
		Свойства.СтарыйПароль = СтарыйПароль;
		Если НЕ СтарыйПарольСовпадает(СтарыйПароль) Тогда			
			Возврат;
		КонецЕсли;					
	КонецЕсли;
	
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ЗапросНовогоПароляЗавершение", ЭтотОбъект, Свойства), СтарыйПароль, НСтр("ru = 'Введите НОВЫЙ пароль'"));
	
КонецПроцедуры

&НаСервере
Функция СтарыйПарольСовпадает(СтарыйПароль)
	
	УстановитьПривилегированныйРежим(Истина);	
	ПользовательСсылка = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ПользовательСсылка) Тогда
		СвойстваСтруктура              = Пользователи.СвойстваПользователяИБ(Пользователи.ТекущийПользователь().ИдентификаторПользователяИБ);
		СвойстваСтруктура.СтарыйПароль = СтарыйПароль;		
		Попытка
			Пользователи.УстановитьСвойстваПользователяИБ(Пользователи.ТекущийПользователь().ИдентификаторПользователяИБ, СвойстваСтруктура);
			Возврат Истина;
		Исключение
			Инфо = ИнформацияОбОшибке();
			Сообщить(Инфо.Описание);					
		КонецПопытки;		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

&НаСервере
Функция ЗаписатьНовыйПароль(НовыйПароль, ЭтоНовыйПароль = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательСсылка = Пользователи.ТекущийПользователь();		
	Если ЗначениеЗаполнено(ПользовательСсылка) Тогда
		СвойстваСтруктура = Пользователи.СвойстваПользователяИБ(Пользователи.ТекущийПользователь().ИдентификаторПользователяИБ);		
		Если ЭтоНовыйПароль Тогда
			СвойстваСтруктура.Пароль           = НовыйПароль;
			СвойстваСтруктура.ПарольУстановлен = НЕ ПустаяСтрока(НовыйПароль);
		Иначе
			СвойстваСтруктура.СтарыйПароль     = НовыйПароль;
		КонецЕсли;	
		Попытка
			Пользователи.УстановитьСвойстваПользователяИБ(Пользователи.ТекущийПользователь().ИдентификаторПользователяИБ, СвойстваСтруктура);
			Возврат Истина;
		Исключение			
			Инфо = ИнформацияОбОшибке();
			Сообщить(Инфо.Описание);		
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗапросНовогоПароляЗавершение(НовыйПароль, Свойства) Экспорт
	
	Если НовыйПароль = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Если ЗаписатьНовыйПароль(НовыйПароль) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Пароль успешно изменен'"));		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Пользователь не определен'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
