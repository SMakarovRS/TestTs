
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоОстаткамНаСкладах = Истина;
	
	// Устанавливаем свойства.
	Если Параметры.Свойство("Организация") Тогда
		ОрганизацияОтбор = Параметры.Организация;
	КонецЕсли;
	Если Параметры.Свойство("МестоХранения") Тогда
		МестоХраненияОтбор = Параметры.МестоХранения;
	КонецЕсли;
	Если Параметры.Свойство("Контрагент") Тогда
		КонтрагентОтбор = Параметры.Контрагент;
	КонецЕсли;
	Если Параметры.Свойство("ДатаАктуальности") Тогда
		ДатаАктуальности = Параметры.ДатаАктуальности;
	КонецЕсли;
	
	// Только просмотр у отборов.
	Если Параметры.Свойство("ОрганизацияТолькоПросмотр") Тогда
		Элементы.ОрганизацияОтбор.ТолькоПросмотр = Параметры.ОрганизацияТолькоПросмотр;
	КонецЕсли;
	Если Параметры.Свойство("МестоХраненияТолькоПросмотр") Тогда
		Элементы.МестоХраненияОтбор.ТолькоПросмотр = Параметры.МестоХраненияТолькоПросмотр;
	КонецЕсли;
	Если Параметры.Свойство("КонтрагентТолькоПросмотр") Тогда
		Элементы.КонтрагентОтбор.ТолькоПросмотр = Параметры.КонтрагентТолькоПросмотр;
	КонецЕсли;
	Если Параметры.Свойство("ДатаАктуальностиТолькоПросмотр") Тогда
		Элементы.ДатаАктуальности.ТолькоПросмотр = Параметры.ДатаАктуальностиТолькоПросмотр;
	КонецЕсли;

	// То, что не нужно отображать.
	Если Параметры.Свойство("УбратьИзПодбораНоменклатуру") Тогда
		ТЗУбратьИзПодбораНоменклатуру = ПолучитьИзВременногоХранилища(Параметры.УбратьИзПодбораНоменклатуру);
		Для Каждого Строки Из ТЗУбратьИзПодбораНоменклатуру Цикл
			ЗаполнитьЗначенияСвойств(УбратьИзПодбораНоменклатуру.Добавить(), Строки);
		КонецЦикла;
		УдалитьИзВременногоХранилища(Параметры.УбратьИзПодбораНоменклатуру);		
	КонецЕсли;
	
	// Выбранная номенклатура.
	Если Параметры.Свойство("АдресВыбраннойНоменклатуры") Тогда
		ТЗВыбраннойНоменклатуры = ПолучитьИзВременногоХранилища(Параметры.АдресВыбраннойНоменклатуры);
		УдалитьИзВременногоХранилища(Параметры.АдресВыбраннойНоменклатуры);
	Иначе
		ТЗВыбраннойНоменклатуры = Неопределено;
	КонецЕсли;
	
	ДЗ = ПолучитьДеревоНоменклатуры();	
	УстановитьОтметкиВДеревеПоТаблицеПриОткрытии(ТЗВыбраннойНоменклатуры, ДЗ);
	
	// Исходное состояние деревьев.
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
	ЗначениеВДанныеФормы(ДЗ, ПолноеДеревоНоменклатуры);
	
	// Оформление дерева номенклатуры.
	ЭлементУО 						=   УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	ЭлементУсловия 					=ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.УчетПоКарточкам"); 
	ЭлементУсловия.ВидСравнения  	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение  	= Истина;
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыКоличествоВыбрано");	
		
	ЭлементУО 						=   УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	ЭлементУсловия 					=ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.УчетПоКарточкам"); 
	ЭлементУсловия.ВидСравнения  	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение  	= Ложь;
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыКарточкаНоменклатуры");	
	
	ЗагрузитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ОтображатьИнвентарныеИСерийныеНомера", Элементы.ОтображатьИнвентарныеИСерийныеНомера.Пометка);	
	СохранитьНастройкиФормы(СтруктураНастроек);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	
	ОбновитьДеревоНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияОтборПриИзменении(Элемент)
	
	ОбновитьДеревоНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаАктуальностиПриИзменении(Элемент)
	
	ОбновитьДеревоНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтборПриИзменении(Элемент)
	
	ОбновитьДеревоНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОбновитьДеревоНоменклатурыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНоменклатуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыФлагПриИзменении(Элемент)
	
	// Проставляем/снимаем галочки у дочерних
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Результат = Неопределено;
	ДобавитьУдалитьВыбраннуюПозицию(ТекущиеДанныеВСтруктуру(Элементы.ДеревоНоменклатуры.ТекущиеДанные), Новый Структура("ОбновитьФлаги", Истина), Результат);
	
	СинхронизироватьФлагиДерева(ДеревоНоменклатуры.ПолучитьЭлементы(), Результат.МассивИзмененных);
			
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьФлагиДерева(ЭлементыДерева, Знач МассивИзмененных)
	
	Для Каждого Стр Из ЭлементыДерева Цикл
		
		Для Каждого Эл Из МассивИзмененных Цикл
			Если Эл.Номенклатура = Стр.Номенклатура
				И Эл.КарточкаНоменклатуры = Стр.КарточкаНоменклатуры
				И Эл.РеальнаяПартия = Стр.РеальнаяПартия Тогда
				
				Стр.Флаг = Эл.Флаг;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
		СинхронизироватьФлагиДерева(Стр.ПолучитьЭлементы(), МассивИзмененных);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКоличествоВыбраноПриИзменении(Элемент)
    
    ТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные.КоличествоВыбрано > ТекущиеДанные.Количество Тогда
		ТекущиеДанные.КоличествоВыбрано = ТекущиеДанные.Количество;
	КонецЕсли;
	ТекущиеДанные.Сумма = ТекущиеДанные.КоличествоВыбрано * ?(ТекущиеДанные.Количество = 0, 0,
            ТекущиеДанные.СуммаОстаток / ТекущиеДанные.Количество);
	ТекущиеДанные.Флаг = Истина;
	
	Результат = Неопределено;
	ДобавитьУдалитьВыбраннуюПозицию(ТекущиеДанныеВСтруктуру(Элементы.ДеревоНоменклатуры.ТекущиеДанные),
        Новый Структура("ОбновитьКоличество", Истина), Результат);
	
	ДеревоНоменклатурыФлагПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоНоменклатурыКоличествоВыбрано.ТолькоПросмотр = Элементы.ДеревоНоменклатуры.ТекущиеДанные.УчетПоКарточкам;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для Каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		УстановитьДочерниеФлаги(Строка, Истина);
	КонецЦикла;
	
	КоллекцияЭлементовДерева = ПолноеДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		УстановитьДочерниеФлаги(Строка, Истина);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		УстановитьДочерниеФлаги(Строка, Ложь);
	КонецЦикла;
	
	КоллекцияЭлементовДерева = ПолноеДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		УстановитьДочерниеФлаги(Строка, Ложь);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	Если НЕ ПустаяСтрока(СтрокаПоиска) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект), НСтр("ru = 'Так как установлен отбор, то будут добавлены родительские и дочерние элементы выбранных позиций.
                                                                                       |Хотите продолжить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ПодборФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПодборФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПодборФрагмент()
	
	Перем АдресТЗ;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	КлючеваяОперация = НСтр("ru = 'ФормаПодбора (выбор)'");
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	АдресТЗ = ПолучитьТЗНоменклатуры();
	
	// Закрываем форму и возвращаем результат форме из которой была открыта форма подбора.
	Закрыть(АдресТЗ);

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьИнвентарныеИСерийныеНомера(Команда)
	Элементы.ОтображатьИнвентарныеИСерийныеНомера.Пометка = НЕ Элементы.ОтображатьИнвентарныеИСерийныеНомера.Пометка;
	ОбновитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтборы(Команда)
	
	Элементы.ПоказатьСкрытьОтборы.Пометка = НЕ Элементы.ПоказатьСкрытьОтборы.Пометка;
	ОбновитьВидимость()
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьВидимость()
	
	Элементы.ДеревоНоменклатурыИнвентарныйНомер.Видимость = Элементы.ОтображатьИнвентарныеИСерийныеНомера.Пометка;
	Элементы.ДеревоНоменклатурыСерийныйНомер.Видимость = Элементы.ОтображатьИнвентарныеИСерийныеНомера.Пометка;
	Элементы.Отборы.Видимость = Элементы.ПоказатьСкрытьОтборы.Пометка;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДеревоНоменклатуры(СтрокаПоискаНоменклатуры = Неопределено)
		
	ДЗ = ДанныеФормыВЗначение(ДеревоНоменклатуры, Тип("ДеревоЗначений"));
	ДЗ.Строки.Очистить();
	Запрос = Новый Запрос();
	
	Если НЕ ЗначениеЗаполнено(КонтрагентОтбор) Тогда
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОстаткиОстатки.Организация,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА ОстаткиОстатки.Номенклатура
			|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец
			|	КОНЕЦ КАК Номенклатура,
			|	ОстаткиОстатки.Партия,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.КарточкиНоменклатуры.ПустаяСсылка)
			|		ИНАЧЕ ОстаткиОстатки.Номенклатура
			|	КОНЕЦ КАК КарточкаНоменклатуры,
			|	ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) КАК Количество,
			|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) КАК Сумма,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА ОстаткиОстатки.Номенклатура.ВидНоменклатуры.НавСсылка
			|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ВидНоменклатуры.НавСсылка
			|	КОНЕЦ КАК НавСсылка,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА ОстаткиОстатки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
			|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
			|	КОНЕЦ КАК УчетПоКарточкам,
			|	ОстаткиОстатки.КоличествоОстаток КАК КоличествоВыбрано,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА ОстаткиОстатки.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ЕдиницаИзмерения
			|	КОНЕЦ КАК ЕдиницаИзмерения,
			|	ЛОЖЬ КАК Флаг,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) = 0
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) / ОстаткиОстатки.КоличествоОстаток
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА """"
			|		ИНАЧЕ ОстаткиОстатки.Номенклатура.ИнвентарныйНомер
			|	КОНЕЦ КАК ИнвентарныйНомер,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА """"
			|		ИНАЧЕ ОстаткиОстатки.Номенклатура.СерийныйНомер
			|	КОНЕЦ КАК СерийныйНомер,
			|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) КАК СуммаОстаток
			|ИЗ
			|	РегистрНакопления.Остатки.Остатки(
			|			&ДатаКон,
			|			ИСТИНА
			|				И МестоХранения = &МестоХранения
			|				И Организация = &Организация) КАК ОстаткиОстатки";
        
		Если ЗначениеЗаполнено(МестоХраненияОтбор) Тогда
			Запрос.УстановитьПараметр("МестоХранения", МестоХраненияОтбор);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И МестоХранения = &МестоХранения", "");
		КонецЕсли;	
	Иначе
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОбслуживаниеКонтрагентамиОстатки.Организация,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОбслуживаниеКонтрагентамиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА ОбслуживаниеКонтрагентамиОстатки.Номенклатура
			|		ИНАЧЕ ОбслуживаниеКонтрагентамиОстатки.Номенклатура.Владелец
			|	КОНЕЦ КАК Номенклатура,
			|	ОбслуживаниеКонтрагентамиОстатки.Партия,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОбслуживаниеКонтрагентамиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.КарточкиНоменклатуры.ПустаяСсылка)
			|		ИНАЧЕ ОбслуживаниеКонтрагентамиОстатки.Номенклатура
			|	КОНЕЦ КАК КарточкаНоменклатуры,
			|	ЕСТЬNULL(ОбслуживаниеКонтрагентамиОстатки.КоличествоОстаток, 0) КАК Количество,
			|	ЕСТЬNULL(ОбслуживаниеКонтрагентамиОстатки.СуммаОстаток, 0) КАК Сумма,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОбслуживаниеКонтрагентамиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА ОбслуживаниеКонтрагентамиОстатки.Номенклатура.ВидНоменклатуры.НавСсылка
			|		ИНАЧЕ ОбслуживаниеКонтрагентамиОстатки.Номенклатура.Владелец.ВидНоменклатуры.НавСсылка
			|	КОНЕЦ КАК НавСсылка,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОбслуживаниеКонтрагентамиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА ОбслуживаниеКонтрагентамиОстатки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
			|		ИНАЧЕ ОбслуживаниеКонтрагентамиОстатки.Номенклатура.Владелец.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
			|	КОНЕЦ КАК УчетПоКарточкам,
			|	ОбслуживаниеКонтрагентамиОстатки.КоличествоОстаток КАК КоличествоВыбрано,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОбслуживаниеКонтрагентамиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА ОбслуживаниеКонтрагентамиОстатки.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ ОбслуживаниеКонтрагентамиОстатки.Номенклатура.Владелец.ЕдиницаИзмерения
			|	КОНЕЦ КАК ЕдиницаИзмерения,
			|	ЛОЖЬ КАК Флаг,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОбслуживаниеКонтрагентамиОстатки.КоличествоОстаток, 0) = 0
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(ОбслуживаниеКонтрагентамиОстатки.СуммаОстаток, 0) / ОбслуживаниеКонтрагентамиОстатки.КоличествоОстаток
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОбслуживаниеКонтрагентамиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА """"
			|		ИНАЧЕ ОбслуживаниеКонтрагентамиОстатки.Номенклатура.ИнвентарныйНомер
			|	КОНЕЦ КАК ИнвентарныйНомер,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ОбслуживаниеКонтрагентамиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			|			ТОГДА """"
			|		ИНАЧЕ ОбслуживаниеКонтрагентамиОстатки.Номенклатура.СерийныйНомер
			|	КОНЕЦ КАК СерийныйНомер,
			|	ЕСТЬNULL(ОбслуживаниеКонтрагентамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток
			|ИЗ
			|	РегистрНакопления.ОбслуживаниеКонтрагентами.Остатки(
			|			&ДатаКон,
			|			ИСТИНА
			|				И Организация = &Организация
			|				И Контрагент = &Контрагент) КАК ОбслуживаниеКонтрагентамиОстатки";
        
		Если ЗначениеЗаполнено(КонтрагентОтбор) Тогда
			Запрос.УстановитьПараметр("Контрагент", КонтрагентОтбор);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Контрагент = &Контрагент", "");
		КонецЕсли;			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияОтбор) Тогда
		Запрос.УстановитьПараметр("Организация", ОрганизацияОтбор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Организация = &Организация", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаКон", ДатаАктуальности);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Колонки.Добавить("РеальнаяПартия");
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("Партия"), "РеальнаяПартия");
	Для Каждого Строки Из ТЗ Цикл
		
		Если НЕ Строки.УчетПоКарточкам Тогда
			Строки.КарточкаНоменклатуры = УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Строки.Номенклатура);
		КонецЕсли;
		
		Если УбратьИзПодбораНоменклатуру.Количество() > 0 Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Строки.Номенклатура);
			ПараметрыОтбора.Вставить("Партия", Строки.Партия);
			ПараметрыОтбора.Вставить("КарточкаНоменклатуры", Строки.КарточкаНоменклатуры);
			
			НайденнаяСтрока = УбратьИзПодбораНоменклатуру.НайтиСтроки(ПараметрыОтбора);
			Если НайденнаяСтрока.Количество() > 0 Тогда
				ТЗ.Удалить(Строки);
				Продолжить;
			КонецЕсли;			
		КонецЕсли;
		
		Если Строки.КоличествоВыбрано > 1 Тогда			
			Строки.КоличествоВыбрано = 1;
			Строки.Сумма = Строки.КоличествоВыбрано * Строки.Цена;
		КонецЕсли;
				
	КонецЦикла;
	
	// Это строка поиска
	МассивПоиска = СтрРазделить(НРег(?(СтрокаПоискаНоменклатуры = Неопределено, СтрокаПоиска, СтрокаПоискаНоменклатуры)), " ", Ложь);	

	Если МассивПоиска.Количество() > 0 Тогда
		
		ТЗ.Колонки.Добавить("Удалить");
		ТЗ.ЗаполнитьЗначения(Ложь, "Удалить");
		Колонка = ТЗ.Колонки.Найти("Партия");
		Колонка.Имя = "ПартияСтарая";
		ТЗ.Колонки.Добавить("Партия");
		ТЗ.ЗаполнитьЗначения(Справочники.КарточкиНоменклатуры.ПустаяСсылка(), "Партия");
		
		Для Каждого Строки Из ТЗ Цикл
			мСтрокиНоменклатураНаименование 		= НРег(Строки.Номенклатура.Наименование);
			мСтрокиКарточкаНоменклатурыНаименование = ?(Строки.УчетПоКарточкам, НРег(Строки.КарточкаНоменклатуры.Наименование), "");
			мСтрокиСерийныйНомер 					= НРег(Строки.СерийныйНомер);
			мСтрокиИнвентарныйНомер 				= НРег(Строки.ИнвентарныйНомер);
			Для Каждого ЭлементПоиска Из МассивПоиска Цикл
				Если СтрНайти(мСтрокиНоменклатураНаименование, ЭлементПоиска) = 0 
					И СтрНайти(мСтрокиКарточкаНоменклатурыНаименование, ЭлементПоиска) = 0
					И СтрНайти(мСтрокиСерийныйНомер, ЭлементПоиска) = 0 
					И СтрНайти(мСтрокиИнвентарныйНомер, ЭлементПоиска) = 0 Тогда
					
					Строки.Удалить = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;				
		КонецЦикла;
		
		// Удаляем лишние
		НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Удалить", Истина));
		Для Каждого Строки Из НайденныеСтроки Цикл
			ТЗ.Удалить(Строки);			
		КонецЦикла;
		
	КонецЕсли;
		
	УправлениеITОтделом8УФ.ВывестиДеревоНоменклатуры(ДЗ, ТЗ);
		
	// Сортировка ДЗ
	ДЗ.Строки.Сортировать("Номенклатура,КарточкаНоменклатуры", Истина);
	УправлениеITОтделом8УФ.ОбновитьКлючиСтрокВДеревеЗначений(ДЗ);
	
	Возврат ДЗ;
	
КонецФункции

&НаСервере
Процедура ОбновитьДеревоНоменклатурыНаСервере()
	
	ДЗ = ПолучитьДеревоНоменклатуры();	
	ПолноеДЗ = ДанныеФормыВЗначение(ПолноеДеревоНоменклатуры, Тип("ДеревоЗначений"));
	ОбновитьФлагиВДеревеНоменклатуры(ДЗ, ПолноеДЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);	
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьФлагиВДеревеНоменклатуры(ДЗ, Знач ПолноеДЗ)
	
	Структура = Новый Структура("Номенклатура,КарточкаНоменклатуры,РеальнаяПартия");
	Для Каждого Строки Из ПолноеДЗ.Строки Цикл

		ЗаполнитьЗначенияСвойств(Структура, Строки);
		Массив = ДЗ.Строки.НайтиСтроки(Структура, Истина);
		Если Массив.Количество() > 0 Тогда
			Массив[0].Флаг = Строки.Флаг;
		КонецЕсли;
		ОбновитьФлагиВДеревеНоменклатуры(ДЗ, Строки);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
// Сохранения дерева номенклатуры.
Процедура СохранитьДеревоНоменклатуры(ДеревоНоменклатуры, Номенклатура) Экспорт
	
	ДЗ = ДанныеФормыВЗначение(ДеревоНоменклатуры, Тип("ДеревоЗначений"));
	Номенклатура.Очистить();
	
	Для Каждого Строки Из ДЗ.Строки Цикл
		Если Строки.Флаг Тогда
			НоваяСтрока 						= Номенклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);			
			СохранитьПодчиненнуюНоменклатуру(Строки, Номенклатура, НоваяСтрока.КарточкаНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПодчиненнуюНоменклатуру(СтрокаДерева, Номенклатура, Комплект)
	
	Для Каждого Строки Из СтрокаДерева.Строки Цикл
		Если Строки.Флаг Тогда
			НоваяСтрока 						= Номенклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);		
			Если ЗначениеЗаполнено(Строки.Родитель) Тогда
				НоваяСтрока.Партия 				= Строки.Родитель.КарточкаНоменклатуры;
			Иначе
				НоваяСтрока.Партия 				= Справочники.КарточкиНоменклатуры.ПустаяСсылка();		
			КонецЕсли;
			НоваяСтрока.Комплект				= Комплект;						
			СохранитьПодчиненнуюНоменклатуру(Строки, Номенклатура, Комплект);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДочерниеФлаги(Строки, Флаг)
	
	Строки.Флаг = Флаг;
	
	КоллекцияЭлементовДерева = Строки.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
		УстановитьДочерниеФлаги(Строка, Флаг);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	
	СписокЕдиницаИзмерения = Новый СписокЗначений;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);
	
	СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, 
        СтрШаблон(НСтр("ru = '%1 (ед. хранения)'"), Номенклатура.ЕдиницаИзмерения.Наименование));
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Номенклатура);
	
	Родитель = Номенклатура.Родитель;
	
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Прервать;
		Иначе
			МассивОтбора.Добавить(Родитель);
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	КонецЦикла;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка()	

&НаСервере
Функция ПолучитьТЗНоменклатуры()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("КарточкаНоменклатуры");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("КоличествоВыбрано");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");	
	ТЗ.Колонки.Добавить("УчетПоКарточкам");
	ТЗ.Колонки.Добавить("Партия");
	ТЗ.Колонки.Добавить("Комплект");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ИнвентарныйНомер");
	ТЗ.Колонки.Добавить("СерийныйНомер");
	
	СохранитьДеревоНоменклатуры(ПолноеДеревоНоменклатуры, ТЗ);
	ТЗ.Сортировать("Номенклатура,КарточкаНоменклатуры");
		
	Возврат ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор());
	
КонецФункции

&НаСервере
// Процедура загружает настройки формы.
//
Процедура ЗагрузитьНастройкиФормы()
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("ФормаПодбора", "СтруктураНастроек");
		
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("ОтображатьИнвентарныеИСерийныеНомера") Тогда
			Элементы.ОтображатьИнвентарныеИСерийныеНомера.Пометка = СтруктураНастроек.ОтображатьИнвентарныеИСерийныеНомера;
		Иначе
			Элементы.ОтображатьИнвентарныеИСерийныеНомера.Пометка = Ложь;
		КонецЕсли;
		
		ОбновитьВидимость();
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьНастройкиФормы()

&НаСервере
// Процедура сохраняет настройки формы.
//
Процедура СохранитьНастройкиФормы(СтруктураНастроек)
	
	ХранилищеНастроекДанныхФорм.Сохранить("ФормаПодбора", "СтруктураНастроек", СтруктураНастроек);
	
КонецПроцедуры // СохранитьНастройкиФормы()

&НаСервереБезКонтекста
Процедура УстановитьОтметкиВДеревеПоТаблицеПриОткрытии(Знач ТЗотметки, ДЗ)
	
	Если ТЗотметки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Номенклатура,КарточкаНоменклатуры,Партия");
	Для Каждого Строки Из ТЗотметки Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Строки);
		
		МассивСтрок = ДЗ.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Флаг					= Истина;
			МассивСтрок[0].КоличествоВыбрано	= Строки.Количество;
			Если МассивСтрок[0].Количество > 0 Тогда
				МассивСтрок[0].Сумма			= (МассивСтрок[0].СуммаОстаток / МассивСтрок[0].Количество) * МассивСтрок[0].КоличествоВыбрано;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеДанныеВСтруктуру(Знач ТекДанные)
	
	Структура = Новый Структура("Флаг,КоличествоВыбрано,Номенклатура,КарточкаНоменклатуры,РеальнаяПартия,Пария,Количество,Сумма,Цена,УчетПоКарточкам,Комплект,ЕдиницаИзмерения");
	ЗаполнитьЗначенияСвойств(Структура, Элементы.ДеревоНоменклатуры.ТекущиеДанные);			
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура ДобавитьУдалитьВыбраннуюПозицию(Знач ТекущиеДанные, Знач Настройки, Результат)
	
	Результат 		= Новый Структура;
	
	ДЗ 				= ДанныеФормыВЗначение(ПолноеДеревоНоменклатуры, Тип("ДеревоЗначений"));
	СтрокаДерева 	= Неопределено;
	
	// Нашли исходную строку в полном дереве.
	НайтиСтрокуПоТекущимДаннымВДереве(ДЗ.Строки, ТекущиеДанные, СтрокаДерева);
	
	// Надо поменять количество
	Если Настройки.Свойство("ОбновитьКоличество") Тогда
		СтрокаДерева.КоличествоВыбрано 	= ТекущиеДанные.КоличествоВыбрано;
		СтрокаДерева.Сумма 				= ТекущиеДанные.Сумма;
	КонецЕсли;
	
	// Надо обновить флаги.
	Если Настройки.Свойство("ОбновитьФлаги") Тогда
		// Ищем самую верхнюю строку.
		Пока ЗначениеЗаполнено(СтрокаДерева.Родитель) Цикл
			СтрокаДерева = СтрокаДерева.Родитель;
		КонецЦикла;
		// Для верхней найденной и вложенных строк устанавливаем значение.
		МассивИзмененных = Новый Массив;
		ОбновитьФлагиВПолномДереве(СтрокаДерева, ТекущиеДанные.Флаг, МассивИзмененных);
		Результат.Вставить("МассивИзмененных", МассивИзмененных);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ДЗ, ПолноеДеревоНоменклатуры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьФлагиВПолномДереве(СтрокаДерева, Знач Флаг, МассивИзмененных)
	
	СтрокаДерева.Флаг = Флаг;
	Структура = Новый Структура("Флаг,КоличествоВыбрано,Номенклатура,КарточкаНоменклатуры,РеальнаяПартия");
	ЗаполнитьЗначенияСвойств(Структура, СтрокаДерева);
	МассивИзмененных.Добавить(Структура);
	
	Для Каждого Строки Из СтрокаДерева.Строки Цикл
		ОбновитьФлагиВПолномДереве(Строки, Флаг, МассивИзмененных)
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиСтрокуПоТекущимДаннымВДереве(Знач ДЗ, Знач ТекущиеДанные, Результат)
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строки Из ДЗ Цикл
		
		Если Строки.Номенклатура = ТекущиеДанные.Номенклатура
			И Строки.КарточкаНоменклатуры = ТекущиеДанные.КарточкаНоменклатуры
			И Строки.РеальнаяПартия = ТекущиеДанные.РеальнаяПартия Тогда
			
			Результат = Строки;
			Возврат;
		КонецЕсли;
		
		НайтиСтрокуПоТекущимДаннымВДереве(Строки.Строки, ТекущиеДанные, Результат);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти