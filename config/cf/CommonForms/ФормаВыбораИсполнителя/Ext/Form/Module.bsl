
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("СсылкаНаОбъект", СсылкаНаОбъект) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.Задание") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, "Процесс,Сервис,Услуга,Ссылка");
	Иначе
		Реквизиты = СсылкаНаОбъект;
	КонецЕсли;
	
	Процесс 	= Реквизиты.Процесс;
	Сервис 		= Реквизиты.Сервис;
	Услуга 		= Реквизиты.Услуга;
	Документ 	= Реквизиты.Ссылка;
	Элементы.СсылкаНаОбъект.Видимость = ЗначениеЗаполнено(Реквизиты.Ссылка);
	
	Элементы.КартинкаТекущийИсполнитель.Картинка 	= БиблиотекаКартинок.ИсполнительВыбор;
		
	ОтобразитьДерево();
	
	СвернутьРазвернуть 							 	= Ложь;
	Элементы.КомандаРазвернутьДерево.Доступность 	= Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Задание_СмененИсполнитель" И Параметр = СсылкаНаОбъект Тогда
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИсполнительНеВыбран(Команда)
	
	Если НЕ ПроверитьПравоСменыИсполнителя() Тогда
		Возврат;
	КонецЕсли;	
	Закрыть(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));		
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителя(Команда)
	
	Если НЕ ПроверитьПравоСменыИсполнителя() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Дерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мИсполнитель = Элементы.Дерево.ТекущиеДанные.Исполнители;
	
	Если (ТипЗнч(мИсполнитель) = Тип("СправочникСсылка.Пользователи") 
		ИЛИ ТипЗнч(мИсполнитель) = Тип("СправочникСсылка.ГруппыПользователей")) 
		И ЗначениеЗаполнено(мИсполнитель) Тогда
		
		Закрыть(мИсполнитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСправочника(Команда)
	
	Если НЕ ПроверитьПравоСменыИсполнителя() Тогда
		Возврат;
	КонецЕсли;	
	
	Структура = Новый Структура();
	Структура.Вставить("ЗакрыватьПриВыборе",  Истина);
	Структура.Вставить("РежимВыбора",         Истина);
	Структура.Вставить("ПоказыватьНедействительных", Ложь);
		
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Структура, ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ВыбратьИсполнителяИзСправочникаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГруппу(Команда)

	Если НЕ ПроверитьПравоСменыИсполнителя() Тогда
		Возврат;
	КонецЕсли;	
	
	Структура = Новый Структура();
	Структура.Вставить("ЗакрыватьПриВыборе",  Истина);
	Структура.Вставить("РежимВыбора",         Истина);
		
	ОткрытьФорму("Справочник.ГруппыПользователей.ФормаВыбора", Структура, ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ВыбратьИсполнителяИзСправочникаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаСвернутьДерево(Команда)
	
	СвернутьДерево(Дерево);
	Элементы.КомандаСвернутьДерево.Доступность 		= Ложь;
	Элементы.КомандаРазвернутьДерево.Доступность 	= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазвернутьДерево(Команда)
	
	РазвернутьДерево(Дерево,2);
	Элементы.КомандаРазвернутьДерево.Доступность 	= Ложь;
	Элементы.КомандаСвернутьДерево.Доступность 		= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Эскалация(Команда)
	
	Элементы.Эскалация.Пометка = НЕ Элементы.Эскалация.Пометка;
	ОтобразитьДерево();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ПроверитьПравоСменыИсполнителя() Тогда
		Возврат;
	КонецЕсли;	
	ВыбратьИсполнителя(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВычислитьКод(Код)
	
	Возврат Вычислить(Код);
	
КонецФункции

&НаСервере
Функция ПроверитьИсполнителяПриПереводеНаЭтап(ТекИсполнитель)
	
	ТекИсполнитель 	= СсылкаНаОбъект.ТекущийИсполнитель;
	ТекПользователь = Пользователи.ТекущийПользователь();
	Если УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskРаспределениеЗаданий") 
		ИЛИ (ТекИсполнитель = ТекПользователь)
		ИЛИ НЕ (ЗначениеЗаполнено(ТекИсполнитель) И ЗначениеЗаполнено(ТекПользователь)) Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат ЗаданияСервер.ПроверитьПодчиненность(ТекИсполнитель, ТекПользователь);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьИсполнителяИзСправочникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда 	
		Закрыть(Результат);      		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПравоСменыИсполнителя(ПроверитьСсылку = Ложь, Отказ = Ложь)
	
	Если ВычислитьКод("(ЗначениеЗаполнено(СсылкаНаОбъект.Ссылка))" 
		+ ?(ПроверитьСсылку, " И (СсылкаНаОбъект.ТекущийИсполнитель<>СсылкаНаОбъект.ТекущийИсполнитель)", "")) Тогда
		
		Юз = Неопределено;
		Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(Юз) Тогда
			Отказ = Истина;
			
			ПоказатьПредупреждение(, 
				СтрШаблон(НСтр("ru = 'Исполнителем по данному заданию является %1.
                                |Изменить исполнителя имеет право только он сам или его руководители.'"), Юз), 180, 
					НСтр("ru = 'Нельзя изменить исполнителя'"));
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СвернутьДерево(Дерево)
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();		
		СвернутьДерево(Строка);		
		Элементы.Дерево.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте 
Процедура РазвернутьДерево(Дерево, Знач Уровень)
	
	Уровень = Уровень - 1;
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		
		Если Уровень >= 0 Тогда
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.Дерево.Развернуть(ИдентификаторСтроки);
			РазвернутьДерево(Строка,Уровень); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДерево()
	
	мОбъектТекущийЭтап 				= СсылкаНаОбъект.ТекущийЭтап;
	мОбъектТекущийИсполнитель 		= СсылкаНаОбъект.ТекущийИсполнитель;
	мПользователиТекущийПользователь= Пользователи.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(мОбъектТекущийИсполнитель) Тогда
		Элементы.НадписьТекущийИсполнитель.Заголовок 	= Строка(мОбъектТекущийИсполнитель);
	Иначе		
		Элементы.НадписьТекущийИсполнитель.Заголовок 	= НСтр("ru = '<Не выбран>'");
	КонецЕсли;
	
	ТаблицаИсполнители = СсылкаНаОбъект.Процесс.ИсполнителиЭтапов;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Исполнитель", Справочники.ГруппыПользователей.ВсеПользователи);
	МассивСтрок = ТаблицаИсполнители.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() > 0 Тогда 
		ВсеПользователи = Истина;
	Иначе
		ВсеПользователи = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СформироватьТекстЗапроса(ВсеПользователи);
	
	Если Элементы.Эскалация.Пометка = Истина Тогда		
		
		МассивЛинийПоддрежки = Новый Массив;
		Если мПользователиТекущийПользователь.ЛинияПоддержки = Справочники.ЛинииПоддержки.ПерваяЛинияПоддержки Тогда
			МассивЛинийПоддрежки.Добавить(Справочники.ЛинииПоддержки.ВтораяЛинияПоддержки);
			МассивЛинийПоддрежки.Добавить(Справочники.ЛинииПоддержки.ТретьяЛинияПоддержки);
			МассивЛинийПоддрежки.Добавить(Справочники.ЛинииПоддержки.ЧетвертаяЛинияПоддержки);
		ИначеЕсли мПользователиТекущийПользователь.ЛинияПоддержки = Справочники.ЛинииПоддержки.ВтораяЛинияПоддержки Тогда
			МассивЛинийПоддрежки.Добавить(Справочники.ЛинииПоддержки.ТретьяЛинияПоддержки);
			МассивЛинийПоддрежки.Добавить(Справочники.ЛинииПоддержки.ЧетвертаяЛинияПоддержки);
		ИначеЕсли мПользователиТекущийПользователь.ЛинияПоддержки = Справочники.ЛинииПоддержки.ТретьяЛинияПоддержки Тогда
			МассивЛинийПоддрежки.Добавить(Справочники.ЛинииПоддержки.ЧетвертаяЛинияПоддержки);
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивЛинийПоддрежки", МассивЛинийПоддрежки);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_Исполнители.ЛинияПоддержки В (&МассивЛинийПоддрежки)", "ИСТИНА");
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Ссылка", 									СсылкаНаОбъект.Процесс);
	Запрос.УстановитьПараметр("Этап", 										мОбъектТекущийЭтап);
	Запрос.УстановитьПараметр("ЗаданиеСсылка", 								СсылкаНаОбъект.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВПроцессеПрошлыхИсполнителей", 	?(ЗначениеЗаполнено(СсылкаНаОбъект.Процесс), 
		СсылкаНаОбъект.Процесс.ВыводПрошлыхИсполнителейВСпискеВыбора, Ложь));
	Запрос.УстановитьПараметр("СтрокаИсполнителиПредыдущихЭтапов", 			НСтр("ru = 'Исполнители предыдущих этапов'"));
	
	Если ВсеПользователи = Истина Тогда 
		Запрос.УстановитьПараметр("ГруппаПользователей", Справочники.ГруппыПользователей.ВсеПользователи);
		Запрос.УстановитьПараметр("Пользователь", Справочники.Пользователи.НайтиПоНаименованию("<Не указан>"));
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();	
	
	ТЗИсполнителиБезПодразделения = Новый ТаблицаЗначений();
	ТЗИсполнителиБезПодразделения.Колонки.Добавить("Исполнитель");
	ТЗИсполнителиБезПодразделения.Колонки.Добавить("ЛинияПоддержки");
	ТЗИсполнителиБезПодразделения.Колонки.Добавить("Количество");
	
	ТЗИсполнителиПредыдущихЭтапов = Новый ТаблицаЗначений();
	ТЗИсполнителиПредыдущихЭтапов.Колонки.Добавить("Исполнитель");
	ТЗИсполнителиПредыдущихЭтапов.Колонки.Добавить("ЛинияПоддержки");
	ТЗИсполнителиПредыдущихЭтапов.Колонки.Добавить("Количество");
	
	ТЗИсполнители	= Новый ТаблицаЗначений();	
	ТЗИсполнители.Колонки.Добавить("Исполнитель");
	ТЗИсполнители.Колонки.Добавить("Подразделение");
	ТЗИсполнители.Колонки.Добавить("ЛинияПоддержки");
	ТЗИсполнители.Колонки.Добавить("Количество");
	
	тДерево = РеквизитФормыВЗначение("Дерево");
	тДерево.Строки.Очистить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		Пока Выборка.Следующий() Цикл				
			
			Если Выборка.Подразделение = "ПустоеПодразделение" ИЛИ (Не ЗначениеЗаполнено(Выборка.Подразделение)) Тогда 
				нВыборка = Выборка.Выбрать();				
				Пока нВыборка.Следующий() Цикл
					Если ЗначениеЗаполнено(нВыборка.Исполнитель) Тогда
						НайденнаяСтрока = тДерево.Строки.Найти(нВыборка.Исполнитель,"Исполнители",Истина);
						Если НайденнаяСтрока = Неопределено Тогда
							Если мОбъектТекущийИсполнитель = нВыборка.Исполнитель Тогда
								Продолжить;
							Иначе					
								СтрокаТЗ 				= ТЗИсполнителиБезПодразделения.Добавить();
								СтрокаТЗ.Исполнитель 	= нВыборка.Исполнитель;							
								СтрокаТЗ.ЛинияПоддержки = нВыборка.ЛинияПоддержки;
								СтрокаТЗ.Количество 	= нВыборка.Количество;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;				
				
			ИначеЕсли			
				
				Выборка.Подразделение = НСтр("ru = 'Исполнители предыдущих этапов'") Тогда
				нВыборка = Выборка.Выбрать();
				Пока нВыборка.Следующий() Цикл
					Если ЗначениеЗаполнено(нВыборка.Исполнитель) Тогда
						НайденнаяСтрока = тДерево.Строки.Найти(нВыборка.Исполнитель,"Исполнители",Истина);
						Если НайденнаяСтрока = Неопределено Тогда
							Если мОбъектТекущийИсполнитель = нВыборка.Исполнитель Тогда
								Продолжить;
							Иначе					
								СтрокаТЗ 				= ТЗИсполнителиПредыдущихЭтапов.Добавить();
								СтрокаТЗ.Исполнитель 	= нВыборка.Исполнитель;
								СтрокаТЗ.ЛинияПоддержки = нВыборка.ЛинияПоддержки;
								СтрокаТЗ.Количество 	= нВыборка.Количество;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				// и пользователь и подразделение заполнено.
				нВыборка = Выборка.Выбрать();
				Пока нВыборка.Следующий() Цикл					
					Если ЗначениеЗаполнено(нВыборка.Исполнитель) Тогда
						НайденнаяСтрока = тДерево.Строки.Найти(нВыборка.Исполнитель,"Исполнители",Истина);
						Если НайденнаяСтрока = Неопределено Тогда
							Если мОбъектТекущийИсполнитель = нВыборка.Исполнитель Тогда
								Продолжить;
							Иначе					
								СтрокаТЗ 						= ТЗИсполнители.Добавить();								
								СтрокаТЗ.Исполнитель 			= нВыборка.Исполнитель;
								СтрокаТЗ.Подразделение 			= Выборка.Подразделение;
								СтрокаТЗ.ЛинияПоддержки 		= нВыборка.ЛинияПоддержки;
								СтрокаТЗ.Количество 			= нВыборка.Количество;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		
		Если ТЗИсполнителиПредыдущихЭтапов.Количество() > 0 Тогда
			ТЗИсполнителиПредыдущихЭтапов.Свернуть("Исполнитель", "Количество");
			СтрокаДерева 				= тДерево.Строки.Добавить();
			СтрокаДерева.Исполнители 	= НСтр("ru = 'Исполнители предыдущих этапов'");
			СтрокаДерева.КартинкаСтроки = БиблиотекаКартинок.ИсполнительГруппаПользователей;
			Для Каждого СтрокаТЗ Из ТЗИсполнителиПредыдущихЭтапов Цикл
				Если ЗначениеЗаполнено(СтрокаТЗ.Исполнитель) Тогда 
					Если мОбъектТекущийИсполнитель = СтрокаТЗ.Исполнитель Тогда
						Продолжить
					Иначе					
						мСтрокаДерева 				= СтрокаДерева.Строки.Добавить();						
						мСтрокаДерева.Исполнители 	= СтрокаТЗ.Исполнитель;					
						мСтрокаДерева.КартинкаСтроки= БиблиотекаКартинок.ИсполнительПользователь;
						мСтрокаДерева.Количество	= СтрокаТЗ.Количество;
						Попытка
							мСтрокаДерева.ЛинияПоддержки= СтрокаТЗ.Исполнитель.ЛинияПоддержки;
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаДерева.Строки.Количество()   = 0 Тогда
				тДерево.Строки.Удалить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		
		Если ТЗИсполнители.Количество() > 0 Тогда
			ТЗИсполнители.Свернуть("Исполнитель,Подразделение", "Количество");
			
			Для Каждого СтрокаТЗ Из ТЗИсполнители Цикл				
				мПодразделение = СтрокаТЗ.Подразделение;
				Если ЗначениеЗаполнено(мПодразделение) Тогда
					НайденнаяСтрока = тДерево.Строки.Найти(мПодразделение,"Исполнители",Истина);
					Если НайденнаяСтрока = Неопределено Тогда
						СтрокаДерева 				= тДерево.Строки.Добавить();
						СтрокаДерева.Исполнители 	= мПодразделение;
						СтрокаДерева.КартинкаСтроки = БиблиотекаКартинок.схмДом;
						Для Каждого мСтрокаТЗ Из ТЗИсполнители Цикл
							Если мСтрокаТЗ.Подразделение = мПодразделение Тогда
								Если ЗначениеЗаполнено(мСтрокаТЗ.Исполнитель) Тогда 
									НайденнаяСтрока = тДерево.Строки.Найти(мСтрокаТЗ.Исполнитель,"Исполнители",Истина);
									Если НайденнаяСтрока = Неопределено Тогда
										Если мОбъектТекущийИсполнитель = мСтрокаТЗ.Исполнитель Тогда
											Продолжить;
										Иначе					
											мСтрокаДерева 				= СтрокаДерева.Строки.Добавить();						
											мСтрокаДерева.Исполнители 	= мСтрокаТЗ.Исполнитель;					
											мСтрокаДерева.КартинкаСтроки= БиблиотекаКартинок.ИсполнительПользователь;
											мСтрокаДерева.Количество	= мСтрокаТЗ.Количество;
											Попытка
												мСтрокаДерева.ЛинияПоддержки = СтрокаТЗ.Исполнитель.ЛинияПоддержки;
											Исключение
											КонецПопытки;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Если СтрокаДерева.Строки.Количество()=0 Тогда
							тДерево.Строки.Удалить(СтрокаДерева);
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;							
			КонецЦикла;	
		КонецЕсли;		
		
		Если ТЗИсполнителиБезПодразделения.Количество() > 0 Тогда
			ТЗИсполнителиБезПодразделения.Свернуть("Исполнитель", "Количество");
			Для Каждого СтрокаТЗ Из ТЗИсполнителиБезПодразделения Цикл
				Если ЗначениеЗаполнено(СтрокаТЗ.Исполнитель) Тогда
					НайденнаяСтрока = тДерево.Строки.Найти(СтрокаТЗ.Исполнитель,"Исполнители",Истина);
					Если НайденнаяСтрока = Неопределено Тогда
						Если мОбъектТекущийИсполнитель = СтрокаТЗ.Исполнитель Тогда
							Продолжить
						Иначе					
							СтрокаДерева 				= тДерево.Строки.Добавить();
							СтрокаДерева.Исполнители 	= СтрокаТЗ.Исполнитель;					
							СтрокаДерева.КартинкаСтроки	= БиблиотекаКартинок.ИсполнительПользователь;
							СтрокаДерева.Количество		= СтрокаТЗ.Количество;
							Попытка
								СтрокаДерева.ЛинияПоддержки = СтрокаТЗ.Исполнитель.ЛинияПоддержки;
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;				
	КонецЕсли;
	Если тДерево.Строки.Количество()= 0 Тогда
		СтрокаДерева 				= тДерево.Строки.Добавить();
		СтрокаДерева.Исполнители 	= НСтр("ru = 'Возможных исполнителей не найдено. Выберите исполнителя из справочника.'");
		Элементы.ВыбратьИсполнителя.Доступность 	= Ложь;
		Элементы.КомандаСвернутьДерево.Доступность 	= Ложь;	
	КонецЕсли;
	ЗначениеВРеквизитФормы(тДерево, "Дерево");
		
КонецПроцедуры

&НаСервере
Функция СформироватьТекстЗапроса(ВсеПользователи);
		
	Если ВсеПользователи = Истина Тогда 
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПроцессыИсполнители.Исполнитель КАК Исполнитель,
			|	2 КАК ЭтоПрошлыйИсполнитель,
			|	ПроцессыИсполнители.Исполнитель.ЛинияПоддержки КАК ЛинияПоддержки
			|ПОМЕСТИТЬ ВТ_Исполнители
			|ИЗ
			|	Справочник.Процессы.ИсполнителиЭтапов КАК ПроцессыИсполнители
			|ГДЕ
			|	ПроцессыИсполнители.Ссылка = &Ссылка
			|	И ПроцессыИсполнители.Этап = &Этап
			|	И ТИПЗНАЧЕНИЯ(ПроцессыИсполнители.Исполнитель) = ТИП(Справочник.Пользователи)
			|	И НЕ ПроцессыИсполнители.Исполнитель ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СоставыГруппПользователей.Пользователь,
			|	3,
			|	СоставыГруппПользователей.Пользователь.ЛинияПоддержки
			|ИЗ
			|	Справочник.Процессы.ИсполнителиЭтапов КАК ПроцессыИсполнители
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ПО ПроцессыИсполнители.Исполнитель = СоставыГруппПользователей.ГруппаПользователей
			|ГДЕ
			|	ПроцессыИсполнители.Ссылка = &Ссылка
			|	И ПроцессыИсполнители.Этап = &Этап
			|	И ТИПЗНАЧЕНИЯ(ПроцессыИсполнители.Исполнитель) = ТИП(Справочник.ГруппыПользователей)
			|	И НЕ СоставыГруппПользователей.Пользователь ЕСТЬ NULL
			|	И ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи)
			|				ТОГДА СоставыГруппПользователей.Пользователь <> &Пользователь
			|		КОНЕЦ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаданиеИсполнители.Исполнитель,
			|	1,
			|	ЗаданиеИсполнители.Исполнитель.ЛинияПоддержки
			|ИЗ
			|	Документ.Задание.Исполнители КАК ЗаданиеИсполнители
			|ГДЕ
			|	ЗаданиеИсполнители.Ссылка = &ЗаданиеСсылка
			|	И ТИПЗНАЧЕНИЯ(ЗаданиеИсполнители.Исполнитель) = ТИП(Справочник.Пользователи)
			|	И &ИспользоватьВПроцессеПрошлыхИсполнителей
			|	И НЕ ЗаданиеИсполнители.Исполнитель ЕСТЬ NULL"			
		
	Иначе
		ТекстЗапроса = 
		    "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПроцессыИсполнители.Исполнитель КАК Исполнитель,
			|	2 КАК ЭтоПрошлыйИсполнитель,
			|	ПроцессыИсполнители.Исполнитель.ЛинияПоддержки КАК ЛинияПоддержки
			|ПОМЕСТИТЬ ВТ_Исполнители
			|ИЗ
			|	Справочник.Процессы.ИсполнителиЭтапов КАК ПроцессыИсполнители
			|ГДЕ
			|	ПроцессыИсполнители.Ссылка = &Ссылка
			|	И ПроцессыИсполнители.Этап = &Этап
			|	И ТИПЗНАЧЕНИЯ(ПроцессыИсполнители.Исполнитель) = ТИП(Справочник.Пользователи)
			|	И НЕ ПроцессыИсполнители.Исполнитель ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ГруппыПользователейСостав.Пользователь,
			|	3,
			|	ГруппыПользователейСостав.Пользователь.ЛинияПоддержки
			|ИЗ
			|	Справочник.Процессы.ИсполнителиЭтапов КАК ПроцессыИсполнители
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			|		ПО ПроцессыИсполнители.Исполнитель = ГруппыПользователейСостав.Ссылка
			|ГДЕ
			|	ПроцессыИсполнители.Ссылка = &Ссылка
			|	И ПроцессыИсполнители.Этап = &Этап
			|	И ТИПЗНАЧЕНИЯ(ПроцессыИсполнители.Исполнитель) = ТИП(Справочник.ГруппыПользователей)
			|	И НЕ ГруппыПользователейСостав.Пользователь ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаданиеИсполнители.Исполнитель,
			|	1,
			|	ЗаданиеИсполнители.Исполнитель.ЛинияПоддержки
			|ИЗ
			|	Документ.Задание.Исполнители КАК ЗаданиеИсполнители
			|ГДЕ
			|	ЗаданиеИсполнители.Ссылка = &ЗаданиеСсылка
			|	И ТИПЗНАЧЕНИЯ(ЗаданиеИсполнители.Исполнитель) = ТИП(Справочник.Пользователи)
			|	И &ИспользоватьВПроцессеПрошлыхИсполнителей
			|	И НЕ ЗаданиеИсполнители.Исполнитель ЕСТЬ NULL"
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Задание.ТекущийИсполнитель КАК Исполнитель,
		|	СУММА(1) КАК Количество
		|ПОМЕСТИТЬ ВТ_ЗаданияИсполнителей
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	Задание.Выполнено = ЛОЖЬ
		|	И Задание.ПометкаУдаления = ЛОЖЬ
		|	И Задание.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.ТекущийИсполнитель) = ТИП(Справочник.Пользователи)
		|			ТОГДА Задание.ТекущийИсполнитель.Недействителен = ЛОЖЬ
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	Задание.ТекущийИсполнитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ВТ_Исполнители.Исполнитель КАК Справочник.Пользователи) КАК Исполнитель,
		|	ВЫБОР
		|		КОГДА ВТ_Исполнители.ЭтоПрошлыйИсполнитель = 1
		|			ТОГДА &СтрокаИсполнителиПредыдущихЭтапов
		|		КОГДА Сотрудники.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|			ТОГДА ""ПустоеПодразделение""
		|		ИНАЧЕ Сотрудники.Подразделение
		|	КОНЕЦ КАК Подразделение,
		|	ВТ_Исполнители.ЛинияПоддержки,
		|	ЕСТЬNULL(ВТ_ЗаданияИсполнителей.Количество, 0) КАК Количество
		|ИЗ
		|	ВТ_Исполнители КАК ВТ_Исполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ВТ_Исполнители.Исполнитель.Сотрудник = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаданияИсполнителей КАК ВТ_ЗаданияИсполнителей
		|		ПО ВТ_Исполнители.Исполнитель = ВТ_ЗаданияИсполнителей.Исполнитель
		|ГДЕ
		|	ВТ_Исполнители.ЛинияПоддержки В (&МассивЛинийПоддрежки)
		|УПОРЯДОЧИТЬ ПО
		|	Подразделение,
		|	ВТ_Исполнители.Исполнитель.Наименование
		|ИТОГИ
		|ПО
		|	Подразделение"; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти