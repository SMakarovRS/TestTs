#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс	

// Функция возвращает список имен ключевых реквизитов.
//
// Параметры:
//   нет
//
// Возвращаемое значение:
//   Массив - массив реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать.
//
// Параметры:
//   нет
//
// Возвращаемое значение:
//   Массив - массив реквизитов
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	РедактируемыеРеквизиты.Добавить("Организация");
	РедактируемыеРеквизиты.Добавить("Комментарий");	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

// Возвращает дни недели прописью.
//
Функция ДеньНеделиПрописью(НомерДня) Экспорт
	
	//НомерДня = Число(НомерДня);
	Если НомерДня = 1 Тогда
		Возврат "Понедельник";
	ИначеЕсли НомерДня = 2 Тогда
		Возврат "Вторник";
	ИначеЕсли НомерДня = 3 Тогда
		Возврат "Среда";
	ИначеЕсли НомерДня = 4 Тогда
		Возврат "Четверг";
	ИначеЕсли НомерДня = 5 Тогда
		Возврат "Пятница";
	ИначеЕсли НомерДня = 6 Тогда
		Возврат "Суббота";
	ИначеЕсли НомерДня = 7 Тогда
		Возврат "Воскресенье";
	Иначе
		Возврат "";
	КонецЕсли;
	
конецфункции

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;

	СписокКонтактов = Новый Массив;
	СписокКонтактов.Добавить(Ссылка.Контрагент);
	Для Каждого Строки Из Ссылка.Клиенты Цикл
		СписокКонтактов.Добавить(Строки.Клиент);
	КонецЦикла;
	
	Возврат СписокКонтактов;
	
КонецФункции

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
		
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;
	СоответствиеИзменениеОбъекта.Вставить("СоглашениеОбУровнеПредоставленияУслугиИзменениеОбъектаПроведение", НСтр("ru = 'Проведение'"));
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("СоглашениеSLAРасчетМетрикЗаписьДокумента", НСтр("ru = 'Запись документа'"));

	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура, Знач Источник) Экспорт
	
	Результат = Ложь;
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ИмяСобытия = "СоглашениеОбУровнеПредоставленияУслугиИзменениеОбъектаПроведение" Тогда
		
		Если Структура.ЭтоНовый И Источник.Проведен Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Проведен <> ИсточникПередЗаписью.Проведен И ИсточникПередЗаписью.Проведен = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
		
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция печати документа.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_СоглашениеSLA";
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(ТекущийДокумент);
		
		Если ИмяМакета = "СоглашениеSLA" Тогда 	
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СоглашениеSLA.Ссылка КАК Ссылка,
				|	СоглашениеSLA.Номер КАК Номер,
				|	СоглашениеSLA.Дата КАК ДатаДокумента,
				|	СоглашениеSLA.Проведен КАК Проведен,
				|	СоглашениеSLA.Организация КАК Организация,
				|	СоглашениеSLA.Контрагент КАК Контрагент,
				|	СоглашениеSLA.ДатаНачала КАК ДатаНачала,
				|	СоглашениеSLA.ДатаОкончания КАК ДатаОкончания,
				|	СоглашениеSLA.Комментарий КАК Комментарий,
				|	СоглашениеSLA.ДоговорКонтрагента.Представление КАК Договор,
				|	СоглашениеSLA.ДоговорКонтрагента.ВалютаРасчетов КАК ВалютаРасчетов,
				|	СоглашениеSLA.Клиенты.(
				|		Ссылка КАК Ссылка,
				|		НомерСтроки КАК НомерСтроки,
				|		Клиент КАК Клиент
				|	) КАК Клиенты
				|ИЗ
				|	Документ.СоглашениеSLA КАК СоглашениеSLA
				|ГДЕ
				|	СоглашениеSLA.Ссылка = &ТекущийДокумент";
			
			Шапка = Запрос.Выполнить().Выбрать();
			Шапка.Следующий();
			
			ВыборкаКлиенты = Шапка.Клиенты.Выбрать();
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СоглашениеSLA.ПФ_MXL_СоглашениеОбУровнеПредоставленияУслуги");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СоглашениеSLA";
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			
			СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);			
			СтруктураРуководители = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, Шапка.ДатаДокумента);
			
			Попытка
				СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);			
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Контрагент", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование")));
			Исключение
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Контрагент", Шапка.Контрагент));
			КонецПопытки;			
			
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Организация", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДолжностьРуководителя", СтруктураРуководители.РуководительДолжность));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОРуководителя", СтруктураРуководители.ФИОРуководителя));
			
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДоговорКонтрагента", """" + Шапка.Договор + """"));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Период", ПредставлениеПериода(Шапка.ДатаНачала, Шапка.ДатаОкончания)));
			
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);		
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Заполнение клиентов из табличной части Клиенты
			
			Если ВыборкаКлиенты.Количество() > 0 Тогда 
				НомерСтрокиКлиента = 0;
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаКлиенты");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				Пока ВыборкаКлиенты.Следующий() Цикл 
					НомерСтрокиКлиента = НомерСтрокиКлиента + 1;
					ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКлиенты");
					ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтрокиКлиента",	НомерСтрокиКлиента));
					ОбластьМакета.Параметры.Заполнить(Новый Структура("Клиент",				ВыборкаКлиенты.Клиент));
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокПродолжение");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Заполнение сервисов
			
			ЗапросСервисы = Новый Запрос;
			ЗапросСервисы.Текст =
				"ВЫБРАТЬ
				|	СоглашениеSLAСервисы.Сервис КАК Сервис,
				|	СоглашениеSLAСервисы.Сервис.Описание КАК СервисОписание,
				|	СоглашениеSLAСервисы.Сервис.КодСервиса КАК КодСервиса
				|ИЗ
				|	Документ.СоглашениеSLA.Сервисы КАК СоглашениеSLAСервисы
				|ГДЕ
				|	СоглашениеSLAСервисы.Ссылка = &Ссылка";
			
			ЗапросСервисы.УстановитьПараметр("Ссылка", Шапка.Ссылка);
			
			ВыборкаСервисы = ЗапросСервисы.Выполнить().Выбрать();
			
			ТЗГрафики = Новый ТаблицаЗначений;
			ТЗГрафики.Колонки.Добавить("Графики");
			
			ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
			
			Пока ВыборкаСервисы.Следующий() Цикл
				ОбластьМакета	= Макет.ПолучитьОбласть("Сервисы");
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Сервис", ВыборкаСервисы.КодСервиса + " " + ВыборкаСервисы.Сервис));
				ТабличныйДокумент.Вывести(ОбластьМакета, 1);
				
				Если Не ПустаяСтрока(ВыборкаСервисы.СервисОписание) Тогда 
					ОбластьМакета	= Макет.ПолучитьОбласть("СервисОписание");
					ОбластьМакета.Параметры.Заполнить(Новый Структура("СервисОписание", ВыборкаСервисы.СервисОписание));				
					ТабличныйДокумент.Вывести(ОбластьМакета, 2);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаСервисы.Сервис) Тогда	
					
					//Заполнение услуг
					
					ЗапросУслуги = Новый Запрос;
					ЗапросУслуги.Текст = 
						"ВЫБРАТЬ
						|	СоглашениеSLAУслуги.Услуга КАК Услуга,
						|	СоглашениеSLAУслуги.УровеньРеакцииИВыполнения КАК УровеньРеакцииИВыполнения,
						|	СоглашениеSLAУслуги.График КАК График,
						|	СоглашениеSLAУслуги.Ссылка КАК Ссылка,
						|	СоглашениеSLAУслуги.Услуга.Описание КАК УслугаОписание,
						|	СоглашениеSLAУслуги.Услуга.КодУслуги КАК КодУслуги
						|ИЗ
						|	Документ.СоглашениеSLA.Услуги КАК СоглашениеSLAУслуги
						|ГДЕ
						|	СоглашениеSLAУслуги.Сервис = &Сервис";
					
					ЗапросУслуги.УстановитьПараметр("Сервис", ВыборкаСервисы.Сервис);
					РезультатЗапросаПоУслугам = ЗапросУслуги.Выполнить().Выбрать();
					
					Если РезультатЗапросаПоУслугам.Количество() > 0 Тогда 						
						Пока РезультатЗапросаПоУслугам.Следующий() Цикл
							
							Стр = ТЗГрафики.Добавить();
							Стр.Графики = РезультатЗапросаПоУслугам.График;
							
							ОбластьМакета = Макет.ПолучитьОбласть("Услуги");
							ОбластьМакета.Параметры.Заполнить(Новый Структура("Услуга",	?(Не ПустаяСтрока(РезультатЗапросаПоУслугам.КодУслуги), 
							РезультатЗапросаПоУслугам.КодУслуги + " " + РезультатЗапросаПоУслугам.Услуга, РезультатЗапросаПоУслугам.Услуга)));
							
							ТабличныйДокумент.Вывести(ОбластьМакета, 3);
							Если Не ПустаяСтрока(РезультатЗапросаПоУслугам.УслугаОписание) Тогда 
								ОбластьМакета = Макет.ПолучитьОбласть("УслугаОписание");
								ОбластьМакета.Параметры.Заполнить(Новый Структура("УслугаОписание", РезультатЗапросаПоУслугам.УслугаОписание));
								ТабличныйДокумент.Вывести(ОбластьМакета, 4);
							КонецЕсли;
							
							Если ЗначениеЗаполнено(РезультатЗапросаПоУслугам.График) Тогда 
								ОбластьМакета = Макет.ПолучитьОбласть("ГрафикРаботы");
								ОбластьМакета.Параметры.Заполнить(Новый Структура("ГрафикРаботы", "Для услуги " + """" + РезультатЗапросаПоУслугам.Услуга + """" + " установлен график работы: " + РезультатЗапросаПоУслугам.График));								
								ТабличныйДокумент.Вывести(ОбластьМакета, 5);
							КонецЕсли;
							
							Если ЗначениеЗаполнено(РезультатЗапросаПоУслугам.УровеньРеакцииИВыполнения) Тогда
								
								// Заполнение уровней реакции
								
								ВариантРасчета = РезультатЗапросаПоУслугам.УровеньРеакцииИВыполнения.ВариантРасчета;
								
								Запрос = Новый Запрос;
								Запрос.Текст =
									"ВЫБРАТЬ
									|	УровниРеакцииИВыполнения.Ссылка КАК Ссылка,
									|	УровниРеакцииИВыполнения.Наименование КАК Наименование,
									|	УровниРеакцииИВыполнения.ВремяРеакции КАК ВремяРеакции,
									|	УровниРеакцииИВыполнения.ВремяРешения КАК ВремяРешения
									|ИЗ
									|	Справочник.УровниРеакцииИВыполнения КАК УровниРеакцииИВыполнения
									|ГДЕ
									|	УровниРеакцииИВыполнения.Ссылка = &Ссылка
									|;
									|
									|////////////////////////////////////////////////////////////////////////////////
									|ВЫБРАТЬ
									|	ВычисляемыеСроки.Наименование КАК Наименование,
									|	ВычисляемыеСроки.Операция КАК Операция,
									|	ВычисляемыеСроки.Месяцев КАК Месяцев,
									|	ВычисляемыеСроки.Недель КАК Недель,
									|	ВычисляемыеСроки.Дней КАК Дней,
									|	ВычисляемыеСроки.Часов КАК Часов,
									|	ВычисляемыеСроки.Минут КАК Минут
									|ИЗ
									|	Справочник.УровниРеакцииИВыполнения КАК УровниРеакцииИВыполнения
									|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВычисляемыеСроки КАК ВычисляемыеСроки
									|		ПО УровниРеакцииИВыполнения.ВычисляемоеВремяРеакции = ВычисляемыеСроки.Ссылка
									|ГДЕ
									|	УровниРеакцииИВыполнения.Ссылка = &Ссылка
									|
									|ОБЪЕДИНИТЬ ВСЕ
									|
									|ВЫБРАТЬ
									|	ВычисляемыеСроки.Наименование,
									|	ВычисляемыеСроки.Операция,
									|	ВычисляемыеСроки.Месяцев,
									|	ВычисляемыеСроки.Недель,
									|	ВычисляемыеСроки.Дней,
									|	ВычисляемыеСроки.Часов,
									|	ВычисляемыеСроки.Минут
									|ИЗ
									|	Справочник.УровниРеакцииИВыполнения КАК УровниРеакцииИВыполнения
									|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВычисляемыеСроки КАК ВычисляемыеСроки
									|		ПО УровниРеакцииИВыполнения.ВычисляемоеВремяРешения = ВычисляемыеСроки.Ссылка
									|ГДЕ
									|	УровниРеакцииИВыполнения.Ссылка = &Ссылка
									|;
									|
									|////////////////////////////////////////////////////////////////////////////////
									|ВЫБРАТЬ
									|	УровниРеакцииИВыполненияВремя.ВремяНачала КАК ВремяНачала,
									|	УровниРеакцииИВыполненияВремя.ВремяОкончания КАК ВремяОкончания,
									|	УровниРеакцииИВыполненияВремя.ВремяРеакции КАК ВремяРеакции,
									|	УровниРеакцииИВыполненияВремя.ВремяРешения КАК ВремяРешения
									|ИЗ
									|	Справочник.УровниРеакцииИВыполнения.Время КАК УровниРеакцииИВыполненияВремя
									|ГДЕ
									|	УровниРеакцииИВыполненияВремя.Ссылка = &Ссылка
									|;
									|
									|////////////////////////////////////////////////////////////////////////////////
									|ВЫБРАТЬ
									|	УровниРеакцииИВыполненияДниМесяца.Ссылка КАК Ссылка,
									|	УровниРеакцииИВыполненияДниМесяца.НомерСтроки КАК НомерСтроки,
									|	УровниРеакцииИВыполненияДниМесяца.ДеньНачала КАК ДеньНачала,
									|	УровниРеакцииИВыполненияДниМесяца.ДеньОкончания КАК ДеньОкончания,
									|	УровниРеакцииИВыполненияДниМесяца.ВремяРеакции КАК ВремяРеакции,
									|	УровниРеакцииИВыполненияДниМесяца.ВремяРешения КАК ВремяРешения
									|ИЗ
									|	Справочник.УровниРеакцииИВыполнения.ДниМесяца КАК УровниРеакцииИВыполненияДниМесяца
									|ГДЕ
									|	УровниРеакцииИВыполненияДниМесяца.Ссылка = &Ссылка
									|;
									|
									|////////////////////////////////////////////////////////////////////////////////
									|ВЫБРАТЬ
									|	УровниРеакцииИВыполненияПриоритеты.Приоритет КАК Приоритет,
									|	УровниРеакцииИВыполненияПриоритеты.ВремяРеакции КАК ВремяРеакции,
									|	УровниРеакцииИВыполненияПриоритеты.ВремяРешения КАК ВремяРешения
									|ИЗ
									|	Справочник.УровниРеакцииИВыполнения.Приоритеты КАК УровниРеакцииИВыполненияПриоритеты
									|ГДЕ
									|	УровниРеакцииИВыполненияПриоритеты.Ссылка = &Ссылка
									|;
									|
									|////////////////////////////////////////////////////////////////////////////////
									|ВЫБРАТЬ
									|	УровниРеакцииИВыполненияДниНедели.ДеньНедели КАК ДеньНедели,
									|	УровниРеакцииИВыполненияДниНедели.ВремяРеакции КАК ВремяРеакции,
									|	УровниРеакцииИВыполненияДниНедели.ВремяРешения КАК ВремяРешения
									|ИЗ
									|	Справочник.УровниРеакцииИВыполнения.ДниНедели КАК УровниРеакцииИВыполненияДниНедели
									|ГДЕ
									|	УровниРеакцииИВыполненияДниНедели.Ссылка = &Ссылка";
								
								Запрос.УстановитьПараметр("Ссылка", РезультатЗапросаПоУслугам.УровеньРеакцииИВыполнения);
								
								МассивРезультатов = Запрос.ВыполнитьПакет();							
								
								Если ВариантРасчета = Перечисления.ВариантыРасчетаВремениРеакцииИРешения.Независимый Тогда
									
									//	Вариант расчета - Независимый
									
									Выборка = МассивРезультатов[0].Выбрать();
									
									Если Выборка.Количество() > 0 Тогда 
										ОбластьМакета = Макет.ПолучитьОбласть("ПриоритетШапкаНезависимый");
										ТабличныйДокумент.Вывести(ОбластьМакета, 6);						
										ОбластьМакета = Макет.ПолучитьОбласть("ПриоритетСтрокаНезависимый");
										Пока Выборка.Следующий() Цикл
											ОбластьМакета.Параметры.Заполнить(Новый Структура("НаименованиеУслуга",		РезультатЗапросаПоУслугам.Услуга));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("Приоритет",				Выборка.Ссылка));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяРеакции",			Выборка.ВремяРеакции));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяРешения",			Выборка.ВремяРешения)); 										
											ТабличныйДокумент.Вывести(ОбластьМакета);
										КонецЦикла;
									КонецЕсли;
									
								ИначеЕсли ВариантРасчета = Перечисления.ВариантыРасчетаВремениРеакцииИРешения.Вычисляемый Тогда 
									
									// Вариант расчета - Вычисляемый
									
									Выборка = МассивРезультатов[1].Выбрать();
									
									Если Выборка.Количество() > 0 Тогда
										ОбластьМакета = Макет.ПолучитьОбласть("ПриоритетШапкаВычисляемый");
										ТабличныйДокумент.Вывести(ОбластьМакета, 6);
										ОбластьМакета = Макет.ПолучитьОбласть("ПриоритетСтрокаВычисляемый");
										Пока Выборка.Следующий() Цикл
											ОбластьМакета.Параметры.Заполнить(Новый Структура("Наименование",			Выборка.Наименование));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("Операция",				Выборка.Операция));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("Месяцев",				Выборка.Месяцев));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("Недель",					Выборка.Недель)); 
											ОбластьМакета.Параметры.Заполнить(Новый Структура("Дней",					Выборка.Дней));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("Часов",					Выборка.Часов));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("Минут",					Выборка.Минут));
											ТабличныйДокумент.Вывести(ОбластьМакета);
										КонецЦикла;
									КонецЕсли;	
									
								ИначеЕсли ВариантРасчета = Перечисления.ВариантыРасчетаВремениРеакцииИРешения.ЗависитОтВремениПоступившегоЗадания Тогда 
									
									//	Вариант расчета - Зависит от времени поступившего задания
									
									Выборка = МассивРезультатов[2].Выбрать();
									
									Если Выборка.Количество() > 0 Тогда
										НомерСтроки = 0;
										ОбластьМакета = Макет.ПолучитьОбласть("ПриоритетШапкаВремя");
										ТабличныйДокумент.Вывести(ОбластьМакета, 6);						
										ОбластьМакета = Макет.ПолучитьОбласть("ПриоритетСтрокаВремя");
										Пока Выборка.Следующий() Цикл
											НомерСтроки = НомерСтроки + 1;
											ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки",			НомерСтроки));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяНачала",			Формат(Выборка.ВремяНачала,		"ДФ=hh:mm")));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяОкончания",			Формат(Выборка.ВремяОкончания,	"ДФ=hh:mm")));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяРеакции",			Выборка.ВремяРеакции));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяРешения",			Выборка.ВремяРешения)); 										
											ТабличныйДокумент.Вывести(ОбластьМакета);
										КонецЦикла;
									КонецЕсли;
									
								ИначеЕсли ВариантРасчета = Перечисления.ВариантыРасчетаВремениРеакцииИРешения.ЗависитОтДняМесяцаПоступившегоЗадания Тогда 
									
									//	Вариант расчета - Зависит от дня месяца поступившего задания
									
									Выборка = МассивРезультатов[3].Выбрать();
									Если Выборка.Количество() > 0 Тогда 
										НомерСтроки = 0;
										ОбластьМакета = Макет.ПолучитьОбласть("ПриоритетШапкаМесяц");
										ТабличныйДокумент.Вывести(ОбластьМакета, 6);						
										ОбластьМакета = Макет.ПолучитьОбласть("ПриоритетСтрокаМесяц");
										Пока Выборка.Следующий() Цикл
											НомерСтроки = НомерСтроки + 1;
											ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки",			НомерСтроки));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("НаименованиеУслуга",		РезультатЗапросаПоУслугам.Услуга));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("Приоритет",				Выборка.Ссылка));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ДеньНачала",				Выборка.ДеньНачала));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ДеньОкончания",			Выборка.ДеньОкончания));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяРеакции",			Выборка.ВремяРеакции)); 
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяРешения",			Выборка.ВремяРешения));
											ТабличныйДокумент.Вывести(ОбластьМакета);
										КонецЦикла;
									КонецЕсли;	
									
								ИначеЕсли ВариантРасчета = Перечисления.ВариантыРасчетаВремениРеакцииИРешения.ЗависитОтПриоритетаПоступившегоЗадания Тогда 
									
									//	Вариант расчета - Зависит от приоритета поступившего задания
									
									Выборка = МассивРезультатов[4].Выбрать();
									Если Выборка.Количество() > 0 Тогда 
										НомерСтроки = 0;
										ОбластьМакета = Макет.ПолучитьОбласть("ПриоритетЗаданияШапка");
										ТабличныйДокумент.Вывести(ОбластьМакета, 6);						
										ОбластьМакета = Макет.ПолучитьОбласть("ПриоритетЗаданияСтрока");
										Пока Выборка.Следующий() Цикл
											НомерСтроки = НомерСтроки + 1;
											ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки",			НомерСтроки));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("Приоритет",				Выборка.Приоритет));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяРеакции",			Выборка.ВремяРеакции)); 
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяРешения",			Выборка.ВремяРешения));
											ТабличныйДокумент.Вывести(ОбластьМакета);
										КонецЦикла;
									КонецЕсли;
									
								ИначеЕсли ВариантРасчета = Перечисления.ВариантыРасчетаВремениРеакцииИРешения.ЗависитОтДняНеделиПоступившегоЗадания Тогда 
									
									//	Вариант расчета -	Зависит от дня недели поступившего задания
									
									Выборка = МассивРезультатов[5].Выбрать();
									Если Выборка.Количество() > 0 Тогда 
										НомерСтроки = 0;
										ОбластьМакета = Макет.ПолучитьОбласть("ПриоритетШапкаНеделя");
										ТабличныйДокумент.Вывести(ОбластьМакета, 6);						
										ОбластьМакета = Макет.ПолучитьОбласть("ПриоритетСтрокаНеделя");
										Пока Выборка.Следующий() Цикл
											НомерСтроки = НомерСтроки + 1;
											ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки",			НомерСтроки));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ДеньНедели",				Выборка.ДеньНедели));
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяРеакции",			Выборка.ВремяРеакции)); 
											ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяРешения",			Выборка.ВремяРешения));
											ТабличныйДокумент.Вывести(ОбластьМакета);
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;	
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
			
			Если ТЗГрафики.Количество() > 0 Тогда 
				
				ТЗГрафики.Свернуть("Графики");
				ОбластьМакета = Макет.ПолучитьОбласть("Графики");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				Для Каждого Строка Из ТЗГрафики Цикл
					ТЗРасписание = Строка.Графики.РасписаниеРаботы;
					Если Строка.Графики.СпособЗаполнения = Перечисления.СпособыЗаполненияГрафикаРаботы.ПоЦикламПроизвольнойДлины Тогда
						
						ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокГрафикаРаботы");
						ОбластьМакета.Параметры.Заполнить(Новый Структура("НаименованиеГрафика", """" + Строка.Графики + """"));
						
						ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаНачалаГрафика", Формат(Строка.Графики.ДатаНачала,"ДЛФ=Д")));
						ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаОкончанияГрафика", Формат(Строка.Графики.ДатаОкончания,"ДЛФ=Д")));
						ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаОтсчетаГрафика", Формат(Строка.Графики.ДатаОтсчета,"ДЛФ=Д")));
						Если Строка.Графики.УчитыватьПраздники = Истина Тогда 
							ТекстРасписание = НСтр("ru = 'С учетом общегосударственных праздничных дней расписание определено следующее'") + ":";
						Иначе
							ТекстРасписание = НСтр("ru = 'Расписание определено следующее (общегосударственные праздничные дни не учитываются)'") + ":";
						КонецЕсли;
						ОбластьМакета.Параметры.Заполнить(Новый Структура("Расписание", ТекстРасписание));
						ТабличныйДокумент.Вывести(ОбластьМакета);
						
						Для Каждого СтрокаРасписание Из ТЗРасписание Цикл 
							ОбластьМакета = Макет.ПолучитьОбласть("СтрокаГрафикаРаботы");
							ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтрокиГрафика", СтрокаРасписание.НомерСтроки));
							ОбластьМакета.Параметры.Заполнить(Новый Структура("ЧислоМесяца", СтрокаРасписание.НомерДня));
							ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяНачала", Формат(СтрокаРасписание.ВремяНачала,"ДЛФ=В")));
							ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяОкончания", Формат(СтрокаРасписание.ВремяОкончания,"ДЛФ=В")));
							ТабличныйДокумент.Вывести(ОбластьМакета);
						КонецЦикла;
						
					ИначеЕсли Строка.Графики.СпособЗаполнения = Перечисления.СпособыЗаполненияГрафикаРаботы.ПоНеделям Тогда 
						
						ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокГрафикаРаботыНедели");
						ОбластьМакета.Параметры.Заполнить(Новый Структура("НаименованиеГрафика", """" + Строка.Графики + """"));
						
						ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаНачалаГрафика", Формат(Строка.Графики.ДатаНачала,"ДЛФ=Д")));
						ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаОкончанияГрафика", Формат(Строка.Графики.ДатаОкончания,"ДЛФ=Д")));
						ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаОтсчетаГрафика", Формат(Строка.Графики.ДатаОтсчета,"ДЛФ=Д")));
						Если Строка.Графики.УчитыватьПраздники = Истина Тогда 
							ТекстРасписание = НСтр("ru = 'С учетом общегосударственных праздничных дней расписание определено следующее'") + ":";
						Иначе
							ТекстРасписание = НСтр("ru = 'Расписание определено следующее (общегосударственные праздничные дни не учитываются)'") + ":";
						КонецЕсли;
						ОбластьМакета.Параметры.Заполнить(Новый Структура("Расписание", ТекстРасписание));
						ТабличныйДокумент.Вывести(ОбластьМакета);
						
						Для Каждого СтрокаРасписание Из ТЗРасписание Цикл
							ОбластьМакета = Макет.ПолучитьОбласть("СтрокаГрафикаРаботыНедели");
							ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтрокиГрафика", СтрокаРасписание.НомерСтроки));
							ОбластьМакета.Параметры.Заполнить(Новый Структура("ДеньНедели", ДеньНеделиПрописью(
							СтрокаРасписание.НомерДня)));
							ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяНачала", Формат(СтрокаРасписание.ВремяНачала,"ДЛФ=В")));
							ОбластьМакета.Параметры.Заполнить(Новый Структура("ВремяОкончания", Формат(СтрокаРасписание.ВремяОкончания,"ДЛФ=В")));
							ТабличныйДокумент.Вывести(ОбластьМакета);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;			
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЕсли;
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СоглашениеSLA") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СоглашениеSLA", "Соглашение SLA", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "СоглашениеSLA"));
	КонецЕсли;
		
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт	
	
	// Соглашение SLA
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СоглашениеSLA";
	КомандаПечати.Представление = НСтр("ru = 'Соглашение SLA'");	
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;		
	КомандаПечати.Порядок = 4;
	
КонецПроцедуры

#КонецОбласти


#КонецЕсли