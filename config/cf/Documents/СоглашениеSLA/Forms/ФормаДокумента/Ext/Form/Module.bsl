
#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СЛС.ПриСозданииНаСервере(Объект, Отказ, СтандартнаяОбработка, Параметры, ЭтаФорма);	
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.ДатаНачала 		= НачалоГода(ТекущаяДатаСеанса());
		Объект.ДатаОкончания 	= КонецГода(ТекущаяДатаСеанса());
		ЗаполнитьСервисы();
		
		// Документ создается из обработки "РабочийСтол".
		Если Параметры.Свойство("РабочийСтолЗначенияЗаполнения") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.РабочийСтолЗначенияЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
		
	Контрагент					= Объект.Контрагент;
	ДоговорКонтрагента			= Объект.ДоговорКонтрагента;
	
	#Область БСП_ПриСозданииНаСервере
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	

	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ВерсионированиеОбъектов	
		
	#КонецОбласти
	        
	УстановитьВидимостьДоступность();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Корректировки документа
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);	

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
       ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// Корректировки документа
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, 
			"ДокументСоглашениеSLA (проведение)");	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СЛС.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	ЗаполнитьСервисы();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Записываем дерево.
	ДЗ = РеквизитФормыВЗначение("ДеревоСервисов", Тип("ДеревоЗначений"));
	СЛС.ЗаписатьИерархическоеДерево(ТекущийОбъект.Сервисы, ДЗ, "Сервис");
	
	Если ТекущийОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ТекущийОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		ТекущийОбъект.ДатаКорректировки = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ТекущийОбъект.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	Иначе
		ТекущийОбъект.АвторКорректировки = Пользователи.ТекущийПользователь();
	КонецЕсли; 
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СЛС.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипОплатыУслугПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если Объект.ДатаОкончания = Дата(1, 1, 1) Тогда
		Объект.ДатаОкончания = КонецГода(Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.Контрагент);
		
		Объект.ДоговорКонтрагента = СтруктураДанные.Договор;
		ДоговорПередИзменением = ДоговорКонтрагента;
		ДоговорКонтрагента = Объект.ДоговорКонтрагента;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура КлиентыКлиентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") 			
			И ЭтоТипОрганизация(ВыбранноеЗначение) Тогда
			СтандартнаяОбработка = Ложь;
					
			ОткрытьФормуВыбораОрганизации("Клиент");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораОрганизации(Знач ПолеРаботы)
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ИмяПоля", ПолеРаботы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораОрганизации", ЭтотОбъект, ПараметрыПоля); 
	ОткрытьФорму("Справочник.Организации.ФормаВыбора", , ЭтотОбъект, , , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);   
	
КонецПроцедуры

&НаСервере
Функция ЭтоТипОрганизация(Знач Значение)	
	
	Возврат Метаданные.НайтиПоТипу(Значение).Имя = "Организации";
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Клиенты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		 ТекущиеДанные[ДополнительныеПараметры.ИмяПоля] = Результат;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДереваСервисы

&НаКлиенте
Процедура ДеревоСервисовФлагПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСервисов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Флаг = 2 Тогда
		ТекущиеДанные.Флаг = 0;
	КонецЕсли;
	УправлениеITОтделом8УФКлиент.ПометитьВложенныеЭлементы(ТекущиеДанные);
	УправлениеITОтделом8УФКлиент.ПометитьЭлементыРодителей(ТекущиеДанные.ПолучитьРодителя());
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСервисовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСервисов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.Услуги.Доступность = Ложь;
		Элементы.Услуги.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Сервис", ПредопределенноеЗначение("Справочник.Сервисы.ПустаяСсылка")));
	Иначе
		Элементы.Услуги.Доступность = Истина;
		Элементы.Услуги.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Сервис", ТекущиеДанные.Сервис));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСервисовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСервисовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСервисовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоСервисов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Сервис);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоСервисов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Необходимо указать сервис для добавления услуги.'"));
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока ИЛИ НЕ ЗначениеЗаполнено(Элементы.Услуги.ТекущиеДанные.Сервис) Тогда
		Элемент.ТекущиеДанные.Сервис = ТекущиеДанные.Сервис;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоСервисов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеУслуги = Объект.Услуги.НайтиСтроки(Новый Структура("Сервис", ТекущиеДанные.Сервис));
	ТекущиеДанные.КоличествоУслуг = НайденныеУслуги.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)

	ТекущиеДанные = Элементы.ДеревоСервисов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеУслуги = Объект.Услуги.НайтиСтроки(Новый Структура("Сервис", ТекущиеДанные.Сервис));
	ТекущиеДанные.КоличествоУслуг = НайденныеУслуги.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиУслугаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Процесс) Тогда
		Структура = УправлениеSLA.ДанныеУслуги(ТекущиеДанные.Услуга);
		Если Структура <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НадписьАвторНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Спк = УправлениеITОтделом8УФКлиент.ПолучитьСписокНадписьАвтор(Объект);	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НадписьАвторНажатиеЗавершение", ЭтотОбъект), Спк, Элементы.НадписьАвтор, );
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьАвторНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт    

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "УстановитьИнтервал".
//
Процедура УстановитьИнтервал(Команда)
	
	Диалог 						= Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.Вариант 		= ВариантСтандартногоПериода.Месяц;
	Диалог.Период.ДатаНачала 	= Объект.ДатаНачала;
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончания;	
	
	ОписаниеОповещения 			= Новый ОписаниеОповещения("ПослеВыбораПериодаЗаполнения", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры // УстановитьИнтервал()

&НаКлиенте
// Процедура обрабатывает результат выбора периода заполнения текущего документа
//
Процедура ПослеВыбораПериодаЗаполнения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Объект.ДатаНачала = РезультатЗакрытия.ДатаНачала;
		Объект.ДатаОкончания = РезультатЗакрытия.ДатаОкончания;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВсеУслугиСервсиа(Команда)
		
	ТекущиеДанные = Элементы.ДеревоСервисов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Запоминаем выделенную
	ВыделенныйСервис = ТекущиеДанные.Сервис;
	// Запоминаем развернутые строки
	Массив = Новый Массив;
	МассивРазвернутыхСервисов(ДеревоСервисов, Массив);
	
	ДобавитьУслугиНаСервере(ТекущиеДанные.Сервис);
	
	// Восстанавливаем развернутые строки
	ВыделеннаяСтрока = Неопределено;
	ВосстановитьРазвернутыеСервисы(ДеревоСервисов, Массив, ВыделенныйСервис, ВыделеннаяСтрока);
	Если ВыделеннаяСтрока <> Неопределено Тогда
		Элементы.ДеревоСервисов.ТекущаяСтрока = ВыделеннаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьУслугиПоВыбранномуСервису(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСервисов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Запоминаем выделенную
	ВыделенныйСервис = ТекущиеДанные.Сервис;
	// Запоминаем развернутые строки
	Массив = Новый Массив;
	МассивРазвернутыхСервисов(ДеревоСервисов, Массив);
	
	ОчиститьУслугиНаСервере(ТекущиеДанные.Сервис);
	
	// Восстанавливаем развернутые строки
	ВыделеннаяСтрока = Неопределено;
	ВосстановитьРазвернутыеСервисы(ДеревоСервисов, Массив, ВыделенныйСервис, ВыделеннаяСтрока);
	Если ВыделеннаяСтрока <> Неопределено Тогда
		Элементы.ДеревоСервисов.ТекущаяСтрока = ВыделеннаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьУслугиПоВыбранномуСервисуВключаяДочерние(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСервисов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Запоминаем выделенную
	ВыделенныйСервис = ТекущиеДанные.Сервис;
	// Запоминаем развернутые строки
	Массив = Новый Массив;
	МассивРазвернутыхСервисов(ДеревоСервисов, Массив);
	
	ОчиститьУслугиНаСервере(ТекущиеДанные.Сервис, Ложь);	
	
	// Восстанавливаем развернутые строки
	ВыделеннаяСтрока = Неопределено;
	ВосстановитьРазвернутыеСервисы(ДеревоСервисов, Массив, ВыделенныйСервис, ВыделеннаяСтрока);
	Если ВыделеннаяСтрока <> Неопределено Тогда
		Элементы.ДеревоСервисов.ТекущаяСтрока = ВыделеннаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеУслуги(Команда)
	
	ВыделенныйСервис = Неопределено;
	
	ТекущиеДанные = Элементы.ДеревоСервисов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		// Запоминаем выделенную
		ВыделенныйСервис = ТекущиеДанные.Сервис;
		// Запоминаем развернутые строки
		Массив = Новый Массив;
		МассивРазвернутыхСервисов(ДеревоСервисов, Массив);
	КонецЕсли;	
	
	Объект.Услуги.Очистить();
	ЗаполнитьСервисы();
	
	Если ВыделенныйСервис <> Неопределено Тогда
		// Восстанавливаем развернутые строки
		ВыделеннаяСтрока = Неопределено;
		ВосстановитьРазвернутыеСервисы(ДеревоСервисов, Массив, ВыделенныйСервис, ВыделеннаяСтрока);
		Если ВыделеннаяСтрока <> Неопределено Тогда
			Элементы.ДеревоСервисов.ТекущаяСтрока = ВыделеннаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДочерние(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСервисов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Запоминаем выделенную
	ВыделенныйСервис = ТекущиеДанные.Сервис;
	// Запоминаем развернутые строки
	Массив = Новый Массив;
	МассивРазвернутыхСервисов(ДеревоСервисов, Массив);
	
	ДобавитьУслугиНаСервере(ТекущиеДанные.Сервис, Ложь);
	
	// Восстанавливаем развернутые строки
	ВыделеннаяСтрока = Неопределено;
	ВосстановитьРазвернутыеСервисы(ДеревоСервисов, Массив, ВыделенныйСервис, ВыделеннаяСтрока);
	Если ВыделеннаяСтрока <> Неопределено Тогда
		Элементы.ДеревоСервисов.ТекущаяСтрока = ВыделеннаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
	
    СвернутьРазвернутьДерево(ДеревоСервисов, Ложь); 
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	СвернутьРазвернутьДерево(ДеревоСервисов, Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьДерево(Дерево, Развернуть, СтрокаДерева = Неопределено)
    
    Если СтрокаДерева = Неопределено Тогда
    	СтрокаДерева = Дерево;
    КонецЕсли;
    
	Для Каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
        Если Развернуть = Истина Тогда
            Элементы.ДеревоСервисов.Развернуть(ИдентификаторСтроки); 
        Иначе
            Элементы.ДеревоСервисов.Свернуть(ИдентификаторСтроки); 
        КонецЕсли; 
		СвернутьРазвернутьДерево(Дерево, Развернуть, Строка); 
	КонецЦикла;    
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДругомуДокументу(Команда)
	
	ОткрытьФорму("Документ.СоглашениеSLA.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ЗаполнитьПоДругомуДокументуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДругомуДокументуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьПоДругомуДокументуSLAСервер(Результат);
		ДеревоСервисовПриАктивизацииСтроки(Неопределено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеФлаги(Команда)
	
	УстановитьСнятьФлагиСервисов(ДеревоСервисов, Истина, Неопределено); 
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлаги(Команда)
	
	УстановитьСнятьФлагиСервисов(ДеревоСервисов, Ложь, Неопределено); 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		Элементы.Договор.Видимость = Ложь;
	Иначе
		Элементы.Договор.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, Контрагент)
	
	СтруктураДанные = Новый Структура();
	
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ВалютаРасчетов = Справочники.Валюты.ПустаяСсылка();
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			ВалютаРасчетов 	= Константы.НациональнаяВалюта.Получить();
		Иначе 
			Договор 		= Контрагент.ДоговорПоУмолчанию;
			ВалютаРасчетов 	= Контрагент.ДоговорПоУмолчанию.ВалютаРасчетов;	
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанные.Вставить("Договор", 		Договор);
	СтруктураДанные.Вставить("ВалютаРасчетов", 	ВалютаРасчетов);
	
	УстановитьВидимостьДоступность();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервере
Процедура ДобавитьУслугиНаСервере(Знач Сервис, Знач ТолькоПоОдномуСервису = Истина)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Услуги.Владелец КАК Сервис,
		|	Услуги.Ссылка КАК Услуга,
		|	Услуги.Процесс КАК Процесс,
		|	Услуги.УровеньРеакцииИВыполнения КАК УровеньРеакцииИВыполнения
		|ИЗ
		|	Справочник.Услуги КАК Услуги
		|ГДЕ
		|	Услуги.Владелец = &Сервис
		|	И Услуги.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУслуг.ВРаботе)
		|	И НЕ Услуги.Ссылка В (&Услуги)";
	
	Если ТолькоПоОдномуСервису = Ложь Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Услуги.Владелец = &Сервис", "Услуги.Владелец В ИЕРАРХИИ (&Сервис)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сервис", Сервис);
	Запрос.УстановитьПараметр("Услуги", Объект.Услуги.Выгрузить(, "Услуга").ВыгрузитьКолонку("Услуга"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока 	   = Объект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	ЗаполнитьСервисы();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьУслугиНаСервере(Знач Сервис, Знач ТолькоПоОдномуСервису = Истина)
	
	Если НЕ ЗначениеЗаполнено(Сервис) Тогда
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Сервис);
	
	Если ТолькоПоОдномуСервису = Ложь Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сервисы.Ссылка КАК Сервис
			|ИЗ
			|	Справочник.Сервисы КАК Сервисы
			|ГДЕ
			|	Сервисы.Родитель В ИЕРАРХИИ(&Сервис)";
		Запрос.УстановитьПараметр("Сервис", Сервис);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Массив.Добавить(Выборка.Сервис);
		КонецЦикла;
	КонецЕсли;
	
	Индекс = Объект.Услуги.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Строки = Объект.Услуги[Индекс];
		Если Массив.Найти(Строки.Сервис) <> Неопределено Тогда
			Объект.Услуги.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	ЗаполнитьСервисы();
	
КонецПроцедуры

&НаКлиенте
Процедура МассивРазвернутыхСервисов(Эл, Массив)
	
	Для Каждого Строки Из Эл.ПолучитьЭлементы() Цикл
		
		ИдентификаторСтроки = Строки.ПолучитьИдентификатор();
		Если Элементы.ДеревоСервисов.Развернут(ИдентификаторСтроки) Тогда
			Массив.Добавить(Строки.Сервис);
		КонецЕсли;
		МассивРазвернутыхСервисов(Строки, Массив);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьРазвернутыеСервисы(Эл, Знач Массив, Знач ВыделенныйСервис, ВыделеннаяСтрока)
	
	Для Каждого Строки Из Эл.ПолучитьЭлементы() Цикл
		
		ИдентификаторСтроки = Строки.ПолучитьИдентификатор();
		
		Если Массив.Найти(Строки.Сервис) <> Неопределено Тогда
			Элементы.ДеревоСервисов.Развернуть(ИдентификаторСтроки, Ложь);
		КонецЕсли;
		
		Если ВыделеннаяСтрока = Неопределено И ВыделенныйСервис = Строки.Сервис Тогда
			ВыделеннаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		
		ВосстановитьРазвернутыеСервисы(Строки, Массив, ВыделенныйСервис, ВыделеннаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСервисы()
		
	ДеревоСервисов.ПолучитьЭлементы().Очистить();
	ДЗ = РеквизитФормыВЗначение("ДеревоСервисов", Тип("ДеревоЗначений"));
	СЛС.ПрочитатьИерархическоеДеревоСервисов(ДЗ, Объект.Сервисы, Объект.Услуги);
	ЗначениеВРеквизитФормы(ДЗ, "ДеревоСервисов");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДругомуДокументуSLAСервер(Знач ДругойДокумент)
	
	Объект.Сервисы.Очистить();
	Объект.Услуги.Очистить();
	
	Объект.Сервисы.Загрузить(ДругойДокумент.Сервисы.Выгрузить());
	Объект.Услуги.Загрузить(ДругойДокумент.Услуги.Выгрузить());
		
	ЗаполнитьСервисы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлагиСервисов(Дерево, Знач Флаг, СтрокаДерева)
	
    Если СтрокаДерева = Неопределено Тогда
    	СтрокаДерева = Дерево;
    КонецЕсли;
    
	Для Каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Строка.Флаг = Флаг;
		УстановитьСнятьФлагиСервисов(Дерево, Флаг, Строка); 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

