#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Функция возвращает список имен «ключевых» реквизитов.
//
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив реквизитов, редактируемых при групповой обработке.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	РедактируемыеРеквизиты = Новый Массив;
		
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Результат = Новый Массив;	
	Результат.Добавить(Ссылка.Контрагент);		
	
	Возврат Результат;
	
КонецФункции

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
		
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт	
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Контрагент", 
        Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Контрагент");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;
	СоответствиеИзменениеОбъекта.Вставить("ЛистУчетаРабочегоВремениИзменениеОбъектаПроведение", 
		НСтр("ru = 'Проведение'"));
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("ЛистУчетаРабочегоВремениРасчетМетрикЗаписьДокумента", 
		НСтр("ru = 'Запись документа'"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура, Знач Источник) Экспорт
	
	Результат = Ложь;
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ИмяСобытия = "ЛистУчетаРабочегоВремениИзменениеОбъектаПроведение" Тогда
		
		Если Структура.ЭтоНовый И Источник.Проведен Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Проведен <> ИсточникПередЗаписью.Проведен И ИсточникПередЗаписью.Проведен = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
		
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Процедура печати документа.
//
Функция ПечатьЛистУчетаРабочегоВремени(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЛистУчетаРабочегоВремени";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛистУчетаРабочегоВремени.Ссылка КАК Ссылка,
		|	ЛистУчетаРабочегоВремени.ВерсияДанных,
		|	ЛистУчетаРабочегоВремени.ПометкаУдаления,
		|	ЛистУчетаРабочегоВремени.Номер,
		|	ЛистУчетаРабочегоВремени.Дата КАК Дата,
		|	ЛистУчетаРабочегоВремени.Проведен,
		|	ЛистУчетаРабочегоВремени.Организация,
		|	ЛистУчетаРабочегоВремени.Автор,
		|	ЛистУчетаРабочегоВремени.ДатаСоздания,
		|	ЛистУчетаРабочегоВремени.АвторКорректировки,
		|	ЛистУчетаРабочегоВремени.ДатаКорректировки,
		|	ЛистУчетаРабочегоВремени.Комментарий,
		|	ЛистУчетаРабочегоВремени.Основание,
		|	ЛистУчетаРабочегоВремени.Контрагент,
		|	ЛистУчетаРабочегоВремени.Договор,
		|	ЛистУчетаРабочегоВремени.ДатаНачала,
		|	ЛистУчетаРабочегоВремени.ДатаОкончания,
		|	ЛистУчетаРабочегоВремени.КонтрольОплаты,
		|	ЛистУчетаРабочегоВремени.НарядыНаРаботы.(
		|		Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Наряд,
		|		Описание
		|	)
		|ИЗ
		|	Документ.ЛистУчетаРабочегоВремени КАК ЛистУчетаРабочегоВремени
		|ГДЕ
		|	ЛистУчетаРабочегоВремени.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Если ИмяМакета = "ЛистУчетаРабочегоВремени" Тогда
		Пока Шапка.Следующий() Цикл
			
			// Строки
			Запрос = Новый Запрос();
			Запрос.Текст =
            
            "ВЫБРАТЬ
            |   Трудозатраты.Описание КАК Описание,
            |   Трудозатраты.ВидРаботы КАК ВидРаботы,
            |   НАЧАЛОПЕРИОДА(Трудозатраты.ДатаНачала, ДЕНЬ) КАК День,
            |   ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Трудозатраты.ДатаНачала, ДЕНЬ), Трудозатраты.ДатаНачала, СЕКУНДА)) КАК ВремяНачала,
            |   ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Трудозатраты.ДатаОкончания, ДЕНЬ), Трудозатраты.ДатаОкончания, СЕКУНДА)) КАК ВремяОкончания,
            |   Трудозатраты.ДатаНачала КАК ДатаНачала,
            |   Трудозатраты.ДатаОкончания КАК ДатаОкончания,
            |   Трудозатраты.Длительность КАК Длительность,
            |   Трудозатраты.Инициатор КАК Инициатор,
            |   Трудозатраты.Исполнитель КАК Исполнитель
            |ИЗ
            |   РегистрСведений.Трудозатраты КАК Трудозатраты
            |ГДЕ
            |   Трудозатраты.Объект В
            |           (ВЫБРАТЬ
            |               ЛистУчетаРабочегоВремениНарядыНаРаботы.Наряд
            |           ИЗ
            |               Документ.ЛистУчетаРабочегоВремени.НарядыНаРаботы КАК ЛистУчетаРабочегоВремениНарядыНаРаботы
            |           ГДЕ
            |               ЛистУчетаРабочегоВремениНарядыНаРаботы.Ссылка = &Ссылка)
            |
            |УПОРЯДОЧИТЬ ПО
            |   Трудозатраты.ДатаНачала";
			
			Запрос.УстановитьПараметр("Ссылка", Шапка.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();		
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;		
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЛистУчетаРабочегоВремени_ПФ_MXL_" + ИмяМакета;
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЛистУчетаРабочегоВремени.ПФ_MXL_" + ИмяМакета);
			
			// Шапка
			СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, ,);
			СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата, ,);
			СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
            СведенияОбОтветсвенных = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, 
                Шапка.Дата);
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			СтруктураЗаполнения.Вставить("НомерДата", СтрШаблон(НСтр("ru = '%1 от %2'"), НомерДокумента, 
                Формат(Шапка.Дата, "ДЛФ=DD")));
			СтруктураЗаполнения.Вставить("ПредставлениеОрганизации", 
				СокрЛП(УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, 
					"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
			СтруктураЗаполнения.Вставить("ПредставлениеЗаказчика", 
				СокрЛП(УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, 
					"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
			СтруктураЗаполнения.Вставить("Организация", Шапка.Организация);
			СтруктураЗаполнения.Вставить("Контрагент", Шапка.Контрагент);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Заголовок шапки.
			
			ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы"); 
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			
			Выборка.Сбросить();
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("Строка");				
			ОбластьИтого		 = Макет.ПолучитьОбласть("Итого");
			ОбластьПодвал		 = Макет.ПолучитьОбласть("Подвал");
			ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
			нпп = 1;
			ДлительностьВЧасах = 0;
			
			ИтогПоСтранице = 0;
			СтрокаИтогоПодвал = Новый Массив; 
			СтрокаИтогоПодвал.Добавить(ОбластьСтрокаТаблицы); 
			СтрокаИтогоПодвал.Добавить(ОбластьИтого); 
			СтрокаИтогоПодвал.Добавить(ОбластьПодвал); 
			
			Пока Выборка.Следующий() Цикл
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(Выборка);
				ОбластьСтрокаТаблицы.Параметры.Заполнить(Новый Структура("Работа", ?(ПустаяСтрока(Выборка.Описание), 
					Выборка.Услуга, Выборка.Описание)));
				ОбластьСтрокаТаблицы.Параметры.Заполнить(Новый Структура("нпп", нпп));

                Длительность = Окр(Выборка.Длительность / 3600, 2);
                ОбластьСтрокаТаблицы.Параметры.Заполнить(Новый Структура("ДлительностьВЧасах", Длительность));
                
				Если Не ТабличныйДокумент.ПроверитьВывод(СтрокаИтогоПодвал) Тогда 
					ОбластьПодвалТаблицы.Параметры.Заполнить(Новый Структура("ДлительностьВЧасахПоСтранице", ИтогПоСтранице));
					ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					ИтогПоСтранице = 0;
				КонецЕсли;			
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);			
				ДлительностьВЧасах = ДлительностьВЧасах + Длительность;
				нпп = нпп + 1;
				ИтогПоСтранице = ИтогПоСтранице + Длительность;
			КонецЦикла;
			
			// Итог.
			ОбластьИтого.Параметры.Заполнить(Новый Структура("ДлительностьВЧасах", 
                УправлениеITОтделом8УФ.ФорматСумм(ДлительностьВЧасах)));
			ТабличныйДокумент.Вывести(ОбластьИтого);
			
			// Подвал.
			ОбластьПодвал.Параметры.Заполнить(Новый Структура("Исполнитель",
				СокрЛП(УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование"))));
			ОбластьПодвал.Параметры.Заполнить(Новый Структура("Заказчик",
				СокрЛП(УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование"))));
			                                                                             
			ОбластьПодвал.Параметры.Заполнить(Новый Структура("ФИОИсполнитель",	СведенияОбОтветсвенных.ФИОРуководителя));
			
			Если ТипЗнч(Шапка.Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Шапка.Контрагент) Тогда
				ОбластьПодвал.Параметры.Заполнить(Новый Структура("ФИОЗаказчик", Шапка.Контрагент.КонтактноеЛицо));
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
		
		ТабличныйДокумент.АвтоМасштаб = Истина;
		
	ИначеЕсли ИмяМакета = "ЛистУчетаРабочегоВремениПустой" Тогда
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;		
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЛистУчетаРабочегоВремениПустой_ПФ_MXL_" + ИмяМакета;		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЛистУчетаРабочегоВремени.ПФ_MXL_ЛистУчетаРабочегоВремени");
		СтруктураЗаполнения.Очистить();
		
		// Шапка
		Если Шапка.Следующий() Тогда 
			СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, ,);
			СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата, ,);
			СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
            СведенияОбОтветсвенных = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, 
                Шапка.Дата);
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			СтруктураЗаполнения.Вставить("НомерДата", НомерДокумента
				+ " от "
				+ Формат(Шапка.Дата, "ДЛФ=DD"));
			СтруктураЗаполнения.Вставить("ПредставлениеОрганизации",
				СокрЛП(УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, 
					"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
			СтруктураЗаполнения.Вставить("ПредставлениеЗаказчика",
				СокрЛП(УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, 
					"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
			СтруктураЗаполнения.Вставить("Организация", Шапка.Организация);
			СтруктураЗаполнения.Вставить("Контрагент", Шапка.Контрагент);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПустая");
			Для Счетчик = 1 По 7 Цикл
				ТабличныйДокумент.Вывести(ОбластьМакета);	
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоПустая");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Подвал.
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			СтруктураЗаполнения.Вставить("Исполнитель",
				СокрЛП(УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование")));
			СтруктураЗаполнения.Вставить("Заказчик",
				СокрЛП(УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование")));
			СтруктураЗаполнения.Вставить("ФИОИсполнитель", СведенияОбОтветсвенных.ФИОРуководителя);			
            Если ТипЗнч(Шапка.Контрагент) = Тип("СправочникСсылка.Контрагенты") 
                И ЗначениеЗаполнено(Шапка.Контрагент) Тогда
				СтруктураЗаполнения.Вставить("ФИОЗаказчик", Шапка.Контрагент.КонтактноеЛицо);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПустая");
			Для Счетчик = 1 По 8 Цикл
				ТабличныйДокумент.Вывести(ОбластьМакета);	
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоПустая");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура печати документа.
//
Функция ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЛистУчетаРабочегоВремени";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛистУчетаРабочегоВремени.Ссылка КАК Ссылка,
	|	ЛистУчетаРабочегоВремени.Номер,
	|	ЛистУчетаРабочегоВремени.Дата КАК ДатаДокумента,
	|	ЛистУчетаРабочегоВремени.Организация,
	|	ЛистУчетаРабочегоВремени.Контрагент,
	|	ЛистУчетаРабочегоВремени.Договор,
	|	ЛистУчетаРабочегоВремени.Организация.Префикс КАК Префикс
	|ИЗ
	|	Документ.ЛистУчетаРабочегоВремени КАК ЛистУчетаРабочегоВремени
	|ГДЕ
	|	ЛистУчетаРабочегоВремени.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛистУчетаРабочегоВремениНарядыНаРаботы.Наряд,
		|	ЛистУчетаРабочегоВремениНарядыНаРаботы.Наряд.СуммаВключаетНДС КАК ЕстьНДС
		|ИЗ
		|	Документ.ЛистУчетаРабочегоВремени.НарядыНаРаботы КАК ЛистУчетаРабочегоВремениНарядыНаРаботы
		|ГДЕ
		|	ЛистУчетаРабочегоВремениНарядыНаРаботы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Шапка.Ссылка);
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Наряд Из Результат Цикл
			Если Наряд.ЕстьНДС = Истина Тогда 
				СуммаВключаетНДС = Истина;
				Прервать;
			Иначе
				СуммаВключаетНДС = Ложь;
			КонецЕсли;	
		КонецЦикла;	
		
		// Строки		
		Запрос = Новый Запрос;
		Запрос.Текст =	
		"ВЫБРАТЬ
		|	НарядНаРаботыНоменклатура.Ссылка,
		|	НарядНаРаботыНоменклатура.НомерСтроки,
		|	НарядНаРаботыНоменклатура.Номенклатура КАК Запас,
		|	НарядНаРаботыНоменклатура.Количество,
		|	НарядНаРаботыНоменклатура.Описание,
		|	НарядНаРаботыНоменклатура.Подразделение,
		|	НарядНаРаботыНоменклатура.СтатьяДоходовРасходов,
		|	НарядНаРаботыНоменклатура.ЕдиницаИзмерения,
		|	НарядНаРаботыНоменклатура.Цена,
		|	НарядНаРаботыНоменклатура.Сумма,
		|	НарядНаРаботыНоменклатура.СтавкаНДС,
		|	НарядНаРаботыНоменклатура.СуммаНДС,
		|	НарядНаРаботыНоменклатура.Всего
		|ИЗ
		|	Документ.НарядНаРаботы.Номенклатура КАК НарядНаРаботыНоменклатура
		|ГДЕ
		|	НарядНаРаботыНоменклатура.Ссылка В(&СписокНарядов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НарядНаРаботыРаботы.Ссылка,
		|	НарядНаРаботыРаботы.НомерСтроки,
		|	НарядНаРаботыРаботы.Услуга.Наименование,
		|	НарядНаРаботыРаботы.Количество,
		|	НарядНаРаботыРаботы.Описание,
		|	НарядНаРаботыРаботы.Подразделение,
		|	НарядНаРаботыРаботы.СтатьяДоходовРасходов,
		|	НарядНаРаботыРаботы.ЕдиницаИзмерения,
		|	НарядНаРаботыРаботы.Цена,
		|	НарядНаРаботыРаботы.Сумма,
		|	НарядНаРаботыРаботы.СтавкаНДС,
		|	НарядНаРаботыРаботы.СуммаНДС,
		|	НарядНаРаботыРаботы.Всего
		|ИЗ
		|	Документ.НарядНаРаботы.Работы КАК НарядНаРаботыРаботы
		|ГДЕ
		|	НарядНаРаботыРаботы.Ссылка В(&СписокНарядов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НарядНаРаботыНоменклатура.НомерСтроки";					
		
		Запрос.УстановитьПараметр("СписокНарядов", Результат);
		Выборка = Запрос.Выполнить();
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;		
		
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЛистУчетаРабочегоВремени_ПФ_MXL_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЛистУчетаРабочегоВремени.ПФ_MXL_" + ИмяМакета);
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеБезЛоготипа");			
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			СтруктураЗаполнения.Вставить("БанкПолучателяПредставление", 
				СведенияОбОрганизации.Банк.Наименование + " " + СведенияОбОрганизации.Банк.Город);
		КонецЕсли; 
		СтруктураЗаполнения.Вставить("ИНН", СведенияОбОрганизации.ИНН);
		СтруктураЗаполнения.Вставить("КПП", СведенияОбОрганизации.КПП);
		СтруктураЗаполнения.Вставить("ПредставлениеПоставщика", СведенияОбОрганизации.ПолноеНаименование);
		СтруктураЗаполнения.Вставить("БИКБанкаПолучателя", СведенияОбОрганизации.БИК);
		СтруктураЗаполнения.Вставить("СчетБанкаПолучателяПредставление", СведенияОбОрганизации.КоррСчет);
		СтруктураЗаполнения.Вставить("СчетПолучателяПредставление", СведенияОбОрганизации.НомерСчета);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка",
			СтрШаблон(НСтр("ru = 'Счет на оплату № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);										
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика",
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, 
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПолучателя",
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте,
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;
		
		ТЗ = Выборка.Выгрузить();
		ТЗ.Свернуть("Запас,ЕдиницаИзмерения,Цена","Количество,Сумма,СуммаНДС,Всего");
		Для Каждого Строка Из ТЗ Цикл
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(Строка);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки", Количество));
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			Сумма	= Сумма 	+ Строка.Сумма;
			СуммаНДС= СуммаНДС	+ Строка.СуммаНДС;
			Всего	= Всего		+ Строка.Всего;
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", УправлениеITОтделом8УФ.ФорматСумм(Сумма)));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			СтруктураЗаполнения.Вставить("НДС", НСтр("ru = 'Без налога (НДС)'"));
			СтруктураЗаполнения.Вставить("ВсегоНДС", "-");
		Иначе
			СтруктураЗаполнения.Вставить("НДС", 
				?(СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":");
			СтруктураЗаполнения.Вставить("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДС));
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		СтруктураЗаполнения.Вставить("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), Строка(Количество), 
				УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту())));
		
		СтруктураЗаполнения.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, 
			УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту()));
			
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		СтруктураРуководители = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, 
			Шапка.ДатаДокумента);
		СтруктураЗаполнения.Вставить("ФИОРуководителя", СтруктураРуководители.ФИОРуководителя);
		СтруктураЗаполнения.Вставить("ФИОБухгалтера", 	СтруктураРуководители.ФИОГлавногоБухгалтера);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура печати документа.
//
Функция ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_НарядНаРаботы";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛистУчетаРабочегоВремени.Ссылка КАК Ссылка,
	|	ЛистУчетаРабочегоВремени.Номер,
	|	ЛистУчетаРабочегоВремени.Дата КАК ДатаДокумента,
	|	ЛистУчетаРабочегоВремени.Организация,
	|	ЛистУчетаРабочегоВремени.Основание,
	|	ЛистУчетаРабочегоВремени.Контрагент,
	|	ЛистУчетаРабочегоВремени.Договор,
	|	ЛистУчетаРабочегоВремени.Организация.Префикс КАК Префикс
	|ИЗ
	|	Документ.ЛистУчетаРабочегоВремени КАК ЛистУчетаРабочегоВремени
	|ГДЕ
	|	ЛистУчетаРабочегоВремени.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";

	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛистУчетаРабочегоВремениНарядыНаРаботы.Наряд,
		|	ЛистУчетаРабочегоВремениНарядыНаРаботы.Наряд.СуммаВключаетНДС КАК ЕстьНДС
		|ИЗ
		|	Документ.ЛистУчетаРабочегоВремени.НарядыНаРаботы КАК ЛистУчетаРабочегоВремениНарядыНаРаботы
		|ГДЕ
		|	ЛистУчетаРабочегоВремениНарядыНаРаботы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Шапка.Ссылка);
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Наряд Из Результат Цикл
			Если Наряд.ЕстьНДС = Истина Тогда 
				СуммаВключаетНДС = Истина;
				Прервать;
			Иначе
				СуммаВключаетНДС = Ложь;
			КонецЕсли;	
		КонецЦикла;	
		
		// Строки
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НарядНаРаботыРаботы.Ссылка КАК Ссылка,
			|	НарядНаРаботыРаботы.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(НарядНаРаботыРаботы.Описание, 1, 1024) = """"
			|			ТОГДА НарядНаРаботыРаботы.Услуга
			|		ИНАЧЕ ПОДСТРОКА(НарядНаРаботыРаботы.Описание, 1, 1024)
			|	КОНЕЦ КАК Товар,
			|	НарядНаРаботыРаботы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	НарядНаРаботыРаботы.Количество КАК Количество,
			|	НарядНаРаботыРаботы.Описание КАК Содержание,
			|	НарядНаРаботыРаботы.Цена КАК Цена,
			|	НарядНаРаботыРаботы.Сумма КАК Сумма,
			|	НарядНаРаботыРаботы.СтавкаНДС КАК СтавкаНДС,
			|	НарядНаРаботыРаботы.СуммаНДС КАК СуммаНДС,
			|	НарядНаРаботыРаботы.Всего КАК Всего
			|ИЗ
			|	Документ.НарядНаРаботы.Работы КАК НарядНаРаботыРаботы
			|ГДЕ
			|	НарядНаРаботыРаботы.Ссылка В(&СписокНарядов)";
		
		Запрос.УстановитьПараметр("СписокНарядов", Результат);
		ВыборкаРаботы = Запрос.Выполнить();
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;		
		
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЛистУчетаРабочегоВремени_ПФ_MXL_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЛистУчетаРабочегоВремени.ПФ_MXL_" + ИмяМакета);
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", СтрШаблон(НСтр("ru = 'Акт № %1 от %2'"), 
			НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, 
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПолучателя",
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, 
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);		
			
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");		
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;
		
		ТЗ = ВыборкаРаботы.Выгрузить();
		ТЗ.Свернуть("Товар,ЕдиницаИзмерения,Цена","Количество,Сумма,СуммаНДС,Всего");
		
		Для Каждого Строка Из ТЗ Цикл
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(Строка);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки", Количество));
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			Сумма	= Сумма 	+ Строка.Сумма;
			СуммаНДС= СуммаНДС	+ Строка.СуммаНДС;
			Всего	= Всего		+ Строка.Всего;
		КонецЦикла;
						
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", УправлениеITОтделом8УФ.ФорматСумм(Сумма)));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			СтруктураЗаполнения.Вставить("НДС", НСтр("ru = 'Без налога (НДС)'"));
			СтруктураЗаполнения.Вставить("ВсегоНДС", "-");
		Иначе
			СтруктураЗаполнения.Вставить("НДС", 
				?(СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":");
			СтруктураЗаполнения.Вставить("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДС));
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), Строка(Количество), 
				УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту()))));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью", 
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, 
				УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту())));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Функция печати документа
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Если ИмяМакета = "АктОбОказанииУслуг" Тогда
		
		Возврат ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ИмяМакета);
	
	ИначеЕсли ИмяМакета = "ЛистУчетаРабочегоВремени" Или ИмяМакета = "ЛистУчетаРабочегоВремениПустой" Тогда
		
		Возврат ПечатьЛистУчетаРабочегоВремени(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "СчетНаОплату" Тогда
		
		Возврат ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ИмяМакета);

	КонецЕсли;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
					ПараметрыПечати,
					КоллекцияПечатныхФорм,
					ОбъектыПечати,
					ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслуг") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктОбОказанииУслуг", 
			НСтр("ru = 'Акт об оказании услуг'"), 
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктОбОказанииУслуг"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистУчетаРабочегоВремени") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЛистУчетаРабочегоВремени", 
			НСтр("ru = 'Лист учета рабочего времени'"), 
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ЛистУчетаРабочегоВремени"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистУчетаРабочегоВремениПустой") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЛистУчетаРабочегоВремениПустой",
			НСтр("ru = 'Лист учета рабочего времени (пустой)'"),
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ЛистУчетаРабочегоВремениПустой"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплату") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаОплату",
			НСтр("ru = 'Счет на оплату'"),
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "СчетНаОплату"));	
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;		
	КомандаПечати.Порядок = 2;
	
	// ЛУРВ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЛистУчетаРабочегоВремени";
	КомандаПечати.Представление = НСтр("ru = 'Лист учета рабочего времени'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 4;
	
	// ЛУРВ Пустой
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЛистУчетаРабочегоВремениПустой";
	КомандаПечати.Представление = НСтр("ru = 'Лист учета рабочего времени (пустой)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.НеВыполнятьЗаписьВФорме = Истина;	
	КомандаПечати.Порядок = 5;
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;		
	КомандаПечати.Порядок = 8;

КонецПроцедуры

#КонецОбласти

#КонецЕсли