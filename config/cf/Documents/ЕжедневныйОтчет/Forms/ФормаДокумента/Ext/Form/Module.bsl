
#Область ОписаниеПеременных
// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	мТекущийПользователь = Пользователи.ТекущийПользователь();
	ЭтоВебКлиент = УправлениеITОтделом8УФ.ПриложениеЯвляетсяВебКлиентом();
	
	//@skip-warning
	СЛС.ПриСозданииНаСервере(Объект, Отказ, СтандартнаяОбработка, Параметры, ЭтаФорма);	
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Пользователь) Тогда
			Объект.Пользователь = мТекущийПользователь;
			ПользовательПриИзмененииНаСервере();
		КонецЕсли;
		
		Если Объект.Дата = Дата(1, 1, 1) Тогда
			Объект.Дата = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		
		// Документ создается из обработки "РабочийСтол".
		Если Параметры.Свойство("РабочийСтолЗначенияЗаполнения") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.РабочийСтолЗначенияЗаполнения);
		КонецЕсли;
		
	Иначе
		
		// Проверка прав на открытие чужого ежедневного отчета.		
		Если Объект.Пользователь <> мТекущийПользователь И НЕ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") Тогда
			Подчиненные = УправлениеITОтделом8УФ.СписокПодчиненныхПользователей(мТекущийПользователь);
			Если Подчиненные.Найти(Объект.Пользователь) = Неопределено Тогда
				Отказ = Истина;
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Документ %1 не доступен к просмотру. У Вас нет прав на его просмотр'"), 
						Объект.Ссылка));
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Пользователь <> Пользователи.ТекущийПользователь() Тогда			
			ТолькоПросмотр = НЕ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава");			
		КонецЕсли;
			
	КонецЕсли;
	
	Элементы.РаботыЗаполнитьПоЗаданиям.Видимость 		= ПравоДоступа("Чтение", Метаданные.Документы.Задание);
	Элементы.РаботыЗаполнитьПоНарядамНаРаботы.Видимость = ПравоДоступа("Чтение", Метаданные.Документы.НарядНаРаботы);
	
	#Область БСП_ПриСозданииНаСервере
	
	// СтандартныеПодсистемы.Свойства.
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов.

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	

	// ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ВерсионированиеОбъектов.	
		
	#КонецОбласти
	
	Если ЗначениеЗаполнено(Объект.Пользователь) Тогда
		ТекущийЭлемент = Элементы.Работы;
	Иначе
		ТекущийЭлемент = Элементы.Пользователь
	КонецЕсли;
	
	Элементы.ГруппаДатыШапка.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Массив = Новый Массив(); 
	Массив.Добавить(Тип("СправочникСсылка.Проекты")); 	
	Массив.Добавить(Тип("ДокументСсылка.Задание"));
	Элементы.РаботыИсточник.ОграничениеТипа = Новый ОписаниеТипов(Массив);
	
	УстановитьВидимостьДоступность();
	УстановитьЗаголовкиСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства.
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства.
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Корректировки документа.
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
       ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Корректировки документа.
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, 
			"ДокументЕжедневныйОтчет (проведение)");	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СЛС.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства.
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства.
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения.
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения.
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры // ПриЧтенииНаСервере().

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства.
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства.
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ТекущийОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		ТекущийОбъект.ДатаКорректировки = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ТекущийОбъект.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	Иначе
		ТекущийОбъект.АвторКорректировки = Пользователи.ТекущийПользователь();
	КонецЕсли; 
	
	// СтандартныеПодсистемы.Свойства.
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства.
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	//@skip-warning
	СЛС.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	ПользовательПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ПоложениеДаты <> 
		ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		
		Для Каждого Строки Из Объект.Работы Цикл
			
			Строки.ВремяНачала 		= НачалоДня(Объект.Дата) 
				+ Час(Строки.ВремяНачала) * 3600 
				+ Минута(Строки.ВремяНачала) * 60;
			Строки.ВремяОкончания 	= НачалоДня(Объект.Дата) 
				+ Час(Строки.ВремяОкончания) * 3600 
				+ Минута(Строки.ВремяОкончания) * 60;
			Строки.Длительность		= Строки.ВремяОкончания - Строки.ВремяНачала;
				
			Часы = Цел(Строки.Длительность / 3600);
			Минуты = (Строки.Длительность - Часы * 3600) / 60;
		
			Строки.ДлительностьВремя = Дата(0001, 01, 01, Часы, Минуты, 0);
			
		КонецЦикла;	
		
		УстановитьВидимостьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
КонецПроцедуры

&НаКлиенте
Процедура НадписьАвторНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НадписьАвторНажатиеЗавершение", ЭтотОбъект), 
		УправлениеITОтделом8УФКлиент.ПолучитьСписокНадписьАвтор(Объект), Элементы.НадписьАвтор, );
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура НадписьАвторНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиРаботы

&НаКлиенте
Процедура РаботыВремяНачалаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрока.ВремяНачала > ТекущаяСтрока.ВремяОкончания Тогда
		ТекущаяСтрока.ВремяОкончания = ТекущаяСтрока.ВремяНачала;
	КонецЕсли;	
		
	РассчитатьДлительность(ТекущаяСтрока);	
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ВремяОкончания.
&НаКлиенте
Процедура РаботыВремяОкончанияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрока.ВремяНачала > ТекущаяСтрока.ВремяОкончания Тогда
		ТекущаяСтрока.ВремяНачала = ТекущаяСтрока.ВремяОкончания;
	КонецЕсли; 
		
	РассчитатьДлительность(ТекущаяСтрока);
	
КонецПроцедуры // РаботыВремяОкончанияПриИзменении()

// Процедура производит расчет длительности выполнения операций.
//
// Параметры:
//  Нет.
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьДлительность(ТекущаяСтрока)
	
	ДлительностьВСекундах = 
		Дата(Год(ТекущаяСтрока.ВремяОкончания), Месяц(ТекущаяСтрока.ВремяОкончания), 
			День(ТекущаяСтрока.ВремяОкончания),	Час(ТекущаяСтрока.ВремяОкончания), 
			Минута(ТекущаяСтрока.ВремяОкончания), 0) 
		- Дата(Год(ТекущаяСтрока.ВремяНачала), Месяц(ТекущаяСтрока.ВремяНачала), 
			День(ТекущаяСтрока.ВремяНачала), Час(ТекущаяСтрока.ВремяНачала), 
			Минута(ТекущаяСтрока.ВремяНачала), 0); 
	
	Часы = Цел(ДлительностьВСекундах / 3600);
	Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
	Если Часы = 23 И Минуты = 59 Тогда
		Секунды = 59;
	Иначе
		Секунды = 0;
	КонецЕсли;	
	ТекущаяСтрока.ДлительностьВремя = Дата(0001, 01, 01, Часы, Минуты, Секунды);
	ТекущаяСтрока.Длительность 		= ДлительностьВСекундах + Секунды;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	
	УстановитьВидимостьДоступность();
	УстановитьЗаголовкиСтраниц();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если НоваяСтрока Тогда

		Если Копирование Тогда
			ТекущиеДанные.ДатаРаботы = Дата(1, 1, 1);
			ТекущиеДанные.ВремяНачала = Дата(1, 1, 1);	
			ТекущиеДанные.ВремяОкончания = Дата(1, 1, 1);
			ЗаполнитьВремяСервер(ТекущиеДанные.ДатаРаботы, 
				ТекущиеДанные.ВремяНачала, 
				ТекущиеДанные.ВремяОкончания);		
			РассчитатьДлительность(ТекущиеДанные);
		КонецЕсли;
		 	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РаботыОписаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ДатаРаботы = Дата(1, 1, 1) Тогда
		ЗаполнитьВремяСервер(ТекущиеДанные.ДатаРаботы, 
			ТекущиеДанные.ВремяНачала, 
			ТекущиеДанные.ВремяОкончания);		
		РассчитатьДлительность(ТекущиеДанные);		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Объект.ПоложениеДаты = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	УстановитьВидимостьДоступность();
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ЕжедневныйОтчет.Работы";
	ПараметрыЗагрузки.Заголовок 			  = НСтр("ru = 'Загрузка списка работ из файла'");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьРаботыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРаботыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьРаботыИзФайлаНаСервере(АдресЗагруженныхДанных);
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРаботыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	РаботыДобавлены = Ложь;
	Для Каждого СтрокаРаботы Из ЗагруженныеДанные Цикл 
		
		ЗаполнитьЗначенияСвойств(Объект.Работы.Добавить(), СтрокаРаботы);
		РаботыДобавлены = Истина;

	КонецЦикла;
	
	Если РаботыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДлительностьВремяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ТекущаяСтрока.ВремяОкончания = ТекущаяСтрока.ВремяНачала 
		+ Час(ТекущаяСтрока.ДлительностьВремя) * 3600 
		+ Минута(ТекущаяСтрока.ДлительностьВремя) * 60;
	РассчитатьДлительность(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВидРаботыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.Описание) Тогда
		ТекущиеДанные.Описание = Строка(ТекущиеДанные.ВидРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДатаРаботыПриИзменении(Элемент)
	
    Строки = Элементы.Работы.ТекущиеДанные;
	Если Строки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строки.ВремяНачала 		= НачалоДня(Строки.ДатаРаботы) 
		+ Час(Строки.ВремяНачала) * 3600 
		+ Минута(Строки.ВремяНачала) * 60;
	Строки.ВремяОкончания 	= НачалоДня(Строки.ДатаРаботы) 
		+ Час(Строки.ВремяОкончания) * 3600 
		+ Минута(Строки.ВремяОкончания) * 60;
	Строки.Длительность		= Строки.ВремяОкончания - Строки.ВремяНачала;
			
	Часы = Цел(Строки.Длительность / 3600);
	Минуты = (Строки.Длительность - Часы * 3600) / 60;
	
	Строки.ДлительностьВремя = Дата(0001, 01, 01, Часы, Минуты, 0);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоЗаданиям(Команда)
	
	ЗаполнитьПоЗаданиямНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНарядамНаРаботы(Команда)
	
	ЗаполнитьПоНарядамНаРаботыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВремени(Команда)
	
	Объект.Работы.Сортировать("ВремяНачала");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВсемДокументамВКоторыхРаботали(Команда)
	
	ЗаполнитьПоВсемДокументамВКоторыхРаботалиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТрудозатратам(Команда)
	
	ЗаполнитьПоТрудозатратамНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьТабличнуюЧастьЗавершение", ЭтотОбъект), 
		НСтр("ru = 'Очистить табличную часть?'"), Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧастьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Работы.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокумента(Команда)
	// 1. Формируем структуру параметров для заполнения формы "Настройка документа".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоложениеДаты", 			Объект.ПоложениеДаты);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", 	Ложь);	
	ОткрытьФорму("ОбщаяФорма.НастройкаДокумента", СтруктураПараметров,,,,, 
		Новый ОписаниеОповещения("НастройкаДокументаЗавершение", ЭтотОбъект), 
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    // 2. Открываем форму "Цены и Валюта".
    СтруктураНастройкаДокумента = Результат;
    
    // 3. Применяем изменения, сделанные в форме "Настройка документа".
    Если ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") 
    	И СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда		
        Объект.ПоложениеДаты = СтруктураНастройкаДокумента.ПоложениеДаты;
        
        УстановитьВидимостьДоступность();
		Модифицированность = Истина;
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, 
	СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

/// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ГруппаДатыШапка.ТекущаяСтраница = 
		?(Объект.ПоложениеДаты = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти, 
			Элементы.ГруппаПериодДат, Элементы.ГруппаНомерДата);
	Элементы.РаботыДатаРаботы.Видимость = 
		Объект.ПоложениеДаты = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	
	Элементы.ВсегоЗаДень.Заголовок = ТрудозатратыСервер.ПредставлениеПериодаЕжедневногоОтчета(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиСтраниц()
	
	Элементы.ГруппаРаботы.Заголовок = "Работы" + ?(Объект.Работы.Количество() > 0, " (" 
		+ Строка(Объект.Работы.Количество()) + ")", "");
	
КонецПроцедуры

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", УправлениеITОтделом8УФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, 
		ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Процедура ПользовательПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Пользователь.Сотрудник) Тогда
		Объект.Организация 		= Объект.Пользователь.Сотрудник.Организация;
		Объект.Подразделение 	= Объект.Пользователь.Сотрудник.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВремяСервер(ДатаРаботы, ВремяНачала, ВремяОкончания)
	
	Если ВремяНачала = Дата(1, 1, 1) И ВремяОкончания = Дата(1, 1, 1) Тогда
		
		Для Каждого Строки Из Объект.Работы Цикл
			ДатаРаботы = ?(Строки.ДатаРаботы > ДатаРаботы, Строки.ДатаРаботы, ДатаРаботы);
			Если Строки.ВремяОкончания > ВремяНачала Тогда
				ВремяНачала = Строки.ВремяОкончания;
			КонецЕсли;
		КонецЦикла;
		
		Если ДатаРаботы = Дата(1, 1, 1) Тогда
			ДатаРаботы = НачалоДня(ТекущаяДатаСеанса());
			ВремяНачала = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
				
		Если НачалоДня(ДатаРаботы) = НачалоДня(ТекущаяДатаСеанса()) И ВремяНачала <= ТекущаяДатаСеанса() Тогда
			ВремяОкончания = ТекущаяДатаСеанса();
		Иначе
			ВремяОкончания = ВремяНачала + 3600;			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаданиямНаСервере()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаданиеЭтапы.Ссылка КАК Источник,
		|	ВЫБОР
		|		КОГДА ЗаданиеЭтапы.ДатаНачала МЕЖДУ &НачалоДня И &ОкончаниеДня
		|			ТОГДА НАЧАЛОПЕРИОДА(ЗаданиеЭтапы.ДатаНачала, МИНУТА)
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&НачалоДня, ЧАС, 9)
		|	КОНЕЦ КАК ВремяНачала,
		|	ВЫБОР
		|		КОГДА ЗаданиеЭтапы.ДатаОкончания МЕЖДУ &НачалоДня И &ОкончаниеДня
		|			ТОГДА КОНЕЦПЕРИОДА(ЗаданиеЭтапы.ДатаОкончания, МИНУТА)
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&НачалоДня, ЧАС, 18)
		|	КОНЕЦ КАК ВремяОкончания,
		|	ЗаданиеЭтапы.Ссылка.Тема КАК Тема,
		|	ЗаданиеЭтапы.Этап КАК Этап,
		|	РАЗНОСТЬДАТ(ВЫБОР
		|			КОГДА ЗаданиеЭтапы.ДатаОкончания МЕЖДУ &НачалоДня И &ОкончаниеДня
		|				ТОГДА ЗаданиеЭтапы.ДатаОкончания
		|			ИНАЧЕ ДОБАВИТЬКДАТЕ(&НачалоДня, ЧАС, 18)
		|		КОНЕЦ, ЗаданиеЭтапы.ДатаНачала, СЕКУНДА) КАК Длительность,
		|	ЗНАЧЕНИЕ(Справочник.ВидыРабот.ВыполнениеЗаданий) КАК ВидРаботы,
		|	НАЧАЛОПЕРИОДА(ЗаданиеЭтапы.Ссылка.Дата, ДЕНЬ) КАК ДатаРаботы,
		|	ЗаданиеЭтапы.Ссылка.Номер КАК Номер,
		|	ЗаданиеЭтапы.Ссылка.Дата КАК Дата,
		|	ЗаданиеЭтапы.Ссылка.ТипПроцесса КАК ТипПроцесса,
		|	ЗаданиеИсполнители.Исполнитель КАК Исполнитель
		|ИЗ
		|	Документ.Задание.Исполнители КАК ЗаданиеИсполнители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание.Этапы КАК ЗаданиеЭтапы
		|		ПО ЗаданиеИсполнители.Ссылка = ЗаданиеЭтапы.Ссылка
		|			И ЗаданиеИсполнители.ДатаНачала = ЗаданиеЭтапы.ДатаНачала
		|			И ЗаданиеИсполнители.ДатаОкончания = ЗаданиеЭтапы.ДатаОкончания
		|ГДЕ
		|	(ЗаданиеЭтапы.ДатаНачала МЕЖДУ &НачалоДня И &ОкончаниеДня
		|			ИЛИ ЗаданиеЭтапы.ДатаОкончания МЕЖДУ &НачалоДня И &ОкончаниеДня)
		|	И ЗаданиеЭтапы.Ссылка.Проведен = ИСТИНА
		|	И ЗаданиеИсполнители.Исполнитель = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаданиеЭтапы.ДатаНачала";
	
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ОкончаниеДня", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ДлительностьВСекундах 		  = НоваяСтрока.ВремяОкончания - НоваяСтрока.ВремяНачала;
		Часы 						  = Цел(ДлительностьВСекундах / 3600);
		Минуты 						  = (ДлительностьВСекундах - Часы * 3600) / 60;	
		НоваяСтрока.ДлительностьВремя = Дата(0001, 01, 01, Часы, Минуты, 0);
		НоваяСтрока.Длительность 	  = ДлительностьВСекундах;
		
		НомерСтр = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.Номер);
		Если НомерСтр = Неопределено Тогда
			НомерСтр = Выборка.Номер;
		КонецЕсли;
		
		НоваяСтрока.Описание  		  = СтрШаблон(НСтр("ru = '%1 (%2 №%3 от %4)'"), 
			СокрЛП(Выборка.Тема), Выборка.ТипПроцесса, НомерСтр, Формат(Выборка.Дата, "ДФ=dd.MM.yy"));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНарядамНаРаботыНаСервере()
	
	Запрос = Новый Запрос();
	Запрос.Текст =		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(НарядНаРаботыРаботы.Ссылка) КАК Описание,
		|	НАЧАЛОПЕРИОДА(НарядНаРаботыРаботы.Ссылка.Дата, ДЕНЬ) КАК ДатаРаботы,
		|	&РаботаСДокументами КАК ВидРаботы,
		|	ВЫБОР
		|		КОГДА НарядНаРаботыРаботы.Ссылка.ДатаСоздания МЕЖДУ &ДатаНачала И &ДатаОкончания
		|				И НарядНаРаботыРаботы.Ссылка.Автор = &Пользователь
		|			ТОГДА НарядНаРаботыРаботы.Ссылка.ДатаСоздания
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НарядНаРаботыРаботы.Ссылка.ДатаКорректировки МЕЖДУ &ДатаНачала И &ДатаОкончания
		|						И НарядНаРаботыРаботы.Ссылка.АвторКорректировки = &Пользователь
		|					ТОГДА НарядНаРаботыРаботы.Ссылка.ДатаКорректировки
		|				ИНАЧЕ 0
		|		КОНЕЦ
		|	КОНЕЦ КАК ВремяНачала
		|ИЗ
		|	Документ.НарядНаРаботы.Работы КАК НарядНаРаботыРаботы
		|ГДЕ
		|	НарядНаРаботыРаботы.Ссылка.Проведен = ИСТИНА
		|	И ВЫБОР
		|			КОГДА НарядНаРаботыРаботы.Ссылка.ДатаСоздания МЕЖДУ &ДатаНачала И &ДатаОкончания
		|					И НарядНаРаботыРаботы.Ссылка.Автор = &Пользователь
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НарядНаРаботыРаботы.Ссылка.ДатаКорректировки МЕЖДУ &ДатаНачала И &ДатаОкончания
		|							И НарядНаРаботыРаботы.Ссылка.АвторКорректировки = &Пользователь
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|		КОНЕЦ
		|	И НарядНаРаботыРаботы.Ссылка.Состояние = ЗНАЧЕНИЕ(Справочник.СостояниеНарядовНаРаботы.Выполнен)";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
	Запрос.УстановитьПараметр("РаботаСДокументами", Справочники.ВидыРабот.РаботаСДокументами);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока 					= Объект.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ВремяНачала 		= Выборка.ВремяНачала;
		НоваяСтрока.ВремяОкончания 		= Выборка.ВремяНачала + 10 * 60; // 10 минут
		НоваяСтрока.Длительность 		= НоваяСтрока.ВремяОкончания - НоваяСтрока.ВремяНачала;
		НоваяСтрока.ДлительностьВремя 	= Дата(1, 1, 1) + НоваяСтрока.Длительность;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВсемДокументамВКоторыхРаботалиНаСервере()
	
	Для Каждого Мета Из Метаданные.Документы Цикл
		
		Если НЕ ПравоДоступа("Чтение", Мета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Мета.Реквизиты.Найти("ДатаКорректировки") = Неопределено 
			ИЛИ Мета.Реквизиты.Найти("АвторКорректировки") = Неопределено 
			ИЛИ Мета.Реквизиты.Найти("Автор") = Неопределено
			ИЛИ Мета.Реквизиты.Найти("ДатаСоздания") = Неопределено
			ИЛИ Мета.Имя = "ЕжедневныйОтчет" Тогда
			 
			 Продолжить;
			 
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НАЧАЛОПЕРИОДА(Док.Ссылка.Дата, ДЕНЬ) КАК ДатаРаботы,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Док.Ссылка) КАК Описание,
			|	&РаботаСДокументами КАК ВидРаботы,
			|	ВЫБОР
			|		КОГДА Док.ДатаСоздания МЕЖДУ &ДатаНачала И &ДатаОкончания
			|				И Док.Автор = &Пользователь
			|			ТОГДА Док.ДатаСоздания
			|		ИНАЧЕ ВЫБОР
			|				КОГДА Док.ДатаКорректировки МЕЖДУ &ДатаНачала И &ДатаОкончания
			|						И Док.АвторКорректировки = &Пользователь
			|					ТОГДА Док.ДатаКорректировки
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК ВремяНачала
			|ИЗ
			|	Документ." + Мета.Имя + " КАК Док
			|ГДЕ
			|	Док.Ссылка.Проведен = ИСТИНА
			|	И ВЫБОР
			|			КОГДА Док.ДатаСоздания МЕЖДУ &ДатаНачала И &ДатаОкончания
			|					И Док.Автор = &Пользователь
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ВЫБОР
			|					КОГДА Док.ДатаКорректировки МЕЖДУ &ДатаНачала И &ДатаОкончания
			|							И Док.АвторКорректировки = &Пользователь
			|						ТОГДА ИСТИНА
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Док.Дата";
		
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.Дата));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
		Запрос.УстановитьПараметр("РаботаСДокументами", Справочники.ВидыРабот.РаботаСДокументами);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока 					= Объект.Работы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ВремяНачала 		= Выборка.ВремяНачала;
			НоваяСтрока.ВремяОкончания 		= Выборка.ВремяНачала + 10 * 60; // 10 минут
			НоваяСтрока.Длительность 		= НоваяСтрока.ВремяОкончания - НоваяСтрока.ВремяНачала;
			НоваяСтрока.ДлительностьВремя 	= Дата(1, 1, 1) + НоваяСтрока.Длительность;
			
		КонецЦикла;		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоТрудозатратамНаСервере()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Трудозатраты.Объект КАК Документ,
		|	Трудозатраты.Исполнитель,
		|	Трудозатраты.Длительность,
		|	ВЫБОР
		|		КОГДА Трудозатраты.ДатаНачала МЕЖДУ &НачалоДня И &ОкончаниеДня
		|			ТОГДА НАЧАЛОПЕРИОДА(Трудозатраты.ДатаНачала, МИНУТА)
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&НачалоДня, ЧАС, 9)
		|	КОНЕЦ КАК ВремяНачала,
		|	ВЫБОР
		|		КОГДА Трудозатраты.ДатаОкончания МЕЖДУ &НачалоДня И &ОкончаниеДня
		|			ТОГДА КОНЕЦПЕРИОДА(Трудозатраты.ДатаОкончания, МИНУТА)
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&НачалоДня, ЧАС, 18)
		|	КОНЕЦ КАК ВремяОкончания,
		|	Трудозатраты.ВидРаботы,
		|	Трудозатраты.Описание
		|ИЗ
		|	РегистрСведений.Трудозатраты КАК Трудозатраты
		|ГДЕ
		|	Трудозатраты.Исполнитель = &Пользователь
		|	И (Трудозатраты.ДатаНачала МЕЖДУ &НачалоДня И &ОкончаниеДня
		|			ИЛИ Трудозатраты.ДатаОкончания МЕЖДУ &НачалоДня И &ОкончаниеДня)
		|	И Трудозатраты.Длительность >= 60
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВремяНачала";
	
	Запрос.УстановитьПараметр("Пользователь", 	Объект.Пользователь);
	Запрос.УстановитьПараметр("НачалоДня", 		НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ОкончаниеДня",   КонецДня(Объект.Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ДлительностьВСекундах 		  = Выборка.Длительность;
		Часы 						  = Цел(ДлительностьВСекундах / 3600);
		Минуты 						  = (ДлительностьВСекундах - Часы * 3600) / 60;	
		НоваяСтрока.ДлительностьВремя = Дата(0001, 01, 01, Часы, Минуты, 0);
		НоваяСтрока.Длительность 	  = ДлительностьВСекундах;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПересеченияИнтерваловНаСервере()
	
	Отказ = Ложь;
	Ошибки = Неопределено;
	
	// Проверка пересечения интервалов.	
	Для Индекс1 = 0 По Объект.Работы.Количество() - 1 Цикл
		Строка1 = Объект.Работы.Получить(Индекс1);
		Для Индекс2 = Индекс1 + 1 По Объект.Работы.Количество() - 1 Цикл
			
			Строка2 = Объект.Работы.Получить(Индекс2);			
			
			Если Строка1.ВремяНачала = Строка2.ВремяНачала И Строка1.ВремяОкончания = Строка2.ВремяОкончания Тогда				
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
				"Объект.Работы[" + Формат(Индекс2, "ЧДЦ=; ЧС=; ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + "].ВремяНачала", 				
				СтрШаблон(
					НСтр("ru='Обнаружено совпадение интервалов времени в табличной части Работы (строки %1 и %2)'"),
						Строка(Индекс1 + 1), Строка(Индекс2 + 1)),					
					"Объект.Работы", 
					Строка2.НомерСтроки, 
					НСтр("ru = 'Обнаружено совпадение интервалов времени'"), 
					Строка2.НомерСтроки);
				
			ИначеЕсли Строка1.ВремяНачала < Строка2.ВремяОкончания И Строка1.ВремяОкончания > Строка2.ВремяНачала Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
				"Объект.Работы[" + Формат(Индекс2, "ЧДЦ=; ЧС=; ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + "].ВремяНачала", 				
				СтрШаблон(
					НСтр("ru='Обнаружено пересечение интервалов времени в табличной части Работы (строки %1 и %2)'"),
						Строка(Индекс1 + 1), Строка(Индекс2 + 1)),					
				"Объект.Работы", 
				Строка2.НомерСтроки, 
				НСтр("ru = 'Обнаружено пересечение интервалов времени'"), 
				Строка2.НомерСтроки);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	Если Ошибки = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибок пересечения интервалов не обнаружено'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПересеченияИнтервалов(Команда)
	
	ПроверкаПересеченияИнтерваловНаСервере();
	
КонецПроцедуры

#КонецОбласти
