#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////

// Устанавливает параметры загрузки.
//
// Параметры:
// 	Параметры - Структура - Структура параметров.
//
//@skip-warning
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Интерфейс для работы с подсистемой Загрузка из файла.
//
// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   ПолноеИмяТабличнойЧасти   	- Строка - полное имя табличной части, в которую загружаются данные.
//   АдресЗагружаемыхДанных    	- Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число 	- порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления 	- Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей 	- ТаблицаЗначений - список неоднозначных значений, для которых 
//										  в ИБ имеется несколько подходящих вариантов.
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//   ДополнительныеПараметры	- структура - дополнительные параметры.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, 
	ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Работы =  ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляСопоставления.Идентификатор,
		|	ДанныеДляСопоставления.ДатаВремяНачала,
		|	ДанныеДляСопоставления.ДатаВремяОкончания,
		|	ДанныеДляСопоставления.Описание,
		|	ДанныеДляСопоставления.ВидРаботы
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ
		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрВидыРабот.Ссылка,
		|	ДанныеДляСопоставления.Идентификатор
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРабот КАК СпрВидыРабот
		|		ПО (СпрВидыРабот.Наименование ПОДОБНО ДанныеДляСопоставления.ВидРаботы)
		|ГДЕ
		|	НЕ СпрВидыРабот.Ссылка ЕСТЬ NULL";

	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаВидыРабот = РезультатыЗапросов[1].Выгрузить();
	Для Каждого СтрокаРаботы Из ЗагружаемыеДанные Цикл 
		
		СтрокаРабот = ТаблицаВидыРабот.Найти(СтрокаРаботы.Идентификатор, "Идентификатор");
		Если СтрокаРабот <> Неопределено Тогда 
			ВидРаботы  = СтрокаРабот.Ссылка;
		Иначе
			ВидРаботы = Справочники.ВидыРабот.ПустаяСсылка();
		КонецЕсли;
				
		Ошибка 				= Ложь; 
		ДатаВремяНачала		= РаботаСДатамиКлиентСервер.СтрокаВДату("dd.MM.yyyy HH:mm:ss", 
			СтрокаРаботы.ДатаВремяНачала, Ошибка);
		Если Ошибка Тогда
			ДатаВремяНачала	= РаботаСДатамиКлиентСервер.СтрокаВДату("dd.MM.yyyy H:mm:ss", 
				СтрокаРаботы.ДатаВремяНачала, Ошибка);			
		КонецЕсли;
		Ошибка 				= Ложь;
		ДатаВремяОкончания	= РаботаСДатамиКлиентСервер.СтрокаВДату("dd.MM.yyyy HH:mm:ss", 
			СтрокаРаботы.ДатаВремяОкончания, Ошибка);
		Если Ошибка Тогда
			ДатаВремяОкончания	= РаботаСДатамиКлиентСервер.СтрокаВДату("dd.MM.yyyy H:mm:ss", 
				СтрокаРаботы.ДатаВремяОкончания, Ошибка);			
		КонецЕсли;
		
		Если ДатаВремяНачала = Дата(1, 1, 1) Тогда
			НоваяСтрокаРаботы				= Работы.Добавить();
			НоваяСтрокаРаботы.Описание		= СтрокаРаботы.Описание;
			НоваяСтрокаРаботы.ВидРаботы		= ВидРаботы;
			НоваяСтрокаРаботы.Идентификатор = СтрокаРаботы.Идентификатор;
			Продолжить;
		КонецЕсли;
		
		Если НачалоДня(ДатаВремяНачала) = НачалоДня(ДатаВремяОкончания) Тогда
			НоваяСтрокаРаботы				= Работы.Добавить();
			НоваяСтрокаРаботы.Описание		= СтрокаРаботы.Описание;
			НоваяСтрокаРаботы.ВидРаботы		= ВидРаботы;
			НоваяСтрокаРаботы.ДатаРаботы	= НачалоДня(ДатаВремяНачала);
			НоваяСтрокаРаботы.ВремяНачала	= ДатаВремяНачала;
			НоваяСтрокаРаботы.ВремяОкончания= ДатаВремяОкончания;
			НоваяСтрокаРаботы.Идентификатор = СтрокаРаботы.Идентификатор;
			РассчитатьДлительность(НоваяСтрокаРаботы);
		Иначе
			мДатаВрем = ДатаВремяНачала;
			Пока мДатаВрем < ДатаВремяОкончания Цикл

				НоваяСтрокаРаботы				= Работы.Добавить();
				НоваяСтрокаРаботы.Идентификатор = СтрокаРаботы.Идентификатор;
				НоваяСтрокаРаботы.Описание		= СтрокаРаботы.Описание;
				НоваяСтрокаРаботы.ВидРаботы		= ВидРаботы;
				НоваяСтрокаРаботы.ДатаРаботы	= НачалоДня(мДатаВрем);
				НоваяСтрокаРаботы.ВремяНачала	= Дата(Год(мДатаВрем), Месяц(мДатаВрем), День(мДатаВрем), 
					Час(мДатаВрем), Минута(мДатаВрем), 0);
				Если НачалоДня(мДатаВрем) = НачалоДня(ДатаВремяОкончания) Тогда
					НоваяСтрокаРаботы.ВремяОкончания = Дата(Год(мДатаВрем), Месяц(мДатаВрем), День(мДатаВрем),
							Час(ДатаВремяОкончания), Минута(ДатаВремяОкончания), 0);
				Иначе
					НоваяСтрокаРаботы.ВремяОкончания = 
						Дата(Год(мДатаВрем), Месяц(мДатаВрем), День(мДатаВрем), 23, 59, 59);
				КонецЕсли;
				РассчитатьДлительность(НоваяСтрокаРаботы);
						
				Если мДатаВрем = ДатаВремяНачала Тогда
					мДатаВрем = КонецДня(мДатаВрем) + 1;
				Иначе
					мДатаВрем = КонецДня(мДатаВрем) + 1;
				КонецЕсли;
				
				Если мДатаВрем > ДатаВремяОкончания Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
				
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Работы, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - имя колонки, в который возникла неоднозначность 
//  СписокНеоднозначностей    - ТаблицаЗначений - Список для заполнения с неоднозначными данными
//     * Идентификатор        - Число  - Уникальный идентификатор строки
//     * Колонка              - Строка -  Имя колонки с возникшей неоднозначностью 
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры	  - структура - дополнительные параметры.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, 
	ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт 
	
	Если ИмяКолонки = "Работы" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВидыРабот.Ссылка
			|ИЗ
			|	Справочник.ВидыРабот КАК ВидыРабот
			|ГДЕ
			|	ВидыРабот.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ВидРаботы);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);  
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает список имен «ключевых» реквизитов.
//
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать.
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив реквизитов, редактируемых при групповой обработке.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	РедактируемыеРеквизиты = Новый Массив;
		
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

// Функция возвращает список контактов контакты.
//
// Параметры:
//  Ссылка  - ДокументСсылка.ЕжедневныйОтчет - документ, контакты которого необходимо получить.
//
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокКонтактов = Новый Массив;
	СписокКонтактов.Добавить(Ссылка.Пользователь);
	
	Возврат СписокКонтактов;
	
КонецФункции

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты             - ДеревоЗначений - список реквизитов шаблона.
//    ** Имя            - Строка - Уникальное имя общего реквизита.
//    ** Представление  - Строка - Представление общего реквизита.
//    ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//    ** Подсказка      - Строка - Расширенная информация о реквизите.
//    ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//    ** Имя            - Строка - Уникальное имя вложения.
//    ** Представление  - Строка - Представление варианта.
//    ** Подсказка      - Строка - Расширенная информация о вложении.
//    ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
//@skip-warning
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
		
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
//@skip-warning
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
//@skip-warning
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
//@skip-warning
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;		
	СоответствиеИзменениеОбъекта.Вставить("ЕжедневныйОтчетИзменениеОбъектаПроведение", НСтр("ru = 'Проведение'"));
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("ЕжедневныйОтчетРасчетМетрикЗаписьДокумента", НСтр("ru = 'Запись документа'"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправочникСсылка.ПравилаСобытий	 - правило проверки.
//  Структура		 - Структура	 - источник события и другая информация.
//  Источник         - ДокументСсылка - источник события.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура, Знач Источник) Экспорт
	
	Результат = Ложь;
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ИмяСобытия = "ЕжедневныйОтчетИзменениеОбъектаПроведение" Тогда
		
		Если Структура.ЭтоНовый И Источник.Проведен Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Проведен <> ИсточникПередЗаписью.Проведен И ИсточникПередЗаписью.Проведен = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
//@skip-warning
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//@skip-warning
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
		
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция печати документа
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент 	= Новый ТабличныйДокумент;
	
	мРабочееВремя = Перечисления.ВидыВремени.Рабочее;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕжедневныйОтчет.Ссылка КАК Ссылка,
		|	ЕжедневныйОтчет.Дата КАК Дата,
		|	ЕжедневныйОтчет.Номер,
		|	ЕжедневныйОтчет.Проведен,
		|	ЕжедневныйОтчет.Автор,
		|	ЕжедневныйОтчет.АвторКорректировки,
		|	ЕжедневныйОтчет.ДатаКорректировки,
		|	ЕжедневныйОтчет.ДатаНачала,
		|	ЕжедневныйОтчет.ДатаОкончания,
		|	ЕжедневныйОтчет.ДатаСоздания,
		|	ЕжедневныйОтчет.Комментарий,
		|	ЕжедневныйОтчет.Организация,
		|	ЕжедневныйОтчет.Подразделение,
		|	ЕжедневныйОтчет.ПоложениеДаты,
		|	ЕжедневныйОтчет.Пользователь,
		|	ЕжедневныйОтчет.ПредставлениеДлительности,
		|	ЕжедневныйОтчет.Работы.(
		|		Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		ДатаРаботы,
		|		Описание,
		|		ВидРаботы,
		|		Источник,
		|		ВремяНачала,
		|		ВремяОкончания,
		|		ДлительностьВремя,
		|		Длительность,
		|		ВидРаботы.ВидВремени КАК ВидРаботыВидВремени)
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|ГДЕ
		|	ЕжедневныйОтчет.Ссылка В (&МассивОбъектов)
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Номер,
		|	Работы.ВремяНачала";
					
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);		
		Выборка  			= Шапка.Работы.Выбрать();			
		
		Если ИмяМакета = "ФотографияРабочегоДня" Тогда
			
			Макет 		= УправлениеПечатью.МакетПечатнойФормы("Документ.ЕжедневныйОтчет.ПФ_MXL_ФотографияРабочегоДня");
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЕжедневныйОтчет_ФотографияРабочегоДня";
			
			ОбластьШапка         		= Макет.ПолучитьОбласть("Шапка");
			ОбластьШапкаТаблицы  		= Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтрокаТаблицы 		= Макет.ПолучитьОбласть("СтрокаТаблицы");
			ОбластьСтрокаТаблицыПустая 	= Макет.ПолучитьОбласть("СтрокаТаблицыПустая");
			ОбластьПодвал        		= Макет.ПолучитьОбласть("Подвал");
			
			Если Шапка.ДатаНачала = Дата(1, 1, 1) Тогда
				ДатаРаботы				= НачалоДня(Шапка.Дата);
				ДатаОкончания			= НачалоДня(Шапка.Дата);
			Иначе
				ДатаРаботы				= НачалоДня(Шапка.ДатаНачала);
				ДатаОкончания			= НачалоДня(Шапка.ДатаОкончания);
			КонецЕсли;			
			Пока ДатаРаботы <= ДатаОкончания Цикл
			
				Если Не ПервыйДокумент Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				ПервыйДокумент 		= Ложь;		
				НомерСтрокиНачало 	= ТабличныйДокумент.ВысотаТаблицы + 1;		
			
				СтруктураЗаполнения.Вставить("ДатаРаботы", ДатаРаботы);
				ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, СтруктураЗаполнения);
				ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Шапка);
				Пользователь = СтруктураЗаполнения.Пользователь;
				Если ЗначениеЗаполнено(Пользователь.Сотрудник) Тогда
					Пользователь = Пользователь.Сотрудник;
				ИначеЕсли ЗначениеЗаполнено(Пользователь.ФизическоеЛицо) Тогда
					Пользователь = Пользователь.ФизическоеЛицо;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Новый Структура("Сотрудник", Пользователь));
				ТабличныйДокумент.Вывести(ОбластьШапка);
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
				ПродолжительностьРабочееВремя = 0;
				Продолжительность = 0;			
				Структура = Новый Структура("нпп", 1);
				Выборка.Сбросить();
				Пока Выборка.Следующий() Цикл
					Если Выборка.ДатаРаботы = ДатаРаботы Тогда
						ЗаполнитьЗначенияСвойств(ОбластьСтрокаТаблицы.Параметры, Выборка);
						ЗаполнитьЗначенияСвойств(ОбластьСтрокаТаблицы.Параметры, Структура);
						ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
						Продолжительность 	= Продолжительность + Выборка.Длительность;
						Если Выборка.ВидРаботыВидВремени = мРабочееВремя Тогда
							ПродолжительностьРабочееВремя = ПродолжительностьРабочееВремя + Выборка.Длительность;
						КонецЕсли; 
						Структура.нпп 	= Структура.нпп + 1;
					КонецЕсли;
				КонецЦикла;
				
				ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, СтруктураЗаполнения);
				Если Структура.нпп > 1 Тогда
					ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, 
						Новый Структура("Продолжительность, ПродолжительностьРабочееВремя", 
							УправлениеITОтделом8УФКлиентСервер.ЧислоВоВремя(Продолжительность),
							УправлениеITОтделом8УФКлиентСервер.ЧислоВоВремя(ПродолжительностьРабочееВремя)));					
				Иначе
					Для Индекс = 1 По 20 Цикл
						ЗаполнитьЗначенияСвойств(ОбластьСтрокаТаблицыПустая.Параметры, Структура);
						ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыПустая);
						Структура.нпп 	= Структура.нпп + 1;
					КонецЦикла;
					ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, 
						Новый Структура("Продолжительность, ПродолжительностьРабочееВремя",	
							"___________", "___________"));
				КонецЕсли;
											
				ТабличныйДокумент.Вывести(ОбластьПодвал);
				
				ДатаРаботы = КонецДня(ДатаРаботы) + 1;
				
			КонецЦикла;

		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, 
			Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
					ПараметрыПечати,
					КоллекцияПечатныхФорм,
					ОбъектыПечати,
					ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ФотографияРабочегоДня") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ФотографияРабочегоДня", 
			НСтр("ru = 'Фотография рабочего дня'"), 
				ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ФотографияРабочегоДня"));
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
КонецПроцедуры

// Заполняет список команд печати
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Картина рабочего дня
	КомандаПечати 				= КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ФотографияРабочегоДня";
	КомандаПечати.Представление = НСтр("ru = 'Фотография рабочего дня'");
	КомандаПечати.СписокФорм 	= "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок 		= 1;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РассчитатьДлительность(ТекущаяСтрока)
	
	ДлительностьВСекундах = ТекущаяСтрока.ВремяОкончания - ТекущаяСтрока.ВремяНачала;
	
	Часы = Цел(ДлительностьВСекундах / 3600);
	Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
	Если Часы = 23 И Минуты = 59 Тогда
		Секунды = 59;
	Иначе
		Секунды = 0;
	КонецЕсли;	
	ТекущаяСтрока.ДлительностьВремя = Дата(0001, 01, 01, Часы, Минуты, Секунды);
	ТекущаяСтрока.Длительность 		= ДлительностьВСекундах + Секунды;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли