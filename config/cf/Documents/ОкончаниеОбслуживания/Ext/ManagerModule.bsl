#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс
// Функция возвращает список имен «ключевых» реквизитов.
//
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать,
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив реквизитов, редактируемых при групповой обработке.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;

	СписокКонтактов = Новый Массив;
	СписокКонтактов.Добавить(Ссылка.Контрагент);
	
	Возврат СписокКонтактов;
	
КонецФункции

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	РеквизитПоложениеПодразделения    		= Реквизиты.Найти("ОкончаниеОбслуживания.ПоложениеПодразделения");
	Реквизиты.Удалить(РеквизитПоложениеПодразделения);
	РеквизитПоложениеСтатьиДоходовРасходов 	= Реквизиты.Найти("ОкончаниеОбслуживания.ПоложениеСтатьиДоходовРасходов");
	Реквизиты.Удалить(РеквизитПоложениеСтатьиДоходовРасходов);	
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Контрагент", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Контрагент");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;	
	СоответствиеИзменениеОбъекта.Вставить("ОкончаниеОбслуживанияИзменениеОбъектаИзменениеСостояния", НСтр("ru = 'Изменение состояния'"));
	СоответствиеИзменениеОбъекта.Вставить("ОкончаниеОбслуживанияИзменениеОбъектаЗакрытие", 			 НСтр("ru = 'Закрытие'"));
	СоответствиеИзменениеОбъекта.Вставить("ОкончаниеОбслуживанияИзменениеОбъектаПроведение",		 НСтр("ru = 'Проведение'"));
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("ОкончаниеОбслуживанияРасчетМетрикЗаписьДокумента", НСтр("ru = 'Запись документа'"));

	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура, Знач Источник) Экспорт
	
	Результат = Ложь;
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ИмяСобытия = "ОкончаниеОбслуживанияИзменениеОбъектаИзменениеСостояния" Тогда
		
		Если Структура.ЭтоНовый Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.СостояниеОбслуживания <> ИсточникПередЗаписью.СостояниеОбслуживания Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОкончаниеОбслуживанияИзменениеОбъектаЗакрытие" Тогда
		
		Если Структура.ЭтоНовый И Источник.Закрыт = Истина Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Закрыт <> ИсточникПередЗаписью.Закрыт И Источник.Закрыт = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОкончаниеОбслуживанияИзменениеОбъектаПроведение" Тогда
		
		Если Структура.ЭтоНовый И Источник.Проведен = Истина Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Проведен <> ИсточникПередЗаписью.Проведен И Источник.Проведен = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.ВариантыОтчетов
// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();		
		КомандаОтчет.Менеджер      = Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Взаиморасчеты с контрагентами'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность      = "Обычное";
		КомандаОтчет.КлючВарианта  = "Основной";		
		
	КонецЕсли;
			
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
		
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция собирает данные для печати этикеток.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОкончаниеОбслуживанияНоменклатура.Ссылка.Организация,
		|	ОкончаниеОбслуживанияНоменклатура.Ссылка.МестоХранения,
		|	ОкончаниеОбслуживанияНоменклатура.Номенклатура КАК Номенклатура,
		|	ОкончаниеОбслуживанияНоменклатура.КарточкаНоменклатуры,
		|	ОкончаниеОбслуживанияНоменклатура.Количество КАК КоличествоЭтикеток,
		|	ШтрихкодыНоменклатуры.Штрихкод,
		|	ОтветственныеСотрудникиСрезПоследних.Сотрудник КАК ОтветственныйСотрудник,
		|	ОтветственныеСотрудникиИТОтделаСрезПоследних.Сотрудник КАК ОтветственныйСотрудникITОтдела,
		|	ОкончаниеОбслуживанияНоменклатура.Сумма,
		|	ОкончаниеОбслуживанияНоменклатура.Количество
		|ИЗ
		|	Документ.ОкончаниеОбслуживания.Номенклатура КАК ОкончаниеОбслуживанияНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО (ОкончаниеОбслуживанияНоменклатура.КарточкаНоменклатуры = ШтрихкодыНоменклатуры.Номенклатура
		|				ИЛИ ОкончаниеОбслуживанияНоменклатура.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудники.СрезПоследних КАК ОтветственныеСотрудникиСрезПоследних
		|		ПО ОкончаниеОбслуживанияНоменклатура.Ссылка.МестоХранения = ОтветственныеСотрудникиСрезПоследних.МестоХранения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудникиИТОтдела.СрезПоследних КАК ОтветственныеСотрудникиИТОтделаСрезПоследних
		|		ПО ОкончаниеОбслуживанияНоменклатура.Ссылка.МестоХранения = ОтветственныеСотрудникиИТОтделаСрезПоследних.МестоХранения
		|ГДЕ
		|	ОкончаниеОбслуживанияНоменклатура.Ссылка В(&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОкончаниеОбслуживанияНоменклатура.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОкончаниеОбслуживания.Организация,
		|	ОкончаниеОбслуживания.МестоХранения
		|ИЗ
		|	Документ.ОкончаниеОбслуживания КАК ОкончаниеОбслуживания
		|ГДЕ
		|	ОкончаниеОбслуживания.Ссылка В(&МассивДокументов)";
		
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = УправлениеITОтделом8УФ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = УправлениеITОтделом8УФ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "МестоХранения").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Штрихкоды", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция печати документа.
//
Функция ПечатьАктВводаВЭксплуатацию(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ОкончаниеОбслуживания";
	
	ПервыйДокумент = Истина;

	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ТекущийДокумент.ВидОкончанияОбслуживания = Перечисления.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентом 
			Или ТекущийДокумент.ВидОкончанияОбслуживания = Перечисления.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентомПроизведеноСразу Тогда
			
			СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(ТекущийДокумент);
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ТекущийДокумент.Номер, Истина, Истина);
			
			СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата, ,);
			СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(ТекущийДокумент.Контрагент, ТекущийДокумент.Дата, ,);
			МОЛ					= УправлениеITОтделом8УФ.ПолучитьОтветственногоСотрудникаМестаХранения(ТекущийДокумент.Дата, ТекущийДокумент.МестоХранения);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОкончаниеОбслуживания.ПФ_MXL_МакетАктВводаВЭксплуатацию");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОкончаниеОбслуживания_АктВводаВЭксплуатацию";
			
			Запрос = Новый Запрос();
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОкончаниеОбслуживанияНоменклатура.Номенклатура КАК Номенклатура,
				|	ОкончаниеОбслуживанияНоменклатура.Количество КАК Количество,
				|	ОкончаниеОбслуживанияНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ОкончаниеОбслуживанияНоменклатура.КарточкаНоменклатуры.СерийныйНомер КАК СерийныйНомер,
				|	ОкончаниеОбслуживанияНоменклатура.КарточкаНоменклатуры.ИнвентарныйНомер КАК ИнвентарныйНомер,
				|	ОкончаниеОбслуживанияНоменклатура.НомерСтроки КАК НомерСтроки
				|ИЗ
				|	Документ.ОкончаниеОбслуживания.Номенклатура КАК ОкончаниеОбслуживанияНоменклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Остатки.Остатки(&МоментКонтроля, ) КАК ОстаткиОстатки
				|		ПО (ВЫБОР
				|				КОГДА ОкончаниеОбслуживанияНоменклатура.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
				|					ТОГДА ОкончаниеОбслуживанияНоменклатура.КарточкаНоменклатуры = ОстаткиОстатки.Номенклатура
				|				ИНАЧЕ ОкончаниеОбслуживанияНоменклатура.Номенклатура = ОстаткиОстатки.Номенклатура
				|			КОНЕЦ)
				|ГДЕ
				|	ОкончаниеОбслуживанияНоменклатура.Ссылка = &ТекущийДокумент
				|	И ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) <= 0";
			
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			Запрос.УстановитьПараметр("МоментКонтроля", ТекущийДокумент.Дата);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", 
			СтрШаблон(НСтр("ru = 'Акт ввода в эксплуатацию компьютерной и орг. техники № %1 от %2'"), 
			НомерДокумента, Формат(ТекущийДокумент.Дата, "ДЛФ=DD"))));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МестоХранения", ТекущийДокумент.МестоХранения));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛ",		?(ЗначениеЗаполнено(МОЛ),
			МОЛ, "__________________________")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПолноеНаименованиеОрганизации", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаИВремяПечати", ТекущаяДатаСеанса()));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СамДокумент", ТекущийДокумент));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк.
			ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
			Количество								= Выборка.Количество();
			Пока Выборка.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво",		Количество));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛ",			МОЛ));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		Иначе
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОкончаниеОбслуживания.ПФ_MXL_МакетАктВводаВЭксплуатацию");	
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОкончаниеОбслуживания_АктВводаВЭксплуатацию"; 
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Предупреждение");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
		
КонецФункции // ПечатнаяФорма()

// Функция печати документа.
//
Функция ПечатьАктУстановки(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ОкончаниеОбслуживания";
	
	ПервыйДокумент = Истина;

	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ТекущийДокумент.ВидОкончанияОбслуживания = Перечисления.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентом 
			Или ТекущийДокумент.ВидОкончанияОбслуживания = Перечисления.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентомПроизведеноСразу Тогда
			
			СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(ТекущийДокумент);
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ТекущийДокумент.Номер, Истина, Истина);
			
			СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата, ,);
			СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(ТекущийДокумент.Контрагент, ТекущийДокумент.Дата, ,);
			МОЛ					= УправлениеITОтделом8УФ.ПолучитьОтветственногоСотрудникаМестаХранения(ТекущийДокумент.Дата, ТекущийДокумент.МестоХранения);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОкончаниеОбслуживания.ПФ_MXL_МакетАктУстановки");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОкончаниеОбслуживания_АктУстановки";
			
			Запрос = Новый Запрос();
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОкончаниеОбслуживанияНоменклатура.Номенклатура КАК Номенклатура,
				|	ОкончаниеОбслуживанияНоменклатура.Количество КАК Количество,
				|	ОкончаниеОбслуживанияНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ОкончаниеОбслуживанияНоменклатура.КарточкаНоменклатуры.СерийныйНомер КАК СерийныйНомер,
				|	ОкончаниеОбслуживанияНоменклатура.КарточкаНоменклатуры.ИнвентарныйНомер КАК ИнвентарныйНомер,
				|	ОкончаниеОбслуживанияНоменклатура.Сумма КАК Сумма,
				|	ОкончаниеОбслуживанияНоменклатура.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
				|	ОкончаниеОбслуживанияНоменклатура.НомерСтроки КАК НомерСтроки,
				|	ОкончаниеОбслуживанияНоменклатура.Цена КАК Цена
				|ИЗ
				|	Документ.ОкончаниеОбслуживания.Номенклатура КАК ОкончаниеОбслуживанияНоменклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Остатки.Остатки(&МоментКонтроля, ) КАК ОстаткиОстатки
				|		ПО (ВЫБОР
				|				КОГДА ОкончаниеОбслуживанияНоменклатура.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
				|					ТОГДА ОкончаниеОбслуживанияНоменклатура.КарточкаНоменклатуры = ОстаткиОстатки.Номенклатура
				|				ИНАЧЕ ОкончаниеОбслуживанияНоменклатура.Номенклатура = ОстаткиОстатки.Номенклатура
				|			КОНЕЦ)
				|ГДЕ
				|	ОкончаниеОбслуживанияНоменклатура.Ссылка = &ТекущийДокумент
				|	И ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) <= 0";
			
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			Запрос.УстановитьПараметр("МоментКонтроля", ТекущийДокумент.Дата);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", СтрШаблон(НСтр("ru = 'Акт установки № %1 от %2'"), НомерДокумента, Формат(ТекущийДокумент.Дата, "ДЛФ=DD"))));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МестоХранения", ТекущийДокумент.МестоХранения));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛ",			МОЛ));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПолноеНаименованиеОрганизации", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаИВремяПечати", ТекущаяДатаСеанса()));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СамДокумент", ТекущийДокумент));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк.
			ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
			Количество								= Выборка.Количество();
			Сумма									= 0;
			Пока Выборка.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				Сумма                         = Сумма + Выборка.Сумма;
			КонецЦикла;
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво",		Количество));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогСумма",		Сумма));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		Иначе
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОкончаниеОбслуживания.ПФ_MXL_МакетАктУстановки");	
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОкончаниеОбслуживания_АктУстановки"; 
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Предупреждение");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции
	
// Функция печати документа.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ОкончаниеОбслуживания";
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;		
		ПервыйДокумент 		= Ложь;		
		НомерСтрокиНачало 	= ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(ТекущийДокумент);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОкончаниеОбслуживания.Ссылка,
			|	ОкончаниеОбслуживания.ВерсияДанных,
			|	ОкончаниеОбслуживания.ПометкаУдаления,
			|	ОкончаниеОбслуживания.Номер,
			|	ОкончаниеОбслуживания.Дата КАК ДатаДокумента,
			|	ОкончаниеОбслуживания.Проведен,
			|	ОкончаниеОбслуживания.Организация,
			|	ОкончаниеОбслуживания.МестоХранения,
			|	ОкончаниеОбслуживания.Комментарий,
			|	ОкончаниеОбслуживания.Основание,
			|	ОкончаниеОбслуживания.Автор,
			|	ОкончаниеОбслуживания.ДатаСоздания,
			|	ОкончаниеОбслуживания.АвторКорректировки,
			|	ОкончаниеОбслуживания.ДатаКорректировки,
			|	ОкончаниеОбслуживания.Контрагент,
			|	ОкончаниеОбслуживания.Договор,
			|	ОкончаниеОбслуживания.Бюджет,
			|	ОкончаниеОбслуживания.ПериодБюджета,
			|	ОкончаниеОбслуживания.ПоложениеСтатьиДоходовРасходов,
			|	ОкончаниеОбслуживания.СтатьяДоходовРасходов,
			|	ОкончаниеОбслуживания.МестоОбслуживания,
			|	ОкончаниеОбслуживания.Подразделение,
			|	ОкончаниеОбслуживания.СуммаВключаетНДС,
			|	ОкончаниеОбслуживания.Номенклатура.(
			|		Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Номенклатура КАК Номенклатура,
			|		Партия,
			|		КарточкаНоменклатуры,
			|		Количество,
			|		Описание,
			|		СтатьяДоходовРасходов,
			|		ЕдиницаИзмерения,
			|		Комплект,
			|		Цена,
			|		Сумма,
			|		СтавкаНДС,
			|		СуммаНДС,
			|		Всего,
			|		ИзменятьЦену,
			|		РазрешатьПеретаскивание,
			|		РазрешатьУдалять,
			|		Событие,
			|		ОбслуживаемаяНоменклатура,
			|		ПартияСоСклада,
			|		Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
			|		КарточкаНоменклатуры.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|		КарточкаНоменклатуры.СерийныйНомер КАК СерийныйНомер
			|	),
			|	ОкончаниеОбслуживания.Услуги.(
			|		Ссылка,
			|		НомерСтроки,
			|		Номенклатура,
			|		Количество,
			|		Цена,
			|		Сумма,
			|		Описание,
			|		СтатьяДоходовРасходов,
			|		СтавкаНДС,
			|		СуммаНДС,
			|		ЕдиницаИзмерения,
			|		Всего
			|	),
			|	ОкончаниеОбслуживания.ДополнительныеРеквизиты.(
			|		Ссылка,
			|		НомерСтроки,
			|		Свойство,
			|		Значение,
			|		ТекстоваяСтрока
			|	),
			|	ОкончаниеОбслуживания.МестоХраненияНаСклад,
			|	ОкончаниеОбслуживания.МестоХраненияСоСклада
			|ИЗ
			|	Документ.ОкончаниеОбслуживания КАК ОкончаниеОбслуживания
			|ГДЕ
			|	ОкончаниеОбслуживания.Ссылка = &ТекущийДокумент
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ВыборкаСтрок = Шапка.Номенклатура.Выбрать();
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		
		Если ИмяМакета = "АктСписания" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОкончаниеОбслуживания.ПФ_MXL_МакетАктСписания");			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОкончаниеОбслуживания_АктСписания";			
			ОбластьМакета                          = Макет.ПолучитьОбласть("Шапка");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                          = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк.
			МассивНоменклатуры						= СтруктураЗаполнения.Номенклатура;			
			ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
			Сумма									= 0;
			Количество								= 0;
			НомерСтроки								= 0;
			Для Каждого Элемент Из МассивНоменклатуры Цикл
				ВыборкаСтрокНоменклатуры = Элемент;				
				Если ВыборкаСтрокНоменклатуры.Событие = Перечисления.СобытиеОбслуживания.Списание Тогда
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаСтрокНоменклатуры);
					ТабличныйДокумент.Вывести(ОбластьМакета);
					НомерСтроки = НомерСтроки +1;
					ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки",НомерСтроки));
					Количество 	= Количество+ 1;
					Сумма 		= Сумма 	+ ВыборкаСтрокНоменклатуры.Всего;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");			
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,СтруктураЗаполнения);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво,ИтогСумма",		Количество, Сумма));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		ИначеЕсли ИмяМакета = "АктЗаменыОборудования" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОкончаниеОбслуживания.ПФ_MXL_МакетАктЗаменыОборудования");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОкончаниеОбслуживания_АктЗаменыОборудования";
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка2");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк списано.			
			МассивНоменклатуры						= СтруктураЗаполнения.Номенклатура;			
			
			Сумма									= 0;
			Количество								= 0;
			НомерСтроки								= 0;
			ВыводитьШапкуТаблицы					= Истина;
			ВыводитьПодвалТаблицы					= Ложь;			
			Для Каждого Элемент Из МассивНоменклатуры Цикл
				ВыборкаСтрокНоменклатуры = Элемент;
				Если ВыборкаСтрокНоменклатуры.Событие = Перечисления.СобытиеОбслуживания.Списание Тогда
					ВыводитьПодвалТаблицы= Истина;
					Если ВыводитьШапкуТаблицы Тогда
						ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка5");
						ТабличныйДокумент.Вывести(ОбластьМакета);
						ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
						ТабличныйДокумент.Вывести(ОбластьМакета);
						ВыводитьШапкуТаблицы = Ложь;
					КонецЕсли;	
					ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,ВыборкаСтрокНоменклатуры);					
					ТабличныйДокумент.Вывести(ОбластьМакета);
					НомерСтроки = НомерСтроки +1;
					ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки",НомерСтроки));
					Количество = Количество + 1;
					Сумма = Сумма + ВыборкаСтрокНоменклатуры.Всего;
				КонецЕсли;				
			КонецЦикла;
			
			Если ВыводитьПодвалТаблицы Тогда
				ОбластьМакета							= Макет.ПолучитьОбласть("ПодвалТаблицы");
				ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво,ИтогСумма",		Количество, Сумма));
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			// текст установлено.						
			Сумма									= 0;
			Количество								= 0;
			НомерСтроки								= 0;
			ВыводитьШапкуТаблицы					= Истина;
			ВыводитьПодвалТаблицы					= Ложь;
			Для Каждого Элемент Из МассивНоменклатуры Цикл
				ВыборкаСтрокНоменклатуры = Элемент;
				Если ВыборкаСтрокНоменклатуры.Событие = Перечисления.СобытиеОбслуживания.Добавление ИЛИ ВыборкаСтрокНоменклатуры.Событие = Перечисления.СобытиеОбслуживания.СоСклада Тогда
					ВыводитьПодвалТаблицы= Истина;
					Если ВыводитьШапкуТаблицы Тогда
						ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка3");
						ТабличныйДокумент.Вывести(ОбластьМакета);
						ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
						ТабличныйДокумент.Вывести(ОбластьМакета);
						ВыводитьШапкуТаблицы = Ложь;
					КонецЕсли;	
					ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаСтрокНоменклатуры);					
					НомерСтроки = НомерСтроки +1;
					ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки",НомерСтроки));		
					ТабличныйДокумент.Вывести(ОбластьМакета);					
					Количество = Количество + 1;
					Сумма = Сумма + ВыборкаСтрокНоменклатуры.Всего;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВыводитьПодвалТаблицы Тогда
				ОбластьМакета							= Макет.ПолучитьОбласть("ПодвалТаблицы");
				ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво,ИтогСумма",		Количество, Сумма));
				ТабличныйДокумент.Вывести(ОбластьМакета);			
			КонецЕсли;
			
			// текст перемещено.			
			Сумма									= 0;
			Количество								= 0;
			НомерСтроки								= 0;
			ВыводитьШапкуТаблицы					= Истина;
			ВыводитьПодвалТаблицы					= Ложь;
			Для Каждого Элемент Из МассивНоменклатуры Цикл
				ВыборкаСтрокНоменклатуры = Элемент;				
				Если ВыборкаСтрокНоменклатуры.Событие = Перечисления.СобытиеОбслуживания.НаСклад Тогда
					ВыводитьПодвалТаблицы					= Истина;
					Если ВыводитьШапкуТаблицы Тогда
						ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка4");
						ТабличныйДокумент.Вывести(ОбластьМакета);
						ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
						ТабличныйДокумент.Вывести(ОбластьМакета);
						ВыводитьШапкуТаблицы = Ложь;
					КонецЕсли;
					ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаСтрокНоменклатуры);
					НомерСтроки = НомерСтроки +1;
					ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки",НомерСтроки));
					ТабличныйДокумент.Вывести(ОбластьМакета);
					Количество = Количество + 1;
					Сумма = Сумма + ВыборкаСтрокНоменклатуры.Всего;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВыводитьПодвалТаблицы Тогда
				ОбластьМакета							= Макет.ПолучитьОбласть("ПодвалТаблицы");
				ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво,ИтогСумма",		Количество, Сумма));
				ТабличныйДокумент.Вывести(ОбластьМакета);			
			КонецЕсли;
			
			// Подвал
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		ИначеЕсли ИмяМакета = "ДефектнаяВедомость" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОкончаниеОбслуживания.ПФ_MXL_МакетДефектнаяВедомость");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОкончаниеОбслуживания_ДефектнаяВедомость";
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);		
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			
			ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
			МассивНоменклатуры						= СтруктураЗаполнения.Номенклатура;						
			Сумма									= 0;
			Количество								= 0;
			НомерСтроки								= 0;
			Для Каждого Элемент Из МассивНоменклатуры Цикл
				ВыборкаСтрокНоменклатуры = Элемент;				
				Если ВыборкаСтрокНоменклатуры.Событие = Перечисления.СобытиеОбслуживания.Списание Тогда
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаСтрокНоменклатуры);
					НомерСтроки = НомерСтроки +1;
					ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки",НомерСтроки));
					ТабличныйДокумент.Вывести(ОбластьМакета);
					Количество = Количество + 1;
					Сумма = Сумма + ВыборкаСтрокНоменклатуры.Всего;
				КонецЕсли;
				
			КонецЦикла;
			ОбластьМакета							= Макет.ПолучитьОбласть("ПодвалТаблицы");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво,ИтогСумма",		Количество, Сумма));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Подвал.
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			
		ИначеЕсли ИмяМакета = "ГарантийныйТалон" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОкончаниеОбслуживания.ПФ_MXL_ГарантийныйТалон");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОкончаниеОбслуживания_ГарантийныйТалон";
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПолноеНаименованиеОрганизации", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование")));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);		
			ТабличныйДокумент.Вывести(ОбластьМакета);
						
			ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");	
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);		
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                           = Макет.ПолучитьОбласть("Строка");
			МассивНоменклатуры						= СтруктураЗаполнения.Номенклатура;						
			НомерСтроки								= 0;
			Количество								= 0;
			Для Каждого ЭлементНоменклатура Из МассивНоменклатуры Цикл
				НомерСтроки = НомерСтроки +1;
				ВыборкаСтрокНоменклатуры = ЭлементНоменклатура;				
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаСтрокНоменклатуры);
				ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки",НомерСтроки));
				Количество = Количество + ВыборкаСтрокНоменклатуры.Количество;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;		
	
			ОбластьМакета							= Макет.ПолучитьОбласть("Итого");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво", Количество));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);		
			ТабличныйДокумент.Вывести(ОбластьМакета);
						
			ОбластьМакета                             = Макет.ПолучитьОбласть("Подвал");	
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);		
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр= Истина;
	ТабличныйДокумент.АвтоМасштаб 	= Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Процедура печати документа.
//
Функция ПечатьАктВыполненныхРабот(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ОкончаниеОбслуживания";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОкончаниеОбслуживания.Ссылка,
		|	ОкончаниеОбслуживания.Номер,
		|	ОкончаниеОбслуживания.Дата КАК ДатаДокумента,
		|	ОкончаниеОбслуживания.Организация,
		|	ОкончаниеОбслуживания.Контрагент,
		|	ОкончаниеОбслуживания.СуммаВключаетНДС,
		|	ОкончаниеОбслуживания.ВалютаДокумента,
		|	ОкончаниеОбслуживания.Услуги.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		Описание,
		|		Подразделение,
		|		СтатьяДоходовРасходов,
		|		СтавкаНДС,
		|		СуммаНДС,
		|		ЕдиницаИзмерения,
		|		Всего
		|	)
		|ИЗ
		|	Документ.ОкончаниеОбслуживания КАК ОкончаниеОбслуживания
		|ГДЕ
		|	ОкончаниеОбслуживания.Ссылка В(&МассивОбъектов)";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокУслуги 		 = Шапка.Услуги.Выбрать();
		
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОкончаниеОбслуживания_ПФ_MXL_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОкончаниеОбслуживания.ПФ_MXL_" + ИмяМакета);
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", СтрШаблон(НСтр("ru = 'Акт № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПолучателя", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;
		
		Пока ВыборкаСтрокУслуги.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокУслуги);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки", Количество));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Товар", ВыборкаСтрокУслуги.Номенклатура));			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокУслуги.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокУслуги.СуммаНДС;
			Всего		= Всего 	+ ВыборкаСтрокУслуги.Всего;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", УправлениеITОтделом8УФ.ФорматСумм(Сумма)));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", НСтр("ru = 'Без налога (НДС)'")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", "-"));
		Иначе
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":"));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДС)));
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтоговаяСтрока", СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), Строка(Количество), УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента))));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента)));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСписания") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСписания", НСтр("ru = 'Акт списания'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктСписания"));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктЗаменыОборудования") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктЗаменыОборудования", НСтр("ru = 'Акт замены оборудования'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктЗаменыОборудования"));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДефектнаяВедомость") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ДефектнаяВедомость", НСтр("ru = 'Дефектная ведомость'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ДефектнаяВедомость"));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктВыполненныхРабот") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктВыполненныхРабот", НСтр("ru = 'Акт выполненных работ'"), ПечатьАктВыполненныхРабот(МассивОбъектов, ОбъектыПечати, "АктВыполненныхРабот"));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалон") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалон", НСтр("ru = 'Гарантийный талон'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ГарантийныйТалон"));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктВводаВЭксплуатацию") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктВводаВЭксплуатацию", НСтр("ru = 'Акт ввода в эксплуатацию'"), ПечатьАктВводаВЭксплуатацию(МассивОбъектов, ОбъектыПечати, "АктВводаВЭксплуатацию"));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктУстановки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктУстановки", НСтр("ru = 'Акт установки'"), ПечатьАктУстановки(МассивОбъектов, ОбъектыПечати, "АктУстановки"));
	КонецЕсли;
		
КонецПроцедуры

// Функция получает данные для печати.
//
Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Возврат Новый Структура("Данные, Макеты",
							ДанныеПоВсемОбъектам,
							Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
											ОписаниеОбластей,
											ТипыМакетов,
											ДвоичныеДанныеМакетов));
	
КонецФункции

// Заполняет список команд печати Начало обслуживания.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктВводаВЭксплуатацию";
	КомандаПечати.Представление = НСтр("ru = 'Акт ввода в эксплуатацию'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктВыполненныхРабот";
	КомандаПечати.Представление = НСтр("ru = 'Акт выполненных работ'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 3;
		
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктЗаменыОборудования";
	КомандаПечати.Представление = НСтр("ru = 'Акт замены оборудования'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 4;	
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСписания";
	КомандаПечати.Представление = НСтр("ru = 'Акт списания'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 5;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктУстановки";
	КомандаПечати.Представление = НСтр("ru = 'Акт установки'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 6;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДефектнаяВедомость";
	КомандаПечати.Представление = НСтр("ru = 'Дефектная ведомость'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ГарантийныйТалон";
	КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 8;
	
КонецПроцедуры
										
#КонецОбласти

#КонецЕсли