
#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт; //Проверка контрагентов

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт; // Длительная операция
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки; // Системная переменная

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СЛС.ПриСозданииНаСервере(Объект, Отказ, СтандартнаяОбработка, Параметры, ЭтаФорма);	
		
	// Установка реквизитов формы.
	ДатаДокумента		= Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента	= ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Параметры.Свойство("МестоХранения") Тогда
		Объект.МестоХранения = Параметры.МестоХранения;
	КонецЕсли;
	Если Параметры.Свойство("Организация") Тогда
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
		КонецЕсли;		
	КонецЕсли;
	Если Параметры.Свойство("АдресНоменклатуры") Тогда		
		ТЗ = ПолучитьИзВременногоХранилища(Параметры.АдресНоменклатуры);
		Объект.Номенклатура.Загрузить(ТЗ);		
		УдалитьИзВременногоХранилища(Параметры.АдресНоменклатуры);
		Для Каждого СтрокаДок Из Объект.Номенклатура Цикл			
			СтрокаДок.ОбслуживаемаяНоменклатура = Истина;			
		КонецЦикла;	
	КонецЕсли;
	
	Контрагент			= Объект.Контрагент;
	Договор				= Объект.Договор;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.МестоХраненияНаСклад = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Пользователи.ТекущийПользователь(), "ОсновноеМестоХраненияНаСклад");
			
		Объект.МестоХраненияСоСклада = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Пользователи.ТекущийПользователь(), "ОсновноеМестоХраненияСоСклада");
		
		Если НЕ ЗначениеЗаполнено(Объект.ПоложениеСтатьиДоходовРасходов) Тогда
			Объект.ПоложениеСтатьиДоходовРасходов	= Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПоложениеПодразделения) Тогда
			Объект.ПоложениеПодразделения	= Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.МестоОбслуживания) Тогда
			Объект.МестоОбслуживания		= УправлениеITОтделом8УФПовтИсп.ПолучитьОсновноеМестоОбслуживанияРемонта();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.МестоХраненияНаСклад) И ЗначениеЗаполнено(Объект.МестоОбслуживания) Тогда
			Объект.МестоХраненияНаСклад		= Объект.МестоОбслуживания;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.МестоХраненияСоСклада) И ЗначениеЗаполнено(Объект.МестоОбслуживания) Тогда
			Объект.МестоХраненияСоСклада	= Объект.МестоОбслуживания;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ВидОкончанияОбслуживания) Тогда
			Объект.ВидОкончанияОбслуживания	= Перечисления.ВидыОкончанияОбслуживания.ВнутреннееОбслуживаниеПроизведеноСразу;			
		КонецЕсли;		
		
		Объект.СуммаВключаетНДС				= Истина;
		
		// Документ создается из обработки "РабочийСтол".
		Если Параметры.Свойство("РабочийСтолЗначенияЗаполнения") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.РабочийСтолЗначенияЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	Контрагент					= Объект.Контрагент;
	Договор						= Объект.Договор;
	Если ЗначениеЗаполнено(Договор) Тогда
		ВалютаРасчетов			= Объект.Договор.ВалютаРасчетов;
	КонецЕсли;	
	НациональнаяВалюта			= Константы.НациональнаяВалюта.Получить();
	СтруктураПоВалюте			= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта		= СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта	= СтруктураПоВалюте.Кратность;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций		= Истина;
	СтруктураНадписи			= Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов",			ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс",					Объект.Курс);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта",	КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций",	УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	ЦеныИВалюта					= СформироватьНадписьЦеныИВалюта(СтруктураНадписи); 
	
	#Область БСП_ПриСозданииНаСервере
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ВерсионированиеОбъектов
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеITОтделом8УФПовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ДеревоНоменклатурыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование	
		
	#КонецОбласти
	
	ТекущийЭлемент = Элементы.ДеревоНоменклатуры;
	
	// Вывод дерева	
	ВывестиДеревоНоменклатуры();
	
	Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = УправлениеITОтделом8УФ.ОтображатьИнвентарныеСерийныеНомера();	
	Если Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = Истина Тогда
		ОбновитьИнвентарныеИСерийныеНомераНаСервере();
	КонецЕсли;	
	УстановитьВидимостьДоступность();
	
	// Оформление дерева номенклатуры
	ЭлементУО 						=   УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	ЭлементУсловия 					=ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ОбслуживаемаяНоменклатура"); 
	ЭлементУсловия.ВидСравнения  	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение  	= Истина;
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыНоменклатура");
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыКарточкаНоменклатуры");	
	
	ЭлементУО 						=   УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	ЭлементУсловия 					=ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ИзменятьЦену"); 
	ЭлементУсловия.ВидСравнения  	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение  	= Ложь;
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыЦена");	
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыСумма");	
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыСтавкаНДС");	
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыСуммаНДС");	
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыКоличество");	
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыЕдиницаИзмерения");
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыВсего");
	
	ПеретаскиваниеФлаг = Ложь;	
	Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Пометка = Истина;
	Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Заголовок = НСтр("ru = 'По месту хранения'");
	
	// Учет остатков контрагентов.
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Организация");
	УправлениеITОтделом8УФ.УстановитьОграничениеТипаДляЭлементовФормы(ЭтаФорма, МассивЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// Корректировки документа
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// Разворачиваем дерево
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;	
	
	Если Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ВнутреннееОбслуживание") 
		ИЛИ Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ВнутреннееОбслуживаниеПроизведеноСразу") Тогда
		Элементы.ДеревоНоменклатурыДобавитьНоменклатуру.Видимость = Ложь;
	Иначе
		Элементы.ДеревоНоменклатурыДобавитьНоменклатуру.Видимость = Истина;
	КонецЕсли;
	
	ПредыдущиеРеквизитыСтроки = СтруктураСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда		
		ПоддерживаемыеТипыВО = Новый Массив();		
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");		
		ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриОтключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
       ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Корректировки документа
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	Оповестить("Запись_ОкончаниеОбслуживания", Объект.Ссылка);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, 
			"ДокументОкончаниеОбслуживания (проведение)");	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СЛС.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства.
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства.
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения.
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения.
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры // ПриЧтенииНаСервере().

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			МестоХраненияЗаполнено = ПроверитьЗаполнениеМестХранения();
			Если МестоХраненияЗаполнено = Истина Тогда				
				// Преобразуем предварительно к ожидаемому формату.
				Данные = Новый Массив();
				Если Параметр[1] = Неопределено Тогда
					Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных.
				Иначе
					Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных.
				КонецЕсли;
				
				ПолученыШтрихкоды(Данные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ТекущийОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		ТекущийОбъект.ДатаКорректировки = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ТекущийОбъект.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	Иначе
		ТекущийОбъект.АвторКорректировки = Пользователи.ТекущийПользователь();
	КонецЕсли; 
		
	СохранитьДеревоНоменклатуры(ТекущийОбъект);

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СЛС.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);	
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВыбораОрганизацииКонтрагента"
		И ИсточникВыбора.ВладелецФормы = ЭтаФорма Тогда
		УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбораФормы(ЭтаФорма, 
		 				"Организация",
						Объект.Организация,
						ВыбранноеЗначение,
						Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект));	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьАвторНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Спк = УправлениеITОтделом8УФКлиент.ПолучитьСписокНадписьАвтор(Объект);	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НадписьАвторНажатиеЗавершение", ЭтотОбъект), Спк, Элементы.НадписьАвтор, );
КонецПроцедуры

&НаКлиенте
Процедура НадписьАвторНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт    

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ДатаПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		ОбновитьРеквизитыБюджетов();
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер   = "";
	ОбновитьРеквизитыБюджетов();
	Объект.Договор = УправлениеITОтделом8УФ.ПолучитьДоговорПоУмолчанию(Объект.Контрагент, Объект.Организация);
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокумента(Команда)
	// 1. Формируем структуру параметров для заполнения формы "Настройка документа".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоложениеСтатьиДоходовРасходов", Объект.ПоложениеСтатьиДоходовРасходов);
	СтруктураПараметров.Вставить("ПоложениеПодразделения", 		Объект.ПоложениеПодразделения);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", 		Ложь);
	
	СтруктураНастройкаДокумента = Неопределено;
	
	ОткрытьФорму("ОбщаяФорма.НастройкаДокумента", СтруктураПараметров,,,,, Новый ОписаниеОповещения("НастройкаДокументаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    // 2. Открываем форму "Цены и Валюта".
    СтруктураНастройкаДокумента = Результат;
    
    // 3. Применяем изменения, сделанные в форме "Настройка документа".
    Если СтруктураНастройкаДокумента <> Неопределено И ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") И СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда
        
        Объект.ПоложениеСтатьиДоходовРасходов	= СтруктураНастройкаДокумента.ПоложениеСтатьиДоходовРасходов;
        Объект.ПоложениеПодразделения	= СтруктураНастройкаДокумента.ПоложениеПодразделения;
        
        УстановитьВидимостьДоступность();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент 				  = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда	
		
		СтруктураДанные 			  = УправлениеITОтделом8УФ.ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация, Объект.Дата);		
		Объект.Договор 		   		  = СтруктураДанные.Договор;
		ДоговорПередИзменением 		  = Договор;
		Договор 		       		  = Объект.Договор;
		Объект.БанковскийСчет  		  = СтруктураДанные.БанковскийСчет;		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов 				  = СтруктураДанные.ВалютаРасчетов;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
				
		Если (ЗначениеЗаполнено(Объект.Договор)
			И ЗначениеЗаполнено(ВалютаРасчетов)
			И Объект.Договор <> ДоговорПередИзменением
			И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
			И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
						
			Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом. Необходимо проверить валюту документа'"));
			ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные", СтруктураДанные)), ВалютаРасчетовПередИзменением, Истина);			
			
			Возврат;
			
		КонецЕсли;
		
		КонтрагентПриИзмененииФрагмент(СтруктураДанные);
		УстановитьВидимостьДоступность();
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы 		 = Новый Структура;
	ПараметрыФормы.Вставить("ОтборРемонтСервис", Истина);
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы      = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Истина);
	ПараметрыФормы.Вставить("Контрагент", 				   Контрагент);
	ПараметрыФормы.Вставить("Организация", 				   Объект.Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", 			   УправлениеITОтделом8УФ.ПолучитьСписокВидовДоговораДляДокумента(Объект.Ссылка));
	ПараметрыФормы.Вставить("ТекущаяСтрока", 			   Договор);	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.Номенклатура.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("Ключ", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТабличнойЧасти.Номенклатура);	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура РаспределятьУслугиПриИзменении(Элемент)
	
	РаспределятьУслугиПриИзмененииНаСервере(Истина);
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация"			, Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура"			, СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС"	, Объект.НалогообложениеНДС);
			
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Количество           = 1;		 
		СтрокаТабличнойЧасти.ИзменятьЦену		  = Истина;		
		СтрокаТабличнойЧасти.НавСсылка            = СтруктураДанные.НавСсылка;
		СтрокаТабличнойЧасти.КарточкаНоменклатуры = СтруктураДанные.КарточкаНоменклатуры;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();	
	
		Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр = НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);	
	Иначе
		СтрокаТабличнойЧасти.КарточкаНоменклатуры = ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
		Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для Каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	КонецЕсли;	
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли; 		
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
    // Узел нельзя переносить в узлы подчиненные ему самому,
    // т.е. родительский узел нельзя переносить в дочерние.
    // Проверим это условие для всех выделенных элементов.

    СтандартнаяОбработка = Ложь;

    РеквизитДерево = ЭтаФорма["ДеревоНоменклатуры"];

    ИДНовыйРодитель = Строка;
    // Если НовыйРодитель = Неопределено => Корень дерева.
    НовыйРодитель = ?(ИДНовыйРодитель = Неопределено, Неопределено, РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель));

    ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);

    Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент, НовыйРодитель) Тогда
        ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка= Ложь;
	
	РеквизитДерево		= ЭтаФорма["ДеревоНоменклатуры"];
	
	ИДПриемник			= Строка;
	// Если ИДПриемник = Неопределено => Корень дерева.
	Приемник 			= ?(ИДПриемник = Неопределено, Неопределено,
		РеквизитДерево.НайтиПоИдентификатору(ИДПриемник));
	
	Источник 			= РеквизитДерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	Если ТипЗНЧ(Приемник) = Тип("ДанныеФормыЭлементДерева") Тогда
		Если Не ЗначениеЗаполнено(Приемник.КарточкаНоменклатуры) Тогда			
			ДопПараметры 		= Новый Структура;
			ДопПараметры.Вставить("РеквизитДерево",	РеквизитДерево);
			ДопПараметры.Вставить("Приемник",		Приемник);
			ДопПараметры.Вставить("Источник",		Источник);
			ДопПараметры.Вставить("ИДПриемник",		ИДПриемник);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатуры", ЭтотОбъект, ДопПараметры);
			
			Кнопки 				= Новый СписокЗначений;
			Кнопки.Добавить("КнопкаСоздатьНовую", 		НСтр("ru = 'Создать новую'"));
			Кнопки.Добавить("КнопкаВыбратьИзСписка", 	НСтр("ru = 'Выбрать из списка'"));
			Кнопки.Добавить("КнопкаОтмена", 			НСтр("ru = 'Отмена'"));
			
			ПоказатьВопрос(ОписаниеОповещения, СтрШаблон(НСтр("ru = 'Перед добавлением в комплект необходимо заполнить карточку для номенклатуры ""%1"".
                                                               |Создать новую или выбрать существующую из списка?'")), Кнопки,,"КнопкаСоздатьНовую");
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ДеревоНоменклатурыПеретаскиваниеФрагмент(РеквизитДерево, Приемник, Источник, ИДПриемник);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриАктивизацииСтроки(Элемент)
		
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда		
		Возврат;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда	
		Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр 	= НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
	Иначе
		Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр 	= Истина;
	КонецЕсли;
	Элементы.ДеревоНоменклатурыИнвентарныйНомер.ТолькоПросмотр 		= Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;
	Элементы.ДеревоНоменклатурыСерийныйНомер.ТолькоПросмотр 		= Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;	
	
	Если НЕ ПеретаскиваниеФлаг Тогда
		Элементы.ДеревоНоменклатурыКоличество.ТолькоПросмотр 			= НЕ СтрокаТабличнойЧасти.ИзменятьЦену;
		Элементы.ДеревоНоменклатурыЕдиницаИзмерения.ТолькоПросмотр 		= НЕ СтрокаТабличнойЧасти.ИзменятьЦену;
		Элементы.ДеревоНоменклатурыСумма.ТолькоПросмотр 				= НЕ СтрокаТабличнойЧасти.ИзменятьЦену;
		Элементы.ДеревоНоменклатурыСтавкаНДС.ТолькоПросмотр 			= НЕ СтрокаТабличнойЧасти.ИзменятьЦену;
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр 				= НЕ СтрокаТабличнойЧасти.ИзменятьЦену;
		Элементы.ДеревоНоменклатурыЦена.ТолькоПросмотр 					= НЕ СтрокаТабличнойЧасти.ИзменятьЦену;			
		Элементы.ДеревоНоменклатурыНоменклатура.ТолькоПросмотр 			= НЕ СтрокаТабличнойЧасти.ИзменятьЦену;		
		Элементы.ДеревоНоменклатурыСобытие.ТолькоПросмотр = 
		(СтрокаТабличнойЧасти.Событие = ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.СоСклада"))
		ИЛИ (СтрокаТабличнойЧасти.Событие = ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.Добавление"));			
	КонецЕсли;
	
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;

	ЗаполнитьСписокВыбораСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено И ДеревоНоменклатуры.ПолучитьЭлементы().Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ВнутреннееОбслуживание")
		ИЛИ Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ВнутреннееОбслуживаниеПроизведеноСразу") Тогда
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		Если СтрокаТабличнойЧасти.РазрешатьПеретаскивание ИЛИ СтрокаТабличнойЧасти.ИзменятьЦену Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;	
		
	Если Не Копирование И СтрокаТабличнойЧасти <> Неопределено		
		И УправлениеITОтделом8УФПовтИсп.НоменклатураМожетИметьКомплектующие(СтрокаТабличнойЧасти.Номенклатура) Тогда
		
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(НСтр("ru = 'Добавить в комплект'"));
		СЗ.Добавить(НСтр("ru = 'Добавить на этом же уровне'"));
		
		Если ДеревоНоменклатуры.ПолучитьЭлементы().Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Отказ				= Истина;
		СтруктураЭлемента 	= Новый Структура("Элемент",Элемент);		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВыбораИзМеню",ЭтотОбъект,СтруктураЭлемента);		
		ПоказатьВыборИзМеню(ОписаниеОповещения,СЗ,Элементы.ДеревоНоменклатуры.КоманднаяПанель);
		Возврат;
		
	КонецЕсли;	
	
	Отказ					= Истина;
	
	Результат				= Новый Структура("Значение", НСтр("ru = 'Добавить на этом же уровне'"));
	СтруктураЭлемента 		= Новый Структура("Элемент", Элемент);
	ПослеВыбораИзМеню(Результат, СтруктураЭлемента);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМеню(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 		 
		Возврат;
	КонецЕсли;
	
	РеквизитДерево	= ЭтаФорма["ДеревоНоменклатуры"];
	ВКомплект 		= Ложь;
	Элемент 		= ДополнительныеПараметры.Элемент;
	
	Если Результат.Значение = НСтр("ru = 'Добавить в комплект'") Тогда 
		ВКомплект = Истина;
	КонецЕсли;
	
	Если ВКомплект Тогда
		// Внутрь комплекта.
		Приемник = РеквизитДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Если ЗначениеЗаполнено(Приемник.КарточкаНоменклатуры) Тогда
			Если НЕ Элемент.Развернут(Приемник.ПолучитьИдентификатор()) Тогда
				Элемент.Развернуть(Приемник.ПолучитьИдентификатор());
			КонецЕсли;		
			НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Приемник);
		Иначе
			ДопПараметры 		= Новый Структура("РеквизитДерево, Приемник", РеквизитДерево, Приемник);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВопросаСоздатьКарточкуНоменклатуры", ЭтотОбъект, ДопПараметры);
			
			Кнопки 				= Новый СписокЗначений;
			Кнопки.Добавить("КнопкаСоздатьНовую", 		НСтр("ru = 'Создать новую'"));
			Кнопки.Добавить("КнопкаВыбратьИзСписка", 	НСтр("ru = 'Выбрать из списка'"));
			Кнопки.Добавить("КнопкаОтмена", 			НСтр("ru = 'Отмена'"));
			
			ПоказатьВопрос(ОписаниеОповещения, СтрШаблон(НСтр("ru = 'Перед добавлением в комплект необходимо заполнить карточку для номенклатуры ""%1"".
                                                               |Создать новую или выбрать существующую из списка?'"), Приемник.Номенклатура), Кнопки,,"КнопкаСоздатьНовую");
			Возврат;				
		КонецЕсли;
	ИначеЕсли Элемент.ТекущаяСтрока = Неопределено Тогда
		// Добавляем в корень.
        НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Неопределено);		
    ИначеЕсли РеквизитДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя() = Неопределено Тогда
        // Добавляем в корень.
        НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Неопределено);
	Иначе
		// На текущий уровень.
		Приемник = РеквизитДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя();
		Если ЗначениеЗаполнено(Приемник.КарточкаНоменклатуры) Тогда
			Если НЕ Элемент.Развернут(Приемник.ПолучитьИдентификатор()) Тогда
				Элемент.Развернуть(Приемник.ПолучитьИдентификатор());
			КонецЕсли;		
			НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Приемник);
		Иначе
			ДопПараметры 		= Новый Структура("РеквизитДерево, Приемник", РеквизитДерево, Приемник);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВопросаСоздатьКарточкуНоменклатуры", ЭтотОбъект, ДопПараметры);
			
			Кнопки 				= Новый СписокЗначений;
			Кнопки.Добавить("КнопкаСоздатьНовую", 		НСтр("ru = 'Создать новую'"));
			Кнопки.Добавить("КнопкаВыбратьИзСписка", 	НСтр("ru = 'Выбрать из списка'"));
			Кнопки.Добавить("КнопкаОтмена", 			НСтр("ru = 'Отмена'"));
			
			ПоказатьВопрос(ОписаниеОповещения, СтрШаблон(НСтр("ru = 'Перед добавлением в комплект необходимо заполнить карточку для номенклатуры ""%1"".
                                                               |Создать новую или выбрать существующую из списка?'"), Приемник.Номенклатура), Кнопки,,"КнопкаСоздатьНовую");
			Возврат;				
		КонецЕсли;
	КонецЕсли;		
	НоваяСтрока.РазрешатьУдалять			= Истина;
	НоваяСтрока.РазрешатьПеретаскивание 	= Истина;
	НоваяСтрока.ИзменятьЦену				= Истина;
	НоваяСтрока.ОбслуживаемаяНоменклатура	= Ложь;
	НоваяСтрока.Событие						= ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.Добавление");
	НоваяСтрока.ИконкаСобытия				= 1;
	
	ТекущийЭлемент							= Элемент;
	Элемент.ТекущаяСтрока					= НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент 							= Элементы.ДеревоНоменклатурыНоменклатура;	
	Элемент.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриИзменении(Элемент)
	
	ОбновитьНумерациюВДеревеЗначенийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;	
	Если СтрокаТабличнойЧасти = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана номенклатура для выбора карточки.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ПеретаскиваниеФлаг И НЕ СтрокаТабличнойЧасти.ИзменятьЦену Тогда 				
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя изменять карточку номенклатуры в текущей строке'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если Объект.Ссылка.Пустая() Тогда
		ПараметрыФормы.Вставить("ОтборТолькоНеИспользованные", Истина);
		ПараметрыФормы.Вставить("ВидимостьОтборПоступление", Ложь);
	Иначе
		ПараметрыФормы.Вставить("ОтборПоступление", Объект.Ссылка);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ОтборНоменклатура", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.КарточкаНоменклатуры);
	
	ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСерийныйНомерПриИзменении(Элемент)
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьНомерНаСервере(Элементы.ДеревоНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры, "СерийныйНомер", Элементы.ДеревоНоменклатуры.ТекущиеДанные.СерийныйНомер);
	ОбновитьПовторноИспользуемыеЗначения();
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строки Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки = Строки.ПолучитьИдентификатор();
		Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыИнвентарныйНомерПриИзменении(Элемент)
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьНомерНаСервере(Элементы.ДеревоНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры, "ИнвентарныйНомер", Элементы.ДеревоНоменклатуры.ТекущиеДанные.ИнвентарныйНомер);
	ОбновитьПовторноИспользуемыеЗначения();
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строки Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки = Строки.ПолучитьИдентификатор();
		Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборУслуги", Ложь);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("Ключ", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТабличнойЧасти.Номенклатура);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборУслуги", Истина);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ПросмотрСписком", Истина);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Услуги.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Услуги.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЕдиницаИзмеренияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для Каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	КонецЕсли;	
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли; 		
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.УслугиСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.УслугиСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
КонецПроцедуры

&НаКлиенте
Процедура ВидНачалаОбслуживанияПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВидОкончанияОбслуживанияПриИзменении(Элемент)	
	
	Если ДеревоНоменклатуры.ПолучитьЭлементы().Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВидОкончанияОбслуживанияПриИзмененииЗавершение",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Дерево номенклатуры заполнено, для продолжения его необходимо очистить. Продолжить?'"),Режим);
		Возврат;
	КонецЕсли;
	ВидОкончанияОбслуживанияПриИзмененииФрагмент();	
КонецПроцедуры

&НаКлиенте
Процедура ВидОкончанияОбслуживанияПриИзмененииЗавершение(РезультатВопроса,ДопПараметры)Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УстановитьВидимостьДоступность();
		Возврат;
	КонецЕсли;
	ВидОкончанияОбслуживанияПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ВидОкончанияОбслуживанияПриИзмененииФрагмент()
	
	// Очистим все.
	Объект.Номенклатура.Очистить();
	ВывестиДеревоНоменклатуры();	
	
	Если Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ВнутреннееОбслуживание") 
		ИЛИ Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ВнутреннееОбслуживаниеПроизведеноСразу") Тогда
		Элементы.ДеревоНоменклатурыДобавитьНоменклатуру.Видимость = Ложь;
	Иначе
		Элементы.ДеревоНоменклатурыДобавитьНоменклатуру.Видимость = Истина;
	КонецЕсли;
	
	// Выведем.
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЦенаПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)	
	
	ПеретаскиваниеФлаг 	   = Истина;	
    ПереносимыйЭлемент = ЭтаФорма["ДеревоНоменклатуры"].НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	Если НЕ ПереносимыйЭлемент.РазрешатьПеретаскивание Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередУдалением(Элемент, Отказ)
	ТД = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Если НЕ ТД.РазрешатьУдалять Тогда 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСобытиеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Событие = ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.Добавление") Тогда
		ТекущиеДанные.ИконкаСобытия = 1;
	ИначеЕсли ТекущиеДанные.Событие = ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.НаСклад") Тогда
		ТекущиеДанные.ИконкаСобытия = 2;
	ИначеЕсли ТекущиеДанные.Событие = ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.СоСклада") Тогда
		ТекущиеДанные.ИконкаСобытия = 3;			
	ИначеЕсли ТекущиеДанные.Событие = ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.Списание") Тогда
		ТекущиеДанные.ИконкаСобытия = 4;
	Иначе
		ТекущиеДанные.ИконкаСобытия = 0;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура МестоОбслуживанияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.МестоХраненияНаСклад) И ЗначениеЗаполнено(Объект.МестоОбслуживания) Тогда
		Объект.МестоХраненияНаСклад = Объект.МестоОбслуживания;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.МестоХраненияСоСклада) И ЗначениеЗаполнено(Объект.МестоОбслуживания) Тогда
		Объект.МестоХраненияСоСклада = Объект.МестоОбслуживания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаСостояние1Нажатие(Элемент)	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Место хранения для установки'"));
	ПараметрыОткрытия.Вставить("КлючПодсказки", "ОкончаниеОбслуживания_МестоХраненияДляУстановки");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСобытиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)	
	
	//СтандартнаяОбработка = Ложь;		
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СохранитьДеревоНоменклатуры();
	ПеретаскиваниеФлаг = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	Если Объект.Ссылка.Пустая() Тогда
		СтруктураДанные.Вставить("ДатаАктуальности", ПолучитьДатуНаСервере());
	Иначе
		СтруктураДанные.Вставить("ДатаАктуальности", Объект.Дата);
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломИзменения(Элемент, Отказ)
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.ДеревоНоменклатуры.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьТабличнуюЧастьНоменклатура();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПослеУдаления(Элемент)
	
	СохранитьДеревоНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КарточкаНоменклатуры) Тогда
		ИнвентарныйСерийныйНомер 				= ПолучитьИнвентарныйИСерийныйНомерНаСервере(СтрокаТабличнойЧасти.КарточкаНоменклатуры);
		СтрокаТабличнойЧасти.ИнвентарныйНомер 	= ИнвентарныйСерийныйНомер.ИнвентарныйНомер;
		СтрокаТабличнойЧасти.СерийныйНомер 		= ИнвентарныйСерийныйНомер.СерийныйНомер;
	Иначе
		СтрокаТабличнойЧасти.ИнвентарныйНомер 	= "";
		СтрокаТабличнойЧасти.СерийныйНомер 		= "";
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиент.ЗаполнитьКомплектПартию(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.УслугиСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.УслугиСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик события Нажатия кнопки ПодсказкаСостояние.
//
Процедура ПодсказкаМестоХраненияДляПеремещенийНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Место хранения для перемещений'"));
	ПараметрыОткрытия.Вставить("КлючПодсказки", "ОкончаниеОбслуживания_МестоХраненияДляПеремещений");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);
	
КонецПроцедуры // ПодсказкаСостояниеНажатие()

&НаКлиенте
Процедура ОтображатьИнвентарныеИСерийныеНомера(Команда)
	
	Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = НЕ Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
	УправлениеITОтделом8УФ.СохранитьНастройкуОтображатьИнвентарныеСерийныеНомера(Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка);
	УстановитьВидимостьДоступность();
	ОбновитьИнвентарныеИСерийныеНомераНаСервере();	
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строки Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки = Строки.ПолучитьИдентификатор();
		Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	Если ДеревоНоменклатуры.ПолучитьЭлементы().Количество()>0 Тогда
		Если Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентом") 
			ИЛИ Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентомПроизведеноСразу") Тогда			
			Оповещение		= Новый ОписаниеОповещения("ОчиститьДеревоНоменклатурыВопрос", ЭтотОбъект); 
			ТекстВопроса	= НСтр("ru = 'Номенклатура, добавленная без подбора будет очищена, продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		Иначе
			ПодборНаКлиенте();
		КонецЕсли;
	Иначе	
		ПодборНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДеревоНоменклатурыВопрос(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда		
		ПодборНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНаКлиенте()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	// Сохраняем то, что сейчас в дереве.		
	СохранитьДеревоНоменклатуры();
	
	// Показываем форму.
	Структура = Новый Структура;
	Структура.Вставить("Организация", Объект.Организация);	
	Если Объект.Ссылка.Пустая() Тогда
		Структура.Вставить("ДатаАктуальности", КонецДня(ПолучитьДатуНаСервере()));
	Иначе
		Структура.Вставить("ДатаАктуальности", Объект.Дата);
	КонецЕсли;
	Структура.Вставить("ОрганизацияТолькоПросмотр", Истина);
	Структура.Вставить("МестоХраненияТолькоПросмотр", Истина);
	Структура.Вставить("ДатаАктуальностиТолькоПросмотр", Истина);
	Структура.Вставить("КонтрагентТолькоПросмотр", Истина);
	Структура.Вставить("АдресВыбраннойНоменклатуры", ПолучитьНоменклатуруВДокументе());
	
	Если Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентом") Тогда		
		Структура.Вставить("Контрагент", Объект.Контрагент);
	Иначе
		Если Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ВнутреннееОбслуживаниеПроизведеноСразу")
			ИЛИ Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентомПроизведеноСразу") Тогда
			Структура.Вставить("МестоХранения", Объект.МестоХранения);
		Иначе
			Структура.Вставить("МестоХранения", Объект.МестоОбслуживания);		
		КонецЕсли;		
	КонецЕсли;	
	
	// Убираем из отбора, все что было подобрано нормальным способом.	
	Структура.Вставить("УбратьИзПодбораНоменклатуру", ПолучитьТЗНоменклатурыУбратьИзПодбора(Новый Структура("ОбслуживаемаяНоменклатура", Ложь)));		
	
	Результат = Неопределено;
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", Структура, ЭтаФорма,,,, Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, "ДокументОкончаниеОбслуживания (подборОткрытие)");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодборЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Если Результат <> Неопределено Тогда
		
        ПодборНаСервере(Результат, Ложь, Ложь, Ложь, Истина);
        
        ВывестиДеревоНоменклатуры();
		ОбновитьИнвентарныеИСерийныеНомераНаСервере();
        
        // Разворачиваем сформированное дерево номенклатуры
        КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
        Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
            ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
            Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;
		
		Модифицированность = Истина;
		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	МестоХраненияЗаполнено = ПроверитьЗаполнениеМестХранения();
	Если МестоХраненияЗаполнено = Истина Тогда			
		ТекШтрихкод = "";	
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОповещенияПриЗагрузкеИзТСД = Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗагрузкеИзТСД, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") 
	   И Результат.Количество() > 0 Тогда
		ПолученыШтрихкоды(Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели табличного поля.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	СохранитьДеревоНоменклатуры();
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
	
	ВывестиДеревоНоменклатуры();
	
	// Разворачиваем дерево.
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;		
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура УстановитьСоСклада(Команда)
	
	// Сохраняем то, что сейчас в дереве.		
	СохранитьДеревоНоменклатуры();
	
	// Показываем форму.
	Структура = Новый Структура;
	Структура.Вставить("Организация", Объект.Организация);	
	Если Объект.Ссылка.Пустая() Тогда
		Структура.Вставить("ДатаАктуальности", КонецДня(ПолучитьДатуНаСервере()));
	Иначе
		Структура.Вставить("ДатаАктуальности", Объект.Дата);
	КонецЕсли;
	Структура.Вставить("ОрганизацияТолькоПросмотр", Истина);
	Структура.Вставить("МестоХраненияТолькоПросмотр", Истина);
	Структура.Вставить("ДатаАктуальностиТолькоПросмотр", Истина);
	Структура.Вставить("КонтрагентТолькоПросмотр", Истина);	
	
	Если Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентом")
		ИЛИ Объект.ВидОкончанияОбслуживания = ПредопределенноеЗначение("Перечисление.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентомПроизведеноСразу") Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя устанавливать со своего склада, когда обслуживанием занимается сторонняя организация.'"));
		Возврат;		
	Иначе
		Структура.Вставить("МестоХранения", Объект.МестоХраненияСоСклада);		
	КонецЕсли;
	
	// Убираем из отбора, все что было подобрано нормальным способом.
	Структура.Вставить("УбратьИзПодбораНоменклатуру", ПолучитьТЗНоменклатурыУбратьИзПодбора(Новый Структура("ОбслуживаемаяНоменклатура", Истина)));			

	Результат = Неопределено;
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", Структура, ЭтаФорма,,,, Новый ОписаниеОповещения("УстановитьСоСкладаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоСкладаЗавершение(Результат, ДополнительныеПараметры) Экспорт
        
    Если Результат <> Неопределено Тогда
		
		ПодборНаСервереСоСклада(Результат);
        
        ВывестиДеревоНоменклатуры();
        
        // Разворачиваем сформированное дерево номенклатуры
        КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
        Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
            ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
            Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;
		
		Модифицированность = Истина;
		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
		
	Отказ							= Ложь;
	Копирование						= Ложь;
	ТаблицаДеревоНоменклатуры		= Элементы.ДеревоНоменклатуры;
	ДеревоНоменклатурыПередНачаломДобавления(ТаблицаДеревоНоменклатуры, Отказ, Копирование, , );
	ДеревоНоменклатурыПриАктивизацииСтроки(Элементы.ДеревоНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПоискаПоШтрихкоду(Команда)
	Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Пометка = Не Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Пометка;
	Если Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Пометка 	= Истина Тогда
		Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Заголовок 	= НСтр("ru = 'По месту хранения'");
		Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Ширина		= 17;
	Иначе
		Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Заголовок = НСтр("ru = 'По складу'");
		Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Ширина		= 17;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеМестХранения()
	Если Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Пометка = Истина Тогда
		Если Не ЗначениеЗаполнено(Объект.МестоХранения) Тогда 
			ПоказатьПредупреждение(,НСтр("ru = 'Не заполнено место хранения'"));
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Объект.МестоХраненияСоСклада) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Не заполнено место хранения со склада'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьУслугиПоКоличеству(Команда)
	
	СохранитьДеревоНоменклатуры();
	
	Если Объект.Номенклатура.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Номенклатура"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Услуги"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	РаспределитьУслугиПоКоличествуНаСервере();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьУслугиПоСумме(Команда)
	
	СохранитьДеревоНоменклатуры();
	
	Если Объект.Номенклатура.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Номенклатура"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Услуги"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	РаспределитьУслугиПоСуммеНаСервере();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьУслугиПоКарточкамПоКоличеству(Команда)
	
	СохранитьДеревоНоменклатуры();
	
	Если Объект.Номенклатура.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Номенклатура"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Услуги"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	РаспределитьУслугиПоКарточкамНаСервере();	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьУслугиПоКарточкамПоСумме(Команда)
	
	СохранитьДеревоНоменклатуры();
	
	Если Объект.Номенклатура.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Номенклатура"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Услуги"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	РаспределитьУслугиПоКарточкамПоСуммеНаСервере();	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область БПО

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.СтатьяДоходовРасходов.Видимость               	= Объект.ПоложениеСтатьиДоходовРасходов = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	Элементы.ДеревоНоменклатурыСтатьяДоходовРасходов.Видимость = Объект.ПоложениеСтатьиДоходовРасходов = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;	
	Элементы.УслугиСтатьяДоходовРасходов.Видимость 			= Объект.ПоложениеСтатьиДоходовРасходов = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	
	Элементы.Подразделение.Видимость                      	= (Объект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке) ИЛИ (НЕ ЗначениеЗаполнено(Объект.ПоложениеПодразделения));
	Элементы.ДеревоНоменклатурыПодразделение.Видимость    	= Объект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;		
	Элементы.УслугиПодразделение.Видимость 					= Объект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	
	Элементы.ДеревоНоменклатурыСерийныйНомер.Видимость 		= Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
	Элементы.ДеревоНоменклатурыИнвентарныйНомер.Видимость 	= Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
	
	Элементы.Контрагент.Видимость							= (Объект.ВидОкончанияОбслуживания = Перечисления.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентом ИЛИ Объект.ВидОкончанияОбслуживания = Перечисления.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентомПроизведеноСразу);
	Элементы.Договор.Видимость								= Элементы.Контрагент.Видимость;
	Элементы.МестоОбслуживания.Видимость					= НЕ Элементы.Контрагент.Видимость;
	Элементы.Заглушка.Видимость								= НЕ Элементы.Контрагент.Видимость;	
	
	Если Объект.ВидОкончанияОбслуживания = Перечисления.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентом ИЛИ Объект.ВидОкончанияОбслуживания = Перечисления.ВидыОкончанияОбслуживания.ОбслуживаниеКонтрагентомПроизведеноСразу Тогда
		Элементы.ДеревоНоменклатурыУстановитьСоСклада.Видимость = Ложь;
		Элементы.ГруппаМестоХраненияДляУстановки.Видимость = Ложь;
		Элементы.МестоОбслуживания.Видимость = Ложь;
	Иначе
		Элементы.ДеревоНоменклатурыУстановитьСоСклада.Видимость = Истина;
		Элементы.ГруппаМестоХраненияДляУстановки.Видимость = Истина;
		Элементы.МестоОбслуживания.Видимость = Объект.ВидОкончанияОбслуживания <> Перечисления.ВидыОкончанияОбслуживания.ВнутреннееОбслуживаниеПроизведеноСразу;
	КонецЕсли;
	
	РаспределятьУслугиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РаспределятьУслугиПриИзмененииНаСервере(Знач ОчиститьКолонкуСуммаРасходов = Ложь)
	
	Если Объект.РаспределятьУслуги = Истина Тогда
		Элементы.ДеревоНоменклатурыСуммаРасходов.Видимость	= Истина;
		Элементы.РаспределитьУслуги.Видимость				= Истина;
	Иначе
		Элементы.ДеревоНоменклатурыСуммаРасходов.Видимость	= Ложь;
		Элементы.РаспределитьУслуги.Видимость				= Ложь;
		
		Если ОчиститьКолонкуСуммаРасходов = Истина Тогда			
			ДЗНоменклатура = РеквизитФормыВЗначение("ДеревоНоменклатуры");			
			ОбработкаТабличныхЧастей.УстановитьЗначениеКолонкиВДеревеНоменклатуры(ДЗНоменклатура, "СуммаРасходов", 0);
			ЗначениеВРеквизитФормы(ДЗНоменклатура, "ДеревоНоменклатуры");			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти)
	
   Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти, "НеОблагается");
   
КонецФункции

&НаСервере
Функция ЗначениеНаСервере(Стр, Параметры = Неопределено)
	Если Параметры = Неопределено Тогда
		Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(Стр, Параметры);
	Иначе
		Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(Стр, Параметры);
	КонецЕсли;	
КонецФункции

&НаСервере
Процедура ВыполнитьНаСервере(Стр)
	Выполнить(Стр);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияНачалоВыбораИзСписка.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	
	СписокЕдиницаИзмерения = Новый СписокЗначений;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);
	
	СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, Номенклатура.ЕдиницаИзмерения.Наименование + " " + НСтр("ru = '(ед. хранения)'"));
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Номенклатура);
	
	Родитель = Номенклатура.Родитель;
	
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Прервать;
		Иначе
			МассивОтбора.Добавить(Родитель);
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	КонецЦикла;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка()	

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	РазностьДат = УправлениеITОтделом8УФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("РазностьДат", РазностьДат);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Процедура ОбновитьРеквизитыБюджетов()
	
	Объект.Бюджет			= УправлениеITОтделом8УФ.НайтиБюджетНаДату(Объект.Дата, Объект.Организация);
	Объект.ПериодБюджета	= УправлениеITОтделом8УФ.НайтиПериодБюджета(Объект.Дата, Объект.Бюджет);
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Содержание", СтруктураДанные.Номенклатура.Наименование);
	
	Если ТипЗнч(СтруктураДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	Иначе
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.Владелец.ЕдиницаИзмерения);
	КонецЕсли;
	
	СтруктураДанные.Вставить("НавСсылка", СтруктураДанные.Номенклатура.ВидНоменклатуры.НавСсылка);
	
	// Проверка, что ведется учет по карточкам
	СтруктураДанные.Вставить("КарточкаНоменклатуры", УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(СтруктураДанные.Номенклатура));
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
																
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;
	
	Цена = 0;	
	СтруктураДанные.Вставить("Цена", Цена);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	КонецЕсли;
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

// Процедура рассчитывает сумму в строке табличной части.
//
&НаСервере
Процедура РассчитатьСуммуВСтрокеТабличнойЧастиСервер(СтрокаТабличнойЧасти)
		
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДССервер(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧастиСервер()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента() 

// Рассчитывается сумма НДС в строке табличной части.
//
&НаСервере
Процедура РассчитатьСуммуНДССервер(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента()

&НаСервере
// Сохранения дерева номенклатуры
Процедура СохранитьДеревоНоменклатуры(ТекущийОбъект =  Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекОбъект = РеквизитФормыВЗначение("Объект");
	Иначе
		ТекОбъект = ТекущийОбъект;
	КонецЕсли;
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	
	ОбработкаТабличныхЧастей.СохранитьДеревоНоменклатуры(ДЗ, ТекОбъект.Номенклатура);
	
	Если ТекущийОбъект = Неопределено Тогда
		ЗначениеВДанныеФормы(ТекОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПодчиненнуюНоменклатуру(Отказ, ТекущийОбъект, СтрокаДерева)
	
	Для Каждого Строки Из СтрокаДерева.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для номенклатуры ""%1"" в документе не указана карточка.'"), Строки.Номенклатура);
			УправлениеITОтделом8УФ.СообщитьОбОшибке(Объект, ТекстСообщения,,, "ДеревоНоменклатуры",	Отказ);
			Возврат;
		КонецЕсли;
		
		НоваяСтрока 						= ТекущийОбъект.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
		Если ЗначениеЗаполнено(Строки.Родитель) Тогда
			НоваяСтрока.Партия 				= Строки.Родитель.КарточкаНоменклатуры;
		КонецЕсли;
		СохранитьПодчиненнуюНоменклатуру(Отказ, ТекущийОбъект, Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Вывод дерева номенклатуры
Процедура ВывестиДеревоНоменклатуры()
	
	ТЗ = Объект.Номенклатура.Выгрузить();
	ТЗ.Колонки.Добавить("НавСсылка");
	ТЗ.Колонки.Добавить("ИконкаСобытия");
	
	мПеречисленияСобытиеОбслуживанияДобавление	= Перечисления.СобытиеОбслуживания.Добавление;
	мПеречисленияСобытиеОбслуживанияНаСклад		= Перечисления.СобытиеОбслуживания.НаСклад;
	мПеречисленияСобытиеОбслуживанияСоСклада	= Перечисления.СобытиеОбслуживания.СоСклада;
	мПеречисленияСобытиеОбслуживанияСписание	= Перечисления.СобытиеОбслуживания.Списание;
	
	Для Каждого Строки Из ТЗ Цикл
		Строки.НавСсылка = УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(Строки.Номенклатура);		
		Если Строки.Событие = мПеречисленияСобытиеОбслуживанияДобавление Тогда
			Строки.ИконкаСобытия = 1;
		ИначеЕсли Строки.Событие = мПеречисленияСобытиеОбслуживанияНаСклад Тогда
			Строки.ИконкаСобытия = 2;
		ИначеЕсли Строки.Событие = мПеречисленияСобытиеОбслуживанияСоСклада Тогда
			Строки.ИконкаСобытия = 3;			
		ИначеЕсли Строки.Событие = мПеречисленияСобытиеОбслуживанияСписание Тогда
			Строки.ИконкаСобытия = 4;
		Иначе
			Строки.ИконкаСобытия = 0;
		КонецЕсли;
	КонецЦикла;
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	ДЗ.Строки.Очистить();	
	УправлениеITОтделом8УФ.ВывестиДеревоНоменклатуры(ДЗ, ТЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьНумерациюВДеревеЗначенийНаСервере()
	
	ОбработкаТабличныхЧастей.ОбновитьНумерациюВДереве(ДеревоНоменклатуры);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнвентарныеИСерийныеНомераНаСервере()
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	УправлениеITОтделом8УФ.ОбновитьИнвентарныеИСерийныеНомера(ДЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)

	// Может содержать дочерние
	Если НовыйРодитель <> Неопределено Тогда
		Если ЗначениеЗаполнено(НовыйРодитель.Номенклатура) Тогда
			Параметр = Новый Структура();
			Параметр.Вставить("Номенклатура", НовыйРодитель.Номенклатура);
			Если НЕ ЗначениеНаСервере("Параметры.Номенклатура.ВидНоменклатуры.МожетИметьКомплектующие", Параметр) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	// Родитель в родителе
    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
	КонецЦикла;
	
    Возврат Истина;

КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен.
    // Это происходит если выделены несколько элементов одной и той же ветви дерева на разных уровнях иерархии.
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень.
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
            [КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Если Источник.ПолучитьРодителя() = Неопределено Тогда
        РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
    Иначе
        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуДерева(РеквизитДерево, Родитель)
	
    Возврат ОбработкаТабличныхЧастейКлиент.ДобавитьСтрокуДерева(РеквизитДерево, Родитель);
	
КонецФункции

&НаСервере
Функция ПроверитьМожетЛиИметьКомплектующие(Номенклатура)
	Возврат Номенклатура.ВидНоменклатуры.МожетИметьКомплектующие;
КонецФункции

&НаСервере
Процедура ИзменитьНомерНаСервере(Карточка, ИмяРеквизита, Значение)
	Если ЗначениеЗаполнено(Карточка) Тогда
		Попытка
			ОбъектКарточки = Карточка.ПолучитьОбъект();
			ОбъектКарточки[ИмяРеквизита] = Значение;
			ОбъектКарточки.Записать();
			СохранитьДеревоНоменклатуры();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
				
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодборНаСервере(АдресТЗ, ИзменятьЦену, РазрешатьПеретаскивание, РазрешатьУдалять, ОбслуживаемаяНоменклатура)
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	
	ТЗСохраненная = Объект.Номенклатура.Выгрузить();
	
    // Очистка номенклатуры
    Объект.Номенклатура.Очистить();
	
	мПеречисленияСобытиеОбслуживанияСоСклада = Перечисления.СобытиеОбслуживания.СоСклада;
	
	// Добавляем Результат в таблицу
	Для Каждого Строки Из ТЗ Цикл
		
		НоваяСтрока = Объект.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
		НоваяСтрока.ИзменятьЦену 			= ИзменятьЦену;
		НоваяСтрока.РазрешатьПеретаскивание = РазрешатьПеретаскивание;
		НоваяСтрока.РазрешатьУдалять 		= РазрешатьУдалять;
		НоваяСтрока.ОбслуживаемаяНоменклатура = ОбслуживаемаяНоменклатура;
		НоваяСтрока.Количество 				= Строки.КоличествоВыбрано;
		Если НЕ ОбслуживаемаяНоменклатура Тогда
			НоваяСтрока.Событие = мПеречисленияСобытиеОбслуживанияСоСклада;
		КонецЕсли;
		
		Структура = Новый Структура("Номенклатура,КарточкаНоменклатуры,Партия,Комплект");
		ЗаполнитьЗначенияСвойств(Структура, НоваяСтрока);
		Массив = ТЗСохраненная.НайтиСтроки(Структура);
		Для Каждого СтрокиМассива Из Массив Цикл
			ЗаполнитьЗначенияСвойств(НоваяСтрока,  СтрокиМассива, "Описание,Подразделение,СтатьяДоходовРасходов");
		КонецЦикла;
		
	КонецЦикла;	
	
	УдалитьИзВременногоХранилища(АдресТЗ);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруВДокументе()
	ТЗ = Объект.Номенклатура.Выгрузить();	
	Возврат ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоПоШтрихкоду(ДанныеШтрихкода)
	
	ВерхняяНоменклатура = ДанныеШтрихкода.Номенклатура;
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", ?(Объект.Ссылка.Пустая(), ТекущаяДатаСеанса(), Объект.Дата));
	
	// По верхнему уровню выводим все дочерние элементы
	ОткрытыйСписок = Новый Массив();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.КоличествоОстаток КАК Количество,
		|	ОстаткиОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(
		|			&Период,
		|			ВЫБОР
		|					КОГДА ТИПЗНАЧЕНИЯ(Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|				И Номенклатура = &Номенклатура) КАК ОстаткиОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РемонтыОстатки.Номенклатура,
		|	РемонтыОстатки.Партия,
		|	РемонтыОстатки.КоличествоОстаток,
		|	РемонтыОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.Ремонты.Остатки(
		|			&Период,
		|			ВЫБОР
		|					КОГДА ТИПЗНАЧЕНИЯ(Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|				И Номенклатура = &Номенклатура) КАК РемонтыОстатки";
		
	Запрос.УстановитьПараметр("Номенклатура", ВерхняяНоменклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НоваяСтрока							= Объект.Номенклатура.Добавить();
		НоваяСтрока.Номенклатура			= ВерхняяНоменклатура.Владелец;
		НоваяСтрока.КарточкаНоменклатуры	= ВерхняяНоменклатура;
		НоваяСтрока.Количество				= Выборка.Количество;
		НоваяСтрока.Сумма					= Выборка.Сумма;
		
		НоваяСтрока.ИзменятьЦену			= Ложь;
		НоваяСтрока.РазрешатьПеретаскивание = ?(Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Пометка = Истина,Ложь,Истина);
		НоваяСтрока.РазрешатьУдалять		= Истина;
		НоваяСтрока.ОбслуживаемаяНоменклатура = Истина;		
				
		НоваяСтрока.ЕдиницаИзмерения		= ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
		
		РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НоваяСтрока);
	КонецЕсли;		
	ОткрытыйСписок.Добавить(ВерхняяНоменклатура);		
	
	ЗакрытыйСписок = Новый Массив();
	ЗакрытыйСписок.Добавить(ВерхняяНоменклатура);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.КоличествоОстаток КАК Количество,
		|	ОстаткиОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Партия = &Партия) КАК ОстаткиОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РемонтыОстатки.Номенклатура,
		|	РемонтыОстатки.Партия,
		|	РемонтыОстатки.КоличествоОстаток,
		|	РемонтыОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.Ремонты.Остатки(&Период, Партия = &Партия) КАК РемонтыОстатки";
		
	Пока ЗакрытыйСписок.Количество() > 0 Цикл
		
		ПервыйЭлемент = ЗакрытыйСписок.Получить(0);
		
		// Эх, запрос в цикле... (да простят меня методисты 1С)
		Запрос.УстановитьПараметр("Партия", ПервыйЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ОткрытыйСписок.Найти(Выборка.Номенклатура) = Неопределено Тогда
				ОткрытыйСписок.Добавить(Выборка.Номенклатура);
				
				НоваяСтрока							= Объект.Номенклатура.Добавить();
				НоваяСтрока.Номенклатура			= Выборка.Номенклатура.Владелец;
				НоваяСтрока.Партия					= ПервыйЭлемент;
				НоваяСтрока.КарточкаНоменклатуры	= Выборка.Номенклатура;
				НоваяСтрока.Комплект				= ?(ВерхняяНоменклатура = Выборка.Номенклатура, Справочники.КарточкиНоменклатуры.ПустаяСсылка(), ВерхняяНоменклатура);
				НоваяСтрока.Количество				= Выборка.Количество;
				НоваяСтрока.Сумма					= Выборка.Сумма;
				НоваяСтрока.ЕдиницаИзмерения		= ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				
				НоваяСтрока.ИзменятьЦену			= Ложь;
				НоваяСтрока.РазрешатьПеретаскивание = ?(Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Пометка = Истина,Ложь,Истина);
				НоваяСтрока.РазрешатьУдалять		= Истина;
				НоваяСтрока.ОбслуживаемаяНоменклатура = Истина;
				РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НоваяСтрока);
				
			КонецЕсли;
		КонецЦикла;
		
		ЗакрытыйСписок.Удалить(0);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ДеревоНоменклатурыСтавкаНДС.Видимость = Истина;
		Элементы.ДеревоНоменклатурыСуммаНДС.Видимость = Истина;
		Элементы.ДеревоНоменклатурыВсего.Видимость = Истина;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Номенклатура Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.ДеревоНоменклатурыСтавкаНДС.Видимость = Ложь;
		Элементы.ДеревоНоменклатурыСуммаНДС.Видимость = Ложь;
		Элементы.ДеревоНоменклатурыВсего.Видимость = Ложь;

		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
		    СтавкаНДСПоУмолчанию = УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;	
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Номенклатура Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = 'Валюта: %Валюта%, курс: %Курс%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", ?((НЕ ЗначениеЗаполнено(СтруктураНадписи.ВалютаРасчетов)) ИЛИ СтруктураНадписи.ВалютаДокумента = СтруктураНадписи.ВалютаРасчетов, СокрЛП(Строка(СтруктураНадписи.Курс)), СокрЛП(Строка(СтруктураНадписи.КурсНациональнаяВалюта))));
		Иначе
			ТекстНадписи = НСтр("ru = 'Валюта: <нет>'");
		КонецЕсли;
	КонецЕсли;
			
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = '; %НалогообложениеНДС%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", СокрЛП(Строка(СтруктураНадписи.НалогообложениеНДС)));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе		
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;	
	КонецЕсли;	
 
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.Договор);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);	
	
	ВалютаСтруктура = Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение);
	
	// 2. Открываем форму "Цены и Валюта".
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтаФорма, ВалютаСтруктура);
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат,ДополнительныеПараметры)Экспорт
	
	СтруктураЦеныИВалюта = Результат;
	Оповещение           = ДополнительныеПараметры.Оповещение;
	
	// 3. Перезаполняем табличную часть "НОМЕНКЛАТУНА" если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		Объект.ВалютаДокумента       = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.Курс 			     = СтруктураЦеныИВалюта.КурсРасчетов;
		Объект.Кратность             = СтруктураЦеныИВалюта.КратностьРасчетов;
		Объект.НалогообложениеНДС    = СтруктураЦеныИВалюта.НалогообложениеНДС;
		Объект.СуммаВключаетНДС      = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = СтруктураЦеныИВалюта.НДСВключатьВСтоимость;
				
		// Пересчитываем цены по валюте.
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			  И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда
			УправлениеITОтделом8УФКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Услуги");
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			И НЕ СтруктураЦеныИВалюта.СуммаВключаетНДС = СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
			УправлениеITОтделом8УФКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Услуги");
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов",			ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс",					Объект.Курс);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта",	КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций",	УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	ЦеныИВалюта      = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()	

&НаСервере
Функция ПолучитьТЗНоменклатурыУбратьИзПодбора(Отбор)
	
	ТЗ = Объект.Номенклатура.Выгрузить(Отбор);
	Возврат ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПодборНаСервереСоСклада(АдресТЗ)	
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	
	мПеречисленияСобытиеОбслуживанияСоСклада = Перечисления.СобытиеОбслуживания.СоСклада;
	
	// Добавляем Результат в таблицу
	Для Каждого Строки Из ТЗ Цикл
		НоваяСтрока = Объект.Номенклатура.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
		НоваяСтрока.ИзменятьЦену 			= Ложь;
		НоваяСтрока.РазрешатьПеретаскивание = Истина;
		НоваяСтрока.РазрешатьУдалять 		= Истина;
		НоваяСтрока.ОбслуживаемаяНоменклатура = Ложь;
		НоваяСтрока.Количество 				= Строки.КоличествоВыбрано;
		НоваяСтрока.Сумма					= Строки.Сумма;
		НоваяСтрока.Событие					= мПеречисленияСобытиеОбслуживанияСоСклада;
		НоваяСтрока.ПартияСоСклада			= Строки.Партия;
	КонецЦикла;	
	
	УдалитьИзВременногоХранилища(АдресТЗ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
		
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для Каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
		   
		    Если ТипЗнч(ДанныеШтрихкода.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				НоменклатураШтрихкода			= ДанныеШтрихкода.Номенклатура;
				КарточкаНоменклатурыШтрихкода	= УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(НоменклатураШтрихкода);
		    Иначе
				НоменклатураШтрихкода			= ДанныеШтрихкода.Номенклатура.Владелец;
				КарточкаНоменклатурыШтрихкода	= ДанныеШтрихкода.Номенклатура;			   				
			КонецЕсли;
					   
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", 			СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", 			НоменклатураШтрихкода);
			СтруктураДанныеНоменклатуры.Вставить("КарточкаНоменклатуры", 	КарточкаНоменклатурыШтрихкода);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", 		ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = НоменклатураШтрихкода.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СохранитьДеревоНоменклатуры();
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);	
	МассивВывода = Новый Массив;
	
	Для Каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
				
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		Иначе
			
			НоменклатураШтрихкода		= ДанныеШтрихкода.Номенклатура;
			ЕдиницаИзмеренияШтрихкода	= ДанныеШтрихкода.ЕдиницаИзмерения;			
			МассивВывода.Добавить(ДобавитьНоменклатуруВДокумент(ДанныеШтрихкода));
						
		КонецЕсли;
	КонецЦикла;
	
	// Вывод дерева	
	ОбработатьВыводДереваНоменклатуры(МассивВывода);
	
	Возврат НеизвестныеШтрихкоды;
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов)
	
	Модифицированность = Истина;
	
	НеизвестныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	
	ВозвращаемыеПараметры = Неопределено;
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры", Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для Каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для Каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеизвестныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для Каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНоменклатуруВДокумент(СтруктураНоменклатуры)
	
	ВерхняяНоменклатура = СтруктураНоменклатуры.Номенклатура;	
	НайденнаяНоменклатура = Новый Структура;	
	
	Если ТипЗНЧ(ВерхняяНоменклатура) = Тип("СправочникСсылка.Номенклатура") 
		И ВерхняяНоменклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры = Истина	Тогда 
		НайденнаяНоменклатура.Вставить("НуженВыводДерева",Ложь);
		НайденнаяНоменклатура.Вставить("СообщениеПользователю", СтрШаблон(НСтр("ru = 'Для номенклатуры ""%1"" в ее виде указано ""Вести учет по карточкам"". Используйте штрих-код из карточки номенклатуры.'"), ВерхняяНоменклатура));
		Возврат НайденнаяНоменклатура;
	КонецЕсли;
	
	ПериодДляЗапроса = ?(Объект.Ссылка.Пустая(), ТекущаяДатаСеанса(), Объект.Дата);
	
	СтруктураКоличество = ПолучитьОстаткиПоНоменклатуре(ВерхняяНоменклатура,ПериодДляЗапроса);
	
	// Нет на остатках
	Если СтруктураКоличество = Неопределено Тогда		
		СтруктураКоличество = Новый Структура;		
		СтруктураКоличество.Вставить("Комплект", 		ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
		СтруктураКоличество.Вставить("Партия", 			ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
		СтруктураКоличество.Вставить("Номенклатура", 	ВерхняяНоменклатура);
		СтруктураКоличество.Вставить("Количество", 		0);
		СтруктураКоличество.Вставить("Цена", 			0);
		СтруктураКоличество.Вставить("Сумма", 			0);
	КонецЕсли;	
	
	НайденнаяНоменклатура.Вставить("НоменклатураШК",	 		ВерхняяНоменклатура);		
	НайденнаяНоменклатура.Вставить("Партия", 					СтруктураКоличество.Партия);				
	НайденнаяНоменклатура.Вставить("Комплект", 					СтруктураКоличество.Комплект);				
	
	// Это "свернутый" комплект
	Если ЗначениеЗаполнено(НайденнаяНоменклатура.Комплект) Тогда			
		
		ОстаткиПоКомплекту = ПолучитьОстаткиПоНоменклатуре(СтруктураКоличество.Комплект,ПериодДляЗапроса);
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Истина);
		НайденнаяНоменклатура.Вставить("Номенклатура",			СтруктураКоличество.Комплект.Владелец);
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	СтруктураКоличество.Комплект);
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		СтруктураКоличество.Комплект.Владелец.ЕдиницаИзмерения);
		НайденнаяНоменклатура.Вставить("Количество",			ОстаткиПоКомплекту.Количество);
		НайденнаяНоменклатура.Вставить("Цена",					ОстаткиПоКомплекту.Цена);			
		НайденнаяНоменклатура.Вставить("Сумма",					ОстаткиПоКомплекту.Сумма);			
		НайденнаяНоменклатура.Вставить("Партия", 				ОстаткиПоКомплекту.Партия);				
		НайденнаяНоменклатура.Вставить("Комплект", 				ОстаткиПоКомплекту.Комплект);
		СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура);
		НайденнаяНоменклатура.Вставить("НуженВыводДерева",		Истина);
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Истина);			
		Возврат НайденнаяНоменклатура;
		
	КонецЕсли;		
	
	// Подчиненная номенклатура
	Если ЗначениеЗаполнено(НайденнаяНоменклатура.Партия) Тогда			
		
		НоменклатураВерхнегоУровня = ПолучитьВерхнююНоменклатуруПоКомплектующей(НайденнаяНоменклатура.Партия,ПериодДляЗапроса);
		ОстаткиПоКомплекту = ПолучитьОстаткиПоНоменклатуре(НоменклатураВерхнегоУровня,ПериодДляЗапроса);
		Если ТипЗНЧ(НоменклатураВерхнегоУровня)= Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
			НайденнаяНоменклатура.Вставить("Номенклатура",			НоменклатураВерхнегоУровня.Владелец);
			НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	НоменклатураВерхнегоУровня);
			НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		НоменклатураВерхнегоУровня.Владелец.ЕдиницаИзмерения);
		Иначе
			НайденнаяНоменклатура.Вставить("Номенклатура",			НоменклатураВерхнегоУровня);				
			НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",
			УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(НоменклатураВерхнегоУровня));
			НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		НоменклатураВерхнегоУровня.ЕдиницаИзмерения);
		КонецЕсли;
		НайденнаяНоменклатура.Вставить("Количество",				ОстаткиПоКомплекту.Количество);
		НайденнаяНоменклатура.Вставить("Цена",						ОстаткиПоКомплекту.Цена);
		НайденнаяНоменклатура.Вставить("Сумма",						ОстаткиПоКомплекту.Сумма);
		НайденнаяНоменклатура.Вставить("Партия", 					ОстаткиПоКомплекту.Партия);				
		НайденнаяНоменклатура.Вставить("Комплект", 					ОстаткиПоКомплекту.Комплект);
		СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура);
		
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Ложь);
		НайденнаяНоменклатура.Вставить("НуженВыводДерева",Истина);
		ЗаполнитьПодчиненнуюНоменклатуру(ПериодДляЗапроса,НоменклатураВерхнегоУровня);
		Возврат НайденнаяНоменклатура;
		
	КонецЕсли;
	
	Если Не ВерхняяНоменклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
		НайденнаяНоменклатура.Вставить("Номенклатура",			ВерхняяНоменклатура);			
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",
		УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(ВерхняяНоменклатура));
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		ВерхняяНоменклатура.ЕдиницаИзмерения);
	Иначе	
		НайденнаяНоменклатура.Вставить("Номенклатура",			ВерхняяНоменклатура.Владелец);
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	ВерхняяНоменклатура);
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		ВерхняяНоменклатура.Владелец.ЕдиницаИзмерения);
	КонецЕсли;
	
	НайденнаяНоменклатура.Вставить("Количество", 	СтруктураКоличество.Количество);				
	НайденнаяНоменклатура.Вставить("Цена",	 		СтруктураКоличество.Цена);
	НайденнаяНоменклатура.Вставить("Сумма",	 		СтруктураКоличество.Сумма);
	
	СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура);
	НайденнаяНоменклатура.Вставить("НуженВыводДерева",Истина);
	
	ЗаполнитьПодчиненнуюНоменклатуру(ПериодДляЗапроса, ?(ЗначениеЗаполнено(НайденнаяНоменклатура.КарточкаНоменклатуры), НайденнаяНоменклатура.КарточкаНоменклатуры,	НайденнаяНоменклатура.Номенклатура));
	
	Возврат НайденнаяНоменклатура;	
	
КонецФункции

&НаСервере
Функция ПолучитьОстаткиПоНоменклатуре(ВерхняяНоменклатура, ПериодДляЗапроса)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", ПериодДляЗапроса);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомплектацияОстатки.Комплект,
		|	КомплектацияОстатки.Партия КАК Партия,
		|	КомплектацияОстатки.Номенклатура КАК Номенклатура,
		|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КомплектацияОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) / КомплектацияОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Цена,
		|	ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.Комплектация.Остатки(
		|			&Период,
		|			ВЫБОР
		|					КОГДА ТИПЗНАЧЕНИЯ(Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|				И Номенклатура = &Номенклатура) КАК КомплектацияОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) / ОстаткиОстатки.КоличествоОстаток
		|	КОНЕЦ,
		|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0)
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Номенклатура = &Номенклатура) КАК ОстаткиОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	РемонтыОстатки.Партия,
		|	РемонтыОстатки.Номенклатура,
		|	РемонтыОстатки.КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РемонтыОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(РемонтыОстатки.СуммаОстаток, 0) / РемонтыОстатки.КоличествоОстаток
		|	КОНЕЦ,
		|	ЕСТЬNULL(РемонтыОстатки.СуммаОстаток, 0)
		|ИЗ
		|	РегистрНакопления.Ремонты.Остатки(&Период, Номенклатура = &Номенклатура) КАК РемонтыОстатки";
		
	Запрос.УстановитьПараметр("Номенклатура", ВерхняяНоменклатура);
	Выборка			  = Запрос.Выполнить().Выбрать();	
	СтруктураВозврата = Неопределено;
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Комплект", 		Выборка.Комплект);
		СтруктураВозврата.Вставить("Партия", 		Выборка.Партия);
		СтруктураВозврата.Вставить("Номенклатура", 	Выборка.Номенклатура);
		СтруктураВозврата.Вставить("Количество", 	Выборка.Количество);
		СтруктураВозврата.Вставить("Цена", 			Выборка.Цена);
		СтруктураВозврата.Вставить("Сумма", 		Выборка.Сумма);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура)
	
	Если НайденнаяНоменклатура.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
		МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура,Партия,КарточкаНоменклатуры",НайденнаяНоменклатура.Номенклатура,НайденнаяНоменклатура.Партия,НайденнаяНоменклатура.КарточкаНоменклатуры));
	Иначе
		МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура,Партия",НайденнаяНоменклатура.Номенклатура,НайденнаяНоменклатура.Партия));
	КонецЕсли;
	
	Если МассивСтрокТЧ.Количество() = 0 Тогда
		НоваяСтрока 						= Объект.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяНоменклатура);
		НоваяСтрока.Количество 					= 1;
		НоваяСтрока.Цена	 					= НайденнаяНоменклатура.Цена;
		НоваяСтрока.Сумма	 					= НайденнаяНоменклатура.Цена;
		НоваяСтрока.ИзменятьЦену				= Ложь;		
		НоваяСтрока.РазрешатьПеретаскивание 	= ?(Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Пометка = Истина,Ложь,Истина);
		НоваяСтрока.РазрешатьУдалять			= Истина;
		НоваяСтрока.ОбслуживаемаяНоменклатура 	= Истина;
		РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НоваяСтрока);								
	Иначе		
		НайденнаяСтрока = МассивСтрокТЧ[0];
		НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;		
		НайденнаяСтрока.Сумма = НайденнаяСтрока.Цена * НайденнаяСтрока.Количество;
		РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НайденнаяСтрока);					
	КонецЕсли;		
КонецПроцедуры

// Получает номенклатуру самого верхнего уровня в комплекте.
//
&НаСервере
Функция ПолучитьВерхнююНоменклатуруПоКомплектующей(Комплектующая, Период)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиОстатки.Партия
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Номенклатура = &Номенклатура) КАК ОстаткиОстатки";
	
	Запрос.УстановитьПараметр("Номенклатура", Комплектующая);
	Запрос.УстановитьПараметр("Период"		, Период);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Партия) Тогда			
			Возврат ПолучитьВерхнююНоменклатуруПоКомплектующей(ВыборкаДетальныеЗаписи.Партия, Период);
		Иначе 
			Возврат Комплектующая;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции 

&НаСервере
Функция ЗаполнитьПодчиненнуюНоменклатуру(Период, НоменклатураВладелец)	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КомплектацияОстатки.Комплект,
	|	КомплектацияОстатки.Партия КАК Партия,
	|	КомплектацияОстатки.Номенклатура КАК Номенклатура,
	|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КомплектацияОстатки.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) / КомплектацияОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Цена,
	|	ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) КАК Сумма
	|ИЗ
	|	РегистрНакопления.Комплектация.Остатки(&Период, Комплект = &Партия) КАК КомплектацияОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ОстаткиОстатки.Партия,
	|	ОстаткиОстатки.Номенклатура,
	|	ОстаткиОстатки.КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) / ОстаткиОстатки.КоличествоОстаток
	|	КОНЕЦ,
	|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0)
	|ИЗ
	|	РегистрНакопления.Остатки.Остатки(&Период, Партия = &Партия) КАК ОстаткиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	РемонтыОстатки.Партия,
	|	РемонтыОстатки.Номенклатура,
	|	РемонтыОстатки.КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РемонтыОстатки.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РемонтыОстатки.СуммаОстаток, 0) / РемонтыОстатки.КоличествоОстаток
	|	КОНЕЦ,
	|	ЕСТЬNULL(РемонтыОстатки.СуммаОстаток, 0)
	|ИЗ
	|	РегистрНакопления.Ремонты.Остатки(&Период, Партия = &Партия) КАК РемонтыОстатки";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Партия", НоменклатураВладелец);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Комплект) Тогда Возврат Неопределено КонецЕсли;
		
		Если ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
			
			Номенклатура			= Выборка.Номенклатура.Владелец;
			КарточкаНоменклатуры	= Выборка.Номенклатура;
			
		Иначе
			
			Номенклатура			= Выборка.Номенклатура;
			КарточкаНоменклатуры	= УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Выборка.Номенклатура);
			
		КонецЕсли;
		
		ПодчиненнаяНоменклатура = Новый Структура;
		ПодчиненнаяНоменклатура.Вставить("Номенклатура",		Номенклатура);		
		ПодчиненнаяНоменклатура.Вставить("Партия", 				НоменклатураВладелец);
		ПодчиненнаяНоменклатура.Вставить("КарточкаНоменклатуры",КарточкаНоменклатуры);
		ПодчиненнаяНоменклатура.Вставить("Комплект",			?(НоменклатураВладелец = Номенклатура, Справочники.КарточкиНоменклатуры.ПустаяСсылка(), НоменклатураВладелец));
		ПодчиненнаяНоменклатура.Вставить("Цена",				Выборка.Цена);
		ПодчиненнаяНоменклатура.Вставить("Сумма",				Выборка.Сумма);
		ПодчиненнаяНоменклатура.Вставить("ЕдиницаИзмерения", 	Номенклатура.ЕдиницаИзмерения);
		
		МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура,Партия,КарточкаНоменклатуры", ПодчиненнаяНоменклатура.Номенклатура, ПодчиненнаяНоменклатура.Партия, ПодчиненнаяНоменклатура.КарточкаНоменклатуры));
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока								= Объект.Номенклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ПодчиненнаяНоменклатура);
			НоваяСтрока.Количество					= 1;
			НоваяСтрока.Цена						= ПодчиненнаяНоменклатура.Цена;
			НоваяСтрока.Сумма						= ПодчиненнаяНоменклатура.Цена;
			НоваяСтрока.ИзменятьЦену				= Ложь;		
			НоваяСтрока.РазрешатьПеретаскивание 	= ?(Элементы.ДеревоНоменклатурыВариантПоискаПоШтрихкоду.Пометка = Истина,Ложь,Истина);
			НоваяСтрока.РазрешатьУдалять			= Истина;
			НоваяСтрока.ОбслуживаемаяНоменклатура	= Истина;
			РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НоваяСтрока);		
		Иначе
			НайденнаяСтрока							= МассивСтрокТЧ[0];
			НайденнаяСтрока.Количество				= НайденнаяСтрока.Количество + 1;
			НайденнаяСтрока.Сумма					= НайденнаяСтрока.Цена * НайденнаяСтрока.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НайденнаяСтрока);		
		КонецЕсли;
		ЗаполнитьПодчиненнуюНоменклатуру(Период, ПодчиненнаяНоменклатура.КарточкаНоменклатуры);		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыводДереваНоменклатуры(МассивНоменклатуры)
	
	Для Каждого СтруктураВозврата Из МассивНоменклатуры Цикл
		СтруктураНоменклатуры = СтруктураВозврата;
		Если СтруктураНоменклатуры.Свойство("НуженВыводДерева") И СтруктураНоменклатуры.Свойство("СвернутыйКомплект") Тогда
			Если СтруктураНоменклатуры.НуженВыводДерева И СтруктураНоменклатуры.СвернутыйКомплект Тогда 					
				ВывестиДеревоНоменклатуры();		
				ИдентификаторСтроки = 0;					
				Если ЗначениеЗаполнено(СтруктураНоменклатуры.КарточкаНоменклатуры) Тогда
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
					ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.КарточкаНоменклатуры,Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Номенклатура ""%1"" является частью комплекта ""%2"". Комплект был добавлен в документ.'"), СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура));
				Иначе
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
					ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.Номенклатура,Ложь);
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Номенклатура ""%1"" является частью комплекта ""%2"". Комплект был добавлен в документ.'"), СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура));
				КонецЕсли;
			ИначеЕсли СтруктураНоменклатуры.НуженВыводДерева И (Не СтруктураНоменклатуры.СвернутыйКомплект) Тогда					
				ВывестиДеревоНоменклатуры();		
				ИдентификаторСтроки = 0;
				Если ЗначениеЗаполнено(СтруктураНоменклатуры.КарточкаНоменклатуры) Тогда
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
					ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.КарточкаНоменклатуры,Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Номенклатура ""%1"" является частью комплекта ""%2"". Комплект и все его комплектующие были добавлены в документ.'"), СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура));
				Иначе
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
					ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.Номенклатура,Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Номенклатура ""%1"" является частью комплекта ""%2"". Комплект и все его комплектующие были добавлены в документ.'"), СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура));
				КонецЕсли;
			КонецЕсли;	
			
		ИначеЕсли СтруктураНоменклатуры.Свойство("НуженВыводДерева") И СтруктураНоменклатуры.НуженВыводДерева Тогда 
				ВывестиДеревоНоменклатуры();		
				ИдентификаторСтроки = 0;					
				Если ЗначениеЗаполнено(СтруктураНоменклатуры.КарточкаНоменклатуры) Тогда
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
					ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.КарточкаНоменклатуры,Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;									
				Иначе
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
					ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.Номенклатура,Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;
				КонецЕсли;
		ИначеЕсли СтруктураНоменклатуры.Свойство("СообщениеПользователю") Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтруктураНоменклатуры.СообщениеПользователю);				
		КонецЕсли;
					 	
	КонецЦикла;	
	
КонецПроцедуры 

&НаСервере
Функция СтруктураСтрокиДерева()
	
	Возврат ОбработкаТабличныхЧастей.СтруктураИзДереваЗначений(ЭтаФорма,"ДеревоНоменклатуры");
	
КонецФункции

&НаСервере
Функция СтруктураСтрокиТабличнойЧасти()
	
	Возврат ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма,"Номенклатура");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТабличнуюЧастьНоменклатура()
	
	СтрокаТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТекущиеДанные = Неопределено Тогда		
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПредыдущиеРеквизитыСтроки Цикл
		Если КлючИЗначение.Значение <> СтрокаТекущиеДанные[КлючИЗначение.Ключ] Тогда			
			СтруктураТекущиеДанные	= СтруктураСтрокиТабличнойЧасти();
			ЗаполнитьЗначенияСвойств(СтруктураТекущиеДанные,СтрокаТекущиеДанные);
			ОбновитьСтрокуТабличнойЧасти(ПредыдущиеРеквизитыСтроки, СтруктураТекущиеДанные);
			Модифицированность 		= Истина;
			
			Возврат;
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуТабличнойЧасти(ПредыдущиеРеквизитыСтроки, СтруктураТекущиеДанные)
		
	Отбор 		= ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма,"Номенклатура");
	
	ЗаполнитьЗначенияСвойств(Отбор,ПредыдущиеРеквизитыСтроки);
	
	МассивСтрок = Объект.Номенклатура.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() <> 1 Тогда //обновляем полностью
		СохранитьДеревоНоменклатуры();
	Иначе
		ЗаполнитьЗначенияСвойств(МассивСтрок[0],СтруктураТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнвентарныйИСерийныйНомерНаСервере(КарточкаНоменклатуры)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИнвентарныйНомер"	,КарточкаНоменклатуры.ИнвентарныйНомер);
	СтруктураВозврата.Вставить("СерийныйНомер"		,КарточкаНоменклатуры.СерийныйНомер);
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатуры(Результат, ДополнительныеПараметры)Экспорт 
	
	Если Результат = "КнопкаСоздатьНовую" Тогда
		
		ПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(ДополнительныеПараметры);
		
	ИначеЕсли Результат = "КнопкаВыбратьИзСписка" Тогда
		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВыбораИзСпискаКарточкиНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы 		= Новый Структура;
		Если Объект.Ссылка.Пустая() Тогда
			ПараметрыФормы.Вставить("ОтборТолькоНеИспользованные", Истина);
			ПараметрыФормы.Вставить("ВидимостьОтборПоступление", Ложь);
		Иначе
			ПараметрыФормы.Вставить("ОтборПоступление", Объект.Ссылка);
		КонецЕсли;	
		
		СтрокаНоменклатура	 = ДополнительныеПараметры.Приемник;
		мНоменклатура		 = СтрокаНоменклатура.Номенклатура;
		мКарточкаНоменклатуры= СтрокаНоменклатура.КарточкаНоменклатуры; 
		ПараметрыФормы.Вставить("ОтборНоменклатура", мНоменклатура);
		ПараметрыФормы.Вставить("ВыбранноеЗначение", мКарточкаНоменклатуры);
		
		ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаВыбора", ПараметрыФормы,,,,,ОписаниеОповещения);
				
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзСпискаКарточкиНоменклатуры(Результат, ДополнительныеПараметры)Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНоменклатура 						= ДополнительныеПараметры.Приемник;
	СтрокаНоменклатура.КарточкаНоменклатуры = Результат;
	СохранитьДеревоНоменклатуры();
	
	НоваяСтрока 							= ДобавитьСтрокуДерева(ДополнительныеПараметры.РеквизитДерево, ДополнительныеПараметры.Приемник);
	НоваяСтрока.РазрешатьУдалять			= Истина;
	НоваяСтрока.РазрешатьПеретаскивание 	= Истина;
	НоваяСтрока.ИзменятьЦену				= Истина;
	НоваяСтрока.ОбслуживаемаяНоменклатура	= Ложь;
	НоваяСтрока.Событие						= ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.Добавление");
	НоваяСтрока.ИконкаСобытия				= 1;
	Элемент									= Элементы.ДеревоНоменклатуры;
	ТекущийЭлемент 							= Элемент;
	Элемент.ТекущаяСтрока 					= НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент 							= Элементы.ДеревоНоменклатурыНоменклатура;
	Элемент.ИзменитьСтроку();
	
	// Разворачиваем дерево	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(СтруктураПараметров)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВопросаСоздатьКарточкуНоменклатурыЗавершение", ЭтотОбъект, СтруктураПараметров);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Документ не записан. Для продолжения необходимо его записать. Продолжить?'"), Режим);
		Возврат;		
	КонецЕсли;		
	
	ПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатурыЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ПараметрыСтруктура)
	
	КарточкаНоменклатуры= Неопределено;
	ЗаписатьНаСервере();
	СтрокаНоменклатура 	= ПараметрыСтруктура.Приемник;
	мНоменклатура		= СтрокаНоменклатура.Номенклатура;
	мСерийныйНомер		= СтрокаНоменклатура.СерийныйНомер;
	мИнвентарныйНомер	= СтрокаНоменклатура.ИнвентарныйНомер;
	КарточкаНоменклатуры= КарточкаНоменклатурыНаСервере(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер);		
	
	Если ЗначениеЗаполнено(КарточкаНоменклатуры) Тогда
		СтрокаНоменклатура.КарточкаНоменклатуры = КарточкаНоменклатуры;
		СохранитьДеревоНоменклатуры();
	Иначе
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Для номенклатуры ""%1"" не удалось создать карточку номенклатуры.'"), СтрокаНоменклатура.Номенклатура));
		Возврат;
	КонецЕсли;
	
	ЗаписатьНаСервере();	
	
	НоваяСтрока 			= ДобавитьСтрокуДерева(ПараметрыСтруктура.РеквизитДерево, ПараметрыСтруктура.Приемник);	
	НоваяСтрока.РазрешатьУдалять			= Истина;
	НоваяСтрока.РазрешатьПеретаскивание 	= Истина;
	НоваяСтрока.ИзменятьЦену				= Истина;
	НоваяСтрока.ОбслуживаемаяНоменклатура	= Ложь;
	НоваяСтрока.Событие						= ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.Добавление");
	НоваяСтрока.ИконкаСобытия				= 1;	
	Элемент									= Элементы.ДеревоНоменклатуры;
	ТекущийЭлемент 							= Элемент;
	Элемент.ТекущаяСтрока 					= НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент 							= Элементы.ДеревоНоменклатурыНоменклатура;
	Элемент.ИзменитьСтроку();
	
	// Разворачиваем дерево.	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ОбъектДок = РеквизитФормыВЗначение("Объект");
	Если ОбъектДок.Проведен Тогда
		ОбъектДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе 
		ОбъектДок.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ОбъектДок, Объект);
	
КонецПроцедуры

&НаСервере
Функция КарточкаНоменклатурыНаСервере(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер)
	
	Возврат УправлениеITОтделом8УФ.СоздатьКарточкуНоменклатуры(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер);
	
КонецФункции

&НаКлиенте
Процедура ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатуры(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат = "КнопкаСоздатьНовую" Тогда
		
		ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(ДополнительныеПараметры);
		
	ИначеЕсли Результат = "КнопкаВыбратьИзСписка" Тогда
		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеретаскиваниеПослеВыбораИзСпискаКарточкиНоменклатуры", 
			ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы 		= Новый Структура;
		Если Объект.Ссылка.Пустая() Тогда
			ПараметрыФормы.Вставить("ОтборТолькоНеИспользованные", Истина);
			ПараметрыФормы.Вставить("ВидимостьОтборПоступление", Ложь);
		Иначе
			ПараметрыФормы.Вставить("ОтборПоступление", Объект.Ссылка);
		КонецЕсли;	
		
		СтрокаНоменклатура	 = ДополнительныеПараметры.Приемник;
		мНоменклатура		 = СтрокаНоменклатура.Номенклатура;
		мКарточкаНоменклатуры=СтрокаНоменклатура.КарточкаНоменклатуры; 
		ПараметрыФормы.Вставить("ОтборНоменклатура", мНоменклатура);
		ПараметрыФормы.Вставить("ВыбранноеЗначение", мКарточкаНоменклатуры);
		
		ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаВыбора", ПараметрыФормы,,,,,ОписаниеОповещения);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеПослеВыбораИзСпискаКарточкиНоменклатуры(Результат, ДополнительныеПараметры)Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНоменклатура = ДополнительныеПараметры.Приемник;
	СтрокаНоменклатура.КарточкаНоменклатуры = Результат; 
	ДеревоНоменклатурыПеретаскиваниеФрагмент(ДополнительныеПараметры.РеквизитДерево, СтрокаНоменклатура, ДополнительныеПараметры.Источник, ДополнительныеПараметры.ИДПриемник);
	СохранитьДеревоНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(СтруктураПараметров)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыЗавершение", ЭтотОбъект, СтруктураПараметров);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Документ не записан. Для продолжения необходимо его записать. Продолжить?'"),Режим);		
		Возврат;		
	КонецЕсли;		
	
	ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ПараметрыСтруктура)
		
	КарточкаНоменклатуры= Неопределено;
	ЗаписатьНаСервере();
	СтрокаНоменклатура 	= ПараметрыСтруктура.Приемник;
	мНоменклатура		= СтрокаНоменклатура.Номенклатура;
	мСерийныйНомер		= СтрокаНоменклатура.СерийныйНомер;
	мИнвентарныйНомер	= СтрокаНоменклатура.ИнвентарныйНомер;
	КарточкаНоменклатуры= КарточкаНоменклатурыНаСервере(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер);		
	
	Если ЗначениеЗаполнено(КарточкаНоменклатуры) Тогда
		СтрокаНоменклатура.КарточкаНоменклатуры = КарточкаНоменклатуры;
		СохранитьДеревоНоменклатуры();
	Иначе
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Для номенклатуры ""%1"" не удалось создать карточку номенклатуры.'"), СтрокаНоменклатура.Номенклатура));
		Возврат;
	КонецЕсли;	
	ЗаписатьНаСервере();
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	ДеревоНоменклатурыПеретаскиваниеФрагмент(ПараметрыСтруктура.РеквизитДерево, СтрокаНоменклатура, ПараметрыСтруктура.Источник, ПараметрыСтруктура.ИДПриемник);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПеретаскиваниеФрагмент(РеквизитДерево, Приемник, Источник, ИДПриемник)
	
	НоваяСтрока	= СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник);

	Если Приемник = Неопределено Тогда
		НоваяСтрока.Комплект= ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
		НоваяСтрока.Партия 	= НоваяСтрока.Комплект;
	Иначе		
		НоваяСтрока.Комплект= ?(ЗначениеЗаполнено(Приемник.Комплект), Приемник.Комплект, Приемник.КарточкаНоменклатуры);
		НоваяСтрока.Партия 	= Приемник.КарточкаНоменклатуры;
	КонецЕсли;
	
    // Производится копирование в корень.
    // Для "красоты" развернем вновь созданную ветвь.
	Элемент = Элементы.ДеревоНоменклатуры;
	
    Если Приемник = Неопределено И НоваяСтрока<>Неопределено Тогда
        Элемент.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
    КонецЕсли;

    // Для "красоты" развернем ветвь-родителя.
    Если НЕ Приемник = Неопределено Тогда
        Элемент.Развернуть(ИДПриемник, Истина);
	КонецЕсли;
	
	ОбновитьНумерациюВДеревеЗначенийНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораСобытия()
	
	ТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокВыбора = Элементы.ДеревоНоменклатурыСобытие.СписокВыбора;	
	СписокВыбора.Очистить();
	
	Если ТекущиеДанные.ОбслуживаемаяНоменклатура Тогда 
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		РодительСписывается = Ложь;
		Пока Родитель <> Неопределено Цикл			
			Если Родитель.Событие = ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.Списание") Тогда	
				РодительСписывается = Истина;
				Прервать;
			КонецЕсли;
			Родитель = Родитель.ПолучитьРодителя();
		КонецЦикла;
		
		Если РодительСписывается Тогда			
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.Списание"));
		Иначе			
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.Списание"));		
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.НаСклад"));
		КонецЕсли;				
	Иначе
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытиеОбслуживания.Добавление"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСобытиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	мПараметрыВыбора= Новый Структура;	
	мОтбор			= Новый Структура;	
	мОтбор.Вставить("ВидОкончанияОбслуживания", Объект.ВидОкончанияОбслуживания); 
	мПараметрыВыбора.Вставить("Отбор", мОтбор);
	
	Событие = ЗаполнитьСобытие(мПараметрыВыбора);
	Элемент.СписокВыбора.ЗагрузитьЗначения(Событие.ВыгрузитьЗначения());
		
	#Если ВебКлиент Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("СобытиеНачалоВыбораОписаниеОповещения", ЭтотОбъект);
		Элементы.ДеревоНоменклатурыСобытие.СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения);		
	#КонецЕсли

КонецПроцедуры

&НаСервере
Функция ЗаполнитьСобытие(ПараметрыВыбора)
	
	Событие = Перечисления.СобытиеОбслуживания.ПолучитьДанныеВыбора(ПараметрыВыбора);
	Возврат Событие;
	
КонецФункции

&НаКлиенте
Процедура СобытиеНачалоВыбораОписаниеОповещения(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока 		  = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	ТекущаяСтрока.Событие = Результат.Значение;
	ДеревоНоменклатурыСобытиеПриИзменении(Неопределено);
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;	
	Если СтрокаТабличнойЧасти = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	Если НЕ ПеретаскиваниеФлаг И НЕ СтрокаТабличнойЧасти.ИзменятьЦену Тогда 				
		СтандартнаяОбработка = Ложь;		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#Область УчетОстатковКонтрагентов

&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
			
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикНачалоВыбора(ЭтаФорма, Объект.Организация, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикАвтоПодбор(ЭтаФорма, 
				"Организация",
				Текст, 
				ДанныеВыбора,
				Ожидание,
				СтандартнаяОбработка);
				
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Очистка(Элемент, СтандартнаяОбработка)	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбора(ЭтаФорма, 
				"Организация", 
				Объект.Организация,
				Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект),
				ВыбранноеЗначение,
				СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	ОрганизацияПриИзменении(Неопределено);
	
КонецПроцедуры

#КонецОбласти

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	ДоговорПередИзменением = Договор;
	Договор                = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		СтруктураДанные               = УправлениеITОтделом8УФ.ПолучитьДанныеДоговорПриИзменении(Объект.Договор, Объект.Дата);		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов                = СтруктураДанные.ВалютаРасчетов;
		
		Если НЕ СтруктураДанные.СуммаВключаетНДС = Неопределено Тогда			
			Объект.СуммаВключаетНДС = СтруктураДанные.СуммаВключаетНДС;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
				
		Если (ЗначениеЗаполнено(Объект.Договор)
			И ЗначениеЗаполнено(ВалютаРасчетов)
			И Объект.Договор <> ДоговорПередИзменением
			И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
			И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
						
			Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом. Необходимо проверить валюту документа'"));
			ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("ДоговорПриИзмененииЗавершение", ЭтотОбъект), ВалютаРасчетовПередИзменением, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеДоговора()

&НаКлиенте
Процедура ДоговорПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт    

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
  
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураДанные = ДополнительныеПараметры.СтруктураДанные;    
    КонтрагентПриИзмененииФрагмент(СтруктураДанные);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииФрагмент(Знач СтруктураДанные)
    
    ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьУслугиПоКоличествуНаСервере()
	
	ИсхСумма					= 0;
	БазаРаспределенияКоличество = Объект.Номенклатура.Итог("Количество");
	ВсегоРасходы				= Объект.Услуги.Итог("Всего");
		
	Для Каждого СтрокаНоменклатура Из Объект.Номенклатура Цикл
				
		СтрокаНоменклатура.СуммаРасходов = ?(БазаРаспределенияКоличество <> 0, 
			Окр((ВсегоРасходы - ИсхСумма) * СтрокаНоменклатура.Количество / БазаРаспределенияКоличество, 2, 1), 0);
			
		БазаРаспределенияКоличество = БазаРаспределенияКоличество - СтрокаНоменклатура.Количество;
		ИсхСумма = ИсхСумма + СтрокаНоменклатура.СуммаРасходов;
		
	КонецЦикла;
	
	ВывестиДеревоНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьУслугиПоСуммеНаСервере()
	
	ИсхСумма				= 0;
	БазаРаспределенияСумма	= Объект.Номенклатура.Итог("Сумма");
	ВсегоРасходы			= Объект.Услуги.Итог("Всего");	
	
	Для Каждого СтрокаНоменклатура Из Объект.Номенклатура Цикл		
		
		СтрокаНоменклатура.СуммаРасходов = ?(БазаРаспределенияСумма <> 0,
			Окр((ВсегоРасходы - ИсхСумма) * СтрокаНоменклатура.Сумма / БазаРаспределенияСумма, 2, 1), 0);
			
		БазаРаспределенияСумма	= БазаРаспределенияСумма - СтрокаНоменклатура.Сумма;
		ИсхСумма				= ИсхСумма + СтрокаНоменклатура.СуммаРасходов;
		
	КонецЦикла;
	
	ВывестиДеревоНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьУслугиПоКарточкамНаСервере()
	
	ИсхСумма					= 0;	
	ВсегоРасходы				= Объект.Услуги.Итог("Всего");
	
	Для Каждого Строка Из Объект.Номенклатура Цикл
		Строка.СуммаРасходов = 0;
	КонецЦикла;	
	
	ТаблицаНоменклатура = Объект.Номенклатура.Выгрузить();
	ТаблицаНоменклатура.Колонки.Добавить("Флаг");
	
	Для Каждого Строка Из ТаблицаНоменклатура Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура)
			И УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Строка.Номенклатура) 
			И ЗначениеЗаполнено(Строка.КарточкаНоменклатуры) Тогда
			
			Строка.Флаг = 1;
		Иначе
			Строка.Флаг = 0;
		КонецЕсли;	
	КонецЦикла;	
	
	БазаРаспределенияКоличество = ТаблицаНоменклатура.Итог("Флаг");
    Если БазаРаспределенияКоличество = 0 Тогда
		ВывестиДеревоНоменклатуры();
		Возврат;
	КонецЕсли;
		
	ОтборСтруктура	= Новый Структура("Флаг", 1);
	МассивСтрок		= ТаблицаНоменклатура.НайтиСтроки(ОтборСтруктура);	
	
	Отбор = ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма, "Номенклатура");	
	Для Каждого Строка Из МассивСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		МассивСтрок1 = Объект.Номенклатура.НайтиСтроки(Отбор);
		СтрокаНоменклатура = МассивСтрок1[0]; 
		
		СтрокаНоменклатура.СуммаРасходов = ?(БазаРаспределенияКоличество <> 0, 
			Окр((ВсегоРасходы - ИсхСумма) * СтрокаНоменклатура.Количество / БазаРаспределенияКоличество, 2, 1), 0);
			
		БазаРаспределенияКоличество = БазаРаспределенияКоличество - СтрокаНоменклатура.Количество;
		ИсхСумма = ИсхСумма + СтрокаНоменклатура.СуммаРасходов;		
		
	КонецЦикла;	
	
	ВывестиДеревоНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьУслугиПоКарточкамПоСуммеНаСервере()
	
	ИсхСумма					= 0;	
	ВсегоРасходы				= Объект.Услуги.Итог("Всего");
	
	Для Каждого Строка Из Объект.Номенклатура Цикл
		Строка.СуммаРасходов = 0;
	КонецЦикла;	
	
	ТаблицаНоменклатура = Объект.Номенклатура.Выгрузить();
	ТаблицаНоменклатура.Колонки.Добавить("Флаг");
	
	Для Каждого Строка Из ТаблицаНоменклатура Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура)
			И УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Строка.Номенклатура) 
			И ЗначениеЗаполнено(Строка.КарточкаНоменклатуры) 
			и Строка.Сумма > 0 Тогда
			
			Строка.Флаг = 1;
		Иначе
			Строка.Флаг = 0;
		КонецЕсли;	
	КонецЦикла;	
	
	БазаРаспределенияКоличество = ТаблицаНоменклатура.Итог("Флаг");	
    Если БазаРаспределенияКоличество = 0 Тогда
		ВывестиДеревоНоменклатуры();
		Возврат;
	КонецЕсли;
	
	ТзИтог = ТаблицаНоменклатура.Скопировать();
	ТЗИтог.Свернуть("Флаг", "Сумма");
	БазаРаспределенияСумма = ТЗИтог.Итог("Сумма");
	
	ОтборСтруктура	= Новый Структура("Флаг", 1);
	МассивСтрок		= ТаблицаНоменклатура.НайтиСтроки(ОтборСтруктура);	
	
	Отбор = ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма, "Номенклатура");	
	Для Каждого Строка Из МассивСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		МассивСтрок1 = Объект.Номенклатура.НайтиСтроки(Отбор);
		СтрокаНоменклатура = МассивСтрок1[0]; 
		
		СтрокаНоменклатура.СуммаРасходов = ?(БазаРаспределенияСумма <> 0,
			Окр((ВсегоРасходы - ИсхСумма) * СтрокаНоменклатура.Сумма / БазаРаспределенияСумма, 2, 1), 0);
			
		БазаРаспределенияСумма	= БазаРаспределенияСумма - СтрокаНоменклатура.Сумма;
		ИсхСумма				= ИсхСумма + СтрокаНоменклатура.СуммаРасходов;		
		
	КонецЦикла;	
	
	ВывестиДеревоНоменклатуры();
	
КонецПроцедуры

#КонецОбласти