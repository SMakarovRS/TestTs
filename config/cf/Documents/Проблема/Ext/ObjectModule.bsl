
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Приоритет = ЗаданияСервер.РассчитатьПриоритет(Влияние, Срочность);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Задание") Тогда
		
		Организация			= ДанныеЗаполнения.Организация;
		Категория			= ДанныеЗаполнения.Категория;
		КраткоеОписание 	= ДанныеЗаполнения.Тема;
		Приоритет 			= ДанныеЗаполнения.Приоритет;
		Сервис  			= ДанныеЗаполнения.Сервис;
		Услуга  			= ДанныеЗаполнения.Услуга;
		
		НоваяСтрока 		=  Задания.Добавить();
		НоваяСтрока.Задание = ДанныеЗаполнения;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	СЛС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	СЛС.ОтразитьДвиженияВРазделахУчета(Ссылка, ДополнительныеСвойства, Движения, Отказ);	
	
	// Запись наборов записей.
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
	ЗаданияСервер.УстановитьСвязиОбъектовСтатьиБазыЗнанийПриПроведенииДокумента(ЭтотОбъект.Ссылка);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ЗаданияСервер.УстановитьСвязиОбъектовСтатьиБазыЗнанийПриПроведенииДокумента(ЭтотОбъект.Ссылка, 
		"УдалениеПроведенияДокумента");
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Ошибки = Неопределено;
	
	// Есть ли дубли статья - решение.
	ТЗДубли = Решения.Выгрузить( , "СтатьяБазыЗнаний,Решение");
	ТЗДубли.Колонки.Добавить("Количество");
	ТЗДубли.ЗаполнитьЗначения(1, "Количество");
	ТЗДубли.Свернуть("СтатьяБазыЗнаний, Решение", "Количество");
	Для Каждого Строки Из ТЗДубли Цикл
		Если Строки.Количество > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
				"Объект.Решения", 
				СтрШаблон(НСтр("ru = 'Для пары ""%1"" и ""%2"" есть дублирующие строки.'"), Строки.СтатьяБазыЗнаний, 
					Строки.Решение), 
				"");			
		КонецЕсли;
	КонецЦикла;
	
	// Есть ли дубли заданий.
	ТЗДубли = Задания.Выгрузить( , "Задание");
	ТЗДубли.Колонки.Добавить("Количество");
	ТЗДубли.ЗаполнитьЗначения(1, "Количество");
	ТЗДубли.Свернуть("Задание", "Количество");
	Для Каждого Строки Из ТЗДубли Цикл
		Если Строки.Количество > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
				"Объект.Задания", 
				СтрШаблон(НСтр("ru = 'Для задания ""%1"" есть дублирующие строки.'"), Строки.Задание), 
				"");			
		КонецЕсли;
	КонецЦикла;
	
	// Не позволить решить проблему, если есть невыполненные задания.
	Если Статус = Перечисления.СтатусыПроблемы.Решена Тогда		
		Если Задания.Количество() > 0 Тогда			
			Для Каждого СтрокаТЧ Из Задания Цикл
				Если НЕ СтрокаТЧ.Задание.Выполнено Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
						"Объект.Задания[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧДЦ=; ЧС=; ЧРД=; ЧРГ=; ЧН=0; ЧГ=") 
							+ "].Задание", 
						НСтр("ru = 'Задание еще не выполнено. Решить проблему можно только после выполнения всех 
							|указанных заданий.'"), 
						"Задания", 
						СтрокаТЧ.НомерСтроки, 
						НСтр("ru = 'Задание еще не выполнено. Решить проблему можно только после выполнения всех 
						|	указанных заданий.'"), 
						СтрокаТЧ.НомерСтроки);					
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	ИначеЕсли Статус = Перечисления.СтатусыПроблемы.ОшибкаИзвестна Тогда
		Если Решения.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
				"Объект.Решения", 
				НСтр("ru = 'Для установки статуса ""Ошибка известна"" необходимо заполнить хотя бы одно решение.'"), 
				"Решения");
		КонецЕсли;		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Статус          = Перечисления.СтатусыПроблемы.Зарегистрирована;
	Исполнитель		= Пользователи.ТекущийПользователь();
	КраткоеОписание = "";
	Описание 		= "";
	Задания.Очистить();
	Решения.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецЕсли	