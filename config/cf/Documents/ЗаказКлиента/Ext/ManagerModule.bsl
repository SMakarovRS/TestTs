#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: 
//			"pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	РеквизитПоложениеДатыПоступления  = Реквизиты.Найти("ЗаказКлиента.ПоложениеДатыПоступления");
	Реквизиты.Удалить(РеквизитПоложениеДатыПоступления);
	ПоложениеСтатьиДоходовРасходов	  = Реквизиты.Найти("ЗаказКлиента.ПоложениеСтатьиДоходовРасходов");
	Реквизиты.Удалить(ПоложениеСтатьиДоходовРасходов);	
	
	// Определение реквизита краткое содержимое табличной части Номенклатура.
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "СодержимоеТабличнойЧастиНоменклатураТекст";
	НовыйРеквизит.Представление = НСтр("ru = 'Содержимое табличной части ""Номенклатура"" (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип = Новый ОписаниеТипов("Строка");
	
	Если ДополнительныеПараметры.ТипШаблона = "Письмо"
		И ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "СодержимоеТабличнойЧастиНоменклатураHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Содержимое табличной части ""Номенклатура"" (в формате HTML)'");
		НовыйРеквизит.Представление = НСтр("ru = 'Содержимое табличной части ""Номенклатура"" (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
	КонецЕсли;	
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Сообщение.Вставить("Предмет", ПредметСообщения);	
	
	// Внешняя ссылка. 
	Если Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект") <> Неопределено Тогда
		ЗначениеВнешнейСсылки = Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект");
		ТекстЗаголовка = ?(ПустаяСтрока(ПредметСообщения.Тема), Строка(ПредметСообщения.Номер) + " от "
			+ Строка(Формат(ПредметСообщения.Дата, "ДФ=dd.MM.yy")), ПредметСообщения.Тема);
			
		Сообщение.ЗначенияРеквизитов["ВнешняяСсылкаНаОбъект"] = "<a href="
			+ Строка(ЗначениеВнешнейСсылки) + ">" + ТекстЗаголовка + "</a></p>";
			
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Контрагент", 
		Перечисления.ТипыКонтактнойИнформации.Телефон);
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Инициатор", 
		Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Контрагент");
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Инициатор");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти	
	
#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.ВариантыОтчетов
// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоЗаказамКлиентов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();		
		КомандаОтчет.Менеджер      = Метаданные.Отчеты.ВедомостьПоЗаказамКлиентов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Ведомость по заказам клиентов'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность      = "Обычное";
		КомандаОтчет.КлючВарианта  = "Основной";		
		
	КонецЕсли;
			
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Функция возвращает список имен «ключевых» реквизитов.
//
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать,
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив реквизитов, редактируемых при групповой обработке.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;		
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Взаимодействия.

// Возвращает партнера и контактных лиц сделки.
// 
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПоКонтактам(ЭтоФрагментЗапроса = Ложь) Экспорт
		
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказКлиента.Контрагент КАК Контакт
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &Предмет
		|	И НЕ ЗаказКлиента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	
	Если ЭтоФрагментЗапроса Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Добавляет сведения для отправки по электронной почте.
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиента.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Контрагент";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса 	= Запрос.Выполнить().Выгрузить();
	СведенияОПоставщике = Неопределено;
	Если РезультатЗапроса.Количество() = 1 Тогда
		СведенияОПоставщике = РезультатЗапроса[0];
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&МассивОбъектов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	
	Если КоллекцияПечатныхФорм.Количество() = 1 Тогда
		ПараметрыОтправки.Тема = КоллекцияПечатныхФорм[0].СинонимМакета;
		ПараметрыОтправки.Текст = НСтр("ru = 'Добрый день.'") + Символы.ПС + Символы.ПС + НСтр("ru = 'Файл во вложении.'");
	Иначе 
		ПараметрыОтправки.Тема = НСтр("ru = 'Документы'");
		ПараметрыОтправки.Текст = НСтр("ru = 'Добрый день.'") + Символы.ПС + Символы.ПС + НСтр("ru = 'Файлы во вложении.'");
	КонецЕсли;
	
	ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + Символы.ПС;
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Пока ВыборкаОбъектов.Следующий() Цикл
			ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + Символы.ПС + СформироватьЗаголовокДокумента(ВыборкаОбъектов, 
				НазваниеДокумента(ПечатнаяФорма.ИмяМакета));
		КонецЦикла;
	КонецЦикла;
	
	// Получатель заполняется только в случае, если он один для всех документов.
	Если СведенияОПоставщике <> Неопределено Тогда
		ОбъектыКонтактнойИнформации = Новый Массив;		
		ОбъектыКонтактнойИнформации.Добавить(СведенияОПоставщике.Контрагент);
		
		ТипыКонтактнойИнформации = 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		АдресаПартнера 			 = 
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ОбъектыКонтактнойИнформации, ТипыКонтактнойИнформации);
		
		Получатели = Новый Массив;
		Для Каждого Адрес Из АдресаПартнера Цикл
			ПредставлениеАдреса = Адрес.Представление;
			Если Не ПустаяСтрока(ПредставлениеАдреса) Тогда
				ПредставлениеПолучателя  = Строка(Адрес.Объект);
				Пояснение 				 = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контактное лицо %1'"), Адрес.Объект);				
				ОписаниеПолучателя 		 = СоздатьОписаниеПолучателя();
				ОписаниеПолучателя.Адрес 						= ПредставлениеАдреса;
				ОписаниеПолучателя.Представление 				= ПредставлениеПолучателя;
				ОписаниеПолучателя.ИсточникКонтактнойИнформации = Адрес.Объект;
				ОписаниеПолучателя.ВидПочтовогоАдреса 			= Строка(Адрес.Вид);
				ОписаниеПолучателя.Пояснение 					= Пояснение;				
				Получатели.Добавить(ОписаниеПолучателя);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Получатели.Количество() = 0 Тогда
			ОписаниеПолучателя 								= СоздатьОписаниеПолучателя();
			ОписаниеПолучателя.ИсточникКонтактнойИнформации = СведенияОПоставщике.Контрагент;
			Получатели.Добавить(ОписаниеПолучателя);
		КонецЕсли;
		
		ПараметрыОтправки.Получатель = Получатели;
	КонецЕсли;
		
КонецПроцедуры

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

Функция СоздатьОписаниеПолучателя()
	ОписаниеПолучателя = Новый Структура;
	ОписаниеПолучателя.Вставить("Адрес", "");
	ОписаниеПолучателя.Вставить("Представление", "");
	ОписаниеПолучателя.Вставить("ИсточникКонтактнойИнформации");
	ОписаниеПолучателя.Вставить("ВидПочтовогоАдреса", "");
	ОписаниеПолучателя.Вставить("Пояснение", "");
	
	Возврат ОписаниеПолучателя;
КонецФункции

Функция НазваниеДокумента(Идентификатор)
	
	Результат = "";
	Если Идентификатор = "ЗаказКлиента" Тогда
		Результат = НСтр("ru = 'Заказ клиента'")
	ИначеЕсли Идентификатор = "СчетНаОплату" Тогда
		Результат = НСтр("ru = 'Счет на оплату'")
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

////////////////////////////////////////////////////////////////////////////////

// Функция печати документа
//
Функция ПечатьЗаказКлиента(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказКлиента";
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		
		Если ИмяМакета = "ЗаказКлиента" Тогда
						
			Запрос.Текст=
				"ВЫБРАТЬ
				|	ЗаказКлиента.Номер КАК Номер,
				|	ЗаказКлиента.Дата КАК ДатаДокумента,
				|	ЗаказКлиента.Комментарий КАК Комментарий,
				|	ЗаказКлиента.Организация КАК Организация,
				|	ЗаказКлиента.Контрагент КАК Контрагент,
				|	ЗаказКлиента.Договор КАК Договор,
				|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
				|	ЗаказКлиента.СостояниеЗаказа КАК СостояниеЗаказа,
				|	ЗаказКлиента.Закрыт КАК Закрыт,
				|	ЗаказКлиента.Бюджет КАК Бюджет,
				|	ЗаказКлиента.ПериодБюджета КАК ПериодБюджета,
				|	ЗаказКлиента.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
				|	ЗаказКлиента.МестоХранения КАК МестоХранения,
				|	ЗаказКлиента.Ссылка КАК Ссылка,
				|	ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
				|	ЗаказКлиента.СуммаВключаетНДС КАК СуммаВключаетНДС,
				|	ЗаказКлиента.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
				|	ЗаказКлиента.Курс КАК Курс,
				|	ЗаказКлиента.Кратность КАК Кратность,
				|	ЗаказКлиента.ВалютаДокумента КАК ВалютаДокумента,
				|	ЗаказКлиента.Автор КАК Автор,
				|	ЗаказКлиента.Номенклатура.(
				|		Ссылка КАК Ссылка,
				|		НомерСтроки КАК НомерСтроки,
				|		Номенклатура КАК Номенклатура,
				|		Количество КАК Количество,
				|		Цена КАК Цена,
				|		Сумма КАК Сумма,
				|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|		СтавкаНДС КАК СтавкаНДС,
				|		СуммаНДС КАК СуммаНДС,
				|		ДатаПоступления КАК ДатаПоступления,
				|		Всего КАК Всего,
				|		СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
				|		Описание КАК Описание,
				|		Номенклатура.Артикул КАК НоменклатураАртикул
				|	) КАК Номенклатура
				|ИЗ
				|	Документ.ЗаказКлиента КАК ЗаказКлиента
				|ГДЕ
				|	ЗаказКлиента.Ссылка = &ТекущийДокумент
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки";
			
			Шапка = Запрос.Выполнить().Выбрать();
			Шапка.Следующий();
			
			ВыборкаСтрок = Шапка.Номенклатура.Выбрать();
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказКлиента.ПФ_MXL_МакетЗаказКлиента");
			
			СтруктураЗаполнения.Очистить();

			СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
			СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
			СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказКлиента_ЗаказКлиента";
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");			
			СтруктураЗаполнения.Вставить("ТекстЗаголовка", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказ Клиента № %1 от %2'"),
				НомерДокумента,
				Формат(Шапка.ДатаДокумента, "ДЛФ=DD")));
				
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
						
			ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
			СтруктураЗаполнения.Вставить("ПредставлениеПоставщика", 
				УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, 
					"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
			ПредставлениеПоставщика                         = УправлениеITОтделом8УФ.
				ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
			СтруктураЗаполнения.Вставить("ПредставлениеПолучателя", ПредставлениеПоставщика);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ВыборкаСтрокНоменклатуры                        = Шапка.Номенклатура.Выбрать();
		    ОбластьМакета                                   = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			ОбластьМакета                                   = Макет.ПолучитьОбласть("Строка");		
			
			Сумма      = 0;
			СуммаНДС   = 0;
			Количество = 0;
			
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Запас", ВыборкаСтрокНоменклатуры.Номенклатура));
				ТабличныйДокумент.Вывести(ОбластьМакета);
				Сумма                         = Сумма + ВыборкаСтрокНоменклатуры.Сумма;
				СуммаНДС                      = СуммаНДС + ВыборкаСтрокНоменклатуры.СуммаНДС;				
				Количество                    = Количество + 1;
			КонецЦикла;
			
			ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
			СтруктураЗаполнения.Вставить("Всего", УправлениеITОтделом8УФ.ФорматСумм(Сумма));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			Если СуммаНДС = 0 Тогда
				СтруктураЗаполнения.Вставить("НДС", НСтр("ru ='Без налога (НДС)'"));
				СтруктураЗаполнения.Вставить("ВсегоНДС", "-");
			Иначе
				СтруктураЗаполнения.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru ='В том числе НДС:'"), 
					НСтр("ru ='Сумма НДС:'")));
				СтруктураЗаполнения.Вставить("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДС));
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи                          = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);						
			СтруктураЗаполнения.Вставить("ИтоговаяСтрока", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Всего наименований %1, на сумму %2'"),
				Строка(Количество),
				УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)));			
			СтруктураЗаполнения.Вставить("СуммаПрописью", 
				РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                                      = Макет.ПолучитьОбласть("Подписи");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ОтветственныйПредставление", Шапка.Автор));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЕсли;
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр= Истина;
	ТабличныйДокумент.АвтоМасштаб 	= Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции

// Функция печати документа
//
Функция ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Перем Ошибки;
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК Ссылка,
		|	ЗаказКлиента.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ЗаказКлиента.ВалютаДокумента КАК ВалютаДокумента,
		|	ЗаказКлиента.Дата КАК ДатаДокумента,
		|	ЗаказКлиента.Номер КАК Номер,
		|	ЗаказКлиента.Контрагент КАК Контрагент,
		|	ЗаказКлиента.Организация КАК Организация,
		|	ЗаказКлиента.Организация.Префикс КАК ОрганизацияПрефикс,
		|	ЗаказКлиента.БанковскийСчет КАК БанковскийСчет,
		|	ЗаказКлиента.Номенклатура.(
		|		Номенклатура.Наименование КАК Запас,
		|		Номенклатура.Артикул КАК НоменклатураАртикул,
		|		Номенклатура.ЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		Всего КАК Всего,
		|		Количество КАК Количество,
		|		"""" КАК Характеристика,
		|		Описание КАК Содержание,
		|		0 КАК ПроцентСкидкиНаценки,
		|		0 КАК ЕстьСкидка,
		|		НомерСтроки КАК НомерСтроки
		|	) КАК Номенклатура
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокЗапасы = Шапка.Номенклатура.Выбрать();
		
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказКлиента_" + ИмяМакета;
        
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказКлиента.ПФ_MXL_СчетНаОплату"); 
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,
			Шапка.БанковскийСчет);
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		// Если используется пользовательский макет - этих секций не было.
		Если Макет.Области.Найти("ЗаглавиеСЛоготипом") <> Неопределено
			И Макет.Области.Найти("ЗаглавиеБезЛоготипа") <> Неопределено Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеБезЛоготипа");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		Иначе
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати может работать некорректно.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			СтруктураЗаполнения.Вставить("БанкПолучателяПредставление", 
				СведенияОбОрганизации.Банк.Наименование + " " + СведенияОбОрганизации.Банк.Город);
		КонецЕсли; 
		СтруктураЗаполнения.Вставить("ИНН", 						СведенияОбОрганизации.ИНН);
		СтруктураЗаполнения.Вставить("КПП",							СведенияОбОрганизации.КПП);
		СтруктураЗаполнения.Вставить("ПредставлениеПоставщика",		СведенияОбОрганизации.ПолноеНаименование);
		СтруктураЗаполнения.Вставить("БИКБанкаПолучателя",			СведенияОбОрганизации.БИК);
		СтруктураЗаполнения.Вставить("СчетБанкаПолучателяПредставление", СведенияОбОрганизации.КоррСчет);
		СтруктураЗаполнения.Вставить("СчетПолучателяПредставление", СведенияОбОрганизации.НомерСчета);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерДокумента = Шапка.Номер;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");		
		СтруктураЗаполнения.Вставить("ТекстЗаголовка", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Счет на оплату № %1 от %2'"),
			НомерДокумента,
			Формат(Шапка.ДатаДокумента, "ДЛФ=DD")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
						
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		СтруктураЗаполнения.Вставить("ПредставлениеПоставщика", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, 
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		СтруктураЗаполнения.Вставить("ПредставлениеПолучателя",
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, 
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
		
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;

		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			СтруктураЗаполнения.Вставить("НомерСтроки", Количество);
			
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
				СтруктураЗаполнения.Вставить("Запас", ВыборкаСтрокЗапасы.Содержание);
			Иначе
				СтруктураЗаполнения.Вставить("Запас", ВыборкаСтрокЗапасы.Запас);
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма	= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
			Всего	= Всего		+ ВыборкаСтрокЗапасы.Всего;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		СтруктураЗаполнения.Вставить("Всего", УправлениеITОтделом8УФ.ФорматСумм(Сумма));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			СтруктураЗаполнения.Вставить("НДС", НСтр("ru ='Без налога (НДС)'"));
			СтруктураЗаполнения.Вставить("ВсегоНДС", "-");
		Иначе
			СтруктураЗаполнения.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru ='В том числе НДС:'"), 
				НСтр("ru ='Сумма НДС:'")));
			СтруктураЗаполнения.Вставить("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДС));
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("ИтогоКОплате") = Неопределено Тогда
			
			ТекстСообщения = 
				НСтр("ru ='ВНИМАНИЕ! Не обнаружена область макета ""Итог к оплате"". Возможно используется пользовательский макет.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоКОплате");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоКОплате", УправлениеITОтделом8УФ.ФорматСумм(Всего)));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		СтруктураЗаполнения.Вставить("ИтоговаяСтрока", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Всего наименований %1, на сумму %2'"),
			Строка(Количество),
			УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)));
		
		СтруктураЗаполнения.Вставить("СуммаПрописью", 
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		
		СтруктураРуководители = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, Шапка.ДатаДокумента);
		СтруктураЗаполнения.Вставить("ФИОРуководителя", СтруктураРуководители.ФИОРуководителя);
		СтруктураЗаполнения.Вставить("ФИОБухгалтера",	СтруктураРуководители.ФИОГлавногоБухгалтера);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьСчетНаОплату()

// Функция печати документа
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Если ИмяМакета = "ЗаказКлиента" Тогда
		
		Возврат ПечатьЗаказКлиента(МассивОбъектов, ОбъектыПечати, ИмяМакета); 
		
	ИначеЕсли ИмяМакета = "СчетНаОплату" Тогда
		
		Возврат ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ИмяМакета);
				
	КонецЕсли;
		
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказКлиента") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
			"ЗаказКлиента", НСтр("ru = 'Заказ клиента'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ЗаказКлиента"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплату") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
			"СчетНаОплату", НСтр("ru = 'Счет на оплату'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "СчетНаОплату"));
				
	КонецЕсли;
	
	// Параметры отправки печатных форм по электронной почте.
	ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
		
КонецПроцедуры

// Заполняет список команд печати Заказа клиента
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Заказ клиента.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказКлиента";
	КомандаПечати.Представление = НСтр("ru = 'Заказ клиента'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 1;
	
	// Счет на оплату.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 2;
	
КонецПроцедуры


#КонецОбласти
	
#КонецЕсли