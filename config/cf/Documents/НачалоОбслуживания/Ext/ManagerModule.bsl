#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс
// Функция возвращает список имен «ключевых» реквизитов.
//
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать,
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив реквизитов, редактируемых при групповой обработке.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;

	СписокКонтактов = Новый Массив;
	СписокКонтактов.Добавить(Ссылка.Контрагент);
	
	Возврат СписокКонтактов;
	
КонецФункции

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	РеквизитПоложениеПодразделения    		= Реквизиты.Найти("НачалоОбслуживания.ПоложениеПодразделения");
	Реквизиты.Удалить(РеквизитПоложениеПодразделения);
	РеквизитПоложениеСтатьиДоходовРасходов	= Реквизиты.Найти("НачалоОбслуживания.ПоложениеСтатьиДоходовРасходов");
	Реквизиты.Удалить(РеквизитПоложениеСтатьиДоходовРасходов);	
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Контрагент", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Контрагент");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;
	СоответствиеИзменениеОбъекта.Вставить("НачалоОбслуживанияИзменениеОбъектаИзменениеСостояния", НСтр("ru = 'Изменение состояния'"));
	СоответствиеИзменениеОбъекта.Вставить("НачалоОбслуживанияИзменениеОбъектаЗакрытие", 		  НСтр("ru = 'Закрытие'"));
	СоответствиеИзменениеОбъекта.Вставить("НачалоОбслуживанияИзменениеОбъектаПроведение", 		  НСтр("ru = 'Проведение'"));
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("НачалоОбслуживанияРасчетМетрикЗаписьДокумента", НСтр("ru = 'Запись документа'"));

	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура, Знач Источник) Экспорт
	
	Результат = Ложь;
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ИмяСобытия = "НачалоОбслуживанияИзменениеОбъектаИзменениеСостояния" Тогда
		
		Если Структура.ЭтоНовый Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.СостояниеОбслуживания <> ИсточникПередЗаписью.СостояниеОбслуживания Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "НачалоОбслуживанияИзменениеОбъектаЗакрытие" Тогда
		
		Если Структура.ЭтоНовый И Источник.Закрыт = Истина Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Закрыт <> ИсточникПередЗаписью.Закрыт И Источник.Закрыт = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "НачалоОбслуживанияИзменениеОбъектаПроведение" Тогда
		
		Если Структура.ЭтоНовый И Источник.Проведен = Истина Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Проведен <> ИсточникПередЗаписью.Проведен И Источник.Проведен = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.ВариантыОтчетов
// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();		
		КомандаОтчет.Менеджер      = Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Взаиморасчеты с контрагентами'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность      = "Обычное";
		КомандаОтчет.КлючВарианта  = "Основной";		
		
	КонецЕсли;
			
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
		
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция печати документа.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_НачалоОбслуживания";
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(ТекущийДокумент);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.УстановитьПараметр("Период", ТекущийДокумент.Дата);
		Запрос.УстановитьПараметр("Организация", ТекущийДокумент.Организация);
		Запрос.УстановитьПараметр("МестоХранения", ТекущийДокумент.МестоХранения);
		
		Запрос.Текст=
			"ВЫБРАТЬ
			|	ОстаткиОстатки.Номенклатура,
			|	ОстаткиОстатки.Партия,
			|	ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
			|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) = 0
			|			ТОГДА 0
			|		ИНАЧЕ ОстаткиОстатки.СуммаОстаток / ОстаткиОстатки.КоличествоОстаток
			|	КОНЕЦ КАК Себестоимость
			|ПОМЕСТИТЬ ВТ_Остатки
			|ИЗ
			|	РегистрНакопления.Остатки.Остатки(
			|			&Период,
			|			Организация = &Организация
			|				И МестоХранения = &МестоХранения) КАК ОстаткиОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НачалоОбслуживания.Ссылка,
			|	НачалоОбслуживания.ВерсияДанных,
			|	НачалоОбслуживания.ПометкаУдаления,
			|	НачалоОбслуживания.Номер,
			|	НачалоОбслуживания.Дата КАК ДатаДокумента,
			|	НачалоОбслуживания.Проведен,
			|	НачалоОбслуживания.Организация,
			|	НачалоОбслуживания.МестоХранения,
			|	НачалоОбслуживания.Комментарий,
			|	НачалоОбслуживания.Основание,
			|	НачалоОбслуживания.Автор,
			|	НачалоОбслуживания.ДатаСоздания,
			|	НачалоОбслуживания.АвторКорректировки,
			|	НачалоОбслуживания.ДатаКорректировки,
			|	НачалоОбслуживания.Контрагент,
			|	НачалоОбслуживания.Договор,
			|	НачалоОбслуживания.Бюджет,
			|	НачалоОбслуживания.ПериодБюджета,
			|	НачалоОбслуживания.ПоложениеСтатьиДоходовРасходов,
			|	НачалоОбслуживания.СтатьяДоходовРасходов,
			|	НачалоОбслуживания.ВидНачалаОбслуживания,
			|	НачалоОбслуживания.МестоОбслуживания,
			|	НачалоОбслуживания.Подразделение,
			|	НачалоОбслуживания.СуммаВключаетНДС,
			|	ВЫБОР
			|		КОГДА НачалоОбслуживания.ВидНачалаОбслуживания = ЗНАЧЕНИЕ(Перечисление.ВидыНачалаОбслуживания.ВнутреннееОбслуживание)
			|			ТОГДА ""Место обслуживания""
			|		ИНАЧЕ ""Контрагент""
			|	КОНЕЦ КАК КонтрагентИлиМестоОбслуживания,
			|	ВЫБОР
			|		КОГДА НачалоОбслуживания.ВидНачалаОбслуживания = ЗНАЧЕНИЕ(Перечисление.ВидыНачалаОбслуживания.ВнутреннееОбслуживание)
			|			ТОГДА НачалоОбслуживания.МестоОбслуживания
			|		ИНАЧЕ НачалоОбслуживания.Контрагент
			|	КОНЕЦ КАК КонтрагентМестоОбслуживания
			|ИЗ
			|	Документ.НачалоОбслуживания КАК НачалоОбслуживания
			|ГДЕ
			|	НачалоОбслуживания.Ссылка = &ТекущийДокумент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НачалоОбслуживанияНоменклатура.Ссылка,
			|	НачалоОбслуживанияНоменклатура.НомерСтроки,
			|	НачалоОбслуживанияНоменклатура.Номенклатура,
			|	НачалоОбслуживанияНоменклатура.Партия,
			|	НачалоОбслуживанияНоменклатура.КарточкаНоменклатуры,
			|	НачалоОбслуживанияНоменклатура.Количество,
			|	НачалоОбслуживанияНоменклатура.Описание,
			|	НачалоОбслуживанияНоменклатура.Подразделение,
			|	НачалоОбслуживанияНоменклатура.СтатьяДоходовРасходов,
			|	НачалоОбслуживанияНоменклатура.ЕдиницаИзмерения,
			|	НачалоОбслуживанияНоменклатура.Комплект,
			|	ВТ_Остатки.Себестоимость КАК Цена,
			|	ЕСТЬNULL(ВТ_Остатки.Себестоимость * ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(НачалоОбслуживанияНоменклатура.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
			|				ТОГДА НачалоОбслуживанияНоменклатура.Количество
			|			ИНАЧЕ НачалоОбслуживанияНоменклатура.Количество * НачалоОбслуживанияНоменклатура.ЕдиницаИзмерения.Коэффициент
			|		КОНЕЦ, 0) КАК Сумма,
			|	НачалоОбслуживанияНоменклатура.КарточкаНоменклатуры.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|	НачалоОбслуживанияНоменклатура.КарточкаНоменклатуры.СерийныйНомер КАК СерийныйНомер,
			|	НачалоОбслуживанияНоменклатура.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
			|ИЗ
			|	Документ.НачалоОбслуживания.Номенклатура КАК НачалоОбслуживанияНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
			|		ПО НачалоОбслуживанияНоменклатура.Партия = ВТ_Остатки.Партия
			|			И (ВЫБОР
			|				КОГДА НачалоОбслуживанияНоменклатура.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
			|					ТОГДА НачалоОбслуживанияНоменклатура.КарточкаНоменклатуры = ВТ_Остатки.Номенклатура
			|				ИНАЧЕ НачалоОбслуживанияНоменклатура.Номенклатура = ВТ_Остатки.Номенклатура
			|			КОНЕЦ)
			|ГДЕ
			|	НачалоОбслуживанияНоменклатура.Ссылка = &ТекущийДокумент
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НачалоОбслуживанияУслуги.Ссылка,
			|	НачалоОбслуживанияУслуги.НомерСтроки,
			|	НачалоОбслуживанияУслуги.Номенклатура,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	ЕСТЬNULL(НачалоОбслуживанияУслуги.Количество, 0),
			|	НачалоОбслуживанияУслуги.Описание,
			|	НачалоОбслуживанияУслуги.Подразделение,
			|	НачалоОбслуживанияУслуги.СтатьяДоходовРасходов,
			|	НачалоОбслуживанияУслуги.ЕдиницаИзмерения,
			|	НЕОПРЕДЕЛЕНО,
			|	ЕСТЬNULL(НачалоОбслуживанияУслуги.Цена, 0),
			|	ЕСТЬNULL(НачалоОбслуживанияУслуги.Сумма, 0),
			|	NULL,
			|	NULL,
			|	НачалоОбслуживанияУслуги.Номенклатура.ВидНоменклатуры
			|ИЗ
			|	Документ.НачалоОбслуживания.Услуги КАК НачалоОбслуживанияУслуги
			|ГДЕ
			|	НачалоОбслуживанияУслуги.Ссылка = &ТекущийДокумент";
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Шапка = МассивРезультатов[1].Выбрать();
		Шапка.Следующий();		
		
		ВыборкаСтрокНоменклатуры = УправлениеITОтделом8УФ.МассивСтруктурИзРезультатаЗапроса(МассивРезультатов[2]);
		
		Если ИмяМакета = "ЗаявкаНаРемонтОбслуживание" Тогда
				
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.НачалоОбслуживания.ПФ_MXL_МакетЗаявкаНаРемонтОбслуживание");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НачалоОбслуживания_ЗаявкаНаРемонтОбслуживание";
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			СтруктураЗаполнения.Вставить("ТекстЗаголовка", СтрШаблон(НСтр("ru = 'Заявка на ремонт (обслуживание) № %1 от %2'"), СтруктураЗаполнения.НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD")));
			СтруктураЗаполнения.Вставить("КонтрагентИлиМестоОбслуживания",Шапка.КонтрагентИлиМестоОбслуживания);
			СтруктураЗаполнения.Вставить("КонтрагентМестоОбслуживания",   Шапка.КонтрагентМестоОбслуживания);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения); 
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк
			ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
			Сумма									= 0;
			Количество								= ВыборкаСтрокНоменклатуры.Количество();
			НомерСтроки								= 1;
			
			Для Каждого СтруктураСтроки Из ВыборкаСтрокНоменклатуры Цикл
				СтруктураСтроки.Вставить("НомерСтроки", НомерСтроки);
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураСтроки);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				Сумма = Сумма + СтруктураСтроки.Сумма;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			СтруктураЗаполнения.Вставить("ИтогКолво", Количество);
			СтруктураЗаполнения.Вставить("ИтогСумма", Сумма);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр= Истина;
	ТабличныйДокумент.АвтоМасштаб 	= Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаРемонтОбслуживание") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаявкаНаРемонтОбслуживание", НСтр("ru = 'Заявка на ремонт (обслуживание)'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ЗаявкаНаРемонтОбслуживание"));
	КонецЕсли;
		
КонецПроцедуры

// Функция получает данные для печати
//
Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Возврат Новый Структура("Данные, Макеты",
							ДанныеПоВсемОбъектам,
							Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
											ОписаниеОбластей,
											ТипыМакетов,
											ДвоичныеДанныеМакетов));
	
КонецФункции

// Заполняет список команд печати Начало обслуживания.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
	КомандаПечати				= КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаявкаНаРемонтОбслуживание";
	КомандаПечати.Представление = НСтр("ru = 'Заявка на ремонт (обслуживание)'");
	КомандаПечати.СписокФорм 	= "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок 		= 4;
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли