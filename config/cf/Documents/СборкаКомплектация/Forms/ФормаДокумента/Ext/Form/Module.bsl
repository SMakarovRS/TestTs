
#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки; // переменная для запоминания значений.

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СЛС.ПриСозданииНаСервере(Объект, Отказ, СтандартнаяОбработка, Параметры, ЭтаФорма);	
		
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Параметры.Свойство("МестоХранения") Тогда
		Объект.МестоХранения = Параметры.МестоХранения;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
		КонецЕсли;		
	КонецЕсли;

	Если Параметры.Свойство("АдресНоменклатуры") Тогда		
		ТЗ = ПолучитьИзВременногоХранилища(Параметры.АдресНоменклатуры);		
		Для каждого Строки Из ТЗ Цикл
			НоваяСтрока					= Объект.Номенклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);			
			НоваяСтрока.ПартияСоСклада	= Строки.Партия;
		КонецЦикла;		
		УдалитьИзВременногоХранилища(Параметры.АдресНоменклатуры);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		// Документ создается из обработки "РабочийСтол".
		Если Параметры.Свойство("РабочийСтолЗначенияЗаполнения") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.РабочийСтолЗначенияЗаполнения);
		КонецЕсли;

	КонецЕсли; 
	
	#Область БСП_ПриСозданииНаСервере

	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	//Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ВерсионированиеОбъектов	
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеITОтделом8УФПовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ДеревоНоменклатурыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
		
	#КонецОбласти

	ТекущийЭлемент = Элементы.ДеревоНоменклатуры;
	
	// Вывод дерева	
	ВывестиДеревоНоменклатуры();
	
	Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = 
		УправлениеITОтделом8УФ.ОтображатьИнвентарныеСерийныеНомера();
	
	Если Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = Истина Тогда
		ОбновитьИнвентарныеИСерийныеНомераНаСервере();
	КонецЕсли;	
	
	// Учет остатков контрагентов.
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Организация");
	УправлениеITОтделом8УФ.УстановитьОграничениеТипаДляЭлементовФормы(ЭтаФорма, МассивЭлементов);
	
	УстановитьВидимостьДоступность();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, 
			УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Корректировки документа
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// Разворачиваем дерево
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);	
	
	ПредыдущиеРеквизитыСтроки = СтруктураСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда		
		ПоддерживаемыеТипыВО = Новый Массив();		
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");		
		ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриОтключении, 
			УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
       ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Корректировки документа
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, 
			"ДокументСборкаКомплектации (проведение)");	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности

КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СЛС.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ВыборКарточкиНоменклатуры" Тогда
		
		НайденнаяСтрока = ДеревоНоменклатуры.НайтиПоИдентификатору(Параметр.ИдентификаторСтрокиНоменклатурыВладельца);
		Если НайденнаяСтрока <> Неопределено 
			И УправлениеITОтделом8УФКлиентСервер.ПолучитьРодительскуюФормуЭлемента(Параметр.ВладелецФормы) = ЭтаФорма Тогда
			
			НайденнаяСтрока.КарточкаНоменклатуры 	= Источник.Ссылка;
			НайденнаяСтрока.ИнвентарныйНомер 		= Источник.ИнвентарныйНомер;
			НайденнаяСтрока.СерийныйНомер 			= Источник.СерийныйНомер;
		КонецЕсли;
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				// Достаем штрихкод из основных данных.
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1));
			Иначе
				 // Достаем штрихкод из дополнительных данных.
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1));
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ТекущийОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		ТекущийОбъект.ДатаКорректировки = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ТекущийОбъект.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	Иначе
		ТекущийОбъект.АвторКорректировки = Пользователи.ТекущийПользователь();
	КонецЕсли; 
		
	СохранитьДеревоНоменклатуры(ТекущийОбъект);

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СЛС.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВыбораОрганизацииКонтрагента"
		И ИсточникВыбора.ВладелецФормы = ЭтаФорма Тогда
		УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбораФормы(ЭтаФорма, 
		 				"Организация",
						Объект.Организация,
						ВыбранноеЗначение,
						Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект));	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Номер = "";
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ДеревоНоменклатурыПослеУдаления(Элемент)
	
	СохранитьДеревоНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Ном = ?(УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура),
		СтрокаТабличнойЧасти.КарточкаНоменклатуры, СтрокаТабличнойЧасти.Номенклатура);
		
    СтрокаТабличнойЧасти.ПартияСоСклада = УправлениеITОтделом8УФ.ПартияСоСклада(Объект.Дата, 
		Объект.Организация, Объект.МестоХранения, Ном);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КарточкаНоменклатуры) Тогда
		ИнвентарныйСерийныйНомер 				= 
			ПолучитьИнвентарныйИСерийныйНомерНаСервере(СтрокаТабличнойЧасти.КарточкаНоменклатуры);
			
		СтрокаТабличнойЧасти.ИнвентарныйНомер 	= ИнвентарныйСерийныйНомер.ИнвентарныйНомер;
		СтрокаТабличнойЧасти.СерийныйНомер 		= ИнвентарныйСерийныйНомер.СерийныйНомер;
	Иначе
		СтрокаТабличнойЧасти.ИнвентарныйНомер 	= "";
		СтрокаТабличнойЧасти.СерийныйНомер 		= "";
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиент.ЗаполнитьКомплектПартию(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения     = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество           = 1;
	СтрокаТабличнойЧасти.НавСсылка            = СтруктураДанные.НавСсылка;
	СтрокаТабличнойЧасти.КарточкаНоменклатуры = СтруктураДанные.КарточкаНоменклатуры;
	
	Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр = 
		НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
		
	Если НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура) Тогда
    	СтрокаТабличнойЧасти.ПартияСоСклада = УправлениеITОтделом8УФ.ПартияСоСклада(Объект.Дата,
			Объект.Организация, Объект.МестоХранения, СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, 
		Строка, Поле)
	
	// Узел нельзя переносить в узлы подчиненные ему самому,
    // т.е. родительский узел нельзя переносить в дочерние.
    // Проверим это условие для всех выделенных элементов.

    СтандартнаяОбработка = Ложь;

    РеквизитДерево = ЭтаФорма["ДеревоНоменклатуры"];

    ИДНовыйРодитель = Строка;
    // Если НовыйРодитель = Неопределено => Корень дерева.
    НовыйРодитель = ?(ИДНовыйРодитель = Неопределено, Неопределено, 
		РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель));

    ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);

    Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент, НовыйРодитель) Тогда
        ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
    РеквизитДерево 		 = ЭтаФорма["ДеревоНоменклатуры"];
    ИДПриемник 			 = Строка;
	
    // Если ИДПриемник = Неопределено => Корень дерева.
    Приемник = ?(ИДПриемник = Неопределено, Неопределено,
        РеквизитДерево.НайтиПоИдентификатору(ИДПриемник));

    Источник	= РеквизитДерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	Если ТипЗНЧ(Приемник) = Тип("ДанныеФормыЭлементДерева") Тогда
		Если Не ЗначениеЗаполнено(Приемник.КарточкаНоменклатуры) Тогда			
			ДопПараметры 		= Новый Структура;
			ДопПараметры.Вставить("РеквизитДерево", РеквизитДерево);
			ДопПараметры.Вставить("Приемник", 		Приемник);
			ДопПараметры.Вставить("Источник", 		Источник);
			ДопПараметры.Вставить("ИДПриемник", 	ИДПриемник);
			
			
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатуры",
				ЭтотОбъект, ДопПараметры);
			
			Кнопки 				= Новый СписокЗначений;
			Кнопки.Добавить("КнопкаСоздатьНовую", 		НСтр("ru = 'Создать новую'"));
			Кнопки.Добавить("КнопкаВыбратьИзСписка", 	НСтр("ru = 'Выбрать из списка'"));
			Кнопки.Добавить("КнопкаОтмена", 			НСтр("ru = 'Отмена'"));
			
			ПоказатьВопрос(ОписаниеОповещения, СтрШаблон(
				НСтр("ru = 'Перед добавлением в комплект необходимо заполнить карточку для номенклатуры ""%1"".
                |Создать новую или выбрать существующую из списка?'"), Приемник.Номенклатура), 
				Кнопки, , "КнопкаСоздатьНовую");
				
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ДеревоНоменклатурыПеретаскиваниеФрагмент(РеквизитДерево, Приемник, Источник, ИДПриемник);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр = 
		НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
		
	Элементы.ДеревоНоменклатурыИнвентарныйНомер.ТолькоПросмотр = 
		Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;
		
	Элементы.ДеревоНоменклатурыСерийныйНомер.ТолькоПросмотр = 
		Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;
		
	Элементы.ДеревоНоменклатурыКоличество.ТолькоПросмотр = 
		НЕ Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;
		
	Элементы.ДеревоНоменклатурыЕдиницаИзмерения.ТолькоПросмотр = 
		НЕ Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;		
	
	Если Не Копирование 
		И УправлениеITОтделом8УФПовтИсп.НоменклатураМожетИметьКомплектующие(СтрокаТабличнойЧасти.Номенклатура) Тогда
		
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(НСтр("ru = 'Добавить в комплект'"));
		СЗ.Добавить(НСтр("ru = 'Добавить на этом же уровне'"));
		
		Если ДеревоНоменклатуры.ПолучитьЭлементы().Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Отказ		= Истина;
		Структура	= Новый Структура;
		Структура.Вставить("Элемент", Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоНоменклатурыПередНачаломДобавленияЗавершение",
			ЭтаФорма, Структура);
			
		ПоказатьВыборИзМеню(ОписаниеОповещения, СЗ, Элементы.ДеревоНоменклатуры.КоманднаяПанель);
		Возврат;
		
	КонецЕсли;	
	
	Отказ					= Истина;
	
	Результат				= Новый Структура("Значение", НСтр("ru = 'Добавить на этом же уровне'"));
	СтруктураЭлемента 		= Новый Структура("Элемент", Элемент);
	ДеревоНоменклатурыПередНачаломДобавленияЗавершение(Результат, СтруктураЭлемента);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 		
		Возврат;
	КонецЕсли;
	
	Модифицированность 	= Истина;
	
	РеквизитДерево 		= ЭтаФорма["ДеревоНоменклатуры"];
	ВКомплект 			= Ложь;
	Элемент 			= ДополнительныеПараметры.Элемент;
	
	Если Результат.Значение = НСтр("ru = 'Добавить в комплект'") Тогда 
		ВКомплект = Истина;
	КонецЕсли;
	
	Если ВКомплект Тогда
		// Внутрь комплекта.
		Приемник = РеквизитДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Если ЗначениеЗаполнено(Приемник.КарточкаНоменклатуры) Тогда
			Если НЕ Элемент.Развернут(Приемник.ПолучитьИдентификатор()) Тогда
				Элемент.Развернуть(Приемник.ПолучитьИдентификатор());
			КонецЕсли;		
			НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Приемник);
		Иначе
			ДопПараметры 		= Новый Структура("РеквизитДерево, Приемник", РеквизитДерево, Приемник);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВопросаСоздатьКарточкуНоменклатуры",
				ЭтотОбъект, ДопПараметры);
			
			Кнопки 				= Новый СписокЗначений;
			Кнопки.Добавить("КнопкаСоздатьНовую", 		НСтр("ru = 'Создать новую'"));
			Кнопки.Добавить("КнопкаВыбратьИзСписка", 	НСтр("ru = 'Выбрать из списка'"));
			Кнопки.Добавить("КнопкаОтмена", 			НСтр("ru = 'Отмена'"));
			
			ПоказатьВопрос(ОписаниеОповещения, СтрШаблон(
				НСтр("ru = 'Перед добавлением в комплект необходимо заполнить карточку для номенклатуры ""%1"".
                |Создать новую или выбрать существующую из списка?'"), Приемник.Номенклатура),
				Кнопки, , "КнопкаСоздатьНовую");
				
			Возврат;				
		КонецЕсли;
		
	ИначеЕсли РеквизитДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя() = Неопределено Тогда
	    // Добавляем в корень.
	    НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Неопределено);
		
	Иначе
		// На текущий уровень.
		Приемник = РеквизитДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя();
		Если ЗначениеЗаполнено(Приемник.КарточкаНоменклатуры) Тогда
			Если НЕ Элемент.Развернут(Приемник.ПолучитьИдентификатор()) Тогда
				Элемент.Развернуть(Приемник.ПолучитьИдентификатор());
			КонецЕсли;		
			НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Приемник);
		Иначе
			ДопПараметры 		= Новый Структура("РеквизитДерево, Приемник", РеквизитДерево, Приемник);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВопросаСоздатьКарточкуНоменклатуры", ЭтотОбъект, ДопПараметры);
			
			Кнопки 				= Новый СписокЗначений;
			Кнопки.Добавить("КнопкаСоздатьНовую", 		НСтр("ru = 'Создать новую'"));
			Кнопки.Добавить("КнопкаВыбратьИзСписка", 	НСтр("ru = 'Выбрать из списка'"));
			Кнопки.Добавить("КнопкаОтмена", 			НСтр("ru = 'Отмена'"));
			
			ПоказатьВопрос(ОписаниеОповещения, СтрШаблон(
				НСтр("ru = 'Перед добавлением в комплект необходимо заполнить карточку для номенклатуры ""%1"".
                |Создать новую или выбрать существующую из списка?'"), Приемник.Номенклатура),
				Кнопки,,"КнопкаСоздатьНовую");
				
			Возврат;				
		КонецЕсли;
	КонецЕсли;
	
	ТекущийЭлемент			= Элемент;
	Элемент.ТекущаяСтрока 	= НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ДеревоНоменклатурыНоменклатура;	
	Элемент.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриИзменении(Элемент)
	
	ОбновитьНумерациюВДеревеЗначенийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана номенклатура для выбора карточки.'"));
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("Организация", 				  				  Объект.Организация);
	ПараметрыФормы.Вставить("МестоХранения", 				  			  Объект.МестоХранения);
	ПараметрыФормы.Вставить("ОтборПоОрганизацииМестуХранения",			  Истина);
	ПараметрыФормы.Вставить("ОтборТолькоНеИспользованные", 				  Ложь);	
	ПараметрыФормы.Вставить("ОтборНоменклатура", 						  СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", 						  СтрокаТабличнойЧасти.КарточкаНоменклатуры);
	ПараметрыФормы.Вставить("Владелец", 								  СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ИдентификаторСтрокиНоменклатурыВладельца",   СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	
	ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрана номенклатура для создания карточки.'"));
		Возврат;
	КонецЕсли;	
	                                                                                    
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец"									, СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ИдентификаторСтрокиНоменклатурыВладельца"	, СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	
	Форма 			= ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаОбъекта", ПараметрыФормы, Элемент);
	Форма.ВладелецФормы = Элемент; 
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина; 
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрана номенклатура для создания карточки.'"));
		Возврат;
	КонецЕсли;	
	                                                                                    
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ"										, СтрокаТабличнойЧасти.КарточкаНоменклатуры);
	ПараметрыФормы.Вставить("Владелец"									, СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ИдентификаторСтрокиНоменклатурыВладельца"	, СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	
	Форма 			= ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаОбъекта", ПараметрыФормы, Элемент);
	Форма.ВладелецФормы = Элемент; 
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина; 
	Форма.Открыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьКарточкуНоменклатурыНаСервере(ДанныеФормы, Номенклатура);

	Спр 				= ДанныеФормыВЗначение(ДанныеФормы, Тип("СправочникОбъект.КарточкиНоменклатуры"));
	Спр					= Справочники.КарточкиНоменклатуры.СоздатьЭлемент();
	Спр.Наименование	= Номенклатура.Наименование;
	Спр.ВидНоменклатуры	= Номенклатура.ВидНоменклатуры;
	Спр.Владелец 		= Номенклатура;
	Спр.АвтоНаименование= Истина;
	
	ЗначениеВДанныеФормы(Спр, ДанныеФормы);

КонецФункции

&НаКлиенте
Процедура ДеревоНоменклатурыСерийныйНомерПриИзменении(Элемент)
	
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьНомерНаСервере(Элементы.ДеревоНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры,
		"СерийныйНомер", Элементы.ДеревоНоменклатуры.ТекущиеДанные.СерийныйНомер);
	
	ОбновитьПовторноИспользуемыеЗначения();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыИнвентарныйНомерПриИзменении(Элемент)
	
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьНомерНаСервере(Элементы.ДеревоНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры,
		"ИнвентарныйНомер", Элементы.ДеревоНоменклатуры.ТекущиеДанные.ИнвентарныйНомер);
	
	ОбновитьПовторноИспользуемыеЗначения();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборУслуги", Ложь);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("Ключ", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТабличнойЧасти.Номенклатура);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломИзменения(Элемент, Отказ)
	
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.ДеревоНоменклатуры.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьТабличнуюЧастьНоменклатура();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СохранитьДеревоНоменклатуры();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НадписьАвторНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Спк = УправлениеITОтделом8УФКлиент.ПолучитьСписокНадписьАвтор(Объект);	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НадписьАвторНажатиеЗавершение", ЭтотОбъект),
		Спк, Элементы.НадписьАвтор);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьАвторНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт    

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Нажатия кнопки ПодсказкаСостояние.
//
Процедура ПодсказкаСостояниеНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Состояние заказа'"));
	ПараметрыОткрытия.Вставить("КлючПодсказки", "Поступление_УчитыватьТолькоКомплекты");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);
	
КонецПроцедуры // ПодсказкаСостояниеНажатие()

&НаСервере
Процедура СформироватьНовыеШтрихКодыНаСервере()
	
	КоличествоШтрихкодов = 0;
	Для Каждого Строки Из Объект.Номенклатура Цикл
		
		Если Строки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
			Номенклатура = Строки.КарточкаНоменклатуры;
		Иначе
			Номенклатура = Строки.Номенклатура;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			Если Строки.Номенклатура.ВидНоменклатуры.МожетИметьШтрихКод 
					И НЕ УправлениеITОтделом8УФ.ЕстьШтрихКод(Номенклатура) Тогда
					
				ТекЗапись					= РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();				
				ТекЗапись.Штрихкод         	= РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13();
				ТекЗапись.Номенклатура      = Номенклатура;
				ТекЗапись.ЕдиницаИзмерения 	= Строки.Номенклатура.ЕдиницаИзмерения;
				
				Попытка
					ТекЗапись.Записать();
					КоличествоШтрихкодов = КоличествоШтрихкодов + 1;
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Для %1 сформирован штрихкод ""%2""'"), 
						Строки.КарточкаНоменклатуры, Строка(ТекЗапись.Штрихкод)));
				Исключение
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Для строки №%1 не удалось сформировать новый штрихкод.'"), Строки.НомерСтроки));
				КонецПопытки;
				
			КонецЕсли;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'Для строки №%1 нет номенклатуры или карточки.'"), Строки.НомерСтроки));
		КонецЕсли;

	КонецЦикла;
	
	Если КоличествоШтрихкодов = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для номенклатуры в документе не сформировано ни одного штрихкода.'"));
	Иначе
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Для номенклатуры сформировано %1 штрихкодов'"), КоличествоШтрихкодов));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНовыеШтрихКоды(Команда)
	
	// Записываем документ.
	Если Объект.Ссылка.Пустая() Тогда
		Результат = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьНовыеШтрихКодыЗавершение", ЭтотОбъект),
			НСтр("ru = 'Документ не записан. Для продолжения необходимо его записать. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет);
			
        Возврат;
		
	КонецЕсли;
	
	СформироватьНовыеШтрихКодыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНовыеШтрихКодыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    Записать();
    
    СформироватьНовыеШтрихКодыФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьНовыеШтрихКодыФрагмент()
    
    СформироватьНовыеШтрихКодыНаСервере();

КонецПроцедуры

&НаСервере
Функция ЗаполнитьКарточкиНоменклатурыНаСервере()
	
	КоличествоКарточек = 0;
	Для Каждого Строки Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл    
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			Строки.КарточкаНоменклатуры = 
				УправлениеITОтделом8УФ.СоздатьКарточкуНоменклатуры(Строки.Номенклатура, 
					Строки.СерийныйНомер, Строки.ИнвентарныйНомер);
					
			Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
				КоличествоКарточек = КоличествоКарточек + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьПодчиненныеКарточкиНоменклатурыНаСервере(Строки, КоличествоКарточек);
		
	КонецЦикла;	
	СохранитьДеревоНоменклатуры(Объект);
	
	Возврат КоличествоКарточек;

КонецФункции

&НаСервере
Процедура ЗаполнитьПодчиненныеКарточкиНоменклатурыНаСервере(Родитель, КоличествоКарточек)	
	
	Для Каждого Строки Из Родитель.ПолучитьЭлементы() Цикл    
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			Строки.КарточкаНоменклатуры = УправлениеITОтделом8УФ.СоздатьКарточкуНоменклатуры(Строки.Номенклатура,
				Строки.СерийныйНомер, Строки.ИнвентарныйНомер);
				
			Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
				КоличествоКарточек = КоличествоКарточек + 1;
			КонецЕсли;
		КонецЕсли;		
		
		Строки.Комплект	= ?(ЗначениеЗаполнено(Родитель.Комплект), Родитель.Комплект, Родитель.КарточкаНоменклатуры);
		Строки.Партия 	= Родитель.КарточкаНоменклатуры;
		
		ЗаполнитьПодчиненныеКарточкиНоменклатурыНаСервере(Строки, КоличествоКарточек);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКарточкиНоменклатуры(Команда)	
	
	// Записываем документ.
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ЗаполнитьКарточкиНоменклатурыЗавершение", ЭтаФорма);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходимо его записать. Продолжить?'"), Режим);
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьКарточкиНоменклатурыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКарточкиНоменклатурыЗавершение(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьКарточкиНоменклатурыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКарточкиНоменклатурыФрагмент()
		
	КоличествоСозданныхКарточек = 0;
	ЗаписатьНаСервере();
	КоличествоСозданныхКарточек = ЗаполнитьКарточкиНоменклатурыНаСервере();	
	ЗаписатьНаСервере();	
	// Разворачиваем дерево.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);	
	Если КоличествоСозданныхКарточек > 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Карточки созданы и добавлены в документ'"));
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ОтображатьИнвентарныеИСерийныеНомера(Команда)
	
	Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = 
		НЕ Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
		
	УправлениеITОтделом8УФ.СохранитьНастройкуОтображатьИнвентарныеСерийныеНомера(
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка);
		
	УстановитьВидимостьДоступность();
	ОбновитьИнвентарныеИСерийныеНомераНаСервере();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНомерНаСервере(Карточка, ИмяРеквизита, Значение)
	
	Если ЗначениеЗаполнено(Карточка) Тогда
		Попытка
			ОбъектКарточки = Карточка.ПолучитьОбъект();
			ОбъектКарточки[ИмяРеквизита] = Значение;
			ОбъектКарточки.Записать();
			СохранитьДеревоНоменклатуры();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодборНаСервере(АдресТЗ)
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	
	ТЗСохраненная = Объект.Номенклатура.Выгрузить();
	
    // Очистка номенклатуры.
    Объект.Номенклатура.Очистить();
	
	// Добавляем Результат в таблицу.
	Для каждого Строки Из ТЗ Цикл
		
		НоваяСтрока					= Объект.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
		НоваяСтрока.Количество		= Строки.КоличествоВыбрано;
		НоваяСтрока.ПартияСоСклада	= Строки.Партия;
		
		Структура = Новый Структура("Номенклатура,КарточкаНоменклатуры,Партия,Комплект");
		ЗаполнитьЗначенияСвойств(Структура, НоваяСтрока);
		Массив = ТЗСохраненная.НайтиСтроки(Структура);
		Для Каждого СтрокиМассива Из Массив Цикл
			ЗаполнитьЗначенияСвойств(НоваяСтрока,  СтрокиМассива, "Описание");
		КонецЦикла;
		
	КонецЦикла;
	
	Модифицированность = Истина;	
	УдалитьИзВременногоХранилища(АдресТЗ);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруВДокументе()
	
	ТЗ = Объект.Номенклатура.Выгрузить();	
	
	Возврат ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура Подбор(Команда)
	
	Если ДеревоНоменклатуры.ПолучитьЭлементы().Количество()>0 Тогда
		Оповещение		= Новый ОписаниеОповещения("ОчиститьДеревоНоменклатурыВопрос", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Номенклатура, добавленная без подбора будет очищена, продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
			
		Возврат;
		
	Иначе	
		ПодборНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДеревоНоменклатурыВопрос(Результат,ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда		
		Возврат;
	КонецЕсли;
	
	ПодборНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНаКлиенте()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	// Сохраняем то, что сейчас в дереве.		
	СохранитьДеревоНоменклатуры();
	
	// Показываем форму.
	Структура = Новый Структура;
	Структура.Вставить("Организация"					, Объект.Организация);
	Структура.Вставить("МестоХранения"					, Объект.МестоХранения);
	Если Объект.Ссылка.Пустая() Тогда
		Структура.Вставить("ДатаАктуальности"			, КонецДня(ТекущаяДатаНаСервере()));
	Иначе
		Структура.Вставить("ДатаАктуальности"			, Объект.Дата);		
	КонецЕсли;
	Структура.Вставить("ОрганизацияТолькоПросмотр"		, Истина);
	Структура.Вставить("МестоХраненияТолькоПросмотр"	, Истина);
	Структура.Вставить("ДатаАктуальностиТолькоПросмотр"	, Истина);
	Структура.Вставить("АдресВыбраннойНоменклатуры"		, ПолучитьНоменклатуруВДокументе());
	
	Результат = Неопределено;
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", Структура, ЭтаФорма, , , , 
		Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение,
		"ДокументСборкаКомплектации (подборОткрытие)");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат <> Неопределено Тогда
        
        ПодборНаСервере(Результат);
        
        ВывестиДеревоНоменклатуры();
		ОбновитьИнвентарныеИСерийныеНомераНаСервере();	
        
        // Разворачиваем сформированное дерево номенклатуры.
		УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
		
		Модифицированность = Истина;
		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьКарточкиНоменклатуры(Команда)
	
	// Записываем документ.
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("СгруппироватьКарточкиНоменклатурыЗавершение", ЭтотОбъект);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходима его запись. Продолжить?'"), Режим);
		Возврат;		
	КонецЕсли;	
	
	СгруппироватьКарточкиНоменклатурыНаСервере();
	// Разворачиваем дерево.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьКарточкиНоменклатурыЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	СгруппироватьКарточкиНоменклатурыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьКарточкиНоменклатурыФрагмент()
	
	Записать();
	ЗаписатьНаСервере();	
	СгруппироватьКарточкиНоменклатурыНаСервере();		
	ЗаписатьНаСервере();	
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// Разворачиваем дерево.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СгруппироватьКарточкиНоменклатурыНаСервере()
	
	// Получаем виды номенклатуры и выгружаем в таблицу.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыНоменклатурыРодительскиеВиды.Ссылка КАК ВидНоменклатуры,
		|	ВидыНоменклатурыРодительскиеВиды.РодительскийВид КАК РодительскийВид
		|ИЗ
		|	Справочник.ВидыНоменклатуры.РодительскиеВиды КАК ВидыНоменклатурыРодительскиеВиды
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидНоменклатуры";
	ТаблицаВидов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строки Из Объект.Номенклатура Цикл 
		Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			
			НайденнаяСтрокаАдресат = Неопределено;
			ВидНоменклатуры = Строки.КарточкаНоменклатуры.ВидНоменклатуры;
			НайденнаяСтрока = ТаблицаВидов.Найти(ВидНоменклатуры, "ВидНоменклатуры");
			Если НайденнаяСтрока <> Неопределено Тогда				
				РодительскийВид = НайденнаяСтрока.РодительскийВид;
				
				// Ищем родителя.
				Для Каждого Строки2 Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
					Если ЗначениеЗаполнено(Строки2.КарточкаНоменклатуры) 
							И УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Строки2.Номенклатура) Тогда
							
						Если Строки2.КарточкаНоменклатуры.ВидНоменклатуры = РодительскийВид Тогда
							НайденнаяСтрокаАдресат = Строки2;
							Прервать;
						КонецЕсли;
						
					КонецЕсли;                              
				КонецЦикла;
				
				Если НайденнаяСтрокаАдресат <> Неопределено Тогда
					Строки.Партия 	= НайденнаяСтрокаАдресат.КарточкаНоменклатуры;
					Строки.Комплект	= ?(ЗначениеЗаполнено(НайденнаяСтрокаАдресат.Комплект), 
						НайденнаяСтрокаАдресат.Комплект, НайденнаяСтрокаАдресат.КарточкаНоменклатуры);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	// Вывод дерева	
	ВывестиДеревоНоменклатуры();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
		СтандартнаяОбработка = Неопределено)
		
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область БПО

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ДеревоНоменклатурыСерийныйНомер.Видимость 		= 
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
		
	Элементы.ДеревоНоменклатурыИнвентарныйНомер.Видимость 	= 
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеНаСервере(Стр, Параметры = Неопределено)
	
	Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(Стр, Параметры);
	
КонецФункции

&НаСервере
Процедура ВыполнитьНаСервере(Стр)
	
	Выполнить(Стр);
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияНачалоВыбораИзСписка.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	
	ПланыОбмена.ГлавныйУзел();
	СписокЕдиницаИзмерения = Новый СписокЗначений;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);
	
	СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, 
		Номенклатура.ЕдиницаИзмерения.Наименование + " " + НСтр("ru = '(ед. хранения)'"));
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Номенклатура);
	
	Родитель = Номенклатура.Родитель;
	
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Прервать;
		Иначе
			МассивОтбора.Добавить(Родитель);
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	КонецЦикла;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка()	

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, 
		ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	РазностьДат = УправлениеITОтделом8УФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура;	
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Содержание", СтруктураДанные.Номенклатура.Наименование);
	
	Если ТипЗнч(СтруктураДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	Иначе
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.Владелец.ЕдиницаИзмерения);
	КонецЕсли;
	
	// Проверка, что ведется учет по карточкам.
	СтруктураДанные.Вставить("КарточкаНоменклатуры", 
		УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(СтруктураДанные.Номенклатура));
	
	СтруктураДанные.Вставить("НавСсылка", СтруктураДанные.Номенклатура.ВидНоменклатуры.НавСсылка);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервере
// Сохранения дерева номенклатуры
Процедура СохранитьДеревоНоменклатуры(ТекущийОбъект =  Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекОбъект = РеквизитФормыВЗначение("Объект");
	Иначе
		ТекОбъект = ТекущийОбъект;
	КонецЕсли;
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	
	ОбработкаТабличныхЧастей.СохранитьДеревоНоменклатуры(ДЗ, ТекОбъект.Номенклатура);
	
	Если ТекущийОбъект = Неопределено Тогда
		ЗначениеВДанныеФормы(ТекОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПодчиненнуюНоменклатуру(Отказ, ТекущийОбъект, СтрокаДерева)
	
	Для Каждого Строки Из СтрокаДерева.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для номенклатуры ""%1"" в документе не указана карточка.'"),
				Строки.Номенклатура);
				
			УправлениеITОтделом8УФ.СообщитьОбОшибке(Объект, ТекстСообщения,,, "ДеревоНоменклатуры", Отказ);
			Возврат;
		КонецЕсли;
		
		НоваяСтрока 						= ТекущийОбъект.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
		Если ЗначениеЗаполнено(Строки.Родитель) Тогда
			НоваяСтрока.Партия 				= Строки.Родитель.КарточкаНоменклатуры;
		КонецЕсли;
		СохранитьПодчиненнуюНоменклатуру(Отказ, ТекущийОбъект, Строки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Вывод дерева номенклатуры.
//
Процедура ВывестиДеревоНоменклатуры()
	
	ТЗ = Объект.Номенклатура.Выгрузить();
	ТЗ.Колонки.Добавить("НавСсылка");
	
	Для Каждого Строки Из ТЗ Цикл
		Строки.НавСсылка = УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(Строки.Номенклатура);
	КонецЦикла;
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	ДЗ.Строки.Очистить();	
	УправлениеITОтделом8УФ.ВывестиДеревоНоменклатуры(ДЗ, ТЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьНумерациюВДеревеЗначенийНаСервере()
	
	ОбработкаТабличныхЧастей.ОбновитьНумерациюВДереве(ДеревоНоменклатуры);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнвентарныеИСерийныеНомераНаСервере()
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	УправлениеITОтделом8УФ.ОбновитьИнвентарныеИСерийныеНомера(ДЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)

	// Может содержать дочерние.
	Если НовыйРодитель <> Неопределено Тогда
		Если ЗначениеЗаполнено(НовыйРодитель.Номенклатура) Тогда
			Параметр = Новый Структура();
			Параметр.Вставить("Номенклатура", НовыйРодитель.Номенклатура);
			Если НЕ ЗначениеНаСервере("Параметры.Номенклатура.ВидНоменклатуры.МожетИметьКомплектующие", Параметр) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	// Родитель в родителе.
    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
	КонецЦикла;
	
    Возврат Истина;

КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен.
    // Это происходит если выделены несколько элементов,
    // одной и той же ветви дерева на разных уровнях иерархии.
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень.
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
            [КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Если Источник.ПолучитьРодителя() = Неопределено Тогда
        РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
    Иначе
        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуДерева(РеквизитДерево, Родитель)
	
    Возврат ОбработкаТабличныхЧастейКлиент.ДобавитьСтрокуДерева(РеквизитДерево, Родитель);
	
КонецФункции

&НаСервере
Функция ПроверитьМожетЛиИметьКомплектующие(Номенклатура)
	
	Возврат Номенклатура.ВидНоменклатуры.МожетИметьКомплектующие;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоПоШтрихкоду(ДанныеШтрихкода)
	
	ВерхняяНоменклатура = ДанныеШтрихкода.Номенклатура;
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", ?(Объект.Ссылка.Пустая(), ТекущаяДатаСеанса(), Объект.Дата));
	
	// По верхнему уровню выводим все дочерние элементы.
	ОткрытыйСписок = Новый Массив();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.КоличествоОстаток КАК Количество,
		|	ОстаткиОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(
		|			&Период,
		|			ВЫБОР
		|					КОГДА ТИПЗНАЧЕНИЯ(Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|				И Номенклатура = &Номенклатура) КАК ОстаткиОстатки";
		
	Запрос.УстановитьПараметр("Номенклатура", ВерхняяНоменклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НоваяСтрока						= Объект.Номенклатура.Добавить();
		НоваяСтрока.Номенклатура		= ВерхняяНоменклатура.Владелец;
		НоваяСтрока.КарточкаНоменклатуры= ВерхняяНоменклатура;
		НоваяСтрока.Количество			= Выборка.Количество;
		НоваяСтрока.ЕдиницаИзмерения	= ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), 
			ДанныеШтрихкода.ЕдиницаИзмерения, 
			ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
	КонецЕсли;		
	
	ОткрытыйСписок.Добавить(ВерхняяНоменклатура);		
	
	ЗакрытыйСписок = Новый Массив();
	ЗакрытыйСписок.Добавить(ВерхняяНоменклатура);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.КоличествоОстаток КАК Количество,
		|	ОстаткиОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(
		|			&Период,
		|			Партия = &Партия) КАК ОстаткиОстатки";
		
	Пока ЗакрытыйСписок.Количество() > 0 Цикл
		
		ПервыйЭлемент = ЗакрытыйСписок.Получить(0);
		
		// Эх, запрос в цикле... (да простят меня методисты 1С)
		Запрос.УстановитьПараметр("Партия", ПервыйЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ОткрытыйСписок.Найти(Выборка.Номенклатура) = Неопределено Тогда
				ОткрытыйСписок.Добавить(Выборка.Номенклатура);
				
				НоваяСтрока						= Объект.Номенклатура.Добавить();
				НоваяСтрока.Номенклатура		= Выборка.Номенклатура.Владелец;
				НоваяСтрока.Партия				= ПервыйЭлемент;
				НоваяСтрока.ПартияСоСклада		= НоваяСтрока.Партия;
				НоваяСтрока.КарточкаНоменклатуры= Выборка.Номенклатура;
				НоваяСтрока.Комплект 			= ?(ВерхняяНоменклатура = Выборка.Номенклатура, 
					Справочники.КарточкиНоменклатуры.ПустаяСсылка(), ВерхняяНоменклатура);
					
				НоваяСтрока.Количество 			= Выборка.Количество;
				НоваяСтрока.ЕдиницаИзмерения 	= ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), 
					ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			КонецЕсли;
		КонецЦикла;
		
		ЗакрытыйСписок.Удалить(0);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОповещенияПриЗагрузкеИзТСД = Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗагрузкеИзТСД, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") 
	   И Результат.Количество() > 0 Тогда
		ПолученыШтрихкоды(Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
		
	ДанныеПоШтрихКодам = 
		РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
		   
		    Если ТипЗнч(ДанныеШтрихкода.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				НоменклатураШтрихкода			= ДанныеШтрихкода.Номенклатура;
				КарточкаНоменклатурыШтрихкода	= 
					УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(НоменклатураШтрихкода);
		    Иначе
				НоменклатураШтрихкода			= ДанныеШтрихкода.Номенклатура.Владелец;
				КарточкаНоменклатурыШтрихкода	= ДанныеШтрихкода.Номенклатура;				
			КонецЕсли;
					   
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", 			СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", 			НоменклатураШтрихкода);
			СтруктураДанныеНоменклатуры.Вставить("КарточкаНоменклатуры", 	КарточкаНоменклатурыШтрихкода);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", 		
				ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = НоменклатураШтрихкода.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СохранитьДеревоНоменклатуры();
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	МассивВывода = Новый Массив;
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
				
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		Иначе
			
			НоменклатураШтрихкода		= ДанныеШтрихкода.Номенклатура;
			ЕдиницаИзмеренияШтрихкода	= ДанныеШтрихкода.ЕдиницаИзмерения;			
			МассивВывода.Добавить(ДобавитьНоменклатуруВДокумент(ДанныеШтрихкода));
			
		КонецЕсли;
	КонецЦикла;
	
	// Вывод дерева.
	ОбработатьВыводДереваНоменклатуры(МассивВывода);
	
	Если Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка Тогда
		ОбновитьИнвентарныеИСерийныеНомераНаСервере();
	КонецЕсли;	
	
	// Разворачиваем сформированное дерево номенклатуры.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
	Возврат НеизвестныеШтрихкоды;	
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов)
	
	Модифицированность		= Истина;	
	НеизвестныеШтрихкоды	= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);	
	ВозвращаемыеПараметры	= Неопределено;
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма, , , , Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеизвестныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтруктураСтрокиДерева()
	
	Возврат ОбработкаТабличныхЧастей.СтруктураИзДереваЗначений(ЭтаФорма, "ДеревоНоменклатуры");
	
КонецФункции

&НаСервере
Функция СтруктураСтрокиТабличнойЧасти()
	
	Возврат ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма, "Номенклатура");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТабличнуюЧастьНоменклатура()
	
	СтрокаТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТекущиеДанные = Неопределено Тогда		
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПредыдущиеРеквизитыСтроки Цикл
		Если КлючИЗначение.Значение <> СтрокаТекущиеДанные[КлючИЗначение.Ключ] Тогда			
			СтруктураТекущиеДанные	= СтруктураСтрокиТабличнойЧасти();
			ЗаполнитьЗначенияСвойств(СтруктураТекущиеДанные,СтрокаТекущиеДанные);
			ОбновитьСтрокуТабличнойЧасти(ПредыдущиеРеквизитыСтроки, СтруктураТекущиеДанные);
			Модифицированность 		= Истина;
			
			Возврат;
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуТабличнойЧасти(ПредыдущиеРеквизитыСтроки, СтруктураТекущиеДанные)
		
	Отбор = ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма, "Номенклатура");
	
	ЗаполнитьЗначенияСвойств(Отбор,ПредыдущиеРеквизитыСтроки);
	
	МассивСтрок = Объект.Номенклатура.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() <> 1 Тогда //обновляем полностью.
		СохранитьДеревоНоменклатуры();
	Иначе
		ЗаполнитьЗначенияСвойств(МассивСтрок[0],СтруктураТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнвентарныйИСерийныйНомерНаСервере(КарточкаНоменклатуры)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИнвентарныйНомер"	,КарточкаНоменклатуры.ИнвентарныйНомер);
	СтруктураВозврата.Вставить("СерийныйНомер"		,КарточкаНоменклатуры.СерийныйНомер);
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатуры(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = "КнопкаСоздатьНовую" Тогда
		
		ПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(ДополнительныеПараметры);
		
	ИначеЕсли Результат = "КнопкаВыбратьИзСписка" Тогда
		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВыбораИзСпискаКарточкиНоменклатуры", 
			ЭтотОбъект, ДополнительныеПараметры);
			
		ПараметрыФормы 		= Новый Структура;
		Если Объект.Ссылка.Пустая() Тогда
			ПараметрыФормы.Вставить("ОтборТолькоНеИспользованные", Истина);
			ПараметрыФормы.Вставить("ВидимостьОтборПоступление", Ложь);
		Иначе
			ПараметрыФормы.Вставить("ОтборПоступление", Объект.Ссылка);
		КонецЕсли;	
		
		СтрокаНоменклатура	 = ДополнительныеПараметры.Приемник;
		мНоменклатура		 = СтрокаНоменклатура.Номенклатура;
		мКарточкаНоменклатуры=СтрокаНоменклатура.КарточкаНоменклатуры; 
		ПараметрыФормы.Вставить("ОтборНоменклатура", мНоменклатура);
		ПараметрыФормы.Вставить("ВыбранноеЗначение", мКарточкаНоменклатуры);
		
		ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаВыбора", ПараметрыФормы, , , , , ОписаниеОповещения);
				
	ИначеЕсли Результат = "КнопкаОтмена" Тогда
		
		Возврат;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзСпискаКарточкиНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНоменклатура = ДополнительныеПараметры.Приемник;
	СтрокаНоменклатура.КарточкаНоменклатуры = Результат;
	СохранитьДеревоНоменклатуры();
	
	НоваяСтрока 			= ДобавитьСтрокуДерева(ДополнительныеПараметры.РеквизитДерево, 
		ДополнительныеПараметры.Приемник);
		
	Элемент					= Элементы.ДеревоНоменклатуры;
	ТекущийЭлемент			= Элемент;
	Элемент.ТекущаяСтрока 	= НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент			= Элементы.ДеревоНоменклатурыНоменклатура;
	Элемент.ИзменитьСтроку();
	
	// Разворачиваем дерево.	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(СтруктураПараметров)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВопросаСоздатьКарточкуНоменклатурыЗавершение",
			ЭтотОбъект, СтруктураПараметров);
			
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходимо его записать. Продолжить?'"), Режим);
		Возврат;		
	КонецЕсли;		
	
	ПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатурыЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ПараметрыСтруктура)
	
	КарточкаНоменклатуры= Неопределено;
	ЗаписатьНаСервере();
	СтрокаНоменклатура 	= ПараметрыСтруктура.Приемник;
	мНоменклатура		= СтрокаНоменклатура.Номенклатура;
	мСерийныйНомер		= СтрокаНоменклатура.СерийныйНомер;
	мИнвентарныйНомер	= СтрокаНоменклатура.ИнвентарныйНомер;
	КарточкаНоменклатуры= КарточкаНоменклатурыНаСервере(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер);		
	
	Если ЗначениеЗаполнено(КарточкаНоменклатуры) Тогда
		СтрокаНоменклатура.КарточкаНоменклатуры = КарточкаНоменклатуры;
		СохранитьДеревоНоменклатуры();
	Иначе
		ПоказатьПредупреждение(, СтрШаблон(
			НСтр("ru = 'Для номенклатуры ""%1"" не удалось создать карточку номенклатуры.'"), 
			СтрокаНоменклатура.Номенклатура));
			
		Возврат;
	КонецЕсли;
	
	ЗаписатьНаСервере();	
	
	НоваяСтрока 			= ДобавитьСтрокуДерева(ПараметрыСтруктура.РеквизитДерево, ПараметрыСтруктура.Приемник);	
	Элемент					= Элементы.ДеревоНоменклатуры;
	ТекущийЭлемент			= Элемент;
	Элемент.ТекущаяСтрока 	= НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент			= Элементы.ДеревоНоменклатурыНоменклатура;
	Элемент.ИзменитьСтроку();
	
	// Разворачиваем дерево.	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция КарточкаНоменклатурыНаСервере(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер)
	
	Возврат УправлениеITОтделом8УФ.СоздатьКарточкуНоменклатуры(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер);
	
КонецФункции	

&НаКлиенте
Процедура ДеревоНоменклатурыПеретаскиваниеФрагмент(РеквизитДерево, Приемник, Источник, ИДПриемник)
	
	НоваяСтрока	= СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник);

	Если Приемник = Неопределено Тогда
		НоваяСтрока.Комплект= ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
		НоваяСтрока.Партия 	= НоваяСтрока.Комплект;
	Иначе		
		НоваяСтрока.Комплект= ?(ЗначениеЗаполнено(Приемник.Комплект), Приемник.Комплект, Приемник.КарточкаНоменклатуры);
		НоваяСтрока.Партия 	= Приемник.КарточкаНоменклатуры;
	КонецЕсли;
	
    // Производится копирование в корень.
    // Для "красоты" развернем вновь созданную ветвь.
	Элемент = Элементы.ДеревоНоменклатуры;
	
    Если Приемник = Неопределено И НоваяСтрока<>Неопределено Тогда
        Элемент.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
    КонецЕсли;

    // Для "красоты" развернем ветвь-родителя.
    Если НЕ Приемник = Неопределено Тогда
        Элемент.Развернуть(ИДПриемник, Истина);
	КонецЕсли;
	
	ОбновитьНумерациюВДеревеЗначенийНаСервере();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "КнопкаСоздатьНовую" Тогда
		
		ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(ДополнительныеПараметры);
		
	ИначеЕсли Результат = "КнопкаВыбратьИзСписка" Тогда
		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеретаскиваниеПослеВыбораИзСпискаКарточкиНоменклатуры",
			ЭтотОбъект, ДополнительныеПараметры);
			
		ПараметрыФормы 		= Новый Структура;
		Если Объект.Ссылка.Пустая() Тогда
			ПараметрыФормы.Вставить("ОтборТолькоНеИспользованные", Истина);
			ПараметрыФормы.Вставить("ВидимостьОтборПоступление", Ложь);
		Иначе
			ПараметрыФормы.Вставить("ОтборПоступление", Объект.Ссылка);
		КонецЕсли;	
		
		СтрокаНоменклатура	 = ДополнительныеПараметры.Приемник;
		мНоменклатура		 = СтрокаНоменклатура.Номенклатура;
		мКарточкаНоменклатуры=СтрокаНоменклатура.КарточкаНоменклатуры; 
		ПараметрыФормы.Вставить("ОтборНоменклатура", мНоменклатура);
		ПараметрыФормы.Вставить("ВыбранноеЗначение", мКарточкаНоменклатуры);
		
		ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаВыбора", ПараметрыФормы, , , , , ОписаниеОповещения);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеПослеВыбораИзСпискаКарточкиНоменклатуры(Результат, ДополнительныеПараметры)Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНоменклатура = ДополнительныеПараметры.Приемник;
	СтрокаНоменклатура.КарточкаНоменклатуры = Результат; 
	ДеревоНоменклатурыПеретаскиваниеФрагмент(ДополнительныеПараметры.РеквизитДерево, 
		СтрокаНоменклатура, ДополнительныеПараметры.Источник, ДополнительныеПараметры.ИДПриемник);
	СохранитьДеревоНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(СтруктураПараметров)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыЗавершение",
			ЭтотОбъект, СтруктураПараметров);
			
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходимо его записать. Продолжить?'"), Режим);
		Возврат;		
	КонецЕсли;		
	
	ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ПараметрыСтруктура)
		
	КарточкаНоменклатуры= Неопределено;
	ЗаписатьНаСервере();
	СтрокаНоменклатура 	= ПараметрыСтруктура.Приемник;
	мНоменклатура		= СтрокаНоменклатура.Номенклатура;
	мСерийныйНомер		= СтрокаНоменклатура.СерийныйНомер;
	мИнвентарныйНомер	= СтрокаНоменклатура.ИнвентарныйНомер;
	КарточкаНоменклатуры= КарточкаНоменклатурыНаСервере(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер);		
	
	Если ЗначениеЗаполнено(КарточкаНоменклатуры) Тогда
		СтрокаНоменклатура.КарточкаНоменклатуры = КарточкаНоменклатуры;
		СохранитьДеревоНоменклатуры();
	Иначе
		ПоказатьПредупреждение(, СтрШаблон(
			НСтр("ru = 'Для номенклатуры ""%1"" не удалось создать карточку номенклатуры'"), 
			СтрокаНоменклатура.Номенклатура));
		Возврат;
	КонецЕсли;
	
	ЗаписатьНаСервере();	
	ДеревоНоменклатурыПеретаскиваниеФрагмент(ПараметрыСтруктура.РеквизитДерево, СтрокаНоменклатура, 
		ПараметрыСтруктура.Источник, ПараметрыСтруктура.ИДПриемник);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ОбъектДок = РеквизитФормыВЗначение("Объект");
	Если ОбъектДок.Проведен Тогда
		ОбъектДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе 
		ОбъектДок.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ОбъектДок, Объект);
	
КонецПроцедуры

&НаСервере
Функция ТекущаяДатаНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаСервере
Функция ДобавитьНоменклатуруВДокумент(СтруктураНоменклатуры)
	
	ВерхняяНоменклатура		= СтруктураНоменклатуры.Номенклатура;	
	НайденнаяНоменклатура	= Новый Структура;	
	
	Если ТипЗНЧ(ВерхняяНоменклатура) = Тип("СправочникСсылка.Номенклатура") 
		И ВерхняяНоменклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры = Истина	Тогда
		НайденнаяНоменклатура.Вставить("НуженВыводДерева", Ложь);
		НайденнаяНоменклатура.Вставить("СообщениеПользователю", 
			СтрШаблон(НСтр("ru = 'Для номенклатуры ""%1"" в ее виде указано ""Вести учет по карточкам"". 
			| Используйте штрихкод из карточки номенклатуры.'"),
			ВерхняяНоменклатура));
		Возврат НайденнаяНоменклатура;
	КонецЕсли;
	
	ПериодДляЗапроса	= ?(Объект.Ссылка.Пустая(), ТекущаяДатаСеанса(), Объект.Дата);
	СтруктураКоличество = ПолучитьОстаткиПоНоменклатуре(ВерхняяНоменклатура, ПериодДляЗапроса);
	
	// Нет на остатках.
	Если СтруктураКоличество = Неопределено Тогда		
		СтруктураКоличество = Новый Структура;		
		СтруктураКоличество.Вставить("Комплект", 		
			ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
			
		СтруктураКоличество.Вставить("Партия", 			
			ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
			
		СтруктураКоличество.Вставить("Номенклатура", 	ВерхняяНоменклатура);
		СтруктураКоличество.Вставить("Количество", 		0);
		СтруктураКоличество.Вставить("Сумма", 			0);
	КонецЕсли;	
	
	НайденнаяНоменклатура.Вставить("НоменклатураШК",	 		ВерхняяНоменклатура);		
	НайденнаяНоменклатура.Вставить("Партия", 					СтруктураКоличество.Партия);
	НайденнаяНоменклатура.Вставить("ПартияСоСклада",			СтруктураКоличество.Партия);
	НайденнаяНоменклатура.Вставить("Комплект", 					СтруктураКоличество.Комплект);				
	
	// Это "свернутый" комплект.
	Если ЗначениеЗаполнено(НайденнаяНоменклатура.Комплект) Тогда			
		
		ОстаткиПоКомплекту = ПолучитьОстаткиПоНоменклатуре(СтруктураКоличество.Комплект,ПериодДляЗапроса);
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Истина);
		НайденнаяНоменклатура.Вставить("Номенклатура",			СтруктураКоличество.Комплект.Владелец);
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	СтруктураКоличество.Комплект);
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		СтруктураКоличество.Комплект.Владелец.ЕдиницаИзмерения);
		НайденнаяНоменклатура.Вставить("Количество",			ОстаткиПоКомплекту.Количество);
		НайденнаяНоменклатура.Вставить("Сумма",					ОстаткиПоКомплекту.Сумма);			
		НайденнаяНоменклатура.Вставить("Партия", 				ОстаткиПоКомплекту.Партия);
		НайденнаяНоменклатура.Вставить("ПартияСоСклада", 		ОстаткиПоКомплекту.Партия);
		НайденнаяНоменклатура.Вставить("Комплект", 				ОстаткиПоКомплекту.Комплект);
		СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура);
		НайденнаяНоменклатура.Вставить("НуженВыводДерева",		Истина);
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Истина);			
		
		Возврат НайденнаяНоменклатура;
		
	КонецЕсли;		
	
	// Подчиненная номенклатура.
	Если ЗначениеЗаполнено(НайденнаяНоменклатура.Партия) Тогда			
		
		НоменклатураВерхнегоУровня = ПолучитьВерхнююНоменклатуруПоКомплектующей(НайденнаяНоменклатура.Партия,
			ПериодДляЗапроса);
			
		ОстаткиПоКомплекту = ПолучитьОстаткиПоНоменклатуре(НоменклатураВерхнегоУровня,ПериодДляЗапроса);
		Если ТипЗНЧ(НоменклатураВерхнегоУровня)= Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
			НайденнаяНоменклатура.Вставить("Номенклатура",			НоменклатураВерхнегоУровня.Владелец);
			НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	НоменклатураВерхнегоУровня);
			НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		НоменклатураВерхнегоУровня.Владелец.ЕдиницаИзмерения);
		Иначе
			НайденнаяНоменклатура.Вставить("Номенклатура",			НоменклатураВерхнегоУровня);				
			НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",
			УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(НоменклатураВерхнегоУровня));
			НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		НоменклатураВерхнегоУровня.ЕдиницаИзмерения);
		КонецЕсли;
		
		НайденнаяНоменклатура.Вставить("Количество",				ОстаткиПоКомплекту.Количество);
		НайденнаяНоменклатура.Вставить("Сумма",						ОстаткиПоКомплекту.Сумма);
		НайденнаяНоменклатура.Вставить("Партия", 					ОстаткиПоКомплекту.Партия);
		НайденнаяНоменклатура.Вставить("ПартияСоСклада", 			ОстаткиПоКомплекту.Партия);
		НайденнаяНоменклатура.Вставить("Комплект", 					ОстаткиПоКомплекту.Комплект);
		СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура);
		
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Ложь);
		НайденнаяНоменклатура.Вставить("НуженВыводДерева",Истина);
		ЗаполнитьПодчиненнуюНоменклатуру(ПериодДляЗапроса,НоменклатураВерхнегоУровня);
		
		Возврат НайденнаяНоменклатура;
		
	КонецЕсли;
	
	Если Не ВерхняяНоменклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
		НайденнаяНоменклатура.Вставить("Номенклатура",			ВерхняяНоменклатура);			
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",
		УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(ВерхняяНоменклатура));
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		ВерхняяНоменклатура.ЕдиницаИзмерения);
	Иначе	
		НайденнаяНоменклатура.Вставить("Номенклатура",			ВерхняяНоменклатура.Владелец);
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	ВерхняяНоменклатура);
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		ВерхняяНоменклатура.Владелец.ЕдиницаИзмерения);
	КонецЕсли;
	
	НайденнаяНоменклатура.Вставить("Количество", 	СтруктураКоличество.Количество);				
	НайденнаяНоменклатура.Вставить("Сумма",	 		СтруктураКоличество.Сумма);
	
	СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура);
	НайденнаяНоменклатура.Вставить("НуженВыводДерева",Истина);
	
	ЗаполнитьПодчиненнуюНоменклатуру(ПериодДляЗапроса, ?(ЗначениеЗаполнено(НайденнаяНоменклатура.КарточкаНоменклатуры), 
		НайденнаяНоменклатура.КарточкаНоменклатуры,	НайденнаяНоменклатура.Номенклатура));
	
	Возврат НайденнаяНоменклатура;	
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыводДереваНоменклатуры(МассивНоменклатуры)
	
	Для Каждого СтруктураВозврата Из МассивНоменклатуры Цикл
		СтруктураНоменклатуры = СтруктураВозврата;
		Если СтруктураНоменклатуры.Свойство("НуженВыводДерева") И СтруктураНоменклатуры.Свойство("СвернутыйКомплект") Тогда
			Если СтруктураНоменклатуры.НуженВыводДерева И СтруктураНоменклатуры.СвернутыйКомплект Тогда 					
				ВывестиДеревоНоменклатуры();		
				ИдентификаторСтроки = 0;					
				
				Если ЗначениеЗаполнено(СтруктураНоменклатуры.КарточкаНоменклатуры) Тогда
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
					ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.КарточкаНоменклатуры, Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Номенклатура ""%1"" является частью комплекта ""%2"". Комплект был добавлен в документ.'"),
						СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура));
				Иначе
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
					ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), СтруктураНоменклатуры.Номенклатура, Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Номенклатура ""%1"" является частью комплекта ""%2"". Комплект был добавлен в документ.'"),
						СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура));
						
				КонецЕсли;
					
			ИначеЕсли СтруктураНоменклатуры.НуженВыводДерева И (Не СтруктураНоменклатуры.СвернутыйКомплект) Тогда					
				ВывестиДеревоНоменклатуры();		
				ИдентификаторСтроки = 0;
				
				Если ЗначениеЗаполнено(СтруктураНоменклатуры.КарточкаНоменклатуры) Тогда
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
					ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.КарточкаНоменклатуры,Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Номенклатура ""%1"" является частью комплекта ""%2"". 
						|Комплект и все его комплектующие были добавлены в документ.'"),
						СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура));
				Иначе
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
					ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), СтруктураНоменклатуры.Номенклатура, Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Номенклатура ""%1"" является частью комплекта ""%2"". 
						|Комплект и все его комплектующие были добавлены в документ.'"),
						СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура));
				КонецЕсли;
					
			КонецЕсли;	
			
		ИначеЕсли СтруктураНоменклатуры.Свойство("НуженВыводДерева") И СтруктураНоменклатуры.НуженВыводДерева Тогда 
				ВывестиДеревоНоменклатуры();		
				ИдентификаторСтроки = 0;					
				
				Если ЗначениеЗаполнено(СтруктураНоменклатуры.КарточкаНоменклатуры) Тогда
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
					ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), СтруктураНоменклатуры.КарточкаНоменклатуры, Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;									
				Иначе
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
					ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), СтруктураНоменклатуры.Номенклатура, Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;
				КонецЕсли;
				
		ИначеЕсли СтруктураНоменклатуры.Свойство("СообщениеПользователю") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтруктураНоменклатуры.СообщениеПользователю);				
		КонецЕсли;
					 	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОстаткиПоНоменклатуре(ВерхняяНоменклатура, ПериодДляЗапроса)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", ПериодДляЗапроса);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомплектацияОстатки.Комплект,
		|	КомплектацияОстатки.Партия КАК Партия,
		|	КомплектацияОстатки.Номенклатура КАК Номенклатура,
		|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
		|	ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток,0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.Комплектация.Остатки(
		|			&Период,
		|			ВЫБОР
		|					КОГДА ТИПЗНАЧЕНИЯ(Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|				И Номенклатура = &Номенклатура) КАК КомплектацияОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.КоличествоОстаток,
		|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток,0)
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Номенклатура = &Номенклатура) КАК ОстаткиОстатки";
		
	Запрос.УстановитьПараметр("Номенклатура", ВерхняяНоменклатура);
	Выборка			  = Запрос.Выполнить().Выбрать();	
	СтруктураВозврата = Неопределено;
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Комплект", 		Выборка.Комплект);
		СтруктураВозврата.Вставить("Партия", 		Выборка.Партия);
		СтруктураВозврата.Вставить("Номенклатура", 	Выборка.Номенклатура);
		СтруктураВозврата.Вставить("Количество", 	Выборка.Количество);
		СтруктураВозврата.Вставить("Сумма", 		Выборка.Сумма);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура)
	
	Если НайденнаяНоменклатура.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
		МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура, Партия, КарточкаНоменклатуры",
			НайденнаяНоменклатура.Номенклатура,
			НайденнаяНоменклатура.Партия,
			НайденнаяНоменклатура.КарточкаНоменклатуры));
	Иначе
		МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура, Партия",
			НайденнаяНоменклатура.Номенклатура, НайденнаяНоменклатура.Партия));
	КонецЕсли;
	
	Если МассивСтрокТЧ.Количество() = 0 Тогда
		НоваяСтрока					= Объект.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяНоменклатура);
		НоваяСтрока.Количество		= НайденнаяНоменклатура.Количество;
		НоваяСтрока.ПартияСоСклада	= НоваяСтрока.Партия;
	Иначе		
		НайденнаяСтрока				= МассивСтрокТЧ[0];
		НайденнаяСтрока.Количество	= НайденнаяСтрока.Количество + НайденнаяНоменклатура.Количество;
		НоваяСтрока.ПартияСоСклада	= НоваяСтрока.Партия;
	КонецЕсли;
	
КонецПроцедуры

// Получает номенклатуру самого верхнего уровня в комплекте
//
&НаСервере
Функция ПолучитьВерхнююНоменклатуруПоКомплектующей(Комплектующая, Период)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиОстатки.Партия
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Номенклатура = &Номенклатура) КАК ОстаткиОстатки";
	
	Запрос.УстановитьПараметр("Номенклатура", Комплектующая);
	Запрос.УстановитьПараметр("Период"		, Период);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Партия) Тогда			
			Возврат ПолучитьВерхнююНоменклатуруПоКомплектующей(ВыборкаДетальныеЗаписи.Партия, Период);
		Иначе 
			Возврат Комплектующая;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПодчиненнуюНоменклатуру(Период, НоменклатураВладелец)	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомплектацияОстатки.Комплект,
		|	КомплектацияОстатки.Партия КАК Партия,
		|	КомплектацияОстатки.Номенклатура КАК Номенклатура,
		|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
		|	ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.Комплектация.Остатки(&Период, Комплект = &Партия) КАК КомплектацияОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.КоличествоОстаток,
		|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0)
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Партия = &Партия) КАК ОстаткиОстатки";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Партия", НоменклатураВладелец);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Комплект) Тогда Возврат Неопределено КонецЕсли;
		
		Если ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
			
			Номенклатура			= Выборка.Номенклатура.Владелец;
			КарточкаНоменклатуры	= Выборка.Номенклатура;
			
		Иначе
			
			Номенклатура			= Выборка.Номенклатура;
			КарточкаНоменклатуры	= 
				УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Выборка.Номенклатура);
			
		КонецЕсли;
		
		ПодчиненнаяНоменклатура = Новый Структура;
		ПодчиненнаяНоменклатура.Вставить("Номенклатура",		Номенклатура);		
		ПодчиненнаяНоменклатура.Вставить("Партия", 				НоменклатураВладелец);		
		ПодчиненнаяНоменклатура.Вставить("КарточкаНоменклатуры",КарточкаНоменклатуры);
		ПодчиненнаяНоменклатура.Вставить("Комплект",			?(НоменклатураВладелец = Номенклатура,
			Справочники.КарточкиНоменклатуры.ПустаяСсылка(), НоменклатураВладелец));
			
		ПодчиненнаяНоменклатура.Вставить("Сумма",				Выборка.Сумма);
		ПодчиненнаяНоменклатура.Вставить("ЕдиницаИзмерения", 	Номенклатура.ЕдиницаИзмерения);
		
		МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура, Партия, КарточкаНоменклатуры",
			ПодчиненнаяНоменклатура.Номенклатура, ПодчиненнаяНоменклатура.Партия, 
			ПодчиненнаяНоменклатура.КарточкаНоменклатуры));
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока					= Объект.Номенклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ПодчиненнаяНоменклатура);
			НоваяСтрока.Количество		= Выборка.Количество;
			НоваяСтрока.ПартияСоСклада	= Выборка.Партия;
			
		Иначе
			НайденнаяСтрока				= МассивСтрокТЧ[0];
			НайденнаяСтрока.Количество	= НайденнаяСтрока.Количество + Выборка.Количество;						
		КонецЕсли;
		ЗаполнитьПодчиненнуюНоменклатуру(Период, ПодчиненнаяНоменклатура.КарточкаНоменклатуры);		
	КонецЦикла;
	
КонецФункции

#Область УчетОстатковКонтрагентов

&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
			
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикНачалоВыбора(ЭтаФорма, Объект.Организация, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикАвтоПодбор(ЭтаФорма, 
				"Организация",
				Текст, 
				ДанныеВыбора,
				Ожидание,
				СтандартнаяОбработка);
				
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Очистка(Элемент, СтандартнаяОбработка)	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбора(ЭтаФорма, 
				"Организация", 
				Объект.Организация,
				Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект),
				ВыбранноеЗначение,
				СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	ОрганизацияПриИзменении(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти