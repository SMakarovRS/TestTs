
Процедура ЗаполнитьСписокЗанятостей(Проекты = Неопределено) Экспорт
	
	СписокЗанятостейЗакрытые.Очистить();
	СписокЗанятостейНезакрытые.Очистить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	дЗадание.Ссылка КАК Задача,
	|	дЗадание.ПоСогласованию КАК ПоСогласованию,
	|	РС_Занятость.Ссылка КАК Занятость,
	|	РС_Занятость.Распределять КАК Распределять,
	|	РС_РаботыОстатки.ФактическоеВремяОстаток КАК ФактическоеВремя,
	|	РС_РаботыОстатки.ВремяКлиентаОстаток КАК ВремяКлиента,
	|	дЗадание.СогласованоЧасов КАК ВремяСогласовано,
	|	0 КАК КОплате,
	|	РС_Занятость.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	РегистрНакопления.РС_Работы.Остатки КАК РС_РаботыОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РС_Занятость КАК РС_Занятость
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание КАК дЗадание
	|			ПО РС_Занятость.Задание = дЗадание.Ссылка
	|				И (дЗадание.Клиент = &Клиент)
	|				И (&Условие)
	|				И (КОНЕЦПЕРИОДА(РС_Занятость.ДатаОкончания, ДЕНЬ) <= &Период)
	|				И (дЗадание.ТекущийЭтап.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Закрыт))
	|				И (КОНЕЦПЕРИОДА(дЗадание.ДатаВыполнения, ДЕНЬ) <= &Период)
	|		ПО РС_РаботыОстатки.Занятость = РС_Занятость.Ссылка
	|			И (РС_РаботыОстатки.ФактическоеВремяОстаток <> 0
	|				ИЛИ РС_РаботыОстатки.ВремяКлиентаОстаток <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала
	|ИТОГИ
	|	МАКСИМУМ(ПоСогласованию),
	|	СУММА(ФактическоеВремя),
	|	СУММА(ВремяКлиента),
	|	МАКСИМУМ(ВремяСогласовано)
	|ПО
	|	Задача,
	|	Занятость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	дЗадание.Ссылка КАК Задача,
	|	дЗадание.ПоСогласованию КАК ПоСогласованию,
	|	РС_Занятость.Ссылка КАК Занятость,
	|	РС_Занятость.Распределять КАК Распределять,
	|	РС_РаботыОстатки.ФактическоеВремяОстаток КАК ФактическоеВремя,
	|	РС_РаботыОстатки.ВремяКлиентаОстаток КАК ВремяКлиента,
	|	РС_РаботыОстатки.ВремяКлиентаОстаток КАК ВремяСогласовано,
	|	0 КАК КОплате,
	|	РС_Занятость.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	РегистрНакопления.РС_Работы.Остатки КАК РС_РаботыОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РС_Занятость КАК РС_Занятость
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание КАК дЗадание
	|			ПО РС_Занятость.Задание = дЗадание.Ссылка
	|				И (дЗадание.Клиент = &Клиент)
	|				И (&Условие)
	|				И (КОНЕЦПЕРИОДА(РС_Занятость.ДатаОкончания, ДЕНЬ) <= &Период)
	|				И (дЗадание.ТекущийЭтап.СостояниеЭтапа <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Закрыт))
	|		ПО РС_РаботыОстатки.Занятость = РС_Занятость.Ссылка
	|			И (РС_РаботыОстатки.ФактическоеВремяОстаток <> 0
	|				ИЛИ РС_РаботыОстатки.ВремяКлиентаОстаток <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала
	|ИТОГИ
	|	МАКСИМУМ(ПоСогласованию),
	|	СУММА(ФактическоеВремя),
	|	СУММА(ВремяКлиента),
	|	МАКСИМУМ(ВремяСогласовано)
	|ПО
	|	Задача,
	|	Занятость";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", ?(ЗначениеЗаполнено(Проекты), "дЗадание.Проект В (&Проект)", "ИСТИНА"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Период", КонецДня(Период));
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Проект", Проекты);
	
	Если Проведен Тогда
		НачатьТранзакцию();
		Движения.РС_Работы.Записать();
	КонецЕсли;
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	СтрОбхода = Новый Структура("СписокЗанятостейЗакрытые,СписокЗанятостейНезакрытые", 0, 1);
	
	Для Каждого КлючИЗначение Из СтрОбхода Цикл
		ТаблицаЗаполнить = КлючИЗначение.Ключ;
		ВыборкаЗадачи = Результаты.Получить(КлючИЗначение.Значение).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗадачи.Следующий() Цикл
			ВсегоРаспред = 0;
			ПоСогласованию = ВыборкаЗадачи.ПоСогласованию;
			Если ПоСогласованию Тогда
				ОсталосьРаспределить = ВыборкаЗадачи.ВремяСогласовано;    
				ВыборкаЗанятостиВрем = ВыборкаЗадачи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);  //++
				Пока ВыборкаЗанятостиВрем.Следующий() цикл
					Если ВыборкаЗанятостиВрем.Распределять тогда
						ВсегоРаспред = ВсегоРаспред + ВыборкаЗанятостиВрем.ФактическоеВремя;	
						КонецЕсли;	
					КонецЦикла;
				ФактичДляКф =?(ВсегоРаспред = 0, ВыборкаЗадачи.ФактическоеВремя, ВыборкаЗадачи.ФактическоеВремя - ВсегоРаспред);  //--
				КфПересчета = ВыборкаЗадачи.ВремяСогласовано / ?(ФактичДляКф = 0, 1, ФактичДляКф);
			КонецЕсли;
			ВыборкаЗанятости = ВыборкаЗадачи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			РаспределяемоеВремя = 0;                        //++
			ЕстьРаспределяемые = Ложь;                   	//++
			НачНомерЗанятости = 0;                          //++
			КонНомерЗанятости = 0;                          //++
			ПервыйПроход=Истина;                            //++
			Пока ВыборкаЗанятости.Следующий() Цикл
													
				НоваяСтрока = ЭтотОбъект[ТаблицаЗаполнить].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗанятости);
				Если НачНомерЗанятости = 0 И ПервыйПроход тогда
					НачНомерЗанятости = НоваяСтрока.НомерСтроки-1;
					ПервыйПроход = Ложь;
				КонецЕсли;
				
				Если ВыборкаЗанятости.Распределять тогда    //++ Горохов И. 30.04.21
					РаспределяемоеВремя = РаспределяемоеВремя + ВыборкаЗанятости.ФактическоеВремя;
					ЕстьРаспределяемые = Истина;
					Продолжить;
				КонецЕсли;                                  //--
				
				Распределить = ?(ПоСогласованию, Мин(НоваяСтрока.ФактическоеВремя * КфПересчета, ОсталосьРаспределить), НоваяСтрока.ВремяКлиента);
				
 				НоваяСтрока.КОплате = Распределить;
				
				Если ПоСогласованию Тогда
					ОсталосьРаспределить = ?(ОсталосьРаспределить < НоваяСтрока.КОплате, 0, ОсталосьРаспределить - НоваяСтрока.КОплате);
				КонецЕсли;
			КонецЦикла;
			Если ЕстьРаспределяемые тогда  			//++ Горохов И. 30.04.21
				Если ПоСогласованию тогда
					ОсталосьРаспр = ВыборкаЗадачи.ВремяСогласовано;	
					Кф = ВыборкаЗадачи.ВремяСогласовано / ?(ВыборкаЗадачи.ФактическоеВремя = 0, 1, ВыборкаЗадачи.ФактическоеВремя);	
				Иначе
					ОсталосьРаспр = РаспределяемоеВремя;
					РазнВрем = ВыборкаЗадачи.ФактическоеВремя - РаспределяемоеВремя;
					Если РазнВрем = 0 тогда
						РазнВрем =1;	
					КонецЕсли;
					Кф = РаспределяемоеВремя / ?(ВыборкаЗадачи.ФактическоеВремя = 0, 1, РазнВрем);
				КонецЕсли;
				КонНомерЗанятости = НачНомерЗанятости + ВыборкаЗанятости.Количество();           
				Для Счетчик = НачНомерЗанятости по КонНомерЗанятости-1 цикл
					Строка = ЭтотОбъект[ТаблицаЗаполнить].Получить(Счетчик);
					
					Если Строка.Занятость.Распределять тогда
						Строка.КОплате = 0 ;
						Продолжить;
					Иначе
						Если ПоСогласованию тогда
							Продолжить;
						КонецЕсли;
						ВремяКЗанятости = Мин(Строка.ФактическоеВремя * Кф, ОсталосьРаспр);
						Строка.КОплате = Строка.КОплате + ВремяКЗанятости;
						ОсталосьРаспр = ?(ОсталосьРаспр < ВремяКЗанятости, 0, ОсталосьРаспр - ВремяКЗанятости);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;                     			//--		
		КонецЦикла;
	КонецЦикла;
	
	ОбработатьСписокПроектов(Проекты);              //++ Горохов И. 28.05.21 Задача №3196
	
КонецПроцедуры

Процедура ОбработатьСписокПроектов(Проекты = Неопределено) Экспорт      //++ Горохов И. 28.05.21 Задача №3196
	Если НЕ Проекты = Неопределено тогда                
		ТабЧПроекты.Очистить();
		ПредставлениеПроектов = "";
		Если ТипЗнч(Проекты) = Тип("Массив") тогда
			Для каждого Элем из Проекты цикл
				СтрТаб = ТабЧПроекты.Добавить();
				СтрТаб.Проект = Элем.Ссылка;
				ПредставлениеПроектов = ПредставлениеПроектов + Элем.Наименование+"; ";	
			КонецЦикла;
		Иначе
			 Для каждого Элем из Проекты цикл
				СтрТаб = ТабЧПроекты.Добавить();
				СтрТаб.Проект = Элем.Значение;
				ПредставлениеПроектов = ПредставлениеПроектов + Элем.Значение.Наименование+"; ";	
			КонецЦикла;
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(Проект) тогда
		СтрТаб = ТабЧПроекты.Добавить();
		СтрТаб.Проект = Проект;
		ПредставлениеПроектов = Проект.Наименование;
		Проект = Справочники.Проекты.ПустаяСсылка();
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);	
	КонецЕсли;
	
КонецПроцедуры                                                     		//-- Конец задачи №3196

Процедура ДвиженияРС_Работы(Отказ)
	//++ Карпов Я. 14.05.2021
	Движения.РС_Работы.Очистить();
	Движения.РС_Работы.Записывать = Истина;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СписокЗанятостейЗакрытые.Занятость КАК Занятость,
	|	СписокЗанятостейЗакрытые.КОплате КАК КОплате
	|ПОМЕСТИТЬ ВтСписокЗанятостей
	|ИЗ
	|	&СписокЗанятостейЗакрытые КАК СписокЗанятостейЗакрытые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исполнители.Исполнитель КАК Исполнитель,
	|	Исполнители.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВтИсполнители
	|ИЗ
	|	&Исполнители КАК Исполнители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ВидДвиженияРасход КАК ВидДвижения,
	|	ВтСписокЗанятостей.Занятость КАК Занятость,
	|	РС_Занятость.ФактическаяТрудоемкость КАК ФактическоеВремя,
	|	РС_Занятость.ВремяКлиента КАК ВремяКлиента,
	|	0 КАК КОплате,
	|	ЗНАЧЕНИЕ(справочник.Подразделения.ПустаяСсылка) КАК Подразделение
	|ИЗ
	|	ВтСписокЗанятостей КАК ВтСписокЗанятостей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РС_Занятость КАК РС_Занятость
	|		ПО ВтСписокЗанятостей.Занятость = РС_Занятость.Ссылка
	|ГДЕ
	|	(РС_Занятость.ФактическаяТрудоемкость <> 0
	|			ИЛИ РС_Занятость.ВремяКлиента <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&ВидДвиженияПриход,
	|	ВтСписокЗанятостей.Занятость,
	|	0,
	|	0,
	|	ВтСписокЗанятостей.КОплате,
	|	ВтИсполнители.Подразделение
	|ИЗ
	|	ВтСписокЗанятостей КАК ВтСписокЗанятостей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИсполнители КАК ВтИсполнители
	|		ПО (ВтСписокЗанятостей.Занятость.Исполнитель = ВтИсполнители.Исполнитель)
	|ГДЕ
	|	ВтСписокЗанятостей.КОплате <> 0 и &НачислятьОплату
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&ВидДвиженияРасход,
	|	ВтСписокЗанятостей.Занятость,
	|	0,
	|	0,
	|	ВтСписокЗанятостей.КОплате,
	|	ВтИсполнители.Подразделение
	|ИЗ
	|	ВтСписокЗанятостей КАК ВтСписокЗанятостей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИсполнители КАК ВтИсполнители
	|		ПО (ВтСписокЗанятостей.Занятость.Исполнитель = ВтИсполнители.Исполнитель)
	|ГДЕ
	|	ВтСписокЗанятостей.КОплате <> 0 и &НачислятьОплату  и &ЗакрыватьНачисление
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокЗанятостейЗакрытые", СписокЗанятостейЗакрытые.Выгрузить());
	Запрос.УстановитьПараметр("Исполнители", Исполнители.Выгрузить());
	Запрос.УстановитьПараметр("Период", КонецДня(Период));
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("НачислятьОплату", СтатусОтчета.НачислятьОплату);
	Запрос.УстановитьПараметр("ЗакрыватьНачисление", СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.Оплачен);
		
	Движения.РС_Работы.Загрузить(Запрос.Выполнить().Выгрузить());
	Движения.РС_Работы.Записать();
	
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РС_РаботыОстатки.Занятость КАК Занятость
	               |ИЗ
	               |	РегистрНакопления.РС_Работы.Остатки КАК РС_РаботыОстатки
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокЗанятостей КАК ВтСписокЗанятостей
				   |		ПО ВтСписокЗанятостей.Занятость = РС_РаботыОстатки.Занятость
	               |ГДЕ
	               |	РС_РаботыОстатки.ФактическоеВремяОстаток <> 0
	               |	И РС_РаботыОстатки.ВремяКлиентаОстаток <> 0";
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выборка= Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить("В результате проведения документа сформировались неверные остатки в регистре РС_Работы по занятости:"+Выборка.Занятость);
		КонецЦикла;
		Отказ= ИСТИНА;
	КонецЕсли;
	

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДвиженияРС_Оплаты(Отказ)

	
	
	//Движение по регистру оплат
	Движения.РС_Оплаты.Очистить();
	Движения.РС_Оплаты.Записывать = Истина;
	Если СуммаОплаты>0 Тогда
		ТекстЗапроса =  "ВЫБРАТЬ
		                |	Исполнители.Подразделение КАК Подразделение,
		                |	Исполнители.Исполнитель КАК Исполнитель
		                |ПОМЕСТИТЬ ВтИсполнители
		                |ИЗ
		                |	&Исполнители КАК Исполнители
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	Занятости.Занятость КАК Занятость,
		                |	Занятости.КОплате КАК КОплате,
		                |	&СуммаОплаты / &СуммаЧасов КАК СтоимостьЧаса,
		                |	Занятости.КОплате * &СуммаОплаты / &СуммаЧасов КАК Сумма,
		                |	&Период КАК Период
		                |ПОМЕСТИТЬ ВтЗанятости
		                |ИЗ
		                |	&Занятости КАК Занятости
		                |ГДЕ
		                |	Занятости.КОплате > 0
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	ВтЗанятости.Занятость КАК Занятость,
		                |	ВтЗанятости.Сумма КАК Сумма,
						|	ВтЗанятости.КОплате КАК Часы,
		                |	ВтЗанятости.Период КАК Период,
		                |	ВтИсполнители.Подразделение КАК Подразделение,
		                |	&ОтчетКлиенту КАК ОтчетКлиенту,
		                |	&ВидДвиженияПриход КАК ВидДвижения
		                |ИЗ
		                |	ВтЗанятости КАК ВтЗанятости
		                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИсполнители КАК ВтИсполнители
		                |		ПО ВтЗанятости.Занятость.Исполнитель = ВтИсполнители.Исполнитель
		                |
		                |ОБЪЕДИНИТЬ ВСЕ
		                |
		                |ВЫБРАТЬ
		                |	ВтЗанятости.Занятость,
		                |	ВтЗанятости.Сумма,
						|	ВтЗанятости.КОплате КАК Часы,
		                |	ВтЗанятости.Период,
		                |	ВтИсполнители.Подразделение,
		                |	&ОтчетКлиенту,
		                |	&ВидДвиженияРасход
		                |ИЗ
		                |	ВтЗанятости КАК ВтЗанятости
		                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИсполнители КАК ВтИсполнители
		                |		ПО ВтЗанятости.Занятость.Исполнитель = ВтИсполнители.Исполнитель
		                |ГДЕ
		                |	&Начислен";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Занятости", СписокЗанятостейЗакрытые.Выгрузить());
		Запрос.УстановитьПараметр("СуммаОплаты", СуммаОплаты);
		Запрос.УстановитьПараметр("СуммаЧасов", СписокЗанятостейЗакрытые.Итог("КОплате"));
		Запрос.УстановитьПараметр("Исполнители", Исполнители.Выгрузить());
		Запрос.УстановитьПараметр("Период", КонецДня(Период));
		Запрос.УстановитьПараметр("ОтчетКлиенту", ссылка);
		Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("Начислен", Начислен);
		Движения.РС_Оплаты.Загрузить(Запрос.Выполнить().Выгрузить());
		Движения.РС_Оплаты.Записать();
	КонецЕсли;
		//----- 	

КонецПроцедуры // ДвижениеРС_Оплаты()



Процедура ПриКопировании(ОбъектКопирования)
	
	Период = КонецМесяца(ТекущаяДата());
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Период = КонецМесяца(ТекущаяДата());
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ДвиженияРС_Работы(Отказ);
	ДвиженияРС_Оплаты(Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СписокЗанятостейЗакрытые.Свернуть("Занятость", "ФактическоеВремя,ВремяКлиента,КОплате");
	СписокЗанятостейНезакрытые.Свернуть("Занятость", "ФактическоеВремя,ВремяКлиента,КОплате");
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.ВыставленСчет И Не ЗначениеЗаполнено(НомерСчета) Тогда
		ОбщегоНазначения.СообщитьПользователю("Трубется указать номер счета!", Ссылка,,, Отказ);
	КонецЕсли;
	
	Если СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.Оплачен И Не (ЗначениеЗаполнено(НомерАкта) И ЗначениеЗаполнено(НомерСчета)) Тогда
		ОбщегоНазначения.СообщитьПользователю("Трубется указать номер акта и счета!", Ссылка,,, Отказ);
	КонецЕсли;
	
	Если СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.НеТребуется И Не (ЗначениеЗаполнено(Комментарий)) Тогда
		ОбщегоНазначения.СообщитьПользователю("Для статуса ""Не требуется"" необходимо заполнить причину", Ссылка,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры




