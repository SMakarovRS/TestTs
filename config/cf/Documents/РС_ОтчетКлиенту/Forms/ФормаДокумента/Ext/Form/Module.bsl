
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбновитьДеревоЗначений();
	ОбновитьИтоги();
	
	//+РС Консалт Макаров Сергей 9 февраля 2021 г. 10:48:51 
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Автор = Пользователи.ТекущийПользователь();
		Объект.СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.ВРаботе;
		Объект.Период = СтроковыеФункцииКлиентСервер.СтрокаВДату(НачалоМесяца(ТекущаяДата())-1, "ДЛФ=D");		//++РС Консалт 22.02.2022 Горохов И Задача №14792
	КонецЕсли;
		
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//++
	ПрочитатьПроекты();
	//ЗаполнитьДатыАктаСчета();
	ОбновитьВидимость();
	ОбновитьСписокИсполнителей();
	//--
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПроекты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РС_ОтчетКлиентуТабЧПроекты.Проект КАК Проект
	|ИЗ
	|	Документ.РС_ОтчетКлиенту.ТабЧПроекты КАК РС_ОтчетКлиентуТабЧПроекты
	|ГДЕ
	|	РС_ОтчетКлиентуТабЧПроекты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Если ЗначениеЗаполнено(Объект.Проект) тогда
		Стр = РезультатЗапроса.Вставить(0);
		Стр.Проект = Объект.Проект;
	КонецЕсли;
	ЭтаФорма.Проекты.Очистить();
	
	ВыгрузкаПроектов = ПолучитьПроекты();
	
	Если НЕ ВыгрузкаПроектов = Неопределено тогда
		ВсеПроекты = ВыгрузкаПроектов.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ЭтаФорма.Проекты.Загрузить(ВсеПроекты);
		Для каждого Проект из Проекты цикл
			Если НЕ РезультатЗапроса.Найти(Проект.Наименование, "Проект") = Неопределено тогда
				Проект.Выбор = Истина;	
			КонецЕсли;
		КонецЦикла;
		
		Док = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.РС_ОтчетКлиенту"));
		Док.ОбработатьСписокПроектов();
		Период1 = Объект.Период;
		ЭтотОбъект.Прочитать();
		Период2 = Объект.Период;
		Если Период1 <> Период2 тогда
		Объект.Период = Период1;
		ЭтотОБъект.Модифицированность = истина;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбновитьСписокЗанятостей();
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ЗадатьВопрос(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СписокЗанятостейЗакрытые.Количество() Или Объект.СписокЗанятостейНезакрытые.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопрос", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Табличные части будут очищены", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПослеОтветаНаВопрос(КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсполнителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма);
	
	ПоказатьВводЗначения(ОписаниеОповещения, Неопределено, "Выберите исполнителя к удалению", Тип("СправочникСсылка.Пользователи"));
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура СтатусОтчетаПриИзменении(Элемент)
	
	ОбновитьВидимость();
	//++ Горохов И. 03.06.21 Задача №4766
	ЗаполнитьДатыАктаСчета();
	//-- КонецЗадачи №4766
		
КонецПроцедуры

#КонецОбласти
//++ Горохов И. 03.06.21 Задача №4766
Процедура ЗаполнитьДатыАктаСчета()
 	Если Объект.СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.ВыставленСчет ИЛИ Объект.СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.Оплачен ИЛИ Объект.СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.НайтиПоКоду("000000010") тогда
		Объект.ДатаСчета = ?(Объект.ДатаСчета = Дата(1,1,1), Объект.Период, Объект.ДатаСчета);
		Объект.ДатаАкта = ?(Объект.ДатаАкта = Дата(1,1,1), Объект.Период, Объект.ДатаАкта);
		Элементы.НомерАкта.Видимость = Истина;
		Элементы.НомерСчета.Видимость = Истина;
		Элементы.ДатаСчета.Видимость = Истина;
		Элементы.ДатаАкта.Видимость = Истина;
		Элементы.ЗаполнитьРеквизиты.Видимость = Истина;
	Иначе
		Элементы.ДатаСчета.Видимость = Ложь;
		Элементы.ДатаАкта.Видимость = Ложь;
		Элементы.НомерАкта.Видимость = Ложь;
		Элементы.НомерСчета.Видимость = Ложь;
		Элементы.ЗаполнитьРеквизиты.Видимость = Ложь;
		Объект.ДатаСчета = Дата(1,1,1);
		Объект.ДатаАкта = Дата(1,1,1);
		Объект.НомерАкта = "";
		Объект.НомерСчета = "";
	КонецЕсли;
		
КонецПроцедуры
//-- КонецЗадачи №4766

#Область СобытияТаблицыЗакрытые

&НаКлиенте
Процедура СписокЗанятостейПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СписокЗанятостей.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры

&НаКлиенте
Процедура СписокЗанятостейПриАктивизацииЯчейки(Элемент)
	
	УправлениеЭлементамиТаблиц(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СписокЗанятостейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗанятостейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСписокИсполнителей();
	ОбновитьИтоги();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗанятостейПослеУдаления(Элемент)
	
	ОбработатьРекурсивно(СписокЗанятостейЗакрытые);
	ОбновитьВремяРекурсивно(СписокЗанятостейЗакрытые);
	ОбновитьСписокИсполнителей();
	ОбновитьИтоги();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗанятостейВремяКОплатеПриИзменении(Элемент)
	
	ОбновитьВремяРекурсивно(СписокЗанятостейЗакрытые);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияТаблицыНезакрытые

&НаКлиенте
Процедура СписокНезакрытыхЗанятостейПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СписокНезакрытыхЗанятостей.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНезакрытыхЗанятостейПриАктивизацииЯчейки(Элемент)
	
	УправлениеЭлементамиТаблиц(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНезакрытыхЗанятостейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНезакрытыхЗанятостейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСписокИсполнителей();
	ОбновитьИтоги();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНезакрытыхЗанятостейПослеУдаления(Элемент)
	
	ОбработатьРекурсивно(СписокЗанятостейНезакрытые);
	ОбновитьВремяРекурсивно(СписокЗанятостейНезакрытые);
	
	ОбновитьСписокИсполнителей();
	ОбновитьИтоги();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНезакрытыхЗанятостейВремяКОплатеПриИзменении(Элемент)
	
	ОбновитьВремяРекурсивно(СписокЗанятостейНезакрытые);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДанных

&НаСервере
Процедура ОбновитьВидимость()
	
	ОплаченВыставленСчет = Объект.СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.Оплачен Или Объект.СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.ВыставленСчет ИЛИ Объект.СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.НайтиПоКоду("000000010");
	
	Элементы.НомерАкта.Видимость = ОплаченВыставленСчет;
	Элементы.НомерСчета.Видимость = ОплаченВыставленСчет;
	Элементы.ДатаСчета.Видимость = ОплаченВыставленСчет;
	Элементы.ДатаАкта.Видимость = ОплаченВыставленСчет;
	
	//++ РС Консалт, Макаров Сергей Александрович 14.07.2021 10:34:31  ДоработкаНачислений
	ВозможноНачисление = Объект.СтатусОтчета =  Справочники.РС_СтатусыОтчетовКлиенту.Оплачен или Объект.СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.НеТребуется;
	Элементы.Начислен.Видимость = ВозможноНачисление;
	Элементы.НомерСтрокиНачисления.Видимость = ВозможноНачисление;
	//}--РС Консалт Макаров Сергей Александрович 14.07.2021 10:34:38
	
	//++ РС Консалт Горохов И. 07.12.22 Зад №19099
	Если Объект.СтатусОтчета = Справочники.РС_СтатусыОтчетовКлиенту.НеТребуется тогда
		ЭтаФорма.Элементы.Комментарий.Заголовок = "Причина";
		ЭтаФорма.Элементы.Комментарий.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Объект.Комментарий);
	Иначе
		ЭтаФорма.Элементы.Комментарий.Заголовок = "Комментарий";
		ЭтаФорма.Элементы.Комментарий.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	//--КонецЗадачи №19099

	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗанятостей(Исполнитель = Неопределено)
	
	Объект.СписокЗанятостейЗакрытые.Очистить();
	Объект.СписокЗанятостейНезакрытые.Очистить();
	
	СтрОбхода = Новый Структура("СписокЗанятостейЗакрытые,СписокЗанятостейНезакрытые", СписокЗанятостейЗакрытые, СписокЗанятостейНезакрытые);
	
	Для Каждого СтрокаОбхода Из СтрОбхода Цикл
		ТабличнаяЧасть = СтрокаОбхода.Ключ;
		СтрокиПроекты = СтрокаОбхода.Значение.ПолучитьЭлементы(); 
		Для Каждого СтрокаПроект Из СтрокиПроекты Цикл
			СтрокиЗадачи = СтрокаПроект.ПолучитьЭлементы();
			Для Каждого СтрокаЗадача Из СтрокиЗадачи Цикл
				СтрокиЗанятости = СтрокаЗадача.ПолучитьЭлементы();
				Для Каждого СтрокаЗанятость Из СтрокиЗанятости Цикл
					ЗаполнитьСписок(СтрокаЗанятость, Исполнитель, ТабличнаяЧасть);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		ОбновитьДеревоЗначений();
		ОбновитьСписокИсполнителей();
		ОбновитьИтоги();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЗначений()
	
	СписокЗанятостейДерево = РеквизитФормыВЗначение("СписокЗанятостейЗакрытые");
	СписокЗанятостейДерево.Строки.Очистить();
	
	СписокНезакрытыхЗанятостейДерево = РеквизитФормыВЗначение("СписокЗанятостейНезакрытые");
	СписокНезакрытыхЗанятостейДерево.Строки.Очистить();
	
	СтрОбхода = Новый Структура("СписокЗанятостейЗакрытые,СписокЗанятостейНезакрытые", СписокЗанятостейДерево, СписокНезакрытыхЗанятостейДерево);
	
	Запрос = Новый Запрос(ПолучитьТекстЗапроса_СписокЗанятостей());
	
	Запрос.УстановитьПараметр("СписокЗанятостейЗакрытые", Объект.СписокЗанятостейЗакрытые.Выгрузить());
	Запрос.УстановитьПараметр("СписокЗанятостейНезакрытые", Объект.СписокЗанятостейНезакрытые.Выгрузить());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаЗакрытые = РезультатЗапроса.Получить(3);
	РезультатЗапросаНезакрытые = РезультатЗапроса.Получить(4);
	
	СтрРезультат = Новый Структура("СписокЗанятостейЗакрытые,СписокЗанятостейНезакрытые", РезультатЗапросаЗакрытые, РезультатЗапросаНезакрытые);
	
	Для Каждого СтрокаОбхода Из СтрОбхода Цикл
		Результат = СтрРезультат[СтрокаОбхода.Ключ];
		ЗаполнятьДатуЗакрытия = СтрокаОбхода.Ключ = "СписокЗанятостейЗакрытые";
		Если Не Результат.Пустой() Тогда
			НомерПроекта = 1;
			ВыборкаПроекты = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПроекты.Следующий() Цикл
				НоваяСтрокаПроект = СтрокаОбхода.Значение.Строки.Добавить();
				НоваяСтрокаПроект.НомерСтроки = НомерПроекта;
				НоваяСтрокаПроект.ЗаданиеЗанятость = ВыборкаПроекты.Проект;
				НоваяСтрокаПроект.ВремяФакт = ВыборкаПроекты.ВремяФакт;
				НоваяСтрокаПроект.ВремяКлиента = ВыборкаПроекты.ВремяКлиента;
				НоваяСтрокаПроект.ВремяКОплате = ВыборкаПроекты.ВремяКОплате;
				
				НомерЗадачи = 1;
				СогласованоПоПроекту = 0;
				СписокПользователейПроекта = Новый Массив;
				ВыборкаЗадачи = ВыборкаПроекты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаЗадачи.Следующий() Цикл			
					НоваяСтрока = НоваяСтрокаПроект.Строки.Добавить();
					НоваяСтрока.НомерСтроки = НомерЗадачи;
					НоваяСтрока.ЗаданиеЗанятость = ВыборкаЗадачи.Задание;
					НоваяСтрока.ТемаОписание = ВыборкаЗадачи.Тема;
					НоваяСтрока.ВремяПлан = ?(ВыборкаЗадачи.ПоСогласованию, ВыборкаЗадачи.ВремяСогласовано, ВыборкаЗадачи.ВремяКлиента);
					НоваяСтрока.ВремяФакт = ВыборкаЗадачи.ВремяФакт;
					НоваяСтрока.ВремяКлиента = ВыборкаЗадачи.ВремяКлиента;
					НоваяСтрока.ВремяКОплате = ВыборкаЗадачи.ВремяКОплате;
					Если ЗаполнятьДатуЗакрытия Тогда
						НоваяСтрока.ДатаЗакрытия = ВыборкаЗадачи.ДатаВыполнения;
					КонецЕсли;
					
					СогласованоПоПроекту = СогласованоПоПроекту + НоваяСтрока.ВремяПлан;
					ОсталосьРаспределить = НоваяСтрока.ВремяПлан;
					КфПересчетаПлана = НоваяСтрока.ВремяПлан / ?(НоваяСтрока.ВремяФакт = 0, 1, НоваяСтрока.ВремяФакт); 
					
					НомерЗанятости = 1;
					СписокПользователейЗадачи = Новый Массив;
					ВыборкаЗанятости = ВыборкаЗадачи.Выбрать();
					Пока ВыборкаЗанятости.Следующий() Цикл
						НоваяПодСтрока = НоваяСтрока.Строки.Добавить();
						НоваяПодСтрока.НомерСтроки = НомерЗанятости;
						НоваяПодСтрока.ЗаданиеЗанятость = ВыборкаЗанятости.Занятость;
						НоваяПодСтрока.Исполнитель = ВыборкаЗанятости.Исполнитель;
						НоваяПодСтрока.ТемаОписание = ВыборкаЗанятости.Описание;
						НоваяПодСтрока.ВремяФакт = ВыборкаЗанятости.ВремяФакт;
						НоваяПодСтрока.ВремяКлиента = ВыборкаЗанятости.ВремяКлиента;
						НоваяПодСтрока.ВремяКОплате = ВыборкаЗанятости.ВремяКОплате;
						
						НоваяПодСтрока.ДатаНачалаЗанятости = ВыборкаЗанятости.ДатаНачалаЗанятости; //++ РС Консалт: Пашков Никита 24.05.2021 Тикет 6300
						
						Распределить = Мин(НоваяПодСтрока.ВремяФакт * КфПересчетаПлана, ОсталосьРаспределить);
						
						НоваяПодСтрока.ВремяПлан = Распределить;
						
						Если СписокПользователейЗадачи.Найти(НоваяПодСтрока.Исполнитель) = Неопределено Тогда
							СписокПользователейЗадачи.Добавить(НоваяПодСтрока.Исполнитель);
						КонецЕсли;
						Если СписокПользователейПроекта.Найти(НоваяПодСтрока.Исполнитель) = Неопределено Тогда
							СписокПользователейПроекта.Добавить(НоваяПодСтрока.Исполнитель);
						КонецЕсли;
						
						ОсталосьРаспределить = ?(ОсталосьРаспределить < НоваяПодСтрока.ВремяПлан, 0, ОсталосьРаспределить - НоваяПодСтрока.ВремяПлан);
						
						НомерЗанятости = НомерЗанятости + 1;
					КонецЦикла;
					Если СписокПользователейЗадачи.Количество() = 1 Тогда
						НоваяСтрока.Исполнитель = СписокПользователейЗадачи[0];
					Иначе
						СписокЗначенийИсполнителей = Новый СписокЗначений;
						Для Каждого СтрокаМассива Из СписокПользователейЗадачи Цикл
							СписокЗначенийИсполнителей.Добавить(СтрокаМассива);
						КонецЦикла;
						НоваяСтрока.Исполнитель = СписокЗначенийИсполнителей;
					КонецЕсли;
					НомерЗадачи = НомерЗадачи + 1;
				КонецЦикла;
				НоваяСтрокаПроект.ВремяПлан = СогласованоПоПроекту;
				Если СписокПользователейПроекта.Количество() = 1 Тогда
					НоваяСтрокаПроект.Исполнитель = СписокПользователейПроекта[0];
				Иначе
					СписокЗначенийИсполнителей = Новый СписокЗначений;
					Для Каждого СтрокаМассива Из СписокПользователейПроекта Цикл
						СписокЗначенийИсполнителей.Добавить(СтрокаМассива);
					КонецЦикла;
					НоваяСтрокаПроект.Исполнитель = СписокЗначенийИсполнителей;
				КонецЕсли;
				НомерПроекта = НомерПроекта + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(СписокЗанятостейДерево, "СписокЗанятостейЗакрытые");
	ЗначениеВРеквизитФормы(СписокНезакрытыхЗанятостейДерево, "СписокЗанятостейНезакрытые");
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапроса_СписокЗанятостей()
	
	Возврат "ВЫБРАТЬ
	|	СписокЗанятостейЗакрытые.Занятость КАК Занятость,
	|	СписокЗанятостейЗакрытые.ФактическоеВремя КАК ФактическоеВремя,
	|	СписокЗанятостейЗакрытые.ВремяКлиента КАК ВремяКлиента,
	|	СписокЗанятостейЗакрытые.КОплате КАК КОплате,
	|	ИСТИНА КАК Закрытые
	|ПОМЕСТИТЬ ВтТаблицаДвиженийЗакрытые
	|ИЗ
	|	&СписокЗанятостейЗакрытые КАК СписокЗанятостейЗакрытые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокЗанятостейНезакрытые.Занятость КАК Занятость,
	|	СписокЗанятостейНезакрытые.ФактическоеВремя КАК ФактическоеВремя,
	|	СписокЗанятостейНезакрытые.ВремяКлиента КАК ВремяКлиента,
	|	СписокЗанятостейНезакрытые.КОплате КАК КОплате,
	|	ЛОЖЬ КАК Закрытые
	|ПОМЕСТИТЬ ВтТаблицаДвиженийНезакрытые
	|ИЗ
	|	&СписокЗанятостейНезакрытые КАК СписокЗанятостейНезакрытые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТаблицаДвиженийЗакрытые.Занятость КАК Занятость,
	|	ВтТаблицаДвиженийЗакрытые.ФактическоеВремя КАК ФактическоеВремя,
	|	ВтТаблицаДвиженийЗакрытые.ВремяКлиента КАК ВремяКлиента,
	|	ВтТаблицаДвиженийЗакрытые.КОплате КАК КОплате,
	|	ВтТаблицаДвиженийЗакрытые.Закрытые КАК Закрытые
	|ПОМЕСТИТЬ ВтТаблицаДвижений
	|ИЗ
	|	ВтТаблицаДвиженийЗакрытые КАК ВтТаблицаДвиженийЗакрытые
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТаблицаДвиженийНезакрытые.Занятость,
	|	ВтТаблицаДвиженийНезакрытые.ФактическоеВремя,
	|	ВтТаблицаДвиженийНезакрытые.ВремяКлиента,
	|	ВтТаблицаДвиженийНезакрытые.КОплате,
	|	ВтТаблицаДвиженийНезакрытые.Закрытые
	|ИЗ
	|	ВтТаблицаДвиженийНезакрытые КАК ВтТаблицаДвиженийНезакрытые
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Занятость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	дЗадание.Ссылка КАК Задание,
	|	дЗадание.Проект КАК Проект,
	|	дЗадание.СогласованоЧасов КАК ВремяСогласовано,
	|	дЗадание.ДатаКорректировки КАК ДатаКорректировки,
	|	дЗадание.ДатаВыполнения КАК ДатаВыполнения,
	|	дЗадание.ДатаЗавершения КАК ДатаЗавершения,
	|	дЗадание.Тема КАК Тема,
	|	дЗадание.ПоСогласованию КАК ПоСогласованию,
	|	РС_Занятость.Ссылка КАК Занятость,
	|	РС_Занятость.Исполнитель КАК Исполнитель,
	|	РС_Занятость.Описание КАК Описание,
	|	ВтТаблицаДвижений.ФактическоеВремя КАК ВремяФакт,
	|	ВтТаблицаДвижений.ВремяКлиента КАК ВремяКлиента,
	|	ВтТаблицаДвижений.КОплате КАК ВремяКОплате,
	|	дЗадание.ДатаВыполнения КАК Порядок,
	|	РС_Занятость.ДатаНачала КАК ДатаНачалаЗанятости
	|ИЗ
	|	ВтТаблицаДвижений КАК ВтТаблицаДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РС_Занятость КАК РС_Занятость
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание КАК дЗадание
	|			ПО РС_Занятость.Задание = дЗадание.Ссылка
	|		ПО ВтТаблицаДвижений.Занятость = РС_Занятость.Ссылка
	|			И (ВтТаблицаДвижений.Закрытые)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ДатаНачалаЗанятости
	|ИТОГИ
	|	МАКСИМУМ(ВремяСогласовано),
	|	МАКСИМУМ(Тема),
	|	МАКСИМУМ(ПоСогласованию),
	|	СУММА(ВремяФакт),
	|	СУММА(ВремяКлиента),
	|	СУММА(ВремяКОплате)
	|ПО
	|	Проект,
	|	Задание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	дЗадание.Ссылка КАК Задание,
	|	дЗадание.Проект КАК Проект,
	|	дЗадание.СогласованоЧасов КАК ВремяСогласовано,
	|	дЗадание.Тема КАК Тема,
	|	дЗадание.ПоСогласованию КАК ПоСогласованию,
	|	РС_Занятость.Ссылка КАК Занятость,
	|	РС_Занятость.Исполнитель КАК Исполнитель,
	|	РС_Занятость.Описание КАК Описание,
	|	ВтТаблицаДвижений.ФактическоеВремя КАК ВремяФакт,
	|	ВтТаблицаДвижений.ВремяКлиента КАК ВремяКлиента,
	|	ВтТаблицаДвижений.КОплате КАК ВремяКОплате,
	|	РС_Занятость.ДатаНачала КАК ДатаНачалаЗанятости
	|ИЗ
	|	ВтТаблицаДвижений КАК ВтТаблицаДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РС_Занятость КАК РС_Занятость
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание КАК дЗадание
	|			ПО РС_Занятость.Задание = дЗадание.Ссылка
	|		ПО ВтТаблицаДвижений.Занятость = РС_Занятость.Ссылка
	|			И (НЕ ВтТаблицаДвижений.Закрытые)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проект,
	|	Задание,
	|	Занятость
	|ИТОГИ
	|	МАКСИМУМ(ВремяСогласовано),
	|	МАКСИМУМ(Тема),
	|	МАКСИМУМ(ПоСогласованию),
	|	СУММА(ВремяФакт),
	|	СУММА(ВремяКлиента),
	|	СУММА(ВремяКОплате)
	|ПО
	|	Проект,
	|	Задание"
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокИсполнителей()
	
	СписокИсполнителей.Очистить();
		
	СтрОбхода = Новый Структура("СписокЗанятостейЗакрытые", СписокЗанятостейЗакрытые);
	
	Для Каждого СтрокаОбхода Из СтрОбхода Цикл
		СтрокиПроекты = СтрокаОбхода.Значение.ПолучитьЭлементы();
		Для Каждого СтрокаПроект Из СтрокиПроекты Цикл
			СтрокиЗадачи = СтрокаПроект.ПолучитьЭлементы();
			Для Каждого СтрокаЗадача Из СтрокиЗадачи Цикл
				СтрокиЗанятости = СтрокаЗадача.ПолучитьЭлементы();
				Для Каждого СтрокаЗанятость Из СтрокиЗанятости Цикл
					ЗаполнитьИсполнителя(СтрокаЗанятость);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
		
	СтрОбхода = Новый Структура("СписокЗанятостей, СписокНезакрытыхЗанятостей", СписокЗанятостейЗакрытые, СписокЗанятостейНезакрытые);
	
	Для Каждого СтрокаОбхода Из СтрОбхода Цикл
		
		КлючОбъекта = ?(СтрокаОбхода.Ключ = "СписокЗанятостей", "Закрытые", "Незакрытые");
		
		ИтогоФакт = 0;
		ИтогоПлан = 0;
		ИтогоКлиент = 0;
		ИтогоКОплате = 0;
		
		ЭлементыДерева = СтрокаОбхода.Значение.ПолучитьЭлементы(); 
		Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
			ИтогоФакт = ИтогоФакт + СтрокаДерева.ВремяФакт;
			ИтогоПлан = ИтогоПлан + СтрокаДерева.ВремяПлан;
			ИтогоКлиент = ИтогоКлиент + СтрокаДерева.ВремяКлиента;
			ИтогоКОплате = ИтогоКОплате + СтрокаДерева.ВремяКОплате;
		КонецЦикла;
				
		Элементы[СтрокаОбхода.Ключ + "ВремяКлиента"].ТекстПодвала = "" + ИтогоКлиент;
		Элементы[СтрокаОбхода.Ключ + "ВремяКОплате"].ТекстПодвала = "" + ИтогоКОплате;
		Элементы[СтрокаОбхода.Ключ + "ВремяПлан"].ТекстПодвала = "" + ИтогоПлан;
		Элементы[СтрокаОбхода.Ключ + "ВремяФакт"].ТекстПодвала = "" + ИтогоФакт;
		
		Если Объект["ВсегоФакт" + КлючОбъекта] <> ИтогоФакт Тогда
			Объект["ВсегоФакт" + КлючОбъекта] = ИтогоФакт;
		КонецЕсли;
		Если Объект["ВсегоНачислено" + КлючОбъекта] <> ИтогоКлиент Тогда
			Объект["ВсегоНачислено" + КлючОбъекта] = ИтогоКлиент;
		КонецЕсли;
		Если Объект["ВсегоКОплате" + КлючОбъекта] <> ИтогоКОплате Тогда
			Объект["ВсегоКОплате" + КлючОбъекта] = ИтогоКОплате;
		КонецЕсли;
		
	КонецЦикла;
		
	//Элементы.СписокИсполнителейВремяКлиента.ТекстПодвала = "" + СписокИсполнителей.Итог("ВремяКлиента");
	//Элементы.СписокИсполнителейВремяКОплате.ТекстПодвала = "" + СписокИсполнителей.Итог("ВремяКОплате");
	//Элементы.СписокИсполнителейВремяПлан.ТекстПодвала = "" + СписокИсполнителей.Итог("ВремяПлан");
	//Элементы.СписокИсполнителейВремяФакт.ТекстПодвала = "" + СписокИсполнителей.Итог("ВремяФакт");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	//++
	МассивПроектов = Новый Массив;
	Для каждого Строка из ЭтотОбъект.Проекты цикл
		Если Строка.Выбор тогда
			МассивПроектов.Добавить(Строка.Наименование);
		КонецЕсли;
	КонецЦикла;
	//--
	ДокументОбъект.ЗаполнитьСписокЗанятостей(МассивПроектов);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителя(СтрокаДанных)
	
	СтруктураПоиска = Новый Структура("Исполнитель");
	
	Если ЗначениеЗаполнено(СтрокаДанных.ВремяФакт)
		Или ЗначениеЗаполнено(СтрокаДанных.ВремяКлиента)
		Или ЗначениеЗаполнено(СтрокаДанных.ВремяКОплате) Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
		НайденнаяСтрока = СписокИсполнителей.НайтиСтроки(СтруктураПоиска);
		Если НайденнаяСтрока.Количество() Тогда
			НайденнаяСтрока = НайденнаяСтрока[0];
			НайденнаяСтрока.ВремяФакт = НайденнаяСтрока.ВремяФакт + СтрокаДанных.ВремяФакт;
			НайденнаяСтрока.ВремяКлиента = НайденнаяСтрока.ВремяКлиента + СтрокаДанных.ВремяКлиента;
			НайденнаяСтрока.ВремяКОплате = НайденнаяСтрока.ВремяКОплате + СтрокаДанных.ВремяКОплате;
			НайденнаяСтрока.ВремяПлан = НайденнаяСтрока.ВремяПлан + СтрокаДанных.ВремяПлан;
		Иначе
			ЗаполнитьЗначенияСвойств(СписокИсполнителей.Добавить(), СтрокаДанных);
		КонецЕсли;
		
		//Макаров 
		
		НайденнаяСтрока = Объект.Исполнители.НайтиСтроки(СтруктураПоиска);
		Если НайденнаяСтрока.Количество() Тогда
			НайденнаяСтрока = НайденнаяСтрока[0];
			НайденнаяСтрока.ВремяФакт = НайденнаяСтрока.ВремяФакт + СтрокаДанных.ВремяФакт;
			НайденнаяСтрока.ВремяКлиента = НайденнаяСтрока.ВремяКлиента + СтрокаДанных.ВремяКлиента;
			НайденнаяСтрока.ВремяКОплате = НайденнаяСтрока.ВремяКОплате + СтрокаДанных.ВремяКОплате;
			НайденнаяСтрока.ВремяПлан = НайденнаяСтрока.ВремяПлан + СтрокаДанных.ВремяПлан;
			
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Подразделение) Тогда
				НайденнаяСтрока.Подразделение = СтрокаДанных.Исполнитель.Подразделение;
			КонецЕсли;
			
		Иначе
			НоваяСтрока = Объект.Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			НоваяСтрока.Подразделение = СтрокаДанных.Исполнитель.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписок(СтрокаДанных, Исполнитель, ТабличнаяЧасть)
	
	Если ЗначениеЗаполнено(Исполнитель) И СтрокаДанных.Исполнитель = Исполнитель Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ВремяФакт)
		Или ЗначениеЗаполнено(СтрокаДанных.ВремяКлиента)
		Или ЗначениеЗаполнено(СтрокаДанных.ВремяКОплате) Тогда
		
		НоваяСтрока = Объект[ТабличнаяЧасть].Добавить();
		НоваяСтрока.Занятость = СтрокаДанных.ЗаданиеЗанятость;
		НоваяСтрока.ФактическоеВремя = СтрокаДанных.ВремяФакт;
		НоваяСтрока.ВремяКлиента = СтрокаДанных.ВремяКлиента;
		НоваяСтрока.КОплате = СтрокаДанных.ВремяКОплате;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопрос(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да тогда
		ЗаполнитьНаСервере();
		ОбновитьДеревоЗначений();
		ОбновитьСписокИсполнителей();
		ОбновитьИтоги();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначения(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ОбновитьСписокЗанятостей(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРекурсивно(Список, ТекущийЭлементДерева = Неопределено)
		
	Если ТекущийЭлементДерева = Неопределено Тогда
		ЭлементыСписка = Список.ПолучитьЭлементы();
	Иначе
		ЭлементыСписка = ТекущийЭлементДерева.ПолучитьЭлементы();
	КонецЕсли;
	
	Если ЭлементыСписка.Количество() Тогда
		Для Каждого ЭлементЭлементов Из ЭлементыСписка Цикл  
			ОбработатьРекурсивно(Список, ЭлементЭлементов);
		КонецЦикла;
	Иначе
		Если ТекущийЭлементДерева <> Неопределено И ТипЗнч(ТекущийЭлементДерева.ЗаданиеЗанятость) <> Тип("ДокументСсылка.РС_Занятость") Тогда
			СтрокаРодитель = ТекущийЭлементДерева.ПолучитьРодителя();
			
			Если СтрокаРодитель = Неопределено Тогда
				Список.ПолучитьЭлементы().Удалить(ТекущийЭлементДерева);
			Иначе
				СтрокаРодитель.ПолучитьЭлементы().Удалить(ТекущийЭлементДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиТаблиц(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементПоля = Элемент.ТекущийЭлемент;
	
	Если ТекущийЭлементПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ТекущийЭлементПоля.Имя, "КОплате") > 0 Тогда
		ТекущийЭлементПоля.ТолькоПросмотр = ТипЗнч(ТекущиеДанные.ЗаданиеЗанятость) <> Тип("ДокументСсылка.РС_Занятость");
	КонецЕсли;
		
	Если (ТекущийЭлементПоля.Имя = "СписокЗанятостейЗаданиеЗанятость" Или ТекущийЭлементПоля.Имя = "СписокНезакрытыхЗанятостейЗаданиеЗанятость")
		И ТипЗнч(ТекущиеДанные.ЗаданиеЗанятость) <> Тип("СправочникСсылка.Проекты") Тогда
		ПоказатьЗначение(, ТекущиеДанные.ЗаданиеЗанятость);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВремяРекурсивно(Список)
		
	СтрокиПроекты = Список.ПолучитьЭлементы();
	СчПроекты = 1;
	Для Каждого СтрокаПроект Из СтрокиПроекты Цикл
		ВремяФактПроект = 0;
		ВремяКлиентаПроект = 0;
		ВремяКОплатеПроект = 0;
		ВремяПланПроект = 0;
		СчЗадачи = 1;
		СтрокиЗадачи = СтрокаПроект.ПолучитьЭлементы();
		Для Каждого СтрокаЗадача Из СтрокиЗадачи Цикл
			ВремяФактЗадача = 0;
			ВремяКлиентаЗадача = 0;
			ВремяКОплатеЗадача = 0;
			СчЗанятости = 1;
			СтрокиЗанятости = СтрокаЗадача.ПолучитьЭлементы();
			Для Каждого СтрокаЗанятость Из СтрокиЗанятости Цикл
				ВремяФактЗадача = ВремяФактЗадача + СтрокаЗанятость.ВремяФакт;
				ВремяКлиентаЗадача = ВремяКлиентаЗадача + СтрокаЗанятость.ВремяКлиента;
				ВремяКОплатеЗадача = ВремяКОплатеЗадача + СтрокаЗанятость.ВремяКОплате;
			КонецЦикла;
			СтрокаЗадача.ВремяФакт = ВремяФактЗадача;
			СтрокаЗадача.ВремяКлиента = ВремяКлиентаЗадача; 
			СтрокаЗадача.ВремяКОплате = ВремяКОплатеЗадача;
			СтрокаЗадача.НомерСтроки = СчЗадачи;
			СчЗадачи = СчЗадачи + 1;
		
			КфПересчетаПлана = СтрокаЗадача.ВремяПлан / ?(СтрокаЗадача.ВремяКлиента = 0, 1, СтрокаЗадача.ВремяКлиента);
			
			Для Каждого СтрокаЗанятость Из СтрокиЗанятости Цикл
				СтрокаЗанятость.ВремяПлан = СтрокаЗанятость.ВремяКлиента * КфПересчетаПлана;
				СтрокаЗанятость.НомерСтроки = СчЗанятости;
				СчЗанятости = СчЗанятости + 1;
			КонецЦикла;
			
			ВремяФактПроект = ВремяФактПроект + СтрокаЗадача.ВремяФакт;
			ВремяКлиентаПроект = ВремяКлиентаПроект + СтрокаЗадача.ВремяКлиента;
			ВремяКОплатеПроект = ВремяКОплатеПроект + СтрокаЗадача.ВремяКОплате;
			ВремяПланПроект = ВремяПланПроект + СтрокаЗадача.ВремяПлан;
		КонецЦикла;
		СтрокаПроект.ВремяФакт = ВремяФактПроект;
		СтрокаПроект.ВремяКлиента = ВремяКлиентаПроект; 
		СтрокаПроект.ВремяКОплате = ВремяКОплатеПроект;
		СтрокаПроект.ВремяПлан = ВремяПланПроект;
		СтрокаПроект.НомерСтроки = СчПроекты;
		СчПроекты = СчПроекты + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область БСП

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Клиент) тогда
		Проекты.Очистить();
		Проекты.Загрузить(ПолучитьПроекты().Выгрузить(ОбходРезультатаЗапроса.Прямой));
	КонецЕсли;
КонецПроцедуры

//++
Функция ПолучитьПроекты()
	Если ЗначениеЗаполнено(Объект.Клиент) тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	дЗадание.Проект КАК Наименование
		|ИЗ
		|	РегистрНакопления.РС_Работы.Остатки(КонецПериода(&Период,ДЕНЬ), ) КАК РС_РаботыОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РС_Занятость КАК РС_Занятость
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание КАК дЗадание
		|			ПО (РС_Занятость.Задание = дЗадание.Ссылка)
		|				И (дЗадание.Клиент = &Клиент)
		|				И (КОНЕЦПЕРИОДА(РС_Занятость.ДатаОкончания, ДЕНЬ) <= &Период)
		|		ПО (РС_РаботыОстатки.Занятость = РС_Занятость.Ссылка)
		|			И (РС_РаботыОстатки.ФактическоеВремяОстаток <> 0
		|				ИЛИ РС_РаботыОстатки.ВремяКлиентаОстаток <> 0)";
		
		Запрос.УстановитьПараметр("Клиент", Объект.Клиент);
		Запрос.УстановитьПараметр("Период", КонецДня(Объект.Период));
		
		Возврат Запрос.Выполнить();
	КонецЕсли;
	Возврат Неопределено;	
КонецФункции
 //--
&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	КлиентПриИзмененииНаСервере();
КонецПроцедуры

//++
&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	ПрочитатьПроекты();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)

	ПериодПриИзмененииНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ОбновитьВидимость();
КонецПроцедуры
//--

//@skip-warning

#КонецОбласти






