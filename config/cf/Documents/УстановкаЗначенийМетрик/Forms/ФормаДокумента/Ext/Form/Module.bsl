
#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СЛС.ПриСозданииНаСервере(Объект, Отказ, СтандартнаяОбработка, Параметры, ЭтаФорма);
	
	Если Объект.Ссылка.Пустая() Тогда
		// Документ создается из обработки "РабочийСтол".
		Если Параметры.Свойство("РабочийСтолЗначенияЗаполнения") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.РабочийСтолЗначенияЗаполнения);
		КонецЕсли;

	КонецЕсли;
	
	#Область БСП_ПриСозданииНаСервере
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ВерсионированиеОбъектов	
		
	#КонецОбласти
	
	УстановитьВидимостьДоступность();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Корректировки документа
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);	

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
       ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// Корректировки документа
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, 
			"ДокументУстановкаЗначенийМетрик (проведение)");	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СЛС.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТекущийОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ТекущийОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		ТекущийОбъект.ДатаКорректировки = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ТекущийОбъект.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	Иначе
		ТекущийОбъект.АвторКорректировки = Пользователи.ТекущийПользователь();
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СЛС.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МетрикаПриИзменении(Элемент)
	
	Если Объект.Значения.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("МетрикаПриИзмененииЗавершение", ЭтотОбъект),
			НСтр("ru = 'Очистить табличную часть значений?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	МетрикаПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура МетрикаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Значения.Очистить();
	КонецЕсли;
	
	МетрикаПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура МетрикаПриИзмененииФрагмент()
	
	УстановитьВидимостьДоступность();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗначения

&НаКлиенте
Процедура ЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.Период = СледующееЗначениеПериода();
	Если НоваяСтрока И Не Копирование Тогда
			
		Массив = МетрикиВызовСервера.ЗначенияИзмеренийПоУмолчаниюДляМетрики(Объект.Метрика);
		
		Для Каждого Структура Из Массив Цикл
			
			Если ЗначениеЗаполнено(Структура.ПоУмолчанию) Тогда
				Элемент.ТекущиеДанные["Измерение" + Структура.НомерСтроки] = Структура.ПоУмолчанию;				
			КонецЕсли;
			Элемент.ТекущиеДанные.ЗначениеФакт = ПредопределенноеЗначение("Перечисление.ПланФакт.Факт");			
			Если ЗначениеЗаполнено(Структура.Подсказка) Тогда
			    Элементы["ЗначенияИзмерение" + Структура.НомерСтроки].Подсказка = Структура.Подсказка;
			КонецЕсли;
			Элементы["ЗначенияИзмерение" + Структура.НомерСтроки].ОтметкаНезаполненного = Структура.Обязательное;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияПослеУдаления(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияЗначениеПлановоеПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияЗначениеФактическоеПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НадписьАвторНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Спк = УправлениеITОтделом8УФКлиент.ПолучитьСписокНадписьАвтор(Объект);	
	ПоказатьВыборИзСписка(
		Новый ОписаниеОповещения("НадписьАвторНажатиеЗавершение", ЭтотОбъект), Спк, Элементы.НадписьАвтор, );
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьАвторНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ЗначенияИзмерение1.Видимость = Ложь;
	Элементы.ЗначенияИзмерение2.Видимость = Ложь;
	Элементы.ЗначенияИзмерение3.Видимость = Ложь;
	Элементы.ЗначенияИзмерение4.Видимость = Ложь;
	Элементы.ЗначенияИзмерение5.Видимость = Ложь;
		
	Если ЗначениеЗаполнено(Объект.Метрика) Тогда
		
		Для Индекс = 1 По Объект.Метрика.Измерения.Количество() Цикл
			
			Строки 									= Объект.Метрика.Измерения.Получить(Индекс - 1);
			
			Имя 									= "ЗначенияИзмерение" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
			Элементы[Имя].Видимость 				= Истина;
			Элементы[Имя].Заголовок 				= 
				?(НЕ ПустаяСтрока(Строки.Представление), Строки.Представление, Строка(Строки.ТипИзмерения));
			Элементы[Имя].ОграничениеТипа 			= МетрикиВызовСервера.ПолучитьОграничениеТипаПоПолномуИмени(Строки.ТипИзмерения);			
			Элементы[Имя].АвтоОтметкаНезаполненного = Строки.Обязательное;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
	
	Объект.ИтогоПлан = Объект.Значения.Итог("ЗначениеПлан");
	Объект.ИтогоФакт = Объект.Значения.Итог("ЗначениеФакт");
	
КонецПроцедуры

&НаСервере
Функция СледующееЗначениеПериода()
	
	Если Объект.Значения.Количество() <= 1 Тогда
		Возврат Объект.Дата;
	КонецЕсли;
	
	ПоследняяДата = Объект.Значения[Объект.Значения.Количество() - 2].Период;
	Если ПоследняяДата = Дата(1, 1, 1) Тогда
		ПоследняяДата = Объект.Дата;
	КонецЕсли;
	
	Возврат МетрикиВызовСервера.СледующееЗначениеПериода(Объект.Метрика, ПоследняяДата);
	
КонецФункции

#КонецОбласти