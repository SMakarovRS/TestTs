Процедура ЗаполнитьНовыйДокумент() Экспорт
	СпособРасчетаВремениКлиента 	= 1;
	ДатаНачала 						= ПолучитьМаксимальнуюДату();
	ДатаОкончания 					= ТекущаяДата() + 300;
	Исполнитель						= Пользователи.ТекущийПользователь();
	ВидРаботы						= Справочники.ВидыРабот.ВыполнениеЗаданий;
	ФактВремя 						= ДатаОкончания - ДатаНачала;
	ФактическаяТрудоемкость 		= ФактВремя/3600;	
	ВремяКлиента 					= ФактическаяТрудоемкость; 
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Задание") тогда
		Задание = ДанныеЗаполнения;
	ИначеЕсли  ТипЗнч(ДанныеЗаполнения) = Тип("Структура") тогда
		Если ДанныеЗаполнения.Свойство("ДокументЗадания") тогда
			Задание = ДанныеЗаполнения.ДокументЗадания;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьНовыйДокумент();
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	 ДвиженияРС_Работы();
	 ДвиженияТрудозатраты();
	 Движения.Записать();
КонецПроцедуры

Процедура ДвиженияРС_Работы()
	Движения.РС_Работы.Очистить();
	Движения.РС_Работы.Записывать 	= Истина;
	НоваяЗапись 					= Движения.РС_Работы.Добавить();
	НоваяЗапись.Период 				= ДатаНачала;
	НоваяЗапись.ВидДвижения 		= ВидДвиженияНакопления.Приход;
	НоваяЗапись.ВремяКлиента		= ВремяКлиента;
	НоваяЗапись.Занятость			= Ссылка;
	НоваяЗапись.ФактическоеВремя	= ФактическаяТрудоемкость;	
КонецПроцедуры

Процедура ДвиженияТрудозатраты()
	ЗаписиРегистра = РегистрыСведений.Трудозатраты.СоздатьНаборЗаписей();
	ЗаписиРегистра.Отбор.Объект.Установить(Задание);
	ЗаписиРегистра.Отбор.Инициатор.Установить(Задание.Инициатор);
	ЗаписиРегистра.Отбор.Исполнитель.Установить(Исполнитель);
	ЗаписиРегистра.Отбор.КлючУникальности.Установить(Ссылка.УникальныйИдентификатор());
	ЗаписиРегистра.Прочитать();
	ЗаписиРегистра.Очистить();
	НоваяЗапись = ЗаписиРегистра.Добавить();
	НоваяЗапись.Активность = Истина;
	ЗаполнитьЗначенияСвойств(НоваяЗапись,Ссылка);
	НоваяЗапись.Объект = Задание;
	НоваяЗапись.КлючУникальности = Ссылка.УникальныйИдентификатор();
	НоваяЗапись.Инициатор = Задание.Инициатор;
	НоваяЗапись.Длительность = ФактическаяТрудоемкость*3600;
	//НоваяЗапись.Результат = Результат;                                        //++
	ЗаписиРегистра.Записать();
КонецПроцедуры

Функция ПолучитьМаксимальнуюДату() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(Трудозатраты.ДатаОкончания) КАК ДатаОкончания
	               |ИЗ
	               |	РегистрСведений.Трудозатраты КАК Трудозатраты
	               |ГДЕ
	               |	Трудозатраты.Исполнитель = &Исполнитель";
	Запрос.УстановитьПараметр("Исполнитель", Пользователи.ТекущийПользователь());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат ?(Выборка.ДатаОкончания = Дата('00010101'), ТекущаяДата(),Выборка.ДатаОкончания);
	Иначе
		Возврат ТекущаяДата();	
	КонецЕсли;
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	ЗаписиРегистра = РегистрыСведений.Трудозатраты.СоздатьНаборЗаписей();
	ЗаписиРегистра.Отбор.Объект.Установить(Задание);
	ЗаписиРегистра.Отбор.Инициатор.Установить(Задание.Инициатор);
	ЗаписиРегистра.Отбор.Исполнитель.Установить(Исполнитель);
	ЗаписиРегистра.Отбор.КлючУникальности.Установить(Ссылка.УникальныйИдентификатор());
	ЗаписиРегистра.Прочитать();
	ЗаписиРегистра.Очистить();
	ЗаписиРегистра.Записать();
КонецПроцедуры

