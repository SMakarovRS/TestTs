
#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт; // Длительная операция
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СЛС.ПриСозданииНаСервере(Объект, Отказ, СтандартнаяОбработка, Параметры, ЭтаФорма);	
	
	Если Объект.Ссылка.Пустая() Тогда
				
		Если НЕ ЗначениеЗаполнено(Объект.ПоложениеСтатьиДоходовРасходов) Тогда
			Объект.ПоложениеСтатьиДоходовРасходов	= Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;			
		КонецЕсли;		
		Если НЕ ЗначениеЗаполнено(Объект.ПоложениеРеквизитаЗадание) Тогда
			Объект.ПоложениеРеквизитаЗадание = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ПоложениеРеквизитаПользователь) Тогда
			Объект.ПоложениеРеквизитаПользователь = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Пользователь) 
			И Объект.ПоложениеРеквизитаПользователь = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			Объект.Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		Объект.СуммаВключаетНДС				= Истина;
		
		// Документ создается из обработки "РабочийСтол".
		Если Параметры.Свойство("РабочийСтолЗначенияЗаполнения") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.РабочийСтолЗначенияЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	Контрагент					= Объект.Контрагент;
	Договор						= Объект.Договор;
	Если ЗначениеЗаполнено(Договор) Тогда
		ВалютаРасчетов			= Объект.Договор.ВалютаРасчетов;
	КонецЕсли;	
	НациональнаяВалюта			= Константы.НациональнаяВалюта.Получить();
	СтруктураПоВалюте			= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, 
		Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта		= СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта	= СтруктураПоВалюте.Кратность;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций		= Истина;
	СтруктураНадписи			= Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов",			ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс",					Объект.Курс);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта",	КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций",	УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	ЦеныИВалюта					= СформироватьНадписьЦеныИВалюта(СтруктураНадписи); 
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	#Область БСП_ПриСозданииНаСервере
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ВерсионированиеОбъектов
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеITОтделом8УФПовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ДеревоНоменклатурыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	#КонецОбласти
	
	// Вывод дерева	
	ВывестиДеревоНоменклатуры();
	
	Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = 
		УправлениеITОтделом8УФ.ОтображатьИнвентарныеСерийныеНомера();	
	
	Если Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = Истина Тогда
		ОбновитьИнвентарныеИСерийныеНомераНаСервере();
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
			Элементы.РаботыСтавкаНДС.Видимость = Истина;
			Элементы.РаботыСуммаНДС.Видимость = Истина;
			Элементы.РаботыВсего.Видимость = Истина;
		Иначе
			Элементы.РаботыСтавкаНДС.Видимость = Ложь;
			Элементы.РаботыСуммаНДС.Видимость = Ложь;
			Элементы.РаботыВсего.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	// Учет остатков контрагентов.
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Организация");
	УправлениеITОтделом8УФ.УстановитьОграничениеТипаДляЭлементовФормы(ЭтаФорма, МассивЭлементов);
	
	#Область Трудозатраты
	ОбновитьЗаголовокТрудозатрат();
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Трудозатраты, "Объект", Объект.Ссылка);		
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Корректировки документа
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);	
	
	// Разворачиваем дерево
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда		
		ПоддерживаемыеТипыВО = Новый Массив();		
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");		
		ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриОтключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1));
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1));
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если ИмяСобытия = "ОбновитьМоиТрудозатраты" Тогда
		
		Если Объект.Ссылка = Источник Тогда
			Элементы.Трудозатраты.Обновить();
			ОбновитьЗаголовокТрудозатрат();
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СЛС.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТекущийОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ТекущийОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		ТекущийОбъект.ДатаКорректировки = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ТекущийОбъект.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	Иначе
		ТекущийОбъект.АвторКорректировки = Пользователи.ТекущийПользователь();
	КонецЕсли; 
	
	СохранитьДеревоНоменклатуры(ТекущийОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СЛС.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	УстановитьВидимостьДоступность();
	
	#Область Трудозатраты	
	ОбновитьЗаголовокТрудозатрат();
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Трудозатраты, "Объект", Объект.Ссылка);
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
       ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// Корректировки документа
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	Оповестить("Запись_НарядНаРаботы", Объект.Ссылка);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, 
			"ДокументНарядНаРаботы (проведение)");	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВыбораОрганизацииКонтрагента"
		И ИсточникВыбора.ВладелецФормы = ЭтаФорма Тогда
		УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбораФормы(ЭтаФорма, 
		 				"Организация",
						Объект.Организация,
						ВыбранноеЗначение,
						Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект));	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		ОбновитьРеквизитыБюджетов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер   = "";
	ОбновитьРеквизитыБюджетов();
	Объект.Договор = УправлениеITОтделом8УФ.ПолучитьДоговорПоУмолчанию(Объект.Контрагент, Объект.Организация);
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент 				  = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда	
		
		СтруктураДанные 			  = УправлениеITОтделом8УФ.ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент,
			Объект.Организация, Объект.Дата);		
		Объект.Договор 		   		  = СтруктураДанные.Договор;
		ДоговорПередИзменением 		  = Договор;
		Договор 		       		  = Объект.Договор;
		Объект.БанковскийСчет  		  = СтруктураДанные.БанковскийСчет;		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов 				  = СтруктураДанные.ВалютаРасчетов;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, 
				СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, 
				СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
				
		Если (ЗначениеЗаполнено(Объект.Договор)
			И ЗначениеЗаполнено(ВалютаРасчетов)
			И Объект.Договор <> ДоговорПередИзменением
			И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
			И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
						
			Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом. Необходимо проверить валюту документа'"));
			ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение", ЭтотОбъект, 
				Новый Структура("СтруктураДанные", СтруктураДанные)), ВалютаРасчетовПередИзменением, Истина);
			
			Возврат;
			
		КонецЕсли;
				
		КонтрагентПриИзмененииФрагмент(СтруктураДанные);
		УстановитьВидимостьДоступность();
		
	КонецЕсли;

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();

КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Истина);
	ПараметрыФормы.Вставить("Контрагент", 		Контрагент);
	ПараметрыФормы.Вставить("Организация", 		Объект.Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров",	УправлениеITОтделом8УФ.ПолучитьСписокВидовДоговораДляДокумента(Объект.Ссылка));
	ПараметрыФормы.Вставить("ТекущаяСтрока", 	Договор);	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	Структура = ОрганизацияИПодразделениеПользователя(Объект.Пользователь);
	Объект.Организация = Структура.Организация;
	Объект.Подразделение = Структура.Подразделение;	
КонецПроцедуры

&НаКлиенте
Процедура НадписьАвторНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Спк = УправлениеITОтделом8УФКлиент.ПолучитьСписокНадписьАвтор(Объект);	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НадписьАвторНажатиеЗавершение", ЭтотОбъект), Спк, 
		Элементы.НадписьАвтор, );
		
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура НадписьАвторНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт    

КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПриИзменении(Элемент)
	
	ОбновитьДанныеПоЗаданию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботы

&НаКлиенте
Процедура РаботыСотрудникПриИзменении(Элемент)
	
	Структура = ОрганизацияИПодразделениеПользователя(Элементы.Работы.ТекущиеДанные.Пользователь);
	Элементы.Работы.ТекущиеДанные.Подразделение = Структура.Подразделение;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыЗаданиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Задание) Тогда
			Структура = ПолучитьДанныеПоЗаданию(ТекущиеДанные.Задание);
			
			ТекущиеДанные.Инициатор 		= Структура.Инициатор;
			ТекущиеДанные.Клиент 			= Структура.Клиент;
			ТекущиеДанные.Пользователь		= Структура.ТекущийИсполнитель;
			ТекущиеДанные.Подразделение		= Структура.Подразделение;
			
			Если ТекущиеДанные.Описание = "" Тогда
				ТекущиеДанные.Описание = Структура.Тема;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;		 
		
КонецПроцедуры

&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)

	РассчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
Процедура РаботыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, 
		СтрокаТабличнойЧасти.СуммаНДС);
		
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.РаботыСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.РаботыСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыТарифПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПоложениеРеквизитаЗадание = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		
		Если ЗначениеЗаполнено(Объект.Задание) Тогда
			Структура = ПолучитьДанныеПоЗаданию(Объект.Задание);
			ТекущиеДанные.Цена = Структура.Цена; 
			РассчитатьСумму(ТекущиеДанные);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Задание) Тогда
			Структура = ПолучитьДанныеПоЗаданию(ТекущиеДанные.Задание);
			ТекущиеДанные.Цена = Структура.Цена; 
			РассчитатьСумму(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	
	УстановитьЗаголовкиСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПоложениеРеквизитаЗадание = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") 
		И ЗначениеЗаполнено(Объект.Задание) Тогда
		
		Если НоваяСтрока Тогда
			
			Структура = ПолучитьДанныеПоЗаданию(Объект.Задание);
			
			Если ТекущиеДанные.Количество = 0 Тогда
				ТекущиеДанные.Количество = 1;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
			//ТекущиеДанные.Цена = УправлениеSLA.ЦенаУслугиКлиента(Структура.Дата, ТекущиеДанные.Клиент, ТекущиеДанные.Услуга); 
			РассчитатьСумму(ТекущиеДанные);
						
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриИзмененииЗначимогоДляЦеныРеквизита(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПоложениеРеквизитаЗадание = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") 
		И ЗначениеЗаполнено(Объект.Задание) Тогда
				
		Если Элемент.Имя = "РаботыКлиент"
			ИЛИ Элемент.Имя = "РаботыИнициатор"
			ИЛИ Элемент.Имя = "РаботыСервис"
			ИЛИ Элемент.Имя = "РаботыУслуга" Тогда
		
			Структура = ПолучитьДанныеПоЗаданию(Объект.Задание);
			
			Если Элемент.Имя <> "РаботыТариф" Тогда
				ТекущиеДанные.Тариф = Структура.Тариф;
			КонецЕсли;
			ТекущиеДанные.Цена = Структура.Цена; 
			РассчитатьСумму(ТекущиеДанные);
			
		КонецЕсли;
				
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьЗаголовкиСтраниц();	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, 
		СтрокаТабличнойЧасти.СуммаНДС);
	
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.РаботыСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.РаботыСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, 
		СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыУслугаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", 		Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", 			Объект.Контрагент);
	СтруктураДанные.Вставить("Клиент", 				СтрокаТабличнойЧасти.Клиент);
	СтруктураДанные.Вставить("Услуга", 				СтрокаТабличнойЧасти.Услуга);
	СтруктураДанные.Вставить("НалогообложениеНДС", 	Объект.НалогообложениеНДС);
	Если НЕ Объект.Ссылка.Пустая() Тогда
		СтруктураДанные.Вставить("ДатаАктуальности",Объект.Дата);
	Иначе
		СтруктураДанные.Вставить("ДатаАктуальности",ТекущаяДатаНаСервере());
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеУслугиПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество 	= 1;
	КонецЕсли;
	СтрокаТабличнойЧасти.Цена 				= СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС 			= СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Тариф 				= СтруктураДанные.Тариф;
	СтрокаТабличнойЧасти.Описание 			= СтруктураДанные.Описание;
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, 
		СтрокаТабличнойЧасти.СуммаНДС)
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма 
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();	
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыКлиентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") 			
			И ЭтоТипОрганизация(ВыбранноеЗначение) Тогда
			СтандартнаяОбработка = Ложь;
					
			ОткрытьФормуВыбораОрганизации("Клиент");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоТипОрганизация(Знач Значение)	
	
	Возврат Метаданные.НайтиПоТипу(Значение).Имя = "Организации";
	
КонецФункции	

&НаКлиенте
Процедура РаботыИнициаторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") 
			И ЭтоТипОрганизация(ВыбранноеЗначение) Тогда
			СтандартнаяОбработка = Ложь;
					
			ОткрытьФормуВыбораОрганизации("Инициатор");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваНоменклатуры

&НаКлиенте
Процедура НоменклатураНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.Номенклатура.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("Ключ", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТабличнойЧасти.Номенклатура);	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения     = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество           = 1;
	СтрокаТабличнойЧасти.Цена                 = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС            = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.НавСсылка            = СтруктураДанные.НавСсылка;
	СтрокаТабличнойЧасти.КарточкаНоменклатуры = СтруктураДанные.КарточкаНоменклатуры;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
		
	Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр = 
		НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, 
			ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	КонецЕсли;	
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = 
			СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли; 		
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр 	= 
		НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
	Элементы.ДеревоНоменклатурыИнвентарныйНомер.ТолькоПросмотр 		= 
		Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;
	Элементы.ДеревоНоменклатурыСерийныйНомер.ТолькоПросмотр 		= 
		Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;	
	Элементы.ДеревоНоменклатурыКоличество.ТолькоПросмотр 			= 
		НЕ Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;
	Элементы.ДеревоНоменклатурыЕдиницаИзмерения.ТолькоПросмотр 		= 
		НЕ Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;
	
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриИзменении(Элемент)
	
	ОбновитьНумерациюВДеревеЗначенийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСерийныйНомерПриИзменении(Элемент)
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьНомерНаСервере(Элементы.ДеревоНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры, "СерийныйНомер", 
		Элементы.ДеревоНоменклатуры.ТекущиеДанные.СерийныйНомер);
	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыИнвентарныйНомерПриИзменении(Элемент)
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьНомерНаСервере(Элементы.ДеревоНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры, "ИнвентарныйНомер", 
		Элементы.ДеревоНоменклатуры.ТекущиеДанные.ИнвентарныйНомер);
	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередУдалением(Элемент, Отказ)
	
	// Удаляем только верхнюю строку
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя удалять вложенную номенклатуру'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма 
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Итоговая сумма в документе
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма 
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Итоговая сумма в документе
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
		
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПослеУдаления(Элемент)
	
	СохранитьДеревоНоменклатуры();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыМатериалы

&НаКлиенте
Процедура МатериалыЗаказчикаНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаПослеУдаления(Элемент)
	
	УстановитьЗаголовкиСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьЗаголовкиСтраниц();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДинамическогоСпискаТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если КоличествоЗаписейТрудозатрат > 0 И ПоследняяДатаОкончанияТрудозатратОбъекта() = Дата(1, 1, 1) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Установите дату окончания в последней строке для добавления новых данных по трудозатратам'"), ,
			Элементы.Трудозатраты);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоследняяДатаОкончанияТрудозатратОбъекта()
	
	Возврат ТрудозатратыСервер.ПоследняяДатаОкончанияТрудозатратОбъекта(Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ТрудозатратыПослеУдаления(Элемент)
	
	ОбновитьЗаголовокТрудозатрат();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	СохранитьДеревоНоменклатуры();
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), 
		Объект.ВалютаДокумента);
	
	ВывестиДеревоНоменклатуры();
	
	// Разворачиваем дерево
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;		
	
КонецПроцедуры // РедактироватьЦеныИВалюту

&НаКлиенте
Процедура Подбор(Команда)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	// Сохраняем то, что сейчас в дереве.		
	СохранитьДеревоНоменклатуры();
	
	// Показываем форму.
	Структура = Новый Структура;
	Структура.Вставить("Организация", Объект.Организация);
	Структура.Вставить("МестоХранения", Объект.МестоХранения);
	Если Объект.Ссылка.Пустая() Тогда
		Структура.Вставить("ДатаАктуальности", КонецДня(ТекущаяДатаНаСервере()));
	Иначе
		Структура.Вставить("ДатаАктуальности", Объект.Дата);
	КонецЕсли;
	Структура.Вставить("ОрганизацияТолькоПросмотр", Истина);
	Структура.Вставить("МестоХраненияТолькоПросмотр", Истина);
	Структура.Вставить("КонтрагентТолькоПросмотр", Истина);
	Структура.Вставить("ДатаАктуальностиТолькоПросмотр", Истина);
	Структура.Вставить("АдресВыбраннойНоменклатуры", ПолучитьНоменклатуруВДокументе());
		
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", Структура, ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, "ДокументНарядНаРаботы (подборОткрытие)");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат <> Неопределено Тогда
        // Очистка номенклатуры
        Объект.Номенклатура.Очистить();
        
        ПодборНаСервере(Результат);
        
        ВывестиДеревоНоменклатуры();
		ОбновитьИнвентарныеИСерийныеНомераНаСервере();	
        
        // Разворачиваем сформированное дерево номенклатуры
		УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
		
		Для Каждого Строки Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строки);
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодборНаСервере(АдресТЗ)	
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	
	// Добавляем Результат в таблицу
	Для Каждого Строки Из ТЗ Цикл
		НоваяСтрока = Объект.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
		НоваяСтрока.Количество = Строки.КоличествоВыбрано;		
		РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НоваяСтрока);
	КонецЦикла;	
	
	УдалитьИзВременногоХранилища(АдресТЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОповещенияПриЗагрузкеИзТСД = Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗагрузкеИзТСД, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") 
	   И Результат.Количество() > 0 Тогда
		ПолученыШтрихкоды(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьИнвентарныеИСерийныеНомера(Команда)
	Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = 
		НЕ Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
	УправлениеITОтделом8УФ.СохранитьНастройкуОтображатьИнвентарныеСерийныеНомера(
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка);
	УстановитьВидимостьДоступность();
	ОбновитьИнвентарныеИСерийныеНомераНаСервере();	
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строки Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки = Строки.ПолучитьИдентификатор();
		Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);		
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокумента(Команда)
	
	// Формируем структуру параметров для заполнения формы "Настройка документа".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоложениеСтатьиДоходовРасходов",	Объект.ПоложениеСтатьиДоходовРасходов);
	СтруктураПараметров.Вставить("ПоложениеРеквизитаПользователь", 	Объект.ПоложениеРеквизитаПользователь);
	СтруктураПараметров.Вставить("ПоложениеРеквизитаЗадание", 		Объект.ПоложениеРеквизитаЗадание);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", 			Ложь);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаДокумента", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("НастройкаДокументаЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт    
    
    СтруктураНастройкаДокумента = Результат;
    
    // Применяем изменения, сделанные в форме "Настройка документа".
	Если ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") И СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда
		Объект.ПоложениеСтатьиДоходовРасходов	= СтруктураНастройкаДокумента.ПоложениеСтатьиДоходовРасходов;		
        Объект.ПоложениеРеквизитаПользователь	= СтруктураНастройкаДокумента.ПоложениеРеквизитаПользователь;
        Объект.ПоложениеРеквизитаЗадание		= СтруктураНастройкаДокумента.ПоложениеРеквизитаЗадание;
        УстановитьВидимостьДоступность();
		ОбновитьДанныеПоЗаданию();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Нажатия кнопки ПодсказкаСостояние.
//
Процедура ПодсказкаСостояниеНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Состояние заказа'"));
	ПараметрыОткрытия.Вставить("КлючПодсказки", "Поступление_УчитыватьТолькоКомплекты");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);
	
КонецПроцедуры // ПодсказкаСостояниеНажатие()

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТрудозатратыПоРаботамУслугам(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для продолжения необходимо записать документ.'"));
		Возврат;
	КонецЕсли;
	
	Если КоличествоЗаписейТрудозатратОбъекта() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТрудозатратыВопрос", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'По документу, уже введены трудозатраты. Очистить? (Да - очистить, Нет - добавить к существующим)'"),
			РежимДиалогаВопрос.ДаНет, 60);
	Иначе
		ДобавитьТрудозатратыФрагмент();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, 
	СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область БПО

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.Договор.Видимость = 
		ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты");
	Элементы.ГруппаМатериалыЗаказчика.Видимость =
		ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты");
	Элементы.Контрагент.Заголовок = 
		?(ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Контрагенты"), "Клиент", "Контрагент");
	
	Элементы.СтатьяДоходовРасходов.Видимость = 
		Объект.ПоложениеСтатьиДоходовРасходов = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	Элементы.ДеревоНоменклатурыСтатьяДоходовРасходов.Видимость = 
		Объект.ПоложениеСтатьиДоходовРасходов = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	Элементы.РаботыСтатьяДоходовРасходов.Видимость  = 
		Объект.ПоложениеСтатьиДоходовРасходов = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	
	Элементы.ДеревоНоменклатурыСерийныйНомер.Видимость = 
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
	Элементы.ДеревоНоменклатурыИнвентарныйНомер.Видимость = 
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
	
	// Пользователь
	ВШапке 									= Объект.ПоложениеРеквизитаПользователь = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	Элементы.Подразделение.Видимость		= ВШапке;
	Элементы.Пользователь.Видимость			= ВШапке;
	
	Элементы.РаботыПодразделение.Видимость	= НЕ ВШапке;
	Элементы.РаботыПользователь.Видимость	= НЕ ВШапке;
	
	// Заказчик
	ВШапке									= Объект.ПоложениеРеквизитаЗадание = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	Элементы.Задание.Видимость				= ВШапке;
	Элементы.РаботыЗадание.Видимость		= НЕ ВШапке;
	
	УстановитьЗаголовкиСтраниц();		
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти)
	
   Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти, "НеОблагается");
   
КонецФункции

&НаСервере
Процедура УстановитьЗаголовкиСтраниц()
	
	Элементы.ГруппаНоменклатура.Заголовок = НСтр("ru = 'Номенклатура'") 
		+ ?(Объект.Номенклатура.Количество() > 0, " (" + Строка(Объект.Номенклатура.Количество()) + ")", "");
	
КонецПроцедуры

&НаСервере
Функция ЗначениеНаСервере(Стр, Параметры = Неопределено)
	Если Параметры = Неопределено Тогда
		Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(Стр, Параметры);
	Иначе
		Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(Стр, Параметры);
	КонецЕсли;	
КонецФункции

&НаКлиенте
// Процедура производит расчет суммы.
//
// Параметры:
//  Нет.
//
Процедура РассчитатьСумму(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	КонецЕсли;
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, 
		СтрокаТабличнойЧасти.СуммаНДС);
		
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();	
	
КонецПроцедуры

&НаКлиенте
// Процедура производит расчет суммы.
//
// Параметры:
//  Нет.
//
Процедура РассчитатьСуммуДеревоНоменклатуры(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	КонецЕсли;
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма 
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", 
		УправлениеITОтделом8УФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияНачалоВыбораИзСписка.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	
	СписокЕдиницаИзмерения = Новый СписокЗначений;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);
	
	СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, 
		Номенклатура.ЕдиницаИзмерения.Наименование + " " + НСтр("ru = '(ед. хранения)'"));
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Номенклатура);
	
	Родитель = Номенклатура.Родитель;
	
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Прервать;
		Иначе
			МассивОтбора.Добавить(Родитель);
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	КонецЦикла;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка()	

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, 
	ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервере
Процедура ОбновитьРеквизитыБюджетов()
	Объект.Бюджет			= УправлениеITОтделом8УФ.НайтиБюджетНаДату(Объект.Дата, Объект.Организация);
	Объект.ПериодБюджета	= УправлениеITОтделом8УФ.НайтиПериодБюджета(Объект.Дата, Объект.Бюджет);
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Содержание", СтруктураДанные.Номенклатура.Наименование);
	
	Если ТипЗнч(СтруктураДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	Иначе
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.Владелец.ЕдиницаИзмерения);
	КонецЕсли;
	
	СтруктураДанные.Вставить("НавСсылка", СтруктураДанные.Номенклатура.ВидНоменклатуры.НавСсылка);
	
	// Проверка, что ведется учет по карточкам
	СтруктураДанные.Вставить("КарточкаНоменклатуры", 
		УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(СтруктураДанные.Номенклатура));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	КонецЕсли;
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, 
		СтрокаТабличнойЧасти.СуммаНДС);
		
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();	
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

// Процедура рассчитывает сумму в строке табличной части.
//
&НаСервере
Процедура РассчитатьСуммуВСтрокеТабличнойЧастиСервер(СтрокаТабличнойЧасти)
		
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДССервер(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, 
		СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧастиСервер()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента() 

// Рассчитывается сумма НДС в строке табличной части.
//
&НаСервере
Процедура РассчитатьСуммуНДССервер(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента()

&НаСервере
// Сохранения дерева номенклатуры
Процедура СохранитьДеревоНоменклатуры(ТекущийОбъект =  Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекОбъект = РеквизитФормыВЗначение("Объект");	
	Иначе
		ТекОбъект = ТекущийОбъект;
	КонецЕсли;
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	
	ОбработкаТабличныхЧастей.СохранитьДеревоНоменклатуры(ДЗ, ТекОбъект.Номенклатура);
	
	Если ТекущийОбъект = Неопределено Тогда
		ЗначениеВДанныеФормы(ТекОбъект, Объект);
	КонецЕсли;
	
	УстановитьЗаголовкиСтраниц();
	
КонецПроцедуры

&НаСервере
// Вывод дерева номенклатуры
Процедура ВывестиДеревоНоменклатуры()
	
	ТЗ = Объект.Номенклатура.Выгрузить();
	ТЗ.Колонки.Добавить("НавСсылка");
	Для каждого Строки Из ТЗ Цикл
		Строки.НавСсылка = УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(Строки.Номенклатура);		
	КонецЦикла;
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	ДЗ.Строки.Очистить();	
	УправлениеITОтделом8УФ.ВывестиДеревоНоменклатуры(ДЗ, ТЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
	
	УстановитьЗаголовкиСтраниц();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНумерациюВДеревеЗначенийНаСервере()
	
	ОбработкаТабличныхЧастей.ОбновитьНумерациюВДереве(ДеревоНоменклатуры);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнвентарныеИСерийныеНомераНаСервере()
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	УправлениеITОтделом8УФ.ОбновитьИнвентарныеИСерийныеНомера(ДЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияИПодразделениеПользователя(Пользователь)
	
	Сотрудник = Пользователь.Сотрудник;
	Структура = Новый Структура();
	Структура.Вставить("Организация", 
		?(НЕ ЗначениеЗаполнено(Сотрудник), Справочники.Организации.ПустаяСсылка(), Сотрудник.Организация));
	Структура.Вставить("Подразделение", 
		?(НЕ ЗначениеЗаполнено(Сотрудник), Справочники.Подразделения.ПустаяСсылка(), Сотрудник.Подразделение));
	
	Возврат Структура;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоЗаданию(Знач Задание)
	
	Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, "Дата, Ссылка, Приоритет, Инициатор, Тема,
		|КрайняяДатаВыполнения, Сервис, Услуга, ТекущийИсполнитель, ДатаКорректировки, Подразделение, Клиент");
	
	Если ЗначениеЗаполнено(Структура.Услуга) Тогда
		Структура.Вставить("ЕдиницаИзмерения", Структура.Услуга.ЕдиницаИзмерения);
	КонецЕсли;
	
	СтруктураУслугиСервиса = УправлениеSLA.УслугаСервиса(Структура.Дата, Структура.Клиент, Структура.Услуга);
	Структура.Вставить("Тариф", СтруктураУслугиСервиса.Тариф);
	Структура.Вставить("Цена", УправлениеSLA.ЦенаУслугиКлиента(Структура.Дата, Структура.Клиент, Структура.Услуга));
	Структура.Вставить("Описание", Строка(Структура.Услуга));
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеПоЗаданию()
	
	Если Объект.ПоложениеРеквизитаЗадание = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Задание) Тогда
			Возврат;
		КонецЕсли;
		
		Структура = ПолучитьДанныеПоЗаданию(Объект.Задание);
		
		Для Каждого Строки Из Объект.Работы Цикл
			
			Строки.Задание 			= Структура.Ссылка;
			Строки.Инициатор 		= Структура.Инициатор;
			Строки.Клиент	 		= Структура.Клиент;
			Строки.Сервис	 		= Структура.Сервис;
			Строки.Услуга	 		= Структура.Услуга;
			Строки.Описание			= Строка(Структура.Услуга);
			Строки.Подразделение	= Структура.Подразделение;
			Строки.Пользователь		= Структура.ТекущийИсполнитель;
			Если Структура.Свойство("ЕдиницаИзмерения") Тогда
				Строки.ЕдиницаИзмерения	= Структура.ЕдиницаИзмерения;
			КонецЕсли;
			Строки.Цена				= Структура.Цена;
			
			// Сумма.
			Строки.Сумма = Строки.Количество * Строки.Цена;
			
			// Сумма НДС.
			РассчитатьСуммуНДС(Строки);
			
			// Всего.
			Строки.Всего = Строки.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строки.СуммаНДС);			
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.РаботыСтавкаНДС.Видимость = Истина;
		Элементы.РаботыСуммаНДС.Видимость = Истина;
		Элементы.РаботыВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
			
			СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;		
			СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма 
				+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.РаботыСтавкаНДС.Видимость = Ложь;
		Элементы.РаботыСуммаНДС.Видимость = Ложь;
		Элементы.РаботыВсего.Видимость = Ложь;

		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
		    СтавкаНДСПоУмолчанию = УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = 'Валюта: %Валюта%, курс: %Курс%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", ?((НЕ ЗначениеЗаполнено(СтруктураНадписи.ВалютаРасчетов)) 
				ИЛИ СтруктураНадписи.ВалютаДокумента = СтруктураНадписи.ВалютаРасчетов, 
					СокрЛП(Строка(СтруктураНадписи.Курс)), СокрЛП(Строка(СтруктураНадписи.КурсНациональнаяВалюта))));
		Иначе
			ТекстНадписи = НСтр("ru = 'Валюта: <нет>'");
		КонецЕсли;
	КонецЕсли;
			
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = '; %НалогообложениеНДС%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", 
			СокрЛП(Строка(СтруктураНадписи.НалогообложениеНДС)));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе		
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;	
	КонецЕсли;	
 
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

// Процедура выполняет пересчет в табличной части документа после изменений,
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, 
	ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.Договор);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);	
	
	ВалютаСтруктура = Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, 
		Оповещение);
	
	// 2. Открываем форму "Цены и Валюта".
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтаФорма, 
		ВалютаСтруктура);
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = Результат;
	Оповещение           = ДополнительныеПараметры.Оповещение;
	// 3. Перезаполняем табличную часть "НОМЕНКЛАТУНА" если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		Объект.ВалютаДокумента 		= СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.Курс 				= СтруктураЦеныИВалюта.КурсРасчетов;
		Объект.Кратность 			= СтруктураЦеныИВалюта.КратностьРасчетов;
		Объект.НалогообложениеНДС 	= СтруктураЦеныИВалюта.НалогообложениеНДС;
		Объект.СуммаВключаетНДС 	= СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость= СтруктураЦеныИВалюта.НДСВключатьВСтоимость;
				
		// Пересчитываем цены по валюте.
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			  И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда
			УправлениеITОтделом8УФКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, 
				ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Работы");
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			И НЕ СтруктураЦеныИВалюта.СуммаВключаетНДС = СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
			УправлениеITОтделом8УФКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Работы");
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов",			ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс",					Объект.Курс);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта",	КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций",	УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	ЦеныИВалюта      = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
		
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
		   
		    Если ТипЗнч(ДанныеШтрихкода.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				НоменклатураШтрихкода			= ДанныеШтрихкода.Номенклатура;
				КарточкаНоменклатурыШтрихкода	= 
					УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(НоменклатураШтрихкода);
		    Иначе
				НоменклатураШтрихкода			= ДанныеШтрихкода.Номенклатура.Владелец;
				КарточкаНоменклатурыШтрихкода	= ДанныеШтрихкода.Номенклатура;			   				
			КонецЕсли;
					   
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", 			СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", 			НоменклатураШтрихкода);
			СтруктураДанныеНоменклатуры.Вставить("КарточкаНоменклатуры", 	КарточкаНоменклатурыШтрихкода);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", 		
				ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = НоменклатураШтрихкода.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СохранитьДеревоНоменклатуры();
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);	
	МассивВывода = Новый Массив;
	
	Для Каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
				
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		Иначе
						
			МассивВывода.Добавить(ДобавитьНоменклатуруВДокумент(ДанныеШтрихкода));
			
		КонецЕсли;
	КонецЦикла;
	
	// Вывод дерева	ю
	ОбработатьВыводДереваНоменклатуры(МассивВывода);
	
	Возврат НеизвестныеШтрихкоды;
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов)
	
	Модифицированность = Истина;
	
	НеизвестныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	
	ВозвращаемыеПараметры = Неопределено;
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеизвестныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Истина);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", Неопределено);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ПолучитьНоменклатуруВДокументе()
	ТЗ = Объект.Номенклатура.Выгрузить();
	
	Возврат ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)

	// Может содержать дочерние
	Если НовыйРодитель <> Неопределено Тогда
		Если ЗначениеЗаполнено(НовыйРодитель.Номенклатура) Тогда
			Параметр = Новый Структура();
			Параметр.Вставить("Номенклатура", НовыйРодитель.Номенклатура);
			Если НЕ ЗначениеНаСервере("Параметры.Номенклатура.ВидНоменклатуры.МожетИметьКомплектующие", Параметр) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	// Родитель в родителе
    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
	КонецЦикла;
	
    Возврат Истина;

КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен.
    // Это происходит если выделены несколько элементов,
    // одной и той же ветви дерева на разных уровнях иерархии.
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
            [КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Если Источник.ПолучитьРодителя() = Неопределено Тогда
        РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
    Иначе
        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

&НаСервере
Функция ПроверитьМожетЛиИметьКомплектующие(Номенклатура)
	Возврат Номенклатура.ВидНоменклатуры.МожетИметьКомплектующие;
КонецФункции

&НаСервере
Процедура ИзменитьНомерНаСервере(Карточка, ИмяРеквизита, Значение)
	Если ЗначениеЗаполнено(Карточка) Тогда
		Попытка
			ОбъектКарточки = Карточка.ПолучитьОбъект();
			ОбъектКарточки[ИмяРеквизита] = Значение;
			ОбъектКарточки.Записать();
			СохранитьДеревоНоменклатуры();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
				
	КонецЕсли;
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеУслугиПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Описание", 			СтруктураДанные.Услуга.Наименование);	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", 	СтруктураДанные.Услуга.ЕдиницаИзмерения);	
	СтруктураДанные.Вставить("СтавкаНДС", 			СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	
	// Тариф.
	УслугаСервиса = УправлениеSLA.УслугаСервиса(СтруктураДанные.ДатаАктуальности, СтруктураДанные.Клиент, 
		СтруктураДанные.Услуга);
	СтруктураДанные.Вставить("Тариф", 				УслугаСервиса.Тариф);
	
	// Цена.
	Цена = 0;
	Если ЗначениеЗаполнено(СтруктураДанные.Услуга) И ЗначениеЗаполнено(УслугаСервиса.Тариф) Тогда
		
		Если СтруктураДанные.Свойство("ДатаАктуальности") Тогда
			ДатаАктуальности = СтруктураДанные.ДатаАктуальности;
		Иначе
			ДатаАктуальности = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЦеныУслугСрезПоследних.Цена КАК Цена
			|ИЗ
			|	РегистрСведений.ЦеныУслуг.СрезПоследних(
			|			&ДатаАктуальности,
			|			Тариф = &Тариф
			|				И Услуга = &Услуга) КАК ЦеныУслугСрезПоследних";
		Запрос.УстановитьПараметр("Тариф", 				УслугаСервиса.Тариф);
		Запрос.УстановитьПараметр("Услуга", 			СтруктураДанные.Услуга);
		Запрос.УстановитьПараметр("ДатаАктуальности", 	ДатаАктуальности);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Цена = Выборка.Цена;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("Цена", Цена);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервере
Функция РассчитатьСуммуДокумента()
	
	ДЗНоменклатура = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	Результат = Объект.Работы.Итог("Всего") + ДЗНоменклатура.Строки.Итог("Всего", Истина);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНоменклатуруВДокумент(СтруктураНоменклатуры)
	
	ВерхняяНоменклатура = СтруктураНоменклатуры.Номенклатура;	
	НайденнаяНоменклатура = Новый Структура;	
	
	Если ТипЗНЧ(ВерхняяНоменклатура) = Тип("СправочникСсылка.Номенклатура") 
		И ВерхняяНоменклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры = Истина	Тогда 
		НайденнаяНоменклатура.Вставить("НуженВыводДерева",Ложь);
		НайденнаяНоменклатура.Вставить("СообщениеПользователю", 
			СтрШаблон(НСтр("ru = 'Для номенклатуры ""%1"" в ее виде указано ""Вести учет по карточкам"". Используйте штрих-код из карточки номенклатуры.'"), 
				ВерхняяНоменклатура));
		Возврат НайденнаяНоменклатура;
	КонецЕсли;
	
	ПериодДляЗапроса = ?(Объект.Ссылка.Пустая(), ТекущаяДатаСеанса(), Объект.Дата);
	
	СтруктураКоличество = ПолучитьОстаткиПоНоменклатуре(ВерхняяНоменклатура,ПериодДляЗапроса);
	
	// Нет на остатках.
	Если СтруктураКоличество = Неопределено Тогда		
		СтруктураКоличество = Новый Структура;		
		СтруктураКоличество.Вставить("Комплект", 		ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
		СтруктураКоличество.Вставить("Партия", 			ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
		СтруктураКоличество.Вставить("Номенклатура", 	ВерхняяНоменклатура);
		СтруктураКоличество.Вставить("Количество", 		0);
		СтруктураКоличество.Вставить("Цена", 			0);
		СтруктураКоличество.Вставить("Сумма", 			0);
	КонецЕсли;	
	
	НайденнаяНоменклатура.Вставить("НоменклатураШК",	 		ВерхняяНоменклатура);		
	НайденнаяНоменклатура.Вставить("Партия", 					СтруктураКоличество.Партия);				
	НайденнаяНоменклатура.Вставить("Комплект", 					СтруктураКоличество.Комплект);				
	
	// Это "свернутый" комплект.
	Если ЗначениеЗаполнено(НайденнаяНоменклатура.Комплект) Тогда			
		
		ОстаткиПоКомплекту = ПолучитьОстаткиПоНоменклатуре(СтруктураКоличество.Комплект,ПериодДляЗапроса);
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Истина);
		НайденнаяНоменклатура.Вставить("Номенклатура",			СтруктураКоличество.Комплект.Владелец);
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	СтруктураКоличество.Комплект);
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		СтруктураКоличество.Комплект.Владелец.ЕдиницаИзмерения);
		НайденнаяНоменклатура.Вставить("Количество",			ОстаткиПоКомплекту.Количество);
		НайденнаяНоменклатура.Вставить("Цена",					ОстаткиПоКомплекту.Цена);
		НайденнаяНоменклатура.Вставить("Сумма",					ОстаткиПоКомплекту.Сумма);			
		НайденнаяНоменклатура.Вставить("Партия", 				ОстаткиПоКомплекту.Партия);				
		НайденнаяНоменклатура.Вставить("Комплект", 				ОстаткиПоКомплекту.Комплект);
		СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура);
		НайденнаяНоменклатура.Вставить("НуженВыводДерева",		Истина);
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Истина);			
		Возврат НайденнаяНоменклатура;
		
	КонецЕсли;		
	
	// Подчиненная номенклатура.
	Если ЗначениеЗаполнено(НайденнаяНоменклатура.Партия) Тогда			
		
		НоменклатураВерхнегоУровня = ПолучитьВерхнююНоменклатуруПоКомплектующей(НайденнаяНоменклатура.Партия,ПериодДляЗапроса);
		ОстаткиПоКомплекту = ПолучитьОстаткиПоНоменклатуре(НоменклатураВерхнегоУровня,ПериодДляЗапроса);
		Если ТипЗНЧ(НоменклатураВерхнегоУровня)= Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
			НайденнаяНоменклатура.Вставить("Номенклатура",			НоменклатураВерхнегоУровня.Владелец);
			НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	НоменклатураВерхнегоУровня);
			НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		НоменклатураВерхнегоУровня.Владелец.ЕдиницаИзмерения);
		Иначе
			НайденнаяНоменклатура.Вставить("Номенклатура",			НоменклатураВерхнегоУровня);				
			НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",
			УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(НоменклатураВерхнегоУровня));
			НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		НоменклатураВерхнегоУровня.ЕдиницаИзмерения);
		КонецЕсли;
		НайденнаяНоменклатура.Вставить("Количество",				ОстаткиПоКомплекту.Количество);
		НайденнаяНоменклатура.Вставить("Цена",						ОстаткиПоКомплекту.Цена);
		НайденнаяНоменклатура.Вставить("Сумма",						ОстаткиПоКомплекту.Сумма);
		НайденнаяНоменклатура.Вставить("Партия", 					ОстаткиПоКомплекту.Партия);				
		НайденнаяНоменклатура.Вставить("Комплект", 					ОстаткиПоКомплекту.Комплект);
		СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура);
		
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Ложь);
		НайденнаяНоменклатура.Вставить("НуженВыводДерева",Истина);
		ЗаполнитьПодчиненнуюНоменклатуру(ПериодДляЗапроса,НоменклатураВерхнегоУровня);
		Возврат НайденнаяНоменклатура;
		
	КонецЕсли;
	
	Если Не ВерхняяНоменклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
		НайденнаяНоменклатура.Вставить("Номенклатура",			ВерхняяНоменклатура);			
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",
		УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(ВерхняяНоменклатура));
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		ВерхняяНоменклатура.ЕдиницаИзмерения);
	Иначе	
		НайденнаяНоменклатура.Вставить("Номенклатура",			ВерхняяНоменклатура.Владелец);
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	ВерхняяНоменклатура);
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		ВерхняяНоменклатура.Владелец.ЕдиницаИзмерения);
	КонецЕсли;
	
	НайденнаяНоменклатура.Вставить("Количество", 	СтруктураКоличество.Количество);				
	НайденнаяНоменклатура.Вставить("Цена",	 		СтруктураКоличество.Цена);
	НайденнаяНоменклатура.Вставить("Сумма",	 		СтруктураКоличество.Сумма);
	
	СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура);
	НайденнаяНоменклатура.Вставить("НуженВыводДерева",Истина);
	
	ЗаполнитьПодчиненнуюНоменклатуру(ПериодДляЗапроса, ?(ЗначениеЗаполнено(НайденнаяНоменклатура.КарточкаНоменклатуры), 
		НайденнаяНоменклатура.КарточкаНоменклатуры,	НайденнаяНоменклатура.Номенклатура));
	
	Возврат НайденнаяНоменклатура;	
	
КонецФункции

&НаСервере
Функция ПолучитьОстаткиПоНоменклатуре(ВерхняяНоменклатура, ПериодДляЗапроса)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", ПериодДляЗапроса);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомплектацияОстатки.Комплект,
		|	КомплектацияОстатки.Партия КАК Партия,
		|	КомплектацияОстатки.Номенклатура КАК Номенклатура,
		|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КомплектацияОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) / КомплектацияОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Цена,
		|	ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.Комплектация.Остатки(
		|			&Период,
		|			ВЫБОР
		|					КОГДА ТИПЗНАЧЕНИЯ(Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|				И Номенклатура = &Номенклатура) КАК КомплектацияОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) / ОстаткиОстатки.КоличествоОстаток
		|	КОНЕЦ,
		|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0)
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Номенклатура = &Номенклатура) КАК ОстаткиОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	РемонтыОстатки.Партия,
		|	РемонтыОстатки.Номенклатура,
		|	РемонтыОстатки.КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РемонтыОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(РемонтыОстатки.СуммаОстаток, 0) / РемонтыОстатки.КоличествоОстаток
		|	КОНЕЦ,
		|	ЕСТЬNULL(РемонтыОстатки.СуммаОстаток, 0)
		|ИЗ
		|	РегистрНакопления.Ремонты.Остатки(&Период, Номенклатура = &Номенклатура) КАК РемонтыОстатки";
		
	Запрос.УстановитьПараметр("Номенклатура", ВерхняяНоменклатура);
	Выборка			  = Запрос.Выполнить().Выбрать();	
	СтруктураВозврата = Неопределено;
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Комплект", 		Выборка.Комплект);
		СтруктураВозврата.Вставить("Партия", 		Выборка.Партия);
		СтруктураВозврата.Вставить("Номенклатура", 	Выборка.Номенклатура);
		СтруктураВозврата.Вставить("Количество", 	Выборка.Количество);
		СтруктураВозврата.Вставить("Цена", 			Выборка.Цена);
		СтруктураВозврата.Вставить("Сумма", 		Выборка.Сумма);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура)
	
	Если НайденнаяНоменклатура.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
		МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура,Партия,КарточкаНоменклатуры",
			НайденнаяНоменклатура.Номенклатура,НайденнаяНоменклатура.Партия,НайденнаяНоменклатура.КарточкаНоменклатуры));
	Иначе
		МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура,Партия",
			НайденнаяНоменклатура.Номенклатура,НайденнаяНоменклатура.Партия));
	КонецЕсли;
	
	Если МассивСтрокТЧ.Количество() = 0 Тогда
		НоваяСтрока = Объект.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяНоменклатура);
		НоваяСтрока.Количество 		= НайденнаяНоменклатура.Количество;		
		НоваяСтрока.Цена			= НайденнаяНоменклатура.Цена;
		НоваяСтрока.Сумма			= НоваяСтрока.Цена*НоваяСтрока.Количество;
		РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НоваяСтрока);								
	Иначе		
		НайденнаяСтрока 			= МассивСтрокТЧ[0];
		НайденнаяСтрока.Количество 	= НайденнаяСтрока.Количество + НайденнаяНоменклатура.Количество;		
		НайденнаяСтрока.Сумма 		= НайденнаяСтрока.Цена * НайденнаяСтрока.Количество;
		РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НайденнаяСтрока);					
	КонецЕсли;		
КонецПроцедуры

// Получает номенклатуру самого верхнего уровня в комплекте.
//
&НаСервере
Функция ПолучитьВерхнююНоменклатуруПоКомплектующей(Комплектующая, Период)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиОстатки.Партия
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Номенклатура = &Номенклатура) КАК ОстаткиОстатки";
	
	Запрос.УстановитьПараметр("Номенклатура", Комплектующая);
	Запрос.УстановитьПараметр("Период"		, Период);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Партия) Тогда			
			Возврат ПолучитьВерхнююНоменклатуруПоКомплектующей(ВыборкаДетальныеЗаписи.Партия, Период);
		Иначе 
			Возврат Комплектующая;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции 

&НаСервере
Функция ЗаполнитьПодчиненнуюНоменклатуру(Период, НоменклатураВладелец)	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомплектацияОстатки.Комплект,
		|	КомплектацияОстатки.Партия КАК Партия,
		|	КомплектацияОстатки.Номенклатура КАК Номенклатура,
		|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КомплектацияОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) / КомплектацияОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Цена,
		|	ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.Комплектация.Остатки(&Период, Комплект = &Партия) КАК КомплектацияОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) / ОстаткиОстатки.КоличествоОстаток
		|	КОНЕЦ,
		|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0)
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Партия = &Партия) КАК ОстаткиОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	РемонтыОстатки.Партия,
		|	РемонтыОстатки.Номенклатура,
		|	РемонтыОстатки.КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РемонтыОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(РемонтыОстатки.СуммаОстаток, 0) / РемонтыОстатки.КоличествоОстаток
		|	КОНЕЦ,
		|	ЕСТЬNULL(РемонтыОстатки.СуммаОстаток, 0)
		|ИЗ
		|	РегистрНакопления.Ремонты.Остатки(&Период, Партия = &Партия) КАК РемонтыОстатки";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Партия", НоменклатураВладелец);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Комплект) Тогда Возврат Неопределено КонецЕсли;
		
		Если ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
			
			Номенклатура			= Выборка.Номенклатура.Владелец;
			КарточкаНоменклатуры	= Выборка.Номенклатура;
			
		Иначе
			
			Номенклатура			= Выборка.Номенклатура;
			КарточкаНоменклатуры	= 
				УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Выборка.Номенклатура);
			
		КонецЕсли;
		
		ПодчиненнаяНоменклатура = Новый Структура;
		ПодчиненнаяНоменклатура.Вставить("Номенклатура",		Номенклатура);		
		ПодчиненнаяНоменклатура.Вставить("Партия", 				НоменклатураВладелец);
		ПодчиненнаяНоменклатура.Вставить("КарточкаНоменклатуры",КарточкаНоменклатуры);
		ПодчиненнаяНоменклатура.Вставить("Комплект",			
			?(НоменклатураВладелец = Номенклатура, Справочники.КарточкиНоменклатуры.ПустаяСсылка(), НоменклатураВладелец));
		ПодчиненнаяНоменклатура.Вставить("Сумма",				Выборка.Сумма);
		ПодчиненнаяНоменклатура.Вставить("ЕдиницаИзмерения", 	Номенклатура.ЕдиницаИзмерения);
		
		МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура,Партия,КарточкаНоменклатуры", 
			ПодчиненнаяНоменклатура.Номенклатура, ПодчиненнаяНоменклатура.Партия, ПодчиненнаяНоменклатура.КарточкаНоменклатуры));
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока					= Объект.Номенклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ПодчиненнаяНоменклатура);
			НоваяСтрока.Количество		= Выборка.Количество;
			НоваяСтрока.Цена			= Выборка.Цена;
			НоваяСтрока.Сумма			= НоваяСтрока.Цена*НоваяСтрока.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НоваяСтрока);		
		Иначе
			НайденнаяСтрока				= МассивСтрокТЧ[0];
			НайденнаяСтрока.Количество	= НайденнаяСтрока.Количество + Выборка.Количество;
			НайденнаяСтрока.Сумма		= НайденнаяСтрока.Цена * НайденнаяСтрока.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НайденнаяСтрока);		
		КонецЕсли;
		ЗаполнитьПодчиненнуюНоменклатуру(Период, ПодчиненнаяНоменклатура.КарточкаНоменклатуры);		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыводДереваНоменклатуры(МассивНоменклатуры)
	
	Для Каждого СтруктураВозврата Из МассивНоменклатуры Цикл
		СтруктураНоменклатуры = СтруктураВозврата;
		Если СтруктураНоменклатуры.Свойство("НуженВыводДерева") И СтруктураНоменклатуры.Свойство("СвернутыйКомплект") Тогда
			Если СтруктураНоменклатуры.НуженВыводДерева И СтруктураНоменклатуры.СвернутыйКомплект Тогда 					
				ВывестиДеревоНоменклатуры();		
				ИдентификаторСтроки = 0;					
				Если ЗначениеЗаполнено(СтруктураНоменклатуры.КарточкаНоменклатуры) Тогда
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
						ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.КарточкаНоменклатуры, Ложь);
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'Номенклатура ""%1"" является частью комплекта ""%2"". Комплект был добавлен в документ.'"),
							СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура));
				Иначе
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
						ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.Номенклатура, Ложь);
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Номенклатура ""%1"" является частью комплекта ""%2"". Комплект был добавлен в документ.'"), 
						СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура));
				КонецЕсли;
			ИначеЕсли СтруктураНоменклатуры.НуженВыводДерева И (Не СтруктураНоменклатуры.СвернутыйКомплект) Тогда					
				ВывестиДеревоНоменклатуры();		
				ИдентификаторСтроки = 0;
				Если ЗначениеЗаполнено(СтруктураНоменклатуры.КарточкаНоменклатуры) Тогда
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
						ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.КарточкаНоменклатуры, Ложь);
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'Номенклатура ""%1"" является частью комплекта ""%2"". Комплект и все его комплектующие были добавлены в документ.'"),
							СтруктураНоменклатуры.НоменклатураШК,СтруктураНоменклатуры.Номенклатура));
				Иначе
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
					ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.Номенклатура,Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'Номенклатура ""%1"" является частью комплекта ""%2"". Комплект и все его комплектующие были добавлены в документ.'"), 
							СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура));
				КонецЕсли;
			КонецЕсли;	
			
		ИначеЕсли СтруктураНоменклатуры.Свойство("НуженВыводДерева") И СтруктураНоменклатуры.НуженВыводДерева Тогда 
				ВывестиДеревоНоменклатуры();		
				ИдентификаторСтроки = 0;					
				Если ЗначениеЗаполнено(СтруктураНоменклатуры.КарточкаНоменклатуры) Тогда
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
					ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.КарточкаНоменклатуры,Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;									
				Иначе
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
					ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураНоменклатуры.Номенклатура,Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;
				КонецЕсли;
		ИначеЕсли СтруктураНоменклатуры.Свойство("СообщениеПользователю") Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтруктураНоменклатуры.СообщениеПользователю);				
		КонецЕсли;
					 	
	КонецЦикла;	
	
КонецПроцедуры 

&НаСервере
Функция ТекущаяДатаНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

#Область УчетОстатковКонтрагентов

//@skip-warning
&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
			
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикНачалоВыбора(ЭтаФорма, Объект.Организация, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикАвтоПодбор(ЭтаФорма, 
				"Организация",
				Текст, 
				ДанныеВыбора,
				Ожидание,
				СтандартнаяОбработка);
				
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_Очистка(Элемент, СтандартнаяОбработка)	
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбора(ЭтаФорма, 
				"Организация", 
				Объект.Организация,
				Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект),
				ВыбранноеЗначение,
				СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	ОрганизацияПриИзменении(Неопределено);
	
КонецПроцедуры

#КонецОбласти

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	ДоговорПередИзменением = Договор;
	Договор                = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		СтруктураДанные               = УправлениеITОтделом8УФ.ПолучитьДанныеДоговорПриИзменении(Объект.Договор, Объект.Дата);		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов                = СтруктураДанные.ВалютаРасчетов;
		
		Если НЕ СтруктураДанные.СуммаВключаетНДС = Неопределено Тогда			
			Объект.СуммаВключаетНДС = СтруктураДанные.СуммаВключаетНДС;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1,
				СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, 
				СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
				
		Если (ЗначениеЗаполнено(Объект.Договор)
			И ЗначениеЗаполнено(ВалютаРасчетов)
			И Объект.Договор <> ДоговорПередИзменением
			И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
			И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
						
			Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом. Необходимо проверить валюту документа'"));
			ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("ДоговорПриИзмененииЗавершение", ЭтотОбъект), 
				ВалютаРасчетовПередИзменением, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеДоговора()

&НаКлиенте
Процедура ДоговорПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт    

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
  
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураДанные = ДополнительныеПараметры.СтруктураДанные;    
    КонтрагентПриИзмененииФрагмент(СтруктураДанные);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииФрагмент(Знач СтруктураДанные)
    
    ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	
КонецПроцедуры

#Область Трудозатраты

&НаСервере
Процедура ОбновитьЗаголовокТрудозатрат()
	
	КоличествоЗаписейТрудозатрат = ТрудозатратыСервер.КоличествоЗаписейТрудозатратОбъекта(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьФормуВыбораОрганизации(Знач ПолеРаботы)
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ИмяПоля", ПолеРаботы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораОрганизации", ЭтотОбъект, ПараметрыПоля); 
	ОткрытьФорму("Справочник.Организации.ФормаВыбора", , ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);   
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеВыбораОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		 ТекущиеДанные[ДополнительныеПараметры.ИмяПоля] = Результат;
	КонецЕсли;	
	
КонецПроцедуры	

//Вынести в отдельную процедуру
&НаКлиенте
Процедура ОчиститьТрудозатратыВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ДобавитьТрудозатратыФрагмент(РезультатВопроса = КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТрудозатратыФрагмент(ОчиститьТрудозатраты = Ложь)
	
	Если ОчиститьТрудозатраты = Истина Тогда
		ТрудозатратыСервер.ОчиститьТрудоазтратыОбъекта(Объект.Ссылка);
	КонецЕсли;
	
	Для Каждого Строки Из Объект.Работы Цикл
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("Объект", 		Объект.Ссылка);
		ПараметрыЗаписи.Вставить("Инициатор", 	Строки.Инициатор);
		ПараметрыЗаписи.Вставить("Исполнитель", Строки.Пользователь);
		
		Менеджер = РегистрыСведений.Трудозатраты.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, ПараметрыЗаписи);
		
		Менеджер.КлючУникальности = РегистрыСведений.Трудозатраты.КлючЗаписиТрудозатрат(ПараметрыЗаписи);			
		Менеджер.ДатаНачала		= НачалоЧаса(Строки.Задание.Дата);
		Менеджер.ДатаОкончания 	= Менеджер.ДатаНачала + Строки.Количество * 3600;
		Менеджер.Длительность 	= Строки.Количество * 3600;
		Менеджер.ВидРаботы 		= Справочники.ВидыРабот.ВыполнениеНарядовНаРаботы;
		Менеджер.Описание 		= Строки.Описание;
		Менеджер.Записать(Истина);
	КонецЦикла;
	
	Элементы.Трудозатраты.Обновить();
	ОбновитьЗаголовокТрудозатрат();
	
КонецПроцедуры

&НаСервере
Функция КоличествоЗаписейТрудозатратОбъекта()
	
	Возврат ТрудозатратыСервер.КоличествоЗаписейТрудозатратОбъекта(Объект.Ссылка);
	
КонецФункции


#КонецОбласти