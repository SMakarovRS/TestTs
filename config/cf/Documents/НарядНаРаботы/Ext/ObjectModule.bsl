#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

#Область ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Работы.Итог("Всего") + Номенклатура.Итог("Всего");
		
	Если ПоложениеРеквизитаЗадание = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для Каждого СтрокаТабличнойЧасти Из Работы Цикл
			СтрокаТабличнойЧасти.Задание = Задание;
		КонецЦикла;
	КонецЕсли;
	
	Если ПоложениеРеквизитаПользователь = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Работы Цикл
			СтрокаТабличнойЧасти.Пользователь	= Пользователь;
			СтрокаТабличнойЧасти.Подразделение	= Подразделение;
		КонецЦикла;
		СписокПользователей = Строка(Пользователь);
		
	Иначе
		
		СписокПользователей = "";
		РаботыСотрудники = Работы.Выгрузить();
		РаботыСотрудники.Свернуть("Пользователь", );
		РаботыСотрудники.Сортировать("Пользователь");
		Для Каждого СтрокаТабличнойЧасти Из РаботыСотрудники Цикл
			Если Найти(СписокПользователей, Строка(СтрокаТабличнойЧасти.Пользователь)) = 0 Тогда			
				Если НЕ ПустаяСтрока(СписокПользователей) Тогда
					СписокПользователей = СписокПользователей + "; ";
				КонецЕсли;
				СписокПользователей = СписокПользователей + Строка(СтрокаТабличнойЧасти.Пользователь);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет документ перед проведением, возвращает СписокЗначений с ошибками,
// если пустой, то ошибок нет.
Функция ПроверитьДокументПередПроведением()
	
	СписокОшибок = Неопределено;
	
	// Проверка пользователя.
	Если ПоложениеРеквизитаПользователь = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке 
		И НЕ ЗначениеЗаполнено(Пользователь) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Пользователь", 
			НСтр("ru = 'Не указан пользователь в работах.'"), "");
			
	КонецЕсли;
	
	// Проверка не заполненных столбцов.
	Для Каждого Строки Из Номенклатура Цикл
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
				СтрШаблон(НСтр("ru = 'Для номенклатуры ""%1"" не заполнены карточки номенклатуры.'"), Строки.Номенклатура), "");
		КонецЕсли;
		
		Если Строки.Количество = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура",
				СтрШаблон(НСтр("ru = 'Для номенклатуры ""%1"" не заполнено перемещаемое количество.'"), Строки.Номенклатура), "");
		КонецЕсли;
	КонецЦикла;
	
	// Проверка, что в Номенклатуре нет услуг.
	Для Каждого Строки Из Номенклатура Цикл
		Если ЗначениеЗаполнено(Строки.Номенклатура) Тогда
			Если ЗначениеЗаполнено(Строки.Номенклатура.ВидНоменклатуры) Тогда
				Если Строки.Номенклатура.ВидНоменклатуры.ТипВидаНоменклатуры = Перечисления.ТипыВидовНоменклатуры.Услуга Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
						СтрШаблон(НСтр("ru = 'Номенклатура ""%1"" не может быть выбрана в дереве, т.к. это услуга.'"), 
							Строки.Номенклатура), "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокОшибок <> Неопределено Тогда
		Возврат СписокОшибок;
	КонецЕсли;
	
	// Проверка дублей строк.
	ТЗНоменклатура = Номенклатура.Выгрузить();
	ТЗНоменклатура.Колонки.Добавить("КоличествоОдинаковых");
	Для Каждого Строки Из ТЗНоменклатура Цикл
		Строки.КоличествоОдинаковых = 1;
	КонецЦикла;
	ТЗНоменклатура.Свернуть("Номенклатура, КарточкаНоменклатуры", "КоличествоОдинаковых");
	
	Для Каждого Строки Из ТЗНоменклатура Цикл
		Если Строки.КоличествоОдинаковых > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
				СтрШаблон(НСтр("ru = 'Для номенклатуры ""%1"" есть дублирующиеся строки.'"), Строки.Номенклатура), "");
		КонецЕсли;		
	КонецЦикла;
	
	// Проверки номенклатуры.
	Для Каждого Строки Из Номенклатура Цикл
		
		// Учет по карточкам и количество <> 1.
		Если Строки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры И Строки.Количество <> 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
				СтрШаблон(НСтр("ru = 'Для номенклатуры ""%1"" в ее виде указано, что ведется учет по карточкам. Для такой номенклатуры количество в строке не может быть больше единицы.'"),
					Строки.Номенклатура), "");
		КонецЕсли;
		
		// Проверка, что карточка соответствует номенклатуре.
		Если Строки.Номенклатура <> Строки.КарточкаНоменклатуры.Владелец Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
				СтрШаблон(НСтр("ru = 'Для номенклатуры ""%1"" выбрана карточка, которая не является дочерней карточкой этой номенклатуры.'"), 
					Строки.Номенклатура), "");
		КонецЕсли;
		
		// Карточка не заполнена.
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура",
				СтрШаблон(НСтр("ru = 'В строке ""%1"" не выбрана карточка номенклатуры.'"), Строки.НомерСтроки), "");
		КонецЕсли;
		
	КонецЦикла;	
	
	// Проверка заполнения места хранения в Номенклатуре
	Если Номенклатура.Количество() > 0 И Не ЗначениеЗаполнено(МестоХранения) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.МестоХранения", 
			НСтр("ru = 'Не указано место хранения'"), "");
	КонецЕсли;
	
	Возврат СписокОшибок;
	
КонецФункции

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Проверка на ошибки.
	// Из-за использования дерева приходится несколько раз делать проверку.
	Если НЕ ОбменДанными.Загрузка Тогда
		СписокОшибок = ПроверитьДокументПередПроведением();
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок, Отказ);	
	КонецЕсли;	
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	СЛС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);	
	
	// Подготовка наборов записей.
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	СЛС.ОтразитьДвиженияВРазделахУчета(Ссылка, ДополнительныеСвойства, Движения, Отказ);		
	
	// Запись наборов записей.
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль.
	СЛС.ВыполнитьКонтрольОтрицательныхОстатков(Ссылка, ДополнительныеСвойства, Отказ);	
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
		
	// Инициализация дополнительных свойств для удаления проведения документа.
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль.
	СЛС.ВыполнитьКонтрольОтрицательныхОстатков(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Основание = ДанныеЗаполнения;

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Задание") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,
			"Номер,Автор,АвторКорректировки,ДатаСоздания,ДатаКорректировки");
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Инициатор) Тогда
			Если ТипЗнч(ДанныеЗаполнения.Инициатор) = Тип("СправочникСсылка.Контрагенты") Тогда
				Контрагент = ДанныеЗаполнения.Инициатор;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Инициатор) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
				Контрагент = ДанныеЗаполнения.Инициатор.Владелец;
			Иначе
				Контрагент = ДанныеЗаполнения.Организация;
			КонецЕсли;
		Иначе
			Контрагент = ДанныеЗаполнения.Организация;
		КонецЕсли;
				
		Пользователь = ?(ЗначениеЗаполнено(ДанныеЗаполнения.ТекущийИсполнитель), ДанныеЗаполнения.ТекущийИсполнитель, 
			Пользователи.ТекущийПользователь());
			
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Сотрудник	  = Пользователь.Сотрудник;
			Подразделение = ?(НЕ ЗначениеЗаполнено(Сотрудник), Справочники.Подразделения.ПустаяСсылка(), 
				Сотрудник.Подразделение);
		КонецЕсли;

		Состояние = ?(ДанныеЗаполнения.Выполнено, Справочники.СостояниеНарядовНаРаботы.Выполнен, 
			Справочники.СостояниеНарядовНаРаботы.ВРаботе);
			
		ПоложениеРеквизитаЗадание	= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		ПоложениеРеквизитаПользователь = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
				
		НоваяСтрока					= Работы.Добавить();
		НоваяСтрока.Задание			= ДанныеЗаполнения;
		НоваяСтрока.Пользователь	= Пользователь;
        НоваяСтрока.Сервис		    = ДанныеЗаполнения.Сервис;
		НоваяСтрока.Услуга		    = ДанныеЗаполнения.Услуга;
		НоваяСтрока.Описание		= ДанныеЗаполнения.Тема;
		НоваяСтрока.Инициатор		= ДанныеЗаполнения.Инициатор;
		НоваяСтрока.Клиент			= ДанныеЗаполнения.Клиент;
		НоваяСтрока.СтавкаНДС		= УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСБезНДС();
		
		Если ЗначениеЗаполнено(НоваяСтрока.Услуга) Тогда
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Услуга.ЕдиницаИзмерения;
		КонецЕсли;
		
		НоваяСтрока.Количество 	= 1; // Получить время работы по заданию из регистра трудозатрат (?)
		
		Если ЗначениеЗаполнено(НоваяСтрока.Клиент) И ЗначениеЗаполнено(НоваяСтрока.Услуга) Тогда
			УслугаСервиса 		= УправлениеSLA.УслугаСервиса(ТекущаяДатаСеанса(), НоваяСтрока.Клиент, НоваяСтрока.Услуга);
			НоваяСтрока.Тариф	= УслугаСервиса.Тариф;
			НоваяСтрока.Цена	= УправлениеSLA.ЦенаУслугиПоТарифу(ТекущаяДатаСеанса(), УслугаСервиса.Тариф, НоваяСтрока.Услуга);
		КонецЕсли;		
		
		// Сумма.
		НоваяСтрока.Сумма		= НоваяСтрока.Количество * НоваяСтрока.Цена;
		СтавкаНДС				= УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		
		НоваяСтрока.СуммаНДС	= ?(СуммаВключаетНДС, НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
			НоваяСтрока.Сумма * СтавкаНДС / 100);
			
		// Всего.
		НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Ошибки = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) 
		И ПоложениеРеквизитаПользователь = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.Пользователь", 
			НСтр("ru = 'Не заполнен пользователь'"), "Объект.Пользователь");
			
	КонецЕсли;
	
	Для Каждого Строки Из Работы Цикл
		
		Если ПоложениеРеквизитаПользователь = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти 
			И НЕ ЗначениеЗаполнено(Строки.Пользователь) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.Работы[" 
				+ Формат(Строки.НомерСтроки - 1, "ЧДЦ=; ЧС=; ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + "].Пользователь",
				НСтр("ru = 'Не заполнен пользователь в строке табличной части Работы'"), "Работы", Строки.НомерСтроки,
				НСтр("ru = 'Не заполнен пользователь в строке табличной части Работы'"), Строки.НомерСтроки);
				
		КонецЕсли;		
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли