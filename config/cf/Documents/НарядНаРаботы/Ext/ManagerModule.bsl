#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает список имен «ключевых» реквизитов.
// 
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать,
//  с помощью обработки группового изменения объектов.
// 
// Возвращаемое значение:
//  Массив - массив реквизитов, редактируемых при групповой обработке.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("Организация");
	РедактируемыеРеквизиты.Добавить("Комментарий");	
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат  = Новый Массив;
	Работы 	   = Ссылка.Работы;
	Если Работы.Количество() > 0 Тогда 
		Для Каждого СтрокаТаблицы Из Работы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Пользователь) Тогда
				Результат.Добавить(СтрокаТаблицы.Пользователь);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

#Область ШаблоныСообщений
// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", 
//								"png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	РеквизитПоложениеРеквизитаВидРаботы    = Реквизиты.Найти("НарядНаРаботы.ПоложениеРеквизитаВидРаботы");
	Реквизиты.Удалить(РеквизитПоложениеРеквизитаВидРаботы);
	РеквизитПоложениеРеквизитаЗадание      = Реквизиты.Найти("НарядНаРаботы.ПоложениеРеквизитаЗадание");
	Реквизиты.Удалить(РеквизитПоложениеРеквизитаЗадание);
	РеквизитПоложениеРеквизитаПользователь = Реквизиты.Найти("НарядНаРаботы.ПоложениеРеквизитаПользователь");
	Реквизиты.Удалить(РеквизитПоложениеРеквизитаПользователь);	
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Контрагент",
		Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Контрагент");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений
#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;	
	СоответствиеИзменениеОбъекта.Вставить("НарядНаРаботыИзменениеОбъектаИзменениеСостояния", 
		НСтр("ru = 'Изменение состояния'"));
	СоответствиеИзменениеОбъекта.Вставить("НарядНаРаботыИзменениеОбъектаЗакрытие",		НСтр("ru = 'Закрытие'"));
	СоответствиеИзменениеОбъекта.Вставить("НарядНаРаботыИзменениеОбъектаПроведение", 	НСтр("ru = 'Проведение'"));
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("НарядНаРаботыРасчетМетрикЗаписьДокумента", НСтр("ru = 'Запись документа'"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура, Знач Источник) Экспорт
	
	Результат = Ложь;
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ИмяСобытия = "НарядНаРаботыИзменениеОбъектаИзменениеСостояния" Тогда
		
		Если Структура.ЭтоНовый Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Состояние <> ИсточникПередЗаписью.Состояние Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "НарядНаРаботыИзменениеОбъектаЗакрытие" Тогда
		
		Если Структура.ЭтоНовый И Источник.Закрыт = Истина Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Закрыт <> ИсточникПередЗаписью.Закрыт И Источник.Закрыт = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "НарядНаРаботыИзменениеОбъектаПроведение" Тогда
		
		Если Структура.ЭтоНовый И Источник.Проведен = Истина Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Проведен <> ИсточникПередЗаписью.Проведен И Источник.Проведен = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ.

// Процедура печати документа.
//
Функция ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Перем Ошибки;
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НарядНаРаботы.Ссылка КАК Ссылка,
		|	НарядНаРаботы.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	НарядНаРаботы.ВалютаДокумента КАК ВалютаДокумента,
		|	НарядНаРаботы.Дата КАК ДатаДокумента,
		|	НарядНаРаботы.Номер КАК Номер,
		|	НарядНаРаботы.Контрагент КАК Контрагент,
		|	НарядНаРаботы.Организация КАК Организация,
		|	НарядНаРаботы.Организация.Префикс КАК Префикс,
		|	НарядНаРаботы.Работы.(
		|		Услуга.Наименование + ""("" + Сервис.Наименование + "")"" КАК Запас,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		Всего КАК Всего,
		|		Количество КАК Количество,
		|		"""" КАК Характеристика,
		|		Описание КАК Содержание,
		|		0 КАК ПроцентСкидкиНаценки,
		|		0 КАК ЕстьСкидка,
		|		Услуга.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		НомерСтроки КАК НомерСтроки
		|	),
		|	НарядНаРаботы.Номенклатура.(
		|		Номенклатура.Наименование КАК Запас,
		|		Номенклатура.Артикул КАК Артикул,
		|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		Всего КАК Всего,
		|		Количество КАК Количество,
		|		"""" КАК Характеристика,
		|		Описание КАК Содержание,
		|		0 КАК ПроцентСкидкиНаценки,
		|		0 КАК ЕстьСкидка,
		|		НомерСтроки КАК НомерСтроки
		|	),
		|	НарядНаРаботы.БанковскийСчет
		|ИЗ
		|	Документ.НарядНаРаботы КАК НарядНаРаботы
		|ГДЕ
		|	НарядНаРаботы.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокЗапасы = Шапка.Номенклатура.Выбрать();
		ВыборкаСтрокРаботы = Шапка.Работы.Выбрать();
				
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядНаРаботы_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетНаОплату");
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,
			Шапка.БанковскийСчет);
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		// Если используется пользовательский макет - этих секций не было.
		Если Макет.Области.Найти("ЗаглавиеСЛоготипом") <> Неопределено
			И Макет.Области.Найти("ЗаглавиеБезЛоготипа") <> Неопределено Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеБезЛоготипа");
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		Иначе
			
			ТекстСообщения = 
				НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некорректно.'");
				
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, "");
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			СтруктураЗаполнения.Вставить("БанкПолучателяПредставление", СведенияОбОрганизации.Банк.Наименование + " " + СведенияОбОрганизации.Банк.Город);
		КонецЕсли; 
		СтруктураЗаполнения.Вставить("ИНН", СведенияОбОрганизации.ИНН);
		СтруктураЗаполнения.Вставить("КПП", СведенияОбОрганизации.КПП);
		СтруктураЗаполнения.Вставить("ПредставлениеПоставщика", СведенияОбОрганизации.ПолноеНаименование);
		СтруктураЗаполнения.Вставить("БИКБанкаПолучателя", СведенияОбОрганизации.БИК);
		СтруктураЗаполнения.Вставить("СчетБанкаПолучателяПредставление", СведенияОбОрганизации.КоррСчет);
		СтруктураЗаполнения.Вставить("СчетПолучателяПредставление", СведенияОбОрганизации.НомерСчета);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", 
			СтрШаблон(НСтр("ru = 'Счет на оплату № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);										
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПолучателя", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;

		Пока ВыборкаСтрокРаботы.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокРаботы);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки", Количество));
			
			Если ЗначениеЗаполнено(ВыборкаСтрокРаботы.Содержание) Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Запас", ВыборкаСтрокРаботы.Содержание));
			Иначе
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Запас", ВыборкаСтрокРаботы.Запас));
			КонецЕсли;
									
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма	= Сумма 	+ ВыборкаСтрокРаботы.Сумма;
			СуммаНДС= СуммаНДС	+ ВыборкаСтрокРаботы.СуммаНДС;
			Всего	= Всего		+ ВыборкаСтрокРаботы.Всего;
			
		КонецЦикла;
		
		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки", Количество));
			
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Запас", ВыборкаСтрокЗапасы.Содержание));
			Иначе
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Запас", ВыборкаСтрокЗапасы.Запас));
			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма	= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
			Всего	= Всего		+ ВыборкаСтрокЗапасы.Всего;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", УправлениеITОтделом8УФ.ФорматСумм(Сумма)));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", НСтр("ru = 'Без налога (НДС)'")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", "-"));
		Иначе
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", 
				?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":"));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДС)));
		КонецЕсли; 
				
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("ИтогоКОплате") = Неопределено Тогда
			
			ТекстСообщения = 
				НСтр("ru ='ВНИМАНИЕ! Не обнаружена область макета ""Итог к оплате"". Возможно используется пользовательский макет.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, "");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоКОплате");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоКОплате", УправлениеITОтделом8УФ.ФорматСумм(Всего)));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
				Строка(Количество), 
				УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента))));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью", 
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента)));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		СтруктураРуководители = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, 
			Шапка.ДатаДокумента);
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОРуководителя", СтруктураРуководители.ФИОРуководителя));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОБухгалтера", СтруктураРуководители.ФИОГлавногоБухгалтера));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьСчетНаОплату()

// Процедура печати документа.
//
Функция ПечатьРасходнаяНакладная(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Перем Ошибки;
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НарядНаРаботы.Ссылка КАК Ссылка,
		|	НарядНаРаботы.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	НарядНаРаботы.ВалютаДокумента КАК ВалютаДокумента,
		|	НарядНаРаботы.Дата КАК ДатаДокумента,
		|	НарядНаРаботы.Номер КАК Номер,
		|	НарядНаРаботы.Контрагент КАК Контрагент,
		|	НарядНаРаботы.Организация КАК Организация,
		|	НарядНаРаботы.Организация.Префикс КАК Префикс,
		|	НарядНаРаботы.Работы.(
		|		Услуга.Наименование КАК Номенклатура,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		Всего КАК Всего,
		|		Количество КАК Количество,
		|		Описание КАК Содержание,
		|		Услуга.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		НомерСтроки КАК НомерСтроки
		|	),
		|	НарядНаРаботы.Номенклатура.(
		|		Номенклатура.Наименование КАК Номенклатура,
		|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		Всего КАК Всего,
		|		Количество КАК Количество,
		|		Описание КАК Содержание,
		|		НомерСтроки КАК НомерСтроки
		|	),
		|	НарядНаРаботы.БанковскийСчет
		|ИЗ
		|	Документ.НарядНаРаботы КАК НарядНаРаботы
		|ГДЕ
		|	НарядНаРаботы.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокНоменклатура = Шапка.Номенклатура.Выбрать();
		ВыборкаСтрокРаботы = Шапка.Работы.Выбрать();
		
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядНаРаботы_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.НарядНаРаботы.ПФ_MXL_" + ИмяМакета);
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,
			Шапка.БанковскийСчет);
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);		
		СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");		
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПокупателя", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);		
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Номер", НомерДокумента));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаДокумента", Формат(Шапка.ДатаДокумента, "ДЛФ=DD")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		СуммаВсего		= 0;
		КоличествоВсего	= 0;
		НДСВсего		= 0;
		НомерСтроки		= 1;
		Пока ВыборкаСтрокРаботы.Следующий() Цикл			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокРаботы);			
			Если ЗначениеЗаполнено(ВыборкаСтрокРаботы.Содержание) Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Номенклатура", ВыборкаСтрокРаботы.Содержание));
			Иначе
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Номенклатура", ВыборкаСтрокРаботы.Номенклатура));
			КонецЕсли;
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки", НомерСтроки));
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			НомерСтроки		= НомерСтроки + 1;
			СуммаВсего		= СуммаВсего + ВыборкаСтрокРаботы.Сумма;			
			НДСВсего       	= НДСВсего + ВыборкаСтрокРаботы.СуммаНДС;
			КоличествоВсего = КоличествоВсего + ВыборкаСтрокРаботы.Количество;			
		КонецЦикла;		
		
		Пока ВыборкаСтрокНоменклатура.Следующий() Цикл			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатура);			
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки", НомерСтроки));
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			НомерСтроки		= НомерСтроки + 1;
			СуммаВсего		= СуммаВсего		+ ВыборкаСтрокНоменклатура.Сумма;			
			НДСВсего       	= НДСВсего			+ ВыборкаСтрокНоменклатура.СуммаНДС;
			КоличествоВсего = КоличествоВсего 	+ ВыборкаСтрокНоменклатура.Количество;			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаВсего", УправлениеITОтделом8УФ.ФорматСумм(СуммаВсего)));
		
		Если НДСВсего = 0 Тогда
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", НСтр("ru = 'Без налога (НДС)'")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДСВсего", "-"));
		Иначе
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", 
				?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":"));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДСВсего", УправлениеITОтделом8УФ.ФорматСумм(НДСВсего)));
		КонецЕсли; 
		
		СуммаКПрописи = СуммаВсего;
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), 
				Строка(КоличествоВсего), 
				УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента))));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью", 
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента)));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // Расходная накладная

// Процедура печати документа.
//
Функция ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_НарядНаРаботы";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НарядНаРаботы.Ссылка КАК Ссылка,
		|	НарядНаРаботы.Номер КАК Номер,
		|	НарядНаРаботы.Дата КАК ДатаДокумента,
		|	НарядНаРаботы.Дата КАК Дата,
		|	НарядНаРаботы.Организация КАК Организация,
		|	НарядНаРаботы.Контрагент КАК Контрагент,
		|	НарядНаРаботы.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	НарядНаРаботы.ВалютаДокумента КАК ВалютаДокумента,
		|	НарядНаРаботы.Организация.Префикс КАК Префикс,
		|	НарядНаРаботы.Работы.(
		|		НомерСтроки КАК НомерСтроки,
		|		ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(НарядНаРаботы.Работы.Услуга.Наименование КАК СТРОКА(1000))) = """"
		|				ТОГДА НарядНаРаботы.Работы.Услуга.Наименование
		|			ИНАЧЕ ВЫРАЗИТЬ(НарядНаРаботы.Работы.Услуга.Наименование КАК СТРОКА(1000))
		|		КОНЕЦ КАК Товар,
		|		Услуга.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		Всего КАК Всего,
		|		"""" КАК Характеристика,
		|		Описание КАК Содержание,
		|		0 КАК ПроцентСкидкиНаценки,
		|		0 КАК ЕстьСкидка,
		|		1 КАК Коэффициент,
		|		1 КАК Кратность
		|	)
		|ИЗ
		|	Документ.НарядНаРаботы КАК НарядНаРаботы
		|ГДЕ
		|	НарядНаРаботы.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокТовары = Шапка.Работы.Выбрать();
		
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядНаРаботы_ПФ_MXL_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.НарядНаРаботы.ПФ_MXL_" + ИмяМакета);
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", СтрШаблон(НСтр("ru = 'Акт № %1 от %2'"), 
			НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, 
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПолучателя", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, 
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = Шапка.Работы.Выгрузить().Итог("ЕстьСкидка") <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
		КонецЕсли;
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Содержание) Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Товар", ВыборкаСтрокТовары.Содержание));
			Иначе
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Товар", ВыборкаСтрокТовары.Товар));
			КонецЕсли;
																
			Если ЕстьСкидки Тогда
				Если ВыборкаСтрокТовары.ПроцентСкидкиНаценки = 100 Тогда
					Скидка = ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.Количество;
					ОбластьМакета.Параметры.Заполнить(Новый Структура("Скидка",         Скидка));
					ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаБезСкидки", Скидка));
				ИначеЕсли ВыборкаСтрокТовары.ПроцентСкидкиНаценки = 0 Тогда
					ОбластьМакета.Параметры.Заполнить(Новый Структура("Скидка",         0));
					ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаБезСкидки", ВыборкаСтрокТовары.Сумма));
				Иначе
					Скидка = ВыборкаСтрокТовары.Сумма * ВыборкаСтрокТовары.ПроцентСкидкиНаценки 
						/ (100 - ВыборкаСтрокТовары.ПроцентСкидкиНаценки);
					ОбластьМакета.Параметры.Заполнить(Новый Структура("Скидка",         Скидка));
					ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаБезСкидки", ВыборкаСтрокТовары.Сумма + Скидка));
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокТовары.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокТовары.СуммаНДС;
			Всего		= Всего 	+ ВыборкаСтрокТовары.Всего;
			Количество	= Количество+ 1;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", УправлениеITОтделом8УФ.ФорматСумм(Сумма)));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", НСтр("ru = 'Без налога (НДС)'")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", "-"));
		Иначе
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", 
				?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":"));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДС)));
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), Строка(Количество), 
				УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента))));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью", 
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента)));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатнаяФорма()

// Процедура печати документа.
//
Функция ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Перем Ошибки;
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядНаРаботы_" + ИмяМакета;
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НарядНаРаботы.Ссылка КАК Ссылка,
		|	НарядНаРаботы.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	НарядНаРаботы.ВалютаДокумента КАК ВалютаДокумента,
		|	НарядНаРаботы.Дата КАК ДатаДокумента,
		|	НарядНаРаботы.Номер КАК Номер,
		|	НарядНаРаботы.Контрагент КАК Контрагент,
		|	НарядНаРаботы.Организация КАК Организация,
		|	НарядНаРаботы.Организация.Префикс КАК Префикс,
		|	НарядНаРаботы.БанковскийСчет,
		|	НарядНаРаботы.Подразделение
		|ИЗ
		|	Документ.НарядНаРаботы КАК НарядНаРаботы
		|ГДЕ
		|	НарядНаРаботы.Ссылка = &ТекущийДокумент";			
		
		Шапка = Запрос.Выполнить().Выбрать();			
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		
		Если ИмяМакета = "ТОРГ12" Тогда
			Запрос.Текст =	"ВЫБРАТЬ
			|	НарядНаРаботыНоменклатура.Ссылка,
			|	НарядНаРаботыНоменклатура.НомерСтроки,
			|	НарядНаРаботыНоменклатура.Номенклатура,
			|	НарядНаРаботыНоменклатура.Партия,
			|	НарядНаРаботыНоменклатура.КарточкаНоменклатуры,
			|	НарядНаРаботыНоменклатура.Количество,
			|	НарядНаРаботыНоменклатура.Описание,
			|	НарядНаРаботыНоменклатура.Подразделение,
			|	НарядНаРаботыНоменклатура.СтатьяДоходовРасходов,
			|	НарядНаРаботыНоменклатура.ЕдиницаИзмерения,
			|	НарядНаРаботыНоменклатура.Комплект,
			|	НарядНаРаботыНоменклатура.Цена,
			|	НарядНаРаботыНоменклатура.Сумма,
			|	НарядНаРаботыНоменклатура.СтавкаНДС,
			|	НарядНаРаботыНоменклатура.СуммаНДС,
			|	НарядНаРаботыНоменклатура.Всего,
			|	НарядНаРаботыНоменклатура.Номенклатура.Код КАК КодНоменклатуры,
			|	НарядНаРаботыНоменклатура.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения
			|ИЗ
			|	Документ.НарядНаРаботы.Номенклатура КАК НарядНаРаботыНоменклатура
			|ГДЕ
			|	НарядНаРаботыНоменклатура.Ссылка = &ТекущийДокумент";		
			ВыборкаСтрокНоменклатура = Запрос.Выполнить().Выбрать();
		ИначеЕсли ИмяМакета = "ТОРГ12СУслугами" Тогда
			Запрос.Текст =	"ВЫБРАТЬ
			|	НарядНаРаботыНоменклатура.Ссылка,
			|	НарядНаРаботыНоменклатура.НомерСтроки,
			|	НарядНаРаботыНоменклатура.Номенклатура,
			|	НарядНаРаботыНоменклатура.Количество,
			|	НарядНаРаботыНоменклатура.Описание,
			|	НарядНаРаботыНоменклатура.Подразделение,
			|	НарядНаРаботыНоменклатура.СтатьяДоходовРасходов,
			|	НарядНаРаботыНоменклатура.ЕдиницаИзмерения,
			|	НарядНаРаботыНоменклатура.Цена,
			|	НарядНаРаботыНоменклатура.Сумма,
			|	НарядНаРаботыНоменклатура.СтавкаНДС,
			|	НарядНаРаботыНоменклатура.СуммаНДС,
			|	НарядНаРаботыНоменклатура.Всего,
			|	НарядНаРаботыНоменклатура.Номенклатура.Код КАК КодНоменклатуры,
			|	НарядНаРаботыНоменклатура.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения
			|ИЗ
			|	Документ.НарядНаРаботы.Номенклатура КАК НарядНаРаботыНоменклатура
			|ГДЕ
			|	НарядНаРаботыНоменклатура.Ссылка = &ТекущийДокумент
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НарядНаРаботыРаботы.Ссылка,
			|	НарядНаРаботыРаботы.НомерСтроки,
			|	НарядНаРаботыРаботы.Услуга.Наименование,
			|	НарядНаРаботыРаботы.Количество,
			|	НарядНаРаботыРаботы.Описание,
			|	НарядНаРаботыРаботы.Подразделение,
			|	НарядНаРаботыРаботы.СтатьяДоходовРасходов,
			|	НарядНаРаботыРаботы.ЕдиницаИзмерения,
			|	НарядНаРаботыРаботы.Цена,
			|	НарядНаРаботыРаботы.Сумма,
			|	НарядНаРаботыРаботы.СтавкаНДС,
			|	НарядНаРаботыРаботы.СуммаНДС,
			|	НарядНаРаботыРаботы.Всего,
			|	НарядНаРаботыРаботы.Услуга.Код,
			|	НарядНаРаботыРаботы.Услуга.ЕдиницаИзмерения.Код
			|ИЗ
			|	Документ.НарядНаРаботы.Работы КАК НарядНаРаботыРаботы
			|ГДЕ
			|	НарядНаРаботыРаботы.Ссылка = &ТекущийДокумент
			|
			|УПОРЯДОЧИТЬ ПО
			|	НарядНаРаботыНоменклатура.НомерСтроки";		
			ВыборкаСтрокНоменклатура = Запрос.Выполнить().Выбрать();
		КонецЕсли;				
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.НарядНаРаботы.ПФ_MXL_ТОРГ12");
		
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбОрганизации    = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,
			Шапка.БанковскийСчет);		
		ПредставлениеОрганизации = УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, 
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		
		СведенияОбКонтрагенте    = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		ПредставлениеКонтрагента = УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, 
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		СтруктураЗаполнения      = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		СтруктураЗаполнения.Вставить("ПредставлениеОрганизации", 	ПредставлениеОрганизации);
		СтруктураЗаполнения.Вставить("ОрганизацияПоОКПО", 			СведенияОбОрганизации.КодПоОКПО);
		СтруктураЗаполнения.Вставить("ПредставлениеПодразделения",  Шапка.Подразделение);
		СтруктураЗаполнения.Вставить("ПредставлениеГрузополучателя", ПредставлениеКонтрагента);
		СтруктураЗаполнения.Вставить("ГрузополучательПоОКПО", 		СведенияОбКонтрагенте.КодПоОКПО);
		СтруктураЗаполнения.Вставить("ПредставлениеПоставщика", 	ПредставлениеОрганизации);
		СтруктураЗаполнения.Вставить("ПоставщикПоОКПО", 			СведенияОбОрганизации.КодПоОКПО);
		СтруктураЗаполнения.Вставить("ПредставлениеПлательщика",	ПредставлениеКонтрагента); 
		СтруктураЗаполнения.Вставить("ПлательщикПоОКПО", 		    СведенияОбКонтрагенте.КодПоОКПО);
		СтруктураЗаполнения.Вставить("ОснованиеНомер",              "");
		СтруктураЗаполнения.Вставить("ОснованиеДата",               "");
		СтруктураЗаполнения.Вставить("ТранспортнаяНакладнаяНомер",  "");
		СтруктураЗаполнения.Вставить("ТранспортнаяНакладнаяДата",   "");
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);		
		СтруктураЗаполнения.Вставить("НомерДокумента", НомерДокумента);
		СтруктураЗаполнения.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));		
		ЗаполнитьЗначенияСвойств(ОбластьМакетаШапка.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		// Инициализация счетчика страниц
		НомерСтраницы = 1;
		
		// Инициализация итогов по странице
		ИтогоМестНаСтранице       = 0;
		ИтогоКоличествоНаСтранице = 0;
		ИтогоСуммаНаСтранице      = 0;
		ИтогоНДСНаСтранице        = 0;
		ИтогоСуммаСНДСНаСтранице  = 0;
		
		// Инициализация итогов по документу
		ИтогоМест       = 0;
		ИтогоКоличество = 0;
		ИтогоСуммаСНДС  = 0;
		ИтогоСумма      = 0;
		ИтогоНДС        = 0;
		
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		КоличествоСтрок = ВыборкаСтрокНоменклатура.Количество();
		
		// Выводим заголовок многострочной части
		ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы));
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		// Выводим многострочную часть документа
		Пока ВыборкаСтрокНоменклатура.Следующий() Цикл
			НомерСтроки = НомерСтроки + 1;	
			СтруктураЗаполнения.Вставить("Номер", 					НомерСтроки);
			СтруктураЗаполнения.Вставить("ТоварНаименование", 		ВыборкаСтрокНоменклатура.Номенклатура);
			СтруктураЗаполнения.Вставить("ТоварКод",				ВыборкаСтрокНоменклатура.КодНоменклатуры);
			СтруктураЗаполнения.Вставить("БазоваяЕдиницаНаименование", ВыборкаСтрокНоменклатура.ЕдиницаИзмерения);
			СтруктураЗаполнения.Вставить("БазоваяЕдиницаКодПоОКЕИ", ВыборкаСтрокНоменклатура.КодЕдиницыИзмерения);
			СтруктураЗаполнения.Вставить("ВидУпаковки",				"");
			СтруктураЗаполнения.Вставить("КоличествоВОдномМесте", 	"");
			СтруктураЗаполнения.Вставить("КоличествоМест",		 	"");
			СтруктураЗаполнения.Вставить("МассаБрутто",			 	"");
			
			СуммаСНДС = ВыборкаСтрокНоменклатура.Всего;
			Коэффициент = 1;
			Если ТипЗнч(ВыборкаСтрокНоменклатура.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				
				Коэффициент = ВыборкаСтрокНоменклатура.ЕдиницаИзмеренияДокумент.Коэффициент;
				
			КонецЕсли;
			Количество		= ВыборкаСтрокНоменклатура.Количество * Коэффициент;
			СтруктураЗаполнения.Вставить("Количество", Количество);
			
			СуммаНДС		= ВыборкаСтрокНоменклатура.СуммаНДС;
			СуммаБезНДС		= ВыборкаСтрокНоменклатура.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокНоменклатура.СуммаНДС, 0);
			
			СтруктураЗаполнения.Вставить("СуммаСНДС",   СуммаСНДС);
			СтруктураЗаполнения.Вставить("СуммаНДС",    СуммаНДС);
			СтруктураЗаполнения.Вставить("СтавкаНДС",   ВыборкаСтрокНоменклатура.СтавкаНДС);
			СтруктураЗаполнения.Вставить("СуммаБезНДС", СуммаБезНДС);
			СтруктураЗаполнения.Вставить("Цена",        СуммаБезНДС / ?(Количество = 0, 1, Количество));
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			Если НомерСтроки = 1 Тогда
				СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы);// если первая строка, то должен
			КонецЕсли;													// помещаться заголовок
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда			// если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);	// помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;
			
			Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Новый Структура("ИтогМестПоСтранице",	ИтогоМестНаСтранице));
				ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Новый Структура("ИтогКоличествоПоСтранице", 
					ИтогоКоличествоНаСтранице));
				ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Новый Структура("ИтогСуммыПоСтранице", ИтогоСуммаНаСтранице));
				ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Новый Структура("ИтогНДСПоСтранице",   ИтогоНДСНаСтранице));
				ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Новый Структура("ИтогСуммыСНДСПоСтранице", 
					ИтогоСуммаСНДСНаСтранице));
				ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Очистим итоги по странице		
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы));
				ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрока.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
			// Увеличим итоги по странице		
			ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
			ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
			ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
			ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
			
			// Увеличим итоги по документу		
			ИтогоКоличество = ИтогоКоличество + Количество;
			ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
			ИтогоНДС        = ИтогоНДС        + СуммаНДС;
			ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Новый Структура("ИтогМестПоСтранице",       ""));
		ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Новый Структура("ИтогКоличествоПоСтранице", 
			ИтогоКоличествоНаСтранице));
		ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Новый Структура("ИтогСуммыПоСтранице",      ИтогоСуммаНаСтранице));
		ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Новый Структура("ИтогНДСПоСтранице",        ИтогоНДСНаСтранице));
		ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Новый Структура("ИтогСуммыСНДСПоСтранице",  
			ИтогоСуммаСНДСНаСтранице));
		
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.Заполнить(Новый Структура("ИтогМест",       ""));
		ОбластьМакетаВсего.Параметры.Заполнить(Новый Структура("ИтогКоличество", ИтогоКоличество));
		ОбластьМакетаВсего.Параметры.Заполнить(Новый Структура("ИтогСуммы",      ИтогоСумма));
		ОбластьМакетаВсего.Параметры.Заполнить(Новый Структура("ИтогНДС",        ИтогоНДС));
		ОбластьМакетаВсего.Параметры.Заполнить(Новый Структура("ИтогСуммыСНДС",  ИтогоСуммаСНДС));
		
		ТабличныйДокумент.Вывести(ОбластьМакетаВсего);
		
		// Выводим подвал документа
		ЗначенияПараметров = Новый Структура;
		
		ЗначенияПараметров.Вставить("ДоверенностьНомер", 	"");
		ЗначенияПараметров.Вставить("ДоверенностьДата", 	"");
		ЗначенияПараметров.Вставить("ДоверенностьВыдана", 	"");
		ЗначенияПараметров.Вставить("ДоверенностьЧерезКого", "");			
		ЗначенияПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью",
			ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0"));
		ЗначенияПараметров.Вставить("ВсегоМестПрописью",	?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")));
		ЗначенияПараметров.Вставить("СуммаПрописью",
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаСНДС, 
				УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту()));
		
		ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
		ДлинаСтроки			= СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель	= Найти(ПолнаяДатаДокумента," ");
		ВторойРазделитель	= Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		
		ЗначенияПараметров.Вставить("ДатаДокументаДень", """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """");
		ЗначенияПараметров.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, 
			ВторойРазделитель - ПервыйРазделитель - 1));
		ЗначенияПараметров.Вставить("ДатаДокументаГод",	 Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ЗначенияПараметров);
		СтруктураРуководители = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, 
			Шапка.ДатаДокумента);
		ОбластьМакетаПодвал.Параметры.Заполнить(Новый Структура("ДолжностьРуководителя", СтруктураРуководители.РуководительДолжность));
		ОбластьМакетаПодвал.Параметры.Заполнить(Новый Структура("ФИОРуководителя", СтруктураРуководители.ФИОРуководителя));
		ОбластьМакетаПодвал.Параметры.Заполнить(Новый Структура("ФИОГлавБухгалтера", 
			СтруктураРуководители.ФИОГлавногоБухгалтера));
		ОбластьМакетаПодвал.Параметры.Заполнить(Новый Структура("ДолжностьКладовщика", 
			СтруктураРуководители.КладовщикДолжность));
		ОбластьМакетаПодвал.Параметры.Заполнить(Новый Структура("ФИОКладовщика", СтруктураРуководители.ФИОКладовщика));
		ЗаполнитьЗначенияСвойств(ОбластьМакетаПодвал.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЦикла;		
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура печати документа.
//
Функция ПечатьЗаказПокупателя(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура; 
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказПокупателя";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НарядНаРаботы.Ссылка КАК Ссылка,
	|	НарядНаРаботы.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	НарядНаРаботы.ВалютаДокумента КАК ВалютаДокумента,
	|	НарядНаРаботы.Дата КАК ДатаДокумента,
	|	НарядНаРаботы.Номер КАК Номер,
	|	НарядНаРаботы.Контрагент КАК Контрагент,
	|	НарядНаРаботы.Организация КАК Организация,
	|	НарядНаРаботы.Организация.Префикс КАК Префикс,
	|	НарядНаРаботы.Работы.(
	|		Услуга.Наименование КАК Номенклатура,	
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Количество КАК Количество,
	|		Описание КАК Содержание,
	|		Услуга.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		НомерСтроки КАК НомерСтроки
	|	),
	|	НарядНаРаботы.Номенклатура.(
	|		Номенклатура.Наименование КАК Номенклатура,	
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Количество КАК Количество,	
	|		Описание КАК Содержание,
	|		НомерСтроки КАК НомерСтроки
	|	),
	|	НарядНаРаботы.БанковскийСчет
	|ИЗ
	|	Документ.НарядНаРаботы КАК НарядНаРаботы
	|ГДЕ
	|	НарядНаРаботы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядНаРаботы_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.НарядНаРаботы.ПФ_MXL_" + ИмяМакета);
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,
			Шапка.БанковскийСчет);
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", 
			СтрШаблон(НСтр("ru = 'Заказ покупателя № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, 
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПолучателя", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, 
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВыборкаСтрокРаботы 			= Шапка.Работы.Выбрать();
		ВыборкаСтрокНоменклатура 	= Шапка.Номенклатура.Выбрать();
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");	
		
		НомерСтроки = 0;
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;
		
		Пока ВыборкаСтрокРаботы.Следующий() Цикл
			НомерСтроки = НомерСтроки + 1;			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокРаботы);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки", НомерСтроки));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаОтгрузки", Шапка.ДатаДокумента));
			Если ЗначениеЗаполнено(ВыборкаСтрокРаботы.Содержание) Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Номенклатура", ВыборкаСтрокРаботы.Содержание));
			Иначе
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Номенклатура", ВыборкаСтрокРаботы.Номенклатура));
			КонецЕсли;						
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокРаботы.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокРаботы.СуммаНДС;
			Всего		= Всего		+ ВыборкаСтрокРаботы.Всего;
			Количество	= Количество+ 1;
			
		КонецЦикла;
		
		Пока ВыборкаСтрокНоменклатура.Следующий() Цикл
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатура);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки", НомерСтроки));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаОтгрузки", Шапка.ДатаДокумента));
			Если ЗначениеЗаполнено(ВыборкаСтрокНоменклатура.Содержание) Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Номенклатура", ВыборкаСтрокНоменклатура.Содержание));
			Иначе
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Номенклатура", ВыборкаСтрокНоменклатура.Номенклатура));
			КонецЕсли;												
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокНоменклатура.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокНоменклатура.СуммаНДС;
			Всего		= Всего		+ ВыборкаСтрокНоменклатура.Всего;
			Количество	= Количество+ 1;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", УправлениеITОтделом8УФ.ФорматСумм(Сумма)));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", НСтр("ru = 'Без налога (НДС)'")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", "-"));
		Иначе
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", 
				?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":"));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДС)));
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), Строка(Количество), 
				УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента))));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью", 
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента)));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");		
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура печати документа.
//
Функция ПечатьЗаказНаряд(МассивОбъектов, ОбъектыПечати, ИмяМакета) 
	
	СтруктураЗаполнения = Новый Структура; 
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказПокупателя";

	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НарядНаРаботы.Ссылка,
		|	НарядНаРаботы.Номер,
		|	НарядНаРаботы.Дата КАК ДатаДокумента,
		|	НарядНаРаботы.БанковскийСчет,
		|	НарядНаРаботы.ВалютаДокумента,
		|	НарядНаРаботы.Договор,
		|	НарядНаРаботы.Контрагент,
		|	НарядНаРаботы.Организация,
		|	НарядНаРаботы.Подразделение,
		|	НарядНаРаботы.Пользователь,
		|	НарядНаРаботы.СуммаВключаетНДС,
		|	НарядНаРаботы.Работы.(
		|		Ссылка,
		|		НомерСтроки,
		|		Услуга.Наименование КАК Товар,
		|		Услуга.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Задание,
		|		Описание КАК Содержание,
		|		Подразделение,
		|		Цена,
		|		Сумма,
		|		Пользователь КАК Исполнители,
		|		СтатьяДоходовРасходов,
		|		СтавкаНДС,
		|		СуммаНДС,
		|		Всего
		|	),
		|	НарядНаРаботы.Номенклатура.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура КАК Товар,
		|		Партия,
		|		КарточкаНоменклатуры,
		|		Количество,
		|		Описание КАК Содержание,
		|		Подразделение,
		|		СтатьяДоходовРасходов,
		|		ЕдиницаИзмерения,
		|		Комплект,
		|		Цена,
		|		Сумма,
		|		СтавкаНДС,
		|		СуммаНДС,
		|		Всего
		|	),
		|	НарядНаРаботы.МатериалыЗаказчика.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура КАК Товар,
		|		Количество,
		|		ЕдиницаИзмерения
		|	)
		|ИЗ
		|	Документ.НарядНаРаботы КАК НарядНаРаботы
		|ГДЕ
		|	НарядНаРаботы.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
	    ВыборкаСтрокРаботы = Шапка.Работы.Выбрать();
		ВыборкаСтрокТовары = Шапка.Номенклатура.Выбрать();
		ВыборкаСтрокМатериалыЗаказчика = Шапка.МатериалыЗаказчика.Выбрать();
		
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядНаРаботы_ПФ_MXL_ЗаказНаряд" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.НарядНаРаботы.ПФ_MXL_" + ИмяМакета);
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", 
			СтрШаблон(НСтр("ru = 'Заказ-наряд № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, 
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПолучателя", 
			УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, 
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Сроки");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СуммаРаботы		= 0;
		СуммаНДСРаботы	= 0;
		Сумма			= 0;
		СуммаНДС		= 0;
		Всего			= 0;
		Количество		= 0;
		
		// РАБОТЫ.				
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыРаботы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботы");		
		
		Пока ВыборкаСтрокРаботы.Следующий() Цикл
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокРаботы);
			
			Если ЗначениеЗаполнено(ВыборкаСтрокРаботы.Содержание) Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Товар", ВыборкаСтрокРаботы.Содержание));
			Иначе
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Товар", ВыборкаСтрокРаботы.Товар));
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма			= Сумма			+ ВыборкаСтрокРаботы.Сумма;
			СуммаНДС		= СуммаНДС		+ ВыборкаСтрокРаботы.СуммаНДС;
			Всего			= Всего			+ ВыборкаСтрокРаботы.Всего;
			СуммаРаботы		= СуммаРаботы	+ ВыборкаСтрокРаботы.Сумма;
			СуммаНДСРаботы	= СуммаНДСРаботы+ ВыборкаСтрокРаботы.СуммаНДС;
			Количество		= Количество	+ 1; 
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРаботы");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", УправлениеITОтделом8УФ.ФорматСумм(СуммаРаботы)));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДСРаботы");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", НСтр("ru = 'Без налога (НДС)'")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", "-"));
		Иначе
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", 
				?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":"));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДСРаботы)));
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// ТОВАРЫ
		Если Шапка.Номенклатура.Выгрузить().Количество() > 0 Тогда		
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыТовары");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТовары");			
			СуммаТовары		= 0;
			СуммаНДСТовары	= 0;
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				
				Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Содержание) Тогда
					ОбластьМакета.Параметры.Заполнить(Новый Структура("Товар", ВыборкаСтрокТовары.Содержание));
				Иначе
					ОбластьМакета.Параметры.Заполнить(Новый Структура("Товар", ВыборкаСтрокТовары.Товар));
				КонецЕсли;				
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				СуммаТовары		= СуммаТовары	+ ВыборкаСтрокТовары.Сумма;
				СуммаНДСТовары	= СуммаНДСТовары+ ВыборкаСтрокТовары.СуммаНДС;
				Сумма			= Сумма			+ ВыборкаСтрокТовары.Сумма;
				СуммаНДС		= СуммаНДС		+ ВыборкаСтрокТовары.СуммаНДС;
				Всего 			= Всего			+ ВыборкаСтрокТовары.Всего;
				Количество		= Количество	+ 1;
				
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТовары");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", УправлениеITОтделом8УФ.ФорматСумм(СуммаТовары)));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДСТовары");
			Если СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", НСтр("ru = 'Без налога (НДС)'")));
				ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", "-"));
			Иначе
				ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", 
					?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":"));
				ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДСТовары)));
			КонецЕсли; 
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли; 
		
		// МАТЕРИАЛЫ ЗАКАЗЧИКА
		Если Шапка.МатериалыЗаказчика.Выгрузить().Количество() > 0 Тогда
		
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалыЗаказчика");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаМатериалыЗаказчика");
			
			Пока ВыборкаСтрокМатериалыЗаказчика.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокМатериалыЗаказчика);
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоМатериалыЗаказчика");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		
		КонецЕсли; 
		
		// ПОДВАЛ.
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтоговаяСтрока", 
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), Строка(Количество), 
				УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента))));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью", 
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента)));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;	
КонецФункции
	
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Если ИмяМакета = "АктОбОказанииУслуг" ИЛИ ИмяМакета = "АктОбОказанииУслугПодробно" Тогда
		
		Возврат ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "СчетНаОплату" Тогда
		
		Возврат ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "РасходнаяНакладная" Тогда
		
		Возврат ПечатьРасходнаяНакладная(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "ТОРГ12" ИЛИ ИмяМакета = "ТОРГ12СУслугами" Тогда
		
		Возврат ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "ЗаказПокупателя" Тогда
		
		Возврат ПечатьЗаказПокупателя(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "ЗаказНаряд" Тогда
		
		Возврат ПечатьЗаказНаряд(МассивОбъектов, ОбъектыПечати, ИмяМакета);
	
	КонецЕсли;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслуг") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктОбОказанииУслуг", 
			НСтр("ru = 'Акт об оказании услуг'"), 
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктОбОказанииУслуг"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслугПодробно") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктОбОказанииУслугПодробно",
			НСтр("ru = 'Акт об оказании услуг (подробно)'"), 
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктОбОказанииУслугПодробно"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплату") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаОплату",
			НСтр("ru = 'Счет на оплату'"), 
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "СчетНаОплату"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасходнаяНакладная") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасходнаяНакладная", 
			НСтр("ru = 'Расходная накладная'"), 
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "РасходнаяНакладная"));	
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12", 
			НСтр("ru = 'ТОРГ - 12'"), 
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ТОРГ12"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12СУслугами") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12СУслугами", 
			НСтр("ru = 'ТОРГ - 12 (с услугами)'"), 
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ТОРГ12СУслугами"));			
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказПокупателя") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказПокупателя", 
			НСтр("ru = 'Заказ покупателя'"), 
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ЗаказПокупателя"));				
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаряд") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНаряд", 
			НСтр("ru = 'Заказ - наряд'"), 
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ЗаказНаряд"));					
		
	КонецЕсли;
		
КонецПроцедуры										

// Заполняет список команд печати Заказа покупателя.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 4;
	
	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 7;
	
	// Акт об оказании услуг (подробно)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслугПодробно";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг (подробно)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 10;
	
	// Заказ-наряд
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказНаряд";
	КомандаПечати.Представление = НСтр("ru = 'Заказ - наряд'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 11;
	
	// Заказ покупателя
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказПокупателя";
	КомандаПечати.Представление = НСтр("ru = 'Заказ покупателя'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 12;
	
	// Расходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасходнаяНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Расходная накладная'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 14;
	
	// Торг12
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'ТОРГ-12'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 17;
	
	// Торг12 с услугами
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12СУслугами";
	КомандаПечати.Представление = НСтр("ru = 'ТОРГ-12 (с услугами)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 20;
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел().
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт

	ГруппаДел	= НСтр("ru = 'Наряды на работы'");
	ИмяФормы	= "Документ.НарядНаРаботы.Форма.ФормаСписка";
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.НарядНаРаботы)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	НарядНаРаботы.Состояние КАК Состояние,
	    |	СУММА(1) КАК Количество
	    |ИЗ
	    |	Документ.НарядНаРаботы КАК НарядНаРаботы
	    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СостояниеНарядовНаРаботы КАК СостояниеНарядовНаРаботы
	    |		ПО НарядНаРаботы.Состояние = СостояниеНарядовНаРаботы.Ссылка
	    |ГДЕ
	    |	НарядНаРаботы.Ссылка В
	    |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	    |				НарядНаРаботыРаботы.Ссылка КАК Ссылка
	    |			ИЗ
	    |				Документ.НарядНаРаботы.Работы КАК НарядНаРаботыРаботы
	    |			ГДЕ
	    |				НарядНаРаботыРаботы.Пользователь = &Пользователь
	    |				И НарядНаРаботыРаботы.Ссылка.ПометкаУдаления = ЛОЖЬ
	    |				И НарядНаРаботыРаботы.Ссылка.Закрыт = ЛОЖЬ
	    |		
	    |			ОБЪЕДИНИТЬ ВСЕ
	    |		
	    |			ВЫБРАТЬ
	    |				НарядНаРаботы.Ссылка
	    |			ИЗ
	    |				Документ.НарядНаРаботы КАК НарядНаРаботы
	    |			ГДЕ
	    |				НарядНаРаботы.Пользователь = &Пользователь
	    |				И НарядНаРаботы.ПометкаУдаления = ЛОЖЬ
	    |				И НарядНаРаботы.Закрыт = ЛОЖЬ)
	    |	И СостояниеНарядовНаРаботы.СтатусЗаказа <> &СтатусВыполнен
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	НарядНаРаботы.Состояние";
		
	Запрос.УстановитьПараметр("Пользователь", ОбщиеПараметрыЗапросов.Пользователь);
	Запрос.УстановитьПараметр("СтатусВыполнен", Перечисления.СтатусыЗаказов.Выполнен);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор	 = "НарядыНаРаботы" + Выборка.Состояние.Код;
		Дело.ЕстьДела		= Выборка.Количество > 0;
		Дело.Представление	= Выборка.Состояние;
		Дело.Количество		= Выборка.Количество;
		Дело.Форма			= ИмяФормы;
		Дело.ПараметрыФормы	= Новый Структура("ТекущиеДела, Состояние, ТекущийПользователь", Истина, Выборка.Состояние,
			Пользователи.ТекущийПользователь());
		Дело.Владелец		= ГруппаДел;
		Дело.Подсказка		= "";
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
		
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецЕсли