#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////

// Устанавливает параметры загрузки.
//
// Параметры:
// 	Параметры - Структура - Структура параметров.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Интерфейс для работы с подсистемой Загрузка из файла.
//
// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   ПолноеИмяТабличнойЧасти   	- Строка - полное имя табличной части, в которую загружаются данные.
//   АдресЗагружаемыхДанных    	- Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число 	- порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления 	- Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей 	- ТаблицаЗначений - список неоднозначных значений, для которых 
//										  в ИБ имеется несколько подходящих вариантов.
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//   ДополнительныеПараметры	- структура - дополнительные параметры.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Товары =  ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляСопоставления.Артикул,
		|	ДанныеДляСопоставления.Номенклатура,
		|	ДанныеДляСопоставления.Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ
		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка,
		|	СпрНоменклатура.Артикул,
		|	ДанныеДляСопоставления.Идентификатор
		|ПОМЕСТИТЬ СопоставленнаяНоменклатураПоШтрихкоду
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (СпрНоменклатура.Артикул ПОДОБНО ДанныеДляСопоставления.Артикул)
		|ГДЕ
		|	НЕ СпрНоменклатура.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляСопоставления.Номенклатура,
		|	ДанныеДляСопоставления.Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставленияПоНаименованию
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
		|		ПО (ДанныеДляСопоставления.Номенклатура ПОДОБНО СопоставленнаяНоменклатураПоШтрихкоду.Ссылка.Наименование)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка,
		|	ДанныеДляСопоставленияПоНаименованию.Идентификатор,
		|	ДанныеДляСопоставленияПоНаименованию.Идентификатор КАК Количество
		|ИЗ
		|	ДанныеДляСопоставленияПоНаименованию КАК ДанныеДляСопоставленияПоНаименованию
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (СпрНоменклатура.Наименование ПОДОБНО ДанныеДляСопоставленияПоНаименованию.Номенклатура)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(СопоставленнаяНоменклатураПоШтрихкоду.Ссылка),
		|	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор,
		|	СУММА(СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор)
		|ИЗ
		|	СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
		|
		|СГРУППИРОВАТЬ ПО
		|	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор";

	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = РезультатыЗапросов[3].Выгрузить();
	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл 
		
		Товар = Товары.Добавить();
		Товар.Идентификатор = СтрокаТаблицы.Идентификатор;
		Товар.Количество = СтрокаТаблицы.Количество;
		Товар.Цена = СтрокаТаблицы.Цена;
		
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура <> Неопределено Тогда 
			Если СтрокаНоменклатура.Количество >= 1 Тогда 
				Товар.Номенклатура  = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда 
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - имя колонки, в который возникла неоднозначность 
//  СписокНеоднозначностей    - ТаблицаЗначений - Список для заполнения с неоднозначными данными
//     * Идентификатор        - Число  - Уникальный идентификатор строки
//     * Колонка              - Строка -  Имя колонки с возникшей неоднозначностью 
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры	  - структура - дополнительные параметры.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт 
	
	Если ИмяКолонки = "Номенклатура" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);  
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	РеквизитПоложениеДатыПоступления  = Реквизиты.Найти("ЗаказПоставщику.ПоложениеДатыПоступления");
	Реквизиты.Удалить(РеквизитПоложениеДатыПоступления);
	РеквизитПоложениеПодразделения    = Реквизиты.Найти("ЗаказПоставщику.ПоложениеПодразделения");
	Реквизиты.Удалить(РеквизитПоложениеПодразделения);
	ПоложениеСтатьиДоходовРасходов	  = Реквизиты.Найти("ЗаказПоставщику.ПоложениеСтатьиДоходовРасходов");
	Реквизиты.Удалить(ПоложениеСтатьиДоходовРасходов);	
	
	// Определение реквизита краткое содержимое табличной части Номенклатура.
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "СодержимоеТабличнойЧастиНоменклатураТекст";
	НовыйРеквизит.Представление = НСтр("ru = 'Содержимое табличной части ""Номенклатура"" (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип = Новый ОписаниеТипов("Строка");
	
	Если ДополнительныеПараметры.ТипШаблона = "Письмо"
		И ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "СодержимоеТабличнойЧастиНоменклатураHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Содержимое табличной части ""Номенклатура"" (в формате HTML)'");
		НовыйРеквизит.Представление = НСтр("ru = 'Содержимое табличной части ""Номенклатура"" (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
	КонецЕсли;	
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Сообщение.Вставить("Предмет", ПредметСообщения);	
	
	// Внешняя ссылка. 
	Если Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект") <> Неопределено Тогда
		ЗначениеВнешнейСсылки = Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект");
		ТекстЗаголовка = ?(ПустаяСтрока(ПредметСообщения.Тема), Строка(ПредметСообщения.Номер) + " от "
			+ Строка(Формат(ПредметСообщения.Дата, "ДФ=dd.MM.yy")), ПредметСообщения.Тема);
			
		Сообщение.ЗначенияРеквизитов["ВнешняяСсылкаНаОбъект"] = "<a href="
			+ Строка(ЗначениеВнешнейСсылки) + ">" + ТекстЗаголовка + "</a></p>";
			
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Контрагент", Перечисления.ТипыКонтактнойИнформации.Телефон);
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Инициатор", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Контрагент");
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Инициатор");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел().
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт

	ГруппаДел	= НСтр("ru = 'Заказы поставщикам'");
	ИмяФормы	= "Документ.ЗаказПоставщику.Форма.ФормаСписка";
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказПоставщику)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	ЗаказПоставщику.СостояниеЗаказа КАК СостояниеЗаказа,
	    |	СУММА(1) КАК Количество
	    |ИЗ
	    |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
	    |		ПО ЗаказПоставщику.СостояниеЗаказа = СостоянияЗаказовПоставщикам.Ссылка
	    |ГДЕ
	    |	ЗаказПоставщику.Закрыт = ЛОЖЬ
	    |	И ЗаказПоставщику.ПометкаУдаления = ЛОЖЬ
	    |	И ЗаказПоставщику.СостояниеЗаказа <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПоставщикам.ПустаяСсылка)
	    |	И ЗаказПоставщику.Автор = &Пользователь
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	ЗаказПоставщику.СостояниеЗаказа";
		
	Запрос.УстановитьПараметр("Пользователь", ОбщиеПараметрыЗапросов.Пользователь);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор	 = "ЗаказыПоставщикам" + Выборка.СостояниеЗаказа.Код;
		Дело.ЕстьДела		= Выборка.Количество > 0;
		Дело.Представление	= Выборка.СостояниеЗаказа;
		Дело.Количество		= Выборка.Количество;
		Дело.Форма			= ИмяФормы;
		Дело.ПараметрыФормы	= Новый Структура("ТекущиеДела, СостояниеЗаказа, ТекущийПользователь", Истина, Выборка.СостояниеЗаказа, Пользователи.ТекущийПользователь());
		Дело.Владелец		= ГруппаДел;
		Дело.Подсказка		= "";
		
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;	
	СоответствиеИзменениеОбъекта.Вставить("ЗаказПоставщикуИзменениеОбъектаИзменениеСостояния", НСтр("ru = 'Изменение состояния'"));
	СоответствиеИзменениеОбъекта.Вставить("ЗаказПоставщикуИзменениеОбъектаЗакрытие", 		   НСтр("ru = 'Закрытие'"));
	СоответствиеИзменениеОбъекта.Вставить("ЗаказПоставщикуИзменениеОбъектаПроведение", 		   НСтр("ru = 'Проведение'"));
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("ЗаказПоставщикуРасчетМетрикЗаписьДокумента", НСтр("ru = 'Запись документа'"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура, Знач Источник) Экспорт
	
	Результат = Ложь;
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ИмяСобытия = "ЗаказПоставщикуИзменениеОбъектаИзменениеСостояния" Тогда
		
		Если Структура.ЭтоНовый Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.СостояниеЗаказа <> ИсточникПередЗаписью.СостояниеЗаказа Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаказПоставщикуИзменениеОбъектаЗакрытие" Тогда
		
		Если Структура.ЭтоНовый И Источник.Закрыт = Истина Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Закрыт = Истина И Источник.Закрыт <> ИсточникПередЗаписью.Закрыт Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаказПоставщикуИзменениеОбъектаПроведение" Тогда
		
		Если Структура.ЭтоНовый И Источник.Проведен = Истина Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Проведен <> ИсточникПередЗаписью.Проведен И Источник.Проведен = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.ВариантыОтчетов
// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоЗаказамПоставщикам) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();		
		КомандаОтчет.Менеджер      = Метаданные.Отчеты.ВедомостьПоЗаказамПоставщикам.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Анализ заказа'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность      = "Обычное";
		КомандаОтчет.КлючВарианта  = "Основной";		
		
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();		
		КомандаОтчет.Менеджер      = Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Взаиморасчеты с контрагентами'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность      = "Обычное";
		КомандаОтчет.КлючВарианта  = "Основной";		
		
	КонецЕсли;
			
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВариантыОтчетов

////////////////////////////////////////////////////////////////////////////////

// Функция возвращает список имен «ключевых» реквизитов.
//
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать,
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив реквизитов, редактируемых при групповой обработке.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;		
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Взаимодействия.

// Возвращает партнера и контактных лиц сделки.
// 
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПоКонтактам(ЭтоФрагментЗапроса = Ложь) Экспорт
		
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщику.Контрагент КАК Контакт
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Предмет
	|	И (НЕ ЗаказПоставщику.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))";
	
	Если ЭтоФрагментЗапроса Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Добавляет сведения для отправки по электронной почте.
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПоставщику.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Контрагент";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса 	= Запрос.Выполнить().Выгрузить();
	СведенияОПоставщике = Неопределено;
	Если РезультатЗапроса.Количество() = 1 Тогда
		СведенияОПоставщике = РезультатЗапроса[0];
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПоставщику.Номер,
	|	ЗаказПоставщику.Дата,
	|	ЗаказПоставщику.Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&МассивОбъектов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	
	Если КоллекцияПечатныхФорм.Количество() = 1 Тогда
		ПараметрыОтправки.Тема = КоллекцияПечатныхФорм[0].СинонимМакета;
		ПараметрыОтправки.Текст = НСтр("ru = 'Добрый день.'") + Символы.ПС + Символы.ПС + НСтр("ru = 'Файл во вложении.'");
	Иначе 
		ПараметрыОтправки.Тема = НСтр("ru = 'Документы'");
		ПараметрыОтправки.Текст = НСтр("ru = 'Добрый день.'") + Символы.ПС + Символы.ПС + НСтр("ru = 'Файлы во вложении.'");
	КонецЕсли;
	
	ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + Символы.ПС;
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Пока ВыборкаОбъектов.Следующий() Цикл
			ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + Символы.ПС + СформироватьЗаголовокДокумента(ВыборкаОбъектов, НазваниеДокумента(ПечатнаяФорма.ИмяМакета));
		КонецЦикла;
	КонецЦикла;
	
	// Получатель заполняется только в случае, если он один для всех документов.
	Если СведенияОПоставщике <> Неопределено Тогда
		ОбъектыКонтактнойИнформации = Новый Массив;		
		ОбъектыКонтактнойИнформации.Добавить(СведенияОПоставщике.Контрагент);
		
		ТипыКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		АдресаПартнера 			 = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ОбъектыКонтактнойИнформации, ТипыКонтактнойИнформации);
		
		Получатели = Новый Массив;
		Для Каждого Адрес Из АдресаПартнера Цикл
			ПредставлениеАдреса = Адрес.Представление;
			Если Не ПустаяСтрока(ПредставлениеАдреса) Тогда
				ПредставлениеПолучателя  = Строка(Адрес.Объект);
				Пояснение 				 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контактное лицо %1'"), Адрес.Объект);				
				ОписаниеПолучателя 		 = СоздатьОписаниеПолучателя();
				ОписаниеПолучателя.Адрес 						= ПредставлениеАдреса;
				ОписаниеПолучателя.Представление 				= ПредставлениеПолучателя;
				ОписаниеПолучателя.ИсточникКонтактнойИнформации = Адрес.Объект;
				ОписаниеПолучателя.ВидПочтовогоАдреса 			= Строка(Адрес.Вид);
				ОписаниеПолучателя.Пояснение 					= Пояснение;				
				Получатели.Добавить(ОписаниеПолучателя);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Получатели.Количество() = 0 Тогда
			ОписаниеПолучателя 								= СоздатьОписаниеПолучателя();
			ОписаниеПолучателя.ИсточникКонтактнойИнформации = СведенияОПоставщике.Контрагент;
			Получатели.Добавить(ОписаниеПолучателя);
		КонецЕсли;
		
		ПараметрыОтправки.Получатель = Получатели;
	КонецЕсли;
		
КонецПроцедуры

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа.
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "")
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа.
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = СтрНайти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, НомерНаПечать, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

Функция СоздатьОписаниеПолучателя()
	ОписаниеПолучателя = Новый Структура;
	ОписаниеПолучателя.Вставить("Адрес", "");
	ОписаниеПолучателя.Вставить("Представление", "");
	ОписаниеПолучателя.Вставить("ИсточникКонтактнойИнформации");
	ОписаниеПолучателя.Вставить("ВидПочтовогоАдреса", "");
	ОписаниеПолучателя.Вставить("Пояснение", "");
	
	Возврат ОписаниеПолучателя;
КонецФункции

Функция НазваниеДокумента(Идентификатор)
	
	Результат = "";
	Если Идентификатор = "СчетНаОплату" Тогда
		Результат = НСтр("ru = 'Счет на оплату'")
	ИначеЕсли Идентификатор = "ЗаказПоставщику" Тогда
		Результат = НСтр("ru = 'Заказ поставщику'")
	ИначеЕсли Идентификатор = "ЗапросКоммерческогоПредложения" Тогда
		Результат = НСтр("ru = 'Запрос коммерческого предложения'")	
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
		
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтерфейсПечати

////////////////////////////////////////////////////////////////////////////////

// Функция печати документа
//
Функция ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Перем Ошибки;
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК Ссылка,
		|	ЗаказПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ЗаказПоставщику.ВалютаДокумента КАК ВалютаДокумента,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщику.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЗаказПоставщику.Дата
		|		ИНАЧЕ ЗаказПоставщику.ДатаВходящегоДокумента
		|	КОНЕЦ КАК ДатаДокумента,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщику.НомерВходящегоДокумента = """"
		|			ТОГДА ЗаказПоставщику.Номер
		|		ИНАЧЕ ЗаказПоставщику.НомерВходящегоДокумента
		|	КОНЕЦ КАК Номер,
		|	ЗаказПоставщику.Контрагент КАК Контрагент,
		|	ЗаказПоставщику.Организация КАК Организация,
		|	ЗаказПоставщику.Организация.Префикс КАК Префикс,
		|	ЗаказПоставщику.Номенклатура.(
		|		Номенклатура.Наименование КАК Запас,
		|		Номенклатура.Артикул КАК Артикул,
		|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		Всего КАК Всего,
		|		Количество КАК Количество,
		|		"""" КАК Характеристика,
		|		Описание КАК Содержание,
		|		0 КАК ПроцентСкидкиНаценки,
		|		0 КАК ЕстьСкидка,
		|		НомерСтроки КАК НомерСтроки,
		|		Спецификация КАК Спецификация
		|	) КАК Номенклатура,
		|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчет,
		|	ЗаказПоставщику.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокЗапасы = Шапка.Номенклатура.Выбрать();
		
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядНаРаботы_" + ИмяМакета;
        
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетНаОплату"); 
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
		СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		// Если используется пользовательский макет - этих секций не было.
		Если Макет.Области.Найти("ЗаглавиеСЛоготипом") <> Неопределено
			И Макет.Области.Найти("ЗаглавиеБезЛоготипа") <> Неопределено Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеБезЛоготипа");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		Иначе
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати может работать некорректно.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			СтруктураЗаполнения.Вставить("БанкПолучателяПредставление", СведенияОбОрганизации.Банк.Наименование + " " + СведенияОбОрганизации.Банк.Город);
		КонецЕсли; 
		СтруктураЗаполнения.Вставить("ИНН", 						СведенияОбОрганизации.ИНН);
		СтруктураЗаполнения.Вставить("КПП",							СведенияОбОрганизации.КПП);
		СтруктураЗаполнения.Вставить("ПредставлениеПоставщика",		СведенияОбОрганизации.ПолноеНаименование);
		СтруктураЗаполнения.Вставить("БИКБанкаПолучателя",			СведенияОбОрганизации.БИК);
		СтруктураЗаполнения.Вставить("СчетБанкаПолучателяПредставление", СведенияОбОрганизации.КоррСчет);
		СтруктураЗаполнения.Вставить("СчетПолучателяПредставление", СведенияОбОрганизации.НомерСчета);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерДокумента = Шапка.Номер;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");		
		СтруктураЗаполнения.Вставить("ТекстЗаголовка", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Счет на оплату № %1 от %2'"),
			НомерДокумента,
			Формат(Шапка.ДатаДокумента, "ДЛФ=DD")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		СтруктураЗаполнения.Вставить("ПредставлениеПоставщика", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		СтруктураЗаполнения.Вставить("ПредставлениеПолучателя", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
		Если ЗначениеЗаполнено(Шапка.Подразделение) Тогда
			СтруктураЗаполнения.Вставить("ПредставлениеПолучателя", СтруктураЗаполнения.ПредставлениеПолучателя + " (Подразделение: " + Строка(Шапка.Подразделение) + ")");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;

		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			СтруктураЗаполнения.Вставить("НомерСтроки", Количество);
			
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
				СтруктураЗаполнения.Вставить("Запас", ВыборкаСтрокЗапасы.Содержание);
			Иначе
				СтруктураЗаполнения.Вставить("Запас", ВыборкаСтрокЗапасы.Запас);
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма	= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
			Всего	= Всего		+ ВыборкаСтрокЗапасы.Всего;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		СтруктураЗаполнения.Вставить("Всего", УправлениеITОтделом8УФ.ФорматСумм(Сумма));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			СтруктураЗаполнения.Вставить("НДС", НСтр("ru ='Без налога (НДС)'"));
			СтруктураЗаполнения.Вставить("ВсегоНДС", "-");
		Иначе
			СтруктураЗаполнения.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru ='В том числе НДС:'"), НСтр("ru ='Сумма НДС:'")));
			СтруктураЗаполнения.Вставить("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДС));
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("ИтогоКОплате") = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Не обнаружена область макета ""Итог к оплате"". Возможно используется пользовательский макет.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоКОплате");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоКОплате", УправлениеITОтделом8УФ.ФорматСумм(Всего)));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		СтруктураЗаполнения.Вставить("ИтоговаяСтрока", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Всего наименований %1, на сумму %2'"),
			Строка(Количество),
			УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)));
		
		СтруктураЗаполнения.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		
		СтруктураРуководители = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, Шапка.ДатаДокумента);
		СтруктураЗаполнения.Вставить("ФИОРуководителя", СтруктураРуководители.ФИОРуководителя);
		СтруктураЗаполнения.Вставить("ФИОБухгалтера",	СтруктураРуководители.ФИОГлавногоБухгалтера);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьСчетНаОплату()

// Функция печати документа
//
Функция ПечатьЗаказПоставщику(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказПоставщику";
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		
		Если ИмяМакета = "ЗаказПоставщику"Тогда
						
			Запрос.Текст=
				"ВЫБРАТЬ
				|	ЗаказПоставщику.Номер КАК Номер,
				|	ЗаказПоставщику.Дата КАК ДатаДокумента,
				|	ЗаказПоставщику.Комментарий КАК Комментарий,
				|	ЗаказПоставщику.Организация КАК Организация,
				|	ЗаказПоставщику.ВидОперации КАК ВидОперации,
				|	ЗаказПоставщику.Контрагент КАК Контрагент,
				|	ЗаказПоставщику.Договор КАК Договор,
				|	ЗаказПоставщику.Подразделение КАК Подразделение,
				|	ЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
				|	ЗаказПоставщику.СостояниеЗаказа КАК СостояниеЗаказа,
				|	ЗаказПоставщику.Закрыт КАК Закрыт,
				|	ЗаказПоставщику.Бюджет КАК Бюджет,
				|	ЗаказПоставщику.ПериодБюджета КАК ПериодБюджета,
				|	ЗаказПоставщику.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
				|	ЗаказПоставщику.МестоХранения КАК МестоХранения,
				|	ЗаказПоставщику.Ссылка КАК Ссылка,
				|	ЗаказПоставщику.НалогообложениеНДС КАК НалогообложениеНДС,
				|	ЗаказПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
				|	ЗаказПоставщику.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
				|	ЗаказПоставщику.Курс КАК Курс,
				|	ЗаказПоставщику.Кратность КАК Кратность,
				|	ЗаказПоставщику.ВалютаДокумента КАК ВалютаДокумента,
				|	ЗаказПоставщику.Автор КАК Автор,
				|	ЗаказПоставщику.Номенклатура.(
				|		Ссылка КАК Ссылка,
				|		НомерСтроки КАК НомерСтроки,
				|		Номенклатура КАК Номенклатура,
				|		Количество КАК Количество,
				|		Цена КАК Цена,
				|		Сумма КАК Сумма,
				|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|		СтавкаНДС КАК СтавкаНДС,
				|		СуммаНДС КАК СуммаНДС,
				|		ДатаПоступления КАК ДатаПоступления,
				|		Всего КАК Всего,
				|		СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
				|		Описание КАК Описание,
				|		Подразделение КАК Подразделение,
				|		Номенклатура.Артикул КАК НоменклатураАртикул,
				|		Спецификация КАК Спецификация
				|	) КАК Номенклатура,
				|	ЗаказПоставщику.Основания.(
				|		Ссылка КАК Ссылка,
				|		НомерСтроки КАК НомерСтроки,
				|		Основание КАК Основание
				|	) КАК Основания
				|ИЗ
				|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
				|ГДЕ
				|	ЗаказПоставщику.Ссылка = &ТекущийДокумент
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки";
			
			Шапка = Запрос.Выполнить().Выбрать();
			Шапка.Следующий();
			
			ВыборкаСтрок = Шапка.Номенклатура.Выбрать();
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПоставщику.ПФ_MXL_МакетЗаказПоставщику");
			
			СтруктураЗаполнения.Очистить();

			СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
			СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
			СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_ЗаказПоставщику";
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");			
			СтруктураЗаполнения.Вставить("ТекстЗаголовка", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказ поставщику № %1 от %2'"),
				НомерДокумента,
				Формат(Шапка.ДатаДокумента, "ДЛФ=DD")));
				
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
			СтруктураЗаполнения.Вставить("ПредставлениеПолучателя", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                                   = Макет.ПолучитьОбласть("Поставщик");
			ПредставлениеПоставщика                         = УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
			СтруктураЗаполнения.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ВыборкаСтрокНоменклатуры                        = Шапка.Номенклатура.Выбрать();
		    ОбластьМакета                                   = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			ОбластьМакета                                   = Макет.ПолучитьОбласть("Строка");		
			
			Сумма      = 0;
			СуммаНДС   = 0;
			Количество = 0;
			
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Запас", ВыборкаСтрокНоменклатуры.Номенклатура));
				ТабличныйДокумент.Вывести(ОбластьМакета);
				Сумма                         = Сумма + ВыборкаСтрокНоменклатуры.Сумма;
				СуммаНДС                      = СуммаНДС + ВыборкаСтрокНоменклатуры.СуммаНДС;				
				Количество                    = Количество + 1;
			КонецЦикла;
			
			ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
			СтруктураЗаполнения.Вставить("Всего", УправлениеITОтделом8УФ.ФорматСумм(Сумма));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			Если СуммаНДС = 0 Тогда
				СтруктураЗаполнения.Вставить("НДС", НСтр("ru ='Без налога (НДС)'"));
				СтруктураЗаполнения.Вставить("ВсегоНДС", "-");
			Иначе
				СтруктураЗаполнения.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru ='В том числе НДС:'"), НСтр("ru ='Сумма НДС:'")));
				СтруктураЗаполнения.Вставить("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДС));
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи                          = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);						
			СтруктураЗаполнения.Вставить("ИтоговаяСтрока", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Всего наименований %1, на сумму %2'"),
				Строка(Количество),
				УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)));			
			СтруктураЗаполнения.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                                      = Макет.ПолучитьОбласть("Подписи");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ОтветственныйПредставление", Шапка.Автор));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЕсли;
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр= Истина;
	ТабличныйДокумент.АвтоМасштаб 	= Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция печати документа
//
Функция ПечатьЗапросКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати, ИмяМакета)

	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Запрос = Новый Запрос();								
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаказПоставщику.Номер КАК Номер,
			|	ЗаказПоставщику.Дата КАК ДатаДокумента,
			|	ЗаказПоставщику.Организация КАК Организация,
			|	ЗаказПоставщику.Ссылка КАК Ссылка,
			|	ЗаказПоставщику.Номенклатура.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Номенклатура КАК Номенклатура,
			|		Количество КАК Количество,
			|		Цена КАК Цена,
			|		Сумма КАК Сумма,
			|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|		СтавкаНДС КАК СтавкаНДС,
			|		СуммаНДС КАК СуммаНДС,
			|		ДатаПоступления КАК ДатаПоступления,
			|		Всего КАК Всего,
			|		СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
			|		Описание КАК Описание,
			|		Подразделение КАК Подразделение,
			|		Номенклатура.Артикул КАК Артикул,
			|		Спецификация КАК Спецификация
			|	) КАК Номенклатура,
			|	ЗаказПоставщику.Комментарий КАК Комментарий
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
			|ГДЕ
			|	ЗаказПоставщику.Ссылка В(&МассивОбъектов)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		
		Шапка = Запрос.Выполнить().Выбрать();
		
		ПервыйДокумент = Истина;
		
		Пока Шапка.Следующий() Цикл;  
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗапросКоммерческогоПредложения";
						
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
			
			ВыборкаСтрокНоменклатуры = Шапка.Номенклатура.Выбрать();
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПоставщику.ПФ_MXL_ЗапросКоммерческогоПредложения");
			
			СтруктураЗаполнения.Очистить();
			
			СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
			
			СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаРеквизиты");
			СтруктураЗаполнения.Вставить("РеквизитыОрганизации", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,ФактическийАдрес,НомерСчета,Банк,БИК,КоррСчет,Телефоны,Email"));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
	
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			СтруктураЗаполнения.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента,  "ДФ=dd.MM.yyyy"));
			СтруктураЗаполнения.Вставить("Номер", НомерДокумента);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ВыборкаСтрокНоменклатуры                        = Шапка.Номенклатура.Выбрать();
			ОбластьМакета                                   = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                                   = Макет.ПолучитьОбласть("СтрокаТаблицы");
			
			Итого = 0;
			
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Номенклатура", ВыборкаСтрокНоменклатуры.Номенклатура));
				Описание = СтрЗаменить(ВыборкаСтрокНоменклатуры.Описание, "¶", Символы.ПС);				
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Описание", Описание));
				ТабличныйДокумент.Вывести(ОбластьМакета);
				Итого = Итого + ВыборкаСтрокНоменклатуры.Количество;		
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			СтруктураЗаполнения.Вставить("Комментарий", Шапка.Комментарий);
			СтруктураЗаполнения.Вставить("Итого", Итого);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
					
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
				
		КонецЦикла;

	ТабличныйДокумент.ТолькоПросмотр= Истина;
	ТабличныйДокумент.АвтоМасштаб 	= Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция печати документа
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Если ИмяМакета = "СчетНаОплату" Тогда
		
		Возврат ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "ЗаказПоставщику" Тогда
		
		Возврат ПечатьЗаказПоставщику(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "ЗапросКоммерческогоПредложения" Тогда
		
		Возврат ПечатьЗапросКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	КонецЕсли;
		
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказПоставщику") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ЗаказПоставщику"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплату") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаОплату", НСтр("ru = 'Счет на оплату'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "СчетНаОплату"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗапросКоммерческогоПредложения") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗапросКоммерческогоПредложения", НСтр("ru = 'Запрос коммерческого предложения'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ЗапросКоммерческогоПредложения"));
		
	КонецЕсли;
	
	// Параметры отправки печатных форм по электронной почте.
	ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
		
КонецПроцедуры

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Заказ поставщику.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказПоставщику";
	КомандаПечати.Представление = НСтр("ru = 'Заказ поставщику'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 0;
	
	// Счет на оплату.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 1;
	
	// Запрос коммерческого предложения.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗапросКоммерческогоПредложения";
	КомандаПечати.Представление = НСтр("ru = 'Запрос коммерческого предложения'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 2;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли