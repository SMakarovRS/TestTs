
#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстВыбора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Автор			= сфпСофтФонПроСервер.сфпТекущийПользователь();
		Объект.Ответственный	= сфпСофтФонПроСервер.сфпТекущийПользователь();
		Объект.Дата				= сфпСофтФонПроСервер.сфпТекущаяДата();
		Объект.Важность			= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		//<< УИТ
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);
		//>>
	КонецЕсли;
	Если Параметры.Свойство("АбонентКонтакт") И ЗначениеЗаполнено(Параметры.АбонентКонтакт) Тогда
		Объект.АбонентКонтакт = Параметры.АбонентКонтакт;
		Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт);
		Модифицированность = Истина;
	КонецЕсли;
	//<< УИТ
	Взаимодействия.ЗаполнитьСписокВыбораДляРассмотретьПосле(Элементы.РассмотретьПосле.СписокВыбора);
	//>>
	
	//<< УИТ
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
		ГиперссылкаФайлов = МодульРаботаСФайлами.ГиперссылкаФайлов();
		ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
		МодульРаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	ПриСозданииИПриЧтенииНаСервере();
	
	// Подготовить оповещения взаимодействий.
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект,Параметры);

	//>>
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	//>> УИТ
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	//<<
	
	сфпДлительность = Дата('00010101') + Объект.сфпДлительностьЗвонка;
	Заголовок = НСтр("ru='Звонок'");
	Если Объект.Входящий Тогда
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			Заголовок = Заголовок + НСтр("ru=' входящий '") + "(" + НСтр("ru='пропущенный'") + ")";
			Элементы.ДекорацияСостояниеЗвонка.Заголовок = Нстр("ru = 'Состояние: пропущенный'");
			Элементы.ДекорацияСостояниеЗвонка.ЦветТекста = WebЦвета.Красный;
		Иначе	
			Заголовок = Заголовок + НСтр("ru=' входящий '") + "(" + НСтр("ru='отвеченный'") + ")";
			Элементы.ДекорацияСостояниеЗвонка.Заголовок = Нстр("ru = 'Состояние: отвеченный'");
			Элементы.ДекорацияСостояниеЗвонка.ЦветТекста = WebЦвета.Зеленый;			
		КонецЕсли;	
	Иначе
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			Заголовок = Заголовок + НСтр("ru=' исходящий '") + "(" + НСтр("ru='не дозвонились'") + ")";
			Элементы.ДекорацияСостояниеЗвонка.Заголовок = Нстр("ru = 'Состояние: не дозвонились'");
			Элементы.ДекорацияСостояниеЗвонка.ЦветТекста = WebЦвета.Красный;
		Иначе	
			Заголовок = Заголовок + НСтр("ru=' исходящий '") + "(" + НСтр("ru='отвеченный'") + ")";
			Элементы.ДекорацияСостояниеЗвонка.Заголовок = Нстр("ru = 'Состояние: отвеченный'");
			Элементы.ДекорацияСостояниеЗвонка.ЦветТекста = WebЦвета.Зеленый;						
		КонецЕсли;	
	КонецЕсли;
	Заголовок = Заголовок + ", " + Объект.АбонентПредставление + ", " + Формат(Объект.Дата, "ДЛФ=D") + "/" 
		+ Формат(Объект.Дата, "ДЛФ=T; ДП=0:00:00") + "/" + Формат(Дата('00010101') + Объект.сфпДлительностьЗвонка, "ДЛФ=T; ДП=0:00:00");
	сфпНомерСтроки	= 0;	
	ЗаполнитьИсториюЗвонка();
	ЗаполнитьЗначенияРеквизитовЗвонка();
	УстановитьДоступностьРеквизитовЗвонка();
	сфпЗаполнитьВладельцаКонтакта();
	сфпРазрешеныИзмененияВДокументе();
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииИПриЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, РежимЗаписи, РежимПроведения)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если (ИмяСобытия = "СофтФон_КонецРазговора") И Параметр.Свойство("Звонок") Тогда
		Если (Параметр.Звонок = Объект.Ссылка) Тогда
			Объект.сфпДлительностьЗвонка = сфпСофтФонПроСервер.сфпТекущаяДата() - Объект.Дата;
			сфпДлительность		= Дата('00010101') + Объект.сфпДлительностьЗвонка;
			Объект.Описание		= сфпСофтФонПроСервер.сфпЗаполнитьОписаниеТелефонногоЗвонка(Объект.сфпДлительностьЗвонка);																		
			Если ЗначениеЗаполнено(Элементы.Комментарий.ТекстРедактирования) Тогда
				Объект.Комментарий = Элементы.Комментарий.ТекстРедактирования;
			КонецЕсли;
			Если Параметр.Свойство("НовыйОтветственный") Тогда
				Объект.Ответственный = Параметр.НовыйОтветственный;
			КонецЕсли;
			Модифицированность	= Истина;
			ЗаполнитьИсториюЗвонка();
			ЗаполнитьЗначенияРеквизитовЗвонка();
			УстановитьДоступностьРеквизитовЗвонка();
		КонецЕсли;
	ИначеЕсли (ИмяСобытия = "Софтфон_CoMagic") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = Объект.Ссылка Тогда
			Если (Объект.сфпДлительностьЗвонка = 0) И (сфпСтруктураВнешнихДанных = Неопределено) Тогда
				// Заполняем документ данными из CoMagic
				сфпСтруктураВнешнихДанных	= Параметр.СтруктураCoMagic;
				Объект.сфпCoMagicID			= сфпСтруктураВнешнихДанных.comagic_context.visitor_id;
				Объект.Комментарий = Объект.Комментарий + ?(ПустаяСтрока(Объект.Комментарий), "", Символы.ПС) 
					+ НСтр("ru='Кампания: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС 
					+ НСтр("ru='Сайт: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
					+ НСтр("ru='Ключевые слова: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query; 
				Если НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
					сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic();
				КонецЕсли;			
				Модифицированность	= Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	ВзаимодействияКлиент.ОтработатьОповещение(ЭтотОбъект,ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи".
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если НЕ ПустаяСтрока(Объект.сфпCoMagicID) Тогда
		Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
			Если ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
				сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.АбонентКонтакт, Объект.сфпCoMagicID);
				Объект.сфпCoMagicID = "";
			ИначеЕсли ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.Контрагенты") Тогда
				сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.АбонентКонтакт, Объект.сфпCoMagicID);
				Объект.сфпCoMagicID = "";
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	//<< УИТ
	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "ТелефонныйЗвонок");
	//>>
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Контрагенты.Форма.ПомощникНового" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт) И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
			Объект.АбонентКонтакт 		= ВыбранноеЗначение;
			Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт);
		КонецЕсли;
	КонецЕсли;
	
	ВзаимодействияКлиент.ФормаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, КонтекстВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОписаниеЗвонка".
//
Процедура ОписаниеЗвонкаНажатие(Элемент)
	СписокРазговоров = Новый СписокЗначений;
	текНомерСтроки = 0;
	Для Каждого СтрокаЗвонка Из сфпИсторияЗвонка Цикл
		ОписаниеРазговора = Строка(текНомерСтроки + 1) + ". " + Строка(СтрокаЗвонка.Ответственный) 
		+ " (" + Строка(СтрокаЗвонка.ВнутреннийНомер) + "): " 
		+ Формат(СтрокаЗвонка.Длительность, "ДЛФ=T; ДП=0:00:00");
		Если ПустаяСтрока(СтрокаЗвонка.ИдентификаторЗаписи) Тогда
			Если сфпСофтФонПроСервер.сфпИспользоватьCLON() Тогда
				СписокРазговоров.Добавить(текНомерСтроки, ОписаниеРазговора, , БиблиотекаКартинок.ЖурналРегистрации);
			Иначе	
				СписокРазговоров.Добавить(текНомерСтроки, ОписаниеРазговора);
			КонецЕсли;	
		Иначе
			СписокРазговоров.Добавить(текНомерСтроки, ОписаниеРазговора, , БиблиотекаКартинок.ЖурналРегистрации);
		КонецЕсли;	
	КонецЦикла;	
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеВыбораИзМеню	= Новый ОписаниеОповещения("ОбработкаВыбораРазговора", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокРазговоров, Элемент);
КонецПроцедуры // ОписаниеЗвонкаНажатие()

&НаКлиенте
Процедура АбонентКонтактПриИзменении(Элемент)
	
	сфпЗаполнитьВладельцаКонтакта();
	
	//<< УИТ
	ИзменилисьКонтакты = Истина;
	//>>
	
КонецПроцедуры

&НаКлиенте
Процедура АбонентКонтактОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ГруппаВладелецКонтактаВыравнивание.Видимость = Ложь;
	сфпВладелец = Неопределено;
	
	//<< УИТ
	ИзменилисьКонтакты = Истина;
	//>>
	
КонецПроцедуры

&НаКлиенте
Процедура АбонентПредставлениеПриИзменении(Элемент)
	
	//<< УИТ
	ИзменилисьКонтакты = Истина;
	//>>
	
КонецПроцедуры

//<< УИТ
&НаКлиенте
Процедура РассмотретьПослеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ОбработатьВыборВПолеРассмотретьПосле(РассмотретьПосле, 
		ВыбранноеЗначение, СтандартнаяОбработка, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура РассмотреноПриИзменении(Элемент)
	
	Элементы.РассмотретьПосле.Доступность = НЕ Рассмотрено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПредметНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры
//>>

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ.

&НаКлиенте
// Процедура - обработчик команды формы "ПредыдущаяЗапись".
//
Процедура ПредыдущаяЗапись(Команда)
	Если сфпНомерСтроки > 0 Тогда
		сфпНомерСтроки = сфпНомерСтроки - 1;
		ЗаполнитьЗначенияРеквизитовЗвонка();
		УстановитьДоступностьРеквизитовЗвонка();
	КонецЕсли;
КонецПроцедуры // ПредыдущаяЗапись()

&НаКлиенте
// Процедура - обработчик команды формы "ПрослушатьЗаписьРазговора".
//
Процедура ПрослушатьЗаписьРазговора(Команда)
	ТД = сфпИсторияЗвонка[сфпНомерСтроки];
	// Прежде, чем искать запись мы должны выяснить, есть ли права на прослушку у данного пользователя
	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	МассивПрослушиваемыхПользователей = сфпСофтФонПроСервер.сфпПолучитьМассивПрослушиваемыхПользователей(ТекПользователь);
	Если МассивПрослушиваемыхПользователей.Количество() > 0 Тогда
		Если МассивПрослушиваемыхПользователей.Найти(Объект.Ответственный) = Неопределено Тогда
			ТекстПредупреждения = Нстр("ru = 'У данного пользователя нет прав на прослушивание разговора пользователя '") + """" + Строка(Объект.Ответственный) + """" + ".";
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;					
	Иначе				
		ТекстПредупреждения = Нстр("ru = 'У данного пользователя нет прав на прослушивание разговора пользователя '") + """" + Строка(Объект.Ответственный) + """" + ".";
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ТД.ИдентификаторЗаписи) Тогда
		Если сфпСофтФонПроСервер.сфпИспользоватьCLON() Тогда
			Если ТД.Входящий Тогда
				ТелефонА	= ТД.НомерТелефона;
				ТелефонБ	= ТД.ВнутреннийНомер;
			Иначе
				ТелефонА	= ТД.ВнутреннийНомер;
				ТелефонБ	= ТД.НомерТелефона;
			КонецЕсли;
			// Выполняем поиск записи разговора
			НайденнаяЗапись = сфпСофтФонПроКлиент.сфпНайтиЗаписьРазговораCLON(ТелефонА, ТелефонБ,  ТД.ДатаНачала, ТД.ДатаОкончания, ТД.Входящий); 
			Если НЕ (НайденнаяЗапись = Неопределено) Тогда
				// Запускаем запись на прослушивание
				сфпСофтФонПроКлиент.сфпПолучитьФайлРазговора(НайденнаяЗапись.file);
				// Записываем в регистр идентификатор записи
				сфпСофтФонПроСервер.сфпЗаписатьИдентификаторЗаписиВРегистр(ТД.Звонок, ТД.ИдентификаторЗвонка, НайденнаяЗапись.file);
				// Обновляем историю звонка
				ЗаполнитьИсториюЗвонка();
				ЗаполнитьЗначенияРеквизитовЗвонка();
				УстановитьДоступностьРеквизитовЗвонка();
			КонецЕсли;
		КонецЕсли;	
	Иначе
		сфпСофтФонПроКлиент.сфпПолучитьФайлРазговора(ТД.ИдентификаторЗаписи)
	КонецЕсли;	
КонецПроцедуры // ПрослушатьЗаписьРазговора()

&НаКлиенте
// Процедура - обработчик команды формы "СледующаяЗапись".
//
Процедура СледующаяЗапись(Команда)
	КоличествоСтрок = сфпИсторияЗвонка.Количество() - 1;
	Если сфпНомерСтроки < КоличествоСтрок Тогда
		сфпНомерСтроки = сфпНомерСтроки + 1;
		ЗаполнитьЗначенияРеквизитовЗвонка();
		УстановитьДоступностьРеквизитовЗвонка();
	КонецЕсли;
КонецПроцедуры // СледующаяЗапись()

&НаКлиенте
Процедура сфпЗагрузитьИсториюЗвонков(Команда)
	Если НЕ сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		Сообщить(НСтр("ru='Недостаточно прав для загрузки истории звонков!'"));
		Возврат;
	КонецЕсли;
	сфпСофтФонПроСервер.сфпПолучитьИсториюЗвонков();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ.

&НаСервере
// Процедура пытается найти контакт по ID CoMagic и заполнить в Событии.
//
// Параметры:
//	Нет.
//
Процедура сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic()
	Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоIDИзCoMagic(сфпСтруктураВнешнихДанных.comagic_context.visitor_id);
	Если ЗначениеЗаполнено(Контакт) Тогда
		Объект.АбонентКонтакт = Контакт.Ссылка;
	КонецЕсли;
КонецПроцедуры // сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic()	

&НаСервере
// Процедура заполняет таблицу истории звонка.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьИсториюЗвонка()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Звонок", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрСведенийсфпИсторияЗвонков.ДатаНачала КАК ДатаНачала,
	               |	РегистрСведенийсфпИсторияЗвонков.ДатаОтвета,
	               |	РегистрСведенийсфпИсторияЗвонков.ВнутреннийНомер,
	               |	ВЫБОР
	               |		КОГДА РегистрСведенийсфпИсторияЗвонков.ДатаОтвета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РегистрСведенийсфпИсторияЗвонков.ДатаНачала, ДЕНЬ), СЕКУНДА, РАЗНОСТЬДАТ(РегистрСведенийсфпИсторияЗвонков.ДатаНачала, РегистрСведенийсфпИсторияЗвонков.ДатаОкончания, СЕКУНДА))
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РегистрСведенийсфпИсторияЗвонков.ДатаНачала, ДЕНЬ), СЕКУНДА, РАЗНОСТЬДАТ(РегистрСведенийсфпИсторияЗвонков.ДатаОтвета, РегистрСведенийсфпИсторияЗвонков.ДатаОкончания, СЕКУНДА))
	               |	КОНЕЦ КАК Длительность,
	               |	РегистрСведенийсфпИсторияЗвонков.ИдентификаторЗаписи,
	               |	РегистрСведенийсфпИсторияЗвонков.Ответственный,
	               |	РегистрСведенийсфпИсторияЗвонков.Входящий,
	               |	РегистрСведенийсфпИсторияЗвонков.ДатаОкончания,
	               |	РегистрСведенийсфпИсторияЗвонков.НомерТелефона,
	               |	РегистрСведенийсфпИсторияЗвонков.Звонок,
	               |	РегистрСведенийсфпИсторияЗвонков.ИдентификаторЗвонка
	               |ИЗ
	               |	РегистрСведений.сфпИсторияЗвонков КАК РегистрСведенийсфпИсторияЗвонков
	               |ГДЕ
	               |	РегистрСведенийсфпИсторияЗвонков.Звонок = &Звонок
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаНачала";
	сфпИсторияЗвонка.Очистить();				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = сфпИсторияЗвонка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;	
	КоличествоЗвонковИстории = сфпИсторияЗвонка.Количество();
	Если КоличествоЗвонковИстории = 2 Тогда
		ТекЗвонок = сфпИсторияЗвонка[КоличествоЗвонковИстории-2].Звонок;
		Если ТекЗвонок.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Пропущенный Тогда
			ТекЗвонок = сфпИсторияЗвонка[КоличествоЗвонковИстории-1].Звонок;
			Если ТекЗвонок.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Пропущенный 
			И НЕ Объект.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Пропущенный Тогда
				Объект.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Пропущенный;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьИсториюЗвонка()

&НаКлиенте
// Процедура заполняет значения реквизитов истории звонка.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьРеквизитовЗвонка()
	Элементы.ПредыдущаяЗапись.Доступность	= Ложь;
	Элементы.СледующаяЗапись.Доступность		= Ложь;
	Элементы.ОписаниеЗвонка.Гиперссылка		= Ложь;
	КоличествоСтрок = сфпИсторияЗвонка.Количество();
	Если КоличествоСтрок > 0 Тогда
		Если КоличествоСтрок > 1 Тогда
			Элементы.ОписаниеЗвонка.Гиперссылка = Истина;
		КонецЕсли;	
		Если сфпНомерСтроки > 0 Тогда
			Элементы.ПредыдущаяЗапись.Доступность = Истина;
		КонецЕсли;
		Если сфпНомерСтроки < КоличествоСтрок - 1 Тогда
			Элементы.СледующаяЗапись.Доступность	= Истина;
		КонецЕсли;
		Элементы.ОписаниеЗвонка.Заголовок = Нстр("ru='Разговор ('") + Строка(сфпНомерСтроки + 1) + Нстр("ru=' из '") + Строка(КоличествоСтрок) + ") ";
		Если ПустаяСтрока(сфпИсторияЗвонка[сфпНомерСтроки].ИдентификаторЗаписи) Тогда
			Если сфпСофтФонПроСервер.сфпИспользоватьCLON() Тогда
				Элементы.ПрослушатьЗаписьРазговора.Видимость = Истина;
			Иначе	
				Элементы.ПрослушатьЗаписьРазговора.Видимость = Ложь;
			КонецЕсли;	
		Иначе
			Элементы.ПрослушатьЗаписьРазговора.Видимость = Истина;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры // УстановитьДоступностьРеквизитовЗвонка()

&НаКлиенте
// Процедура заполняет значения реквизитов истории звонка.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьЗначенияРеквизитовЗвонка()
	КоличествоСтрок = сфпИсторияЗвонка.Количество();
	Если (КоличествоСтрок > 0) И (сфпНомерСтроки < КоличествоСтрок) Тогда
		сфпОтветственный		= сфпИсторияЗвонка[сфпНомерСтроки].Ответственный;
		сфпЛиния				= сфпИсторияЗвонка[сфпНомерСтроки].ВнутреннийНомер;
		сфпДатаОтвета			= сфпИсторияЗвонка[сфпНомерСтроки].ДатаОтвета;
		сфпДлительностьЗвонка	= сфпИсторияЗвонка[сфпНомерСтроки].Длительность;
		Если (КоличествоСтрок = 1) И (сфпДлительностьЗвонка = Дата('00010101')) Тогда
			сфпДлительностьЗвонка	= сфпДлительность;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ЗаполнитьЗначенияРеквизитовЗвонка()

&НаКлиенте
// Процедура - обработчик выбора разговора из меню.
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Выбранный разговор.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораРазговора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат; КонецЕсли;
	сфпНомерСтроки	= ВыбранныйЭлемент.Значение;	
	ЗаполнитьЗначенияРеквизитовЗвонка();
	УстановитьДоступностьРеквизитовЗвонка();
КонецПроцедуры // ОбработкаВыбораРазговора()	

&НаСервере
// Процедура вычисляет владельца контакта и отображает его в форме документа
//
Процедура сфпЗаполнитьВладельцаКонтакта()
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) 
	И ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Элементы.ГруппаВладелецКонтактаВыравнивание.Видимость = Истина;
		УстановитьПривилегированныйРежим(Истина);
		сфпВладелец = Объект.АбонентКонтакт.Владелец;
		УстановитьПривилегированныйРежим(Ложь);		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура сфпРазрешеныИзмененияВДокументе()
	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	Если ТекПользователь <> Объект.Ответственный И Не сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

//<< УИТ
&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
	Иначе
		ИзменилисьКонтакты = Истина;
	КонецЕсли;
	Элементы.РассмотретьПосле.Доступность = НЕ Рассмотрено;
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
			ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
			ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами
//>>
#КонецОбласти

