
#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт; //Проверка контрагентов

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт; // Длительная операция
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// Память для реквизитов предыдущей строки.
&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки;

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СЛС.ПриСозданииНаСервере(Объект, Отказ, СтандартнаяОбработка, Параметры, ЭтаФорма);	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		  И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
			Объект.Договор = Объект.Контрагент.ДоговорПоУмолчанию;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Основание) Тогда
			Объект.Курс 	 = Параметры.Основание.Курс;
			Объект.Кратность = Параметры.Основание.Кратность;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
			Объект.ВалютаДокумента = УправлениеITОтделом8УФПовтИсп.ПолучитьОсновнуюВалюту();
			Объект.Курс      = 1;
			Объект.Кратность = 1;			
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("МестоХранения") Тогда
		Объект.МестоХранения = Параметры.МестоХранения;
	КонецЕсли;
	Если Параметры.Свойство("Организация") Тогда
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
		КонецЕсли;		
	КонецЕсли;
	Если Параметры.Свойство("АдресНоменклатуры") Тогда		
		ТЗ = ПолучитьИзВременногоХранилища(Параметры.АдресНоменклатуры);
		Объект.Номенклатура.Загрузить(ТЗ);		
		УдалитьИзВременногоХранилища(Параметры.АдресНоменклатуры);
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	Если ЗначениеЗаполнено(Договор) Тогда
		ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	КонецЕсли;	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, 
		Новый Структура("Валюта", НациональнаяВалюта));
		
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ПоложениеСтатьиДоходовРасходов) Тогда
			Объект.ПоложениеСтатьиДоходовРасходов = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПоложениеЗаказаПоставщику) Тогда
			Объект.ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПоложениеПодразделения) Тогда
			Объект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПоложениеЗаказаКлиента) Тогда 
			Объект.ПоложениеЗаказаКлиента = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		
		// Документ создается из обработки "РабочийСтол".
		Если Параметры.Свойство("РабочийСтолЗначенияЗаполнения") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.РабочийСтолЗначенияЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = Истина;
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс", 
		Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс);
		
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи); 
	
	#Область БСП_ПриСозданииНаСервере
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ВерсионированиеОбъектов	
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеITОтделом8УФПовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ДеревоНоменклатурыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
		
	#КонецОбласти
	
	ТекущийЭлемент = Элементы.ДеревоНоменклатуры;	
		                                                          	
	Если ЗначениеЗаполнено(Параметры.Основание) Тогда 
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда 
			ТекущийЭлемент = Элементы.ГруппаНакладная;
		КонецЕсли;
	КонецЕсли;
	
	// Вывод дерева	
	ВывестиДеревоНоменклатуры();
	
	Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = 
		УправлениеITОтделом8УФ.ОтображатьИнвентарныеСерийныеНомера();
		
	Если Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = Истина Тогда
		ОбновитьИнвентарныеИСерийныеНомераНаСервере();
	КонецЕсли;
	
	ОбновитьДатуПриобретенияНаСервере();
	
	// Учет остатков контрагентов.
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Организация");
	УправлениеITОтделом8УФ.УстановитьОграничениеТипаДляЭлементовФормы(ЭтаФорма, МассивЭлементов); 
	
	УстановитьВидимостьДоступность();	
	СуммироватьКоличествоПриСканировании = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, 
			УникальныйИдентификатор, ПоддерживаемыеТипыВО);
			
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Корректировки документа.
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// Разворачиваем дерево.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
	ПредыдущиеРеквизитыСтроки          = СтруктураСтрокиДерева();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда		
		ПоддерживаемыеТипыВО = Новый Массив();		
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");		
		ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриОтключении, 
			УникальныйИдентификатор, ПоддерживаемыеТипыВО);
			
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Корректировки документа.
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	Оповестить("Запись_Поступление", Объект.Ссылка);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, 
			"ДокументПоступление (проведение)");	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	//УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СЛС.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
		
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборКарточкиНоменклатуры" Тогда
		
		НайденнаяСтрока = ДеревоНоменклатуры.НайтиПоИдентификатору(Параметр.ИдентификаторСтрокиНоменклатурыВладельца);
		Если НайденнаяСтрока <> Неопределено 
			И УправлениеITОтделом8УФКлиентСервер.ПолучитьРодительскуюФормуЭлемента(Параметр.ВладелецФормы) = ЭтаФорма Тогда			
			НайденнаяСтрока.КарточкаНоменклатуры 	= Источник.Ссылка;
			НайденнаяСтрока.ИнвентарныйНомер 		= Источник.ИнвентарныйНомер;
			НайденнаяСтрока.СерийныйНомер 			= Источник.СерийныйНомер;
			НайденнаяСтрока.ДатаПриобретения		= Источник.ДатаПриобретения;
		КонецЕсли;
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если Источник = Объект.Ссылка И ИмяСобытия = "УстановленаПометкаУдаления" Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ТекущийОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		ТекущийОбъект.ДатаКорректировки = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ТекущийОбъект.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	Иначе
		ТекущийОбъект.АвторКорректировки = Пользователи.ТекущийПользователь();
	КонецЕсли; 
		
	СохранитьДеревоНоменклатуры(ТекущийОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СЛС.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	//@skip-warning
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВыбораОрганизацииКонтрагента"
		И ИсточникВыбора.ВладелецФормы = ЭтаФорма Тогда
		УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбораФормы(ЭтаФорма, 
		 				"Организация",
						Объект.Организация,
						ВыбранноеЗначение,
						Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект));	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
       ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ? 
// оказывается в другом периоде нумерации документов, и в этом случае присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ДатаПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;
		
		ОбновитьРеквизитыБюджетов();
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер = "";
	ОбновитьРеквизитыБюджетов();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент);
		
		Объект.Договор = СтруктураДанные.Договор;
		ДоговорПередИзменением = Договор;
		Договор = Объект.Договор;
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, 
				СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
				
			Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1,
				СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
				
		Если (ЗначениеЗаполнено(Объект.Договор)
			И ЗначениеЗаполнено(ВалютаРасчетов)
			И Объект.Договор <> ДоговорПередИзменением
			И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
			И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
						
			Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом. Необходимо проверить валюту документа.'"));
				
			ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина);
		КонецЕсли;
		
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Договор);
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		Если НЕ СтруктураДанные.СуммаВключаетНДС = Неопределено Тогда
			
			Объект.СуммаВключаетНДС = СтруктураДанные.СуммаВключаетНДС;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, 
				СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
				
			Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, 
				СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
				
		КонецЕсли;
				
		Если (ЗначениеЗаполнено(Объект.Договор)
			И ЗначениеЗаполнено(ВалютаРасчетов)
			И Объект.Договор <> ДоговорПередИзменением
			И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
			И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
						
			Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом. Необходимо проверить валюту документа.'"));
				
			ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказПоставщикуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура();
	Структура.Вставить("Ключ", ДанныеВыбора);
	Структура.Вставить("ОтборКонтрагент", Объект.Контрагент);
	Структура.Вставить("ОтборДоговор", Объект.Договор);
	СтандартнаяОбработка = Ложь;
	
	// Добавляем строки заявки в документ.
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаВыбора", Структура, Элементы.ЗаказПоставщику);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура();
	Структура.Вставить("Ключ", ДанныеВыбора);
	Структура.Вставить("ОтборКонтрагент", Объект.Контрагент);
	Структура.Вставить("ОтборДоговор", Объект.Договор);
	СтандартнаяОбработка = Ложь;
	
	// Добавляем строки заявки в документ.
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаВыбора", Структура, Элементы.ЗаказКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределятьУслугиПриИзменении(Элемент)
	
	РаспределятьУслугиПриИзмененииНаСервере(Истина);
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНоменклатуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения     = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество           = 1;
	СтрокаТабличнойЧасти.Цена                 = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС            = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.НавСсылка            = СтруктураДанные.НавСсылка;
	СтрокаТабличнойЧасти.КарточкаНоменклатуры = СтруктураДанные.КарточкаНоменклатуры;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда	
		Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр = 
			НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
	ПросмотрДерева = Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;		
	Элементы.ДеревоНоменклатурыКоличество.ТолькоПросмотр = 
		?((НЕ ПросмотрДерева)	И СтрокаТабличнойЧасти.Количество <> 1, Ложь, НЕ ПросмотрДерева);
	
	Элементы.ДеревоНоменклатурыИнвентарныйНомер.ТолькоПросмотр 		= ПросмотрДерева;
	Элементы.ДеревоНоменклатурыСерийныйНомер.ТолькоПросмотр 		= ПросмотрДерева;
	Элементы.ДеревоНоменклатурыЕдиницаИзмерения.ТолькоПросмотр      = НЕ ПросмотрДерева;
					
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКоличествоПриИзменении(Элемент)	
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;	
	
	МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура,Партия,КарточкаНоменклатуры",
		СтрокаТабличнойЧасти.Номенклатура,
		СтрокаТабличнойЧасти.Партия,
		СтрокаТабличнойЧасти.КарточкаНоменклатуры));
	
	Если МассивСтрокТЧ.Количество() > 0 Тогда
		НайденнаяСтрока = МассивСтрокТЧ[0];
		НайденнаяСтрока.Количество = Элемент.ТекстРедактирования;
		РассчитатьСуммуВСтрокеТабличнойЧасти();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для Каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, 
			ВыбранноеЗначение);
			
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	КонецЕсли;	
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент 
			/ СтруктураДанные.ТекущийКоэффициент;
			
	КонецЕсли; 		
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма 
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Итоговая сумма в документе.
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма 
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Итоговая сумма в документе.
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
	
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Итоговая сумма в документе/
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, 
		СтандартнаяОбработка, Строка, Поле)
	
    // Узел нельзя переносить в узлы подчиненные ему самому,
    // т.е. родительский узел нельзя переносить в дочерние.
    // Проверим это условие для всех выделенных элементов.

    СтандартнаяОбработка = Ложь;

    РеквизитДерево 	= ЭтаФорма["ДеревоНоменклатуры"];

    ИДНовыйРодитель = Строка;
    // Новый Родитель равен Неопределено => Корень дерева/
    НовыйРодитель 	= ?(ИДНовыйРодитель = Неопределено, Неопределено, 
		РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель));

    ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);

    Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент, НовыйРодитель) Тогда
        ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
    РеквизитДерево 		 = ЭтаФорма["ДеревоНоменклатуры"];
    ИДПриемник 			 = Строка;
	
    // ИД Приемник равен Неопределено => Корень дерева.
    Приемник = ?(ИДПриемник = Неопределено, Неопределено,
        РеквизитДерево.НайтиПоИдентификатору(ИДПриемник));

    Источник	= РеквизитДерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	Если ТипЗНЧ(Приемник) = Тип("ДанныеФормыЭлементДерева") Тогда
		Если Не ЗначениеЗаполнено(Приемник.КарточкаНоменклатуры) Тогда			
			ДопПараметры 		= Новый Структура("РеквизитДерево, Приемник, Источник", 
				РеквизитДерево, Приемник, Источник);
				
			ДопПараметры.Вставить("ИДПриемник", ИДПриемник);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатуры",
				ЭтотОбъект, ДопПараметры);
			
			Кнопки 				= Новый СписокЗначений;
			Кнопки.Добавить("КнопкаСоздатьНовую"	, НСтр("ru='Создать новую'"));
			Кнопки.Добавить("КнопкаВыбратьИзСписка"	, НСтр("ru='Выбрать из списка'"));
			Кнопки.Добавить("КнопкаОтмена"			, НСтр("ru='Отмена'"));
			
			ПоказатьВопрос(ОписаниеОповещения, СтрШаблон(
					НСтр("ru = 'Перед добавлением в комплект необходимо заполнить карточку для номенклатуры ""%1"".
                    |Создать новую или выбрать существующую из списка?'"), 
					Приемник.Номенклатура), Кнопки,,"КнопкаСоздатьНовую");
					
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ДеревоНоменклатурыПеретаскиваниеФрагмент(РеквизитДерево, Приемник, Источник, ИДПриемник);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр 	= 
		НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
	
	ПросмотрДерева 													= Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;
	Элементы.ДеревоНоменклатурыИнвентарныйНомер.ТолькоПросмотр 		= ПросмотрДерева;
	Элементы.ДеревоНоменклатурыСерийныйНомер.ТолькоПросмотр 		= ПросмотрДерева;
	Элементы.ДеревоНоменклатурыЕдиницаИзмерения.ТолькоПросмотр      = НЕ ПросмотрДерева;
	Элементы.ДеревоНоменклатурыКоличество.ТолькоПросмотр            = 
		?((НЕ ПросмотрДерева)	И СтрокаТабличнойЧасти.Количество <> 1, Ложь, НЕ ПросмотрДерева);
					
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если Копирование Тогда
		Отказ = Истина;
		РеквизитДерево = ЭтаФорма["ДеревоНоменклатуры"];		
		Приемник = РеквизитДерево.НайтиПоИдентификатору(СтрокаТабличнойЧасти.ПолучитьИдентификатор()).ПолучитьРодителя(); 
		
		Если Приемник = Неопределено Тогда
			НоваяСтрока = ДеревоНоменклатурыДобавитьСтрокуКопированием(РеквизитДерево, Неопределено, СтрокаТабличнойЧасти);
		Иначе
			НоваяСтрока = ДеревоНоменклатурыДобавитьСтрокуКопированием(РеквизитДерево,Приемник,СтрокаТабличнойЧасти);
		КонецЕсли;
		ОбновитьНумерациюВДеревеЗначенийНаСервере();
		Если НЕ НоваяСтрока = Неопределено Тогда
			 Элементы.ДеревоНоменклатуры.Развернуть(НоваяСтрока.ПолучитьИдентификатор(),Истина);
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	
	Если Не Копирование 
		И УправлениеITОтделом8УФПовтИсп.НоменклатураМожетИметьКомплектующие(СтрокаТабличнойЧасти.Номенклатура) Тогда
		
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(НСтр("ru = 'Добавить в комплект'"));
		СЗ.Добавить(НСтр("ru = 'Добавить на этом же уровне'"));
		
		Если ДеревоНоменклатуры.ПолучитьЭлементы().Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Отказ = Истина;
		СтруктураЭлемента 	= Новый Структура("Элемент",Элемент);		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВыбораИзМеню",ЭтотОбъект,СтруктураЭлемента);		
		ПоказатьВыборИзМеню(ОписаниеОповещения,СЗ,Элементы.ДеревоНоменклатуры.КоманднаяПанель);
		Возврат;
		
	КонецЕсли;
	
	Отказ = Истина;
	
	Результат				= Новый Структура("Значение", НСтр("ru = 'Добавить на этом же уровне'"));
	СтруктураЭлемента 		= Новый Структура("Элемент", Элемент);
	ПослеВыбораИзМеню(Результат, СтруктураЭлемента);	
	
КонецПроцедуры

&НаКлиенте
Функция ДеревоНоменклатурыДобавитьСтрокуКопированием(РеквизитДерево,Приемник,Источник)
	
	Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;
	    
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(НоваяСтрока.Номенклатура) Тогда 
		НоваяСтрока.КарточкаНоменклатуры = ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
	КонецЕсли;	

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
        ДеревоНоменклатурыДобавитьСтрокуКопированием(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
	КонецЦикла;
	
    Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ДеревоНоменклатурыПриИзменении(Элемент)
	
	ОбновитьНумерациюВДеревеЗначенийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрана номенклатура для выбора карточки.'"));
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	Если Объект.Ссылка.Пустая() Тогда
		ПараметрыФормы.Вставить("ОтборТолькоНеИспользованные", Истина);
		ПараметрыФормы.Вставить("ВидимостьОтборПоступление", Ложь);
	Иначе
		ПараметрыФормы.Вставить("ОтборПоступление", Объект.Ссылка);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ОтборНоменклатура", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.КарточкаНоменклатуры);
	ПараметрыФормы.Вставить("Владелец", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ИдентификаторСтрокиНоменклатурыВладельца", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	
	ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрана номенклатура для создания карточки.'"));
		Возврат;
	КонецЕсли;	
	                                                                                    
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец"									, СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ИдентификаторСтрокиНоменклатурыВладельца"	, СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	
	Форма 			= ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаОбъекта", ПараметрыФормы, Элемент);
	Форма.ВладелецФормы = Элемент; 
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина; 
	Форма.Открыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрана номенклатура для создания карточки.'"));
		Возврат;
	КонецЕсли;	
	                                                                                    
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ"										, СтрокаТабличнойЧасти.КарточкаНоменклатуры);
	ПараметрыФормы.Вставить("Владелец"									, СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ИдентификаторСтрокиНоменклатурыВладельца"	, СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	
	Форма 			= ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаОбъекта", ПараметрыФормы, Элемент);
	Форма.ВладелецФормы = Элемент; 
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина; 
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЗаказПоставщикуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура();
	Структура.Вставить("Ключ", ДанныеВыбора);
	Структура.Вставить("ОтборКонтрагент", Объект.Контрагент);
	Структура.Вставить("ОтборДоговор", Объект.Договор);
	СтандартнаяОбработка = Ложь;
	
	// Добавляем строки заявки в документ.
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаВыбора", Структура, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСерийныйНомерПриИзменении(Элемент)
	
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьНомерНаСервере(Элементы.ДеревоНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры, 
		"СерийныйНомер", Элементы.ДеревоНоменклатуры.ТекущиеДанные.СерийныйНомер);
	
	ОбновитьИнтерфейсТонкийКлиент();		
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);	
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыИнвентарныйНомерПриИзменении(Элемент)
	
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьНомерНаСервере(Элементы.ДеревоНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры, 
		"ИнвентарныйНомер", Элементы.ДеревоНоменклатуры.ТекущиеДанные.ИнвентарныйНомер);
	
	ОбновитьИнтерфейсТонкийКлиент();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборУслуги", Ложь);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("Ключ", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТабличнойЧасти.Номенклатура);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторСтроки", СтрокаТабличнойЧасти.ПолучитьИдентификатор());	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораНоменклатуры", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПослеУдаления(Элемент)
	
	// Итоговая сумма в документе.
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
	СохранитьДеревоНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломИзменения(Элемент, Отказ)
	
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.ДеревоНоменклатуры.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьТабличнуюЧастьНоменклатура();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СохранитьДеревоНоменклатуры();
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЗаказКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура();
	Структура.Вставить("Ключ", ДанныеВыбора);
	Структура.Вставить("ОтборКонтрагент", Объект.Контрагент);
	Структура.Вставить("ОтборДоговор", Объект.Договор);
	СтандартнаяОбработка = Ложь;
	
	// Добавляем строки заявки в документ.
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаВыбора", Структура, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыДатаПриобретенияПриИзменении(Элемент)
	
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИзменитьНомерНаСервере(Элементы.ДеревоНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры, 
		"ДатаПриобретения", Элементы.ДеревоНоменклатуры.ТекущиеДанные.ДатаПриобретения);
	
	ОбновитьИнтерфейсТонкийКлиент();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНакладная

&НаКлиенте
Процедура НакладнаяКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура НакладнаяЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Накладная.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для Каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НакладнаяЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Накладная.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = 
			Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, 
			ВыбранноеЗначение);
			
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
		
	КонецЕсли;	
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент 
			/ СтруктураДанные.ТекущийКоэффициент;
			
	КонецЕсли; 		
	
	РассчитатьСуммуВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура НакладнаяЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура НакладнаяСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Накладная.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура НакладнаяСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Накладная.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ДеревоНоменклатурыСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НакладнаяСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Накладная.ТекущиеДанные;	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Итоговая сумма в документе/
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура НакладнаяНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.Накладная.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборУслуги", Ложь);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("Ключ", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТабличнойЧасти.Номенклатура);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НакладнаяНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Накладная.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения     = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество           = 1;
	СтрокаТабличнойЧасти.Цена                 = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС            = СтруктураДанные.СтавкаНДС;		
	РассчитатьСуммуВСтрокеТабличнойЧастиНакладная();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтроке()
	
	СтрокаТабличнойЧасти = Элементы.Накладная.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		
КонецПроцедуры

&НаКлиенте
Процедура НакладнаяПослеУдаления(Элемент)
	
	Если Объект.Номенклатура.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения 	= Новый ОписаниеОповещения("ПоказатьОповещениеПользователю",ЭтотОбъект);
	Режим 				= РежимДиалогаВопрос.ДаНет;
	ПоказатьВопрос(ОписаниеОповещения, 
		НСтр("ru = 'Для продолжения необходимо перезаполнить номенклатуру. Продолжить?'"), Режим);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОповещениеПользователю(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоНакладнойНоменклатура("Номенклатура");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НакладнаяЗаказПоставщикуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура();
	Структура.Вставить("Ключ", ДанныеВыбора);
	Структура.Вставить("ОтборКонтрагент", Объект.Контрагент);
	Структура.Вставить("ОтборДоговор", Объект.Договор);
	СтандартнаяОбработка = Ложь;
	
	// Добавляем строки заявки в документ.
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаВыбора", Структура, Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура НакладнаяЗаказКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура();
	Структура.Вставить("Ключ", ДанныеВыбора);
	Структура.Вставить("ОтборКонтрагент", Объект.Контрагент);
	Структура.Вставить("ОтборДоговор", Объект.Договор);
	СтандартнаяОбработка = Ложь;
	
	// Добавляем строки заявки в документ.
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаВыбора", Структура, Элемент)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения     = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество           = 1;
	СтрокаТабличнойЧасти.Цена                 = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС            = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Описание			  = СтруктураДанные.Содержание;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборУслуги", Истина);
	ПараметрыФормы.Вставить("ПросмотрСписком", Истина);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.Номенклатура);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Услуги.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Услуги.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма
			/ СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЗаказПоставщикуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура();
	Структура.Вставить("Ключ", ДанныеВыбора);
	Структура.Вставить("ОтборКонтрагент", Объект.Контрагент);
	Структура.Вставить("ОтборДоговор", Объект.Договор);
	СтандартнаяОбработка = Ложь;
	
	// Добавляем строки заявки в документ.
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаВыбора", Структура, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЕдиницаИзмеренияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для Каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = 
			Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения,
			ВыбранноеЗначение);
			
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
		
	КонецЕсли;	
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент 
			/ СтруктураДанные.ТекущийКоэффициент;
			
	КонецЕсли; 		
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.УслугиСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.УслугиСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма 
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	
	// Итоговая сумма в документе.
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НеОблагается = ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти.СтавкаНДС);
	Если НеОблагается <> Неопределено И НеОблагается Тогда 
		Элементы.УслугиСуммаНДС.ТолькоПросмотр = Истина;
	Иначе
		Элементы.УслугиСуммаНДС.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЗаказКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура();
	Структура.Вставить("Ключ", ДанныеВыбора);
	Структура.Вставить("ОтборКонтрагент", Объект.Контрагент);
	Структура.Вставить("ОтборДоговор", Объект.Договор);
	СтандартнаяОбработка = Ложь;
	
	// Добавляем строки заявки в документ.
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаВыбора", Структура, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	СохранитьДеревоНоменклатуры();
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
	ВывестиДеревоНоменклатуры();
	
	// Разворачиваем дерево.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура НадписьАвторНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка= Ложь;
	Спк 				= УправлениеITОтделом8УФКлиент.ПолучитьСписокНадписьАвтор(Объект);	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НадписьАвторНажатиеЗавершение", ЭтотОбъект), 
		Спк, Элементы.НадписьАвтор, );
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура НадписьАвторНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт    

КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокумента(Команда)
	
	// 1. Формируем структуру параметров для заполнения формы "Настройка документа".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоложениеЗаказаПоставщикуВДокументахПоступления", Объект.ПоложениеЗаказаПоставщику);
	СтруктураПараметров.Вставить("ПоложениеЗаказаКлиентаВДокументахПоступления",	Объект.ПоложениеЗаказаКлиента);
	СтруктураПараметров.Вставить("ПоложениеСтатьиДоходовРасходов", 	Объект.ПоложениеСтатьиДоходовРасходов);
	СтруктураПараметров.Вставить("ПоложениеПодразделения", 			Объект.ПоложениеПодразделения);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", 			Ложь);
		
	// 2. Открываем форму "Цены и Валюта".
	ОткрытьФорму("ОбщаяФорма.НастройкаДокумента", СтруктураПараметров,,,,, 
			Новый ОписаниеОповещения("НастройкаДокументаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураНастройкаДокумента = Результат;
    
    // 3. Применяем изменения, сделанные в форме "Настройка документа".
	Если СтруктураНастройкаДокумента <> Неопределено 
		И ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") 
		И СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда
		
        Объект.ПоложениеЗаказаПоставщику = 
			СтруктураНастройкаДокумента.ПоложениеЗаказаПоставщикуВДокументахПоступления;
			
        Объект.ПоложениеСтатьиДоходовРасходов = 
			СтруктураНастройкаДокумента.ПоложениеСтатьиДоходовРасходов;
			
        Объект.ПоложениеПодразделения = 
			СтруктураНастройкаДокумента.ПоложениеПодразделения;
			
		Объект.ПоложениеЗаказаКлиента = 
			СтруктураНастройкаДокумента.ПоложениеЗаказаКлиентаВДокументахПоступления;
        
        УстановитьВидимостьДоступность();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	
	РазвернутьСвернутьТЧНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ПоложениеКоманднойПанели = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, 
		ПоложениеКоманднойПанелиФормы.Нет);
	
	Элементы.Шапка.Видимость                    = ВидимостьЭлементов;
	Элементы.Подвал.Видимость           		= ВидимостьЭлементов;
	Элементы.ГруппаИнформация.Видимость         = ВидимостьЭлементов;
	Элементы.Страницы.ОтображениеСтраниц		= ?(ВидимостьЭлементов, 
		ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, 
		БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Нажатия кнопки ПодсказкаСостояние.
//
Процедура ПодсказкаСостояниеНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Состояние заказа'"));
	ПараметрыОткрытия.Вставить("КлючПодсказки", "Поступление_УчитыватьТолькоКомплекты");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);
	
КонецПроцедуры // ПодсказкаСостояниеНажатие()

&НаКлиенте
Процедура СформироватьНовыеШтрихКоды(Команда)
	
	// Записываем документ.
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьНовыеШтрихКодыЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Документ не записан. Для продолжения необходима его запись. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СформироватьНовыеШтрихКодыФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНовыеШтрихКодыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    Записать();
    
    СформироватьНовыеШтрихКодыФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьНовыеШтрихКодыФрагмент()
    
    СформироватьНовыеШтрихКодыНаСервере();

КонецПроцедуры

&НаСервере
Процедура СформироватьНовыеШтрихКодыНаСервере()
	
	КоличествоШтрихкодов = 0;
	Для Каждого Строки Из Объект.Номенклатура Цикл
		
		Если Строки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
			Номенклатура = Строки.КарточкаНоменклатуры;
		Иначе
			Номенклатура = Строки.Номенклатура;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			Если Строки.Номенклатура.ВидНоменклатуры.МожетИметьШтрихКод 
				И НЕ УправлениеITОтделом8УФ.ЕстьШтрихКод(Номенклатура) Тогда
				
				ТекЗапись					= РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();				
				ТекЗапись.Штрихкод         	= РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13();
				ТекЗапись.Номенклатура      = Номенклатура;
				ТекЗапись.ЕдиницаИзмерения 	= Строки.Номенклатура.ЕдиницаИзмерения;
				Попытка
					ТекЗапись.Записать();
					КоличествоШтрихкодов = КоличествоШтрихкодов + 1;
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Для %1 сформирован штрихкод ""%2""'"), Строки.КарточкаНоменклатуры, 
						Строка(ТекЗапись.Штрихкод)));
						
				Исключение
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Для строки №%1 не удалось сформировать новый штрихкод.'"), Строки.НомерСтроки));
				КонецПопытки;				
			КонецЕсли;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'Для строки №%1 нет номенклатуры или карточки.'"), Строки.НомерСтроки));
		КонецЕсли;

	КонецЦикла;
	
	Если КоличествоШтрихкодов = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для номенклатуры в документе не сформировано ни одного штрих кода.'"));
	Иначе
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Для номенклатуры сформировано %1 штрих кодов'"), КоличествоШтрихкодов));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКарточкиНоменклатуры(Команда)
	
	// Записываем документ.
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ЗаполнитьКарточкиНоменклатурыЗавершение",ЭтотОбъект);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходима его запись. Продолжить?'"), Режим);
		Возврат;		
	КонецЕсли;	
	
	ЗаполнитьКарточкиНоменклатурыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКарточкиНоменклатурыЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьКарточкиНоменклатурыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКарточкиНоменклатурыФрагмент()
	
	Записать();
	КоличествоСозданныхКарточек = 0;
	ЗаписатьНаСервере();	
	КоличествоСозданныхКарточек = ЗаполнитьКарточкиНоменклатурыНаСервере();		
	ЗаписатьНаСервере();	
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	// Разворачиваем дерево.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	Если КоличествоСозданныхКарточек > 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Карточки созданы и добавлены в документ.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьКарточкиНоменклатурыНаСервере()
	
	КоличествоКарточек = 0;
	Для Каждого Строки Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл    
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			Строки.КарточкаНоменклатуры = 
				УправлениеITОтделом8УФ.СоздатьКарточкуНоменклатуры(Строки.Номенклатура, 
					Строки.СерийныйНомер, Строки.ИнвентарныйНомер);
					
			Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
				КоличествоКарточек = КоличествоКарточек + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьПодчиненныеКарточкиНоменклатурыНаСервере(Строки, КоличествоКарточек);
		
	КонецЦикла;
	СохранитьДеревоНоменклатуры(Объект);
	
	Возврат КоличествоКарточек;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПодчиненныеКарточкиНоменклатурыНаСервере(Родитель, КоличествоКарточек)
	
	Для Каждого Строки Из Родитель.ПолучитьЭлементы() Цикл    
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			Строки.КарточкаНоменклатуры = УправлениеITОтделом8УФ.СоздатьКарточкуНоменклатуры(Строки.Номенклатура, 
				Строки.СерийныйНомер, Строки.ИнвентарныйНомер);
				
			Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
				КоличествоКарточек = КоличествоКарточек + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		Строки.Комплект	= ?(ЗначениеЗаполнено(Родитель.Комплект), Родитель.Комплект, Родитель.КарточкаНоменклатуры);
		Строки.Партия 	= Родитель.КарточкаНоменклатуры;
		
		ЗаполнитьПодчиненныеКарточкиНоменклатурыНаСервере(Строки, КоличествоКарточек);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеДобавлениеНоменклатуры(Команда)
	
	// Записываем документ.
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения  = Новый ОписаниеОповещения("ГрупповоеДобавлениеНоменклатурыПослеВопроса", ЭтотОбъект);
		Режим				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходима его запись. Продолжить?'"), Режим); 
			
		Возврат;
	КонецЕсли;
	
	ГрупповоеДобавлениеНоменклатурыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеДобавлениеНоменклатурыПослеВопроса(РезультатВопроса,ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ГрупповоеДобавлениеНоменклатурыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеДобавлениеНоменклатурыФрагмент()
	
	Записать();	
	// Снимаем с проведения.
	Если Объект.Проведен Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ГрупповоеДобавлениеНоменклатурыСледующийФрагмент", ЭтотОбъект);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Документ проведен. Для продолжения необходима снять его с проведения. Продолжить?'"), Режим);
		Возврат;		
	КонецЕсли;
	
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	ОткрытьФорму("Документ.Поступление.Форма.ГрупповоеДобавлениеНоменклатуры",,,,,, 
		Новый ОписаниеОповещения("ГрупповоеДобавлениеНоменклатурыЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеДобавлениеНоменклатурыСледующийФрагмент(РезультатВопроса,ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Структура = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
	Записать(Структура);
	
	ОткрытьФорму("Документ.Поступление.Форма.ГрупповоеДобавлениеНоменклатуры",,,,,, 
		Новый ОписаниеОповещения("ГрупповоеДобавлениеНоменклатурыЗавершение", ЭтотОбъект), 
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаСервере
Процедура ГрупповоеДобавлениеНоменклатурыНаСервере(Структура)
	
	Массив = Новый Массив;
	Если Структура.Номенклатура.ЭтоГруппа Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ЭтоГруппа = ЛОЖЬ
			|	И Номенклатура.Ссылка В ИЕРАРХИИ(&Родитель)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура.Представление";
			
		Запрос.УстановитьПараметр("Родитель", Структура.Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Массив.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	Иначе
		
		Массив.Добавить(Структура.Номенклатура);
		
	КонецЕсли;
	
	Для Каждого Элемент Из Массив Цикл
	
		Если Элемент.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
			// Учет по карточкам.
			ДобавитьКоличество 	= Окр(Структура.Количество);
			КоличествоВСтроке 	= 1;
			УчетПоКарточкам 	= Истина;
		Иначе
			// Учет по номенклатуре.
			ДобавитьКоличество 	= 1;
			КоличествоВСтроке 	= Структура.Количество;
			УчетПоКарточкам 	= Ложь;
		КонецЕсли;
			
		// Добавляем строки.
		Для Индекс = 1 По ДобавитьКоличество Цикл
			НоваяСтрока 				= Объект.Номенклатура.Добавить();
			
			Попытка
				Если ЗначениеЗаполнено(Структура.Партия) Тогда
					Если Структура.Партия.ВидНоменклатуры.МожетИметьКомплектующие 
							И Структура.ДобавитьДочернимиСтрокамиВыделеннойПозиции Тогда
						НоваяСтрока.Партия 	= Структура.Партия;
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			НоваяСтрока.Номенклатура 	= Элемент;
			НоваяСтрока.ЕдиницаИзмерения= Элемент.ЕдиницаИзмерения;
			НоваяСтрока.Количество 		= КоличествоВСтроке;
			НоваяСтрока.Цена 			= Структура.Цена;
			НоваяСтрока.Сумма			= НоваяСтрока.Количество * НоваяСтрока.Цена;
			
			Если НЕ УчетПоКарточкам Тогда
				НоваяСтрока.КарточкаНоменклатуры = 
					УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Элемент); 
			КонецЕсли;
			
			// Сумма НДС.
			Если ЗначениеЗаполнено(Структура.СтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС = Структура.СтавкаНДС;
				СтавкаНДС 			  = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
				
				НоваяСтрока.СуммаНДС  = ?(Объект.СуммаВключаетНДС, 
					НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
					НоваяСтрока.Сумма * СтавкаНДС / 100);
			КонецЕсли;

			// Всего.
			НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
		КонецЦикла;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеДобавлениеНоменклатурыЗавершение(Результат1, ДополнительныеПараметры) Экспорт
    
    Результат = Результат1;	
    Если ТипЗнч(Результат) = Тип("Структура") Тогда
        Если Элементы.ДеревоНоменклатуры.ТекущиеДанные <> Неопределено Тогда
            Результат.Вставить("Партия", Элементы.ДеревоНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры);
        КонецЕсли;
        ГрупповоеДобавлениеНоменклатурыНаСервере(Результат);
        ВывестиДеревоНоменклатуры();		
		УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
        УстановитьВидимостьДоступность();
		Модифицированность = Истина;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПоЗаказуПоставщикуНаСервере(ЗаказПоставщику)
	
	Объект.Накладная.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщикуНоменклатура.Номенклатура КАК Номенклатура,
		|	ЗаказПоставщикуНоменклатура.Количество КАК Количество,
		|	ЗаказПоставщикуНоменклатура.Цена КАК Цена,
		|	ЗаказПоставщикуНоменклатура.Сумма КАК Сумма,
		|	ЗаказПоставщикуНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказПоставщикуНоменклатура.СуммаНДС КАК СуммаНДС,
		|	ЗаказПоставщикуНоменклатура.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказПоставщикуНоменклатура.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
		|	ЗаказПоставщикуНоменклатура.Спецификация КАК Спецификация
		|ИЗ
		|	Документ.ЗаказПоставщику.Номенклатура КАК ЗаказПоставщикуНоменклатура
		|ГДЕ
		|	ЗаказПоставщикуНоменклатура.Ссылка = &ЗаказПоставщику";

	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоваяСтрока 				= Объект.Накладная.Добавить();
		НоваяСтрока.ЗаказПоставщику = ЗаказПоставщику;
		НоваяСтрока.Номенклатура 	= ВыборкаДетальныеЗаписи.Номенклатура;
		НоваяСтрока.Спецификация	= ВыборкаДетальныеЗаписи.Спецификация;
		НоваяСтрока.ЕдиницаИзмерения= ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
		НоваяСтрока.Количество 		= ВыборкаДетальныеЗаписи.Количество;
		НоваяСтрока.Цена 			= ВыборкаДетальныеЗаписи.Цена;
		НоваяСтрока.Сумма			= НоваяСтрока.Количество * НоваяСтрока.Цена;
		
		// Сумма НДС.
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС 		= ВыборкаДетальныеЗаписи.СтавкаНДС;
			СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);				
			НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
			НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
			НоваяСтрока.Сумма * СтавкаНДС / 100);
		КонецЕсли;
		
		// Всего.
		НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
		НоваяСтрока.СтатьяДоходовРасходов = ВыборкаДетальныеЗаписи.СтатьяДоходовРасходов;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоЗаказуПоставщику(Команда)
	
	// Записываем документ.
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ДобавитьПоЗаказуПоставщикуПослеВопроса", ЭтотОбъект);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходима его запись. Продолжить?'"), Режим);
		Возврат;		
	КонецЕсли;
		
	ДобавитьПоЗаказуПоставщикуФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоЗаказуПоставщикуПослеВопроса(РезультатВопроса,ДопПараметры)Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ДобавитьПоЗаказуПоставщикуФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоЗаказуПоставщикуФрагмент()
	
	Записать();
	
	// Добавляем в документ, что заказ поставщику в дереве.
	Объект.ПоложениеЗаказаПоставщику = 
		ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
		
	УстановитьВидимостьДоступность();
	
	Структура = Новый Структура();
	Структура.Вставить("ОтборКонтрагент", Объект.Контрагент);
	Структура.Вставить("ОтборДоговор", Объект.Договор);
	Структура.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаВыбора", Структура, ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ДобавитьПоЗаказуПоставщикуЗавершение", ЭтотОбъект), 
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоЗаказуПоставщикуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    // Добавляем строки заявки в документ/
    Если Результат <> Неопределено Тогда
        ДобавитьПоЗаказуПоставщикуНаСервере(Результат);
        ВывестиДеревоНоменклатуры();			        
		УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
		УстановитьВидимостьДоступность();
		Модифицированность = Истина;
		ТекущийЭлемент = Элементы.ГруппаНакладная;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьИнвентарныеИСерийныеНомера(Команда)
	
	Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = 
		НЕ Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
		
	УправлениеITОтделом8УФ.СохранитьНастройкуОтображатьИнвентарныеСерийныеНомера(
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка);
		
	УстановитьВидимостьДоступность();
	ОбновитьИнвентарныеИСерийныеНомераНаСервере();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНомерНаСервере(Карточка, ИмяРеквизита, Значение)
	
	Если ЗначениеЗаполнено(Карточка) Тогда
		Попытка
			ОбъектКарточки = Карточка.ПолучитьОбъект();
			ОбъектКарточки[ИмяРеквизита] = Значение;
			ОбъектКарточки.Записать();
			СохранитьДеревоНоменклатуры();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОповещенияПриЗагрузкеИзТСД = Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗагрузкеИзТСД, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") 
	   И Результат.Количество() > 0 Тогда
		ПолученыШтрихкоды(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
		
	ДанныеПоШтрихКодам = 
		РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для Каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
		   
		    Если ТипЗнч(ДанныеШтрихкода.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				НоменклатураШтрихкода		= ДанныеШтрихкода.Номенклатура;
			Иначе
				НоменклатураШтрихкода		= ДанныеШтрихкода.Номенклатура.Владелец;
				ДанныеШтрихкода.Номенклатура = НоменклатураШтрихкода;
			КонецЕсли;
		   
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Контрагент", СтруктураДанные.Контрагент);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", НоменклатураШтрихкода);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);			
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", 
				ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = НоменклатураШтрихкода.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СохранитьДеревоНоменклатуры();
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);	
	
	Для Каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
				
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		Иначе
			
			НоменклатураШтрихкода		= ДанныеШтрихкода.Номенклатура;
			ЕдиницаИзмеренияШтрихкода	= ДанныеШтрихкода.ЕдиницаИзмерения;
			
			МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура,ЕдиницаИзмерения", 
				НоменклатураШтрихкода, ЕдиницаИзмеренияШтрихкода));
				
			Если МассивСтрокТЧ.Количество() = 0 ИЛИ НЕ СуммироватьКоличествоПриСканировании Тогда
				НоваяСтрока						= Объект.Номенклатура.Добавить();
				НоваяСтрока.Номенклатура		= НоменклатураШтрихкода;
				НоваяСтрока.КарточкаНоменклатуры= 
					УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(НоменклатураШтрихкода);
					
				НоваяСтрока.Количество			= ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения	= ?(ЗначениеЗаполнено(ЕдиницаИзмеренияШтрихкода), 
					ЕдиницаИзмеренияШтрихкода, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
					
				НоваяСтрока.Цена 				= ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.СтавкаНДС			= ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);				
			Иначе
				НайденнаяСтрока = МассивСтрокТЧ[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НайденнаяСтрока);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Вывод дерева/	
	ВывестиДеревоНоменклатуры();
	
	Возврат НеизвестныеШтрихкоды;
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов)
	
	Модифицированность = Истина;
	
	НеизвестныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	
	ВозвращаемыеПараметры = Неопределено;
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры", 
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для Каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для Каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеизвестныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для Каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КарточкаНоменклатуры) Тогда
		ОписаниеОшибки = ОшибкаПриДобавленииКарточкиНоменклатуры(СтрокаТабличнойЧасти);
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ПоказатьПредупреждение(, ОписаниеОшибки);
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КарточкаНоменклатуры) Тогда
		ИнвентарныйСерийныйНомер 				= 
			ПолучитьИнвентарныйИСерийныйНомерНаСервере(СтрокаТабличнойЧасти.КарточкаНоменклатуры);
			
		СтрокаТабличнойЧасти.ИнвентарныйНомер 	= ИнвентарныйСерийныйНомер.ИнвентарныйНомер;
		СтрокаТабличнойЧасти.СерийныйНомер 		= ИнвентарныйСерийныйНомер.СерийныйНомер;		
		СтрокаТабличнойЧасти.ДатаПриобретения	= ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.КарточкаНоменклатуры, 
													"ДатаПриобретения");
	Иначе
		СтрокаТабличнойЧасти.ИнвентарныйНомер 	= "";
		СтрокаТабличнойЧасти.СерийныйНомер 		= "";
		СтрокаТабличнойЧасти.ДатаПриобретения	= Дата(1, 1, 1);
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиент.ЗаполнитьКомплектПартию(СтрокаТабличнойЧасти);	
	
КонецПроцедуры

&НаКлиенте
Функция ОшибкаПриДобавленииКарточкиНоменклатуры(Знач СтрокаДерева)
	
	Результат = "";
	// 1. Карточка не соответствует владельцу.
	Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		
		Если СтрокаДерева.Номенклатура <> ЗначениеРеквизитаОбъекта(
				СтрокаДерева.КарточкаНоменклатуры, "Владелец") Тогда
				
			Результат = СтрШаблон(
				НСтр("ru = 'Указанная карточка ""%1"" не является дочерней карточкой указанной номенклатуры ""%2""'"),
				СтрокаДерева.КарточкаНоменклатуры, СтрокаДерева.Номенклатура);
				
				СтрокаДерева.КарточкаНоменклатуры = ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
				СтрокаДерева.ИнвентарныйНомер 	= "";
				СтрокаДерева.СерийныйНомер 		= "";
				
			Возврат Результат;			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗначениеРеквизитаОбъекта(Знач Ссылка, Знач ИмяРеквизита, ВыбратьРазрешенные = Ложь)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
	
КонецФункции	
	
&НаКлиенте
Процедура ИнвентарныйНомерАвтоинкремент(Команда)
	
	Если ДеревоНоменклатуры.ПолучитьЭлементы().Количество()>0 Тогда
		ОписаниеОповещения	= Новый ОписаниеОповещения("ИнвентарныйНомерАвтоинкрементВопрос", ЭтотОбъект);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
		НСтр("ru='В карточках номенклатуры в табличной части будут автоматически заполнены инвентарные номера. Продолжить?'"), Режим);
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Табличная часть не заполнена'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПоПорядку(Команда)
	
	Если ДеревоНоменклатуры.ПолучитьЭлементы().Количество() > 0 Тогда
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПорядковыйНомерПоПорядкуВопрос", ЭтотОбъект);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
		НСтр("ru = 'В карточках номенклатуры в табличной части будут автоматически заполнены порядковые номера. Продолжить?'"), Режим);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть не заполнена.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерВПределахПодчиненияНоменклатуры(Команда)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущаяНоменклатура = СтрокаТабличнойЧасти.Номенклатура; 
	
	Если НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(ТекущаяНоменклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДеревоНоменклатуры.ПолучитьЭлементы().Количество() > 0 Тогда
		ДопПараметры		= Новый Структура("СтрокаТабличнойЧасти,ТекущаяНоменклатура", СтрокаТабличнойЧасти, ТекущаяНоменклатура);
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПорядковыйНомерВПределахПодчиненияВопрос", ЭтотОбъект, ДопПараметры);		
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения,  СтрШаблон(
		НСтр("ru = 'Для карточек номенклатуры <%1> в табличной части будут автоматически заполнены порядковые номера. Продолжить?'"), 
		ТекущаяНоменклатура), Режим);
		
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Табличная часть не заполнена.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "Поступление.Номенклатура";
	ПараметрыЗагрузки.Заголовок 			  = НСтр("ru = 'Загрузка списка товаров из файла'");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварПриЗагрузкеВДерево(СтрокаТаблицы, Количество)
	
	НоваяСтрокаТовары				= Объект.Номенклатура.Добавить();
	НоваяСтрокаТовары.Номенклатура	= СтрокаТаблицы.Номенклатура;
	НоваяСтрокаТовары.Цена			= СтрокаТаблицы.Цена;
	НоваяСтрокаТовары.Количество	= Количество;
	НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
	НоваяСтрокаТовары.СтавкаНДС		= СтрокаТаблицы.Номенклатура.СтавкаНДС;
	
	Если НЕ ЗначениеЗаполнено(НоваяСтрокаТовары.СтавкаНДС) Тогда
		НоваяСтрокаТовары.СтавкаНДС	= УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");			
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(НоваяСтрокаТовары.СтавкаНДС) Тогда
		НоваяСтрокаТовары.СтавкаНДС	= УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСБезНДС();
	КонецЕсли;
	
	// Сумма.
	НоваяСтрокаТовары.Сумма = НоваяСтрокаТовары.Количество * НоваяСтрокаТовары.Цена;
	
	// Сумма НДС.
	СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрокаТовары.СтавкаНДС);
	
	НоваяСтрокаТовары.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		НоваяСтрокаТовары.Сумма - (НоваяСтрокаТовары.Сумма) / ((СтавкаНДС + 100) / 100),
		НоваяСтрокаТовары.Сумма * СтавкаНДС / 100);
	
	// Всего.
	НоваяСтрокаТовары.Всего = НоваяСтрокаТовары.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрокаТовары.СуммаНДС);
	
	Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТаблицы.Номенклатура) = Ложь Тогда
		НоваяСтрокаТовары.КарточкаНоменклатуры = 
			УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(СтрокаТаблицы.Номенклатура);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТаблицы.Номенклатура) = Ложь Тогда 
			ДобавитьТоварПриЗагрузкеВДерево(СтрокаТаблицы, СтрокаТаблицы.Количество);
		Иначе
			Для Индекс = 1 По Цел(СтрокаТаблицы.Количество) Цикл
				ДобавитьТоварПриЗагрузкеВДерево(СтрокаТаблицы, 1);
			КонецЦикла;
		КонецЕсли;
		
		ТоварыДобавлены = Истина;

	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
		ВывестиДеревоНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьКарточкиНоменклатуры(Команда)
	
	// Записываем документ.
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("СгруппироватьКарточкиНоменклатурыЗавершение",ЭтотОбъект);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходима его запись. Продолжить?'"), Режим);
		Возврат;		
	КонецЕсли;
	
	// Проверка на заполненность.
	Для Каждого Строки Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл    
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'Для номенклатуры ""%1"" не заполнена карточка номенклатуры'"), Строки.Номенклатура), ,
					"ДеревоНоменклатуры");
				
			Возврат;
		КонецЕсли;				
	КонецЦикла;
	
	СгруппироватьКарточкиНоменклатурыНаСервере();
	// Разворачиваем дерево.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьКарточкиНоменклатурыЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	СгруппироватьКарточкиНоменклатурыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьКарточкиНоменклатурыФрагмент()
	
	Записать();
	ЗаписатьНаСервере();	
	СгруппироватьКарточкиНоменклатурыНаСервере();		
	ЗаписатьНаСервере();	
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// Разворачиваем дерево.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СгруппироватьКарточкиНоменклатурыНаСервере()
	
	// Получаем виды номенклатуры и выгружаем в таблицу.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыНоменклатурыРодительскиеВиды.Ссылка КАК ВидНоменклатуры,
		|	ВидыНоменклатурыРодительскиеВиды.РодительскийВид КАК РодительскийВид
		|ИЗ
		|	Справочник.ВидыНоменклатуры.РодительскиеВиды КАК ВидыНоменклатурыРодительскиеВиды
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидНоменклатуры";
	ТаблицаВидов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строки Из Объект.Номенклатура Цикл 
		Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			
			НайденнаяСтрокаАдресат = Неопределено;
			ВидНоменклатуры = Строки.КарточкаНоменклатуры.ВидНоменклатуры;
			ПараметрыОтбора = Новый Структура("ВидНоменклатуры", ВидНоменклатуры);
			МассивСтрок = ТаблицаВидов.НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из МассивСтрок Цикл
				РодительскийВид = НайденнаяСтрока.РодительскийВид;
				
				// Ищем родителя.
				Для Каждого Строки2 Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
					Если ЗначениеЗаполнено(Строки2.КарточкаНоменклатуры) 
						И УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Строки2.Номенклатура) Тогда
						
						Если Строки2.КарточкаНоменклатуры.ВидНоменклатуры = РодительскийВид Тогда
							НайденнаяСтрокаАдресат = Строки2;
							Прервать;
						КонецЕсли;
					КонецЕсли;                              
				КонецЦикла;
				
				Если НайденнаяСтрокаАдресат <> Неопределено Тогда
					Строки.Партия 	= НайденнаяСтрокаАдресат.КарточкаНоменклатуры;
					Строки.Комплект	= ?(ЗначениеЗаполнено(НайденнаяСтрокаАдресат.Комплект), 
						НайденнаяСтрокаАдресат.Комплект, НайденнаяСтрокаАдресат.КарточкаНоменклатуры);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	// Вывод дерева	
	ВывестиДеревоНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНакладной(Команда)
	
	// Записываем документ.
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ЗаполнитьПоНакладнойЗавершение",ЭтотОбъект);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходима его запись. Продолжить?'"), Режим);
		Возврат;		
	КонецЕсли;
		
	ЗаполнитьНаСервереПоНакладной();
	ВывестиДеревоНоменклатуры();
	
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
	
	ТекущийЭлемент = Элементы.ДеревоНоменклатуры;
	
	// Разворачиваем дерево.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
		
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНакладнойУслуги(Команда)
	
	// Записываем документ.
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ЗаполнитьПоНакладнойУслугиЗавершение",ЭтотОбъект);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходима его запись. Продолжить?'"), Режим);
		Возврат;		
	КонецЕсли;
		
	ЗаполнитьНаСервереПоНакладной("Услуги");
	ВывестиДеревоНоменклатуры();
		
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНакладнойНоменклатура(Команда)
	
	// Записываем документ.
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ЗаполнитьПоНакладнойНоменклатураЗавершение",ЭтотОбъект);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходима его запись. Продолжить?'"), Режим);
		Возврат;		
	КонецЕсли;
		
	ЗаполнитьНаСервереПоНакладной("Номенклатура");
	ВывестиДеревоНоменклатуры();
	
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
		
	Модифицированность = Истина;		
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьУслугиПоКоличеству(Команда)
	
	СохранитьДеревоНоменклатуры();
	
	Если Объект.Номенклатура.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Номенклатура"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Услуги"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	РаспределитьУслугиПоКоличествуНаСервере();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьУслугиПоСумме(Команда)
	
	СохранитьДеревоНоменклатуры();
	
	Если Объект.Номенклатура.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Номенклатура"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Услуги"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	РаспределитьУслугиПоСуммеНаСервере();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьУслугиПоКарточкам(Команда)
	
	СохранитьДеревоНоменклатуры();
	
	Если Объект.Номенклатура.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Номенклатура"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Услуги"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	РаспределитьУслугиПоКарточкамНаСервере();	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьУслугиПоКарточкамПоСумме(Команда)
	
	СохранитьДеревоНоменклатуры();
	
	Если Объект.Номенклатура.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Номенклатура"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Табличная часть ""Услуги"" пустая!'"));
		Возврат;
	КонецЕсли;
	
	РаспределитьУслугиПоКарточкамПоСуммеНаСервере();	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, 
		СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область БПО

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьДоступность()
		
	Элементы.ЗаказПоставщику.Видимость                   	= Объект.ПоложениеЗаказаПоставщику 
		= Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		
	Элементы.ДеревоНоменклатурыЗаказПоставщику.Видимость 	= Объект.ПоложениеЗаказаПоставщику 
		= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		
	Элементы.СтатьяДоходовРасходов.Видимость                = Объект.ПоложениеСтатьиДоходовРасходов
		= Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		
	Элементы.ДеревоНоменклатурыСтатьяДоходовРасходов.Видимость = Объект.ПоложениеСтатьиДоходовРасходов
		= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	
	Элементы.Подразделение.Видимость                      	= (Объект.ПоложениеПодразделения 
		= Перечисления.ПоложениеРеквизитаНаФорме.ВШапке) ИЛИ (НЕ ЗначениеЗаполнено(Объект.ПоложениеПодразделения));
		
	Элементы.ДеревоНоменклатурыПодразделение.Видимость    	= Объект.ПоложениеПодразделения 
		= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	
	Элементы.УслугиЗаказПоставщику.Видимость 				= Объект.ПоложениеЗаказаПоставщику 
		= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		
	Элементы.УслугиСтатьяДоходовРасходов.Видимость    		= Объект.ПоложениеСтатьиДоходовРасходов
		= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		
	Элементы.УслугиПодразделение.Видимость    				= Объект.ПоложениеПодразделения
		= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	
	Элементы.ДеревоНоменклатурыСерийныйНомер.Видимость 		= 
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
		
	Элементы.ДеревоНоменклатурыИнвентарныйНомер.Видимость 	= 
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
	
	Элементы.НакладнаяЗаказПоставщику.Видимость				= Объект.ПоложениеЗаказаПоставщику 
		= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		
	Элементы.НакладнаяСтатьяДоходовРасходов.Видимость		= Объект.ПоложениеСтатьиДоходовРасходов 
		= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		
	Элементы.НакладнаяПодразделение.Видимость				= Объект.ПоложениеПодразделения 
		= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	
	Элементы.ЗаказКлиента.Видимость							= Объект.ПоложениеЗаказаКлиента 
		= Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		
	Элементы.ДеревоНоменклатурыЗаказКлиента.Видимость	 	= Объект.ПоложениеЗаказаКлиента 
		= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		
	Элементы.УслугиЗаказКлиента.Видимость	 				= Объект.ПоложениеЗаказаКлиента 
		= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;	
		
	Элементы.НакладнаяЗаказКлиента.Видимость				= Объект.ПоложениеЗаказаКлиента 
		= Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		
	Если Объект.ВидДокумента = Перечисления.ВидДокументаПоступления.ВводОстатков Тогда 
		Элементы.ДеревоНоменклатурыДатаПриобретения.Видимость = Истина
	Иначе
		Элементы.ДеревоНоменклатурыДатаПриобретения.Видимость = Ложь;
	КонецЕсли;
			
	Если Объект.ВидДокумента = Перечисления.ВидДокументаПоступления.ВводОстатков
		ИЛИ Объект.ВидДокумента = Перечисления.ВидДокументаПоступления.ПоРезультатамИнвентаризации Тогда
		// Шапка
		Элементы.Контрагент.Видимость								= Ложь;
		Элементы.Договор.Видимость									= Ложь;
		Элементы.ЗаказПоставщику.Видимость							= Ложь;
		Элементы.ЗаказКлиента.Видимость								= Ложь;
		Элементы.СтатьяДоходовРасходов.Видимость					= Ложь;
		
		// Т.ч. Номенклатура
		Элементы.ДеревоНоменклатурыЗаказПоставщику.Видимость		= Ложь;
		Элементы.ДеревоНоменклатурыЗаказКлиента.Видимость			= Ложь;
		Элементы.ДеревоНоменклатурыСтатьяДоходовРасходов.Видимость	= Ложь;
		
		// Т.ч. Услуги
		Элементы.УслугиЗаказПоставщику.Видимость					= Ложь;
		Элементы.УслугиЗаказКлиента.Видимость						= Ложь;
		Элементы.УслугиСтатьяДоходовРасходов.Видимость				= Ложь;
		
		// Т.ч. Накладная
		Элементы.НакладнаяЗаказПоставщику.Видимость					= Ложь;
		Элементы.НакладнаяЗаказКлиента.Видимость					= Ложь;
		Элементы.НакладнаяСтатьяДоходовРасходов.Видимость			= Ложь;
		
		Если Объект.ВидДокумента = Перечисления.ВидДокументаПоступления.ПоРезультатамИнвентаризации Тогда
			Элементы.ГруппаУслуги.Видимость					= Ложь;
			Элементы.ГруппаНакладная.Видимость				= Ложь;
			Элементы.ДеревоНоменклатурыСтавкаНДС.Видимость	= Ложь;
			Элементы.ДеревоНоменклатурыСуммаНДС.Видимость	= Ложь;
			Элементы.ДеревоНоменклатурыВсего.Видимость		= Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.Контрагент.Видимость					= Истина;
		Элементы.Договор.Видимость						= Истина;
		Элементы.ГруппаУслуги.Видимость					= Истина;
		Элементы.ГруппаНакладная.Видимость				= Истина;
		Элементы.ДеревоНоменклатурыСтавкаНДС.Видимость	= Истина;
		Элементы.ДеревоНоменклатурыСуммаНДС.Видимость	= Истина;
		Элементы.ДеревоНоменклатурыВсего.Видимость		= Истина;
	КонецЕсли;
	
	ПриИзмененииВидаОперацииНаСервере();
	РаспределятьУслугиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РаспределятьУслугиПриИзмененииНаСервере(Знач ОчиститьКолонкуСуммаРасходов = Ложь)
	
	Если Объект.РаспределятьУслуги = Истина Тогда
		Элементы.ДеревоНоменклатурыСуммаРасходов.Видимость	= Истина;
		Элементы.РаспределитьУслуги.Видимость				= Истина;
	Иначе
		Элементы.ДеревоНоменклатурыСуммаРасходов.Видимость	= Ложь;
		Элементы.РаспределитьУслуги.Видимость				= Ложь;
		
		Если ОчиститьКолонкуСуммаРасходов = Истина Тогда			
			ДЗНоменклатура = РеквизитФормыВЗначение("ДеревоНоменклатуры");			
			ОбработкаТабличныхЧастей.УстановитьЗначениеКолонкиВДеревеНоменклатуры(ДЗНоменклатура, "СуммаРасходов", 0);
			ЗначениеВРеквизитФормы(ДЗНоменклатура, "ДеревоНоменклатуры");			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОперацииНаСервере()
	
	// Очищаем реквизиты, которые не относятся к виду документа "Ввод остатков".
	Если Объект.ВидДокумента = Перечисления.ВидДокументаПоступления.ВводОстатков 
		ИЛИ Объект.ВидДокумента = Перечисления.ВидДокументаПоступления.ПоРезультатамИнвентаризации Тогда 
		
		Объект.Контрагент				= Неопределено;
		Объект.Договор					= Неопределено;
		Объект.ЗаказПоставщику			= Неопределено;
		Объект.ЗаказКлиента				= Неопределено;
		Объект.СтатьяДоходовРасходов	= Неопределено;	
		
		ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
		
		Для Каждого Строки Из ДЗ.Строки Цикл
			Строки.ЗаказПоставщику		= Неопределено;
			Строки.ЗаказКлиента			= Неопределено;
			Строки.СтатьяДоходовРасходов= Неопределено;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДЗ, "ДеревоНоменклатуры");
		
		Если Объект.ВидДокумента = Перечисления.ВидДокументаПоступления.ПоРезультатамИнвентаризации Тогда
			Объект.Услуги.Очистить();
			Объект.Накладная.Очистить();
		Иначе	
			Для Каждого Строки Из Объект.Услуги Цикл
				Строки.ЗаказПоставщику		= Неопределено;
				Строки.ЗаказКлиента			= Неопределено;
				Строки.СтатьяДоходовРасходов= Неопределено;
			КонецЦикла;
			
			Для Каждого Строки Из Объект.Накладная Цикл
				Строки.ЗаказПоставщику		= Неопределено;
				Строки.ЗаказКлиента			= Неопределено;
				Строки.СтатьяДоходовРасходов= Неопределено;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитНаСервере(СтрокаТабличнойЧасти)
	
   Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти, "НеОблагается");
   
КонецФункции

&НаСервере
Функция ЗначениеНаСервере(Стр, Параметры = Неопределено)
	
	Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(Стр, Параметры);
	
КонецФункции

&НаСервере
Процедура ВыполнитьНаСервере(Стр)
	
	Выполнить(Стр);
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияНачалоВыбораИзСписка.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	
	СписокЕдиницаИзмерения = Новый СписокЗначений;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);
	
	СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, 
		Номенклатура.ЕдиницаИзмерения.Наименование + " " + НСтр("ru='(ед. хранения)'"));
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Номенклатура);
	
	Родитель = Номенклатура.Родитель;
	
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Прервать;
		Иначе
			МассивОтбора.Добавить(Родитель);
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	КонецЦикла;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка()	

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("Договор", Контрагент.ДоговорПоУмолчанию);	
	СтруктураДанные.Вставить("ВалютаРасчетов", Контрагент.ДоговорПоУмолчанию.ВалютаРасчетов);	
	СтруктураДанные.Вставить("ВалютаРасчетовКурсКратность", 
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, 
			Новый Структура("Валюта", Контрагент.ДоговорПоУмолчанию.ВалютаРасчетов)));
		
	СтруктураДанные.Вставить("РасчетыВУсловныхЕдиницах", Контрагент.ДоговорПоУмолчанию.РасчетыВУсловныхЕдиницах);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);	
	СтруктураДанные.Вставить("ВалютаРасчетовКурсКратность", 
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов)));	
	СтруктураДанные.Вставить("РасчетыВУсловныхЕдиницах", Договор.РасчетыВУсловныхЕдиницах);		
	СтруктураДанные.Вставить("СуммаВключаетНДС", Неопределено);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, 
		ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = УправлениеITОтделом8УФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаНовая, 
		Новый Структура("Валюта", ВалютаРасчетов));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("РазностьДат",	РазностьДат);
	СтруктураДанные.Вставить("ВалютаКурсКратность",	ВалютаКурсКратность);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура пересчитывает курс и кратность валюты расчетов при изменении даты документа.
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый 		= ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, 
		СтруктураДанные.ВалютаКурсКратность.Курс);
		
	КратностьНовый 	= ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, 
		СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой 	= Строка(Объект.Кратность) + " " 
			+ СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
			
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " 
			+ Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
				
		ТекстСообщения 		= СтрШаблон(НСтр("ru = 'На дату документа у валюты расчетов (%1) был задан курс.
            |Установить курс расчетов (%2) в соответствии с курсом валюты?'"), 
			КурсВалютыСтрокой, КурсНовыйВалютыСтрокой);
		
		Режим 				= РежимДиалогаВопрос.ДаНет;
		Структура			= Новый Структура("КурсНовый,КратностьНовый", КурсНовый, КратностьНовый);
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыРасчетовЗавершение", 
			ЭтотОбъект, Структура);
			
		ПоказатьВопрос(ОписаниеОповещения,ТекстСообщения,Режим);
		Возврат;
		
	КонецЕсли;
	
	ПересчитатьКурсКратностьВалютыРасчетовФрагмент();
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетовЗавершение(РезультатВопроса, ДопПараметры)Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	Объект.Курс 	 = ДопПараметры.КурсНовый;
	Объект.Кратность = ДопПараметры.КратностьНовый;
	ПересчитатьКурсКратностьВалютыРасчетовФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетовФрагмент()
	
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов",			ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс",					Объект.Курс);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта",	КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций",	УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьРеквизитыБюджетов()
	
	Объект.Бюджет			= УправлениеITОтделом8УФ.НайтиБюджетНаДату(Объект.Дата, Объект.Организация);
	Объект.ПериодБюджета	= УправлениеITОтделом8УФ.НайтиПериодБюджета(Объект.Дата, Объект.Бюджет);
	
КонецПроцедуры

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ДеревоНоменклатурыСтавкаНДС.Видимость = Истина;
		Элементы.ДеревоНоменклатурыСуммаНДС.Видимость = Истина;
		Элементы.ДеревоНоменклатурыВсего.Видимость = Истина;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Номенклатура Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
				
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма 
				+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.ДеревоНоменклатурыСтавкаНДС.Видимость = Ложь;
		Элементы.ДеревоНоменклатурыСуммаНДС.Видимость = Ложь;
		Элементы.ДеревоНоменклатурыВсего.Видимость = Ложь;

		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
		    СтавкаНДСПоУмолчанию = УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;	
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Номенклатура Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = 'Валюта: %Валюта%, курс: %Курс%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", 
				?((НЕ ЗначениеЗаполнено(СтруктураНадписи.ВалютаРасчетов)) 
				ИЛИ СтруктураНадписи.ВалютаДокумента = СтруктураНадписи.ВалютаРасчетов, 
				СокрЛП(Строка(СтруктураНадписи.Курс)), СокрЛП(Строка(СтруктураНадписи.КурсНациональнаяВалюта))));
			
		Иначе
			ТекстНадписи = НСтр("ru = 'Валюта: <нет>'");
		КонецЕсли;
	КонецЕсли;
			
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = '; %НалогообложениеНДС%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", 
			СокрЛП(Строка(СтруктураНадписи.НалогообложениеНДС)));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе		
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;	
	КонецЕсли;	
 
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.Договор);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);	
	
	ВалютаСтруктура = Новый Структура("ВалютаРасчетовПередИзменением",ВалютаРасчетовПередИзменением);
	
	// 2. Открываем форму "Цены и Валюта".
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение",
		ЭтаФорма,ВалютаСтруктура);
		
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта",СтруктураПараметров,,,,,
		ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()	

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат,ДополнительныеПараметры)Экспорт
	
	СтруктураЦеныИВалюта = Результат;
	// 3. Перезаполняем табличную часть "НОМЕНКЛАТУНА" если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		Объект.ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.Курс = СтруктураЦеныИВалюта.КурсРасчетов;
		Объект.Кратность = СтруктураЦеныИВалюта.КратностьРасчетов;
		Объект.НалогообложениеНДС = СтруктураЦеныИВалюта.НалогообложениеНДС;
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = СтруктураЦеныИВалюта.НДСВключатьВСтоимость;
				
		// Пересчитываем цены по валюте.
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			  И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда
			УправлениеITОтделом8УФКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, 
				ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Номенклатура");
				
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			И НЕ СтруктураЦеныИВалюта.СуммаВключаетНДС = СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
			УправлениеITОтделом8УФКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Номенклатура");
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов",			ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс",					Объект.Курс);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта",	КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций",	УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()	

&НаСервереБезКонтекста
Функция СуммаПоследнейПокупки(ДатаАктуальности, Организация, Контрагент, Номенклатура)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ПоступлениеНоменклатура.Цена, 0) КАК Цена
		|ИЗ
		|	Документ.Поступление.Номенклатура КАК ПоступлениеНоменклатура
		|ГДЕ
		|	ПоступлениеНоменклатура.Номенклатура = &Номенклатура
		|	И ПоступлениеНоменклатура.Ссылка.Дата < &Дата
		|	И ПоступлениеНоменклатура.Ссылка.Проведен = ИСТИНА
		|	И ПоступлениеНоменклатура.Ссылка.Организация = &Организация
		|	И ПоступлениеНоменклатура.Ссылка.Контрагент = &Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоступлениеНоменклатура.Ссылка.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Дата", ДатаАктуальности);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Содержание", СтруктураДанные.Номенклатура.Наименование);
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		Если СтруктураДанные.Организация = Неопределено Тогда
			СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.ПустаяСсылка());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
		КонецЕсли;
	КонецЕсли;

	Цена = 0;
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда
		Если СтруктураДанные.Свойство("ДатаАктуальности") Тогда
			ДатаАктуальности = СтруктураДанные.ДатаАктуальности;
		Иначе
			ДатаАктуальности = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Цена = СуммаПоследнейПокупки(ДатаАктуальности, СтруктураДанные.Организация, СтруктураДанные.Контрагент, 
			СтруктураДанные.Номенклатура);
			
	КонецЕсли;
	
	СтруктураДанные.Вставить("Цена", Цена);
	
	СтруктураДанные.Вставить("НавСсылка", 
		УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(СтруктураДанные.Номенклатура));
	
	// Проверка, что ведется учет по карточкам.
	СтруктураДанные.Вставить("КарточкаНоменклатуры", 
		УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(СтруктураДанные.Номенклатура));
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	КонецЕсли;
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма 
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Итоговая сумма в документе.
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧастиНакладная(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Накладная.ТекущиеДанные;
	КонецЕсли;
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма 
		+ ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаСервере
Функция РассчитатьСуммуДокумента()
	
	ДЗНоменклатура = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	Результат = ДЗНоменклатура.Строки.Итог("Всего", Истина) + Объект.Услуги.Итог("Всего");
	Возврат Результат;
	
КонецФункции

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента() 

&НаСервере
// Сохранения дерева номенклатуры.
Процедура СохранитьДеревоНоменклатуры(ТекущийОбъект =  Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекОбъект = РеквизитФормыВЗначение("Объект");
	Иначе
		ТекОбъект = ТекущийОбъект;
	КонецЕсли;
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	
	ОбработкаТабличныхЧастей.СохранитьДеревоНоменклатуры(ДЗ, ТекОбъект.Номенклатура);
	
	Если ТекущийОбъект = Неопределено Тогда
		ЗначениеВДанныеФормы(ТекОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Вывод дерева номенклатуры.
Процедура ВывестиДеревоНоменклатуры()
	
	ТЗ = Объект.Номенклатура.Выгрузить();
	ТЗ.Колонки.Добавить("НавСсылка");
	Для Каждого Строки Из ТЗ Цикл
		Строки.НавСсылка = УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(Строки.Номенклатура);
	КонецЦикла;
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	ДЗ.Строки.Очистить();	
	УправлениеITОтделом8УФ.ВывестиДеревоНоменклатуры(ДЗ, ТЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьНумерациюВДеревеЗначенийНаСервере()
	
	ОбработкаТабличныхЧастей.ОбновитьНумерациюВДереве(ДеревоНоменклатуры);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнвентарныеИСерийныеНомераНаСервере()
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	УправлениеITОтделом8УФ.ОбновитьИнвентарныеИСерийныеНомера(ДЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуПриобретенияНаСервере();
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	УправлениеITОтделом8УФ.ОбновитьДатуПриобретения(ДЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)

	// Может содержать дочерние
	Если НовыйРодитель <> Неопределено Тогда
		Если ЗначениеЗаполнено(НовыйРодитель.Номенклатура) Тогда
			Параметр = Новый Структура();
			Параметр.Вставить("Номенклатура", НовыйРодитель.Номенклатура);
			Если НЕ ЗначениеНаСервере("Параметры.Номенклатура.ВидНоменклатуры.МожетИметьКомплектующие", Параметр) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	// Родитель в родителе
    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
	КонецЦикла;
	
    Возврат Истина;

КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен.
    // Это происходит если выделены несколько элементов,
    // одной и той же ветви дерева на разных уровнях иерархии.
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень.
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
            [КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Если Источник.ПолучитьРодителя() = Неопределено Тогда
        РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
    Иначе
        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуДерева(РеквизитДерево, Родитель)
	
	Возврат ОбработкаТабличныхЧастейКлиент.ДобавитьСтрокуДерева(РеквизитДерево, Родитель);
	
КонецФункции

&НаСервере
Функция ПроверитьМожетЛиИметьКомплектующие(Номенклатура)
	
	Возврат Номенклатура.ВидНоменклатуры.МожетИметьКомплектующие;
	
КонецФункции

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ОбъектДок = РеквизитФормыВЗначение("Объект");
	Если ОбъектДок.Проведен Тогда
		ОбъектДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе 
		ОбъектДок.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ОбъектДок, Объект);
	
КонецПроцедуры

&НаСервере
Функция СтруктураСтрокиДерева()
	
	Возврат ОбработкаТабличныхЧастей.СтруктураИзДереваЗначений(ЭтаФорма,"ДеревоНоменклатуры");
	
КонецФункции

&НаСервере
Функция СтруктураСтрокиТабличнойЧасти()
	
	Возврат ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма,"Номенклатура");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТабличнуюЧастьНоменклатура()
	
	СтрокаТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТекущиеДанные = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПредыдущиеРеквизитыСтроки Цикл
		
		Если КлючИЗначение.Значение <> СтрокаТекущиеДанные[КлючИЗначение.Ключ] Тогда			
			СтруктураТекущиеДанные	= СтруктураСтрокиТабличнойЧасти();
			ЗаполнитьЗначенияСвойств(СтруктураТекущиеДанные,СтрокаТекущиеДанные);			
			//РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТекущиеДанные);
			ОбновитьСтрокуТабличнойЧасти(ПредыдущиеРеквизитыСтроки, СтруктураТекущиеДанные);
			Модифицированность 		= Истина;
			Возврат;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуТабличнойЧасти(ПредыдущиеРеквизитыСтроки, СтруктураТекущиеДанные)
		
	Отбор 		= ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма,"Номенклатура");
	
	ЗаполнитьЗначенияСвойств(Отбор,ПредыдущиеРеквизитыСтроки);
	
	МассивСтрок = Объект.Номенклатура.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() <> 1 Тогда //обновляем полностью.
		СохранитьДеревоНоменклатуры();
	Иначе
		ЗаполнитьЗначенияСвойств(МассивСтрок[0],СтруктураТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатуры(Результат, ДополнительныеПараметры)Экспорт 
	
	Если Результат = "КнопкаСоздатьНовую" Тогда
		
		ПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(ДополнительныеПараметры);
		
	ИначеЕсли Результат = "КнопкаВыбратьИзСписка" Тогда
		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВыбораИзСпискаКарточкиНоменклатуры", 
			ЭтотОбъект, ДополнительныеПараметры);
			
		ПараметрыФормы 		= Новый Структура;
		Если Объект.Ссылка.Пустая() Тогда
			ПараметрыФормы.Вставить("ОтборТолькоНеИспользованные", Истина);
			ПараметрыФормы.Вставить("ВидимостьОтборПоступление", Ложь);
		Иначе
			ПараметрыФормы.Вставить("ОтборПоступление", Объект.Ссылка);
		КонецЕсли;	
		
		СтрокаНоменклатура	 = ДополнительныеПараметры.Приемник;
		мНоменклатура		 = СтрокаНоменклатура.Номенклатура;
		мКарточкаНоменклатуры=СтрокаНоменклатура.КарточкаНоменклатуры; 
		ПараметрыФормы.Вставить("ОтборНоменклатура", мНоменклатура);
		ПараметрыФормы.Вставить("ВыбранноеЗначение", мКарточкаНоменклатуры);
		
		ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаВыбора", ПараметрыФормы,,,,,ОписаниеОповещения);
				
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзСпискаКарточкиНоменклатуры(Результат, ДополнительныеПараметры)Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНоменклатура = ДополнительныеПараметры.Приемник;
	СтрокаНоменклатура.КарточкаНоменклатуры = Результат;
	СохранитьДеревоНоменклатуры();
	
	НоваяСтрока 			= ДобавитьСтрокуДерева(ДополнительныеПараметры.РеквизитДерево, 
		ДополнительныеПараметры.Приемник);	
		
	Элемент					= Элементы.ДеревоНоменклатуры;
	ТекущийЭлемент = Элемент;
	Элемент.ТекущаяСтрока 	= НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ДеревоНоменклатурыНоменклатура;
	Элемент.ИзменитьСтроку();
	
	// Разворачиваем дерево.	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(СтруктураПараметров)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВопросаСоздатьКарточкуНоменклатурыЗавершение", 
			ЭтотОбъект, СтруктураПараметров);
			
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходима его запись. Продолжить?'"),Режим);		
		Возврат;		
	КонецЕсли;		
	
	ПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатурыЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ПараметрыСтруктура)
	
	КарточкаНоменклатуры= Неопределено;
	ЗаписатьНаСервере();
	СтрокаНоменклатура 	= ПараметрыСтруктура.Приемник;
	мНоменклатура		= СтрокаНоменклатура.Номенклатура;
	мСерийныйНомер		= СтрокаНоменклатура.СерийныйНомер;
	мИнвентарныйНомер	= СтрокаНоменклатура.ИнвентарныйНомер;
	КарточкаНоменклатуры= КарточкаНоменклатурыНаСервере(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер);		
	
	Если ЗначениеЗаполнено(КарточкаНоменклатуры) Тогда
		СтрокаНоменклатура.КарточкаНоменклатуры = КарточкаНоменклатуры;
		СохранитьДеревоНоменклатуры();
	Иначе
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Для номенклатуры <%1> не удалось создать карточку номенклатуры.'"),
			СтрокаНоменклатура.Номенклатура));
			
		Возврат;
	КонецЕсли;
	
	ЗаписатьНаСервере();	
	
	НоваяСтрока 			= ДобавитьСтрокуДерева(ПараметрыСтруктура.РеквизитДерево, ПараметрыСтруктура.Приемник);	
	Элемент					= Элементы.ДеревоНоменклатуры;
	ТекущийЭлемент = Элемент;
	Элемент.ТекущаяСтрока 	= НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ДеревоНоменклатурыНоменклатура;
	Элемент.ИзменитьСтроку();
	
	// Разворачиваем дерево	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМеню(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 		 
		Возврат;
	КонецЕсли;
	
	РеквизитДерево 	= ЭтаФорма["ДеревоНоменклатуры"];
	ВКомплект 		= Ложь;
	Элемент 		= ДополнительныеПараметры.Элемент;
	
	Если Результат.Значение = НСтр("ru='Добавить в комплект'") Тогда 
		ВКомплект = Истина;
	КонецЕсли;
	
	Если ВКомплект Тогда
		// Внутрь комплекта
		Приемник = РеквизитДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Если ЗначениеЗаполнено(Приемник.КарточкаНоменклатуры) Тогда
			Если НЕ Элемент.Развернут(Приемник.ПолучитьИдентификатор()) Тогда
				Элемент.Развернуть(Приемник.ПолучитьИдентификатор());
			КонецЕсли;		
			НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Приемник);
		Иначе
			ДопПараметры 		= Новый Структура("РеквизитДерево, Приемник", РеквизитДерево, Приемник);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВопросаСоздатьКарточкуНоменклатуры", 
				ЭтотОбъект, ДопПараметры);
			
			Кнопки 				= Новый СписокЗначений;
			Кнопки.Добавить("КнопкаСоздатьНовую"	, НСтр("ru='Создать новую'"));
			Кнопки.Добавить("КнопкаВыбратьИзСписка"	, НСтр("ru='Выбрать из списка'"));
			Кнопки.Добавить("КнопкаОтмена"			, НСтр("ru='Отмена'"));
			                                     
			ПоказатьВопрос(ОписаниеОповещения, 
				СтрШаблон(НСтр("ru = 'Перед добавлением в комплект необходимо заполнить карточку для номенклатуры  %1
                 	|Создать новую или выбрать существующую из списка?'"), Приемник.Номенклатура),
					Кнопки,,"КнопкаСоздатьНовую");
				
			Возврат;
			
		КонецЕсли;	
    ИначеЕсли РеквизитДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя() = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Неопределено);
	Иначе
		// На текущий уровень
		Приемник = РеквизитДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя();
		Если ЗначениеЗаполнено(Приемник.КарточкаНоменклатуры) Тогда
			Если НЕ Элемент.Развернут(Приемник.ПолучитьИдентификатор()) Тогда
				Элемент.Развернуть(Приемник.ПолучитьИдентификатор());
			КонецЕсли;		
			НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Приемник);
		Иначе
			ДопПараметры 		= Новый Структура("РеквизитДерево, Приемник", РеквизитДерево, Приемник);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВопросаСоздатьКарточкуНоменклатуры", 
				ЭтотОбъект, ДопПараметры);
			
			Кнопки 				= Новый СписокЗначений;
			Кнопки.Добавить("КнопкаСоздатьНовую"	, НСтр("ru='Создать новую'"));
			Кнопки.Добавить("КнопкаВыбратьИзСписка"	, НСтр("ru='Выбрать из списка'"));
			Кнопки.Добавить("КнопкаОтмена"			, НСтр("ru='Отмена'"));
			
			ПоказатьВопрос(ОписаниеОповещения, 
				СтрШаблон(НСтр("ru = 'Перед добавлением в комплект необходимо заполнить карточку для номенклатуры  %1
                	|Создать новую или выбрать существующую из списка?'"), Приемник.Номенклатура), 
					Кнопки,,"КнопкаСоздатьНовую");
				
			Возврат;

		КонецЕсли;
    КонецЕсли;
	
	ТекущийЭлемент = Элемент;
	Элемент.ТекущаяСтрока 	= НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ДеревоНоменклатурыНоменклатура;
	Элемент.ИзменитьСтроку();

КонецПроцедуры

&НаСервере
Функция КарточкаНоменклатурыНаСервере(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер)
	
	Возврат УправлениеITОтделом8УФ.СоздатьКарточкуНоменклатуры(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер);
	
КонецФункции	

&НаКлиенте
Процедура ДеревоНоменклатурыПеретаскиваниеФрагмент(РеквизитДерево, Приемник, Источник, ИДПриемник)
	
	НоваяСтрока	= СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник);

	Если Приемник = Неопределено Тогда
		НоваяСтрока.Комплект= ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
		НоваяСтрока.Партия 	= НоваяСтрока.Комплект;
	Иначе		
		НоваяСтрока.Комплект= ?(ЗначениеЗаполнено(Приемник.Комплект), Приемник.Комплект, Приемник.КарточкаНоменклатуры);
		НоваяСтрока.Партия 	= Приемник.КарточкаНоменклатуры;
	КонецЕсли;
	
    // Производится копирование в корень.
    // Для "красоты" развернем вновь созданную ветвь.
	Элемент = Элементы.ДеревоНоменклатуры;
	
    Если Приемник = Неопределено И НоваяСтрока <> Неопределено Тогда
        Элемент.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
    КонецЕсли;

    // Для "красоты" развернем ветвь-родителя
    Если НЕ Приемник = Неопределено Тогда
        Элемент.Развернуть(ИДПриемник, Истина);
	КонецЕсли;
	
	ОбновитьНумерациюВДеревеЗначенийНаСервере();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "КнопкаСоздатьНовую" Тогда
		
		ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(ДополнительныеПараметры);
		
	ИначеЕсли Результат = "КнопкаВыбратьИзСписка" Тогда
		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеретаскиваниеПослеВыбораИзСпискаКарточкиНоменклатуры", 
			ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы 		= Новый Структура;
		Если Объект.Ссылка.Пустая() Тогда
			ПараметрыФормы.Вставить("ОтборТолькоНеИспользованные", Истина);
			ПараметрыФормы.Вставить("ВидимостьОтборПоступление", Ложь);
		Иначе
			ПараметрыФормы.Вставить("ОтборПоступление", Объект.Ссылка);
		КонецЕсли;	
		
		СтрокаНоменклатура	 = ДополнительныеПараметры.Приемник;
		мНоменклатура		 = СтрокаНоменклатура.Номенклатура;
		мКарточкаНоменклатуры=СтрокаНоменклатура.КарточкаНоменклатуры; 
		ПараметрыФормы.Вставить("ОтборНоменклатура", мНоменклатура);
		ПараметрыФормы.Вставить("ВыбранноеЗначение", мКарточкаНоменклатуры);
		
		ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаВыбора", ПараметрыФормы,,,,,ОписаниеОповещения);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеПослеВыбораИзСпискаКарточкиНоменклатуры(Результат, ДополнительныеПараметры)Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНоменклатура = ДополнительныеПараметры.Приемник;
	СтрокаНоменклатура.КарточкаНоменклатуры = Результат; 
	ДеревоНоменклатурыПеретаскиваниеФрагмент(ДополнительныеПараметры.РеквизитДерево, СтрокаНоменклатура, 
		ДополнительныеПараметры.Источник, ДополнительныеПараметры.ИДПриемник);
		
	СохранитьДеревоНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(СтруктураПараметров)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыЗавершение", 
			ЭтотОбъект, СтруктураПараметров);
			
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходима его запись. Продолжить?'"), Режим);		
		Возврат;		
	КонецЕсли;		
	
	ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ПараметрыСтруктура)
		
	КарточкаНоменклатуры= Неопределено;
	ЗаписатьНаСервере();
	СтрокаНоменклатура 	= ПараметрыСтруктура.Приемник;
	мНоменклатура		= СтрокаНоменклатура.Номенклатура;
	мСерийныйНомер		= СтрокаНоменклатура.СерийныйНомер;
	мИнвентарныйНомер	= СтрокаНоменклатура.ИнвентарныйНомер;
	КарточкаНоменклатуры= КарточкаНоменклатурыНаСервере(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер);		
	
	Если ЗначениеЗаполнено(КарточкаНоменклатуры) Тогда
		СтрокаНоменклатура.КарточкаНоменклатуры = КарточкаНоменклатуры;
		СохранитьДеревоНоменклатуры();
	Иначе
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Для номенклатуры <%1> не удалось создать карточку номенклатуры.'"),
			СтрокаНоменклатура.Номенклатура));
		Возврат;
	КонецЕсли;	
	ЗаписатьНаСервере();
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	ДеревоНоменклатурыПеретаскиваниеФрагмент(ПараметрыСтруктура.РеквизитДерево, СтрокаНоменклатура, 
		ПараметрыСтруктура.Источник, ПараметрыСтруктура.ИДПриемник);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнвентарныйИСерийныйНомерНаСервере(КарточкаНоменклатуры)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИнвентарныйНомер"	,КарточкаНоменклатуры.ИнвентарныйНомер);
	СтруктураВозврата.Вставить("СерийныйНомер"		,КарточкаНоменклатуры.СерийныйНомер);
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ИнвентарныйНомерАвтоинкрементПослеВопроса(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИнвентарныйНомерАвтоинкрементФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентарныйНомерАвтоинкрементФрагмент()
	
	КоличествоИнвентарныхНомеров = 0;
	ЗаписатьНаСервере();	
	КоличествоИнвентарныхНомеров = ИнвентарныеНомераНаСервере(Неопределено);		
	ЗаписатьНаСервере();	
	
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);		
	
	// Разворачиваем дерево
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
	Если КоличествоИнвентарныхНомеров > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СозданыИнвентарныеНомера", ЭтотОбъект);
		#Если ВебКлиент Тогда
			ТекстСообщения = НСтр("ru = 'Инвентарные номера в карточках номенклатуры заполнены.
            |Внимание. В веб-клиенте изменения в наименованиях карточек номенклатуры будут отображены после перезапуска клиента.'");
			
		#Иначе
			ТекстСообщения = НСтр("ru='Инвентарные номера в карточках номенклатуры заполнены.'");
		#КонецЕсли
		
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданыИнвентарныеНомера(ДополнительныеПараметры)Экспорт
	
	ОбновитьИнтерфейсТонкийКлиент();
	
КонецПроцедуры	

&НаСервере
Функция ИнвентарныеНомераНаСервере(Родитель, КоличествоНомеров = 0)
	
	Если Родитель = Неопределено Тогда
		Родитель 			= ДеревоНоменклатуры;
		КоличествоНомеров 	= 0;
	КонецЕсли;
	
	Для Каждого Строки Из Родитель.ПолучитьЭлементы() Цикл    
		Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) И Не ЗначениеЗаполнено(Строки.ИнвентарныйНомер) 
			И Строки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
			И Строки.Номенклатура.ВидНоменклатуры.МожетИметьИнвентарныйНомер Тогда
			Попытка 
				КарточкаНоменклатурыОбъект 					= Строки.КарточкаНоменклатуры.ПолучитьОбъект();
				КарточкаНоменклатурыОбъект.ИнвентарныйНомер = 
					Справочники.КарточкиНоменклатуры.ПолучитьАвтоинкрементИнвентарногоНомера(КарточкаНоменклатурыОбъект.Ссылка);
					
				КарточкаНоменклатурыОбъект.Записать();				
			Исключение
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
					НСтр("ru = 'Не удалось создать инвентарный номер для номенклатуры %1 по причине: %2'"), 
						Строки.КарточкаНоменклатуры, ОписаниеОшибки()));
			КонецПопытки;			
			Строки.ИнвентарныйНомер	= КарточкаНоменклатурыОбъект.ИнвентарныйНомер; 
			Если ЗначениеЗаполнено(Строки.ИнвентарныйНомер) Тогда
				КоличествоНомеров = КоличествоНомеров + 1;
			КонецЕсли;	
		КонецЕсли;		
		ИнвентарныеНомераНаСервере(Строки, КоличествоНомеров);
	КонецЦикла;
	
	Возврат КоличествоНомеров;			
	
КонецФункции

&НаКлиенте
Процедура ИнвентарныйНомерАвтоинкрементВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	// Записываем документ
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ИнвентарныйНомерАвтоинкрементПослеВопроса", ЭтотОбъект);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходима его запись. Продолжить?'"), Режим);		
		Возврат;		
	КонецЕсли;	
	
	ИнвентарныйНомерАвтоинкрементФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсТонкийКлиент()
	#Если ТонкийКлиент Тогда
		ОбновитьИнтерфейс();
	#КонецЕсли	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПоПорядкуВопрос(Результат, ДополнительныеПараметры) Экспорт	
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	// Записываем документ
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПорядковыйНомерПоПорядкуПослеВопроса",ЭтотОбъект);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходимо его записать. Продолжить?'"), Режим);		
		Возврат;		
	КонецЕсли;		
	
	ПорядковыйНомерПоПорядкуФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПоПорядкуПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	ПорядковыйНомерПоПорядкуФрагмент();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПовторноИспользуемыеЗначенияСервер()
	
	ОбновитьПовторноИспользуемыеЗначения();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПоПорядкуФрагмент()
	
	КоличествоПорядковыхНомеров = 0;
	ЗаписатьНаСервере();
	ПоследнийНомерПоДокументу 	= ПоследнийПорядковыйНомерВКарточкахНоменклатуры();
	
	Если ЗначениеЗаполнено(ПоследнийНомерПоДокументу) Тогда
		КоличествоПорядковыхНомеров = ПорядковыеНомераНаСервере(Неопределено, ПоследнийНомерПоДокументу);
	Иначе
		КоличествоПорядковыхНомеров = ПорядковыеНомераНаСервере(Неопределено);
	КонецЕсли;
	
	ЗаписатьНаСервере();
	
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// Разворачиваем дерево
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);	
		
	Если КоличествоПорядковыхНомеров > 0 Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ОбновилисьПорядковыеНомера",ЭтотОбъект);		
		#Если ВебКлиент Тогда
			ТекстСообщения = НСтр("ru = 'Порядковые номера в карточках номенклатуры заполнены.
            | Внимание. В веб-клиенте изменения в наименованиях карточек номенклатуры будут отображены после перезапуска клиента.'");
		#Иначе
			ТекстСообщения = НСтр("ru = 'Порядковые номера в карточках номенклатуры заполнены.'");
		#КонецЕсли		
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновилисьПорядковыеНомера(ДополнительныеПараметры) Экспорт

	ОбновитьИнтерфейсТонкийКлиент();
	
КонецПроцедуры	

&НаСервере
Функция ПорядковыеНомераНаСервере(Родитель, ПорядковыйНомер = 0, ТекущаяНоменклатура = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = ДеревоНоменклатуры;		
	КонецЕсли;
	
	Для Каждого Строки Из Родитель.ПолучитьЭлементы() Цикл    
		Если ЗначениеЗаполнено(ТекущаяНоменклатура) Тогда
			Если Строки.Номенклатура = ТекущаяНоменклатура И ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) 
				И Не ЗначениеЗаполнено(Строки.КарточкаНоменклатуры.ПорядковыйНомер) Тогда
				Попытка 				
					КарточкаНоменклатурыОбъект 				  = Строки.КарточкаНоменклатуры.ПолучитьОбъект();
					ПорядковыйНомер 						  = ПорядковыйНомер + 1;
					КарточкаНоменклатурыОбъект.ПорядковыйНомер= ПорядковыйНомер;				
					КарточкаНоменклатурыОбъект.Записать();				
				Исключение
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Не удалось записать карточку номенклатуры %1 по причине: %2'"), 
						Строки.КарточкаНоменклатуры, ОписаниеОшибки()));
				КонецПопытки;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) И Не ЗначениеЗаполнено(Строки.КарточкаНоменклатуры.ПорядковыйНомер) 
				И Строки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
				Попытка 				
					КарточкаНоменклатурыОбъект 				  = Строки.КарточкаНоменклатуры.ПолучитьОбъект();
					ПорядковыйНомер 						  = ПорядковыйНомер + 1;
					КарточкаНоменклатурыОбъект.ПорядковыйНомер= ПорядковыйНомер;				
					КарточкаНоменклатурыОбъект.Записать();				
				Исключение
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Не удалось записать карточку номенклатуры %1 по причине: %2'"),
						Строки.КарточкаНоменклатуры, ОписаниеОшибки()));
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		ПорядковыеНомераНаСервере(Строки, ПорядковыйНомер, ТекущаяНоменклатура);
	КонецЦикла;
	
	Возврат ПорядковыйНомер;
	
КонецФункции

&НаСервере
Функция ПоследнийПорядковыйНомерВКарточкахНоменклатуры(ТекущаяНоменклатура = Неопределено)
	
	// Последний порядковый номер.
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеНоменклатура.КарточкаНоменклатуры.ПорядковыйНомер КАК ПорядковыйНомер
		|ИЗ
		|	Документ.Поступление.Номенклатура КАК ПоступлениеНоменклатура
		|ГДЕ
		|	ПоступлениеНоменклатура.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядковыйНомер УБЫВ";
	
	Если ЗначениеЗаполнено(ТекущаяНоменклатура) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПоступлениеНоменклатура.Ссылка = &Ссылка",
				"ПоступлениеНоменклатура.Ссылка = &Ссылка И ПоступлениеНоменклатура.Номенклатура = &Номенклатура");
	КонецЕсли;		
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ТекущаяНоменклатура) Тогда
		Запрос.УстановитьПараметр("Номенклатура",ТекущаяНоменклатура);
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ПорядковыйНомер;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура ПорядковыйНомерВПределахПодчиненияВопрос(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	// Записываем документ
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПорядковыйНомерВПределахПодчиненияПослеВопроса", 
			ЭтотОбъект, ДополнительныеПараметры);
			
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Документ не записан. Для продолжения необходимо его записать. Продолжить?'"), Режим);		
		Возврат;		
	КонецЕсли;		
	
	ПорядковыйНомерВПределахПодчиненияФрагмент(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерВПределахПодчиненияПослеВопроса(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	ПорядковыйНомерВПределахПодчиненияФрагмент(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерВПределахПодчиненияФрагмент(СтруктураПараметров)
	
	КоличествоПорядковыхНомеров = 0;
	ЗаписатьНаСервере();
	ТекНоменклатура 			= СтруктураПараметров.ТекущаяНоменклатура;
	ПоследнийНомерПоДокументу 	= ПоследнийПорядковыйНомерВКарточкахНоменклатуры(ТекНоменклатура);
	
	Если ЗначениеЗаполнено(ПоследнийНомерПоДокументу) Тогда
		КоличествоПорядковыхНомеров = ПорядковыеНомераНаСервере(Неопределено, ПоследнийНомерПоДокументу, ТекНоменклатура);
	Иначе
		КоличествоПорядковыхНомеров = ПорядковыеНомераНаСервере(Неопределено,,ТекНоменклатура);
	КонецЕсли;
	
	ЗаписатьНаСервере();
	
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// Разворачиваем дерево
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);	
		
	Если КоличествоПорядковыхНомеров > 0 Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ОбновилисьПорядковыеНомера",ЭтотОбъект);		
		#Если ВебКлиент Тогда
			ТекстСообщения = НСтр("ru = 'Порядковые номера в карточках номенклатуры заполнены.
            |Внимание. В веб-клиенте изменения в наименованиях карточек номенклатуры в документе будут отображены после перезапуска клиента.'");
		#Иначе
			ТекстСообщения = НСтр("ru = 'Порядковые номера в карточках номенклатуры заполнены.'");
		#КонецЕсли		
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНаСервереПоНакладной(СпособЗаполнения = "");	
	
	Если СпособЗаполнения = "" ИЛИ СпособЗаполнения = "Номенклатура" Тогда
		Объект.Номенклатура.Очистить();
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеКомплектующие.НомерСтроки КАК НомерСтроки,
		|	ИсходныеКомплектующие.Ссылка КАК Спецификация,
		|	ИсходныеКомплектующие.Номенклатура КАК Номенклатура,
		|	ИсходныеКомплектующие.Количество КАК Количество,
		|	ИсходныеКомплектующие.Стоимость КАК Стоимость,
		|	ИсходныеКомплектующие.ИД КАК ИД,
		|	ИсходныеКомплектующие.РодительскийИД КАК РодительскийИД,
		|	ИсходныеКомплектующие.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.Спецификация.ИсходныеКомплектующие КАК ИсходныеКомплектующие
		|ГДЕ
		|	ИсходныеКомплектующие.Ссылка В(&МассивСпецификаций)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Спецификация,
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивСпецификаций", Объект.Накладная.Выгрузить().ВыгрузитьКолонку("Спецификация"));
	ТаблицаСпецификаций = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КарточкиНоменклатуры.Владелец КАК Номенклатура,
		|	КарточкиНоменклатуры.Ссылка КАК КарточкаНоменклатуры
		|ИЗ
		|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
		|ГДЕ
		|	КарточкиНоменклатуры.ДокументПоступления = &ДокументПоступления
		|
		|УПОРЯДОЧИТЬ ПО
		|	КарточкиНоменклатуры.ИнвентарныйНомер,
		|	КарточкиНоменклатуры.СерийныйНомер";
	
	Запрос.УстановитьПараметр("ДокументПоступления", Объект.Ссылка);
	ПулКарточекНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНакладной Из Объект.Накладная Цикл
		
		Если СпособЗаполнения = ""
			ИЛИ (СпособЗаполнения = "Номенклатура"
			И СтрокаНакладной.Номенклатура.ВидНоменклатуры.ТипВидаНоменклатуры <> Перечисления.ТипыВидовНоменклатуры.Услуга)			
			ИЛИ (СпособЗаполнения = "Услуги" 
			И СтрокаНакладной.Номенклатура.ВидНоменклатуры.ТипВидаНоменклатуры=Перечисления.ТипыВидовНоменклатуры.Услуга) Тогда
		
			Если Не ЗначениеЗаполнено(СтрокаНакладной.Спецификация) Тогда
				ЗаполнитьДеревоНоменклатурыБезСпецификации(СтрокаНакладной, ПулКарточекНоменклатуры);			
			Иначе
				УчетПоКарточкамНоменклатуры = 
					УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаНакладной.Номенклатура);
					
				Если УчетПоКарточкамНоменклатуры = Истина Тогда 
					Для Индекс = 1 По СтрокаНакладной.Количество Цикл
						ЗаполнитьДеревоНоменклатурыСпецификация(СтрокаНакладной, ТаблицаСпецификаций, ПулКарточекНоменклатуры);
					КонецЦикла;
				Иначе
					ЗаполнитьДеревоНоменклатурыСпецификация(СтрокаНакладной, ТаблицаСпецификаций, ПулКарточекНоменклатуры);
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоНоменклатурыБезСпецификации(СтрокаНакладной, ПулКарточекНоменклатуры);	
	
	Количество                 	= СтрокаНакладной.Количество;	
	УчетПоКарточкамНоменклатуры = 
		УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаНакладной.Номенклатура);
	
	Если Ложь Тогда
		ПулКарточекНоменклатуры = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если УчетПоКарточкамНоменклатуры = Ложь Тогда
		СтрокаТЧ                      		= Объект.Номенклатура.Добавить();
		СтрокаТЧ.Номенклатура         		= СтрокаНакладной.Номенклатура;
		СтрокаТЧ.КарточкаНоменклатуры 		= 
			УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(СтрокаНакладной.Номенклатура);
			
		СтрокаТЧ.Количество           		= Количество;
		СтрокаТЧ.Цена                 		= СтрокаНакладной.Цена;
		СтрокаТЧ.ЕдиницаИзмерения     		= СтрокаНакладной.ЕдиницаИзмерения;
		СтрокаТЧ.СтавкаНДС            		= СтрокаНакладной.СтавкаНДС;
		СтрокаТЧ.СтатьяДоходовРасходов      = СтрокаНакладной.СтатьяДоходовРасходов;
		СтрокаТЧ.Подразделение          	= СтрокаНакладной.Подразделение;
		СтрокаТЧ.ЗаказПоставщику			= СтрокаНакладной.ЗаказПоставщику;
		СтрокаТЧ.ЗаказКлиента				= СтрокаНакладной.ЗаказКлиента;
		СтрокаТЧ.Всего 						= СтрокаТЧ.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
		РассчитатьСуммуВСтрокеТабличнойЧастиНаСервере(СтрокаТЧ);
	Иначе
		Для Счетчик = 1 По Количество Цикл
			СтрокаТЧ                      	= Объект.Номенклатура.Добавить();
			СтрокаТЧ.Номенклатура         	= СтрокаНакладной.Номенклатура;
			СтрокаТЧ.КарточкаНоменклатуры 	= ПолучитьКарточкуНоменклатуры(СтрокаНакладной.Номенклатура, 
				ПулКарточекНоменклатуры, Объект.Ссылка);
				
			СтрокаТЧ.Количество           	= 1;
			СтрокаТЧ.Цена                 	= СтрокаНакладной.Цена;
			СтрокаТЧ.ЕдиницаИзмерения     	= СтрокаНакладной.ЕдиницаИзмерения;
			СтрокаТЧ.СтавкаНДС            	= СтрокаНакладной.СтавкаНДС;
			СтрокаТЧ.Всего 					= СтрокаТЧ.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			СтрокаТЧ.СтатьяДоходовРасходов  = СтрокаНакладной.СтатьяДоходовРасходов;
			СтрокаТЧ.Подразделение          = СтрокаНакладной.Подразделение;
			СтрокаТЧ.ЗаказПоставщику		= СтрокаНакладной.ЗаказПоставщику;
			СтрокаТЧ.ЗаказКлиента			= СтрокаНакладной.ЗаказКлиента;
			РассчитатьСуммуВСтрокеТабличнойЧастиНаСервере(СтрокаТЧ);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоНоменклатурыСпецификация(СтрокаНакладной, ТаблицаСпецификаций, 
		ПулКарточекНоменклатуры, РодительскийИД = 0, РодительскаяКарточка = Неопределено)
	
	ПараметрыОтбора = Новый Структура("Спецификация", СтрокаНакладной.Спецификация);
	СтрокиСпецификации = ТаблицаСпецификаций.НайтиСтроки(ПараметрыОтбора);
	
	УчетПоКарточкамНоменклатуры = 
		УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаНакладной.Номенклатура); 
	
	Для Каждого Строки Из СтрокиСпецификации Цикл
		
		Если Строки.РодительскийИД = РодительскийИД Тогда
			
			Если УчетПоКарточкамНоменклатуры = Ложь Тогда
				Карточка = 
					УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(СтрокаНакладной.Номенклатура);
			Иначе
				Карточка = ПолучитьКарточкуНоменклатуры(Строки.Номенклатура, ПулКарточекНоменклатуры, Объект.Ссылка);
			КонецЕсли;
			
			СтрокаТЧ                 		= Объект.Номенклатура.Добавить();
			СтрокаТЧ.Номенклатура    		= Строки.Номенклатура;
			СтрокаТЧ.КарточкаНоменклатуры   = Карточка;
			СтрокаТЧ.ЕдиницаИзмерения		= Строки.ЕдиницаИзмерения;
			СтрокаТЧ.Количество				= ?(УчетПоКарточкамНоменклатуры, 1, Строки.Количество);
			СтрокаТЧ.Цена            		= Строки.Стоимость;
			СтрокаТЧ.Сумма					= СтрокаТЧ.Количество * СтрокаТЧ.Цена;
			Если ЗначениеЗаполнено(РодительскаяКарточка) Тогда
				СтрокаТЧ.Партия		     	= РодительскаяКарточка;	
				СтрокаТЧ.Всего 				= СтрокаТЧ.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			КонецЕсли;
			СтрокаТЧ.СтавкаНДС				= Строки.Номенклатура.СтавкаНДС;
			СтрокаТЧ.СтатьяДоходовРасходов  = СтрокаНакладной.СтатьяДоходовРасходов;
			СтрокаТЧ.Подразделение          = СтрокаНакладной.Подразделение;
			СтрокаТЧ.ЗаказПоставщику		= СтрокаНакладной.ЗаказПоставщику;
			СтрокаТЧ.ЗаказКлиента			= СтрокаНакладной.ЗаказКлиента;
			
			РассчитатьСуммуНДСНаСервере(СтрокаТЧ);
			СтрокаТЧ.Всего = СтрокаТЧ.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			ЗаполнитьДеревоНоменклатурыСпецификация(СтрокаНакладной, ТаблицаСпецификаций,
				ПулКарточекНоменклатуры, Строки.ИД, Карточка); 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры НакладнаяНоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНакладнаяНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеITОтделом8УФПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
																
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;
	
	СтруктураДанные.Вставить("НавСсылка", УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(СтруктураДанные.Номенклатура));
	
	// Проверка, что ведется учет по карточкам.
	СтруктураДанные.Вставить("КарточкаНоменклатуры", 
		УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(СтруктураДанные.Номенклатура));
	
	Возврат СтруктураДанные;
	
КонецФункции // ДеревоНакладнаяНоменклатураПриИзменении()

&НаСервере
Процедура ОбновитьНумерациюВДеревеЗначенийНакладнаяНаСервере()
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура обновляет нумерацию элементов в дереве
&НаСервере
Процедура ОбновитьНумерациюВДеревеНакладная(СтрокаДерева, ИндексСтроки = 1) Экспорт
	
	ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого Строки Из ЭлементыДерева Цикл
		Строки.КлючСтроки 	= ИндексСтроки;
		ИндексСтроки 		= ИндексСтроки + 1;
		ОбновитьНумерациюВДеревеНакладная(Строки, ИндексСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтруктураСтрокиТабличнойЧастиНакладная()
	
	Возврат ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма,"Накладная");
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоНакладнойОбщаяЗавершение(РезультатВопроса, ДопПараметры, СтрокаЗаполнения) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	ЗаписатьНаСервере();
	
	ЗаполнитьНаСервереПоНакладной(СтрокаЗаполнения);
	ВывестиДеревоНоменклатуры();
	
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
	
	ТекущийЭлемент = Элементы.ДеревоНоменклатуры;
	
	// Разворачиваем дерево.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНакладнойУслугиЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	ЗаполнитьПоНакладнойОбщаяЗавершение(РезультатВопроса, ДопПараметры, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНакладнойНоменклатураЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	ЗаполнитьПоНакладнойОбщаяЗавершение(РезультатВопроса, ДопПараметры, "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНакладнойЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	ЗаполнитьПоНакладнойОбщаяЗавершение(РезультатВопроса, ДопПараметры, "");
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ПолучитьКарточкуНоменклатуры(Номенклатура, ПулКарточекНоменклатуры, ДокументОснование)
	
	УчетПоКарточкамНоменклатуры 		  	= УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Номенклатура);
	
	СтрокаПула = ПулКарточекНоменклатуры.Найти(Номенклатура, "Номенклатура");
	Если СтрокаПула = Неопределено Тогда
			
		// Создаем карточку.
		СерийныйНомер		= "";
		ИнвентарныйНомер	= "";
		
		Если УчетПоКарточкамНоменклатуры = Ложь Тогда
			Карточка = УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Номенклатура);
		Иначе
			Карточка = УправлениеITОтделом8УФ.СоздатьКарточкуНоменклатуры(Номенклатура, 
				СерийныйНомер, ИнвентарныйНомер, ДокументОснование);
		КонецЕсли;
			
		Если Карточка.ВидНоменклатуры.МожетИметьШтрихкод И НЕ УправлениеITОтделом8УФ.ЕстьШтрихКод(Номенклатура) Тогда
			ТекЗапись					= РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();				
			ТекЗапись.Штрихкод         	= РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13();
			ТекЗапись.Номенклатура      = Карточка;
			ТекЗапись.ЕдиницаИзмерения 	= Номенклатура.ЕдиницаИзмерения;
			Попытка
				ТекЗапись.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
					НСтр("ru = 'Для карточки номенклатуры №%1 не удалось сформировать новый штрихкод.'"), Карточка));
			КонецПопытки;				
		КонецЕсли;
		
	Иначе
		// Возвращаем существующую.
		Карточка = СтрокаПула.КарточкаНоменклатуры;
		ПулКарточекНоменклатуры.Удалить(СтрокаПула);
	КонецЕсли;
	
	Возврат Карточка;
		
КонецФункции

&НаСервере
Процедура РассчитатьСуммуВСтрокеТабличнойЧастиНаСервере(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Итоговая сумма в документе.
	Объект.СуммаДокумента = РассчитатьСуммуДокумента();
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

#Область УчетОстатковКонтрагентов

//@skip-warning
&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
			
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикНачалоВыбора(ЭтаФорма, Объект.Организация, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, 
		Ожидание, СтандартнаяОбработка)
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикАвтоПодбор(ЭтаФорма, 
				"Организация",
				Текст, 
				ДанныеВыбора,
				Ожидание,
				СтандартнаяОбработка);
				
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Очистка(Элемент, СтандартнаяОбработка)	
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбора(ЭтаФорма, 
				"Организация", 
				Объект.Организация,
				Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект),
				ВыбранноеЗначение,
				СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	ОрганизацияПриИзменении(Неопределено);
	
КонецПроцедуры

// Рассчитывается сумма НДС в строке табличной части.
//
&НаСервере
Процедура РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента()

#КонецОбласти

&НаКлиенте
Процедура ПослеВыбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДополнительныеПараметры.Свойство("ИдентификаторСтроки") Тогда
		НайденнаяСтрока = ДеревоНоменклатуры.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.Номенклатура = Результат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьУслугиПоКоличествуНаСервере()
	
	ИсхСумма					= 0;
	БазаРаспределенияКоличество = Объект.Номенклатура.Итог("Количество");
	ВсегоРасходы				= Объект.Услуги.Итог("Всего");	
		
	Для Каждого СтрокаНоменклатура Из Объект.Номенклатура Цикл		
		
		СтрокаНоменклатура.СуммаРасходов = ?(БазаРаспределенияКоличество <> 0, 
			Окр((ВсегоРасходы - ИсхСумма) * СтрокаНоменклатура.Количество / БазаРаспределенияКоличество, 2, 1), 0);
			
		БазаРаспределенияКоличество = БазаРаспределенияКоличество - СтрокаНоменклатура.Количество;
		ИсхСумма = ИсхСумма + СтрокаНоменклатура.СуммаРасходов;
		
	КонецЦикла;
	
	ВывестиДеревоНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьУслугиПоСуммеНаСервере()
	
	ИсхСумма				= 0;
	БазаРаспределенияСумма	= Объект.Номенклатура.Итог("Сумма");
	ВсегоРасходы			= Объект.Услуги.Итог("Всего");
	
	Для Каждого СтрокаНоменклатура Из Объект.Номенклатура Цикл	
		
		СтрокаНоменклатура.СуммаРасходов = ?(БазаРаспределенияСумма <> 0,
			Окр((ВсегоРасходы - ИсхСумма) * СтрокаНоменклатура.Сумма / БазаРаспределенияСумма, 2, 1), 0);
			
		БазаРаспределенияСумма	= БазаРаспределенияСумма - СтрокаНоменклатура.Сумма;
		ИсхСумма				= ИсхСумма + СтрокаНоменклатура.СуммаРасходов;
		
	КонецЦикла;
	
	ВывестиДеревоНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьУслугиПоКарточкамНаСервере()
	
	ИсхСумма					= 0;	
	ВсегоРасходы				= Объект.Услуги.Итог("Всего");
	
	Для Каждого Строка Из Объект.Номенклатура Цикл
		Строка.СуммаРасходов = 0;
	КонецЦикла;	
	
	ТаблицаНоменклатура = Объект.Номенклатура.Выгрузить();
	ТаблицаНоменклатура.Колонки.Добавить("Флаг");
	
	Для Каждого Строка Из ТаблицаНоменклатура Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура)
			И УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Строка.Номенклатура) 
			И ЗначениеЗаполнено(Строка.КарточкаНоменклатуры) Тогда
			
			Строка.Флаг = 1;
		Иначе
			Строка.Флаг = 0;
		КонецЕсли;	
	КонецЦикла;	
	
	БазаРаспределенияКоличество = ТаблицаНоменклатура.Итог("Флаг");
    Если БазаРаспределенияКоличество = 0 Тогда
		ВывестиДеревоНоменклатуры();
		Возврат;
	КонецЕсли;
		
	ОтборСтруктура	= Новый Структура("Флаг", 1);
	МассивСтрок		= ТаблицаНоменклатура.НайтиСтроки(ОтборСтруктура);	
	
	Отбор = ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма, "Номенклатура");	
	Для Каждого Строка Из МассивСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		МассивСтрок1 = Объект.Номенклатура.НайтиСтроки(Отбор);
		СтрокаНоменклатура = МассивСтрок1[0]; 
		
		СтрокаНоменклатура.СуммаРасходов = ?(БазаРаспределенияКоличество <> 0, 
			Окр((ВсегоРасходы - ИсхСумма) * СтрокаНоменклатура.Количество / БазаРаспределенияКоличество, 2, 1), 0);
			
		БазаРаспределенияКоличество = БазаРаспределенияКоличество - СтрокаНоменклатура.Количество;
		ИсхСумма = ИсхСумма + СтрокаНоменклатура.СуммаРасходов;		
		
	КонецЦикла;	
	
	ВывестиДеревоНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьУслугиПоКарточкамПоСуммеНаСервере()
	
	ИсхСумма					= 0;	
	ВсегоРасходы				= Объект.Услуги.Итог("Всего");
	
	Для Каждого Строка Из Объект.Номенклатура Цикл
		Строка.СуммаРасходов = 0;
	КонецЦикла;	
	
	ТаблицаНоменклатура = Объект.Номенклатура.Выгрузить();
	ТаблицаНоменклатура.Колонки.Добавить("Флаг");
	
	Для Каждого Строка Из ТаблицаНоменклатура Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура)
			И УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Строка.Номенклатура) 
			И ЗначениеЗаполнено(Строка.КарточкаНоменклатуры) 
			и Строка.Сумма > 0 Тогда
			
			Строка.Флаг = 1;
		Иначе
			Строка.Флаг = 0;
		КонецЕсли;	
	КонецЦикла;	
	
	БазаРаспределенияКоличество = ТаблицаНоменклатура.Итог("Флаг");	
    Если БазаРаспределенияКоличество = 0 Тогда
		ВывестиДеревоНоменклатуры();
		Возврат;
	КонецЕсли;
	
	ТзИтог = ТаблицаНоменклатура.Скопировать();
	ТЗИтог.Свернуть("Флаг", "Сумма");
	БазаРаспределенияСумма = ТЗИтог.Итог("Сумма");
	
	ОтборСтруктура	= Новый Структура("Флаг", 1);
	МассивСтрок		= ТаблицаНоменклатура.НайтиСтроки(ОтборСтруктура);	
	
	Отбор = ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма, "Номенклатура");	
	Для Каждого Строка Из МассивСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		МассивСтрок1 = Объект.Номенклатура.НайтиСтроки(Отбор);
		СтрокаНоменклатура = МассивСтрок1[0]; 
		
		СтрокаНоменклатура.СуммаРасходов = ?(БазаРаспределенияСумма <> 0,
			Окр((ВсегоРасходы - ИсхСумма) * СтрокаНоменклатура.Сумма / БазаРаспределенияСумма, 2, 1), 0);
			
		БазаРаспределенияСумма	= БазаРаспределенияСумма - СтрокаНоменклатура.Сумма;
		ИсхСумма				= ИсхСумма + СтрокаНоменклатура.СуммаРасходов;		
		
	КонецЦикла;	
	
	ВывестиДеревоНоменклатуры();
	
КонецПроцедуры

#КонецОбласти

