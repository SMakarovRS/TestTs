#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Функция возвращает список имен «ключевых» реквизитов.
//
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать,
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив реквизитов, редактируемых при групповой обработке.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;		
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;

	СписокКонтактов = Новый Массив;
	СписокКонтактов.Добавить(Ссылка.Контрагент);
	
	Возврат СписокКонтактов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// Устанавливает параметры загрузки.
//
// Параметры:
// 	Параметры - Структура - Структура параметров.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Интерфейс для работы с подсистемой Загрузка из файла.
//
// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   ПолноеИмяТабличнойЧасти   	- Строка - полное имя табличной части, в которую загружаются данные.
//   АдресЗагружаемыхДанных    	- Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число 	- порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления 	- Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей 	- ТаблицаЗначений - список неоднозначных значений, для которых 
//										  в ИБ имеется несколько подходящих вариантов.
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//   ДополнительныеПараметры	- структура - дополнительные параметры.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Товары =  ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляСопоставления.Артикул,
		|	ДанныеДляСопоставления.Номенклатура,
		|	ДанныеДляСопоставления.Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ
		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка,
		|	СпрНоменклатура.Артикул,
		|	ДанныеДляСопоставления.Идентификатор
		|ПОМЕСТИТЬ СопоставленнаяНоменклатураПоШтрихкоду
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (СпрНоменклатура.Артикул ПОДОБНО ДанныеДляСопоставления.Артикул)
		|ГДЕ
		|	НЕ СпрНоменклатура.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляСопоставления.Номенклатура,
		|	ДанныеДляСопоставления.Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставленияПоНаименованию
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
		|		ПО (ДанныеДляСопоставления.Номенклатура ПОДОБНО СопоставленнаяНоменклатураПоШтрихкоду.Ссылка.Наименование)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка,
		|	ДанныеДляСопоставленияПоНаименованию.Идентификатор,
		|	ДанныеДляСопоставленияПоНаименованию.Идентификатор КАК Количество
		|ИЗ
		|	ДанныеДляСопоставленияПоНаименованию КАК ДанныеДляСопоставленияПоНаименованию
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (СпрНоменклатура.Наименование ПОДОБНО ДанныеДляСопоставленияПоНаименованию.Номенклатура)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(СопоставленнаяНоменклатураПоШтрихкоду.Ссылка),
		|	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор,
		|	СУММА(СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор)
		|ИЗ
		|	СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
		|
		|СГРУППИРОВАТЬ ПО
		|	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор";

	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = РезультатыЗапросов[3].Выгрузить();
	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл 
		
		Товар 				= Товары.Добавить();
		Товар.Идентификатор = СтрокаТаблицы.Идентификатор;
		Товар.Количество 	= СтрокаТаблицы.Количество;
		Товар.Цена 			= СтрокаТаблицы.Цена;
		
		СтрокаНоменклатура 	= ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура <> Неопределено Тогда 
			Если СтрокаНоменклатура.Количество >= 1 Тогда 
				Товар.Номенклатура  = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда 
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Результат = Товары.СкопироватьКолонки();
	//Для Каждого СтрокаТаблицы Из Товары Цикл
	//	
	//	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
	//		Товар = Результат.Добавить();
	//		ЗаполнитьЗначенияСвойств(Товар, СтрокаТаблицы);
	//	ИначеЕсли УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТаблицы.Номенклатура) = Ложь Тогда
	//		Товар = Результат.Добавить();
	//		ЗаполнитьЗначенияСвойств(Товар, СтрокаТаблицы);			
	//	Иначе
	//		Если СтрокаТаблицы.Количество = 1 Тогда
	//			Товар = Результат.Добавить();
	//			ЗаполнитьЗначенияСвойств(Товар, СтрокаТаблицы);
	//		Иначе
	//			Для Индекс = 1 По Цел(СтрокаТаблицы.Количество) Цикл
	//				Товар 				= Результат.Добавить();
	//				ЗаполнитьЗначенияСвойств(Товар, СтрокаТаблицы);
	//				Товар.Количество 	= 1;
	//				Товар.Сумма		 	= Товар.Цена;
	//			КонецЦикла;
	//		КонецЕсли;			
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - имя колонки, в который возникла неоднозначность 
//  СписокНеоднозначностей    - ТаблицаЗначений - Список для заполнения с неоднозначными данными
//     * Идентификатор        - Число  - Уникальный идентификатор строки
//     * Колонка              - Строка -  Имя колонки с возникшей неоднозначностью 
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры	  - структура - дополнительные параметры.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт 
	
	Если ИмяКолонки = "Номенклатура" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);  
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	РеквизитПоложениеСтатьиДоходовРасходов 	= Реквизиты.Найти("Поступление.ПоложениеСтатьиДоходовРасходов");
	Реквизиты.Удалить(РеквизитПоложениеСтатьиДоходовРасходов);
	РеквизитПоложениеЗаказаПоставщику 		= Реквизиты.Найти("Поступление.ПоложениеЗаказаПоставщику");
	Реквизиты.Удалить(РеквизитПоложениеЗаказаПоставщику);
	РеквизитПоложениеПодразделения	  		= Реквизиты.Найти("Поступление.ПоложениеПодразделения");
	Реквизиты.Удалить(РеквизитПоложениеПодразделения);
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт	
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Контрагент", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Контрагент");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;
	СоответствиеИзменениеОбъекта.Вставить("ПоступлениеИзменениеОбъектаПроведение", НСтр("ru = 'Проведение'"));
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("ПоступлениеРасчетМетрикЗаписьДокумента", НСтр("ru = 'Запись документа'"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура, Знач Источник) Экспорт
	
	Результат = Ложь;
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ИмяСобытия = "ПоступлениеИзменениеОбъектаПроведение" Тогда
		
		Если Структура.ЭтоНовый И Источник.Проведен Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Проведен <> ИсточникПередЗаписью.Проведен И ИсточникПередЗаписью.Проведен = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.ВариантыОтчетов
// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();		
		КомандаОтчет.Менеджер      = Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Взаиморасчеты с контрагентами'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность      = "Обычное";
		КомандаОтчет.КлючВарианта  = "Основной";		
		
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиНаСкладах) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();		
		КомандаОтчет.Менеджер      = Метаданные.Отчеты.ОстаткиНаСкладах.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Остатки на складах'");
		КомандаОтчет.МножественныйВыбор = Ложь;
		КомандаОтчет.Важность      = "Обычное";
		КомандаОтчет.КлючВарианта  = "Основной";		
		
	КонецЕсли;
			
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
		
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция получает данные для печати этикеток
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеНоменклатура.Ссылка.Организация,
		|	ПоступлениеНоменклатура.Ссылка.МестоХранения,
		|	ПоступлениеНоменклатура.Номенклатура КАК Номенклатура,
		|	ПоступлениеНоменклатура.КарточкаНоменклатуры,
		|	ПоступлениеНоменклатура.Количество КАК КоличествоЭтикеток,
		|	ПоступлениеНоменклатура.Сумма,
		|	ШтрихкодыНоменклатуры.Штрихкод,
		|	ОтветственныеСотрудникиСрезПоследних.Сотрудник КАК ОтветственныйСотрудник,
		|	ОтветственныеСотрудникиИТОтделаСрезПоследних.Сотрудник КАК ОтветственныйСотрудникITОтдела,
		|	ПоступлениеНоменклатура.Количество
		|ИЗ
		|	Документ.Поступление.Номенклатура КАК ПоступлениеНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО (ПоступлениеНоменклатура.КарточкаНоменклатуры = ШтрихкодыНоменклатуры.Номенклатура
		|				ИЛИ ПоступлениеНоменклатура.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудники.СрезПоследних КАК ОтветственныеСотрудникиСрезПоследних
		|		ПО ПоступлениеНоменклатура.Ссылка.МестоХранения = ОтветственныеСотрудникиСрезПоследних.МестоХранения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудникиИТОтдела.СрезПоследних КАК ОтветственныеСотрудникиИТОтделаСрезПоследних
		|		ПО ПоступлениеНоменклатура.Ссылка.МестоХранения = ОтветственныеСотрудникиИТОтделаСрезПоследних.МестоХранения
		|ГДЕ
		|	ПоступлениеНоменклатура.Ссылка В(&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоступлениеНоменклатура.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Поступление.Организация,
		|	Поступление.МестоХранения
		|ИЗ
		|	Документ.Поступление КАК Поступление
		|ГДЕ
		|	Поступление.Ссылка В(&МассивДокументов)";
		
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = УправлениеITОтделом8УФ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = УправлениеITОтделом8УФ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "МестоХранения").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Штрихкоды", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция печати документа
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_Поступление";
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(ТекущийДокумент);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Поступление.Номер,
			|	Поступление.Дата КАК ДатаДокумента,
			|	Поступление.Комментарий,
			|	Поступление.Организация,
			|	Поступление.Основание,
			|	Поступление.Контрагент,
			|	Поступление.Договор,
			|	Поступление.Подразделение,
			|	Поступление.СуммаДокумента,
			|	Поступление.Бюджет,
			|	Поступление.ПериодБюджета,
			|	Поступление.СтатьяДоходовРасходов,
			|	Поступление.МестоХранения,
			|	Поступление.Ссылка,
			|	Поступление.НалогообложениеНДС,
			|	Поступление.СуммаВключаетНДС,
			|	Поступление.НДСВключатьВСтоимость,
			|	Поступление.Курс,
			|	Поступление.Кратность,
			|	Поступление.ВалютаДокумента,
			|	Поступление.Автор,
			|	Поступление.Номенклатура.(
			|		Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Номенклатура,
			|		Количество,
			|		Цена,
			|		Сумма,
			|		ЕдиницаИзмерения,
			|		СтавкаНДС,
			|		СуммаНДС,
			|		Всего,
			|		СтатьяДоходовРасходов,
			|		Описание,
			|		Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
			|		КарточкаНоменклатуры.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|		КарточкаНоменклатуры.СерийныйНомер КАК СерийныйНомер
			|	)
			|ИЗ
			|	Документ.Поступление КАК Поступление
			|ГДЕ
			|	Поступление.Ссылка = &ТекущийДокумент
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ВыборкаСтрок = Шапка.Номенклатура.Выбрать();
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		МОЛ					= УправлениеITОтделом8УФ.ПолучитьОтветственногоСотрудникаМестаХранения(Шапка.ДатаДокумента, Шапка.МестоХранения);
		
		Если ИмяМакета = "АктУстановки"Тогда
				
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Поступление.ПФ_MXL_МакетАктУстановки");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Поступление_АктУстановки";
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", СтрШаблон(НСтр("ru = 'Акт установки № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МестоХранения", Шапка.МестоХранения));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛ",			МОЛ));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПолноеНаименованиеОрганизации", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаИВремяПечати", ТекущаяДатаСеанса()));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СамДокумент", ТекущийДокумент));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк
			ВыборкаСтрокНоменклатуры                = Шапка.Номенклатура.Выбрать();
			ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
			Сумма									= 0;
			Количество								= ВыборкаСтрокНоменклатуры.Количество();
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				Сумма                         = Сумма + ВыборкаСтрокНоменклатуры.Сумма;
			КонецЦикла;
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво",		Количество));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогСумма",		Сумма));
			
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		ИначеЕсли ИмяМакета = "АктВводаВЭксплуатацию" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Поступление.ПФ_MXL_МакетАктВводаВЭксплуатацию");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Поступление_АктВводаВЭксплуатацию";
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", СтрШаблон(НСтр("ru = 'Акт ввода в эксплуатацию компьютерной и орг. техники № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МестоХранения", Шапка.МестоХранения));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛ",		?(ЗначениеЗаполнено(МОЛ), МОЛ, "__________________________")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПолноеНаименованиеОрганизации", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаИВремяПечати", ТекущаяДатаСеанса()));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СамДокумент", ТекущийДокумент));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк.
			ВыборкаСтрокНоменклатуры                = Шапка.Номенклатура.Выбрать();
			ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
			Количество								= ВыборкаСтрокНоменклатуры.Количество();
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво",		Количество));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛ",			МОЛ));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
						
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Функция формирует табличный документ унифицированной формы М-4.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ4(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_Поступление_М4";
		
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М4");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов"  , МассивОбъектов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поступление.Ссылка КАК Ссылка,
		|	Поступление.ВерсияДанных,
		|	Поступление.ПометкаУдаления,
		|	Поступление.Номер,
		|	Поступление.Дата,
		|	Поступление.Проведен,
		|	Поступление.Организация,
		|	Поступление.Контрагент,
		|	Поступление.Договор,
		|	Поступление.МестоХранения,
		|	Поступление.Автор,
		|	Поступление.ДатаСоздания,
		|	Поступление.АвторКорректировки,
		|	Поступление.ДатаКорректировки,
		|	Поступление.СуммаДокумента,
		|	Поступление.СтатьяДоходовРасходов,
		|	Поступление.Основание,
		|	Поступление.Комментарий,
		|	Поступление.Бюджет,
		|	Поступление.ПериодБюджета,
		|	Поступление.Подразделение,
		|	Поступление.ВалютаДокумента,
		|	Поступление.НалогообложениеНДС,
		|	Поступление.СуммаВключаетНДС,
		|	Поступление.НДСВключатьВСтоимость,
		|	Поступление.Курс,
		|	Поступление.Кратность,
		|	Поступление.ПоложениеСтатьиДоходовРасходов,
		|	Поступление.ПоложениеЗаказаПоставщику,
		|	Поступление.ЗаказПоставщику,
		|	Поступление.НомерВходящегоДокумента КАК НомерСопроводительногоДокумента,
		|	Поступление.ДатаВходящегоДокумента,
		|	Поступление.УчитыватьТолькоКомплекты,
		|	Поступление.Контрагент.Код КАК ПоставщикКод,
		|	""60.01"" КАК СубСчет,
		|	Поступление.Номенклатура.(
		|		Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура,
		|		Партия,
		|		КарточкаНоменклатуры,
		|		Количество КАК КоличествоПринято,
		|		Цена,
		|		Сумма,
		|		Описание,
		|		СтатьяДоходовРасходов,
		|		СтавкаНДС,
		|		СуммаНДС,
		|		ЕдиницаИзмерения,
		|		Всего,
		|		ЗаказПоставщику,
		|		Комплект,
		|		Номенклатура.Наименование КАК ТоварНаименование,
		|		Номенклатура.Код КАК ТоварКод,
		|		ЕдиницаИзмерения.Код,
		|		ЕдиницаИзмерения.Наименование,
		|		Подразделение
		|	),
		|	Поступление.ПоложениеПодразделения
		|ИЗ
		|	Документ.Поступление КАК Поступление
		|ГДЕ
		|	Поступление.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
		
	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		ОбластьМакетаШапка              = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
		ОбластьМакетаЗаголовокТаблицы   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакетаСтрока             = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаПодвалСтрок        = Макет.ПолучитьОбласть("ПодвалСтрок");
		ОбластьМакетаИтого              = Макет.ПолучитьОбласть("Итого");
		ОбластьМакетаПодвал             = Макет.ПолучитьОбласть("Подвал");
		
		// Выводим общие реквизиты шапки
		СведенияОПокупателе = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);

		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ОбластьМакетаШапка.Параметры.Заполнить(Новый Структура("ПредставлениеОрганизации", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОПокупателе)));
		ОбластьМакетаШапка.Параметры.Заполнить(Новый Структура("ОрганизацияПоОКПО",        СведенияОПокупателе.КодПоОКПО));
		ОбластьМакетаШапка.Параметры.Заполнить(Новый Структура("НомерДокумента",           ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина)));
		ЗаполнитьЗначенияСвойств(ОбластьМакетаШапка.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);

		// Выводим заголовок документа
		ОбластьМакетаЗаголовокДокумента.Параметры.Заполнить(Шапка);
		ОбластьМакетаЗаголовокДокумента.Параметры.Заполнить(Новый Структура("ДатаСоставления", Шапка.Дата));
		ПредставлениеКонтрагента = УправлениеITОтделом8УФ.ОписаниеОрганизации(
			УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование");
		ОбластьМакетаЗаголовокДокумента.Параметры.Заполнить(Новый Структура("ПоставщикНаименование", ПредставлениеКонтрагента));
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокДокумента);
		
		// Выводим заголовок таблицы
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

		// Инициализация итогов в документе
		ИтогоКоличествоПринято = 0;
		ИтогоСуммаБезНДС       = 0;
		ИтогоСуммаНДС          = 0;
		ИтогоВсегоСНДС         = 0;
		Ном                    = 0;

		// Инициализация счетчиков страниц и строк
		НомерСтраницы   = 1;
		НомерСтроки     = 0;
		
		ВыборкаСтрок                = Шапка.Номенклатура.Выбрать();
		КоличествоСтрок = ВыборкаСтрок.Количество();
		Пока ВыборкаСтрок.Следующий() Цикл
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
			
			Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
			ВсегоСНДС = (?(ЗначениеЗаполнено(ВыборкаСтрок.Сумма), ВыборкаСтрок.Сумма, 0)
					  + ?(Шапка.СуммаВключаетНДС, 0, ?(ЗначениеЗаполнено(ВыборкаСтрок.СуммаНДС), ВыборкаСтрок.СуммаНДС, 0)));

			КоличествоПринято = ?(ЗначениеЗаполнено(ВыборкаСтрок.КоличествоПринято), ВыборкаСтрок.КоличествоПринято, 0);
			СуммаНДС          = ?(ЗначениеЗаполнено(ВыборкаСтрок.СуммаНДС), ВыборкаСтрок.СуммаНДС, 0);
			Цена              = (ВсегоСНДС - СуммаНДС) / ?(КоличествоПринято = 0, 1, КоличествоПринято);

			ОбластьМакетаСтрока.Параметры.Заполнить(Новый Структура("КоличествоПринято", КоличествоПринято));
			ОбластьМакетаСтрока.Параметры.Заполнить(Новый Структура("ВсегоСНДС",         ВсегоСНДС));
			ОбластьМакетаСтрока.Параметры.Заполнить(Новый Структура("СуммаБезНДС",       ВсегоСНДС - СуммаНДС));
			ОбластьМакетаСтрока.Параметры.Заполнить(Новый Структура("СуммаНДС",          СуммаНДС));
			ОбластьМакетаСтрока.Параметры.Заполнить(Новый Структура("Цена",              Цена));
			ОбластьМакетаСтрока.Параметры.Заполнить(Новый Структура("ТоварНаименование", СокрЛП(ВыборкаСтрок.ТоварНаименование)));

			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);  // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			Иначе                                              // иначе - только подвал строк
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалСтрок);
			КонецЕсли;

			Если НЕ УправлениеITОтделом8УФ.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда

				ТабличныйДокумент.Вывести(ОбластьМакетаПодвалСтрок);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы));
				
				ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);

			ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
			ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС - СуммаНДС;
			ИтогоСуммаНДС          = ИтогоСуммаНДС          + СуммаНДС;
			ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;
			
		КонецЦикла;

		// Выводим итоги по документу
		ОбластьМакетаИтого.Параметры.Заполнить(Новый Структура("ИтогоКоличествоПринято", ИтогоКоличествоПринято));
		ОбластьМакетаИтого.Параметры.Заполнить(Новый Структура("ИтогоСуммаБезНДС",       ИтогоСуммаБезНДС));
		ОбластьМакетаИтого.Параметры.Заполнить(Новый Структура("ИтогоСуммаНДС",          ИтогоСуммаНДС));
		ОбластьМакетаИтого.Параметры.Заполнить(Новый Структура("ИтогоВсегоСНДС",         ИтогоВсегоСНДС));
		ТабличныйДокумент.Вывести(ОбластьМакетаИтого);

		// Выводим итоги по документу
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		ЗаполнитьЗначенияСвойств(ОбластьМакетаПодвал.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);

		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции // ПечатьМ4()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктУстановки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктУстановки", СтрШаблон(НСтр("ru = 'Акт установки'"), ), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктУстановки"));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктВводаВЭксплуатацию") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктВводаВЭксплуатацию", НСтр("ru = 'Акт ввода в эксплуатацию'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктВводаВЭксплуатацию"));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М4") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М4", НСтр("ru = 'М-4 (Приходный ордер)'"), ПечатьМ4(МассивОбъектов, ОбъектыПечати),, "ОбщийМакет.ПФ_MXL_М4");
	КонецЕсли;
		
КонецПроцедуры

// Функция получает данные для печати.
//
Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Возврат Новый Структура("Данные, Макеты",
							ДанныеПоВсемОбъектам,
							Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
											ОписаниеОбластей,
											ТипыМакетов,
											ДвоичныеДанныеМакетов));
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт	
	
	// Акт ввода в эксплуатацию
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктВводаВЭксплуатацию";
	КомандаПечати.Представление = НСтр("ru = 'Акт ввода в эксплуатацию'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 4;
	
	// Акт установки
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктУстановки";
	КомандаПечати.Представление = НСтр("ru = 'Акт установки'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 5;
	
	// М-4 (Приходный ордер)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М4";
	КомандаПечати.Представление = НСтр("ru = 'М-4 (Приходный ордер)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 6;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.ВидДокумента = Перечисления.ВидДокументаПоступления.ПоступлениеОтПоставщика Тогда
		НазваниеДокумента = НСтр("ru = 'Поступление'");
	ИначеЕсли Данные.ВидДокумента = Перечисления.ВидДокументаПоступления.ПоРезультатамИнвентаризации Тогда
		НазваниеДокумента = НСтр("ru = 'Оприходование излишков'");
	Иначе
		НазваниеДокумента = ?(ЗначениеЗаполнено(Данные.ВидДокумента), Строка(Данные.ВидДокумента), 
			НСтр("ru = 'Поступление'")); 
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"), НазваниеДокумента, Данные.Номер, Данные.Дата);
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("ВидДокумента");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли