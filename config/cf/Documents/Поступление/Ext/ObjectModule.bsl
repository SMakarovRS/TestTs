#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СписокОшибок = Неопределено;
	
	// Проверка на ошибки.
	Если Номенклатура.Количество() > 0 Тогда
		Для Каждого СтрокаНоменклатура Из Номенклатура Цикл 
			Если Не ЗначениеЗаполнено(СтрокаНоменклатура.ЕдиницаИзмерения) Тогда 
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
					СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не заполнена единица измерения.'"), 
					СтрокаНоменклатура.Номенклатура), "");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Накладная.Количество() > 0 Тогда
		Для Каждого СтрокаНакладная Из Накладная Цикл 
			Если Не ЗначениеЗаполнено(СтрокаНакладная.ЕдиницаИзмерения) Тогда 
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
					СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не заполнена единица измерения.'"), 
					СтрокаНакладная.Номенклатура), "");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок, Отказ);
	
	СуммаДокумента = Номенклатура.Итог("Всего") + Услуги.Итог("Всего");
	
	Если ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для Каждого СтрокаТабличнойЧасти Из Номенклатура Цикл
			СтрокаТабличнойЧасти.ЗаказПоставщику = ЗаказПоставщику;
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из Накладная Цикл
			СтрокаТабличнойЧасти.ЗаказПоставщику = ЗаказПоставщику;
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
			СтрокаТабличнойЧасти.ЗаказПоставщику = ЗаказПоставщику;
		КонецЦикла;		
	Иначе
		Если Номенклатура.Количество() > 0 Тогда
			ЗаказПоставщику = Номенклатура[0].ЗаказПоставщику;
		КонецЕсли;
		Если Накладная.Количество() > 0 Тогда
			ЗаказПоставщику = Накладная[0].ЗаказПоставщику;
		КонецЕсли;
	КонецЕсли;	
	
	Если ПоложениеСтатьиДоходовРасходов = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Номенклатура Цикл
			СтрокаТабличнойЧасти.СтатьяДоходовРасходов = СтатьяДоходовРасходов;
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Накладная Цикл
			СтрокаТабличнойЧасти.СтатьяДоходовРасходов = СтатьяДоходовРасходов;
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
			СтрокаТабличнойЧасти.СтатьяДоходовРасходов = СтатьяДоходовРасходов;
		КонецЦикла;
		
	Иначе
		Если Номенклатура.Количество() > 0 Тогда
			СтатьяДоходовРасходов = Номенклатура[0].СтатьяДоходовРасходов;
		КонецЕсли;
		Если Накладная.Количество() > 0 Тогда
			СтатьяДоходовРасходов = Накладная[0].СтатьяДоходовРасходов;
		КонецЕсли;		
	КонецЕсли;	
	
	Если (ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке) 
		ИЛИ (НЕ ЗначениеЗаполнено(ПоложениеПодразделения)) Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Номенклатура Цикл
			СтрокаТабличнойЧасти.Подразделение = Подразделение;
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Накладная Цикл
			СтрокаТабличнойЧасти.Подразделение = Подразделение;
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
			СтрокаТабличнойЧасти.Подразделение = Подразделение;
		КонецЦикла;
		
	Иначе
		
		Если Номенклатура.Количество() > 0 Тогда
			Подразделение = Номенклатура[0].Подразделение;
		КонецЕсли;
		
		Если Накладная.Количество() > 0 Тогда
			Подразделение = Накладная[0].Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоложениеЗаказаКлиента = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для Каждого СтрокаТабличнойЧасти Из Номенклатура Цикл
			СтрокаТабличнойЧасти.ЗаказКлиента = ЗаказКлиента;
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из Накладная Цикл
			СтрокаТабличнойЧасти.ЗаказКлиента = ЗаказКлиента;
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
			СтрокаТабличнойЧасти.ЗаказКлиента = ЗаказКлиента;
		КонецЦикла;		
	Иначе
		Если Номенклатура.Количество() > 0 Тогда
			ЗаказКлиента = Номенклатура[0].ЗаказКлиента;
		КонецЕсли;
		Если Накладная.Количество() > 0 Тогда
			ЗаказКлиента = Накладная[0].ЗаказКлиента;
		КонецЕсли;
	КонецЕсли;
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Для всех карточек, которые есть в документе заполним реквизит ДокументПоступления.
	// А так же удалим где он уже не используется.
	МассивКарточек = Номенклатура.ВыгрузитьКолонку("КарточкаНоменклатуры");
	
	// Удалим из карточек, в которых используется данное поступление	
	Если НЕ ЭтоНовый() Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КарточкиНоменклатуры.Ссылка КАК КарточкаНоменклатуры
			|ИЗ
			|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
			|ГДЕ
			|	КарточкиНоменклатуры.ДокументПоступления = &ДокументПоступления";

		Запрос.УстановитьПараметр("ДокументПоступления", Ссылка);
		
		мДокументыПоступлениеПустаяСсылка = Документы.Поступление.ПустаяСсылка();
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КарточкаНоменклатуры = Выборка.КарточкаНоменклатуры;
			
			Если ПометкаУдаления Тогда
				ОбъектКарточка = КарточкаНоменклатуры.ПолучитьОбъект();
				ОбъектКарточка.ДокументПоступления = мДокументыПоступлениеПустаяСсылка;
				ОбъектКарточка.Записать();				
			Иначе
				Если МассивКарточек.Найти(КарточкаНоменклатуры) = Неопределено Тогда
					// Удаляем из карточки данные о документе поступления.
					ОбъектКарточка = КарточкаНоменклатуры.ПолучитьОбъект();
					ОбъектКарточка.ДокументПоступления = мДокументыПоступлениеПустаяСсылка;
					ОбъектКарточка.Записать();
				КонецЕсли;				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда	
		Возврат;		
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("ВидДокумента");
	
	// Проверка на ошибки.
	СписокОшибок = ПроверитьДокументПередПроведением();
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок, Отказ);	
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	СЛС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);	
	
	// Подготовка наборов записей.
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	СЛС.ОтразитьДвиженияВРазделахУчета(Ссылка, ДополнительныеСвойства, Движения, Отказ);		
	
	// Запись наборов записей.
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль.
	СЛС.ВыполнитьКонтрольОтрицательныхОстатков(Ссылка, ДополнительныеСвойства, Отказ);	
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа.
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль.
	СЛС.ВыполнитьКонтрольОтрицательныхОстатков(Ссылка, ДополнительныеСвойства, Отказ, Истина);	

КонецПроцедуры

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		#Область ЗаказПоставщику
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Дата,Номер,Проведен");
		ПоложениеЗаказаПоставщику	= Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		ПоложениеЗаказаКлиента		= Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		ВидДокумента	 = Перечисления.ВидДокументаПоступления.ПоступлениеОтПоставщика;
		ЗаказПоставщику  = ДанныеЗаполнения;
		ВалютаДокумента  = ДанныеЗаполнения.ВалютаДокумента;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		Индекс = 1;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
			|	ЗаказыПоставщикамОстатки.Подразделение,
			|	ЗаказыПоставщикамОстатки.КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
			|			&ДатаКон,
			|			Организация = &Организация
			|				И ЗаказПоставщику = &ЗаказПоставщику) КАК ЗаказыПоставщикамОстатки
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура";
		
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
		
		ТЗЗаказы = Запрос.Выполнить().Выгрузить();
		
		Если ДанныеЗаполнения.Основания.Количество() > 0 Тогда 
			Для Каждого Строки Из ДанныеЗаполнения.Основания Цикл
				Если ТипЗнч(Строки.Основание) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					ЗаказКлиента = Строки.Основание;				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Строки Из ДанныеЗаполнения.Номенклатура Цикл
			
			Если НЕ ЗначениеЗаполнено(Строки.Номенклатура) Тогда
				Продолжить;				
			КонецЕсли;
			
			Если Строки.Номенклатура.ВидНоменклатуры.ТипВидаНоменклатуры = Перечисления.ТипыВидовНоменклатуры.Услуга Тогда
				
				// Услуги.
				НоваяСтрока = Услуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
				НоваяСтрока.ЗаказПоставщику	= ЗаказПоставщику;
				НоваяСтрока.ЗаказКлиента	= ЗаказКлиента;
				
			Иначе				
								
				// Удаляем строки, где количество = 0.
				Структура = Новый Структура;
				Структура.Вставить("КоличествоОстаток", 0);
				Массив = ТЗЗаказы.НайтиСтроки(Структура);
				Для Каждого Эл Из Массив Цикл
					ТЗЗаказы.Удалить(Эл);
				КонецЦикла;
				
				КоличествоИзЗаказа = 0;
				Структура = Новый Структура;
				Структура.Вставить("Номенклатура", Строки.Номенклатура);
				Массив = ТЗЗаказы.НайтиСтроки(Структура);
				Для Каждого Эл Из Массив Цикл
					КоличествоИзЗаказа = КоличествоИзЗаказа + Эл.КоличествоОстаток;
				КонецЦикла;
				// Не нашли остатков, значит было оформлено ранее документом Поступление.
				Если КоличествоИзЗаказа = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(Строки.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
					Коэффициент = 1;
					КоличествоК = КоличествоИзЗаказа;						
				Иначе
					Коэффициент = Строки.ЕдиницаИзмерения.Коэффициент;
					КоличествоК = КоличествоИзЗаказа * Коэффициент;
				КонецЕсли;
				
				НоваяСтрока						= Накладная.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки,,"Количество,ЕдиницаИзмерения");
				НоваяСтрока.Количество			= КоличествоИзЗаказа;
				НоваяСтрока.ЕдиницаИзмерения	= Строки.Номенклатура.ЕдиницаИзмерения;
				НоваяСтрока.Спецификация		= Строки.Спецификация;
				НоваяСтрока.ЗаказПоставщику		= ЗаказПоставщику;
				НоваяСтрока.ЗаказКлиента		= ЗаказКлиента;
				// Цена
				НоваяСтрока.Цена = НоваяСтрока.Цена / Коэффициент;
				
				// Сумма.
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				
				// Сумма НДС.
				СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
				
				НоваяСтрока.СуммаНДС = ?(ДанныеЗаполнения.СуммаВключаетНДС, 
				НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
				НоваяСтрока.Сумма * СтавкаНДС / 100);
				
				// Всего.
				НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(ДанныеЗаполнения.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);										
								
				Индекс = Индекс + 1;
								
				// Изменяем количество в строках.
				Структура = Новый Структура;
				Структура.Вставить("Номенклатура", Строки.Номенклатура);
				Массив = ТЗЗаказы.НайтиСтроки(Структура);
				Для Каждого Эл Из Массив Цикл
					Если КоличествоИзЗаказа <= Эл.КоличествоОстаток Тогда
						Эл.КоличествоОстаток = Эл.КоличествоОстаток - КоличествоИзЗаказа;
						КоличествоИзЗаказа = 0;
						Прервать;
					Иначе
						КоличествоИзЗаказа = КоличествоИзЗаказа - Эл.КоличествоОстаток;
						Эл.КоличествоОстаток = 0;
					КонецЕсли;					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		#КонецОбласти
				
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Продажа") Тогда
		
		Если УправлениеITОтделом8УФПовтИсп.ВедетсяСкладскойУчетКлиентов() Тогда
			
			ВидДокумента = Перечисления.ВидДокументаПоступления.ПоступлениеОтПоставщика;
			
			// В организации - мы, в контрагентах клиент.
			// При поступлении эти реквизиты меняются местами.		
			Организация = ДанныеЗаполнения.Контрагент;
			Контрагент	= Справочники.Контрагенты.ПустаяСсылка();		
			Запрос 		= Новый Запрос();
					
			// Ищем контрагента по организации.
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				
				Запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	Контрагенты.Ссылка КАК Контрагент
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	Контрагенты.ИНН = &ИНН
					|	И Контрагенты.КПП = &КПП";
				Запрос.УстановитьПараметр("ИНН", ДанныеЗаполнения.Организация.ИНН);
				Запрос.УстановитьПараметр("КПП", ДанныеЗаполнения.Организация.КПП);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					Контрагент = Выборка.Контрагент;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Не найден контрагент-организация.
			Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
				
				ВызватьИсключение НСтр(
					"ru = 'При продаже реквизиты ""Организация"" и ""Контрагент"" меняются местами. 
					|Не найден контрагент в справочнике ""Контрагенты"" с ИНН и КПП, как в реквизите ""Организация""'");
				
			КонецЕсли;
			
			// По контрагенту не ведется учет остатков.
			Если Контрагент.УчетОстатков = Ложь Тогда
				
				ВызватьИсключение СтрШаблон(НСтр(
					"ru = 'По контрагенту ""%1"" не ведется учет остатков 
					|(для установки откройте контрагента и установите флаг ""Учет остатков"").'"), Контрагент);
				
			КонецЕсли;
			
		Иначе
			ВидДокумента = Перечисления.ВидДокументаПоступления.ВозвратОтПокупателя;
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, "Организация,Контрагент,Договор");
		КонецЕсли;
				
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, 
			"ПоложениеСтатьиДоходовРасходов, Кратность, Курс, НДСВключатьВСтоимость, СуммаВключаетНДС,"
			+ " СуммаДокумента, СтатьяДоходовРасходов, Подразделение, ВалютаДокумента, НалогообложениеНДС");
		
		ДатаВходящегоДокумента 	= ДанныеЗаполнения.Дата;
		НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеЗаполнения.Номер, Истина, Истина);
		
		Для Каждого Строки Из ДанныеЗаполнения.Номенклатура Цикл
			
			НоваяСтрока = Номенклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки,,"КарточкаНоменклатуры,Партия");
			
		КонецЦикла;
		
		Для Каждого Строки Из ДанныеЗаполнения.Услуги Цикл
			
			НоваяСтрока = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Задание") Тогда
		
		Организация			= ДанныеЗаполнения.Организация;
		МестоХранения		= ДанныеЗаполнения.МестоХранения;
		Комментарий			= ДанныеЗаполнения.Тема;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Источник")
		И ТипЗнч(ДанныеЗаполнения.Источник) = Тип("ДокументСсылка.Инвентаризация") Тогда
		
		ИнвентаризацияСсылка= ДанныеЗаполнения.Источник;
		МестоХраненияСсылка	= ДанныеЗаполнения.МестоХранения;
		Организация			= ИнвентаризацияСсылка.Организация;
		МестоХранения		= МестоХраненияСсылка;
		ВидДокумента		= Перечисления.ВидДокументаПоступления.ПоРезультатамИнвентаризации;
		Основание			= ИнвентаризацияСсылка;
		Комиссия			= ИнвентаризацияСсылка.Комиссия;
		
		Запрос = Новый Запрос;
		// Только те позиции, которые не были оприходованы ранее.				
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеНоменклатура.Номенклатура КАК Номенклатура,
		|	ПоступлениеНоменклатура.КарточкаНоменклатуры КАК КарточкаНоменклатуры,
		|	ПоступлениеНоменклатура.Ссылка.МестоХранения КАК МестоХранения,
		|	СУММА(ПоступлениеНоменклатура.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_Поступления
		|ИЗ
		|	Документ.Поступление.Номенклатура КАК ПоступлениеНоменклатура
		|ГДЕ
		|	ПоступлениеНоменклатура.Ссылка.Проведен
		|	И ПоступлениеНоменклатура.Ссылка.Основание = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеНоменклатура.Номенклатура,
		|	ПоступлениеНоменклатура.КарточкаНоменклатуры,
		|	ПоступлениеНоменклатура.Ссылка.МестоХранения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ИнвентаризацияНоменклатура.Отклонение - ВЫБОР
		|			КОГДА ВТ_Поступления.Количество ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ ВТ_Поступления.Количество
		|		КОНЕЦ) КАК Количество,
		|	ИнвентаризацияНоменклатура.Номенклатура КАК Номенклатура,
		|	ИнвентаризацияНоменклатура.Комплект КАК Комплект,
		|	ИнвентаризацияНоменклатура.Партия КАК Партия,
		|	ИнвентаризацияНоменклатура.КарточкаНоменклатуры КАК КарточкаНоменклатуры,
		|	ИнвентаризацияНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ИнвентаризацияНоменклатура.Отклонение - ВЫБОР
		|			КОГДА ВТ_Поступления.Количество ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ ВТ_Поступления.Количество
		|		КОНЕЦ) * ИнвентаризацияНоменклатура.Цена КАК Сумма,
		|	ИнвентаризацияНоменклатура.Цена КАК Цена
		|ИЗ
		|	Документ.Инвентаризация.Номенклатура КАК ИнвентаризацияНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Поступления КАК ВТ_Поступления
		|		ПО ИнвентаризацияНоменклатура.Номенклатура = ВТ_Поступления.Номенклатура
		|			И ИнвентаризацияНоменклатура.КарточкаНоменклатуры = ВТ_Поступления.КарточкаНоменклатуры
		|			И ИнвентаризацияНоменклатура.МестоХранения = ВТ_Поступления.МестоХранения
		|ГДЕ
		|	ИнвентаризацияНоменклатура.Отклонение > 0
		|	И ИнвентаризацияНоменклатура.Ссылка = &Ссылка
		|	И ИнвентаризацияНоменклатура.МестоХранения = &МестоХранения
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвентаризацияНоменклатура.Номенклатура,
		|	ИнвентаризацияНоменклатура.Комплект,
		|	ИнвентаризацияНоменклатура.Партия,
		|	ИнвентаризацияНоменклатура.КарточкаНоменклатуры,
		|	ИнвентаризацияНоменклатура.ЕдиницаИзмерения,
		|	ИнвентаризацияНоменклатура.Цена";
		
		Запрос.УстановитьПараметр("Ссылка",			ИнвентаризацияСсылка);
		Запрос.УстановитьПараметр("МестоХранения",	МестоХраненияСсылка);
		
		Массив 					= Запрос.ВыполнитьПакет();		
		ВыборкаДетальныеЗаписи	= Массив[1].Выбрать();		
		
		Номенклатура.Очистить();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Количество > 0 Тогда
				НоваяСтрока = Номенклатура.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
				НоваяСтрока.Всего = НоваяСтрока.Сумма;
			КонецЕсли;	
		КонецЦикла;
		
		Если Номенклатура.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Нет данных для создания документа ""Поступление""!'");
		КонецЕсли;	
		
		СуммаДокумента = Номенклатура.Итог("Всего");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеITОтделом8УФ.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	
	ЗаполнитьПриКопировании();
	 
КонецПроцедуры

// Процедура - обработчик события ПриЗаписи объекта.
//
Процедура ПриЗаписи(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти	

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет документ при копировании.
//
Процедура ЗаполнитьПриКопировании()
	
	Для Каждого Строки Из Номенклатура Цикл
				
		Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Строки.Номенклатура) Тогда
			Строки.КарточкаНоменклатуры = Справочники.КарточкиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПриКопировании()

// Проверяет документ перед проведением, возвращает СписокЗначений с ошибками.
// Если пустой, то ошибок нет.
Функция ПроверитьДокументПередПроведением()
	
	СписокОшибок = Неопределено;

	// Проверки карточек номенклатуры.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеНоменклатура.Номенклатура КАК Номенклатура,
		|	ПоступлениеНоменклатура.КарточкаНоменклатуры КАК КарточкаНоменклатуры,
		|	ПоступлениеНоменклатура.Количество КАК Количество,
		|	ПоступлениеНоменклатура.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры КАК ВестиУчетПоКарточкамНоменклатуры
		|ПОМЕСТИТЬ ВТ_КарточкиНоменклатуры
		|ИЗ
		|	Документ.Поступление.Номенклатура КАК ПоступлениеНоменклатура
		|ГДЕ
		|	ПоступлениеНоменклатура.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КарточкаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеУслуги.Номенклатура КАК Номенклатура,
		|	ПоступлениеУслуги.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_Услуги
		|ИЗ
		|	Документ.Поступление.Услуги КАК ПоступлениеУслуги
		|ГДЕ
		|	ПоступлениеУслуги.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КарточкиНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТ_КарточкиНоменклатуры КАК ВТ_КарточкиНоменклатуры
		|ГДЕ
		|	ВТ_КарточкиНоменклатуры.КарточкаНоменклатуры = ЗНАЧЕНИЕ(Справочник.КарточкиНоменклатуры.ПустаяСсылка)
		|	И ВТ_КарточкиНоменклатуры.ВестиУчетПоКарточкамНоменклатуры = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Дубли.КарточкаНоменклатуры КАК КарточкаНоменклатуры
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_КарточкиНоменклатуры.КарточкаНоменклатуры КАК КарточкаНоменклатуры,
		|		СУММА(1) КАК КоличествоИтого
		|	ИЗ
		|		ВТ_КарточкиНоменклатуры КАК ВТ_КарточкиНоменклатуры
		|	ГДЕ
		|		ВТ_КарточкиНоменклатуры.ВестиУчетПоКарточкамНоменклатуры = ИСТИНА
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_КарточкиНоменклатуры.КарточкаНоменклатуры) КАК Дубли
		|ГДЕ
		|	Дубли.КоличествоИтого > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазныеВладельцы.КарточкаНоменклатуры КАК КарточкаНоменклатуры,
		|	РазныеВладельцы.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТ_КарточкиНоменклатуры КАК РазныеВладельцы
		|ГДЕ
		|	РазныеВладельцы.КарточкаНоменклатуры.Владелец <> РазныеВладельцы.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КарточкиСКоличествоНеРавнымЕдинице.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТ_КарточкиНоменклатуры КАК КарточкиСКоличествоНеРавнымЕдинице
		|ГДЕ
		|	КарточкиСКоличествоНеРавнымЕдинице.ВестиУчетПоКарточкамНоменклатуры = ИСТИНА
		|	И КарточкиСКоличествоНеРавнымЕдинице.Количество <> 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроверкаЧтоНетУслуг.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТ_КарточкиНоменклатуры КАК ПроверкаЧтоНетУслуг
		|ГДЕ
		|	ПроверкаЧтоНетУслуг.Номенклатура.ВидНоменклатуры.ТипВидаНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыВидовНоменклатуры.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроверкаЧтоОприходованаРанее.КарточкаНоменклатуры КАК КарточкаНоменклатуры
		|ИЗ
		|	ВТ_КарточкиНоменклатуры КАК ПроверкаЧтоОприходованаРанее
		|ГДЕ
		|	ПроверкаЧтоОприходованаРанее.ВестиУчетПоКарточкамНоменклатуры = ИСТИНА
		|	И ПроверкаЧтоОприходованаРанее.КарточкаНоменклатуры.ДокументПоступления <> &Ссылка
		|	И НЕ ПроверкаЧтоОприходованаРанее.КарточкаНоменклатуры.ДокументПоступления.Дата ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Услуги.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТ_Услуги КАК ВТ_Услуги
		|ГДЕ
		|	ВТ_Услуги.Номенклатура.ВидНоменклатуры.ТипВидаНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыВидовНоменклатуры.Услуга)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Проверка незаполненных карточек.
	Выборка = МассивРезультатов[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, 
			"Объект.Номенклатура", 
			СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не заполнены карточки номенклатуры.'"), 
			Выборка.Номенклатура), "");
			
		Возврат СписокОшибок;
		
	КонецЦикла;
	
	// Дубли строк, где карточки одинаковые.
	Выборка = МассивРезультатов[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, 
			"Объект.Номенклатура", 
			СтрШаблон(НСтр("ru = 'Карточка номенклатуры ""%1"" продублирована, удалите дубль.'"), 
			Выборка.КарточкаНоменклатуры), "");
			
	КонецЦикла;
	
	// Строки, где карточка одного владельца, а номенклатура другая.
	// Проверка, что карточка соответствует номенклатуре.
	Выборка = МассивРезультатов[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, 
			"Объект.Номенклатура", 
			СтрШаблон(
			НСтр("ru = 'Для номенклатуры %1 выбрана карточка, которая не является дочерней карточкой этой номенклатуры.'"),
			Выборка.Номенклатура), "");
			
	КонецЦикла;
	
	// Учет по карточкам и количество <> 1.
	Выборка = МассивРезультатов[5].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, 
			"Объект.Номенклатура", 
			СтрШаблон(НСтр("ru = 'Для номенклатуры %1 в ее виде указано, что ведется учет по карточкам. 
				| Для такой номенклатуры количество в строке не может быть больше единицы.'"),
			Выборка.Номенклатура), "");
			
	КонецЦикла;
	
	// Проверка, что в Номенклатуре нет услуг.
	Выборка = МассивРезультатов[6].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, 
			"Объект.Номенклатура", 
			СтрШаблон(НСтр("ru = 'Номенклатура %1  не может быть выбрана в дереве, т.к. это услуга.'"), 
			Выборка.Номенклатура), "");
			
	КонецЦикла;	
	
	Если ВидДокумента <> Перечисления.ВидДокументаПоступления.ПоРезультатамИнвентаризации Тогда
		// Проверка, что нельзя оприходовать одну карточку номенклатуры дважды.
		// С видом "По результатам инвентаризации" карточки будут списаны с предыдущего места хранения.
		Выборка = МассивРезультатов[7].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, 
			"Объект.Номенклатура", 
			СтрШаблон(НСтр("ru = 'Карточка номенклатуры ""%1"" уже была ранее оприходована, ее нельзя снова оприходовать.'"), 
			Выборка.КарточкаНоменклатуры), "");
			
		КонецЦикла;
	КонецЕсли;	
	
	// В услугах есть оборудование.
	Выборка = МассивРезультатов[8].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, 
			"Объект.Номенклатура", 
			СтрШаблон(НСтр("ru = 'Номенклатура %1  не может быть выбрана в Услугах, т.к. это номенклатура.'"), 
			Выборка.Номенклатура), "");
			
	КонецЦикла;
	
	Если РаспределятьУслуги = Истина Тогда
		Если Номенклатура.Итог("СуммаРасходов") = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, 
				"Объект.РаспределятьУслуги", 
				НСтр("ru = 'В документе включено ""Распределение услуг"", при этом распределенная сумма доп.расходов по номенклатуре равна 0.'"), "");
		КонецЕсли;
			
		Если Номенклатура.Итог("СуммаРасходов") > Услуги.Итог("Всего") Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, 
				"Объект.Услуги", 
				НСтр("ru = 'Распределенная сумма доп.расходов по номенклатуре больше суммы услуг.'"), "");
		КонецЕсли;			
	КонецЕсли;		
		
	Возврат СписокОшибок;
	
КонецФункции

#КонецОбласти

#КонецЕсли