#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Функция возвращает список имен «ключевых» реквизитов.
//
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив реквизитов, редактируемых при групповой обработке.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
		
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Результат = Новый Массив;
	Если ЗначениеЗаполнено(Ссылка.ОтветственныйСотрудник) И ЗначениеЗаполнено(Ссылка.ОтветственныйСотрудник.ФизЛицо) Тогда
		Результат.Добавить(Ссылка.ОтветственныйСотрудник.ФизЛицо);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ссылка.ОтветственныйСотрудникИТОтдела) И ЗначениеЗаполнено(Ссылка.ОтветственныйСотрудникИТОтдела.ФизЛицо) Тогда
		Результат.Добавить(Ссылка.ОтветственныйСотрудникИТОтдела.ФизЛицо);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
		
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;
	СоответствиеИзменениеОбъекта.Вставить("ИнвентаризацияИзменениеОбъектаПроведение", НСтр("ru = 'Проведение'"));
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура, Знач Источник) Экспорт
	
	Результат = Ложь;
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ИмяСобытия = "ИнвентаризацияИзменениеОбъектаПроведение" Тогда
		
		Если Структура.ЭтоНовый И Источник.Проведен Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Проведен <> ИсточникПередЗаписью.Проведен И ИсточникПередЗаписью.Проведен = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаИнвентаризацииПоОстаткам(Объект) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ОстаткиОстатки.Номенклатура
		|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец
		|	КОНЕЦ КАК Номенклатура,
		|	ОстаткиОстатки.Партия,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КарточкиНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ ОстаткиОстатки.Номенклатура
		|	КОНЕЦ КАК КарточкаНоменклатуры,
		|	ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) КАК Количество,
		|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) КАК Сумма,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ОстаткиОстатки.Номенклатура.ВидНоменклатуры.НавСсылка
		|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ВидНоменклатуры.НавСсылка
		|	КОНЕЦ КАК НавСсылка,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ОстаткиОстатки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
		|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
		|	КОНЕЦ КАК УчетПоКарточкам,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ОстаткиОстатки.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ЛОЖЬ КАК Флаг,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) / ОстаткиОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Цена,
		|	ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) КАК КоличествоУчет,
		|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) КАК СуммаУчет,
		|	0 КАК Отклонение,
		|	ОстаткиОстатки.Партия КАК ПартияДоИнвентаризации,
		|	ВЫБОР
		|		КОГДА ОстаткиОстатки.Партия ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РазрешатьУдалять,
		|	ОстаткиОстатки.МестоХранения
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(
		|			&ДатаКон,
		|			МестоХранения = &МестоХранения
		|				И Организация = &Организация
		|				И МестоХранения.Подразделение = &Подразделение) КАК ОстаткиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудники.СрезПоследних(&ДатаКон, ) КАК ОтветственныеСотрудникиСрезПоследних
		|		ПО ОстаткиОстатки.МестоХранения = ОтветственныеСотрудникиСрезПоследних.МестоХранения
		|			И ОстаткиОстатки.МестоХранения.Подразделение = ОтветственныеСотрудникиСрезПоследних.МестоХранения.Подразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудникиИТОтдела.СрезПоследних(&ДатаКон, ) КАК ОтветственныеСотрудникиИТОтделаСрезПоследних
		|		ПО ОстаткиОстатки.МестоХранения = ОтветственныеСотрудникиИТОтделаСрезПоследних.МестоХранения
		|ГДЕ
		|	ОтветственныеСотрудникиСрезПоследних.Сотрудник = &Сотрудник
		|	И ОтветственныеСотрудникиИТОтделаСрезПоследних.Сотрудник = &СотрудникИТОтдела";
	
	Если ЗначениеЗаполнено(Объект.МестоХранения) Тогда
		Если Объект.СУчетомПодчиненныхМестХранения Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"МестоХранения = &МестоХранения","МестоХранения В ИЕРАРХИИ(&МестоХранения)");
			
			Запрос.УстановитьПараметр("МестоХранения", Объект.МестоХранения);			
		Иначе
			Запрос.УстановитьПараметр("МестоХранения", Объект.МестоХранения);
		КонецЕсли;
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МестоХранения = &МестоХранения", "Истина");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОтветственныйСотрудник) Тогда
		Запрос.УстановитьПараметр("Сотрудник", Объект.ОтветственныйСотрудник);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтветственныеСотрудникиСрезПоследних.Сотрудник = &Сотрудник", "Истина");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОтветственныйСотрудникИТОтдела) Тогда
		Запрос.УстановитьПараметр("СотрудникИТОтдела", Объект.ОтветственныйСотрудникИТОтдела);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"ОтветственныеСотрудникиИТОтделаСрезПоследних.Сотрудник = &СотрудникИТОтдела", "Истина");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МестоХранения.Подразделение = &Подразделение", "Истина");
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДатаКон", ?(Объект.Ссылка.Пустая(), КонецДня(ТекущаяДатаСеанса()), Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТЗ = Объект.Номенклатура.Выгрузить(); 
	ТЗ.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если НЕ Выборка.УчетПоКарточкам Тогда
			НоваяСтрока.КарточкаНоменклатуры = 
				УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Выборка.Номенклатура);
		КонецЕсли;		
		
	КонецЦикла;
	
	ТЗ.Сортировать("МестоХранения,Номенклатура,КарточкаНоменклатуры");
	
	Возврат ТЗ;	
	
КонецФункции

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
		
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция печати документа.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент 	= Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_Инвентаризация";
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент 				= Ложь;		
		НомерСтрокиНачало 			= ТабличныйДокумент.ВысотаТаблицы + 1;		
		СтруктураЗаполнения 		= УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(ТекущийДокумент);
				
		Если ИмяМакета = "АктСписания" Тогда		
			
			Запрос 		 		= Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ИнвентаризацияНоменклатура.Ссылка,
			|	ИнвентаризацияНоменклатура.НомерСтроки,
			|	ИнвентаризацияНоменклатура.Номенклатура,
			|	ИнвентаризацияНоменклатура.Комплект,
			|	ИнвентаризацияНоменклатура.Партия,
			|	ИнвентаризацияНоменклатура.КарточкаНоменклатуры,
			|	ИнвентаризацияНоменклатура.Отклонение,
			|	ИнвентаризацияНоменклатура.Количество,
			|	ИнвентаризацияНоменклатура.КоличествоУчет,
			|	ИнвентаризацияНоменклатура.ЕдиницаИзмерения,
			|	ИнвентаризацияНоменклатура.Цена,
			|	ИнвентаризацияНоменклатура.Сумма,
			|	ИнвентаризацияНоменклатура.СуммаУчет,
			|	ВЫРАЗИТЬ(ИнвентаризацияНоменклатура.Описание КАК СТРОКА(1000)) КАК Описание,
			|	ИнвентаризацияНоменклатура.ПартияДоИнвентаризации,
			|	ИнвентаризацияНоменклатура.РазрешатьУдалять,
			|	ИнвентаризацияНоменклатура.МестоХранения КАК МестоХранения
			|ИЗ
			|	Документ.Инвентаризация.Номенклатура КАК ИнвентаризацияНоменклатура
			|ГДЕ
			|	ИнвентаризацияНоменклатура.Отклонение < 0
			|	И ИнвентаризацияНоменклатура.Ссылка = &Ссылка
			|ИТОГИ ПО
			|	МестоХранения";

			Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);	
			РезультатЗапроса 	= Запрос.Выполнить();
			Выборка 		 	= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "МестоХранения");
			
			Если Выборка.Количество() = 0 Тогда
				Возврат ТабличныйДокумент;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				// Шапка.
				СтруктураЗаполнения.Вставить("Номер", 		  ТекущийДокумент.Номер);
				СтруктураЗаполнения.Вставить("ДатаДокумента", Формат(ТекущийДокумент.Дата, "ДЛФ=DD"));				
				СтруктураЗаполнения.Вставить("ДатаИВремяПечати", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата и время печати: %1. Пользователь: %2'"),
					ТекущаяДатаСеанса(), Пользователи.ТекущийПользователь()));
				
				// Место хранения.
				МестоХранения 		= Выборка.МестоХранения;
				СтруктураЗаполнения.Вставить("МестоХранения", МестоХранения); 
				УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеМестаХранения("МестоХранения",
					ТекущийДокумент.Дата, МестоХранения), СтруктураЗаполнения);
				
				// Организация.
				Если ЗначениеЗаполнено(МестоХранения) Тогда
					Если ЗначениеЗаполнено(МестоХранения.Организация) Тогда
						СтруктураЗаполнения.Вставить("Организация", МестоХранения.Организация); 
						УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеОрганизации("Организация",
							ТекущийДокумент.Дата, МестоХранения.Организация), СтруктураЗаполнения);	
					КонецЕсли;
				Иначе 
					СтруктураЗаполнения.Вставить("Организация", ТекущийДокумент.Организация); 
					УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеОрганизации("Организация",
						ТекущийДокумент.Дата, ТекущийДокумент.Организация), СтруктураЗаполнения);	
				КонецЕсли;
				
				Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Инвентаризация.ПФ_MXL_МакетАктСписания");			
				ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Инвентаризация_АктСписания";
				
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");						
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");				
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// Вывод строк.				
				ОбластьМакета 		= Макет.ПолучитьОбласть("СтрокаТаблицы");
				Сумма				= 0;
				Количество			= 0;
				Нпп					= 0;
				ВыборкаСтрокМассив 	= МассивСтруктурИзРезультатаЗапроса(Выборка, РезультатЗапроса);				
				
				Для Каждого ВыборкаСтрок Из ВыборкаСтрокМассив Цикл
					Нпп 		= Нпп + 1;
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаСтрок);					
					СтруктураЗаполненияВр = Новый Структура;
					СтруктураЗаполненияВр.Вставить("КоличествоОтклонение",	-ВыборкаСтрок.Отклонение);
					СтруктураЗаполненияВр.Вставить("СуммаОтклонение",		-ВыборкаСтрок.Отклонение * ВыборкаСтрок.Цена);
					СтруктураЗаполненияВр.Вставить("НомерСтроки",			 Нпп);
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполненияВр);					
					Сумма 		= Сумма + СтруктураЗаполненияВр.СуммаОтклонение;
					ТабличныйДокумент.Вывести(ОбластьМакета);
					Количество 	= Количество + СтруктураЗаполненияВр.КоличествоОтклонение;
				КонецЦикла;	
				
				ОбластьМакета = Макет.ПолучитьОбласть("Подвал");				
				СтруктураЗаполнения.Вставить("ИтогКолво",		Количество);
				СтруктураЗаполнения.Вставить("ИтогСумма",		Сумма);				
				СтруктураЗаполнения.Вставить("СуммаПрописью", 	РаботаСКурсамиВалют.СформироватьСуммуПрописью(Сумма, УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту()));
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЦикла;		
			
		ИначеЕсли ИмяМакета = "Инвентаризация" Тогда
			
			Запрос 		 = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИнвентаризацияНоменклатура.Ссылка,
				|	ИнвентаризацияНоменклатура.НомерСтроки,
				|	ИнвентаризацияНоменклатура.Номенклатура,
				|	ИнвентаризацияНоменклатура.Комплект,
				|	ИнвентаризацияНоменклатура.Партия,
				|	ИнвентаризацияНоменклатура.КарточкаНоменклатуры,
				|	ИнвентаризацияНоменклатура.Отклонение,
				|	ИнвентаризацияНоменклатура.Количество,
				|	ИнвентаризацияНоменклатура.КоличествоУчет,
				|	ИнвентаризацияНоменклатура.ЕдиницаИзмерения,
				|	ИнвентаризацияНоменклатура.Цена,
				|	ИнвентаризацияНоменклатура.Сумма,
				|	ИнвентаризацияНоменклатура.СуммаУчет,
				|	ВЫРАЗИТЬ(ИнвентаризацияНоменклатура.Описание КАК СТРОКА(1000)) КАК Описание,
				|	ИнвентаризацияНоменклатура.ПартияДоИнвентаризации,
				|	ИнвентаризацияНоменклатура.РазрешатьУдалять,
				|	ИнвентаризацияНоменклатура.МестоХранения КАК МестоХранения
				|ИЗ
				|	Документ.Инвентаризация.Номенклатура КАК ИнвентаризацияНоменклатура
				|ГДЕ			
				|	ИнвентаризацияНоменклатура.Ссылка = &Ссылка
				|ИТОГИ ПО
				|	МестоХранения";
			
			Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);	
			РезультатЗапроса 	= Запрос.Выполнить();
			Выборка 		 	= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "МестоХранения");	
			
			Если Выборка.Количество() = 0 Тогда
				Возврат ТабличныйДокумент;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Инвентаризация.ПФ_MXL_Инвентаризация");			
				ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Инвентаризация_Инвентаризация";
				
				// Выводим шапку.
				ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
				ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru ='Инвентаризация № %1 от %2'"), СтруктураЗаполнения.НомерДокумента, СтруктураЗаполнения.Дата)));
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения); 
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// Выводим данные об организации и складе.
				ОбластьМакета 						= Макет.ПолучитьОбласть("ШапкаФормы");			
				
				// Место хранения. 
				МестоХранения 						= Выборка.МестоХранения;
				СтруктураЗаполнения.Вставить("МестоХранения", МестоХранения); 
				УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеМестаХранения("МестоХранения",
					ТекущийДокумент.Дата, МестоХранения), СтруктураЗаполнения);
					
				// Организация.
				Если ЗначениеЗаполнено(МестоХранения) Тогда
					Если ЗначениеЗаполнено(МестоХранения.Организация) Тогда
						СтруктураЗаполнения.Вставить("Организация", МестоХранения.Организация); 
						УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеОрганизации("Организация",
							ТекущийДокумент.Дата, МестоХранения.Организация), СтруктураЗаполнения);	
					КонецЕсли;
				Иначе 
					СтруктураЗаполнения.Вставить("Организация", ТекущийДокумент.Организация); 
					УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеОрганизации("Организация",
						ТекущийДокумент.Дата, ТекущийДокумент.Организация), СтруктураЗаполнения);	
				КонецЕсли;
					
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// МОЛ.
				Если СтруктураЗаполнения.Свойство("МестоХраненияМОЛ") Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("МОЛ");
					СтруктураЗаполнения.Вставить("МОЛ", СтруктураЗаполнения.МестоХраненияМОЛ); 
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
				
				// МОЛ ИТ.
				Если СтруктураЗаполнения.Свойство("МестоХраненияМОЛИТ") Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("МОЛИТ");
					СтруктураЗаполнения.Вставить("МОЛИТ", СтруктураЗаполнения.МестоХраненияМОЛИТ);
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПустаяСтрока");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// Вывод строк.
				ВыборкаСтрокМассив 						= МассивСтруктурИзРезультатаЗапроса(Выборка, РезультатЗапроса);	
				ОбластьМакета							= Макет.ПолучитьОбласть("Строка");
				Количество								= 0;
				Всего									= 0;
				ВсегоПоУчету							= 0;
				Нпп										= 0;
				
				Для Каждого СтрокаВыборки Из ВыборкаСтрокМассив Цикл
					Нпп 		= Нпп + 1;
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтрокаВыборки);
					СтруктураЗаполненияВр = Новый Структура;					
					СтруктураЗаполненияВр.Вставить("Отклонение", 	?(СтрокаВыборки.Отклонение <0,-СтрокаВыборки.Отклонение,СтрокаВыборки.Отклонение));
					СтруктураЗаполненияВр.Вставить("НомерСтроки",			 Нпп);
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполненияВр);
					Количество   = Количество + СтрокаВыборки.КоличествоУчет;
					Всего 		 = Всего + СтрокаВыборки.Сумма;
					ВсегоПоУчету = ВсегоПоУчету + СтрокаВыборки.СуммаУчет;
					
					ТабличныйДокумент.Вывести(ОбластьМакета);				
				КонецЦикла;
				
				// Итого.
				ОбластьМакета = Макет.ПолучитьОбласть("Итого");
				СтруктураЗаполнения.Вставить("Всего", 			УправлениеITОтделом8УФ.ФорматСумм(Всего,УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту()));
				СтруктураЗаполнения.Вставить("ВсегоПоУчету", 	УправлениеITОтделом8УФ.ФорматСумм(ВсегоПоУчету,УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту()));
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// Сумма прописью.
				ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
				ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтоговаяСтрока", 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Всего наименований %1, на сумму %2'"), Строка(Нпп), УправлениеITОтделом8УФ.ФорматСумм(ВсегоПоУчету, УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту()))));
				ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ВсегоПоУчету, УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту())));
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// Подписи.
				ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЦикла;
		
		ИначеЕсли ИмяМакета = "БланкТоварногоНаполнения" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Инвентаризация.ПФ_MXL_БланкТоварногоНаполнения");			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Инвентаризация_БланкТоварногоНаполнения";
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Новый Структура("ТекстЗаголовка",  
			    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Инвентаризация № %1 от %2'"), СтруктураЗаполнения.НомерДокумента, Формат(СтруктураЗаполнения.ДатаДокумента, "ДЛФ=DD"))));			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОтборов");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			СтрокаОтборов = "";
			Если ЗначениеЗаполнено(СтруктураЗаполнения.Организация) Тогда
				СтрокаОтборов = СтрокаОтборов + "Организация: " + СтруктураЗаполнения.ОрганизацияНаименованиеПолное + "; ";
			КонецЕсли;
			
			СтрокаОтборов = СокрЛП(СтрокаОтборов);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Новый Структура("СтрокаОтборов", СтрокаОтборов));
			ТабличныйДокумент.Вывести(ОбластьМакета);
						
			ОбластьМакета = Макет.ПолучитьОбласть("ВремяПечати");
			ОбластьМакета.Параметры.ВремяПечати = 
			    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата и время печати: %1. Пользователь: %2'"), ТекущаяДатаСеанса(), Пользователи.ТекущийПользователь());
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);	
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			
			ВыборкаСтрокНоменклатуры                = СтруктураЗаполнения.Номенклатура;
			ОбластьМакета							= Макет.ПолучитьОбласть("Строка");
			Сумма									= 0;
			Количество								= 0;
			Для Каждого СтрокаВыборки Из ВыборкаСтрокНоменклатуры Цикл
				
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтрокаВыборки);
				СтруктураЗаполненияВр = Новый Структура;
				СтруктураЗаполненияВр.Вставить("Номенклатура",?(ТипЗнч(СтрокаВыборки.Номенклатура) = Тип("СправочникСсылка.КарточкиНоменклатуры"),
				СтрокаВыборки.КарточкаНоменклатуры, СтрокаВыборки.Номенклатура));
				СтруктураЗаполненияВр.Вставить("КоличествоОтклонение",-СтрокаВыборки.Отклонение);
				СтруктураЗаполненияВр.Вставить("СуммаОтклонение",		-СтрокаВыборки.Отклонение * СтрокаВыборки.Цена);
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполненияВр);
				Сумма = Сумма + СтруктураЗаполненияВр.СуммаОтклонение;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
						
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);	
			
		ИначеЕсли ИмяМакета = "ИНВ22" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Инвентаризация.ПФ_MXL_ИНВ22");			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Инвентаризация_ПФ_MXL_ИНВ22";
			
			СтрокаПодразделение = "";
			Если НЕ ЗначениеЗаполнено(СтруктураЗаполнения.Подразделение) Тогда
				ВыборкаСтрокНоменклатуры                = СтруктураЗаполнения.Номенклатура;				
				Для Каждого СтрокаНоменклатуры Из ВыборкаСтрокНоменклатуры Цикл
					Если ЗначениеЗаполнено(СтрокаНоменклатуры.МестоХранения) 
						И ЗначениеЗаполнено(СтрокаНоменклатуры.МестоХранения.Подразделение) Тогда
						Если Найти(СтрокаПодразделение, СтрокаНоменклатуры.МестоХранения.Подразделение) = 0 Тогда 
							Если СтрДлина(СтрокаПодразделение) = 0 Тогда
								СтрокаПодразделение = Строка(СтрокаНоменклатуры.МестоХранения.Подразделение);
							Иначе	
								СтрокаПодразделение = СтрокаПодразделение + ", " + СтрокаНоменклатуры.МестоХранения.Подразделение;
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПодразделение) Тогда
				СтруктураЗаполнения.Вставить("Подразделение", СтрокаПодразделение);
			КонецЕсли;	
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);			
			ТабличныйДокумент.Вывести(ОбластьМакета);	
			
		ИначеЕсли ИмяМакета = "ИНВ3" Тогда
			
			Запрос 		 		= Новый Запрос;
			Запрос.Текст 		= 
				"ВЫБРАТЬ
				|	ИнвентаризацияНоменклатура.Ссылка,
				|	ИнвентаризацияНоменклатура.НомерСтроки,
				|	ИнвентаризацияНоменклатура.Номенклатура,
				|	ИнвентаризацияНоменклатура.Комплект,
				|	ИнвентаризацияНоменклатура.Партия,
				|	ИнвентаризацияНоменклатура.КарточкаНоменклатуры,
				|	ИнвентаризацияНоменклатура.Отклонение,
				|	ИнвентаризацияНоменклатура.Количество,
				|	ИнвентаризацияНоменклатура.КоличествоУчет,
				|	ИнвентаризацияНоменклатура.ЕдиницаИзмерения,
				|	ИнвентаризацияНоменклатура.Цена,
				|	ИнвентаризацияНоменклатура.Сумма,
				|	ИнвентаризацияНоменклатура.СуммаУчет,
				|	ВЫРАЗИТЬ(ИнвентаризацияНоменклатура.Описание КАК СТРОКА(1000)) КАК Описание,
				|	ИнвентаризацияНоменклатура.ПартияДоИнвентаризации,
				|	ИнвентаризацияНоменклатура.РазрешатьУдалять,
				|	ИнвентаризацияНоменклатура.МестоХранения КАК МестоХранения
				|ИЗ
				|	Документ.Инвентаризация.Номенклатура КАК ИнвентаризацияНоменклатура
				|ГДЕ			
				|	ИнвентаризацияНоменклатура.Ссылка = &Ссылка
				|ИТОГИ ПО
				|	МестоХранения";
			
			Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);	
			РезультатЗапроса 	= Запрос.Выполнить();
			Выборка 		 	= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "МестоХранения");
			
			Если Выборка.Количество() = 0 Тогда
				Возврат ТабличныйДокумент;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Инвентаризация.ПФ_MXL_ИНВ3");			
				ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Инвентаризация_ПФ_MXL_ИНВ3";
				
				// Зададим параметры макета по умолчанию.
				ТабличныйДокумент.ПолеСверху              = 10;
				ТабличныйДокумент.ПолеСлева               = 1;
				ТабличныйДокумент.ПолеСнизу               = 1;
				ТабличныйДокумент.ПолеСправа              = 1;
				ТабличныйДокумент.РазмерКолонтитулаСверху = 10;
				ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
				
				//////////////////////////////////////////////////////////////////////
				// 1-я страница формы.
				
				// Выводим шапку накладной.			
				ОбластьМакета 			 			= Макет.ПолучитьОбласть("Шапка");			
				СтруктураЗаполнения.Вставить("НомерДокумента", СтруктураЗаполнения.НомерДокумента);
				СтруктураЗаполнения.Вставить("ДатаДокумента",  СтруктураЗаполнения.ДатаДокумента);				
				
				// Место хранения.
				МестоХранения 						= Выборка.МестоХранения;
				СтруктураЗаполнения.Вставить("МестоХранения", МестоХранения); 
				УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеМестаХранения("МестоХранения",
					ТекущийДокумент.Дата, МестоХранения), СтруктураЗаполнения);	
				
				// Организация.
				Если ЗначениеЗаполнено(МестоХранения) Тогда
					Если ЗначениеЗаполнено(МестоХранения.Организация) Тогда
						СтруктураЗаполнения.Вставить("Организация", МестоХранения.Организация); 
						УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеОрганизации("Организация",
							ТекущийДокумент.Дата, МестоХранения.Организация), СтруктураЗаполнения);	
					КонецЕсли;
				Иначе 
					СтруктураЗаполнения.Вставить("Организация", ТекущийДокумент.Организация); 
					УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеОрганизации("Организация",
						ТекущийДокумент.Дата, ТекущийДокумент.Организация), СтруктураЗаполнения);	
				КонецЕсли;			
				
				// Подразделение.
				Если ЗначениеЗаполнено(МестоХранения.Подразделение) Тогда
					СтрокаПодразделение = Строка(МестоХранения.Подразделение) +" (" + Строка(МестоХранения) + ")"; 
					СтруктураЗаполнения.Вставить("СтрокаПодразделение", СтрокаПодразделение); 
					СтруктураЗаполнения.Вставить("Подразделение", МестоХранения.Подразделение); 
					УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеПодразделения("Подразделение",
						ТекущийДокумент.Дата, МестоХранения.Подразделение), СтруктураЗаполнения);
				Иначе
					СтрокаПодразделение = Строка(МестоХранения);
					СтруктураЗаполнения.Вставить("СтрокаПодразделение", СтрокаПодразделение); 
				КонецЕсли;	
					
				МестоХраненияМОЛ 	= Справочники.Сотрудники.ПустаяСсылка();	
				МестоХраненияМОЛИТ 	= Справочники.Сотрудники.ПустаяСсылка();
				
				Если СтруктураЗаполнения.Свойство("МестоХраненияМОЛ") Тогда	
					МестоХраненияМОЛ 	= СтруктураЗаполнения.МестоХраненияМОЛ;
				КонецЕсли;
				
				Если СтруктураЗаполнения.Свойство("МестоХраненияМОЛИТ") Тогда	
					МестоХраненияМОЛИТ 	= СтруктураЗаполнения.МестоХраненияМОЛИТ;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(МестоХраненияМОЛ) Тогда
					СтруктураЗаполнения.Вставить("МестоХраненияМОЛДолжность", МестоХраненияМОЛ.Должность);	
				КонецЕсли;		
				
				Если ЗначениеЗаполнено(МестоХраненияМОЛИТ) Тогда
					СтруктураЗаполнения.Вставить("МестоХраненияМОЛИТДолжность", МестоХраненияМОЛИТ.Должность);	
				КонецЕсли;		
				
				СтруктураЗаполнения.Вставить("ВидЦенностей", НСтр("ru = 'материалы'"));	
				СтруктураЗаполнения.Вставить("ФормаСобственностиЦенностей", НСтр("ru = 'в собственности организации'"));
				
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				//////////////////////////////////////////////////////////////////////
				// 2-я страница формы.
				
				ИтогФактКоличество 			= 0;
				ИтогФактСумма      			= 0;
				ИтогФактСуммаВсего 			= 0;				
				ИтогоКоличествоНаСтранице	= 0;
				ИтогоСуммаНаСтранице		= 0;
				ИтогоКоличествоУчетНаСтранице=0;
				ИтогоСуммаУчетНаСтранице	= 0;								
				НомерСтраницы 		 		= 2;				
				НомерСтроки					= 0;
				ПорядковыхНомеров 	 		= 0;
				
				// Выводим заголовок таблицы.
				ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
				ЗаголовокТаблицы.Параметры.НомерСтраницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Страница %1'"), НомерСтраницы); 
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
				// Выводим многострочную часть документа.
				ПодвалСтраницы  = Макет.ПолучитьОбласть("ПодвалСтраницы");	
				
				ВыборкаСтрокНоменклатуры		= МассивСтруктурИзРезультатаЗапроса(Выборка, РезультатЗапроса);
				КоличествоСтрок					= ВыборкаСтрокНоменклатуры.Количество();
				СтрокаТаблицы   				= Макет.ПолучитьОбласть("Строка");
				
				Для Каждого СтрокаВыборки Из ВыборкаСтрокНоменклатуры Цикл
					
					НомерСтроки = НомерСтроки + 1;
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы.Параметры, СтрокаВыборки);
					СтруктураЗаполненияВр 			= Новый Структура;
					СтруктураЗаполненияВр.Вставить("КоличествоОтклонение",?(СтрокаВыборки.Отклонение<0, - СтрокаВыборки.Отклонение, СтрокаВыборки.Отклонение));
					СуммаОтклонение 				= СтрокаВыборки.Отклонение * СтрокаВыборки.Цена;
					СтруктураЗаполненияВр.Вставить("СуммаОтклонение", ?(СуммаОтклонение<0, - СуммаОтклонение, СуммаОтклонение));
					СтруктураЗаполненияВр.Вставить("НомерСтроки", НомерСтроки);
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполненияВр);				
					
					// Проверим вывод.
					СтрокаСПодвалом = Новый Массив;																		
					СтрокаСПодвалом.Добавить(СтрокаТаблицы);
					СтрокаСПодвалом.Добавить(ПодвалСтраницы);					
										
					Если НЕ ТабличныйДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
						
						// Выводим итоги по странице.						
						ПодвалСтраницы.Параметры.Заполнить(Новый Структура("ИтогоКоличествоНаСтранице",     ИтогоКоличествоНаСтранице));
						ПодвалСтраницы.Параметры.Заполнить(Новый Структура("ИтогоСуммаНаСтранице",  		ИтогоСуммаНаСтранице));
						ПодвалСтраницы.Параметры.Заполнить(Новый Структура("ИтогоКоличествоУчетНаСтранице",	ИтогоКоличествоУчетНаСтранице));
						ПодвалСтраницы.Параметры.Заполнить(Новый Структура("ИтогоСуммаУчетНаСтранице",      ИтогоСуммаУчетНаСтранице));					
						ПодвалСтраницы.Параметры.Заполнить(Новый Структура("КоличествоПорядковыхНомеровНаСтраницеПрописью", 
							ЧислоПрописью(ПорядковыхНомеров, ,",,,,,,,,0")));
						ПодвалСтраницы.Параметры.Заполнить(Новый Структура("КоличествоНаСтраницеПрописью", 	УправлениеITОтделом8УФ.КоличествоПрописью(ИтогоКоличествоНаСтранице)));
						ПодвалСтраницы.Параметры.Заполнить(Новый Структура("СуммаНаСтраницеПрописью",
							РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаНаСтранице, УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту())));
						
						ТабличныйДокумент.Вывести(ПодвалСтраницы);						
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
						// Очистим итоги по странице.		
						ИтогоКоличествоНаСтранице 	  = 0;
						ИтогоСуммаНаСтранице      	  = 0;
						ИтогоКоличествоУчетНаСтранице = 0;
						ИтогоСуммаУчетНаСтранице  	  = 0;
						ПорядковыхНомеров			  = 0;	
						
						// Выведем заголовок таблицы.
						
						ЗаголовокТаблицы.Параметры.Заполнить(Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы));
						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
						
					КонецЕсли;				
					
					СтрокаТаблицы.Параметры.НомерСтроки = НомерСтроки;
					ТабличныйДокумент.Вывести(СтрокаТаблицы);					
					
					
					// Увеличим итоги по странице.
					ПорядковыхНомеров 				= ПорядковыхНомеров + 1;					
					ИтогоКоличествоНаСтранице		= ИтогоКоличествоНаСтранице 	+ СтрокаВыборки.Количество;
					ИтогоСуммаНаСтранице     		= ИтогоСуммаНаСтранице      	+ СтрокаВыборки.Сумма;
					ИтогоКоличествоУчетНаСтранице 	= ИтогоКоличествоУчетНаСтранице + СтрокаВыборки.КоличествоУчет;
					ИтогоСуммаУчетНаСтранице 		= ИтогоСуммаУчетНаСтранице      + СтрокаВыборки.СуммаУчет;
					
					// Увеличим итоги по документу.					
					ИтогФактКоличество = ИтогФактКоличество + СтрокаВыборки.Количество;
					ИтогФактСумма      = ИтогФактСумма      + СтрокаВыборки.Сумма;
					ИтогФактСуммаВсего = ИтогФактСуммаВсего + СтрокаВыборки.Сумма;
					
				КонецЦикла;
				
				// Выводим итоги по последней странице.
				ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");				
				ОбластьИтоговПоСтранице.Параметры.Заполнить(Новый Структура("ИтогоКоличествоНаСтранице", ИтогоКоличествоНаСтранице));
				ОбластьИтоговПоСтранице.Параметры.Заполнить(Новый Структура("ИтогоСуммаНаСтранице", ИтогоСуммаНаСтранице));
				ОбластьИтоговПоСтранице.Параметры.Заполнить(Новый Структура("ИтогоКоличествоУчетНаСтранице",ИтогоКоличествоУчетНаСтранице));
				ОбластьИтоговПоСтранице.Параметры.Заполнить(Новый Структура("ИтогоСуммаУчетНаСтранице", ИтогоСуммаУчетНаСтранице));				
				ОбластьИтоговПоСтранице.Параметры.Заполнить(Новый Структура("КоличествоПорядковыхНомеровНаСтраницеПрописью", 
					ЧислоПрописью(ПорядковыхНомеров, ,",,,,,,,,0")));	
				ОбластьИтоговПоСтранице.Параметры.Заполнить(Новый Структура("КоличествоНаСтраницеПрописью",
					УправлениеITОтделом8УФ.КоличествоПрописью(ИтогоКоличествоНаСтранице)));
				ОбластьИтоговПоСтранице.Параметры.Заполнить(Новый Структура("СуммаНаСтраницеПрописью",
					РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаНаСтранице, УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту())));				
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// Выводим подвал документа.
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписи");
				НомерСтраницы = НомерСтраницы +1;
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
				ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы));
				ОбластьМакета.Параметры.Заполнить(Новый Структура("КоличествоПорядковыхНомеровЗаписейПрописью", УправлениеITОтделом8УФ.КоличествоПрописью(КоличествоСтрок)));
				ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоКоличествоПрописью", УправлениеITОтделом8УФ.КоличествоПрописью(ИтогФактКоличество)));  
				ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоСуммаПрописью",
					РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогФактСумма, УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту())));				
				ОбластьМакета.Параметры.Заполнить(Новый Структура("НачальныйНомерПоПорядку", "1"));
				ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерКонца", КоличествоСтрок));
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЦикла;
			
		ИначеЕсли ИмяМакета = "ИНВ19" Тогда
			
			Запрос 		 = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИнвентаризацияНоменклатура.Ссылка,
				|	ИнвентаризацияНоменклатура.НомерСтроки,
				|	ИнвентаризацияНоменклатура.Номенклатура,
				|	ИнвентаризацияНоменклатура.Комплект,
				|	ИнвентаризацияНоменклатура.Партия,
				|	ИнвентаризацияНоменклатура.КарточкаНоменклатуры,
				|	ИнвентаризацияНоменклатура.Отклонение,
				|	ИнвентаризацияНоменклатура.Количество,
				|	ИнвентаризацияНоменклатура.КоличествоУчет,
				|	ИнвентаризацияНоменклатура.ЕдиницаИзмерения,
				|	ИнвентаризацияНоменклатура.Цена,
				|	ИнвентаризацияНоменклатура.Сумма,
				|	ИнвентаризацияНоменклатура.СуммаУчет,
				|	ВЫРАЗИТЬ(ИнвентаризацияНоменклатура.Описание КАК СТРОКА(1000)) КАК Описание,
				|	ИнвентаризацияНоменклатура.ПартияДоИнвентаризации,
				|	ИнвентаризацияНоменклатура.РазрешатьУдалять,
				|	ИнвентаризацияНоменклатура.МестоХранения КАК МестоХранения
				|ИЗ
				|	Документ.Инвентаризация.Номенклатура КАК ИнвентаризацияНоменклатура
				|ГДЕ
				|	ИнвентаризацияНоменклатура.Ссылка = &Ссылка
				|	И ИнвентаризацияНоменклатура.Отклонение <> 0
				|ИТОГИ ПО
				|	МестоХранения";
			
			Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);	
			РезультатЗапроса 	= Запрос.Выполнить();
			Выборка 		 	= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "МестоХранения");
			
			Если Выборка.Количество() = 0 Тогда
				Возврат ТабличныйДокумент;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Инвентаризация.ПФ_MXL_ИНВ19");			
				ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Инвентаризация_ПФ_MXL_ИНВ19";
				
				// Параметры печати.
				ТабличныйДокумент.ПолеСверху 		 = 1;
				ТабличныйДокумент.ПолеСлева  		 = 1;
				ТабличныйДокумент.ПолеСнизу  		 = 1;
				ТабличныйДокумент.ПолеСправа 		 = 1;
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
				СтруктураЗаполнения.Вставить("НомерДокумента", СтруктураЗаполнения.НомерДокумента);
				СтруктураЗаполнения.Вставить("ДатаДокумента",  СтруктураЗаполнения.ДатаДокумента);				
				
				// Место хранения.
				МестоХранения 						= Выборка.МестоХранения;
				СтруктураЗаполнения.Вставить("МестоХранения", МестоХранения); 
				УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеМестаХранения("МестоХранения",
					ТекущийДокумент.Дата, МестоХранения), СтруктураЗаполнения);
					
				// Организация.
				Если ЗначениеЗаполнено(МестоХранения) Тогда
					Если ЗначениеЗаполнено(МестоХранения.Организация) Тогда
						СтруктураЗаполнения.Вставить("Организация", МестоХранения.Организация); 
						УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеОрганизации("Организация",
							ТекущийДокумент.Дата, МестоХранения.Организация), СтруктураЗаполнения);	
					КонецЕсли;
				Иначе 
					СтруктураЗаполнения.Вставить("Организация", ТекущийДокумент.Организация); 
					УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеОрганизации("Организация",
						ТекущийДокумент.Дата, ТекущийДокумент.Организация), СтруктураЗаполнения);	
				КонецЕсли;				
				
				// Подразделение.
				Если ЗначениеЗаполнено(МестоХранения.Подразделение) Тогда
					СтрокаПодразделение = Строка(МестоХранения.Подразделение) +" (" + Строка(МестоХранения) + ")"; 
					СтруктураЗаполнения.Вставить("СтрокаПодразделение", СтрокаПодразделение); 
					СтруктураЗаполнения.Вставить("Подразделение", МестоХранения.Подразделение); 
					УправлениеITОтделом8УФ.ДобавитьСтруктуруВСтруктуру(УправлениеITОтделом8УФ.СтруктураДанныеПодразделения("Подразделение",
						ТекущийДокумент.Дата, МестоХранения.Подразделение), СтруктураЗаполнения);
				Иначе 
					СтрокаПодразделение = Строка(МестоХранения); 
					СтруктураЗаполнения.Вставить("СтрокаПодразделение", СтрокаПодразделение);	
				КонецЕсли;			
					
				МестоХраненияМОЛ 	= Справочники.Сотрудники.ПустаяСсылка();	
				МестоХраненияМОЛИТ 	= Справочники.Сотрудники.ПустаяСсылка();
				
				Если СтруктураЗаполнения.Свойство("МестоХраненияМОЛ") Тогда	
					МестоХраненияМОЛ 	= СтруктураЗаполнения.МестоХраненияМОЛ;
				КонецЕсли;
				
				Если СтруктураЗаполнения.Свойство("МестоХраненияМОЛИТ") Тогда	
					МестоХраненияМОЛИТ 	= СтруктураЗаполнения.МестоХраненияМОЛИТ;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(МестоХраненияМОЛ) Тогда
					СтруктураЗаполнения.Вставить("МестоХраненияМОЛДолжность", МестоХраненияМОЛ.Должность);	
				КонецЕсли;		
				
				Если ЗначениеЗаполнено(МестоХраненияМОЛИТ) Тогда
					СтруктураЗаполнения.Вставить("МестоХраненияМОЛИТДолжность", МестоХраненияМОЛИТ.Должность);	
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				//////////////////////////////////////////////////////////////////////
				// 2-я страница формы.
				НомерСтраницы   					= 2;
				НомерСтроки     					= 1;
				ОтклонениеКоличество				= 0;
				ОтклонениеСумма						= 0;
				ИтогоРезультатИзлишекКолво 			= 0;
				ИтогоРезультатИзлишекСумма			= 0;
				ИтогоПриходИзлишковКолво			= 0;
				ИтогоПриходИзлишковСумма			= 0;
				ИтогоРезультатНедостачаКолво		= 0;
				ИтогоРезультатНедостачаСумма		= 0;
				ИтогоСписаниеНедостачКолонка1Колво 	= 0;
				ИтогоСписаниеНедостачКолонка1Сумма 	= 0;				
				
				// Выводим заголовок таблицы.
				ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
				// Выводим многострочную часть документа.
				ВыборкаСтрокНоменклатуры		= МассивСтруктурИзРезультатаЗапроса(Выборка, РезультатЗапроса);
				КоличествоСтрок					= ВыборкаСтрокНоменклатуры.Количество();
				ОбластьМакетаСтрокаТаблицы   	= Макет.ПолучитьОбласть("СтрокаТаблицы");
				ОбластьМакетаИтогоПоСтранице	= Макет.ПолучитьОбласть("ИтогоПоСтранице");
				ОбластьМакетаПодвал				= Макет.ПолучитьОбласть("Подвал");
				
				Для Каждого СтрокаВыборки Из ВыборкаСтрокНоменклатуры Цикл
					
					СтруктураЗаполненияСтрока 	= Новый Структура;
					СтруктураЗаполненияСтрока.Вставить("НомерСтроки", НомерСтроки);					
					ОтклонениеКоличество		= СтрокаВыборки.Отклонение;
					ОтклонениеСумма				= СтрокаВыборки.Цена * СтрокаВыборки.Отклонение;
					
					Если ОтклонениеКоличество > 0 Тогда						
						
						СтруктураЗаполненияСтрока.Вставить("РезультатИзлишекКолво",   		ОтклонениеКоличество);
						СтруктураЗаполненияСтрока.Вставить("РезультатИзлишекСумма",   		ОтклонениеСумма);
						СтруктураЗаполненияСтрока.Вставить("РезультатНедостачаКолво", 		0);
						СтруктураЗаполненияСтрока.Вставить("РезультатНедостачаСумма", 		0);
						СтруктураЗаполненияСтрока.Вставить("ПриходИзлишковКолво",   		ОтклонениеКоличество);
						СтруктураЗаполненияСтрока.Вставить("ПриходИзлишковСумма",   		ОтклонениеСумма);
						СтруктураЗаполненияСтрока.Вставить("СписаниеНедостачКолонка1Колво", 0);
						СтруктураЗаполненияСтрока.Вставить("СписаниеНедостачКолонка1Сумма", 0);						
						ИтогоРезультатИзлишекКолво = ИтогоРезультатИзлишекКолво + ОтклонениеКоличество;
						ИтогоРезультатИзлишекСумма = ИтогоРезультатИзлишекСумма + ОтклонениеСумма;
						ИтогоПриходИзлишковКолво   = ИтогоПриходИзлишковКолво + ОтклонениеКоличество;
						ИтогоПриходИзлишковСумма   = ИтогоПриходИзлишковСумма + ОтклонениеСумма;
						
					Иначе
						СтруктураЗаполненияСтрока.Вставить("РезультатИзлишекКолво",   		0);
						СтруктураЗаполненияСтрока.Вставить("РезультатИзлишекСумма",   		0);
						СтруктураЗаполненияСтрока.Вставить("РезультатНедостачаКолво", 		- ОтклонениеКоличество);
						СтруктураЗаполненияСтрока.Вставить("РезультатНедостачаСумма", 		- ОтклонениеСумма);
						СтруктураЗаполненияСтрока.Вставить("ПриходИзлишковКолво",   		0);
						СтруктураЗаполненияСтрока.Вставить("ПриходИзлишковСумма",   		0);
						СтруктураЗаполненияСтрока.Вставить("СписаниеНедостачКолонка1Колво", - ОтклонениеКоличество);
						СтруктураЗаполненияСтрока.Вставить("СписаниеНедостачКолонка1Сумма", - ОтклонениеСумма);						
						ИтогоРезультатНедостачаКолво 		= ИтогоРезультатНедостачаКолво + (- ОтклонениеКоличество);
						ИтогоРезультатНедостачаСумма 		= ИтогоРезультатНедостачаСумма + (- ОтклонениеСумма);
						ИтогоСписаниеНедостачКолонка1Колво 	= ИтогоСписаниеНедостачКолонка1Колво + (- ОтклонениеКоличество);
						ИтогоСписаниеНедостачКолонка1Сумма 	= ИтогоСписаниеНедостачКолонка1Сумма + (- ОтклонениеСумма);
					КонецЕсли;					
					
					ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрокаТаблицы.Параметры, СтрокаВыборки);				
					ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрокаТаблицы.Параметры, СтруктураЗаполненияСтрока);
					
					// Проверка вывода.
					СтрокаСПодвалом = Новый Массив();
					СтрокаСПодвалом.Добавить(ОбластьМакетаСтрокаТаблицы);
					СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
					
					Если НЕ ТабличныйДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда						
						Если НЕ КоличествоСтрок = 1 Тогда							
							// Вывод итого по странице.
							ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
							
							// Вывод разделителя страниц.
							ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
							
							// Вывод заголовка таблицы.
							НомерСтраницы = НомерСтраницы + 1;
							ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
							ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);							
						КонецЕсли;						
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);					
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;				
				
				// Вывод итогов по странице.
				СтруктураЗаполненияИтоговПоСтранице = Новый Структура;
				СтруктураЗаполненияИтоговПоСтранице.Вставить("ИтогоРезультатИзлишекКолво", 			ИтогоРезультатИзлишекКолво);
				СтруктураЗаполненияИтоговПоСтранице.Вставить("ИтогоРезультатИзлишекСумма", 			ИтогоРезультатИзлишекСумма);
				СтруктураЗаполненияИтоговПоСтранице.Вставить("ИтогоПриходИзлишковКолво", 			ИтогоРезультатИзлишекКолво);
				СтруктураЗаполненияИтоговПоСтранице.Вставить("ИтогоПриходИзлишковСумма", 			ИтогоРезультатИзлишекСумма);
				СтруктураЗаполненияИтоговПоСтранице.Вставить("ИтогоРезультатНедостачаКолво",		ИтогоРезультатИзлишекКолво);
				СтруктураЗаполненияИтоговПоСтранице.Вставить("ИтогоРезультатНедостачаСумма",		ИтогоРезультатИзлишекСумма);
				СтруктураЗаполненияИтоговПоСтранице.Вставить("ИтогоСписаниеНедостачКолонка1Колво", 	ИтогоРезультатИзлишекКолво);
				СтруктураЗаполненияИтоговПоСтранице.Вставить("ИтогоСписаниеНедостачКолонка1Сумма", 	ИтогоРезультатИзлишекСумма);
				
				ЗаполнитьЗначенияСвойств(ОбластьМакетаИтогоПоСтранице.Параметры, СтруктураЗаполненияИтоговПоСтранице); 				
				ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				// Вывод подвала.
				ЗаполнитьЗначенияСвойств(ОбластьМакетаПодвал.Параметры, СтруктураЗаполнения);
				ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЦикла;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);

	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр= Истина;
	ТабличныйДокумент.АвтоМасштаб 	= Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСписания") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСписания", НСтр("ru = 'Акт списания'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктСписания"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Инвентаризация") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Инвентаризация", НСтр("ru = 'Инвентаризация'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "Инвентаризация"));	
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БланкТоварногоНаполнения") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "БланкТоварногоНаполнения", НСтр("ru = 'Бланк товарного наполнения'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "БланкТоварногоНаполнения"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ22") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ22", НСтр("ru = 'Приказ о проведении инвентаризации'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ИНВ22"));

	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ3") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ3", НСтр("ru = 'Инвентаризационная опись'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ИНВ3"));

	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ19") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ19", НСтр("ru = 'Сличительная ведомость'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ИНВ19"));
		
	КонецЕсли;
		
КонецПроцедуры

// Функция получает данные для печати.
//
Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам  = Новый Соответствие;
	ОписаниеОбластей 	  = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов           = Новый Соответствие;
	МакетыСтруктура		  = Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов", ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов);	
	
	Возврат Новый Структура("Данные, Макеты", ДанныеПоВсемОбъектам, МакетыСтруктура);
	
КонецФункции 

// Функция получает данные для печати этикеток.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт
	
	Запрос 			= Новый Запрос();
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ИнвентаризацияНоменклатура.Ссылка.Организация,
		|	ИнвентаризацияНоменклатура.Ссылка.МестоХранения,
		|	ИнвентаризацияНоменклатура.Номенклатура КАК Номенклатура,
		|	ИнвентаризацияНоменклатура.КарточкаНоменклатуры,
		|	ИнвентаризацияНоменклатура.Количество КАК КоличествоЭтикеток,
		|	ИнвентаризацияНоменклатура.Сумма,
		|	ШтрихкодыНоменклатуры.Штрихкод,
		|	ОтветственныеСотрудникиСрезПоследних.Сотрудник КАК ОтветственныйСотрудник,
		|	ОтветственныеСотрудникиИТОтделаСрезПоследних.Сотрудник КАК ОтветственныйСотрудникITОтдела,
		|	ИнвентаризацияНоменклатура.Количество
		|ИЗ
		|	Документ.Инвентаризация.Номенклатура КАК ИнвентаризацияНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО (ИнвентаризацияНоменклатура.КарточкаНоменклатуры = ШтрихкодыНоменклатуры.Номенклатура
		|				ИЛИ ИнвентаризацияНоменклатура.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудники.СрезПоследних КАК ОтветственныеСотрудникиСрезПоследних
		|		ПО ИнвентаризацияНоменклатура.Ссылка.МестоХранения = ОтветственныеСотрудникиСрезПоследних.МестоХранения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудникиИТОтдела.СрезПоследних КАК ОтветственныеСотрудникиИТОтделаСрезПоследних
		|		ПО ИнвентаризацияНоменклатура.Ссылка.МестоХранения = ОтветственныеСотрудникиИТОтделаСрезПоследних.МестоХранения
		|ГДЕ
		|	ИнвентаризацияНоменклатура.Ссылка В(&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнвентаризацияНоменклатура.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Инвентаризация.Организация,
		|	Инвентаризация.МестоХранения
		|ИЗ
		|	Документ.Инвентаризация КАК Инвентаризация
		|ГДЕ
		|	Инвентаризация.Ссылка В(&МассивДокументов)";
		
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = УправлениеITОтделом8УФ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = УправлениеITОтделом8УФ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "МестоХранения").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Штрихкоды", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт списания.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор 	= "АктСписания";
	КомандаПечати.Представление 	= НСтр("ru = 'Акт списания'");
	КомандаПечати.СписокФорм 		= "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок 			= 4;
	
	// Инвентаризация.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор 	= "Инвентаризация";
	КомандаПечати.Представление 	= НСтр("ru = 'Инвентаризация'");
	КомандаПечати.СписокФорм 		= "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок 			= 8;
		
	// ИНВ3.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор 	= "ИНВ3";
	КомандаПечати.Представление 	= НСтр("ru = 'ИНВ-3 (Инвентаризационная опись)'");
	КомандаПечати.СписокФорм 		= "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок 			= 12;
	
	// ИНВ19.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор 	= "ИНВ19";
	КомандаПечати.Представление 	= НСтр("ru = 'ИНВ-19 (Сличительная ведомость)'");
	КомандаПечати.СписокФорм 		= "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок 			= 13;
	
	// ИНВ22.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор 	= "ИНВ22";
	КомандаПечати.Представление 	= НСтр("ru = 'ИНВ-22 (Приказ о проведении инвентаризации)'");
	КомандаПечати.СписокФорм 		= "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок 			= 14;
	
	// Бланк товарного наполнения.
	КомандаПечати 					= КомандыПечати.Добавить();
	КомандаПечати.Идентификатор 	= "БланкТоварногоНаполнения";
	КомандаПечати.Представление 	= НСтр("ru = 'Бланк товарного наполнения'");
	КомандаПечати.СписокФорм 		= "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок 			= 20;
	
КонецПроцедуры

Функция МассивСтруктурИзРезультатаЗапроса(Выборка, РезультатЗапроса)
	
	Результат 		= Новый Массив;	
	ВыборкаСтрок	= Выборка.Выбрать();	
		
	Пока ВыборкаСтрок.Следующий() Цикл	
		СтруктураРезультата = Новый Структура();
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл			
			КолонкаИмя = Колонка.Имя;			
			СтруктураРезультата.Вставить(КолонкаИмя, ВыборкаСтрок[КолонкаИмя]);
			Попытка 
				НаборСтандартныхРеквизитов = ВыборкаСтрок[КолонкаИмя].Метаданные().СтандартныеРеквизиты;
				Для Каждого СтандартныйРеквизит Из  НаборСтандартныхРеквизитов Цикл
					СтруктураРезультата.Вставить(КолонкаИмя + СтандартныйРеквизит.Имя, ВыборкаСтрок[КолонкаИмя][СтандартныйРеквизит.Имя]);
				КонецЦикла;
			Исключение
				Продолжить;
			КонецПопытки;			
			Попытка 
				НаборРеквизитов = ВыборкаСтрок[КолонкаИмя].Метаданные().Реквизиты;
				Для Каждого РеквизитОбъекта Из НаборРеквизитов Цикл
					СтруктураРезультата.Вставить(КолонкаИмя + РеквизитОбъекта.Имя, ВыборкаСтрок[КолонкаИмя][РеквизитОбъекта.Имя]);
				КонецЦикла;
			Исключение
				Продолжить;
			КонецПопытки;			
		КонецЦикла;
		
		Если СтруктураРезультата.Свойство("НоменклатураВидНоменклатуры") Тогда
			СтруктураРезультата.Вставить("ВидНоменклатуры",СтруктураРезультата.НоменклатураВидНоменклатуры); 
		КонецЕсли;
		
		Если СтруктураРезультата.Свойство("КарточкаНоменклатурыСерийныйНомер") Тогда
			СтруктураРезультата.Вставить("СерийныйНомер",СтруктураРезультата.КарточкаНоменклатурыСерийныйНомер); 
		КонецЕсли;
		
		Если СтруктураРезультата.Свойство("КарточкаНоменклатурыИнвентарныйНомер") Тогда
			СтруктураРезультата.Вставить("ИнвентарныйНомер",СтруктураРезультата.КарточкаНоменклатурыИнвентарныйНомер); 
		КонецЕсли;
		
		Результат.Добавить(СтруктураРезультата);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли