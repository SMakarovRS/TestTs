
#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки; // Используется при изменении строки табличной части.

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СЛС.ПриСозданииНаСервере(Объект, Отказ, СтандартнаяОбработка, Параметры, ЭтаФорма);	
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Параметры.Свойство("МестоХранения") Тогда
		Объект.МестоХранения = Параметры.МестоХранения;
	КонецЕсли;
	Если Параметры.Свойство("Организация") Тогда
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
		КонецЕсли;		
	КонецЕсли;
	Если Параметры.Свойство("АдресНоменклатуры") Тогда		
		ТЗ = ПолучитьИзВременногоХранилища(Параметры.АдресНоменклатуры);
		Объект.Номенклатура.Загрузить(ТЗ);		
		УдалитьИзВременногоХранилища(Параметры.АдресНоменклатуры);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		// Документ создается из обработки "РабочийСтол".
		Если Параметры.Свойство("РабочийСтолЗначенияЗаполнения") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.РабочийСтолЗначенияЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
		
	#Область БСП_ПриСозданииНаСервере
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	

	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ВерсионированиеОбъектов
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеITОтделом8УФПовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ДеревоНоменклатурыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
			
	#КонецОбласти
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновное;
	Иначе	
		ТекущийЭлемент = Элементы.ДеревоНоменклатуры;
	КонецЕсли;	
	
	// Вывод дерева.	
	ВывестиДеревоНоменклатуры();
	
	Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = 
		УправлениеITОтделом8УФ.ОтображатьИнвентарныеСерийныеНомера();
		
	Если Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = Истина Тогда
		ОбновитьИнвентарныеИСерийныеНомераНаСервере();
	КонецЕсли;
	
	Элементы.РабочаяГруппаЗарегистрироватьДокумент.Видимость = Ложь;
		//ПолучитьФункциональнуюОпцию("ИспользоватьМобильноеПриложение") = Истина;
	
	УстановитьВидимостьДоступность();	
	
	// Оформление дерева номенклатуры.
	ЭлементУО 						=   УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
	ЭлементУсловия 					=ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.Отклонение"); 
	ЭлементУсловия.ВидСравнения  	= ВидСравненияКомпоновкиДанных.Больше;
	ЭлементУсловия.ПравоеЗначение  	= 0;
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыНоменклатура");
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыКарточкаНоменклатуры");	
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыОтклонение");	
	
	ЭлементУО 						=   УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	ЭлементУсловия 					=ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.Отклонение"); 
	ЭлементУсловия.ВидСравнения  	= ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементУсловия.ПравоеЗначение  	= 0;
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыНоменклатура");
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыКарточкаНоменклатуры");	
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыОтклонение");		
	
	// Учет остатков контрагентов.
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Организация");
	УправлениеITОтделом8УФ.УстановитьОграничениеТипаДляЭлементовФормы(ЭтаФорма, МассивЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор,
			ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Корректировки документа
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// Разворачиваем дерево
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
	ПредыдущиеРеквизитыСтроки = СтруктураСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
		
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда		
		ПоддерживаемыеТипыВО = Новый Массив();		
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");		
		ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриОтключении, УникальныйИдентификатор,
			ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
       ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Корректировки документа.
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, 
			"ДокументИнвентаризация (проведение)");	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СЛС.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства.
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства.
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения.
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения.
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды.
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды.
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры // ПриЧтенииНаСервере().

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ТекущийОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		ТекущийОбъект.ДатаКорректировки = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ТекущийОбъект.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	Иначе
		ТекущийОбъект.АвторКорректировки = Пользователи.ТекущийПользователь();
	КонецЕсли; 
	
	СохранитьДеревоНоменклатуры(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства.
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства.
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СЛС.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);	
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ВыборКарточкиНоменклатуры" Тогда
		
		НайденнаяСтрока = ДеревоНоменклатуры.НайтиПоИдентификатору(Параметр.ИдентификаторСтрокиНоменклатурыВладельца);
		Если НайденнаяСтрока <> Неопределено 
				И УправлениеITОтделом8УФКлиентСервер.ПолучитьРодительскуюФормуЭлемента(Параметр.ВладелецФормы) = ЭтаФорма Тогда
				
			НайденнаяСтрока.КарточкаНоменклатуры 	= Источник.Ссылка;
			НайденнаяСтрока.ИнвентарныйНомер 		= Источник.ИнвентарныйНомер;
			НайденнаяСтрока.СерийныйНомер 			= Источник.СерийныйНомер;
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства.
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства.
	
	// ПодключаемоеОборудование.
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				// Достаем штрихкод из основных данных.
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1));
			Иначе
				// Достаем штрихкод из дополнительных данных.
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1));
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование.
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВыбораОрганизацииКонтрагента"
		И ИсточникВыбора.ВладелецФормы = ЭтаФорма Тогда
		УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбораФормы(ЭтаФорма, 
		 				"Организация",
						Объект.Организация,
						ВыбранноеЗначение,
						Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект));	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении().

// Обработчики событий по реквизиту "Организация".
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Номенклатура.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОрганизацияНачалоВыбораЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	ОрганизацияНачалоВыбораФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт	
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;    
	ОрганизацияНачалоВыбораФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбораФрагмент()
	
	ОчиститьДеревоНоменклатуры();	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.Организации.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("ОрганизацияВыбрана",ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияВыбрана(Результат, ДополнительныеПараметры) Экспорт	
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.Организация 			= Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Организация) И Объект.Номенклатура.Количество()>0 Тогда
		СтандартнаяОбработка= Ложь;
		Ответ 				= Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОрганизацияИзменениеТекстаРедактированияЗавершение", 
			ЭтотОбъект, Новый Структура("Организация",Объект.Организация)), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОрганизацияИзменениеТекстаРедактированияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияИзменениеТекстаРедактированияЗавершение(Результат, ДополнительныеПараметры) Экспорт	
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("Организация") Тогда 
			Объект.Организация = ДополнительныеПараметры.Организация;
		КонецЕсли;
		Возврат;		
	КонецЕсли;    
	ОрганизацияИзменениеТекстаРедактированияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияИзменениеТекстаРедактированияФрагмент()	
	
	ОчиститьДеревоНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если Объект.Номенклатура.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОрганизацияНачалоВыбораЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;	
	
	ОрганизацияНачалоВыбораФрагмент();
	
КонецПроцедуры

// Обработчики событий по фильтру "Место хранения"
//
&НаКлиенте
Процедура МестоХраненияПриИзменении(Элемент)	
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	
	Если Объект.Номенклатура.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("МестоХраненияНачалоВыбораЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	МестоХраненияНачалоВыбораФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт	
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;    
	МестоХраненияНачалоВыбораФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияНачалоВыбораФрагмент()	
	
	ОчиститьДеревоНоменклатуры();			    
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОтборСтруктура = Новый Структура;
		ОтборСтруктура.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Отбор", ОтборСтруктура); 
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.МестаХранения.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("МестоХраненияВыбрано", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияВыбрано(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.МестоХранения = Результат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.МестоХранения) И Объект.Номенклатура.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("МестоХраненияОчисткаЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	МестоХраненияОчисткаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияОчисткаЗавершение(Результат, ДополнительныеПараметры) Экспорт 	
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	МестоХраненияОчисткаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияОчисткаФрагмент()
	
	ОчиститьДеревоНоменклатуры();			    
	Объект.МестоХранения 								= ПредопределенноеЗначение("Справочник.МестаХранения.ПустаяСсылка");
	Объект.СУчетомПодчиненныхМестХранения 				= Ложь;
	Элементы.СУчетомПодчиненныхМестХранения.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если Объект.Номенклатура.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("МестоХраненияИзменениеТекстаЗавершение", ЭтотОбъект,
			Новый Структура("МестоХранения",Объект.МестоХранения)), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	МестоХраненияИзменениеТекстаРедактированияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияИзменениеТекстаЗавершение(Результат, ДополнительныеПараметры) Экспорт	
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда		
		Если ДополнительныеПараметры.Свойство("МестоХранения") Тогда 
			Объект.МестоХранения = ДополнительныеПараметры.МестоХранения;
		КонецЕсли;
		Возврат;		
	КонецЕсли;
	
	МестоХраненияИзменениеТекстаРедактированияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияИзменениеТекстаРедактированияФрагмент()
	
	ОчиститьДеревоНоменклатуры();
	
КонецПроцедуры

// Обработчики событий по фильтру "СУчетомПодчиненныхМестХранения".
//
&НаКлиенте
Процедура СУчетомПодчиненныхМестХраненияПриИзменении(Элемент)
	
	Если Объект.Номенклатура.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("СУчетомПодчиненныхМестХраненияПриИзмененииОкончание", 
			ЭтотОбъект,Новый Структура("СУчетомПодчиненныхМестХранения", Объект.СУчетомПодчиненныхМестХранения)), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	СУчетомПодчиненныхМестХраненияПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СУчетомПодчиненныхМестХраненияПриИзмененииОкончание(Результат, ДополнительныеПараметры) Экспорт	
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("СУчетомПодчиненныхМестХранения") Тогда 
			Объект.СУчетомПодчиненныхМестХранения = Не ДополнительныеПараметры.СУчетомПодчиненныхМестХранения;
		КонецЕсли;		
		Возврат;
	КонецЕсли;
	
	СУчетомПодчиненныхМестХраненияПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СУчетомПодчиненныхМестХраненияПриИзмененииФрагмент()
	
	ОчиститьДеревоНоменклатуры();
	
КонецПроцедуры

// Обработчики событий по фильтру "ОтветственныйСотрудник".
//
&НаКлиенте
Процедура ОтветственныйСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Номенклатура.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтветственныйСотрудникНачалоВыбораЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОтветственныйСотрудникНачалоВыбораФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт	
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОтветственныйСотрудникНачалоВыбораФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникНачалоВыбораФрагмент()	
	
	ОчиститьДеревоНоменклатуры();			    
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("СотрудникВыбран",ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникВыбран(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ОтветственныйСотрудник = Результат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ОтветственныйСотрудник) И Объект.Номенклатура.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтветственныйСотрудникОчисткаЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОтветственныйСотрудникОчисткаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникОчисткаЗавершение(Результат, ДополнительныеПараметры) Экспорт 	
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОтветственныйСотрудникОчисткаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникОчисткаФрагмент()	
	
	ОчиститьДеревоНоменклатуры();			    
	Объект.ОтветственныйСотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");			
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)	
	
	Если Объект.Номенклатура.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтветственныйСотрудникИзменениеТекстаРедактированияЗавершение", ЭтотОбъект,
			Новый Структура("ОтветственныйСотрудник",Объект.ОтветственныйСотрудник)), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОтветственныйСотрудникИзменениеТекстаРедактированияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникИзменениеТекстаРедактированияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("ОтветственныйСотрудник") Тогда 
			Объект.ОтветственныйСотрудник = ДополнительныеПараметры.ОтветственныйСотрудник;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОтветственныйСотрудникИзменениеТекстаРедактированияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникИзменениеТекстаРедактированияФрагмент()
	
	ОчиститьДеревоНоменклатуры();
	
КонецПроцедуры

// Обработчики событий по фильтру "ОтветственныйСотрудникИТ"
//
&НаКлиенте
Процедура ОтветственныйСотрудникИТОтделаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Номенклатура.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтветственныйСотрудникИТОтделаНачалоВыбораЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОтветственныйСотрудникИТОтделаНачалоВыбораФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникИТОтделаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт	
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОтветственныйСотрудникИТОтделаНачалоВыбораФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникИТОтделаНачалоВыбораФрагмент()	
	
	ОчиститьДеревоНоменклатуры();			    
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("СотрудникИТВыбран",ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникИТВыбран(Результат, ДополнительныеПараметры) Экспорт	
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ОтветственныйСотрудникИТОтдела = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникИТОтделаОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ОтветственныйСотрудникИТОтдела) И Объект.Номенклатура.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтветственныйСотрудникИТОтделаОчисткаЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОтветственныйСотрудникИТОтделаОчисткаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникИТОтделаОчисткаЗавершение(Результат, ДополнительныеПараметры) Экспорт	
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ОтветственныйСотрудникИТОтделаОчисткаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникИТОтделаОчисткаФрагмент()	
	
	ОчиститьДеревоНоменклатуры();			    
	Объект.ОтветственныйСотрудникИТОтдела = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");			
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникИТОтделаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если Объект.Номенклатура.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтветственныйСотрудникИТОтделаИзменениеТекстаРедактированияЗавершение", 
			ЭтотОбъект, Новый Структура("ОтветственныйСотрудникИТОтдела", Объект.ОтветственныйСотрудникИТОтдела)), 
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОтветственныйСотрудникИТОтделаИзменениеТекстаРедактированияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникИТОтделаИзменениеТекстаРедактированияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("ОтветственныйСотрудникИТОтдела") Тогда 
			Объект.ОтветственныйСотрудникИТОтдела = ДополнительныеПараметры.ОтветственныйСотрудникИТОтдела;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОтветственныйСотрудникИТОтделаИзменениеТекстаРедактированияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСотрудникИТОтделаИзменениеТекстаРедактированияФрагмент()
	ОчиститьДеревоНоменклатуры();	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьАвторНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Спк = УправлениеITОтделом8УФКлиент.ПолучитьСписокНадписьАвтор(Объект);	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НадписьАвторНажатиеЗавершение", ЭтотОбъект), 
		Спк, Элементы.НадписьАвтор,);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ДеревоНоменклатурыПриИзменении(Элемент)
	
	ОбновитьНумерациюВДеревеЗначенийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;	
	Если СтрокаТабличнойЧасти = Неопределено Тогда		
		Возврат;		
	КонецЕсли;
	
	Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр 	= 
		НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
		
	Элементы.ДеревоНоменклатурыИнвентарныйНомер.ТолькоПросмотр 		= 
		Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;
		
	Элементы.ДеревоНоменклатурыСерийныйНомер.ТолькоПросмотр 		= 
		Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр;	
		
	Элементы.ДеревоНоменклатурыЕдиницаИзмерения.ТолькоПросмотр 		= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) 
		И УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура)
		И СтрокаТабличнойЧасти.Количество > 1 Тогда
		
		СтрокаТабличнойЧасти.Количество = 1;
		ДополнительныеПараметры	= 
			Новый Структура("ЕдиницаИзмерения, МестоХранения, НавСсылка, Номенклатура, СуммаУчет, Цена");
			
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, СтрокаТабличнойЧасти); 		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаДобавитьСтроку", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = Новый Массив;
		ТекстВопроса.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = 'Для номенклатуры %1 используется '"), 
			СтрокаТабличнойЧасти.Номенклатура)));			
		ТекстВопроса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'учет по карточкам.'"), Новый Шрифт(,, Истина)));
		ТекстВопроса.Добавить(Символы.ПС);	
		ТекстВопроса.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Количество такой номенклатуры в строке не может быть больше единицы.'")));			
		ТекстВопроса.Добавить(Символы.ПС);	
		ТекстВопроса.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Добавить новую строку с этой номенклатурой?'")));			
		ТекстИтог = Новый ФорматированнаяСтрока(ТекстВопроса);		
				
		ПоказатьВопрос(ОписаниеОповещения, ТекстИтог, РежимДиалогаВопрос.ДаНет);		
		Возврат;		
	КонецЕсли;	
	
	МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура, Партия, КарточкаНоменклатуры",
		СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Партия, СтрокаТабличнойЧасти.КарточкаНоменклатуры));
	
	Если МассивСтрокТЧ.Количество() > 0 Тогда
		НайденнаяСтрока = МассивСтрокТЧ[0];
		НайденнаяСтрока.Количество = Элемент.ТекстРедактирования;
		РассчитатьСуммуВСтрокеТабличнойЧасти();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаДобавитьСтроку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ДеревоНоменклатуры.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДополнительныеПараметры); 
	НоваяСтрока.Количество		= 1;
	НоваяСтрока.Отклонение		= 1;
	НоваяСтрока.УчетПоКарточкам = Истина;
	НоваяСтрока.РазрешатьУдалять= Истина;
	
	СохранитьДеревоНоменклатуры();	
	ОбновитьНумерациюВДеревеЗначенийНаСервере();	
	Элементы.ДеревоНоменклатуры.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для Каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
		
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
		
	КонецЕсли;	
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = 
			СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
			
	КонецЕсли; 		
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность	= Истина;
	РеквизитДерево 		= ЭтаФорма["ДеревоНоменклатуры"];
	Отказ				= Истина;
	
	Если Копирование Тогда		
		НоваяСтрока = ДеревоНоменклатурыДобавитьСтрокуКопированием(РеквизитДерево, Неопределено, СтрокаТабличнойЧасти);		
		ОбновитьНумерациюВДеревеЗначенийНаСервере();
		Если НЕ НоваяСтрока = Неопределено Тогда
			 Элементы.ДеревоНоменклатуры.Развернуть(НоваяСтрока.ПолучитьИдентификатор(),Истина);
		КонецЕсли;		 
		Возврат;		
	КонецЕсли;
	
	НоваяСтрока		= ДобавитьСтрокуДерева(РеквизитДерево, Неопределено);
	НоваяСтрока.Количество		= 1;
	НоваяСтрока.Отклонение		= 1;	
	
	Если ЗначениеЗаполнено(Объект.МестоХранения) Тогда
		НоваяСтрока.МестоХранения = Объект.МестоХранения;
	КонецЕсли;	
	
	НоваяСтрока.РазрешатьУдалять= Истина;	
	ТекущийЭлемент				= Элемент;
	Элемент.ТекущаяСтрока 		= НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент				= Элементы.ДеревоНоменклатурыНоменклатура;
	Элемент.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Функция ДеревоНоменклатурыДобавитьСтрокуКопированием(РеквизитДерево, Приемник, Источник)
	Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;
	    
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(НоваяСтрока.Номенклатура) Тогда 
		НоваяСтрока.КарточкаНоменклатуры = ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
	КонецЕсли;	

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
        ДеревоНоменклатурыДобавитьСтрокуКопированием(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
	КонецЦикла;
	
    Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана номенклатура для выбора карточки'"));
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидимостьОтборПоступление", Ложь);
	ПараметрыФормы.Вставить("ОтборНоменклатура", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.КарточкаНоменклатуры);	
	ПараметрыФормы.Вставить("Владелец"									, СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ИдентификаторСтрокиНоменклатурыВладельца"	, СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	
	ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыСерийныйНомерПриИзменении(Элемент)
	
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ИзменитьНомерНаСервере(Элементы.ДеревоНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры, "СерийныйНомер",
		Элементы.ДеревоНоменклатуры.ТекущиеДанные.СерийныйНомер);
		
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыИнвентарныйНомерПриИзменении(Элемент)
	
	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ИзменитьНомерНаСервере(Элементы.ДеревоНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры, "ИнвентарныйНомер",
		Элементы.ДеревоНоменклатуры.ТекущиеДанные.ИнвентарныйНомер);
		
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборУслуги", Ложь);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("Ключ", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТабличнойЧасти.Номенклатура);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;	
	СтруктураДанные 	 = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);	
	СтруктураДанные 	 = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения     = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество           = 1;
	СтрокаТабличнойЧасти.Отклонение			  = 1;
	СтрокаТабличнойЧасти.НавСсылка            = СтруктураДанные.НавСсылка;
	СтрокаТабличнойЧасти.КарточкаНоменклатуры = СтруктураДанные.КарточкаНоменклатуры;	
	Элементы.ДеревоНоменклатурыКарточкаНоменклатуры.ТолькоПросмотр = 
		НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;		
	СтрокаТабличнойЧасти.КарточкаНоменклатуры = ВыбранноеЗначение;
	ИнвентарныйСерийныйНомер = ПолучитьУчетныеДанныеПоКарточкеНаСервере(ВыбранноеЗначение);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ИнвентарныйСерийныйНомер);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУчетныеДанныеПоКарточкеНаСервере(КарточкаНоменклатуры)
	
	СтруктураВозврата = Новый Структура("ИнвентарныйНомер, СерийныйНомер, Цена, Сумма");		
	СтруктураВозврата.ИнвентарныйНомер 	= КарточкаНоменклатуры.ИнвентарныйНомер;
	СтруктураВозврата.СерийныйНомер 	= КарточкаНоменклатуры.СерийныйНомер;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) КАК Количество,
		|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(
		|			&Дата,
		|			Организация = &Организация
		|				И Номенклатура = &КарточкаНоменклатуры) КАК ОстаткиОстатки";
	
	Запрос.УстановитьПараметр("Дата", ?(Объект.Ссылка.Пустая(), ТекущаяДатаСеанса(), Объект.Дата));	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("КарточкаНоменклатуры", КарточкаНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда						
		СтруктураВозврата.Цена	= ?(Выборка.Количество = 0, 0, Выборка.Сумма / Выборка.Количество);		
		СтруктураВозврата.Сумма	= Выборка.Сумма;
	Иначе
		СтруктураВозврата.Цена	= 0;
		СтруктураВозврата.Сумма	= 0;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрана номенклатура для создания карточки.'"));
		Возврат;
	КонецЕсли;	
	                                                                                    
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец"									, СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ИдентификаторСтрокиНоменклатурыВладельца"	, СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	
	Форма 			= ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаОбъекта", ПараметрыФормы, Элемент);
	Форма.ВладелецФормы = Элемент; 
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина; 
	Форма.Открыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбрана номенклатура для создания карточки.'"));
		Возврат;
	КонецЕсли;	
	                                                                                    
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ"										, СтрокаТабличнойЧасти.КарточкаНоменклатуры);
	ПараметрыФормы.Вставить("Владелец"									, СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ИдентификаторСтрокиНоменклатурыВладельца"	, СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	
	Форма 			= ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаОбъекта", ПараметрыФормы, Элемент);
	Форма.ВладелецФормы = Элемент; 
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина; 
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломИзменения(Элемент, Отказ)
	
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.ДеревоНоменклатуры.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьТабличнуюЧастьНоменклатура();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПослеУдаления(Элемент)
	
	СохранитьДеревоНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыКарточкаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнвентарныйСерийныйНомер = ПолучитьИнвентарныйСерийныйНомерМестоХраненияНаСервере(
		СтрокаТабличнойЧасти.КарточкаНоменклатуры);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ИнвентарныйСерийныйНомер);
	ОбработкаТабличныхЧастейКлиент.ЗаполнитьКомплектПартию(СтрокаТабличнойЧасти);
	ДеревоНоменклатурыКоличествоПриИзменении(Элемент);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)	
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не заполнена организация.'"));
		Возврат;		
	КонецЕсли;
	
	// Записываем документ.
	Если Объект.Ссылка.Пустая() Тогда
		Результат = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Документ не записан. Для продолжения необходимо его записать. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоОстаткамФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетноеКоличество(Команда)
	
	Если Объект.Номенклатура.Количество() > 0 Тогда
		Ответ = Неопределено;		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьУчетноеКоличествоЗавершение", ЭтотОбъект),
			НСтр("ru = 'Учетные данные будут перезаполнены. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);		
		Возврат;
		
	Иначе		
		Возврат;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьКоличествоИСумму(Команда)
	
	Если Объект.Номенклатура.Количество() > 0 Тогда
		Ответ = Неопределено;		
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаОбнулитьКоличествоИСуммуЗавершение", ЭтотОбъект),
			НСтр("ru = 'Колонки ""Количество"" и ""Сумма"" будут очищены. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);		
		Возврат;
		
	Иначе		
		Возврат;
		
	КонецЕсли;
	
	КомандаОбнулитьКоличествоИСуммуФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(Команда)
	
	Если Объект.Номенклатура.Количество()>0 Тогда
		Результат = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьТабличнуюЧастьЗавершение", ЭтотОбъект),
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОчиститьТабличнуюЧастьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)), 
		ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОповещенияПриЗагрузкеИзТСД = Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗагрузкеИзТСД, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	
	РазвернутьСвернутьТЧНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступление(Команда)
	
	Если Объект.Закрыт Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'В документе установлен флаг ""Закрыт"". Создание нового документа невозможно.'"));
		Возврат;
	КонецЕсли;	
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Модифицированность 
		ИЛИ НЕ Объект.Проведен Тогда
		ДопПараметры		= Новый Структура("ВидДокумента", "Поступление");
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеВопросаЗаписатьДокумент", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Документ еще не записан или не проведен.
			|Выполнение действия ""Поступление: создать на основании""
			|возможно только после записи и проведения документа.
			|Документ будет записан и проведен.'"),
			РежимДиалогаВопрос.ОКОтмена);
		Возврат;	
	КонецЕсли;
	
	СоздатьПоступлениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписание(Команда)
	
	Если Объект.Закрыт Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'В документе установлен флаг ""Закрыт"". Создание нового документа невозможно.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Модифицированность 
		ИЛИ НЕ Объект.Проведен Тогда
		ДопПараметры		= Новый Структура("ВидДокумента", "Списание");
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеВопросаЗаписатьДокумент", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Документ еще не записан или не проведен.
			|Выполнение действия ""Списание: создать на основании""
			|возможно только после записи и проведения документа.
			|Документ будет записан и проведен.'"),
			РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;	
		
	СоздатьСписаниеФрагмент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, 
	СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область БПО

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область УчетОстатковКонтрагентов

&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
			
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикНачалоВыбора(ЭтаФорма, Объект.Организация, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикАвтоПодбор(ЭтаФорма, 
		"Организация",
		Текст, 
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
				
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Очистка(Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбора(ЭтаФорма, 
		"Организация", 
		Объект.Организация,
		Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект),
		ВыбранноеЗначение,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	ОрганизацияПриИзменении(Неопределено);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Номенклатура.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПодразделениеНачалоВыбораЗавершение", ЭтотОбъект),
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПодразделениеНачалоВыбораФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПодразделениеНачалоВыбораФрагмент();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеНачалоВыбораФрагмент()
	
	ОчиститьДеревоНоменклатуры();			    
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.Подразделения.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор,,, 
		Новый ОписаниеОповещения("ПодразделениеВыбран", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеВыбран(Результат, ДополнительныеПараметры) Экспорт	
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.Подразделение = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) И Объект.Номенклатура.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПодразделениеОчисткаЗавершение", ЭтотОбъект),
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПодразделениеОчисткаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОчисткаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПодразделениеОчисткаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОчисткаФрагмент()
	
	ОчиститьДеревоНоменклатуры();			    
	Объект.Подразделение = ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если Объект.Номенклатура.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПодразделениеИзменениеТекстаРедактированияЗавершение",
			ЭтотОбъект,Новый Структура("ОтветственныйСотрудникИТОтдела",Объект.Подразделение)),
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПодразделениеИзменениеТекстаРедактированияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеИзменениеТекстаРедактированияЗавершение(Результат, ДополнительныеПараметры) Экспорт 	
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("Подразделение") Тогда 
			Объект.Подразделение = ДополнительныеПараметры.Подразделение;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПодразделениеИзменениеТекстаРедактированияФрагмент();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеИзменениеТекстаРедактированияФрагмент()
	
	ОчиститьДеревоНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ДеревоНоменклатурыСерийныйНомер.Видимость 		= 
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
		
	Элементы.ДеревоНоменклатурыИнвентарныйНомер.Видимость 	= 
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
		
	Элементы.СУчетомПодчиненныхМестХранения.Доступность 	= ЗначениеЗаполнено(Объект.МестоХранения);
	
КонецПроцедуры

&НаСервере
Функция ЗначениеНаСервере(Стр, Параметры = Неопределено)
	
	Возврат Вычислить(Стр);
	
КонецФункции

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияНачалоВыбораИзСписка.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	
	СписокЕдиницаИзмерения = Новый СписокЗначений;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);	
	СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, 
		Номенклатура.ЕдиницаИзмерения.Наименование + " " + НСтр("ru = '(ед. хранения)'"));
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Номенклатура);
	
	Родитель = Номенклатура.Родитель;
	
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Прервать;
		Иначе
			МассивОтбора.Добавить(Родитель);
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	КонецЦикла;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка().	

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, 
		ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении().

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	РазностьДат 	= УправлениеITОтделом8УФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);	
	СтруктураДанные = Новый Структура("РазностьДат", РазностьДат);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Содержание", 		СтруктураДанные.Номенклатура.Наименование);	
	СтруктураДанные.Вставить("ЕдиницаИзмерения",СтруктураДанные.Номенклатура.ЕдиницаИзмерения);	
	СтруктураДанные.Вставить("НавСсылка", 		СтруктураДанные.Номенклатура.ВидНоменклатуры.НавСсылка);	
	
	// Проверка, что ведется учет по карточкам.
	СтруктураДанные.Вставить("КарточкаНоменклатуры", 
		УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(СтруктураДанные.Номенклатура));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении().

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	КонецЕсли;	
	// Отклонение.
	СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоУчет;	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти().

&НаСервере
Процедура РассчитатьСуммуВСтрокеТабличнойЧастиСервер(СтрокаТабличнойЧасти)
	
	// Отклонение.
	СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоУчет;	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти().

&НаСервере
// Сохранения дерева номенклатуры.
Процедура СохранитьДеревоНоменклатуры(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекОбъект = РеквизитФормыВЗначение("Объект");
	Иначе
		ТекОбъект = ТекущийОбъект;
	КонецЕсли;	
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	ОбработкаТабличныхЧастей.СохранитьДеревоНоменклатуры(ДЗ, ТекОбъект.Номенклатура);
	
	Если ТекущийОбъект = Неопределено Тогда
		ЗначениеВДанныеФормы(ТекОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПодчиненнуюНоменклатуру(Отказ, ТекущийОбъект, СтрокаДерева)
	
	Для Каждого Строки Из СтрокаДерева.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 в документе не указана карточка'"), 
				Строки.Номенклатура);
			УправлениеITОтделом8УФ.СообщитьОбОшибке(Объект,	ТекстСообщения,,, "ДеревоНоменклатуры", Отказ);			
			Возврат;			
		КонецЕсли;		
		
		НоваяСтрока 						= ТекущийОбъект.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
		Если ЗначениеЗаполнено(Строки.Родитель) Тогда
			НоваяСтрока.Партия 				= Строки.Родитель.КарточкаНоменклатуры;
		КонецЕсли;
		
		СохранитьПодчиненнуюНоменклатуру(Отказ, ТекущийОбъект, Строки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Вывод дерева номенклатуры.
Процедура ВывестиДеревоНоменклатуры()	
	
	ТЗ = Объект.Номенклатура.Выгрузить();
	ТЗ.Колонки.Добавить("НавСсылка");
	Для Каждого Строки Из ТЗ Цикл
		Строки.НавСсылка = УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(Строки.Номенклатура);
	КонецЦикла;
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	ДЗ.Строки.Очистить();	
	УправлениеITОтделом8УФ.ВывестиДеревоНоменклатуры(ДЗ, ТЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНумерациюВДеревеЗначенийНаСервере()
	
	ОбработкаТабличныхЧастей.ОбновитьНумерациюВДереве(ДеревоНоменклатуры);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнвентарныеИСерийныеНомераНаСервере()
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	УправлениеITОтделом8УФ.ОбновитьИнвентарныеИСерийныеНомера(ДЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДеревоНоменклатуры()
	
	Объект.Номенклатура.Очистить();
	Дерево = ДеревоНоменклатуры.ПолучитьЭлементы();
	Дерево.Очистить();	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)
	
	// Может содержать дочерние.
	Если НовыйРодитель <> Неопределено Тогда
		Если ЗначениеЗаполнено(НовыйРодитель.Номенклатура) Тогда
			Параметр = Новый Структура();
			Параметр.Вставить("Номенклатура", НовыйРодитель.Номенклатура);
			Если НЕ ЗначениеНаСервере("Параметры.Номенклатура.ВидНоменклатуры.МожетИметьКомплектующие", Параметр) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	// Родитель в родителе.
	Пока НЕ НовыйРодитель = Неопределено Цикл
		Если ПереносимыйЭлемент = НовыйРодитель Тогда
			Возврат Ложь;
		КонецЕсли;
		НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)
	
	Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;
	
	// Источник может быть уже перенесен.
	// Это происходит если выделены несколько элементов
	// одной и той же ветви дерева на разных уровнях иерархии.
	Если Источник = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Приемник = Неопределено Тогда
		// Добавляем в корень.
		НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	
	КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
	Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
		ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
		[КолПодчиненныхСтрок - ОбратныйИндекс];
		СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
	КонецЦикла;
	
	Если Источник.ПолучитьРодителя() = Неопределено Тогда
		РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
	Иначе
		Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуДерева(РеквизитДерево, Родитель)
	
	Возврат ОбработкаТабличныхЧастейКлиент.ДобавитьСтрокуДерева(РеквизитДерево, Родитель);
	
КонецФункции

&НаКлиенте
Процедура ОтображатьИнвентарныеИСерийныеНомера(Команда)
	
	Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = 
		НЕ Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
		
	УправлениеITОтделом8УФ.СохранитьНастройкуОтображатьИнвентарныеСерийныеНомера(
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка);
		
	УстановитьВидимостьДоступность();
	ОбновитьИнвентарныеИСерийныеНомераНаСервере();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНомерНаСервере(Карточка, ИмяРеквизита, Значение)
	Если ЗначениеЗаполнено(Карточка) Тогда
		НачатьТранзакцию();
		Попытка
			ОбъектКарточки = Карточка.ПолучитьОбъект();
			ОбъектКарточки[ИмяРеквизита] = Значение;
			ОбъектКарточки.Записать();
			СохранитьДеревоНоменклатуры();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()

	ОбъектДок = РеквизитФормыВЗначение("Объект");
	Если ОбъектДок.Проведен Тогда
		ОбъектДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе 
		ОбъектДок.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	ЗначениеВДанныеФормы(ОбъектДок, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере()
	
	Об = РеквизитФормыВЗначение("Объект");
	Об.Номенклатура.Загрузить(Документы.Инвентаризация.ТаблицаИнвентаризацииПоОстаткам(Об));
	ЗначениеВДанныеФормы(Об, Объект);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНоменклатуруВДокумент(СтруктураНоменклатуры)
	
	ВерхняяНоменклатура 	= СтруктураНоменклатуры.Номенклатура;	
	НайденнаяНоменклатура 	= Новый Структура;	
	
	Если ТипЗНЧ(ВерхняяНоменклатура) = Тип("СправочникСсылка.Номенклатура") 
		И ВерхняяНоменклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры = Истина	Тогда 
		НайденнаяНоменклатура.Вставить("НуженВыводДерева", Ложь);
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для номенклатуры %1 в ее виде указано ""Вести учет по карточкам"".
			|Используйте штрих-код из карточки номенклатуры.'"),
			ВерхняяНоменклатура);
		НайденнаяНоменклатура.Вставить("СообщениеПользователю", ТекстСообщения);
		
		Возврат НайденнаяНоменклатура;
		
	КонецЕсли;
	
	ПериодДляЗапроса 	= ?(Объект.Ссылка.Пустая(), ТекущаяДатаСеанса(), Объект.Дата);
	СтруктураКоличество = ПолучитьОстаткиПоНоменклатуре(ВерхняяНоменклатура,ПериодДляЗапроса);
	
	// Нет на остатках.
	Если СтруктураКоличество = Неопределено Тогда		
		СтруктураКоличество = Новый Структура;		
		СтруктураКоличество.Вставить("Комплект", 	ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
		СтруктураКоличество.Вставить("Партия", 		ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
		СтруктураКоличество.Вставить("Номенклатура",ВерхняяНоменклатура);
		СтруктураКоличество.Вставить("Количество", 	0);
		СтруктураКоличество.Вставить("Цена", 		0);
		СтруктураКоличество.Вставить("Сумма", 		0);
	КонецЕсли;	
	
	НайденнаяНоменклатура.Вставить("НоменклатураШК",ВерхняяНоменклатура);		
	НайденнаяНоменклатура.Вставить("Партия", 		СтруктураКоличество.Партия);				
	НайденнаяНоменклатура.Вставить("Комплект", 		СтруктураКоличество.Комплект);				
	
	// Это "свернутый" комплект.
	Если ЗначениеЗаполнено(НайденнаяНоменклатура.Комплект) Тогда			
		
		ОстаткиПоКомплекту = ПолучитьОстаткиПоНоменклатуре(СтруктураКоличество.Комплект,ПериодДляЗапроса);
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Истина);
		НайденнаяНоменклатура.Вставить("Номенклатура",			СтруктураКоличество.Комплект.Владелец);
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	СтруктураКоличество.Комплект);
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		СтруктураКоличество.Комплект.Владелец.ЕдиницаИзмерения);
		НайденнаяНоменклатура.Вставить("Количество",			ОстаткиПоКомплекту.Количество);
		НайденнаяНоменклатура.Вставить("Цена",					ОстаткиПоКомплекту.Цена);			
		НайденнаяНоменклатура.Вставить("Сумма",					ОстаткиПоКомплекту.Сумма);			
		НайденнаяНоменклатура.Вставить("Партия", 				ОстаткиПоКомплекту.Партия);				
		НайденнаяНоменклатура.Вставить("Комплект", 				ОстаткиПоКомплекту.Комплект);
		СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура);
		НайденнаяНоменклатура.Вставить("НуженВыводДерева",		Истина);
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Истина);			
		Возврат НайденнаяНоменклатура;
		
	КонецЕсли;		
	
	// Подчиненная номенклатура.
	Если ЗначениеЗаполнено(НайденнаяНоменклатура.Партия) Тогда			
		
		НоменклатураВерхнегоУровня = ПолучитьВерхнююНоменклатуруПоКомплектующей(НайденнаяНоменклатура.Партия,
			ПериодДляЗапроса);
			
		ОстаткиПоКомплекту = ПолучитьОстаткиПоНоменклатуре(НоменклатураВерхнегоУровня,ПериодДляЗапроса);
		
		Если ТипЗНЧ(НоменклатураВерхнегоУровня)= Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
			НайденнаяНоменклатура.Вставить("Номенклатура",		НоменклатураВерхнегоУровня.Владелец);
			НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",НоменклатураВерхнегоУровня);
			НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 	НоменклатураВерхнегоУровня.Владелец.ЕдиницаИзмерения);
		Иначе
			НайденнаяНоменклатура.Вставить("Номенклатура",		НоменклатураВерхнегоУровня);				
			НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",
			УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(НоменклатураВерхнегоУровня));
			НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 	НоменклатураВерхнегоУровня.ЕдиницаИзмерения);
		КонецЕсли;
		
		НайденнаяНоменклатура.Вставить("Количество",			ОстаткиПоКомплекту.Количество);
		НайденнаяНоменклатура.Вставить("Цена",					ОстаткиПоКомплекту.Цена);
		НайденнаяНоменклатура.Вставить("Сумма",					ОстаткиПоКомплекту.Сумма);
		НайденнаяНоменклатура.Вставить("Партия", 				ОстаткиПоКомплекту.Партия);				
		НайденнаяНоменклатура.Вставить("Комплект", 				ОстаткиПоКомплекту.Комплект);
		СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура);
		
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Ложь);
		НайденнаяНоменклатура.Вставить("НуженВыводДерева",		Истина);
		ЗаполнитьПодчиненнуюНоменклатуру(ПериодДляЗапроса,НоменклатураВерхнегоУровня);
		
		Возврат НайденнаяНоменклатура;
		
	КонецЕсли;
	
	Если Не ВерхняяНоменклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
		НайденнаяНоменклатура.Вставить("Номенклатура",			ВерхняяНоменклатура);			
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",
		УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(ВерхняяНоменклатура));
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		ВерхняяНоменклатура.ЕдиницаИзмерения);
	Иначе	
		НайденнаяНоменклатура.Вставить("Номенклатура",			ВерхняяНоменклатура.Владелец);
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	ВерхняяНоменклатура);
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		ВерхняяНоменклатура.Владелец.ЕдиницаИзмерения);
	КонецЕсли;
	
	НайденнаяНоменклатура.Вставить("Количество", 				СтруктураКоличество.Количество);				
	НайденнаяНоменклатура.Вставить("Цена",	 					СтруктураКоличество.Цена);
	НайденнаяНоменклатура.Вставить("Сумма",	 					СтруктураКоличество.Сумма);
	
	СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура);
	НайденнаяНоменклатура.Вставить("НуженВыводДерева", Истина);
	
	ЗаполнитьПодчиненнуюНоменклатуру(ПериодДляЗапроса, ?(ЗначениеЗаполнено(НайденнаяНоменклатура.КарточкаНоменклатуры),
		НайденнаяНоменклатура.КарточкаНоменклатуры,	НайденнаяНоменклатура.Номенклатура));
	
	Возврат НайденнаяНоменклатура;	
	
КонецФункции

&НаСервере
Функция ПолучитьОстаткиПоНоменклатуре(ВерхняяНоменклатура, ПериодДляЗапроса)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", ПериодДляЗапроса);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомплектацияОстатки.Комплект,
		|	КомплектацияОстатки.Партия КАК Партия,
		|	КомплектацияОстатки.Номенклатура КАК Номенклатура,
		|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КомплектацияОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) / КомплектацияОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Цена,
		|	ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.Комплектация.Остатки(
		|			&Период,
		|			ВЫБОР
		|					КОГДА ТИПЗНАЧЕНИЯ(Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|				И Номенклатура = &Номенклатура) КАК КомплектацияОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) / ОстаткиОстатки.КоличествоОстаток
		|	КОНЕЦ,
		|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0)
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Номенклатура = &Номенклатура) КАК ОстаткиОстатки";
		
	Запрос.УстановитьПараметр("Номенклатура", ВерхняяНоменклатура);
	Выборка			  = Запрос.Выполнить().Выбрать();	
	СтруктураВозврата = Неопределено;
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Комплект", 		Выборка.Комплект);
		СтруктураВозврата.Вставить("Партия", 		Выборка.Партия);
		СтруктураВозврата.Вставить("Номенклатура", 	Выборка.Номенклатура);
		СтруктураВозврата.Вставить("Количество", 	Выборка.Количество);
		СтруктураВозврата.Вставить("Цена", 			Выборка.Цена);
		СтруктураВозврата.Вставить("Сумма", 		Выборка.Сумма);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура)
	
	Если НайденнаяНоменклатура.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
		МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура, Партия, КарточкаНоменклатуры",
			НайденнаяНоменклатура.Номенклатура,НайденнаяНоменклатура.Партия,НайденнаяНоменклатура.КарточкаНоменклатуры));
	Иначе
		МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура, Партия",
			НайденнаяНоменклатура.Номенклатура, НайденнаяНоменклатура.Партия));
	КонецЕсли;
	
	Если МассивСтрокТЧ.Количество() = 0 Тогда
		НоваяСтрока 			= Объект.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяНоменклатура);
		НоваяСтрока.Количество 	= НайденнаяНоменклатура.Количество;
		НоваяСтрока.Цена		= НайденнаяНоменклатура.Цена;
		НоваяСтрока.Сумма		= НоваяСтрока.Цена * НоваяСтрока.Количество;
		РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НоваяСтрока);								
	Иначе		
		НайденнаяСтрока 		= МассивСтрокТЧ[0];
		НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + НайденнаяНоменклатура.Количество;		
		НайденнаяСтрока.Сумма 	= НайденнаяСтрока.Цена * НайденнаяСтрока.Количество;
		РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НайденнаяСтрока);					
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПодчиненнуюНоменклатуру(Период, НоменклатураВладелец)	
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КомплектацияОстатки.Комплект,
	|	КомплектацияОстатки.Партия КАК Партия,
	|	КомплектацияОстатки.Номенклатура КАК Номенклатура,
	|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
	|	ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КомплектацияОстатки.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) / КомплектацияОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрНакопления.Комплектация.Остатки(&Период, Комплект = &Партия) КАК КомплектацияОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ОстаткиОстатки.Партия,
	|	ОстаткиОстатки.Номенклатура,
	|	ОстаткиОстатки.КоличествоОстаток,
	|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) / ОстаткиОстатки.КоличествоОстаток
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.Остатки.Остатки(&Период, Партия = &Партия) КАК ОстаткиОстатки";
		
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Партия", НоменклатураВладелец);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		Если ЗначениеЗаполнено(Выборка.Комплект) Тогда Возврат Неопределено КонецЕсли;		
		Если ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда 			
			Номенклатура			= Выборка.Номенклатура.Владелец;
			КарточкаНоменклатуры	= Выборка.Номенклатура;			
		Иначе			
			Номенклатура			= Выборка.Номенклатура;
			КарточкаНоменклатуры	= 
				УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Выборка.Номенклатура);
		КонецЕсли;
		
		ПодчиненнаяНоменклатура = Новый Структура;
		ПодчиненнаяНоменклатура.Вставить("Номенклатура",		Номенклатура);		
		ПодчиненнаяНоменклатура.Вставить("Партия", 				НоменклатураВладелец);
		ПодчиненнаяНоменклатура.Вставить("КарточкаНоменклатуры",КарточкаНоменклатуры);
		ПодчиненнаяНоменклатура.Вставить("Комплект",			?(НоменклатураВладелец = Номенклатура,
			Справочники.КарточкиНоменклатуры.ПустаяСсылка(), НоменклатураВладелец));
			
		ПодчиненнаяНоменклатура.Вставить("Цена",				Выборка.Цена);
		ПодчиненнаяНоменклатура.Вставить("Сумма",				Выборка.Сумма);
		ПодчиненнаяНоменклатура.Вставить("ЕдиницаИзмерения", 	Номенклатура.ЕдиницаИзмерения);
		
		МассивСтрокТЧ = Объект.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура, Партия, КарточкаНоменклатуры", 
			ПодчиненнаяНоменклатура.Номенклатура, ПодчиненнаяНоменклатура.Партия, 
			ПодчиненнаяНоменклатура.КарточкаНоменклатуры));
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока					= Объект.Номенклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ПодчиненнаяНоменклатура);
			НоваяСтрока.Количество		= Выборка.Количество;
			НоваяСтрока.Цена			= Выборка.Цена;
			НоваяСтрока.Сумма			= НоваяСтрока.Цена*НоваяСтрока.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НоваяСтрока);		
		Иначе
			НайденнаяСтрока				= МассивСтрокТЧ[0];
			НайденнаяСтрока.Количество	= НайденнаяСтрока.Количество + Выборка.Количество;
			НайденнаяСтрока.Сумма		= НайденнаяСтрока.Цена * НайденнаяСтрока.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧастиСервер(НайденнаяСтрока);		
		КонецЕсли;
		ЗаполнитьПодчиненнуюНоменклатуру(Период, ПодчиненнаяНоменклатура.КарточкаНоменклатуры);		
	КонецЦикла;
	
КонецФункции 

// Получает номенклатуру самого верхнего уровня в комплекте
//
&НаСервере
Функция ПолучитьВерхнююНоменклатуруПоКомплектующей(Комплектующая, Период)
	
	Запрос 		= Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиОстатки.Партия
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Номенклатура = &Номенклатура) КАК ОстаткиОстатки";
	
	Запрос.УстановитьПараметр("Номенклатура", Комплектующая);
	Запрос.УстановитьПараметр("Период"		, Период);	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Партия) Тогда			
			Возврат ПолучитьВерхнююНоменклатуруПоКомплектующей(ВыборкаДетальныеЗаписи.Партия, Период);
		Иначе 
			Возврат Комплектующая;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции 

// ПодключаемоеОборудование.
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(
		СтруктураДанные.МассивШтрихкодов);
		
	Для Каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];		
		Если ДанныеШтрихкода <> Неопределено
			И ДанныеШтрихкода.Количество() <> 0 Тогда			
			
			Если ТипЗнч(ДанныеШтрихкода.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				НоменклатураШтрихкода			= ДанныеШтрихкода.Номенклатура;
				КарточкаНоменклатурыШтрихкода	= 
					УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(НоменклатураШтрихкода);
			Иначе
				НоменклатураШтрихкода			= ДанныеШтрихкода.Номенклатура.Владелец;
				КарточкаНоменклатурыШтрихкода	= ДанныеШтрихкода.Номенклатура;			   
			КонецЕсли;
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", 			СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", 			НоменклатураШтрихкода);
			СтруктураДанныеНоменклатуры.Вставить("КарточкаНоменклатуры", 	КарточкаНоменклатурыШтрихкода);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", 		
				ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = НоменклатураШтрихкода.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;	
	СохранитьДеревоНоменклатуры();	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);		
	
	МассивВывода = Новый Массив;
	
	Для Каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
				
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		Иначе
			
			НоменклатураШтрихкода		= ДанныеШтрихкода.Номенклатура;
			ЕдиницаИзмеренияШтрихкода	= ДанныеШтрихкода.ЕдиницаИзмерения;			
			МассивВывода.Добавить(ДобавитьНоменклатуруВДокумент(ДанныеШтрихкода));
			
		КонецЕсли;
	КонецЦикла;
	
	// Вывод дерева.		
	ОбработатьВыводДереваНоменклатуры(МассивВывода);
	
	Если Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка Тогда
		ОбновитьИнвентарныеИСерийныеНомераНаСервере();
	КонецЕсли;
	
	// Разворачиваем сформированное дерево номенклатуры.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
	Возврат НеизвестныеШтрихкоды;
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов().

&НаКлиенте
Процедура ОбработатьВыводДереваНоменклатуры(МассивНоменклатуры)
	
	Для Каждого СтруктураВозврата Из МассивНоменклатуры Цикл
		СтруктураНоменклатуры = СтруктураВозврата;
		ИдентификаторСтроки   = 0;
		Если СтруктураНоменклатуры.Свойство("НуженВыводДерева") И СтруктураНоменклатуры.Свойство("СвернутыйКомплект") Тогда
			Если СтруктураНоменклатуры.НуженВыводДерева И СтруктураНоменклатуры.СвернутыйКомплект Тогда 					
				
				ВывестиДеревоНоменклатуры();				
				Если ЗначениеЗаполнено(СтруктураНоменклатуры.КарточкаНоменклатуры) Тогда
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
						ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), СтруктураНоменклатуры.КарточкаНоменклатуры, Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Номенклатура %1 является частью комплекта %2.
						| Комплект был добавлен в документ.'"), 
						СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура);
						
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					
				Иначе
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
						ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), СтруктураНоменклатуры.Номенклатура, Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Номенклатура %1 является частью комплекта %2.
						| Комплект был добавлен в документ.'"), 
						СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура);
						
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			ИначеЕсли СтруктураНоменклатуры.НуженВыводДерева И (Не СтруктураНоменклатуры.СвернутыйКомплект) Тогда					
				
				ВывестиДеревоНоменклатуры();				
				Если ЗначениеЗаполнено(СтруктураНоменклатуры.КарточкаНоменклатуры) Тогда
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
					ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), СтруктураНоменклатуры.КарточкаНоменклатуры, Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Номенклатура %1 является частью комплекта %2.
						| Комплект и все его комплектующие были добавлены в документ.'"), 
						СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура);
						
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					
				Иначе
					ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
						ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), СтруктураНоменклатуры.Номенклатура, Ложь);		
					Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Номенклатура %1 является частью комплекта %2.
						| Комплект и все его комплектующие были добавлены в документ.'"), 
						СтруктураНоменклатуры.НоменклатураШК, СтруктураНоменклатуры.Номенклатура);
						
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;	
			
		ИначеЕсли СтруктураНоменклатуры.Свойство("НуженВыводДерева") И СтруктураНоменклатуры.НуженВыводДерева Тогда 
			
			ВывестиДеревоНоменклатуры();						
			Если ЗначениеЗаполнено(СтруктураНоменклатуры.КарточкаНоменклатуры) Тогда
				ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
					ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), СтруктураНоменклатуры.КарточкаНоменклатуры, Ложь);		
				Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;									
			Иначе
				ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
					ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), СтруктураНоменклатуры.Номенклатура, Ложь);		
				Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
			
		ИначеЕсли СтруктураНоменклатуры.Свойство("СообщениеПользователю") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтруктураНоменклатуры.СообщениеПользователю);				
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры 

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов)
	
	Модифицированность 		= Истина;	
	НеизвестныеШтрихкоды	= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);	
	ВозвращаемыеПараметры 	= Неопределено;
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);		
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,, Оповещение);					
		Возврат;		
	КонецЕсли;	
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;	
	Если ВозвращаемыеПараметры <> Неопределено Тогда		
		МассивШтрихкодов = Новый Массив;		
		Для Каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;		
		Для Каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;		
		НеизвестныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для Каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл		
		СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1; количество: %2'"), 
			ТекНеизвестныйШтрихкод.Штрихкод, 
			ТекНеизвестныйШтрихкод.Количество);		
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТабличнуюЧастьНоменклатура()
	
	СтрокаТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;	
	
	Если СтрокаТекущиеДанные = Неопределено Тогда		
		Возврат;		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПредыдущиеРеквизитыСтроки Цикл
		Если КлючИЗначение.Значение <> СтрокаТекущиеДанные[КлючИЗначение.Ключ] Тогда			
			СтруктураТекущиеДанные	= СтруктураСтрокиТабличнойЧасти();
			ЗаполнитьЗначенияСвойств(СтруктураТекущиеДанные,СтрокаТекущиеДанные);
			ОбновитьСтрокуТабличнойЧасти(ПредыдущиеРеквизитыСтроки, СтруктураТекущиеДанные);
			Модифицированность 		= Истина;
			
			Возврат;
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуТабличнойЧасти(ПредыдущиеРеквизитыСтроки, СтруктураТекущиеДанные)
		
	Отбор 		= ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма, "Номенклатура");	
	ЗаполнитьЗначенияСвойств(Отбор, ПредыдущиеРеквизитыСтроки);	
	МассивСтрок = Объект.Номенклатура.НайтиСтроки(Отбор);	
	
	Если МассивСтрок.Количество() <> 1 Тогда //обновляем полностью.
		СохранитьДеревоНоменклатуры();
	Иначе
		ЗаполнитьЗначенияСвойств(МассивСтрок[0],СтруктураТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СтруктураСтрокиДерева()
	
	Возврат ОбработкаТабличныхЧастей.СтруктураИзДереваЗначений(ЭтаФорма, "ДеревоНоменклатуры");
	
КонецФункции

&НаСервере
Функция СтруктураСтрокиТабличнойЧасти()
	
	Возврат ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма, "Номенклатура");
	
КонецФункции

&НаСервере
Функция ПолучитьИнвентарныйСерийныйНомерМестоХраненияНаСервере(КарточкаНоменклатуры)
	
	СтруктураВозврата = Новый Структура("ИнвентарныйНомер, СерийныйНомер, МестоХранения, " 
		+ "КоличествоУчет, СуммаУчет, Количество, Цена, Сумма, Отклонение");
		
	СтруктураВозврата.КоличествоУчет	= 0;
	СтруктураВозврата.СуммаУчет			= 0;
	СтруктураВозврата.Количество		= 0;
	СтруктураВозврата.Цена				= 0;
	СтруктураВозврата.Сумма				= 0;
	
	Если НЕ ЗначениеЗаполнено(КарточкаНоменклатуры) Тогда
		СтруктураВозврата.ИнвентарныйНомер 	= "";
		СтруктураВозврата.СерийныйНомер 	= "";
		СтруктураВозврата.МестоХранения		= ПредопределенноеЗначение("Справочник.МестаХранения.ПустаяСсылка");
	Иначе
		СтруктураВозврата.ИнвентарныйНомер 	= КарточкаНоменклатуры.ИнвентарныйНомер;
		СтруктураВозврата.СерийныйНомер 	= КарточкаНоменклатуры.СерийныйНомер;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ОстаткиОстатки.МестоХранения,
			|	ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) КАК Количество,
			|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) КАК Сумма
			|ИЗ
			|	РегистрНакопления.Остатки.Остатки(
			|			&Дата,
			|			Организация = &Организация
			|				И Номенклатура = &КарточкаНоменклатуры) КАК ОстаткиОстатки";
		
		Запрос.УстановитьПараметр("Дата", ?(Объект.Ссылка.Пустая(), ТекущаяДатаСеанса(), Объект.Дата));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("КарточкаНоменклатуры", КарточкаНоменклатуры);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураВозврата.МестоХранения		= Выборка.МестоХранения;
			СтруктураВозврата.КоличествоУчет	= Выборка.Количество;
			СтруктураВозврата.СуммаУчет			= Выборка.Сумма;
			СтруктураВозврата.Цена				= ?(Выборка.Количество = 0, 0, Выборка.Сумма / Выборка.Количество);
			СтруктураВозврата.Количество		= Выборка.Количество;
			СтруктураВозврата.Сумма				= Выборка.Сумма;
		КонецЕсли;		
	КонецЕсли;
	
	СтруктураВозврата.Отклонение		= СтруктураВозврата.КоличествоУчет - СтруктураВозврата.Количество;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатуры(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = "КнопкаСоздатьНовую" Тогда		
		ПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(ДополнительныеПараметры);		
	ИначеЕсли Результат = "КнопкаВыбратьИзСписка" Тогда		
		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВыбораИзСпискаКарточкиНоменклатуры",
			ЭтотОбъект, ДополнительныеПараметры);
			
		ПараметрыФормы 		= Новый Структура;
		Если Объект.Ссылка.Пустая() Тогда
			ПараметрыФормы.Вставить("ОтборТолькоНеИспользованные", Истина);
			ПараметрыФормы.Вставить("ВидимостьОтборПоступление", Ложь);
		Иначе
			ПараметрыФормы.Вставить("ОтборПоступление", Объект.Ссылка);
		КонецЕсли;		
		
		СтрокаНоменклатура	 = ДополнительныеПараметры.Приемник;
		мНоменклатура		 = СтрокаНоменклатура.Номенклатура;
		мКарточкаНоменклатуры=СтрокаНоменклатура.КарточкаНоменклатуры; 
		ПараметрыФормы.Вставить("ОтборНоменклатура", мНоменклатура);
		ПараметрыФормы.Вставить("ВыбранноеЗначение", мКарточкаНоменклатуры);		
		ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаВыбора", ПараметрыФормы,,,,,ОписаниеОповещения);
				
	Иначе		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзСпискаКарточкиНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНоменклатура = ДополнительныеПараметры.Приемник;
	СтрокаНоменклатура.КарточкаНоменклатуры = Результат;
	СохранитьДеревоНоменклатуры();
	
	НоваяСтрока 				= ДобавитьСтрокуДерева(ДополнительныеПараметры.РеквизитДерево, ДополнительныеПараметры.Приемник);
	НоваяСтрока.Количество		= 1;
	НоваяСтрока.Отклонение		= 1;
	НоваяСтрока.РазрешатьУдалять= Истина;
	Элемент						= Элементы.ДеревоНоменклатуры;
	ТекущийЭлемент 	= Элемент;
	Элемент.ТекущаяСтрока 		= НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент 	= Элементы.ДеревоНоменклатурыНоменклатура;
	Элемент.ИзменитьСтроку();
	
	// Разворачиваем дерево.	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатурыПродолжение(СтруктураПараметров)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВопросаСоздатьКарточкуНоменклатурыЗавершение", ЭтотОбъект, СтруктураПараметров);
		Режим 				= РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Документ не записан. Для продолжения необходимо его записать. Продолжить?'"), Режим);
		Возврат;		
	КонецЕсли;		
	
	ПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатурыЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСоздатьКарточкуНоменклатурыФрагмент(ПараметрыСтруктура)
		
	КарточкаНоменклатуры= Неопределено;
	ЗаписатьНаСервере();
	СтрокаНоменклатура 	= ПараметрыСтруктура.Приемник;
	мНоменклатура		= СтрокаНоменклатура.Номенклатура;
	мСерийныйНомер		= СтрокаНоменклатура.СерийныйНомер;
	мИнвентарныйНомер	= СтрокаНоменклатура.ИнвентарныйНомер;
	КарточкаНоменклатуры= КарточкаНоменклатурыНаСервере(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер);		
	
	Если ЗначениеЗаполнено(КарточкаНоменклатуры) Тогда
		СтрокаНоменклатура.КарточкаНоменклатуры = КарточкаНоменклатуры;
		СохранитьДеревоНоменклатуры();
	Иначе
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не удалось создать карточку номенклатуры.'"),
			СтрокаНоменклатура.Номенклатура));
		Возврат;
	КонецЕсли;
	
	ЗаписатьНаСервере();	
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	НоваяСтрока 				= ДобавитьСтрокуДерева(ПараметрыСтруктура.РеквизитДерево, ПараметрыСтруктура.Приемник);	
	НоваяСтрока.Количество		= 1;
	НоваяСтрока.Отклонение		= 1;
	НоваяСтрока.РазрешатьУдалять= Истина;
	Элемент						= Элементы.ДеревоНоменклатуры;
	ТекущийЭлемент 	= Элемент;
	Элемент.ТекущаяСтрока 		= НоваяСтрока.ПолучитьИдентификатор();
	ТекущийЭлемент 	= Элементы.ДеревоНоменклатурыНоменклатура;
	Элемент.ИзменитьСтроку();
	
	// Разворачиваем дерево.	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция КарточкаНоменклатурыНаСервере(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер)
	
	Возврат УправлениеITОтделом8УФ.СоздатьКарточкуНоменклатуры(мНоменклатура, мСерийныйНомер, мИнвентарныйНомер);
	
КонецФункции

&НаСервере
Функция ТекущаяДатаНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатВопроса;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоОстаткамФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамФрагмент()
	
	ЗаписатьНаСервере();	
	
	ЗаполнитьПоОстаткамНаСервере();	
	
	ВывестиДеревоНоменклатуры();
	
	// Разворачиваем дерево.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
	Модифицированность = Истина;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаНоменклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетноеКоличествоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьЗаполнитьУчетноеКоличествоФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаполнитьУчетноеКоличествоФрагмент()
	
	СохранитьДеревоНоменклатуры();	
	ЗаполнитьУчетноеКоличествоНаСервере();	
	// Вывод дерева.	
	ВывестиДеревоНоменклатуры();	
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);	
	Элементы.ДеревоНоменклатуры.Обновить();	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьУчетноеКоличествоНаСервере()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ = Документы.Инвентаризация.ТаблицаИнвентаризацииПоОстаткам(Объект);
	
	Для Каждого Строки Из Объект.Номенклатура Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура", Строки.Номенклатура);
		Отбор.Вставить("КарточкаНоменклатуры", Строки.КарточкаНоменклатуры);
		Отбор.Вставить("Партия", Строки.Партия);
		
		НайденныеСтроки = ТЗ.НайтиСтроки(Отбор);
		Для Каждого Элемент Из НайденныеСтроки Цикл
			Если Элемент.КоличествоУчет > 0 Тогда
				Строки.КоличествоУчет = Элемент.КоличествоУчет;
				Строки.Цена			  = Элемент.Цена;
				Строки.СуммаУчет 	  = Элемент.СуммаУчет;
				РассчитатьСуммуВСтрокеТабличнойЧастиСервер(Строки);
				Элемент.КоличествоУчет = 0;
			КонецЕсли;
		КонецЦикла;		
		
	КонецЦикла;
	
	ОбновитьНумерациюВДеревеЗначенийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбнулитьКоличествоИСуммуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;     
	
	КомандаОбнулитьКоличествоИСуммуФрагмент();
	
	// Разворачиваем дерево
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КомандаОбнулитьКоличествоИСуммуФрагмент()	
	
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	ОбнулитьКоличествоИСуммуНаСервере(ДЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
	Модифицированность	= Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьКоличествоИСуммуНаСервере(СтрокаДерева)
	
	Для Каждого Строки Из СтрокаДерева.Строки Цикл		
		Строки.Количество 	= 0;
		Строки.Сумма 		= 0;
		Строки.Отклонение 	= Строки.Количество - Строки.КоличествоУчет;
		ОбнулитьКоличествоИСуммуНаСервере(Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧастьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатВопроса;
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьТабличнуюЧастьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧастьФрагмент()
	
	ОчиститьДеревоНоменклатуры();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду().

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") 
		И Результат.Количество() > 0 Тогда
		ПолученыШтрихкоды(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ 		= НЕ РазвернутаТЧ;	
	ВидимостьЭлементов 	= НЕ РазвернутаТЧ;
	
	ПоложениеКоманднойПанели = ?(ВидимостьЭлементов,
		ПоложениеКоманднойПанелиФормы.Авто,
		ПоложениеКоманднойПанелиФормы.Нет);
	
	Элементы.Шапка.Видимость                    = ВидимостьЭлементов;
	Элементы.Подвал.Видимость           		= ВидимостьЭлементов;
	Элементы.ГруппаИнформация.Видимость         = ВидимостьЭлементов;	
	Элементы.Страницы.ОтображениеСтраниц		= ?(ВидимостьЭлементов, 
		ОтображениеСтраницФормы.ЗакладкиСверху, 
		ОтображениеСтраницФормы.Нет);
	
	Элементы.ДеревоНоменклатурыРазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов,
		БиблиотекаКартинок.РазвернутьТабличнуюЧасть,
		БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьАвторНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеФрагмент()
	
	МассивМестХранения		= ПолучитьМестаХраненияНаСервере("Поступление");
	КоличествоМестХранения	= МассивМестХранения.Количество();
	Если КоличествоМестХранения = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для создания документа ""Поступление""!'"));
		Возврат;
		
	ИначеЕсли КоличествоМестХранения = 1 Тогда		
		СоздатьДокументПоступлениеНаКлиенте(МассивМестХранения[0]);
		
	ИначеЕсли КоличествоМестХранения > 1 Тогда
		ДопПараметры		= Новый Структура("ВидДокумента", "Поступление");
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеВыбораИзСпискаМестаХранения", ЭтотОбъект, ДопПараметры);
		СписокВыбора		= Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(МассивМестХранения);
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите место хранения:'"));
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзСпискаМестаХранения(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДопПараметры.ВидДокумента = "Поступление" Тогда 
		СоздатьДокументПоступлениеНаКлиенте(Результат.Значение);
	Иначе
		СоздатьДокументСписаниеНаКлиенте(Результат.Значение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПоступлениеНаКлиенте(Знач МестоХранения)	
	
	СтруктураПараметры	= Новый Структура;
	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Источник", 		Объект.Ссылка);
	ДанныеЗаполнения.Вставить("МестоХранения",	МестоХранения);
	СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения); 
	ОткрытьФорму("Документ.Поступление.ФормаОбъекта", СтруктураПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументСписаниеНаКлиенте(Знач МестоХранения)	
	
	СтруктураПараметры	= Новый Структура;
	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Источник", 		Объект.Ссылка);
	ДанныеЗаполнения.Вставить("МестоХранения",	МестоХранения);
	СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения); 
	ОткрытьФорму("Документ.Списание.ФормаОбъекта", СтруктураПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеФрагмент()
	
	МассивМестХранения = ПолучитьМестаХраненияНаСервере("Списание");
	КоличествоМестХранения	= МассивМестХранения.Количество();
	Если КоличествоМестХранения = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для создания документа ""Списание""!'"));
		Возврат;
		
	ИначеЕсли КоличествоМестХранения = 1 Тогда		
		СоздатьДокументСписаниеНаКлиенте(МассивМестХранения[0]);
		
	ИначеЕсли КоличествоМестХранения > 1 Тогда
		ДопПараметры		= Новый Структура("ВидДокумента", "Списание");
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеВыбораИзСпискаМестаХранения", ЭтотОбъект, ДопПараметры);
		СписокВыбора		= Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(МассивМестХранения);
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите место хранения:'"));	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМестаХраненияНаСервере(Знач ВидДокумента)
	
	Результат = Новый Массив;
	
	Если ВидДокумента = "Поступление" Тогда
		Результат = ПолучитьМестаХраненияПоступление();
	Иначе
		Результат = ПолучитьМестаХраненияСписание();
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьМестаХраненияПоступление()
			
	Результат	= Новый Массив;		
	Запрос		= Новый Запрос;
	Запрос.Текст = 
	
	    "ВЫБРАТЬ
	    |	ПоступлениеНоменклатура.Номенклатура КАК Номенклатура,
	    |	ПоступлениеНоменклатура.КарточкаНоменклатуры КАК КарточкаНоменклатуры,
	    |	ПоступлениеНоменклатура.Ссылка.МестоХранения КАК МестоХранения,
	    |	СУММА(ПоступлениеНоменклатура.Количество) КАК Количество
	    |ПОМЕСТИТЬ ВТ_Поступления
	    |ИЗ
	    |	Документ.Поступление.Номенклатура КАК ПоступлениеНоменклатура
	    |ГДЕ
	    |	ПоступлениеНоменклатура.Ссылка.Проведен
	    |	И ПоступлениеНоменклатура.Ссылка.Основание = &Ссылка
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	ПоступлениеНоменклатура.Номенклатура,
	    |	ПоступлениеНоменклатура.КарточкаНоменклатуры,
	    |	ПоступлениеНоменклатура.Ссылка.МестоХранения
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ИнвентаризацияНоменклатура.МестоХранения КАК МестоХранения,
	    |	СУММА(ИнвентаризацияНоменклатура.Отклонение - ВЫБОР
	    |			КОГДА ВТ_Поступления.Количество ЕСТЬ NULL
	    |				ТОГДА 0
	    |			ИНАЧЕ ВТ_Поступления.Количество
	    |		КОНЕЦ) КАК МожноОприходовать
	    |ИЗ
	    |	Документ.Инвентаризация.Номенклатура КАК ИнвентаризацияНоменклатура
	    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Поступления КАК ВТ_Поступления
	    |		ПО ИнвентаризацияНоменклатура.Номенклатура = ВТ_Поступления.Номенклатура
	    |			И ИнвентаризацияНоменклатура.КарточкаНоменклатуры = ВТ_Поступления.КарточкаНоменклатуры
	    |			И ИнвентаризацияНоменклатура.МестоХранения = ВТ_Поступления.МестоХранения
	    |ГДЕ
	    |	ИнвентаризацияНоменклатура.Отклонение > 0
	    |	И ИнвентаризацияНоменклатура.Ссылка = &Ссылка
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	ИнвентаризацияНоменклатура.МестоХранения
	    |
	    |УПОРЯДОЧИТЬ ПО
	    |	ИнвентаризацияНоменклатура.МестоХранения.Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);		
	РезультатЗапроса	= Запрос.ВыполнитьПакет();	
	ТЗРезультат 		= РезультатЗапроса[1].Выгрузить();
	ТЗРезультат.Свернуть("МестоХранения", "МожноОприходовать");
	Для Каждого СтрокаТЗ Из ТЗРезультат Цикл
		Если СтрокаТЗ.МожноОприходовать > 0 Тогда
			Результат.Добавить(СтрокаТЗ.МестоХранения);
		КонецЕсли;	
	КонецЦикла;		
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьМестаХраненияСписание()
		
	Результат	= Новый Массив;		
	Запрос		= Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ
	    |	СписаниеНоменклатура.Номенклатура КАК Номенклатура,
	    |	СписаниеНоменклатура.КарточкаНоменклатуры КАК КарточкаНоменклатуры,
	    |	СписаниеНоменклатура.Ссылка.МестоХранения КАК МестоХранения,
	    |	СУММА(СписаниеНоменклатура.Количество) КАК Количество
	    |ПОМЕСТИТЬ ВТ_Списания
	    |ИЗ
	    |	Документ.Списание.Номенклатура КАК СписаниеНоменклатура
	    |ГДЕ
	    |	СписаниеНоменклатура.Ссылка.Проведен
	    |	И СписаниеНоменклатура.Ссылка.Основание = &Ссылка
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	СписаниеНоменклатура.Номенклатура,
	    |	СписаниеНоменклатура.КарточкаНоменклатуры,
	    |	СписаниеНоменклатура.Ссылка.МестоХранения
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ИнвентаризацияНоменклатура.МестоХранения КАК МестоХранения,
	    |	СУММА(-(ВЫБОР
	    |			КОГДА ВТ_Списания.Количество ЕСТЬ NULL
	    |				ТОГДА 0
	    |			ИНАЧЕ ВТ_Списания.Количество
	    |		КОНЕЦ + ИнвентаризацияНоменклатура.Отклонение)) КАК МожноСписать
	    |ИЗ
	    |	Документ.Инвентаризация.Номенклатура КАК ИнвентаризацияНоменклатура
	    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Списания КАК ВТ_Списания
	    |		ПО ИнвентаризацияНоменклатура.Номенклатура = ВТ_Списания.Номенклатура
	    |			И ИнвентаризацияНоменклатура.КарточкаНоменклатуры = ВТ_Списания.КарточкаНоменклатуры
	    |			И ИнвентаризацияНоменклатура.МестоХранения = ВТ_Списания.МестоХранения
	    |ГДЕ
	    |	ИнвентаризацияНоменклатура.Отклонение < 0
	    |	И ИнвентаризацияНоменклатура.Ссылка = &Ссылка
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	ИнвентаризацияНоменклатура.МестоХранения
	    |
	    |УПОРЯДОЧИТЬ ПО
	    |	ИнвентаризацияНоменклатура.МестоХранения.Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);		
	РезультатЗапроса	= Запрос.ВыполнитьПакет();	
	ТЗРезультат 		= РезультатЗапроса[1].Выгрузить();
	ТЗРезультат.Свернуть("МестоХранения", "МожноСписать");
	Для Каждого СтрокаТЗ Из ТЗРезультат Цикл
		Если СтрокаТЗ.МожноСписать > 0 Тогда
			Результат.Добавить(СтрокаТЗ.МестоХранения);
		КонецЕсли;	
	КонецЦикла;		
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросаЗаписатьДокумент(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
	Если НЕ ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.ВидДокумента = "Поступление" Тогда
		СоздатьПоступлениеФрагмент();
	Иначе
		СоздатьСписаниеФрагмент();
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти