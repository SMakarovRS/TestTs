#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс
// Функция возвращает список имен «ключевых» реквизитов.
//
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать,
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив реквизитов, редактируемых при групповой обработке.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Возврат Новый Массив;
	
КонецФункции


#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
		
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;
	СоответствиеИзменениеОбъекта.Вставить("ПеремещениеИзменениеОбъектаПроведение", НСтр("ru = 'Проведение'"));
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("ПеремещениеРасчетМетрикЗаписьДокумента", НСтр("ru = 'Запись документа'"));

	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура, Знач Источник) Экспорт
	
	Результат = Ложь;
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ИмяСобытия = "ПеремещениеИзменениеОбъектаПроведение" Тогда
		
		Если Структура.ЭтоНовый И Источник.Проведен Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Проведен <> ИсточникПередЗаписью.Проведен И ИсточникПередЗаписью.Проведен = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
		
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция печати документа.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_Перемещение";
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(ТекущийДокумент);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		
		Запрос.Текст=
			"ВЫБРАТЬ
			|	Перемещение.Ссылка,
			|	Перемещение.ВерсияДанных,
			|	Перемещение.ПометкаУдаления,
			|	Перемещение.Номер КАК Номер,
			|	Перемещение.Дата КАК ДатаДокумента,
			|	Перемещение.Проведен,
			|	Перемещение.ОрганизацияРасхода,
			|	Перемещение.ОрганизацияПрихода,
			|	Перемещение.МестоХраненияРасхода,
			|	Перемещение.МестоХраненияПрихода,
			|	Перемещение.Автор,
			|	Перемещение.ДатаСоздания,
			|	Перемещение.АвторКорректировки,
			|	Перемещение.ДатаКорректировки,
			|	Перемещение.Комментарий,
			|	Перемещение.Основание,
			|	Перемещение.Номенклатура.(
			|		Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Номенклатура,
			|		Комплект,
			|		Партия,
			|		КарточкаНоменклатуры,
			|		ЕдиницаИзмерения,
			|		Количество,
			|		Описание,
			|		КарточкаНоменклатуры.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|		КарточкаНоменклатуры.СерийныйНомер КАК СерийныйНомер,
			|		Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
			|		КарточкаНоменклатуры.Код,
			|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|		Номенклатура.Код
			|	),
			|	Перемещение.ДополнительныеРеквизиты.(
			|		Ссылка,
			|		НомерСтроки,
			|		Свойство,
			|		Значение,
			|		ТекстоваяСтрока
			|	),
			|	Перемещение.Представление,
			|	Перемещение.МоментВремени
			|ИЗ
			|	Документ.Перемещение КАК Перемещение
			|ГДЕ
			|	Перемещение.Ссылка = &ТекущийДокумент
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ВыборкаСтрок = Шапка.Номенклатура.Выбрать();
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		
		СведенияОбОрганизацииРасхода 	= УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.ОрганизацияРасхода, Шапка.ДатаДокумента, ,);
		СведенияОбОрганизацииПрихода 	= УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.ОрганизацияПрихода, Шапка.ДатаДокумента, ,);
		МОЛРасхода						= УправлениеITОтделом8УФ.ПолучитьОтветственногоСотрудникаМестаХранения(Шапка.ДатаДокумента, Шапка.МестоХраненияРасхода);		
		МОЛПрихода						= УправлениеITОтделом8УФ.ПолучитьОтветственногоСотрудникаМестаХранения(Шапка.ДатаДокумента, Шапка.МестоХраненияПрихода);		
		
		Если ИмяМакета = "АктУстановки" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Перемещение.ПФ_MXL_МакетАктУстановки");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Перемещение_АктУстановки";
			
			ОбластьМакета                           = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", 				СтрШаблон(НСтр("ru = 'Акт установки № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МестоХранения",					Шапка.МестоХраненияПрихода));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛ",							МОЛПрихода));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПолноеНаименованиеОрганизации",	УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизацииПрихода, "ПолноеНаименование")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаИВремяПечати",				ТекущаяДатаСеанса()));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СамДокумент",					ТекущийДокумент));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                           = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк.
			ВыборкаСтрокНоменклатуры                = Шапка.Номенклатура.Выбрать();
			ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
			ИтогСумма								= 0;
			ИтогКоличество							= 0;
			Количество								= ВыборкаСтрокНоменклатуры.Количество();
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				
				Цена								= УправлениеITОтделом8УФ.ЦенаНоменклатуры(
				Шапка.ДатаДокумента,
				?(УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(ВыборкаСтрокНоменклатуры.Номенклатура) = Истина, ВыборкаСтрокНоменклатуры.КарточкаНоменклатуры, ВыборкаСтрокНоменклатуры.Номенклатура),
				Шапка.ОрганизацияРасхода,
				Шапка.МестоХраненияРасхода,
				ВыборкаСтрокНоменклатуры.Партия);
				
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Цена",		Цена));
				Сумма								= ВыборкаСтрокНоменклатуры.Количество * Цена;
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Сумма",		Сумма));
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ИтогСумма                        	= ИтогСумма + Сумма;
				ИтогКоличество						= ИтогКоличество + ВыборкаСтрокНоменклатуры.Количество;
			КонецЦикла;
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво",		ИтогКоличество));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогСумма",		ИтогСумма));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью",	РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогСумма, УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту())));
			
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		ИначеЕсли ИмяМакета = "ТребованиеНакладная" Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Перемещение.ПФ_MXL_ТребованиеНакладная");
			
			ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_Перемещение_ТребованиеНакладная";
			
			ОбластьМакета                           = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пНомер",			НомерДокумента));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пДата",			Формат(Шапка.ДатаДокумента, "ДЛФ=D")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пМОЛПолучатель",	МОЛПрихода));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пНаименованиеОрганизацииОтправителя", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизацииРасхода, "ПолноеНаименование")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пНаименованиеОрганизацииПолучателя",	УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизацииПрихода, "ПолноеНаименование")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пПодразделениеОтправитель",			Шапка.МестоХраненияРасхода));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пПодразделениеПолучатель",			Шапка.МестоХраненияПрихода));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк.
			ВыборкаСтрокНоменклатуры                = Шапка.Номенклатура.Выбрать();
			ОбластьМакета							= Макет.ПолучитьОбласть("Строка");
			ИтогСумма								= 0;
			ИтогКоличество							= 0;
			Количество								= ВыборкаСтрокНоменклатуры.Количество();
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				
				Цена								= УправлениеITОтделом8УФ.ЦенаНоменклатуры(
				Шапка.ДатаДокумента,
				?(УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(ВыборкаСтрокНоменклатуры.Номенклатура) = Истина, ВыборкаСтрокНоменклатуры.КарточкаНоменклатуры, ВыборкаСтрокНоменклатуры.Номенклатура),
				Шапка.ОрганизацияРасхода,
				Шапка.МестоХраненияРасхода,
				ВыборкаСтрокНоменклатуры.Партия);
				
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Цена",		Цена));
				Сумма								= ВыборкаСтрокНоменклатуры.Количество * Цена;
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Сумма",		Сумма));
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ИтогСумма                        	= ИтогСумма + Сумма;
				ИтогКоличество						= ИтогКоличество + ВыборкаСтрокНоменклатуры.Количество;
			КонецЦикла;
			
			ОбластьМакета                           = Макет.ПолучитьОбласть("Итого");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пСуммаИтог",		  ИтогСумма));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пЗатребованоИтог", ИтогКоличество));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пКоличествоИтог",  ИтогКоличество));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			Если ЗначениеЗаполнено(МОЛПрихода) Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("пМОЛПолучатель",			МОЛПрихода));
				ОбластьМакета.Параметры.Заполнить(Новый Структура("пДолжностьМОЛПолучатель",МОЛПрихода.Должность));
			КонецЕсли;
			Если ЗначениеЗаполнено(МОЛРасхода) Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("пМОЛОтправитель", МОЛРасхода));
				ОбластьМакета.Параметры.Заполнить(Новый Структура("пДолжностьМОЛ",	 МОЛРасхода.Должность));
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		ИначеЕсли ИмяМакета = "НакладнаяНаВнутреннееПеремещениеОС2" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Перемещение.ПФ_MXL_ОС2");
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Перемещение_ОС2";
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка1");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пНомер", НомерДокумента));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пДата", Формат(Шапка.ДатаДокумента, "ДЛФ=D")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пНаименованиеОрганизацииОтправителя", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизацииРасхода, "ПолноеНаименование")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пПодразделениеОтправитель", Шапка.МестоХраненияРасхода));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("пПодразделениеПолучатель", Шапка.МестоХраненияПрихода));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк
			ВыборкаСтрокНоменклатуры                = Шапка.Номенклатура.Выбрать();
			ОбластьМакета							= Макет.ПолучитьОбласть("Строка");
			ИтогСумма								= 0;
			ИтогКоличество							= 0;
			Количество								= ВыборкаСтрокНоменклатуры.Количество();
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				
				Цена								= УправлениеITОтделом8УФ.ЦенаНоменклатуры(
				Шапка.ДатаДокумента,
				?(УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(ВыборкаСтрокНоменклатуры.Номенклатура) = Истина, ВыборкаСтрокНоменклатуры.КарточкаНоменклатуры, ВыборкаСтрокНоменклатуры.Номенклатура),
				Шапка.ОрганизацияРасхода,
				Шапка.МестоХраненияРасхода,
				ВыборкаСтрокНоменклатуры.Партия);
				
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Цена",		Цена));
				Сумма								= ВыборкаСтрокНоменклатуры.Количество * Цена;
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Сумма",		Сумма));
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ИтогСумма                        	= ИтогСумма + Сумма;
				ИтогКоличество						= ИтогКоличество + ВыборкаСтрокНоменклатуры.Количество;
			КонецЦикла;
			// Итого
			ОбластьМакета							= Макет.ПолучитьОбласть("ИтогоПоДокументу");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогСумма",		ИтогСумма));
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			// Подвал
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			// Сдал
			ОбластьМакета							= Макет.ПолучитьОбласть("Сдал");
			Если ЗначениеЗаполнено(МОЛРасхода) Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛРасхода",		МОЛРасхода));
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Должность",		МОЛРасхода.Должность));
				ОбластьМакета.Параметры.Заполнить(Новый Структура("ТабельныйНомер", МОЛРасхода.Код));
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			// Принял
			ОбластьМакета							= Макет.ПолучитьОбласть("Принял");
			Если ЗначениеЗаполнено(МОЛПрихода) Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛПрихода",		МОЛПрихода));
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Должность",		МОЛПрихода.Должность));
				ОбластьМакета.Параметры.Заполнить(Новый Структура("ТабельныйНомер", МОЛПрихода.Код));
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			// Главбух
			ОбластьМакета							= Макет.ПолучитьОбласть("Главбух");
			СтруктураРуководители = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.ОрганизацияРасхода, Шапка.ДатаДокумента);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ГлавБух", 			СтруктураРуководители.ФИОГлавногоБухгалтера));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		ИначеЕсли ИмяМакета = "НакладнаяНаПеремещение" Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Перемещение.ПФ_MXL_НакладнаяНаПеремещение");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Перемещение_НакладнаяНаПеремещение";
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Перемещение.ПФ_MXL_НакладнаяНаПеремещение");
			
			ОбластьМакета                           = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СамДокумент",		ТекущийДокумент));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Номер",			НомерДокумента));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаДокумента",	Шапка.ДатаДокумента));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаИВремяПечати", ТекущаяДатаСеанса()));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МестоХраненияРасхода",			Шапка.МестоХраненияРасхода));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МестоХраненияПрихода",			Шапка.МестоХраненияПрихода));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПолноеНаименованиеОрганизации",	УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизацииРасхода, "ПолноеНаименование")));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк
			ВыборкаСтрокНоменклатуры                = Шапка.Номенклатура.Выбрать();
			ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
			ИтогСумма								= 0;
			ИтогКоличество							= 0;
			КоличествоСтрок							= ВыборкаСтрокНоменклатуры.Количество();
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ИтогКоличество = ИтогКоличество + ВыборкаСтрокНоменклатуры.Количество;
			КонецЦикла;
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Отпустил",		МОЛРасхода));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Получил",		МОЛПрихода));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво",		ИтогКоличество));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("КоличествоСтрок",КоличествоСтрок));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		ИначеЕсли ИмяМакета = "АктВводаВЭксплуатацию" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Перемещение.ПФ_MXL_МакетАктВводаВЭксплуатацию");
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Перемещение_АктВводаВЭксплуатацию";
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", СтрШаблон(НСтр("ru = 'Акт ввода в эксплуатацию компьютерной и орг. техники № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МестоХранения", Шапка.МестоХраненияПрихода));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛ",		?(ЗначениеЗаполнено(МОЛПрихода), МОЛПрихода, "__________________________")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПолноеНаименованиеОрганизации", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизацииПрихода, "ПолноеНаименование")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаИВремяПечати", ТекущаяДатаСеанса()));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СамДокумент", ТекущийДокумент));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк
			ВыборкаСтрокНоменклатуры                = Шапка.Номенклатура.Выбрать();
			ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
			Количество								= ВыборкаСтрокНоменклатуры.Количество();
			ИтогКоличество							= 0;	
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ИтогКоличество = ИтогКоличество + ВыборкаСтрокНоменклатуры.Количество;
			КонецЦикла;
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво",		ИтогКоличество));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛ",			МОЛПрихода));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛРасхода",		МОЛРасхода));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		ИначеЕсли ИмяМакета = "АктВыдачиОборудования" Тогда 
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Перемещение.ПФ_MXL_МакетАктВыдачиОборудования");
			ТабличныйДокумент.КлючПараметровПечати = "Параметры_Печати_Перемещение_АктВыдачиОборудования";
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			
			Если СтруктураЗаполнения.ОрганизацияРасхода.КонтактнаяИнформация.Количество() > 0 Тогда  
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Город", СтруктураЗаполнения.ОрганизацияРасхода.КонтактнаяИнформация[0].Город));
			КонецЕсли;
		
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаАкта", Формат(СтруктураЗаполнения.Дата, "ДФ=yyyy")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаАктаПолная", Формат(СтруктураЗаполнения.Дата, "ДФ=dd.MM.yyyy")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПолноеНаименованиеОрганизации", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизацииРасхода, "ПолноеНаименование")));
			
			СтруктураРуководители = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(СтруктураЗаполнения.ОрганизацияРасхода, СтруктураЗаполнения.Дата);
			
			СтрокаДолжность = Строка(СтруктураРуководители.РуководительДолжность);
			СклонениеПредставленийОбъектов.ПросклонятьПредставление(СтрокаДолжность, 2, СтрокаДолжность);
			
			СтрокаРуководитель = Строка(СтруктураРуководители.Руководитель);
			СклонениеПредставленийОбъектов.ПросклонятьПредставление(СтрокаРуководитель, 2, СтрокаРуководитель);
			
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Должность", НРег(СтрокаДолжность)));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОРуководителя", СтрокаРуководитель));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛ",		?(ЗначениеЗаполнено(МОЛПрихода), МОЛПрихода, "________________")));
			
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк
			ВыборкаСтрокНоменклатуры                = Шапка.Номенклатура.Выбрать();
			ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
			Количество								= ВыборкаСтрокНоменклатуры.Количество();
			ИтогКоличество							= 0;
			ИтогСумма                               = 0;
			
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				Цена								= УправлениеITОтделом8УФ.ЦенаНоменклатуры(
				Шапка.ДатаДокумента,
				?(УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(ВыборкаСтрокНоменклатуры.Номенклатура) = Истина, ВыборкаСтрокНоменклатуры.КарточкаНоменклатуры, ВыборкаСтрокНоменклатуры.Номенклатура),
				Шапка.ОрганизацияРасхода,
				Шапка.МестоХраненияРасхода,
				ВыборкаСтрокНоменклатуры.Партия);
				Сумма								= ВыборкаСтрокНоменклатуры.Количество * Цена;
				ОбластьМакета.Параметры.Заполнить(Новый Структура("Сумма",		Сумма));
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ИтогСумма                        	= ИтогСумма + Сумма;
				ИтогКоличество						= ИтогКоличество + ВыборкаСтрокНоменклатуры.Количество;
			КонецЦикла;
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Руководитель", СтруктураРуководители.Руководитель));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛ",		  МОЛПрихода));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогКолво",		ИтогКоличество));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогСумма",		ИтогСумма));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
					
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктУстановки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктУстановки", НСтр("ru='Акт установки'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктУстановки"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТребованиеНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТребованиеНакладная", НСтр("ru='Требование-накладная (М-11)'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ТребованиеНакладная"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяНаВнутреннееПеремещениеОС2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяНаВнутреннееПеремещениеОС2", НСтр("ru='Накладная на внутреннее перемещение (ОС-2)'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "НакладнаяНаВнутреннееПеремещениеОС2"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяНаПеремещение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяНаПеремещение", НСтр("ru='Накладная на перемещение'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "НакладнаяНаПеремещение"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктВводаВЭксплуатацию") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктВводаВЭксплуатацию", НСтр("ru='Акт ввода в эксплуатацию'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктВводаВЭксплуатацию"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктВыдачиОборудования") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктВыдачиОборудования", НСтр("ru='Акт выдачи оборудования'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктВыдачиОборудования"));
	КонецЕсли;
		
КонецПроцедуры

// Функция получает данные для печати.
//
Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Возврат Новый Структура("Данные, Макеты",
							ДанныеПоВсемОбъектам,
							Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
											ОписаниеОбластей,
											ТипыМакетов,
											ДвоичныеДанныеМакетов));
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт	
	
	// Акт установки
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктУстановки";
	КомандаПечати.Представление = НСтр("ru = 'Акт установки'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 5;
	
	// Требование - накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТребованиеНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Требование-накладная (М-11)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 8;
	
	// Накладная на внутреннее перемещение (ОС-2)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаВнутреннееПеремещениеОС2";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на внутреннее перемещение (ОС-2)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 6;
	
	// Накладная на перемещение
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаПеремещение";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на перемещение'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 7;

	// Акт ввода в эксплуатацию
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктВводаВЭксплуатацию";
	КомандаПечати.Представление = НСтр("ru = 'Акт ввода в эксплуатацию'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 3;
	
	// Акт выдачи оборудования
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктВыдачиОборудования";
	КомандаПечати.Представление =НСтр("ru = 'Акт выдачи оборудования'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли