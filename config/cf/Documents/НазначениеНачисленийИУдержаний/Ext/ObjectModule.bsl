#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	СЛС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);	
	
	// Подготовка наборов записей.
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	СЛС.ОтразитьДвиженияВРазделахУчета(Ссылка, ДополнительныеСвойства, Движения, Отказ);		
	
	// Запись наборов записей.
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);	
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа.
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеITОтделом8УФ.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
		 
КонецПроцедуры

// Процедура - обработчик события ПриЗаписи объекта.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	// Проверка на ошибки.
	СписокОшибок = ПроверитьДокументПередПроведением();
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок, Отказ);	
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет документ перед проведением, возвращает СписокЗначений с ошибками,
// если пустой, то ошибок нет.
Функция ПроверитьДокументПередПроведением()
	
	СписокОшибок = Неопределено;
			
	// Проверка не уволен ли сотрудник.
	Для Каждого Строки Из Сотрудники Цикл
		Если Строки.Сотрудник.Актуальность = Ложь Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Сотрудник", 
				СтрШаблон(НСтр("ru = 'Сотудник %1 уволен.'"), Строки.Сотрудник), "");
		КонецЕсли;
	КонецЦикла;
		
	// Проверка дублей строк табличной части НачисленияУдержания.
	ТЗНачисленияИУдержания = НачисленияУдержания.Выгрузить();
	ТЗНачисленияИУдержания.Колонки.Добавить("КоличествоОдинаковых");
	Для Каждого Строки Из ТЗНачисленияИУдержания Цикл
		Строки.КоличествоОдинаковых = 1;
	КонецЦикла;
	ТЗНачисленияИУдержания.Свернуть("КлючСвязи,ВидНачисленияУдержания", "КоличествоОдинаковых");
	
	Для Каждого Строки Из ТЗНачисленияИУдержания Цикл
		Если Строки.КоличествоОдинаковых > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				СписокОшибок,
				"Объект.НачисленияУдержания", 
				СтрШаблон(НСтр("ru = 'Для начисления\удержания ""%1"" есть дублирующиеся строки.'"),Строки.ВидНачисленияУдержания));
		КонецЕсли;		
	КонецЦикла;
	
	// Проверка дублей строк табличной части НалогиНаДоходы.
	ТЗНалогиНаДоходы = НалогиНаДоходы.Выгрузить();
	ТЗНалогиНаДоходы.Колонки.Добавить("КоличествоОдинаковых");
	Для Каждого Строки Из ТЗНалогиНаДоходы Цикл
		Строки.КоличествоОдинаковых = 1;
	КонецЦикла;
	ТЗНалогиНаДоходы.Свернуть("ВидНачисленияУдержания", "КоличествоОдинаковых");
	
	Для Каждого Строки Из ТЗНалогиНаДоходы Цикл
		Если Строки.КоличествоОдинаковых > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				СписокОшибок,
				"Объект.НалогиНаДоходы", 
				СтрШаблон(НСтр("ru = 'Для налога ""%1"" есть дублирующиеся строки.'"),Строки.ВидНачисленияУдержания));
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого Строки Из Сотрудники Цикл
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НазначениеНачисленийИУдержанийСотрудники.НомерСтроки КАК НомерСтроки,
			|	НазначениеНачисленийИУдержанийСотрудники.Сотрудник КАК Сотрудник,
			|	НазначениеНачисленийИУдержанийСотрудники.КлючСвязи КАК КлючСвязи
			|ПОМЕСТИТЬ ТаблицаСотрудники
			|ИЗ
			|	Документ.НазначениеНачисленийИУдержаний.Сотрудники КАК НазначениеНачисленийИУдержанийСотрудники
			|ГДЕ
			|	НазначениеНачисленийИУдержанийСотрудники.Сотрудник = &Сотрудник
			|	И НазначениеНачисленийИУдержанийСотрудники.Ссылка <> &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаСотрудники.НомерСтроки КАК НомерСтроки,
			|	ТаблицаСотрудники.Сотрудник КАК Сотрудник,
			|	ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
			|	ПлановыеНачисленияИУдержанияСрезПоследних.Сумма КАК Сумма
			|ИЗ
			|	ТаблицаСотрудники КАК ТаблицаСотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних КАК ПлановыеНачисленияИУдержанияСрезПоследних
			|		ПО ТаблицаСотрудники.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
			|ГДЕ
			|	ПлановыеНачисленияИУдержанияСрезПоследних.Актуальность
			|	И ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник = &Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МАКСИМУМ(ТаблицаСотрудникиДублиСтрок.НомерСтроки) КАК НомерСтроки,
			|	ТаблицаСотрудникиДублиСтрок.Сотрудник КАК Сотрудник
			|ИЗ
			|	ТаблицаСотрудники КАК ТаблицаСотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСотрудники КАК ТаблицаСотрудникиДублиСтрок
			|		ПО ТаблицаСотрудники.НомерСтроки <> ТаблицаСотрудникиДублиСтрок.НомерСтроки
			|			И ТаблицаСотрудники.Сотрудник = ТаблицаСотрудникиДублиСтрок.Сотрудник
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСотрудникиДублиСтрок.Сотрудник
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки");
		
		Запрос.УстановитьПараметр("Сотрудник",	Строки.Сотрудник);
		Запрос.УстановитьПараметр("Ссылка",		Ссылка);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				СписокОшибок,
				"Объект.Сотрудник", 
				СтрШаблон(НСтр("ru = 'По сотруднику ""%1"" уже есть начисления\удержания ""%2"".'"),
				Строки.Сотрудник, ВыборкаИзРезультатаЗапроса.ВидНачисленияУдержания));
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				СписокОшибок,
				"Объект.Сотрудник", 
				СтрШаблон(НСтр("ru = 'В строке №""%1"" табл. части ""Сотрудники"" сотрудник указывается повторно..'"),
				Строки.Сотрудник));
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
					
	Возврат СписокОшибок;
	
КонецФункции
	
#КонецОбласти
	
#КонецЕсли