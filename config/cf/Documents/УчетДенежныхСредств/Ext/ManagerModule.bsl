#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс	

// Функция возвращает список имен «ключевых» реквизитов.
//
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать,
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив редактируемых реквизитов в групповой обработке.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;

	СписокКонтактов = Новый Массив;
	СписокКонтактов.Добавить(Ссылка.Контрагент);
	
	Возврат СписокКонтактов;
	
КонецФункции

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	РеквизитПоложениеСтатьиДоходовРасходов 	= Реквизиты.Найти("УчетДенежныхСредств.ПоложениеСтатьиДоходовРасходов");
	Реквизиты.Удалить(РеквизитПоложениеСтатьиДоходовРасходов);
	РеквизитПоложениеПодразделения	  		= Реквизиты.Найти("УчетДенежныхСредств.ПоложениеПодразделения");
	Реквизиты.Удалить(РеквизитПоложениеПодразделения);
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт		
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта 	 = Новый Соответствие;	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("УчетДенежныхСредствРасчетМетрикЗаписьДокумента", НСтр("ru = 'Запись документа'"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует поле СуммаРубКоп для печатной формы.
//
Функция РубКоп(Сумма)
	
	Руб = Цел(Сумма);
	Коп = ОКР(100 * (Сумма - Руб), 0, 1);
	СуммаРубКоп = "" + Руб + " руб. " + Цел(Коп/10) + (Коп - 10 * Цел(Коп / 10)) + " коп.";
	Возврат СуммаРубКоп;
	
КонецФункции // РубКоп()

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.ВариантыОтчетов
// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();		
		КомандаОтчет.Менеджер      = Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Взаиморасчеты с контрагентами'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность      = "Обычное";
		КомандаОтчет.КлючВарианта  = "Основной";		
		
	КонецЕсли;
			
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
		
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция печати документа.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	Если ИмяМакета = "ПКО" Или ИмяМакета = "РКО" Тогда		
		Возврат ПечатьПКОРКО(МассивОбъектов, ОбъектыПечати, ИмяМакета);	
	КонецЕсли;
КонецФункции // ПечатнаяФорма()

// Процедура печати документа.
//
Функция ПечатьПКОРКО(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура; 
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_УчетДенежныхСредств";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(ТекущийДокумент);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);		                                                                  
		Запрос.Текст = 				
			"ВЫБРАТЬ
			|	УчетДенежныхСредств.Ссылка КАК Ссылка,
			|	УчетДенежныхСредств.Номер КАК Номер,
			|	УчетДенежныхСредств.Дата КАК ДатаДокумента,
			|	УчетДенежныхСредств.Организация КАК Организация,
			|	УчетДенежныхСредств.Организация.ВидКонтрагента КАК ВидКонтрагента,
			|	УчетДенежныхСредств.Организация.Префикс КАК Префикс,
			|	УчетДенежныхСредств.Организация.КодПоОКПО КАК ОрганизацияПоОКПО,
			|	УчетДенежныхСредств.Организация.НаименованиеПолное КАК ПредставлениеОрганизации,
			|	УчетДенежныхСредств.Основание КАК Основание,
			|	УчетДенежныхСредств.Контрагент КАК Контрагент,
			|	УчетДенежныхСредств.Договор КАК Договор,
			|	УчетДенежныхСредств.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
			|	УчетДенежныхСредств.Автор КАК Автор,
			|	УчетДенежныхСредств.ДатаСоздания КАК ДатаСоздания,
			|	УчетДенежныхСредств.Комментарий КАК Комментарий,
			|	УчетДенежныхСредств.Бюджет КАК Бюджет,
			|	УчетДенежныхСредств.ПериодБюджета КАК ПериодБюджета,
			|	УчетДенежныхСредств.ВидДенежныхСредств КАК ВидДенежныхСредств,
			|	УчетДенежныхСредств.БанковскийСчет КАК БанковскийСчет,
			|	УчетДенежныхСредств.Подразделение.Код КАК КодПодразделения,
			|	УчетДенежныхСредств.Подразделение.Наименование КАК ПредставлениеПодразделения,
			|	УчетДенежныхСредств.СуммаДокумента КАК СуммаДокумента,
			|	УчетДенежныхСредств.ВидДвижения КАК ВидДвижения
			|ИЗ
			|	Документ.УчетДенежныхСредств КАК УчетДенежныхСредств
			|ГДЕ
			|	УчетДенежныхСредств.Ссылка = &ТекущийДокумент";
		
		ВыборкаДляПечати = Запрос.Выполнить().Выбрать();
		ВыборкаДляПечати.Следующий();
		
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УчетДенежныхСредств";
		ЭтоПКО = Ложь;
		
		Если ИмяМакета = "ПКО" Тогда
			ЭтоПКО = Истина;
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УчетДенежныхСредств.ПФ_MXL_КО1");
		Иначе 
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УчетДенежныхСредств.ПФ_MXL_КО2");
		КонецЕсли;	
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляПечати);
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Сумма", Формат(ВыборкаДляПечати.СуммаДокумента, "ЧЦ=15; ЧДЦ=2")));
		
		Руководители = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(ВыборкаДляПечати.Организация, ВыборкаДляПечати.ДатаДокумента);
		
		Если ЭтоПКО Тогда
			Если ВыборкаДляПечати.ВидДенежныхСредств = Справочники.ВидыДенежныхСредств.Банк Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("КодДебета", "51"));
			ИначеЕсли
				ВыборкаДляПечати.ВидДенежныхСредств = Справочники.ВидыДенежныхСредств.Касса Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("КодДебета", "50"));
			КонецЕсли;
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СубСчет", ""));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаРубКоп", РубКоп(ВыборкаДляПечати.СуммаДокумента)));
		Иначе
			Если ВыборкаДляПечати.ВидДенежныхСредств = Справочники.ВидыДенежныхСредств.Банк Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("КредитСубСчет", "51"));
			ИначеЕсли
				ВыборкаДляПечати.ВидДенежныхСредств = Справочники.ВидыДенежныхСредств.Касса Тогда
				ОбластьМакета.Параметры.Заполнить(Новый Структура("КредитСубСчет", "50"));
			КонецЕсли;		
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДолжностьРуководителя", 	Руководители.РуководительДолжность));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОРуководителя",		Руководители.ФИОРуководителя));
		КонецЕсли;				
		
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОГлавногоБухгалтера", 		Руководители.ФИОГлавногоБухгалтера));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОКассира", 				Руководители.ФИОКассира));
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДляПечати.Номер, Истина, Истина);	
		
		ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерДокумента", НомерДокумента));
		СуммаКПрописи = ВыборкаДляПечати.СуммаДокумента;
		ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, УправлениеITОтделом8УФПовтИсп.ПолучитьНациональнуюВалюту())));
		
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляПечати.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПКО") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПКО", НСтр("ru = 'Приходный кассовый ордер (КО-1)'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ПКО"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РКО") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РКО", НСтр("ru = 'Расходный кассовый ордер (КО-2)'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "РКО"));
	КонецЕсли;
		
КонецПроцедуры

// Функция возвращает данные для печати документа.
//
Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Возврат Новый Структура("Данные, Макеты",
							ДанныеПоВсемОбъектам,
							Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
											ОписаниеОбластей,
											ТипыМакетов,
											ДвоичныеДанныеМакетов));
	
КонецФункции

// Заполняет список команд печати Заказа покупателя.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// ПКО
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПКО";
	КомандаПечати.Представление = НСтр("ru = 'Приходный кассовый ордер (КО-1)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 4;
	
	// РКО
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РКО";
	КомандаПечати.Представление = НСтр("ru = 'Расходный кассовый ордер (КО-2)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 7;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли