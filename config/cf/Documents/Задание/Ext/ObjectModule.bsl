#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления = Ложь Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;		
	КонецЕсли;
		
	// Получаем текст описания.
	Описание			= ЗаданияСервер.ФорматироватьОписаниеЗаданияИзHTML(ТекстHTML);
	мТекущийПользователь= Пользователи.ТекущийПользователь();
	мПустаяДата			= Дата(1, 1, 1);
	мТекущаяДата 		= ТекущаяДатаСеанса();
   мНовыйЭтап        = Справочники.ЭтапыПроцессов.Новый;
   мЭтоНовый         = ЭтоНовый();
	
	Если НЕ мЭтоНовый Тогда
		СтарыеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
			"ТекущийИсполнитель, Инициатор, Выполнено, ТекущийЭтап, ДатаНачалаВыполненияРабот, Сервис, Услуга");
		ДополнительныеСвойства.Вставить("ПредыдущийИсполнитель", 	СтарыеЗначенияРеквизитов.ТекущийИсполнитель);
		ДополнительныеСвойства.Вставить("ПредыдущийИнициатор", 		СтарыеЗначенияРеквизитов.Инициатор);
	Иначе
		СтарыеЗначенияРеквизитов = Новый Структура();
		СтарыеЗначенияРеквизитов.Вставить("ТекущийИсполнитель", Неопределено);
		СтарыеЗначенияРеквизитов.Вставить("Инициатор", 			Неопределено);
		СтарыеЗначенияРеквизитов.Вставить("Выполнено", 			Неопределено);
		СтарыеЗначенияРеквизитов.Вставить("ТекущийЭтап", 		Неопределено);
		СтарыеЗначенияРеквизитов.Вставить("Сервис", 			Неопределено);
		СтарыеЗначенияРеквизитов.Вставить("Услуга", 			Неопределено);
		СтарыеЗначенияРеквизитов.Вставить("ДатаНачалаВыполненияРабот",	мПустаяДата);
		ДополнительныеСвойства.Вставить("ПредыдущийИсполнитель",Справочники.Пользователи.ПустаяСсылка());
		ДополнительныеСвойства.Вставить("ПредыдущийИнициатор", 	Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	
	// Проверка на роль "Просмотр чужих заданий" (тогда чужие не можем менять).
	СписокПодчиненных = УправлениеITОтделом8УФ.СписокПодчиненныхСотрудников(мТекущийПользователь);
	Если НЕ УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskРаспределениеЗаданий")
		И УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий") 
		И СписокПодчиненных.Найти(Автор) = Неопределено 
		И СписокПодчиненных.Найти(ТекущийИсполнитель) = Неопределено 
		И СписокПодчиненных.Найти(Инициатор) = Неопределено Тогда
		
		ПоказатьОшибку = Ложь;
		Если Ссылка.Пустая() Тогда
			ПоказатьОшибку = Истина;
		Иначе
			Если СтарыеЗначенияРеквизитов.ТекущийИсполнитель <> мТекущийПользователь Тогда
				ПоказатьОшибку = Истина;
			КонецЕсли;			
		КонецЕсли;
		
		Если ПоказатьОшибку Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Есть право просмотра этой задачи (роль ""Просмотр чужих заданий"").'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
				
	Если НЕ ЗначениеЗаполнено(Категория) И ЗначениеЗаполнено(Сервис) Тогда
		Категория = Сервис.Категория;
	КонецЕсли;
	
	// Ставим дату начала при первом сохранении.
	Если ДатаНазначенияИсполнителя = мПустаяДата И ЗначениеЗаполнено(ТекущийИсполнитель) Тогда
		ДатаНазначенияИсполнителя = мТекущаяДата;
    КонецЕсли;
    
    // Дата создания.
    Если ДатаСоздания = мПустаяДата Тогда
    	ДатаСоздания = мТекущаяДата;
    КонецЕсли; 
		
	Если НЕ ЗначениеЗаполнено(ТекущийЭтап) Тогда
		ТекущийЭтап = мНовыйЭтап;
	КонецЕсли;
	
	Приоритет = ЗаданияСервер.РассчитатьПриоритет(Влияние, Срочность);
		
	// Если этап последний, то ставим, что выполнено.
	Выполнено = ТекущийЭтап.СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Выполнен 
		ИЛИ	ТекущийЭтап.СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Закрыт;
	
	Если Выполнено Тогда
			
		Если НЕ мЭтоНовый Тогда
			Если СтарыеЗначенияРеквизитов.Выполнено <> Выполнено Тогда
				ПроцентВыполнения = 100;
			КонецЕсли;
		Иначе
			ПроцентВыполнения = 100;
		КонецЕсли;
		Если Завершено = Ложь И ДатаВыполнения = мПустаяДата Тогда
			ДатаВыполнения = мТекущаяДата;
		КонецЕсли;
		
	Иначе
		
		ДатаВыполнения = мПустаяДата;
		// Процент по чек-листу в зависимости от веса пунктов.
		мОбщийВес 		= 0;
		ВыполненоВес 	= 0;
		Для Каждого СтрокаЧекЛиста Из ЧекЛист Цикл
			мОбщийВес 		= мОбщийВес + ?(СтрокаЧекЛиста.Вес > 1, СтрокаЧекЛиста.Вес, 1);
			ВыполненоВес 	= ВыполненоВес 
				+ ?(СтрокаЧекЛиста.Выполнено, ?(СтрокаЧекЛиста.Вес > 1, СтрокаЧекЛиста.Вес, 1), 0);
		КонецЦикла;
		Если ЧекЛист.Количество() <> 0 Тогда
			ПроцентВыполнения = Окр(ВыполненоВес * 100 / мОбщийВес);
		КонецЕсли;
		Завершено = Ложь;
		
	КонецЕсли;
	
	Если Завершено = Ложь Тогда
		ДатаЗавершения = мПустаяДата;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОценкаВыполнения) Тогда
		ОценкаВыполнения = Справочники.ОценкиЗаданий.БезОценки;
	КонецЕсли;
		
	Наблюдатели.Сортировать("Адресат");		
		
	#Область Этапы
    
    Если мЭтоНовый Тогда
        
        Если ТекущийЭтап <> мНовыйЭтап Тогда
            
    		НоваяСтрока				    = Этапы.Добавить();
    		НоваяСтрока.Этап		    = мНовыйЭтап;
            НоваяСтрока.ДатаНачала      = ДатаСоздания;
            НоваяСтрока.ДатаОкончания   = мТекущаяДата;
            
        КонецЕсли;
        
        НоваяСтрока				    = Этапы.Добавить();
        НоваяСтрока.Этап		    = ТекущийЭтап;
        НоваяСтрока.ДатаНачала      = мТекущаяДата;
        
    ИначеЕсли ТекущийЭтап <> СтарыеЗначенияРеквизитов.ТекущийЭтап Тогда
		
		// Дата окончания для предыдущего этапа.
		Отбор 			= Новый Структура("Этап, ДатаОкончания", СтарыеЗначенияРеквизитов.ТекущийЭтап, Дата(1, 1, 1));		
		МассивСтрок 	= Этапы.НайтиСтроки(Отбор);
		КоличествоСтрок = МассивСтрок.Количество();
				
		Если КоличествоСтрок > 0 Тогда			
			МассивСтрок[КоличествоСтрок - 1].ДатаОкончания = мТекущаяДата;
		КонецЕсли;		
		
		// Добавляем новый этап.
		НоваяСтрока				= Этапы.Добавить();
		НоваяСтрока.Этап		= ТекущийЭтап;
		НоваяСтрока.ДатаНачала	= мТекущаяДата;		
		
    КонецЕсли;
    
    Если Этапы.Количество() > 0 Тогда
        НоваяСтрока = Этапы[Этапы.Количество() - 1];
        Если Выполнено Тогда
            НоваяСтрока.ДатаОкончания = мТекущаяДата;
        Иначе
            НоваяСтрока.ДатаОкончания = мПустаяДата;
        КонецЕсли;            
    КонецЕсли;
    
    #КонецОбласти
    
    #Область Исполнители
    
    Если мЭтоНовый Тогда
        
        Если ЗначениеЗаполнено(ТекущийИсполнитель) Тогда
            НоваяСтрока				    = Исполнители.Добавить();
            НоваяСтрока.Исполнитель		= ТекущийИсполнитель;
            НоваяСтрока.ДатаНачала      = мТекущаяДата;
        КонецЕсли;
        
    ИначеЕсли ТекущийИсполнитель <> СтарыеЗначенияРеквизитов.ТекущийИсполнитель Тогда
        
        // Дата окончания для предыдущего этапа.
        Отбор 			= Новый Структура("Исполнитель, ДатаОкончания", СтарыеЗначенияРеквизитов.ТекущийИсполнитель,
        	Дата(1, 1, 1));		
        МассивСтрок 	= Исполнители.НайтиСтроки(Отбор);
        КоличествоСтрок = МассивСтрок.Количество();

        Если КоличествоСтрок > 0 Тогда			
            МассивСтрок[КоличествоСтрок - 1].ДатаОкончания = мТекущаяДата;
        КонецЕсли;		
        
        // Добавляем нового исполнителя.
        НоваяСтрока				= Исполнители.Добавить();
        НоваяСтрока.Исполнитель = ТекущийИсполнитель;
        НоваяСтрока.ДатаНачала	= мТекущаяДата;
        
    КонецЕсли;
    
    Если Исполнители.Количество() > 0 Тогда
        НоваяСтрока = Исполнители[Исполнители.Количество() - 1];
        Если Выполнено Тогда
            НоваяСтрока.ДатаОкончания = мТекущаяДата;
        Иначе
            НоваяСтрока.ДатаОкончания = мПустаяДата;
        КонецЕсли;            
    КонецЕсли;
    
    #КонецОбласти
	
	#Область Трудозатраты
	
	// Трудозатраты.
	// изменился исполнитель, этап тот же.
	// останавливаем трудозатраты у всех, кроме нового исполнителя.
	Если НЕ мЭтоНовый И ТекущийИсполнитель <> СтарыеЗначенияРеквизитов.ТекущийИсполнитель Тогда 
		СтруктураЗаписи = Новый Структура;                                     					 
		СтруктураЗаписи.Вставить("Объект", Ссылка);		
		СтруктураЗаписи.Вставить("МоментВремени", 	мТекущаяДата);
		Если РегистрыСведений.Трудозатраты.ТрудозатратыВключены(СтруктураЗаписи) Тогда
			СтруктураЗаписи.Вставить("НовыйИсполнитель", ТекущийИсполнитель);
			СтруктураЗаписи.Вставить("ВидРаботы", 		 Справочники.ВидыРабот.ВыполнениеЗаданий);
			СтруктураЗаписи.Вставить("Описание", 		 СтрШаблон(НСтр("ru = 'Выполнение этапа ""%1""'"),
				СтарыеЗначенияРеквизитов.ТекущийЭтап));
			РегистрыСведений.Трудозатраты.ВыключитьТрудозатраты(СтруктураЗаписи);			
		КонецЕсли;		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область УчастникиЗадания
	
	// Участники задания.
	УчастникиЗадания.Очистить();
	МассивУчастников = Новый Массив;
	
	// Автор.
	ДобавитьУчастникаВМассивУчастников(Автор, МассивУчастников);
	// Инициатор.
	ДобавитьУчастникаВМассивУчастников(Инициатор, МассивУчастников);
	// Текущий исполнитель.
	ДобавитьУчастникаВМассивУчастников(ТекущийИсполнитель, МассивУчастников);
	//Наблюдатели.
	Для Каждого СтрокаНаблюдатель Из Наблюдатели Цикл
		ДобавитьУчастникаВМассивУчастников(СтрокаНаблюдатель.Адресат, МассивУчастников);
	КонецЦикла;	
	
	Для Каждого ЭлМассива Из МассивУчастников Цикл
		НоваяСтрока = УчастникиЗадания.Добавить();
		НоваяСтрока.Участник = ЭлМассива;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область SLA
	
	Если НЕ РучнаяУстановкаДатВSLA И ЗначениеЗаполнено(Сервис) И ЗначениеЗаполнено(Услуга) Тогда		
		Если КрайняяДатаРеакции = мПустаяДата И КрайняяДатаВыполнения = мПустаяДата Тогда 
			Результат = УправлениеSLA.РассчитатьSLA(ЭтотОбъект);						
			Если НЕ Результат.Свойство("НеВсеДанные") И Не Результат.Свойство("Ошибки") Тогда 
				КрайняяДатаРеакции		= Результат.КрайняяДатаРеакции;
				КрайняяДатаВыполнения	= Результат.КрайняяДатаВыполнения;	
				SLA						= Результат.SLA;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	ОбщийВес = ЗаданияСервер.ОбщийВесЗадания(ЭтотОбъект);
	
	Если ДатаНачалаВыполненияРабот = мПустаяДата Тогда
		// Для возможности очистки реквизита.
		Если СтарыеЗначенияРеквизитов.ДатаНачалаВыполненияРабот = мПустаяДата
			И ЗначениеЗаполнено(ТекущийЭтап) Тогда
			Если ТекущийЭтап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Новый
				И ТекущийЭтап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Закрыт
				И ТекущийЭтап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Выполнен Тогда
				ДатаНачалаВыполненияРабот = мТекущаяДата;
			КонецЕсли;					
		КонецЕсли;	
	КонецЕсли;	
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", мЭтоНовый);
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданиеСтруктура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
		"Ссылка, ТекущийЭтап, ТекущийИсполнитель, Инициатор, Автор");
	
	Если ДополнительныеСвойства.ЭтоНовый И ДополнительныеСвойства.Свойство("ТрудозатратыВключены") 
		И ДополнительныеСвойства.ТрудозатратыВключены Тогда
			
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект", 		 Ссылка);
		ТрудозатратыДатаНачала 	 = ?(ЗначениеЗаполнено(ДатаНазначенияИсполнителя), ДатаНазначенияИсполнителя, 
			ДатаСоздания);
		СтруктураПараметров.Вставить("МоментВремени",ТрудозатратыДатаНачала);		
				
		Если ЗначениеЗаполнено(ЗаданиеСтруктура.ТекущийИсполнитель) Тогда		
			СтруктураПараметров.Вставить("Исполнитель",  ЗаданиеСтруктура.ТекущийИсполнитель);
			СтруктураПараметров.Вставить("Инициатор",  	Инициатор);
			РегистрыСведений.Трудозатраты.ВключитьТрудозатраты(СтруктураПараметров);
		Иначе
			СтруктураПараметров.Вставить("Исполнитель",  Пользователи.ТекущийПользователь());
			СтруктураПараметров.Вставить("Инициатор",  	Инициатор);
			ТрудозатратыДатаОкончания = ТекущаяДатаСеанса();			
			СтруктураПараметров.Вставить("ДатаОкончания", ТрудозатратыДатаОкончания);
			СтруктураПараметров.Вставить("Длительность",  ТрудозатратыДатаОкончания - ТрудозатратыДатаНачала);
			СтруктураПараметров.Вставить("ВидРаботы", 	  Справочники.ВидыРабот.РаботаСДокументами);
			СтруктураПараметров.Вставить("Описание", 	  СтрШаблон(НСтр("ru = 'Выполнение этапа %1'"), ТекущийЭтап));
			РегистрыСведений.Трудозатраты.ВключитьТрудозатраты(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
		
	РегистрыСведений.РеквизитыЗаданий.ОбновитьДополнительныеРеквизитыЗадания(ЗаданиеСтруктура);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОчередьВыполненияЗаданий") = Истина Тогда
		ЗаданияСервер.ПоставитьСнятьСОчередиЗадание(ЭтотОбъект);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)	
	
	// Обнуляем переменные.	
	Исполнители.Очистить();
	Этапы.Очистить();
	Участники.Очистить();
	Основания.Очистить();
	
	ПроцентВыполнения 			= 0;
	ДатаНазначенияИсполнителя	= Дата(1, 1, 1);
	ДатаСоздания                = Дата(1, 1, 1);
	ДатаВыполнения 				= Дата(1, 1, 1);
	ДатаЗавершения 				= Дата(1, 1, 1);
	КрайняяДатаРеакции			= Дата(1, 1, 1);
	КрайняяДатаВыполнения		= Дата(1, 1, 1);
	ДатаНачалаВыполненияРабот	= Дата(1, 1, 1);
	ПлановаяДлительность		= 0;	
	ТекущийЭтап 				= Справочники.ЭтапыПроцессов.Новый;	
	ИдентификаторСообщения		= "";
	Выполнено					= Ложь;
	Завершено					= Ложь;
	ТекстHTML					= "";
	Описание					= "";
	ИдентификаторСообщения		= "";
	УчетнаяЗаписьЭлектроннойПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	Автор						= Справочники.Пользователи.ПустаяСсылка();
	АвторКорректировки			= Справочники.Пользователи.ПустаяСсылка();
	ОценкаВыполнения			= Справочники.ОценкиЗаданий.БезОценки;	
	СпособСоздания				= Справочники.СпособыСозданияЗаданий.ВРучную;
	НомерВходящегоДокумента		= "";
	ДатаВходящегоДокумента		= Дата(1, 1, 1);
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Спринт) Тогда
		Если ОбъектКопирования.Спринт.Завершен Тогда
			Спринт	= Справочники.Спринты.ПустаяСсылка();
		КонецЕслИ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Задание") Тогда
		
		ТипПроцесса				= Справочники.ТипыПроцессов.Инцидент;
		Родитель				= ДанныеЗаполнения.Ссылка;
		Инициатор				= Пользователи.ТекущийПользователь();
		КарточкаНоменклатуры	= ДанныеЗаполнения.КарточкаНоменклатуры;
		Организация				= ДанныеЗаполнения.Организация;
		Описание				= ДанныеЗаполнения.Описание;
		ТекстHTML				= ДанныеЗаполнения.ТекстHTML;
		Приоритет				= ДанныеЗаполнения.Приоритет;
		МестоХранения			= ДанныеЗаполнения.МестоХранения;
		Процесс					= ДанныеЗаполнения.Процесс;
		Проект					= ДанныеЗаполнения.Проект;
		Сервис					= ДанныеЗаполнения.Сервис;
		Услуга					= ДанныеЗаполнения.Услуга;
		Тема					= ДанныеЗаполнения.Тема;
		СпособСоздания			= Справочники.СпособыСозданияЗаданий.НаОсновании;
		Срочность				= ДанныеЗаполнения.Срочность;
		Влияние					= ДанныеЗаполнения.Влияние;
		УчетнаяЗаписьЭлектроннойПочты = ДанныеЗаполнения.УчетнаяЗаписьЭлектроннойПочты;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ТипПроцесса				= Справочники.ТипыПроцессов.ЗапросНаОборудование;
		Организация				= ДанныеЗаполнения.Организация;
		МестоХранения			= ДанныеЗаполнения.МестоХранения;
		Инициатор				= Пользователи.ТекущийПользователь();
		Подразделение			= ДанныеЗаполнения.Подразделение;
		Тема					= Строка(ДанныеЗаполнения);
		
		ФД = Новый ФорматированныйДокумент;
		ТекстHTML	= СтрШаблон(НСтр("ru = 'Прошу согласовать закупку у поставщика %1'"), ДанныеЗаполнения.Контрагент)
			+ ":<br>";
		Для Каждого Строки Из ДанныеЗаполнения.Номенклатура Цикл
			ТекстHTML	= ТекстHTML 
				+ СтрШаблон("%1. %2 - %3 %4 x %5 = %6 %7",
					Строка(Строки.НомерСтроки), 
					Строка(Строки.Номенклатура),
					Строка(Строки.Количество),
					Строка(Строки.ЕдиницаИзмерения),
					Строка(Строки.Цена),
					Строка(Строки.Всего),
					ДанныеЗаполнения.ВалютаДокумента) + "<br>";
		КонецЦикла;
		ТекстHTML	= ТекстHTML	+ СтрШаблон(НСтр("ru = 'ИТОГО: %1 %2'"), ДанныеЗаполнения.Номенклатура.Итог("Всего"),
			ДанныеЗаполнения.ВалютаДокумента)+ "<br>";
			
		ФД.УстановитьHTML(СокрЛП(ТекстHTML), Новый Структура);
		
		Описание				= ПоместитьВоВременноеХранилище(ФД, Новый УникальныйИдентификатор);
		СпособСоздания			= Справочники.СпособыСозданияЗаданий.НаОсновании;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ТипПроцесса				= Справочники.ТипыПроцессов.ЗапросНаОборудование;
		Организация				= ДанныеЗаполнения.Организация;
		МестоХранения			= ДанныеЗаполнения.МестоХранения;
		Инициатор				= Пользователи.ТекущийПользователь();
		Тема					= Строка(ДанныеЗаполнения);
		
		ФД = Новый ФорматированныйДокумент;
		ТекстHTML	= СтрШаблон(НСтр("ru = 'Прошу согласовать заказ с клиентом %1'"), ДанныеЗаполнения.Контрагент)
			+ ":<br>";
		Для Каждого Строки Из ДанныеЗаполнения.Номенклатура Цикл
			ТекстHTML	= ТекстHTML 
				+ СтрШаблон("%1. %2 - %3 %4 x %5 = %6 %7",
					Строка(Строки.НомерСтроки), 
					Строка(Строки.Номенклатура),
					Строка(Строки.Количество),
					Строка(Строки.ЕдиницаИзмерения),
					Строка(Строки.Цена),
					Строка(Строки.Всего),
					ДанныеЗаполнения.ВалютаДокумента) + "<br>";
		КонецЦикла;
		ТекстHTML	= ТекстHTML	+ СтрШаблон(НСтр("ru = 'ИТОГО: %1 %2'"), ДанныеЗаполнения.Номенклатура.Итог("Всего"),
			ДанныеЗаполнения.ВалютаДокумента)+ "<br>";
			
		ФД.УстановитьHTML(СокрЛП(ТекстHTML), Новый Структура);
		
		Описание				= ПоместитьВоВременноеХранилище(ФД, Новый УникальныйИдентификатор);
		СпособСоздания			= Справочники.СпособыСозданияЗаданий.НаОсновании;	
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		ТипПроцесса				= Справочники.ТипыПроцессов.Инцидент;
		Тема					= ДанныеЗаполнения.Тема;
		ФД						= Новый ФорматированныйДокумент;
		ТекстHTML				= "";
		ТекстПростой			= "";
		ТекстРазмеченный		= "";		                   
		Если ДанныеЗаполнения.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML 
			ИЛИ ДанныеЗаполнения.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			
			СтруктураВложений = Новый Структура;
			ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(ДанныеЗаполнения.Ссылка, 
				ДанныеЗаполнения.ТекстHTML, СтруктураВложений);
			
		ИначеЕсли ДанныеЗаполнения.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
			ТекстПростой = ДанныеЗаполнения.Текст;
			
		ИначеЕсли ДанныеЗаполнения.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
			ТекстРазмеченный = ДанныеЗаполнения.Текст;
			
		КонецЕсли;				
		
		ФД = Новый ФорматированныйДокумент;
		Если ТекстHTML <> "" Тогда
			ФД.УстановитьHTML(СокрЛП(ТекстHTML), СтруктураВложений);				
		ИначеЕсли ТекстРазмеченный <> "" Тогда
			ФД.УстановитьHTML(СокрЛП(ТекстРазмеченный), Новый Структура);				
		Иначе
			ФД.УстановитьHTML(СокрЛП(ТекстПростой), Новый Структура);
		КонецЕсли;
		
		Описание				= ПоместитьВоВременноеХранилище(ФД, Новый УникальныйИдентификатор);
		
		ИдентификаторСообщения	= ДанныеЗаполнения.ИдентификаторСообщения;
		
		Дата					= ДанныеЗаполнения.Дата;
		Если ДанныеЗаполнения.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
			Срочность			= Перечисления.Срочность.Высокая;
		ИначеЕсли ДанныеЗаполнения.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная Тогда
			Срочность			= Перечисления.Срочность.Средняя;
		ИначеЕсли ДанныеЗаполнения.Важность = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
			Срочность			= Перечисления.Срочность.Низкая;
		КонецЕсли;
		Влияние					= Перечисления.Влияние.Среднее;
		Приоритет				= ЗаданияСервер.РассчитатьПриоритет(Влияние, Срочность);
		Инициатор				= ДанныеЗаполнения.ОтправительКонтакт;
		СпособСоздания			= Справочники.СпособыСозданияЗаданий.ЭлектроннаяПочта;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Проблема") Тогда
		
		ТипПроцесса				= Справочники.ТипыПроцессов.ЗапросНаИзменение;
		Тема					= ДанныеЗаполнения.КраткоеОписание;
		Дата					= ДанныеЗаполнения.Дата;
		Организация				= ДанныеЗаполнения.Организация;
		Категория				= ДанныеЗаполнения.Категория;
		Приоритет				= ДанныеЗаполнения.Приоритет;
		Сервис					= ДанныеЗаполнения.Сервис;
		Срочность				= ДанныеЗаполнения.Срочность;
		Влияние					= ДанныеЗаполнения.Влияние;
		Приоритет				= ЗаданияСервер.РассчитатьПриоритет(Влияние, Срочность);
		
		ФД = Новый ФорматированныйДокумент;
		ФД.УстановитьHTML(СокрЛП(ДанныеЗаполнения.Описание), Новый Структура);
		Описание				= ПоместитьВоВременноеХранилище(ФД, Новый УникальныйИдентификатор);
		СпособСоздания			= Справочники.СпособыСозданияЗаданий.НаОсновании;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		
		Тема					= ДанныеЗаполнения.Тема;
		Дата					= ДанныеЗаполнения.Дата;
		Если ДанныеЗаполнения.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
			Срочность			= Перечисления.Срочность.Высокая;
		ИначеЕсли ДанныеЗаполнения.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная Тогда
			Срочность			= Перечисления.Срочность.Средняя;
		ИначеЕсли ДанныеЗаполнения.Важность = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
			Срочность			= Перечисления.Срочность.Низкая;
		КонецЕсли;			
		Инициатор				= ДанныеЗаполнения.АбонентКонтакт;
		
		ТекстHTML				= УправлениеITОтделом8УФКлиентСервер.ПолучитьHTMLИзТекста(ДанныеЗаполнения.Описание);
		ФД = Новый ФорматированныйДокумент;
		Если ТекстHTML <> "" Тогда
			ФД.УстановитьHTML(СокрЛП(ТекстHTML), Новый Структура);				
		ИначеЕсли ТекстРазмеченный <> "" Тогда
			ФД.УстановитьHTML(СокрЛП(ТекстРазмеченный), Новый Структура);				
		Иначе
			ФД.УстановитьHTML(СокрЛП(ТекстПростой), Новый Структура);
		КонецЕсли;		
		Описание				= ПоместитьВоВременноеХранилище(ФД, Новый УникальныйИдентификатор);
		СпособСоздания			= Справочники.СпособыСозданияЗаданий.Телефон;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Проекты") Тогда
		
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Наименование, ЧекЛист, ПроектнаяГруппа,
			|Инициатор, Клиент, ОтветственныйЗаПроект");
		
		Тема					= Данные.Наименование;
		СпособСоздания			= Справочники.СпособыСозданияЗаданий.НаОсновании;
		Инициатор				= Данные.Инициатор;
		Клиент					= Данные.Клиент;
		Проект					= ДанныеЗаполнения;
		Если ТипЗнч(Данные.ОтветственныйЗаПроект) = Тип("СправочникСсылка.Пользователи") Тогда
			ТекущийИсполнитель	= Данные.ОтветственныйЗаПроект;
		КонецЕсли;
				
		// Заполняем чек-лист не выполненными заданиями.
		ВыборкаЧекЛист = Данные.ЧекЛист.Выбрать();
		Пока ВыборкаЧекЛист.Следующий() Цикл
			Если ВыборкаЧекЛист.Выполнено = Ложь Тогда
				НоваяСтрока = ЧекЛист.Добавить();			
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЧекЛист);
			КонецЕсли;			
		КонецЦикла;
		
		// Из Проектной группы в Наблюдатели.
		ВыборкаПроектнаяГруппа = Данные.ПроектнаяГруппа.Выбрать();
		Пока ВыборкаПроектнаяГруппа.Следующий() Цикл
			Если ТипЗнч(ВыборкаПроектнаяГруппа.Участник) = Тип("СправочникСсылка.Пользователи")
				ИЛИ ТипЗнч(ВыборкаПроектнаяГруппа.Участник) = Тип("СправочникСсылка.Контрагенты")
				ИЛИ ТипЗнч(ВыборкаПроектнаяГруппа.Участник) = Тип("СправочникСсылка.КонтактныеЛица")
				ИЛИ ТипЗнч(ВыборкаПроектнаяГруппа.Участник) = Тип("СправочникСсылка.ГруппыПользователей")
				ИЛИ ТипЗнч(ВыборкаПроектнаяГруппа.Участник) = Тип("СправочникСсылка.Подразделения")
				ИЛИ ТипЗнч(ВыборкаПроектнаяГруппа.Участник) = Тип("СправочникСсылка.ПотенциальныеКлиенты")
				ИЛИ ТипЗнч(ВыборкаПроектнаяГруппа.Участник) = Тип("СправочникСсылка.Сотрудники")
				ИЛИ ТипЗнч(ВыборкаПроектнаяГруппа.Участник) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					
					НоваяСтрока = Наблюдатели.Добавить();
					НоваяСтрока.Адресат = ВыборкаПроектнаяГруппа.Участник;
					
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДанныеЗаполнения))
		ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ДанныеЗаполнения)) Тогда
		СтрокаОснование 			= Основания.Добавить();
		СтрокаОснование.Основание 	= ДанныеЗаполнения;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Ошибки = Неопределено;
	
	Если Родитель = Ссылка И ЗначениеЗаполнено(Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
			"Объект.Родитель", 
			НСтр("ru = 'Нельзя в качестве родительской использовать эту задачу. Задача ссылается сама на себя.'"), 
			"Ошибки");		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Процесс) Тогда
		Если (ТекущийЭтап.СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Выполнен 
			ИЛИ	ТекущийЭтап.СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Закрыт)
			И Процесс.НеПереходитьНаЭтапыВыполненияБезУказанияРешений
			И Решения.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
				"Объект.Решения", 
				НСтр("ru = 'Необходимо указать хотя бы одно решение'"), 
				"Ошибки");			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущийИсполнитель) И ЗначениеЗаполнено(ТекущийЭтап) Тогда 
		Отбор 		 = Новый Структура("Этап", ТекущийЭтап);
		ЭтапыТЗ		 = Процесс.Этапы.Выгрузить();
		МассивЭтапов = ЭтапыТЗ.НайтиСтроки(Отбор);
		Если МассивЭтапов.Количество() > 0 Тогда
			Если МассивЭтапов[0].ТребоватьПриПереводеНаСледующийЭтапИсполнителя Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.ТекущийЭтап",
					СтрШаблон(НСтр("ru = 'Для этапа <%1> требуется указать исполнителя.'"), ТекущийЭтап),
					"Ошибки");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Если включены сервисы и услуги.
	Если УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("SLAСервисыРаботы") = Истина Тогда
		
		Если ЗначениеЗаполнено(Сервис) И НЕ ЗначениеЗаполнено(Услуга) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
				"Объект.Услуга", 
				НСтр("ru = 'Необходимо указать услугу'"), 
				"Ошибки");		
		КонецЕсли;
			
		Если НЕ УправлениеSLA.ПроверитьСервисИУслугуSLA(ЭтотОбъект) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.Сервис",
				НСтр("ru = 'Сервис и/или услуга не входят в документ ""Соглашение SLA"" для данного клиента'"),
				"Ошибки");
		КонецЕсли;
		
		Если КрайняяДатаВыполнения <> Дата(1, 1, 1) И КрайняяДатаРеакции > КрайняяДатаВыполнения Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.КрайняяДатаВыполнения",
				НСтр("ru = 'Реквизит ""Выполнить до"" меньше чем ""Отреагировать до"".'"),
				"Ошибки");
		КонецЕсли;
			
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	СЛС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
		
	// Подготовка наборов записей.
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	СЛС.ОтразитьДвиженияВРазделахУчета(Ссылка, ДополнительныеСвойства, Движения, Отказ);		
	
	// Запись наборов записей.
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
	ЗаданияСервер.УстановитьСвязиОбъектовСтатьиБазыЗнанийПриПроведенииДокумента(ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ЗаданияСервер.УстановитьСвязиОбъектовСтатьиБазыЗнанийПриПроведенииДокумента(Ссылка, "УдалениеПроведенияДокумента");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьУчастникаВМассивУчастников(Участник, МассивУчастников)
	
	Если ЗначениеЗаполнено(Участник) Тогда
		Если МассивУчастников.Найти(Участник) = Неопределено Тогда
			МассивУчастников.Добавить(Участник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли