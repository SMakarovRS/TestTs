#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Функция возвращает список имен "ключевых" реквизитов.
//
// Параметры:
//   Без параметров.
//
// Возвращаемое значение:
//   Массив, массив возвращаемых блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать с помощью обработки группового изменения объектов.
//
// Параметры:
//   Без параметров.
//
// Возвращаемое значение:
//   Массив, массив возвращаемых реквизитов редактируемых в групповой обработке.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	РедактируемыеРеквизиты.Добавить("Сервис");
	РедактируемыеРеквизиты.Добавить("Услуга");
	РедактируемыеРеквизиты.Добавить("Процесс");
	РедактируемыеРеквизиты.Добавить("Проект");
	РедактируемыеРеквизиты.Добавить("Инициатор");
	РедактируемыеРеквизиты.Добавить("Клиент");
	РедактируемыеРеквизиты.Добавить("НомерВходящегоДокумента");
	РедактируемыеРеквизиты.Добавить("ДатаВходящегоДокумента");
	РедактируемыеРеквизиты.Добавить("МассовыйХарактер");
	РедактируемыеРеквизиты.Добавить("Организация");
	РедактируемыеРеквизиты.Добавить("ТипПроцесса");
	РедактируемыеРеквизиты.Добавить("Подразделение");
	РедактируемыеРеквизиты.Добавить("МестоХранения");
	РедактируемыеРеквизиты.Добавить("КарточкаНоменклатуры");
	РедактируемыеРеквизиты.Добавить("Родитель");
	РедактируемыеРеквизиты.Добавить("ГруппаЗадания");
	РедактируемыеРеквизиты.Добавить("Категория");
	РедактируемыеРеквизиты.Добавить("Спринт");
	РедактируемыеРеквизиты.Добавить("СпособСоздания");
	РедактируемыеРеквизиты.Добавить("Влияние");
	РедактируемыеРеквизиты.Добавить("Срочность");
	РедактируемыеРеквизиты.Добавить("Автор");
	РедактируемыеРеквизиты.Добавить("АвторКорректировки");
	РедактируемыеРеквизиты.Добавить("КрайняяДатаРеакции");
	РедактируемыеРеквизиты.Добавить("КрайняяДатаВыполнения");
	РедактируемыеРеквизиты.Добавить("ТекущийЭтап");
	РедактируемыеРеквизиты.Добавить("ТекущийИсполнитель");
	РедактируемыеРеквизиты.Добавить("ПроцентВыполнения");
    РедактируемыеРеквизиты.Добавить("Баллы");
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

// Получает участников встречи.
//
// Параметры:
//  Ссылка  - ДокументСсылка.Задание - документ, контакты которого необходимо получить.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица, содержащая колонки "Контакт", "Представление" и "Адрес".
//
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;

	СписокКонтактов = Новый Массив;
	СписокКонтактов.Добавить(Ссылка.Инициатор);
	
	Возврат СписокКонтактов;
	
КонецФункции

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: 
//				"pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
		
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "НомерЧислом";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Представление номера задания числом.'");
	НовыйРеквизит.Представление = НСтр("ru = 'Номер числом'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ОписаниеИзмененийТекст";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Представление полного описания изменений задания (в текстовом формате).'");
	НовыйРеквизит.Представление = НСтр("ru = 'Описание изменений реквизитов (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ДобавленныйКомментарийНомерЧислом";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Представление номера добавленного комментария числом.'");
	НовыйРеквизит.Представление = НСтр("ru = 'Добавленный комментарий номер числом'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");	
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ДобавленныйКомментарийТекст";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Добавленный комментарий (в текстовом формате).'");
	НовыйРеквизит.Представление = НСтр("ru = 'Добавленный комментарий (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ПоследнийОбычныйКомментарийТекст";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Последний обычный комментарий (в текстовом формате).'");
	НовыйРеквизит.Представление = НСтр("ru = 'Последний обычный комментарий (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "МеханизмОценкиВыполненияТекст";
	НовыйРеквизит.Подсказка		= 
		НСтр("ru = 'Добавляется блок текста для возможности оценки выполнения задания (в текстовом формате).'");
		
	НовыйРеквизит.Представление = НСтр("ru = 'Механизм оценки выполнения (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ОписаниеИзмененийЧекЛистаТекст";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Описание изменений в чек - листе (в текстовом формате).'");
	НовыйРеквизит.Представление = НСтр("ru = 'Описание изменений в чек - листе (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "КраткаяИсторияИзмененияЗаданияТекст";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Краткая история изменения задания с комментариями (в текстовом формате).'");
	НовыйРеквизит.Представление = НСтр("ru = 'Краткая история изменения задания с комментариями (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");	
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "КраткаяИсторияИзмененияЗаданияТекстУбыв";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Краткая история изменения задания с комментариями по убыванию даты (в текстовом формате).'");
	НовыйРеквизит.Представление = НСтр("ru = 'Краткая история изменения задания с комментариями по убыванию даты - сначала новые, потом старые (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");	
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ПредыдущийИсполнитель";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Предыдущий исполнитель в задании.'");
	НовыйРеквизит.Представление = НСтр("ru = 'Предыдущий исполнитель в задании'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "Уважаемыйая";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Выводит ""Уважаемый"" или ""Уважаемая"" в зависимости от пола адресата.'");
	НовыйРеквизит.Представление = НСтр("ru = '""Уважаемый"" или ""Уважаемая"" в зависимости от пола адресата'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ВнешняяСсылкаНаОбъектВЛичномКабинете";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Внешняя ссылка на объект в личном кабинете.'");
	НовыйРеквизит.Представление = НСтр("ru = 'Внешняя ссылка на объект в личном кабинете'");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ЛокальнаяСсылкаНаОбъект";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Ссылка на объект в локальной сети предприятия");
	НовыйРеквизит.Представление = НСтр("ru = 'Ссылка на объект в локальной сети'");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "Адресат";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Адресат кому отправляется оповещение.'");
	НовыйРеквизит.Представление = НСтр("ru = 'Адресат кому отправляется оповещение'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	РеквизитТекстHTML 					  = Реквизиты.Найти("Задание.ТекстHTML");
	Реквизиты.Удалить(РеквизитТекстHTML);
	РеквизитИдентификаторСообщения 		  = Реквизиты.Найти("Задание.ИдентификаторСообщения");
	Реквизиты.Удалить(РеквизитИдентификаторСообщения);
	РеквизитУчетнаяЗаписьЭлектроннойПочты = Реквизиты.Найти("Задание.УчетнаяЗаписьЭлектроннойПочты");
	Реквизиты.Удалить(РеквизитУчетнаяЗаписьЭлектроннойПочты);
		
	Если ДополнительныеПараметры.ТипШаблона = "Письмо"
		И ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "ОписаниеЗаданияHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Представление описания задания (в формате HTML).'");
		НовыйРеквизит.Представление = НСтр("ru = 'Описание задания (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "ОписаниеИзмененийHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Представление полного описания изменений задания (в формате HTML).'");
		НовыйРеквизит.Представление = НСтр("ru = 'Описание изменений реквизитов (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");	
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "МеханизмОценкиВыполненияHTML";
		НовыйРеквизит.Подсказка		= 
			НСтр("ru = 'Добавляется блок текста для возможности оценки выполнения задания (в формате HTML).'");
			
		НовыйРеквизит.Представление = НСтр("ru = 'Механизм оценки выполнения (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "ДобавленныйКомментарийHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Добавленный комментарий (в формате HTML).'");
		НовыйРеквизит.Представление = НСтр("ru = 'Добавленный комментарий (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "ПоследнийОбычныйКомментарийHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Последний обычный комментарий (в формате HTML).'");
		НовыйРеквизит.Представление = НСтр("ru = 'Последний обычный комментарий (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "ОписаниеИзмененийЧекЛистаHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Описание изменений в чек - листе (в формате HTML).'");
		НовыйРеквизит.Представление = НСтр("ru = 'Описание изменений в чек - листе (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "КраткаяИсторияИзмененияЗаданияHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Краткая история изменения задания с комментариями (в формате HTML).'");
		НовыйРеквизит.Представление = НСтр("ru = 'Краткая история изменения задания с комментариями (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "КраткаяИсторияИзмененияЗаданияHTMLУбыв";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Краткая история изменения задания с комментариями по убыванию даты (в формате HTML).'");
		НовыйРеквизит.Представление = НСтр("ru = 'Краткая история изменения задания с комментариями по убыванию даты - сначала новые, потом старые(в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Сообщение.Вставить("Предмет", ПредметСообщения);	
	
	// Внешняя ссылка. 
	Если Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект") <> Неопределено Тогда
		ЗначениеВнешнейСсылки = Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект");
		ТекстЗаголовка = ?(ПустаяСтрока(ПредметСообщения.Тема),
			Строка(ПредметСообщения.Номер) + " от "
            + Строка(Формат(ПредметСообщения.Дата, "ДФ=dd.MM.yy")),
			РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(ПредметСообщения.Тема));
		Сообщение.ЗначенияРеквизитов["ВнешняяСсылкаНаОбъект"] = "<a href=" + Строка(ЗначениеВнешнейСсылки) + ">"
            + ТекстЗаголовка + "</a></p>";
	КонецЕсли;
				
	// Внешняя ссылка личный кабинет. 
	Если Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъектВЛичномКабинете") <> Неопределено Тогда
		ЗначениеВнешнейСсылки = Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъектВЛичномКабинете");
		ТекстЗаголовка = ?(ПустаяСтрока(ПредметСообщения.Тема), 
			Строка(ПредметСообщения.Номер) + " от " 
            + Строка(Формат(ПредметСообщения.Дата, "ДФ=dd.MM.yy")), 
			РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(ПредметСообщения.Тема));
		Сообщение.ЗначенияРеквизитов["ВнешняяСсылкаНаОбъектВЛичномКабинете"] = "<a href=" 
			+ Строка(ЗначениеВнешнейСсылки) + ">" + ТекстЗаголовка + "</a></p>";
	КонецЕсли;			
		
	// Локальная ссылка. 
	Если Сообщение.ЗначенияРеквизитов.Получить("ЛокальнаяСсылкаНаОбъект") <> Неопределено Тогда
		ЗначениеВнешнейСсылки = Сообщение.ЗначенияРеквизитов.Получить("ЛокальнаяСсылкаНаОбъект");
		ТекстЗаголовка = ?(ПустаяСтрока(ПредметСообщения.Тема), 
			Строка(ПредметСообщения.Номер) + " от " 
            + Формат(ПредметСообщения.Дата, "ДФ=dd.MM.yy"), 
			РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(ПредметСообщения.Тема));
		Сообщение.ЗначенияРеквизитов["ЛокальнаяСсылкаНаОбъект"] = "<a href=" + Строка(ЗначениеВнешнейСсылки) + ">"
            + ТекстЗаголовка + "</a></p>";
	КонецЕсли;				
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Инициатор", 
        Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Инициатор");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел().
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт

	ГруппаДел	= НСтр("ru = 'Задания'");
	ИмяФормы	= "Документ.Задание.Форма.ФормаСписка";
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.Задание)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	ВЫБОР
	    |		КОГДА ДокументЗадание.ТекущийЭтап.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Новый)
	    |				ИЛИ ДокументЗадание.ТекущийЭтап.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Бэклог)
	    |			ТОГДА &Новый
	    |		КОГДА ДокументЗадание.ТекущийЭтап.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Подготовка)
	    |				ИЛИ ДокументЗадание.ТекущийЭтап.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.ВРаботе)
	    |				ИЛИ ДокументЗадание.ТекущийЭтап.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Подпроцесс)
	    |			ТОГДА &ВРаботе
	    |		ИНАЧЕ &Приостановлено
	    |	КОНЕЦ КАК СтатусЗадания,
	    |	СУММА(1) КАК Количество
	    |ИЗ
	    |	Документ.Задание КАК ДокументЗадание
	    |ГДЕ
	    |	ДокументЗадание.Выполнено = ЛОЖЬ
	    |	И ДокументЗадание.ПометкаУдаления = ЛОЖЬ
	    |	И (&ДоступностьРолиПросмотраЧужихЗаданий
	    |			ИЛИ &ДоступностьРолиПолныеПрава
	    |			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
	    |				И ВЫБОР
	    |					КОГДА ДокументЗадание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
	    |						ТОГДА ИСТИНА
	    |					ИНАЧЕ ЛОЖЬ
	    |				КОНЕЦ
	    |			ИЛИ ДокументЗадание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
	    |	И ДокументЗадание.ТекущийЭтап.СостояниеЭтапа <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Закрыт)
	    |	И ДокументЗадание.ТекущийЭтап.СостояниеЭтапа <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Выполнен)
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	ВЫБОР
	    |		КОГДА ДокументЗадание.ТекущийЭтап.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Новый)
	    |				ИЛИ ДокументЗадание.ТекущийЭтап.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Бэклог)
	    |			ТОГДА &Новый
	    |		КОГДА ДокументЗадание.ТекущийЭтап.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Подготовка)
	    |				ИЛИ ДокументЗадание.ТекущийЭтап.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.ВРаботе)
	    |				ИЛИ ДокументЗадание.ТекущийЭтап.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцесса.Подпроцесс)
	    |			ТОГДА &ВРаботе
	    |		ИНАЧЕ &Приостановлено
	    |	КОНЕЦ";
		
	Запрос.УстановитьПараметр("ТекущийИсполнитель",	ОбщиеПараметрыЗапросов.Пользователь);   
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",
        УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ОбщиеПараметрыЗапросов.Пользователь));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий", 			
        УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий",
        УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава", 
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
		
	Запрос.УстановитьПараметр("ТекущаяДата",	ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Новый",			НСтр("ru = 'Новые'"));
	Запрос.УстановитьПараметр("ВРаботе",		НСтр("ru = 'ВРаботе'"));
	Запрос.УстановитьПараметр("Приостановлено",	НСтр("ru = 'Приостановлено'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор	= "Задание" + СтрЗаменить(Строка(Выборка.СтатусЗадания), " ", "_");
		Дело.ЕстьДела		= Выборка.Количество > 0;		
		Дело.Представление	= ?(Выборка.СтатусЗадания = НСтр("ru = 'ВРаботе'"), НСтр("ru = 'В работе'"),
			Выборка.СтатусЗадания);
			
		Дело.Количество		= Выборка.Количество;
		Дело.Форма			= ИмяФормы;
		Дело.ПараметрыФормы	= Новый Структура("ТекущиеДела, Статус", Истина, Выборка.СтатусЗадания);
		Дело.Владелец		= ГруппаДел;
		Дело.Подсказка		= "";
		
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеКлючевыхРеквизитов",   
		НСтр("ru = 'Изменение ключевых реквизитов'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаДобавлениеОбычногоКомментария", 
		НСтр("ru = 'Добавление обычного комментария'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаДобавлениеПриватногоКомментария", 
		НСтр("ru = 'Добавление приватного комментария'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеКлиента",		  	  
		НСтр("ru = 'Изменение клиента'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеИнициатора",  		  
		НСтр("ru = 'Изменение инициатора'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеИсполнителя", 		  
		НСтр("ru = 'Изменение исполнителя'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеЭтапа", 		 		  
		НСтр("ru = 'Изменение этапа (задание не выполнено)'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеВЧекЛисте",	 		  
		НСтр("ru = 'Изменение в чек-листе'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаВыполнение",	 		 		  
		НСтр("ru = 'Выполнение'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаЗавершение",	 		 		  
		НСтр("ru = 'Завершение'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеОценки",		 		  
		НСтр("ru = 'Изменение оценки'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеОписания",	          
		НСтр("ru = 'Изменение описания'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеКрайнейДатыЗавершения",
		НСтр("ru = 'Изменение крайней даты завершения'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаСозданиеЗадания",				  
		НСтр("ru = 'Создание задания'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеНаблюдателей",		  
		НСтр("ru = 'Изменение наблюдателей'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеПроекта",		  	  
		НСтр("ru = 'Изменение проекта'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеСервиса",
		НСтр("ru = 'Изменение сервиса'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеУслуги",
		НСтр("ru = 'Изменение услуги'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеКатегории",
		НСтр("ru = 'Изменение категории'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаИзменениеПриоритета",		  	  
		НСтр("ru = 'Изменение приоритета'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаЗаписьДокумента",		  	  	  
		НСтр("ru = 'Запись документа'"));
	
	Если УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИспользоватьКанбан") Тогда
		
		СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаОчисткаСпринта",   
			НСтр("ru = 'Очистка спринта'"));
			
		СоответствиеИзменениеОбъекта.Вставить("ЗаданиеИзменениеОбъектаУстановкаСпринта", 
			НСтр("ru = 'Установка спринта'"));
			
	КонецЕсли;
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	СоответствиеПериодическоеСобытие.Вставить("ЗаданиеПериодическоеСобытиеПриближениеКрайнейДатыВыполнения", 
        НСтр("ru = 'Приближение крайней даты выполнения'"));	
    СоответствиеПериодическоеСобытие.Вставить("ЗаданиеПериодическоеСобытиеПриближениеКрайнейДатыРеакции", 
        НСтр("ru = 'Приближение крайней даты реакции'"));	
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("ЗаданиеРасчетМетрикЗаписьДокумента", НСтр("ru = 'Запись документа'"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура = Неопределено,
    Знач Источник = Неопределено) Экспорт
	
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ПравилоСобытия.ТипПравила = Перечисления.ТипыПравилСобытий.ИзменениеОбъекта Тогда 
		
		Если Структура.ЭтоНовый Тогда
			
			Если ИмяСобытия = "ЗаданиеИзменениеОбъектаСозданиеЗадания" Тогда
				Возврат Истина;
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаЗаписьДокумента" Тогда
				Возврат Истина;
			КонецЕсли;		
			
		Иначе		
			ИсточникПередЗаписью 	= Структура.ИсточникПередЗаписью;
			
			Если ИмяСобытия = "ЗаданиеИзменениеОбъектаЗаписьДокумента" Тогда
				
				Возврат Истина;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеИсполнителя" Тогда
				
				Если Источник.ТекущийИсполнитель <> ИсточникПередЗаписью.ТекущийИсполнитель Тогда
					Возврат Истина;
				КонецЕсли;	
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеЭтапа" Тогда
				
				Если Источник.Выполнено = Ложь
					И Источник.ТекущийЭтап <> ИсточникПередЗаписью.ТекущийЭтап Тогда
					Возврат Истина;
				КонецЕсли;
								
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеИнициатора" Тогда
				
				Если Источник.Инициатор <> ИсточникПередЗаписью.Инициатор Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаВыполнение" Тогда	
				
				Если Источник.Выполнено = Истина
					И Источник.Выполнено <> ИсточникПередЗаписью.Выполнено Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаЗавершение" Тогда		
				
				Если Источник.Завершено = Истина И Источник.ДатаЗавершения <> Дата(1,1,1)
					И Источник.Завершено <> ИсточникПередЗаписью.Завершено Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеОценки" Тогда
				
				Если Источник.ОценкаВыполнения <> ИсточникПередЗаписью.ОценкаВыполнения Тогда
					Возврат Истина;
				КонецЕсли;
								
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеКлючевыхРеквизитов" Тогда
				
				Если Источник.Инициатор <> ИсточникПередЗаписью.Инициатор 
					ИЛИ Источник.Клиент <> ИсточникПередЗаписью.Клиент
					ИЛИ Источник.ТекущийИсполнитель <> ИсточникПередЗаписью.ТекущийИсполнитель
					ИЛИ Источник.ТекущийЭтап <> ИсточникПередЗаписью.ТекущийЭтап
					ИЛИ Источник.Выполнено <> ИсточникПередЗаписью.Выполнено
					ИЛИ Источник.ДатаВыполнения <> ИсточникПередЗаписью.ДатаВыполнения
					ИЛИ Источник.ДатаЗавершения <> ИсточникПередЗаписью.ДатаЗавершения
					ИЛИ Источник.ОценкаВыполнения <> ИсточникПередЗаписью.ОценкаВыполнения
					ИЛИ Источник.Сервис <> ИсточникПередЗаписью.Сервис
					ИЛИ Источник.Услуга <> ИсточникПередЗаписью.Услуга
					ИЛИ Источник.Описание <> ИсточникПередЗаписью.Описание
					ИЛИ Источник.КрайняяДатаВыполнения <> ИсточникПередЗаписью.КрайняяДатаВыполнения
	                ИЛИ Источник.Спринт <> ИсточникПередЗаписью.Спринт
					ИЛИ Источник.Проект <> ИсточникПередЗаписью.Проект
					ИЛИ ЕстьИзменениеВЧекЛисте(Источник, ИсточникПередЗаписью) Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеСервиса" Тогда
				
				Если Источник.Сервис <> ИсточникПередЗаписью.Сервис Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеУслуги" Тогда
				
				Если Источник.Услуга <> ИсточникПередЗаписью.Услуга Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеКатегории" Тогда
				
				Если Источник.Категория <> ИсточникПередЗаписью.Категория Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеКлиента" Тогда
				
				Если Источник.Клиент <> ИсточникПередЗаписью.Клиент Тогда
					Возврат Истина;
				КонецЕсли;
								
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеПриоритета" Тогда
				
				Если Источник.Приоритет <> ИсточникПередЗаписью.Приоритет Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеПроекта" Тогда
				
				Если Источник.Проект <> ИсточникПередЗаписью.Проект Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеВЧекЛисте" Тогда
				
				Возврат ЕстьИзменениеВЧекЛисте(Источник, ИсточникПередЗаписью);
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеОписания" Тогда
				
				Если Источник.Описание <> ИсточникПередЗаписью.Описание Тогда
					Возврат Истина;
				КонецЕсли;			
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеКрайнейДатыЗавершения" Тогда	
				
				Если Источник.КрайняяДатаВыполнения <> ИсточникПередЗаписью.КрайняяДатаВыполнения Тогда
					Возврат Истина;
				КонецЕсли;
				
            ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаОчисткаСпринта" 
                И УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИспользоватьКанбан") Тогда	
				
				Если Источник.Спринт <> ИсточникПередЗаписью.Спринт 
					И Источник.Спринт = Справочники.Спринты.ПустаяСсылка() Тогда
					Возврат Истина;
				КонецЕсли;
				
            ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаУстановкаСпринта" 
                И УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИспользоватьКанбан") Тогда	
				
				Если Источник.Спринт <> Справочники.Спринты.ПустаяСсылка()
					И Источник.Спринт <> ИсточникПередЗаписью.Спринт Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ЗаданиеИзменениеОбъектаИзменениеНаблюдателей" Тогда
				
				Возврат ЕстьИзменениеВНаблюдателях(Источник, ИсточникПередЗаписью);	
	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	ИначеЕсли ПравилоСобытия.ТипПравила = Перечисления.ТипыПравилСобытий.ПериодическоеСобытие Тогда 
		
		ДатаНачалаПроверки   = Структура.ДатаНачалаПроверки;
		ДатаОкончанияПроверки= Структура.ДатаОкончанияПроверки;			
		Запрос 		 		 = Новый Запрос;
		
		Если ИмяСобытия = "ЗаданиеПериодическоеСобытиеПриближениеКрайнейДатыВыполнения" Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Задание.Ссылка
				|ИЗ
				|	Документ.Задание КАК Задание
				|ГДЕ
				|	НЕ Задание.ПометкаУдаления
				|	И Задание.КрайняяДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1)
				|	И НЕ Задание.Завершено
				|	И &ДатаНачала <= ДОБАВИТЬКДАТЕ(Задание.КрайняяДатаВыполнения, ЧАС, -&ВремяДоОповещения)
				|	И ДОБАВИТЬКДАТЕ(Задание.КрайняяДатаВыполнения, ЧАС, -&ВремяДоОповещения) < &ДатаОкончания";
				
		ИначеЕсли ИмяСобытия = "ЗаданиеПериодическоеСобытиеПриближениеКрайнейДатыРеакции" Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Задание.Ссылка
				|ИЗ
				|	Документ.Задание КАК Задание
				|ГДЕ
				|	НЕ Задание.ПометкаУдаления
				|	И Задание.КрайняяДатаРеакции <> ДАТАВРЕМЯ(1, 1, 1)
				|	И НЕ Задание.Завершено
				|	И &ДатаНачала <= ДОБАВИТЬКДАТЕ(Задание.КрайняяДатаРеакции, ЧАС, -&ВремяДоОповещения)
				|	И ДОБАВИТЬКДАТЕ(Задание.КрайняяДатаРеакции, ЧАС, -&ВремяДоОповещения) < &ДатаОкончания";
				
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВремяДоОповещения", ПравилоСобытия.ЧасовДоУсловия);	
		Запрос.УстановитьПараметр("ДатаНачала",        ДатаНачалаПроверки);
		Запрос.УстановитьПараметр("ДатаОкончания",     ДатаОкончанияПроверки);			
		
		РезультатЗапроса 	   = Запрос.Выполнить();			
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Новый Массив;
		Иначе	
			ТЗЗадания = РезультатЗапроса.Выгрузить();
		КонецЕсли;				
		
		НастройкиСКД = ПравилоСобытия.ПроверкаРеквизитовОбъектаУсловия.Получить();
		
		Если НастройкиСКД <> Неопределено Тогда
			
			СКД = Справочники.ПравилаСобытий.ПолучитьПравилаОтбораСобытий(
				ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяОбъекта);			
			ТекстЗапроса = СКД.НаборыДанных.НаборДанных1.Запрос;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Задание.Ссылка = &Основание", "Задание.Ссылка В (&Основание)");
			СКД.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;
			
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
			КомпоновщикНастроек.Восстановить();
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Основание", ТЗЗадания);
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки   = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(),,,
                Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Ложь);
			
			РезультатСКД    = Новый ТаблицаЗначений;
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(РезультатСКД);
			ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
			Если РезультатСКД.Количество() > 0 Тогда
				Возврат РезультатСКД.ВыгрузитьКолонку("Ссылка");			
			Иначе
				Возврат Новый Массив;
			КонецЕсли;
		Иначе 
			Возврат Новый Массив;	
		КонецЕсли;			
		
	КонецЕсли;

КонецФункции

Функция ЕстьИзменениеВЧекЛисте(Знач Источник, Знач ИсточникПередЗаписью)
		
	Если Источник.ЧекЛист.Количество() <> ИсточникПередЗаписью.ЧекЛист.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЧекЛист 			= Источник.ЧекЛист.Выгрузить();
	ЧекЛистПередЗаписью = ИсточникПередЗаписью.ЧекЛист.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ЧекЛист Цикл
		
		СтруктураПоиска = Новый Структура;
		
		Для Каждого Колонка Из ЧекЛист.Колонки Цикл
            СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
        КонецЦикла;
		
		СтрокиТаблицы2 = ЧекЛистПередЗаписью.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицы2.Количество() <> 1 Тогда
            Возврат Истина;
		КонецЕсли;
		
    КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ЧекЛистПередЗаписью Цикл
		
		СтруктураПоиска = Новый Структура;
		
		Для каждого Колонка Из ЧекЛистПередЗаписью.Колонки Цикл
            СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
        КонецЦикла;
		
		СтрокиТаблицы1 = ЧекЛист.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицы1.Количество() <> 1 Тогда
            Возврат Истина;
		КонецЕсли;
		
    КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьИзменениеВНаблюдателях(Знач Источник, Знач ИсточникПередЗаписью)
		
	Если Источник.Наблюдатели.Количество() <> ИсточникПередЗаписью.Наблюдатели.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Наблюдатели 	   = Источник.Наблюдатели.Выгрузить();
	НаблюдателиЗаписью = ИсточникПередЗаписью.Наблюдатели.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из Наблюдатели Цикл
		
        СтруктураПоиска = Новый Структура;
        СтруктураПоиска.Вставить("Адресат", СтрокаТаблицы.Адресат);        
        СтрокиТаблицы2  = НаблюдателиЗаписью.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицы2.Количество() <> 1 Тогда
            Возврат Истина;
		КонецЕсли;
		
    КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из НаблюдателиЗаписью Цикл
		
        СтруктураПоиска = Новый Структура;
        СтруктураПоиска.Вставить("Адресат", СтрокаТаблицы.Адресат);        
        СтрокиТаблицы1 = Наблюдатели.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицы1.Количество() <> 1 Тогда
            Возврат Истина;
		КонецЕсли;
		
    КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ИнтерфейсПечати

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция печати документа
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_Задание";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.Текст =
		"ВЫБРАТЬ
        |   Задание.Номер КАК Номер,
        |   Задание.Дата КАК Дата,
        |   Задание.Проведен КАК Проведен,
        |   Задание.Тема КАК Тема,
        |   Задание.Описание КАК Описание,
        |   Задание.ТекстHTML КАК ТекстHTML,
        |   Задание.Родитель КАК Родитель,
        |   Задание.Комментарий КАК Комментарий,
        |   Задание.ПроцентВыполнения КАК ПроцентВыполнения,
        |   Задание.ДатаСоздания КАК ДатаНачала,
        |   Задание.ДатаВыполнения КАК ДатаОкончания,
        |   Задание.Приоритет КАК Приоритет,
        |   Задание.Организация КАК Организация,
        |   Задание.Процесс КАК Процесс,
        |   Задание.Автор КАК Автор,
        |   Задание.Сервис КАК Сервис,
        |   Задание.Услуга КАК Услуга,
        |   Задание.УслугаНедоступна КАК УслугаНедоступна,
        |   Задание.ДатаСоздания КАК ДатаСоздания,
        |   Задание.КрайняяДатаВыполнения КАК КрайняяДатаВыполнения,
        |   Задание.Выполнено КАК Выполнено,
        |   Задание.ОценкаВыполнения КАК ОценкаВыполнения,
        |   Задание.ТекущийИсполнитель КАК ТекущийИсполнитель,
        |   Задание.Наблюдатели.(
        |       Ссылка КАК Ссылка,
        |       НомерСтроки КАК НомерСтроки,
        |       Адресат КАК Адресат
        |   ) КАК Наблюдатели,
        |   Задание.Этапы.(
        |       Ссылка КАК Ссылка,
        |       НомерСтроки КАК НомерСтроки,
        |       Этап КАК Этап,
        |       ДатаНачала КАК ДатаНачала,
        |       ДатаОкончания КАК ДатаОкончания
        |   ) КАК Этапы,
        |   Задание.Исполнители.(
        |       Ссылка КАК Ссылка,
        |       НомерСтроки КАК НомерСтроки,
        |       Исполнитель КАК Исполнитель,
        |       ДатаНачала КАК ДатаНачала,
        |       ДатаОкончания КАК ДатаОкончания
        |   ) КАК Исполнители,        
        |   Задание.Ссылка КАК СамДокумент,
        |   Задание.ТекущийЭтап КАК ТекущийЭтап,
        |   Задание.ЧекЛист.(
        |       Ссылка КАК Ссылка,
        |       НомерСтроки КАК НомерСтроки,
        |       Выполнено КАК Выполнено,
        |       Описание КАК Описание,
        |       Дата КАК Дата,
        |       Автор КАК Автор
        |   ) КАК ЧекЛист,
        |   Задание.ТипПроцесса КАК ТипПроцесса,
        |   Задание.Спринт КАК Спринт,
        |   Задание.Завершено КАК Завершено,
        |   Задание.ГруппаЗадания КАК ГруппаЗадания,
        |   Задание.Баллы КАК Баллы,
        |   Задание.Категория КАК Категория,
        |   Задание.SLA КАК SLA,
        |   Задание.КрайняяДатаРеакции КАК КрайняяДатаРеакции
        |ИЗ
        |   Документ.Задание КАК Задание
        |ГДЕ
        |   Задание.Ссылка В(&МассивДокументов)
        |
        |УПОРЯДОЧИТЬ ПО
        |   СамДокумент,
        |   Номер";
	
	Шапка = Запрос.Выполнить().Выбрать();	
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.СамДокумент);
				
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Задание_ПФ_MXL_Задание";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Задание.ПФ_MXL_Задание");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СтруктураЗаполнения.Вставить("ДатаИВремяПечати", ТекущаяДатаСеанса());
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Чек-лист.
		ВыборкаЧекЛист = Шапка.ЧекЛист.Выбрать();
		Если ВыборкаЧекЛист.Количество() > 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыЧекЛист");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыЧекЛист");				
			Пока ВыборкаЧекЛист.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаЧекЛист);
				ОбластьМакета.Параметры.Пометка = ?(ВыборкаЧекЛист.Выполнено, "☑", "");
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыЧекЛист");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Этапы
		ВыборкаЭтапы = Шапка.Этапы.Выбрать();
		Если ВыборкаЭтапы.Количество() > 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапы");				
			Пока ВыборкаЭтапы.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаЭтапы);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыЭтапы");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
        КонецЕсли;
        
		// Исполнители
		ВыборкаИсполнители = Шапка.Исполнители.Выбрать();
		Если ВыборкаИсполнители.Количество() > 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыИсполнители");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыИсполнители");				
			Пока ВыборкаИсполнители.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаИсполнители);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыИсполнители");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Наблюдатели
		ВыборкаНаблюдатели = Шапка.Наблюдатели.Выбрать();
		Если ВыборкаНаблюдатели.Количество() > 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыНаблюдатели");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыНаблюдатели");				
			Пока ВыборкаНаблюдатели.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаНаблюдатели);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыНаблюдатели");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;			
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.СамДокумент);
			
	КонецЦикла;
		
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Задание") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Задание", "Задание", 
			ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "Задание"));
			
	КонецЕсли;
	
КонецПроцедуры

// Функция получения данных для печати
//
Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Возврат Новый Структура("Данные, Макеты",
							ДанныеПоВсемОбъектам,
							Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
											ОписаниеОбластей,
											ТипыМакетов,
											ДвоичныеДанныеМакетов));
	
КонецФункции

// Заполняет список команд печати
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Задание
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Задание";
	КомандаПечати.Представление = НСтр("ru = 'Задание'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,УпрощеннаяФорма";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 4;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
//@skip-warning
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//@skip-warning
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

// Процедура ОбработкаПолученияПредставления.
//
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПустаяСтрока(Представление) Тогда
		СтандартнаяОбработка= Ложь;	
		НомерДок 			= СокрЛП(Данные.Номер);
		Сч 					= 1; 
		Дл 					= СтрДлина(НомерДок);
		Пока Сч < Дл И Сред(НомерДок, Сч, 1) = "0" Цикл 
			Сч = Сч + 1; 
		КонецЦикла;
		НомерДок 			= Сред(НомерДок, Сч);
		мТема 				= СокрЛП(Данные.Тема);
		мТема 				= ?(ЗначениеЗаполнено(мТема), мТема, НСтр("ru = '<Без темы>'"));
		Если ЗначениеЗаполнено(Данные.ТипПроцесса) Тогда
			ТипПроцессаСтрокой = Строка(Данные.ТипПроцесса);
		Иначе
			ТипПроцессаСтрокой = НСтр("ru = 'Задание'");
		КонецЕсли;
		Представление 		= СтрШаблон(НСтр("ru = '%1 № %2 от %3 (%4)'"), 
			ТипПроцессаСтрокой, НомерДок, Формат(Данные.Дата, "ДФ=dd.MM.yy"), мТема);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" 
		И НЕ (УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskВыполнениеЗаданий") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава")) Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Документ.Задание.Форма.УпрощеннаяФорма";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("Тема");
	Поля.Добавить("ТипПроцесса");
	СтандартнаяОбработка = Ложь;	
	
КонецПроцедуры

#КонецОбласти