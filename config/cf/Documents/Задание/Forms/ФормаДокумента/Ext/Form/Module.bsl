
#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	МожноИзменятьЗавершенныеЗадания = УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИзменятьЗавершенныеЗадания");
	ЭтоВебКлиент = УправлениеITОтделом8УФ.ПриложениеЯвляетсяВебКлиентом();
	МодифицированностьОписаниеФорматированныйДокумент = Ложь;
	
	ТолькоПросмотр = ЗаданияСервер.ПравоРедактированияТекущийПользователь(Объект);
	
	//@skip-warning
	СЛС.ПриСозданииНаСервере(Объект, Отказ, СтандартнаяОбработка, Параметры, ЭтаФорма);	
	
	Если Объект.Ссылка.Пустая() Тогда

		УстановитьПривилегированныйРежим(Истина);
		Объект.ДатаСоздания = ТекущаяДатаСеанса();
        Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗаписьЭлектроннойПочты) Тогда
            Объект.УчетнаяЗаписьЭлектроннойПочты = 
                УправлениеITОтделом8УФПовтИсп.УчетнаяЗаписьЭлектроннойПочтыПоУмолчанию();
        КонецЕсли;
		
		// Если открыта из формы создания подзаданий, то заполним.
	    ОткрываетсяИзВне 			= Ложь;
		Если Параметры.Свойство("ОткрываетсяИзВне") Тогда
			
	        //@skip-warning
	        ОткрываетсяИзВне = Параметры["ОткрываетсяИзВне"];
			Если ОткрываетсяИзВне Тогда				
				СтруктураДокумента 	= Параметры.Объект;
				ЗаполнитьЗначенияСвойств(Объект, СтруктураДокумента);
				Объект.ТекущийЭтап 	= Справочники.ЭтапыПроцессов.Новый; 
				Если Параметры.Свойство("КопироватьТекст") И ЗначениеЗаполнено(Объект.Родитель) Тогда
					Если Параметры.КопироватьТекст Тогда
						ТекстHTML = Объект.Родитель.ТекстHTML;
					КонецЕсли;
				КонецЕсли;
	            Модифицированность = Истина;
			КонецЕсли;
			
	   КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Родитель) И НЕ ОткрываетсяИзВне Тогда
			ТекстHTML = Объект.Родитель.ТекстHTML;
			
		Иначе			
			Попытка
				Если СтрНайти(Объект.Описание, "e1cib/") = 1 Тогда
					ОписаниеФорматированныйДокумент = ПолучитьИзВременногоХранилища(Объект.Описание);
					УдалитьИзВременногоХранилища(Объект.Описание);
					Объект.Описание = "";
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		// Задание создается из формы Планировщика.
		Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ДанныеЗаписиКалендаря") Тогда
				ДанныеЗаписиКалендаря = Параметры.ЗначенияЗаполнения.ДанныеЗаписиКалендаря;
				Объект.Дата			  = ДанныеЗаписиКалендаря.Начало;
				Объект.Тема			  = ДанныеЗаписиКалендаря.Наименование;
				Объект.Описание		  = ДанныеЗаписиКалендаря.Описание;
				ОписаниеФорматированныйДокумент.УстановитьHTML(ДанныеЗаписиКалендаря.Описание, Новый Структура);
			КонецЕсли;
			Если Параметры.ЗначенияЗаполнения.Свойство("Процесс") Тогда 
				Объект.Процесс = Параметры.ЗначенияЗаполнения.Процесс;
			КонецЕсли;
		КонецЕсли;
		
		// Задание создается из обработки "РабочийСтол".
		Если Параметры.Свойство("РабочийСтолЗначенияЗаполнения") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.РабочийСтолЗначенияЗаполнения);
		КонецЕсли;		
		
		// Задание создается на основании Электронного письма интерактивно.
		Если ЗначениеЗаполнено(Параметры.Основание)
			И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			МодифицированностьОписаниеФорматированныйДокумент = Истина;
		КонецЕсли; 
		
		Если Параметры.Свойство("ВремяНачала") Тогда 
			Объект.Дата = Параметры.ВремяНачала;
		КонецЕсли;
		Если Параметры.Свойство("Пользователь") Тогда 
			Объект.ТекущийИсполнитель = Параметры.Пользователь;
		КонецЕсли;
		
		Если Объект.Дата = Дата(1, 1, 1) Тогда
			Объект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Объект.Процесс) Тогда
			Объект.Процесс = Справочники.Процессы.Обращение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ТекущийЭтап) Тогда
			Объект.ТекущийЭтап = Справочники.ЭтапыПроцессов.Новый;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Срочность) Тогда
			Объект.Срочность = Перечисления.Срочность.Средняя;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Влияние) Тогда
			Объект.Влияние = Перечисления.Влияние.Среднее;
		КонецЕсли;
		ОбновитьПриоритет();
		Если НЕ ЗначениеЗаполнено(Объект.ОценкаВыполнения) Тогда
			Объект.ОценкаВыполнения = Справочники.ОценкиЗаданий.БезОценки;
		КонецЕсли;
		Объект.ПроцентВыполнения = 0;
		
		// Находим текущего исполнителя.
		Если НЕ ЗначениеЗаполнено(Объект.ТекущийИсполнитель) Тогда
			Объект.ТекущийИсполнитель = ЗаданияСервер.ПолучитьИсполнителяЗаданияПоУмолчанию(Объект.Процесс);
			Если ПравоДоступа("Проведение", Метаданные.Документы.Задание) 
				И НЕ ЗначениеЗаполнено(Объект.ТекущийИсполнитель) Тогда
				
				Объект.ТекущийИсполнитель = Объект.Автор;
				
			КонецЕсли;
		КонецЕсли;
		
		ЗаданияСервер.ДобавитьНаблюдателейКоторыеПодписаныНаВсеНовыеЗадания(Объект);
		
		Если Параметры.Свойство("ЗначенияЗаполнения") И ТипЗНЧ(Параметры.ЗначенияЗаполнения) = Тип("Структура") 
			И Параметры.ЗначенияЗаполнения.Свойство("ПанельФункцийОрганизация")
			И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ПанельФункцийОрганизация) Тогда
			
			Объект.Организация = Параметры.ЗначенияЗаполнения.ПанельФункцийОрганизация;
			
		КонецЕсли;
		
		// Наблюдатели по умолчанию.
		Если ЗначениеЗаполнено(Объект.Процесс) Тогда
			Для Каждого СтрНаблюдатель Из Объект.Процесс.Наблюдатели Цикл
				ДобавитьПользователяВНаблюдателиНаСервере(СтрНаблюдатель.Наблюдатель);
			КонецЦикла;
		КонецЕсли;
				
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		// Проверка, на то, что можно открыть документ.
		Если НЕ ЗаданияСервер.ПравоОткрытияЗадания(Объект) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Нет прав на открытие задания с номером ""%1""'"),  Объект.Номер));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	#Область БСП_ПриСозданииНаСервере

	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	#КонецОбласти
	
	ОбновитьДоступностьРедактирования();
	
	УведомлятьНаблюдателей = Истина;
	
	Если (НЕ Объект.Ссылка.Пустая()) ИЛИ (ТолькоПросмотр) Тогда
		Элементы.ГруппаТекст.ТекущаяСтраница 			= Элементы.СтраницаПросмотра;
		Элементы.РежимРедактированияОписания.Картинка 	= БиблиотекаКартинок.Изменить;
		Элементы.РежимРедактированияОписания.Заголовок 	= НСтр("ru = 'Правка'");
		Элементы.ВставитьКартинкуИзБуфера.Доступность	= Ложь;
		Элементы.ОформитьФрагментКода.Доступность		= Ложь;
	Иначе
		Элементы.ГруппаТекст.ТекущаяСтраница 			= Элементы.СтраницаПравки;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Элементы.ПанельРедактирование.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Вложения.Видимость = Ложь;
	УстановитьСтатусТрудозатрат();
	УстановитьВидимостьДоступность();
	ОбновитьЗаголовокКомментариев();
	
	#Область Трудозатраты
	ОбновитьЗаголовокТрудозатрат();
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Трудозатраты,
		"Объект", Объект.Ссылка);
	#КонецОбласти
	
	Если ТолькоПросмотр Тогда
		УстановитьДоступностьПриСозданииНаСервере();
	КонецЕсли;
	
	ЗаданияСервер.УстановитьШагКорректировкиВеса(ШагКорректировкиВеса);
	
	Если Объект.ОбщийВес = 0 Тогда
		РассчитатьОбщийВесЗадания();
   КонецЕсли;
    
   НеобходимостьПереходаВКонецКомментариев = НеобходимостьПереходаВКонецКомментариев();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Если РегистрыСведений.РеквизитыЗаданийПоПользователям.УстановитьДатуОткрытия(Объект.Ссылка) Тогда
			ОповеститьОПрочтении = Истина;
		КонецЕсли;	
	КонецЕсли;
			
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	Если Объект.Ссылка.Пустая() Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	Если ОповеститьОПрочтении Тогда
		ОповеститьОбИзменении(Объект.Ссылка);	
	КонецЕсли;
	
	// Корректировки документа.
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	ОбновитьСписокВыбораКрайнейДаты("КрайняяДатаРеакции");
	ОбновитьСписокВыбораКрайнейДаты("КрайняяДатаВыполнения");
	
	Если НЕ Объект.Ссылка.Пустая() И КоличествоКомментариев > 0 
		И УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиент.ТекущийПользователь(), "ОткрыватьНеНовоеЗаданиеНаВкладеСообщение") = Истина Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаКомментарии;
		
	КонецЕсли;
		
	Если Не Объект.Ссылка.Пустая() Тогда	
		ТекущийЭлемент = Элементы.Страницы;
	КонецЕсли;
	
	// Переписка по заданию.
	ВывестиКомментарии();
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СЛС.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
	ПараметрыОбработкиТекста = Неопределено;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда		
		ТаблицаВложенийКартинокФорматированногоДокумента = ЗаданияСервер.ПолучитьВложения(Объект.Ссылка, Ложь);
		Для Каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
			Если СтрЧислоВхождений(Вложение.ИДФайлаЭлектронногоПисьма, "docimg_") > 0 Тогда
				НоваяСтрока 				= ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла		= Вложение.Наименование;
				НоваяСтрока.ИдентификаторФайлаДляHTML = "docimg_" + Строка(Новый УникальныйИдентификатор);
				Попытка
					НоваяСтрока.Картинка 	= Новый Картинка(РаботаСФайлами.ДвоичныеДанныеФайла(Вложение.Ссылка));
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		ПараметрыОбработкиТекста = Новый Структура("ПрисоединенныеФайлы",
			ТаблицаВложенийКартинокФорматированногоДокумента);
	КонецЕсли;
		
	// Установим текст и вид текста с картинками.
	ТекстHTML				= РаботаСHTML.ОбработатьТекстHTML(Объект.Ссылка, ПараметрыОбработкиТекста,
		УникальныйИдентификатор);
	Элементы.ТекстHTML.Вид 	= ВидПоляФормы.ПолеHTMLДокумента;
	Элементы.ТекстHTML.ТолькоПросмотр = Ложь;
	
	// Подготовим форматированный документ.
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ИдентификаторСообщения) Тогда
		СтруктураВложений = Новый Структура;
		Текст = РаботаСHTML.ОбработатьТекстHTMLДляФорматированногоДокумента(Объект, Объект.ТекстHTML,
			СтруктураВложений);
		ОписаниеФорматированныйДокумент.УстановитьHTML(СокрЛП(Текст), СтруктураВложений);
	КонецЕсли;
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.УправлениеДоступом
		
	УправлениеITОтделом8УФ.ОтобразитьОтметкиВФормеОбъекта(ЭтаФорма);
	
	ОбновитьСписокТегов();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	мТекущаяДата = ТекущаяДатаСеанса();
	
	Если ТекущийОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ТекущийОбъект.ДатаСоздания = мТекущаяДата;
		РассчитатьSLA(ТекущийОбъект);
	Иначе
		ТекущийОбъект.ДатаКорректировки = мТекущаяДата;
	КонецЕсли; 
	
	Если ТекущийОбъект.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	Иначе
		ТекущийОбъект.АвторКорректировки = Пользователи.ТекущийПользователь();
	КонецЕсли; 
		
	// Записываем картинки и текст.
	Если МодифицированностьОписаниеФорматированныйДокумент = Истина Тогда
		СохранитьФорматированныйДокумент();
		ТекущийОбъект.ТекстHTML = ТекстHTML;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства.
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства.
			
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТрудозатратыВключены", ТрудозатратыВключены);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		Попытка
			ТекущееЗадание = Документы.Задание.ПолучитьСсылку(Новый УникальныйИдентификатор());
			ТекущийОбъект.УстановитьСсылкуНового(ТекущееЗадание);
		Исключение
			ОписаниеОш = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОш);
			Возврат;
		КонецПопытки;
	Иначе
		ТекущееЗадание = Объект.Ссылка;
	КонецЕсли;	
	
	// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
	Если МодифицированностьОписаниеФорматированныйДокумент = Истина Тогда
		УдаленныеВложения = Новый СписокЗначений;
		ТаблицаВложенийКартинокФорматированногоДокумента = ЗаданияСервер.ПолучитьВложения(ТекущееЗадание, Ложь);
		Для Каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
			Если СтрЧислоВхождений(Вложение.ИДФайлаЭлектронногоПисьма, "docimg_") > 0 Тогда
				УдаленныеВложения.Добавить(Вложение.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		// Удалим удаленные вложения.
		Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
			ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
			Попытка
				ОбъектВложение.Заблокировать();
				ОбъектВложение.Удалить();
			Исключение
			    ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление вложений при записи'"),
			       УровеньЖурналаРегистрации.Ошибка,,,
			       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЦикла;
		
		// Записываем новые вложения - картинки из форматированного документа в присоединенные файлы.
		Для Каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ДополнительныеРеквизиты = Новый Структура("ИДФайлаЭлектронногоПисьма", Вложение.ИдентификаторФайлаДляHTML);
			ПараметрыФайла 			= РаботаСФайлами.ПараметрыДобавленияФайла(ДополнительныеРеквизиты);
			ПараметрыФайла.ВладелецФайлов = ТекущееЗадание; 
			ПараметрыФайла.Вставить("ИмяБезРасширения",   "_" 
				+ СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_"));
			ПараметрыФайла.Вставить("РасширениеБезТочки", "png");
			ПараметрыФайла.ВремяИзмененияУниверсальное = Неопределено;
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилище);
			
		КонецЦикла;
	КонецЕсли;
	
	// Вложения, которые были прикреплены в файлах.
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			
			// из временного хранилища.
			РазложенноеИмяФайла = УправлениеITОтделом8УФ.РазложитьИмяФайла(СтрокаТаблицыВложений.ИмяФайла);
			ПараметрыФайла 		= РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.ВладелецФайлов = ТекущееЗадание; 
			ПараметрыФайла.ВремяИзмененияУниверсальное = Неопределено;
			ЗаполнитьЗначенияСвойств(ПараметрыФайла, РазложенноеИмяФайла);			
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
			
		КонецЕсли;
		СтрокаТаблицыВложений.Расположение = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПравилаСобытийОтказ = Неопределено;
	Если МодифицированностьОписаниеФорматированныйДокумент = Истина 
		И ТекущийОбъект.ДополнительныеСвойства.Свойство("ПравилаСобытийОтказ", ПравилаСобытийОтказ) Тогда
		МодифицированностьОписаниеФорматированныйДокумент 	= ?(ПравилаСобытийОтказ = Ложь, Истина, Ложь);
	Иначе
		МодифицированностьОписаниеФорматированныйДокумент 	= Ложь;
	КонецЕсли;
	
	//@skip-warning
	СЛС.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	
	Если ТрудозатратыВключены Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		ТекущийИсполнитель  = ТекущийОбъект.ТекущийИсполнитель;
		Если ТекущийПользователь <> ТекущийИсполнитель Тогда
			ТрудозатратыВключены = Ложь;
			УстановитьДоступностьКнопокТрудозатраты();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТелефонныйЗвонок) Тогда
		Взаимодействия.УстановитьПредмет(ТелефонныйЗвонок, ТекущийОбъект.Ссылка);
	КонецЕсли;	                                                
	ОбновитьПереводНаЭтапы();
	ОбновитьВыборИсполнителя();
	ОбновитьВидимость();
	УстановитьТолькоПросмотрОписания();
	РегистрыСведений.РеквизитыЗаданийПоПользователям.УстановитьДатуОткрытия(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ОбновитьФормуСпискаЗаданий", Модифицированность ИЛИ Объект.Ссылка.Пустая());
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	ПроверитьПравоСменыИсполнителя(Истина, Отказ);
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,
						"Вложения",, Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Если Элементы.Вложения.Видимость = Истина Тогда
		Элементы.Вложения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ОбновитьФормуСпискаЗаданий")
		И ПараметрыЗаписи.ОбновитьФормуСпискаЗаданий = Истина Тогда
		Оповестить("ОбновитьФормуСпискаЗаданий");
	КонецЕсли;
		
	Если ПараметрыЗаписи.Свойство("ОбновлятьФорму") Тогда
		
		// Корректировки документа.
		УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
		ОбновитьДоступностьРедактирования();
		
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Трудозатраты, 
			"Объект", Объект.Ссылка);
			
		ОбновитьЗаголовокТрудозатрат();
		Прочитать();
		ОбновитьОтображениеДанных();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, 
			"ДокументЗаданиеОсновнаяФорма (проведение)");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		Если Параметр.Свойство("ВладелецФайла") И Параметр.ВладелецФайла = Объект.Ссылка Тогда
			
			ОбновитьВидимость();
			
		КонецЕсли;
	КонецЕсли;
	
	Если (ИмяСобытия = "Задание_СмененЭтап" ИЛИ ИмяСобытия = "Задание_Записан") 
		И Источник = УникальныйИдентификатор Тогда
		
		Объект.ТекущийЭтап = Параметр.НовыйЭтап;
		Модифицированность = Истина;
		ОбновитьПереводНаЭтапы();
		ОбновитьДоступностьРедактирования();
		
	ИначеЕсли ИмяСобытия = "Задание_ДобавитьКомментарийИПеревестиНаЭтап" Тогда

		Если УникальныйИдентификатор = Источник Тогда
			ДобавитьКомментарийИПеревестиНаЭтап(Параметр);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Задание_ФормаВыбораЭтапаЗакрыта" Тогда
		
		Если УникальныйИдентификатор = Источник Тогда
			Объект.ТекущийЭтап = Параметр.ЭтапПерехода;
			Если ЗначениеЗаполнено(Параметр.ИсполнительПоУмолчанию) Тогда 
				Объект.ТекущийИсполнитель = Параметр.ИсполнительПоУмолчанию;
			КонецЕсли;
			ОбновитьПереводНаЭтапы();
			ОбновитьДоступностьРедактирования();
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Комментарий" Тогда
		
		Если Параметр.Свойство("ВладелецКомментария") И Параметр.ВладелецКомментария = Объект.Ссылка Тогда
			Если НЕ Модифицированность И НЕ МодифицированностьОписаниеФорматированныйДокумент Тогда
				Прочитать();				
			КонецЕсли;
			ОбновитьЗаголовокКомментариев();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьМоиТрудозатраты" Тогда
		
		Если Объект.Ссылка = Источник Тогда
			Элементы.Трудозатраты.Обновить();
			ОбновитьЗаголовокТрудозатрат();
		КонецЕсли;
		
	КонецЕсли;
		
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства	
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() И УчетВремениАвторасчетТрудозатрат И ТрудозатратыВключены Тогда
		ТрудозатратыПередЗакрытиемНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КарточкаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка	= Ложь;
	СкладскойУчетКлиентов	= УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("СкладскойУчетКлиентов") = Истина;
	ВладелецКарточки		= Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Клиент) 
		И ТипЗнч(Объект.Клиент) = Тип("СправочникСсылка.Контрагенты")
		И СкладскойУчетКлиентов
		И ЗначениеРеквизитаНаСервере(Объект.Клиент, "УчетОстатков") = Истина Тогда
			ВладелецКарточки = Объект.Клиент;
	КонецЕсли;	
	
	Если ВладелецКарточки = Неопределено 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстПредупреждения = НСтр("ru = 'Для выбора карточки номенклатуры необходимо указать организацию'");
		Если СкладскойУчетКлиентов Тогда
			ТекстПредупреждения = ТекстПредупреждения
				+ " " + НСтр("ru = 'или клиента (контрагента), по которому ведется учет остатков номенклатуры'");
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.МестоХранения) Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Для выбора карточки номенклатуры необходимо указать склад или рабочее место'"));
		Возврат;
		
	КонецЕсли;
	
	Если ВладелецКарточки = Неопределено Тогда
		ВладелецКарточки = Объект.Организация;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборПоОрганизацииМестуХранения", 	Истина);
	ПараметрыФормы.Вставить("Организация", 						ВладелецКарточки);
	ПараметрыФормы.Вставить("МестоХранения", 					Объект.МестоХранения);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", 				Объект.КарточкаНоменклатуры);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораКарточкиНоменклатуры", ЭтотОбъект);
	ОткрытьФорму("Справочник.КарточкиНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКарточкиНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Оп = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);
	ЗаданияКлиент.ПолучитьКартинкуИзБуфераОбмена(Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Подключено, ДвоичныеДанные) Экспорт
	
	Если Подключено = Истина Тогда
		ВставитьКартинкуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзДвоичныхДанных(Знач ДвоичныеДанные)
	
	НП=0;
	КП=0;
	//@skip-warning
	Элементы.ОписаниеФорматированныйДокумент.ПолучитьГраницыВыделения(НП, КП);
	Элементы.ОписаниеФорматированныйДокумент.ВыделенныйТекст = "";
	ВставитьКартинкуВОписаниеНаСервере(ДвоичныеДанные, НП);
	Модифицированность = Истина;
	МодифицированностьОписаниеФорматированныйДокумент = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьКартинкуВОписаниеНаСервере(ДвоичныеДанные, НП)
	
	Картинка = Новый Картинка(ДвоичныеДанные);
	ОписаниеФорматированныйДокумент.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	//@skip-warning
	ОписаниеФорматированныйДокумент.Вставить(НП, Картинка, ТипЭлементаФорматированногоДокумента.Картинка); 
	//@skip-warning
	ОписаниеФорматированныйДокумент.Вставить(НП, Символы.ПС, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьФрагментКода(Команда)
	
	Если Элементы.ОписаниеФорматированныйДокумент.ВыделенныйТекст = "" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите фрагмент для раскраски как кода встроенного языка 1С...'"));
	Иначе
		мТекст = Элементы.ОписаниеФорматированныйДокумент.ВыделенныйТекст;
		Элементы.ОписаниеФорматированныйДокумент.ВыделенныйТекст = ЗаданияКлиент.РаскраситьКод1С8(мТекст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьФорматированныйДокумент()
	
	// Надо сохранить форматированный документ в HTML.
	СтруктураВложений = Новый Структура;
	ОписаниеФорматированныйДокумент.ПолучитьHTML(ТекстHTML, СтруктураВложений);
	
	ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();	
	Для Каждого Вложение Из СтруктураВложений Цикл
		
		НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
		НоваяСтрока.ИмяФайла = Вложение.Ключ;
		НоваяСтрока.ИдентификаторФайлаДляHTML = "docimg_" + Строка(Новый УникальныйИдентификатор);
		НоваяСтрока.Картинка = Вложение.Значение;
		
	КонецЦикла;
	
	Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
		
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
		Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
		    ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
		ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
	КонецЕсли;
	
	Если СтрНайти(НРег(ТекстHTML), "<body>") > 0 Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, Сред(ТекстHTML, СтрНайти(НРег(ТекстHTML), "<body>"), 6), 
			"<body style=""font-family:Arial;font-size:10pt;"">");
	КонецЕсли;
	
	ТекстHTML = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстHTML);
		
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияОписания(Команда)
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторСообщения) Тогда
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(НСтр("ru = 'Задание создано на основании электронного письма и'"));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'не подлежит'"),Новый Шрифт(,,Истина), 
			WebЦвета.Красный));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(НСтр("ru = 'правке.
                                       |Для уточнений и переписки используйте вкладку '"));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '""Комментарии""'"),,WebЦвета.Синий));
		МассивСтрок.Добавить(".");
		ПоказатьПредупреждение(, Новый ФорматированнаяСтрока(МассивСтрок),, НСтр("ru = 'Правка не доступна'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаТекст.ТекущаяСтраница = Элементы.СтраницаПравки 
		И МодифицированностьОписаниеФорматированныйДокумент = Истина Тогда
		
		Записать();
		
	КонецЕсли;
	Элементы.ГруппаТекст.ТекущаяСтраница = ?(Элементы.ГруппаТекст.ТекущаяСтраница = Элементы.СтраницаПросмотра, 
		Элементы.СтраницаПравки, Элементы.СтраницаПросмотра);
	УстановитьТолькоПросмотрОписания();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотрОписания()
	
	РежимТолькоПросмотра = (Элементы.ГруппаТекст.ТекущаяСтраница = Элементы.СтраницаПросмотра) ИЛИ ТолькоПросмотр;
	
	Если РежимТолькоПросмотра Тогда
		// Установим текст и вид текста.
		ТекстHTML 						  = РаботаСHTML.ОбработатьТекстHTML(Объект.Ссылка, , УникальныйИдентификатор);
		Элементы.ТекстHTML.Вид 			  = ВидПоляФормы.ПолеHTMLДокумента;
		Элементы.ТекстHTML.ТолькоПросмотр = Ложь;
	Иначе		
		// Показываем HTML.
		СтруктураВложений = Новый Структура;
		Текст = РаботаСHTML.ОбработатьТекстHTMLДляФорматированногоДокумента(Объект, Объект.ТекстHTML,
			СтруктураВложений);
		ОписаниеФорматированныйДокумент.УстановитьHTML(СокрЛП(Текст), СтруктураВложений);
	КонецЕсли;
	
	Элементы.ПанельФорматированияОписания.Доступность	= НЕ РежимТолькоПросмотра;
	Элементы.ВставитьКартинкуИзБуфера.Доступность		= НЕ РежимТолькоПросмотра;
	Элементы.ОформитьФрагментКода.Доступность			= НЕ РежимТолькоПросмотра;
	Элементы.РежимРедактированияОписания.Картинка		= ?(РежимТолькоПросмотра, БиблиотекаКартинок.Изменить, 
		БиблиотекаКартинок.НеРедактировать);
	Элементы.РежимРедактированияОписания.Заголовок		= ?(РежимТолькоПросмотра, НСтр("ru = 'Правка'"), 
		НСтр("ru = 'Просмотр'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьКомментарийПриПереходеНаЭтап(Команда)
	
	Элементы.ДобавлятьКомментарийПриПереходеНаЭтап.Пометка = НЕ Элементы.ДобавлятьКомментарийПриПереходеНаЭтап.Пометка;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьВыбора(ВыбранноеЗначение, СтандартнаяОбработка, ТекстСообщения = "");
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сервисы") Тогда
			Если ВыбранноеЗначение.Статус <> Перечисления.СтатусыСервисов.ВРаботе Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Проекты") Тогда
			Если ВыбранноеЗначение.Статус <> Перечисления.СтатусыПроекта.ВРаботе Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		Иначе
			Если ВыбранноеЗначение.НеИспользовать = Истина Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверитьВозможностьВыбора(ВыбранноеЗначение, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Проект <%1> запрещено использовать в документе.'"),
			ВыбранноеЗначение));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СервисОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверитьВозможностьВыбора(ВыбранноеЗначение, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Сервис <%1> запрещено использовать в документе.'"),
			ВыбранноеЗначение));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекстСообщения = "";
	ПроверитьВозможностьВыбора(ВыбранноеЗначение, СтандартнаяОбработка, ТекстСообщения);
	Если НЕ СтандартнаяОбработка Тогда
		ПоказатьПредупреждение(,?(ТекстСообщения="",
			СтрШаблон(НСтр("ru = 'Процесс <%1> запрещено использовать в документе.'"), ВыбранноеЗначение),
				ТекстСообщения));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьИсполнителяПриПереводеНаЭтап(ТекИсполнитель)
	
	ТекИсполнитель  = Объект.Ссылка.ТекущийИсполнитель;
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	Если УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskРаспределениеЗаданий") 
		ИЛИ (ТекИсполнитель = ТекПользователь) 
		ИЛИ НЕ (ЗначениеЗаполнено(ТекИсполнитель) 
		И ЗначениеЗаполнено(ТекПользователь)) Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат ЗаданияСервер.ПроверитьПодчиненность(ТекИсполнитель, ТекПользователь);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПроверитьПравоСменыИсполнителя(ПроверитьСсылку = Ложь, Отказ = Ложь)
	
	Если ВычислитьКод("(НЕ Объект.Ссылка.Пустая())" 
		+ ?(ПроверитьСсылку, " И (Объект.Ссылка.ТекущийИсполнитель<>Объект.ТекущийИсполнитель)", "")) Тогда
		
		юз = Неопределено;
		Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(юз) Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(,
				СтрШаблон(НСтр("ru = 'Исполнителем по данному заданию является %1.
                                |Изменить исполнителя имеет право только он сам или его руководители.'"), юз), 180,
					НСтр("ru = 'Нельзя изменить исполнителя'"));
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура НазначитьИсполнителя(Команда)
	
	Если ТрудозатратыВключены Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаНазначитьИсполнителяТрудозатрат", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Для назначения нового исполнителя необходимо остановить трудозатраты. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПослеВопросаНазначитьИсполнителяТрудозатратФрагмент();
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаНазначитьИсполнителяТрудозатрат(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не ЗаписатьДокументНаСервере(Истина) Тогда
			Если Не ЗаписатьДокументНаСервере(Ложь) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось записать документ.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаНазначитьИсполнителяТрудозатратОписаниеОповещения",
		ЭтотОбъект);
	ДобавитьТрудозатратыПользователю(Ложь, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаНазначитьИсполнителяТрудозатратОписаниеОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеВопросаНазначитьИсполнителяТрудозатратФрагмент();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеВопросаНазначитьИсполнителяТрудозатратФрагмент()
	
	Если НЕ ЗначениеЗаполнено(Объект.Процесс) Тогда		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Процесс не указан. Для выбора исполнителя необходимо заполнить процесс.'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ТрудозатратыВключены Тогда
		Попытка
			Записать(Новый Структура);
			Модифицированность = Ложь;
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось записать задание: %1'"),
				ОписаниеОшибки()));
		КонецПопытки;
	КонецЕсли;
	
	ДокументЗадание	= Новый Структура();
	ДокументЗадание.Вставить("Процесс",	Объект.Процесс);
	ДокументЗадание.Вставить("Сервис",	Объект.Сервис);
	ДокументЗадание.Вставить("Услуга", 	Объект.Услуга);
	ДокументЗадание.Вставить("Ссылка",	Объект.Ссылка);
	ДокументЗадание.Вставить("ЭтоНовый",Объект.Ссылка.Пустая());
	ДокументЗадание.Вставить("ТекущийЭтап", 		Объект.ТекущийЭтап);
	ДокументЗадание.Вставить("ТекущийИсполнитель", 	Объект.ТекущийИсполнитель);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИсполнителяФормаЗавершение", ЭтотОбъект, ДокументЗадание);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИсполнителя", Новый Структура("СсылкаНаОбъект", ДокументЗадание), 
		ЭтаФорма,,,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыбратьИсполнителяФормаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		// Заполняем задание.		
		Объект.ТекущийИсполнитель = Результат;
		
		ОбновитьВыборИсполнителя();
		ОбновитьДоступностьРедактирования();
		Модифицированность = Истина;
					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	РассчитатьSLA();

КонецПроцедуры

&НаКлиенте
Процедура СервисНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтборПараметры		 = Новый Структура();
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		ОтборПараметры.Вставить("Проект", Объект.Проект);
	КонецЕсли;
		
	ОписаниеОповещения 	 = Новый ОписаниеОповещения("СервисПослеВыбора", ЭтотОбъект);
	ОткрытьФорму("Справочник.Сервисы.Форма.ФормаВыбора", ОтборПараметры, ЭтаФорма,,,, ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияСпискаНаблюдателей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Наблюдатели.Очистить();
	Если Результат.Количество() > 0 Тогда
		Для Каждого СтрокаМассива Из Результат Цикл
			СтрокаНаблюдатель = Объект.Наблюдатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНаблюдатель, СтрокаМассива);
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщенияХТМЛПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
			
	СтандартнаяОбработка = Ложь;	
	Если ДанныеСобытия.Anchor = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыФормы  = Новый Структура;
	ТребуетсяЗапись = Объект.Ссылка.Пустая();
	ДополнительныеПараметрыФормы.Вставить("ТребуетсяЗапись", ТребуетсяЗапись);	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОбработкиНажатияКомментарииПолеHTML", ЭтотОбъект);
	КомментарииКлиент.КомментарииПолеHTMLПриНажатии(ДанныеСобытия, ОписаниеОповещения, ЭтаФорма,
		ДополнительныеПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаписиЗаданияУказатьТрудозатратыЗавершение(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаписатьДокументНаСервере(Истина) Тогда
		Если Не ЗаписатьДокументНаСервере(Ложь) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УказатьТрудозатратыФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатратыФрагмент()		
	
	ДобавитьТрудозатратыПользователю(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатратыФрагментЗавершение(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда
		ОбновитьЗаголовокТрудозатрат();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОписаниеФорматированныйДокументПриИзменении(Элемент)
	
	МодифицированностьОписаниеФорматированныйДокумент = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
			СтандартнаяОбработка = Ложь;
			Модифицированность   = Истина;
			Объект.Инициатор 	= ВыбранноеЗначение;
			Если НЕ ЗначениеЗаполнено(Объект.Клиент) Тогда
				УправлениеITОтделом8УФКлиент.ОбновитьОграничениеТипаКлиента(Объект.Инициатор, Элементы.Клиент);
			КонецЕсли;
			РассчитатьSLA();
			РассчитатьОбщийВесЗадания();
			ПриИзмененииИнициатораНаСервере();
			ЗаполнениеКлиентаНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда        
	    СтандартнаяОбработка = Ложь;
		Элементы.Инициатор.СписокВыбора.Очистить();
	    ДанныеВыбора = ЗаданияСервер.ПолучитьСписокВыбораИнициатора(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КрайняяДатаВыполненияПриИзменении(Элемент)
	
	ОбновитьСписокВыбораКрайнейДаты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Теги") Тогда
		ДобавитьТегСервер(ВыбранноеЗначение);
	КонецЕсли;
	Элемент.ОбновитьТекстРедактирования();
	
	ОбновитьСписокТегов();
	ТекущийЭлемент = Элементы.Теги;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьТегСервер(Текст);
		ОбновитьСписокТегов();
		ТекущийЭлемент = Элементы.Теги;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалениеТега(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
		
	ИндексСтроки = Сред(НавигационнаяСсылка, СтрДлина("ТегФормы") + 1);
	Объект.Теги.Удалить(ИндексСтроки - 1);
	ОбновитьСписокТегов();
	Модифицированность = Истина;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВлияниеПриИзменении(Элемент)
	
	ОбновитьПриоритет();
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура СрочностьПриИзменении(Элемент)
	
	ОбновитьПриоритет();
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Форма = ОткрытьФорму("Документ.Задание.ФормаВыбора",,Элемент);
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Форма.Список,
		"Ссылка", Объект.Ссылка, , ВидСравненияКомпоновкиДанных.НеРавно);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	РассчитатьSLA();
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОчистка(Элемент, СтандартнаяОбработка)
	
	РассчитатьSLA();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Инициатор) Тогда 
		МассивКлиент	= Новый Массив();
		ДопустимыеТипы = Новый ОписаниеТипов(МассивКлиент, , );
		Элементы.Клиент.ОграничениеТипа = ДопустимыеТипы;
	Иначе
		ПриИзмененииИнициатораНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияSLAНажатие(Элемент)
	
	ДокументЗадание	= Новый Структура();
	ДокументЗадание.Вставить("Задание", Объект);
	
	ОткрытьФорму("Документ.Задание.Форма.ИнформацияSLA", ДокументЗадание, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
КонецПроцедуры

&НаКлиенте
Процедура ВесРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ШагКорректировкиВеса > 1 Тогда		
		
		СтандартнаяОбработка = Ложь;
		Если Направление = 1 Тогда
			Объект.Вес = Объект.Вес + ШагКорректировкиВеса;
		Иначе
			Объект.Вес = Объект.Вес - ШагКорректировкиВеса;
		КонецЕсли;	
		
		Модифицированность = Истина;
		
		РассчитатьОбщийВесЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесПриИзменении(Элемент)
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияПриИзменении(Элемент)
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаНоменклатурыПриИзменении(Элемент)
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЗаданияПриИзменении(Элемент)
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияПриИзменении(Элемент)
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСозданияЗаданияПриИзменении(Элемент)
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПроцессаПриИзменении(Элемент)
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановоеВремяВыполненияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлановаяЕдиницаДлительности) Тогда
		
		Объект.ПлановаяЕдиницаДлительности = ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.Час");
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеКлиентаНаСервере()
	
	мКлиент = ЗаданияСервер.КлиентИнициатора(Объект.Инициатор);
	Если ЗначениеЗаполнено(мКлиент) Тогда
		Объект.Клиент = мКлиент;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИнициатораНаСервере()
	
	Элементы.Клиент.ОграничениеТипа = ЗаданияСервер.ДопустимыеТипыКлиентаИнициатора(Объект.Инициатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяУстановкаДатВSLAПриИзменении(Элемент)
	
	Если Объект.РучнаяУстановкаДатВSLA Тогда
		Объект.УслугаНедоступна = Ложь;
		
		ОбновитьСписокВыбораКрайнейДаты("КрайняяДатаРеакции");
		ОбновитьСписокВыбораКрайнейДаты("КрайняяДатаВыполнения");
	Иначе
		РассчитатьSLA();
	КонецЕсли;
	ОбновитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЧекЛист

&НаКлиенте
Процедура ЧекЛистПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Автор = ПользователиКлиент.АвторизованныйПользователь();
		Элемент.ТекущиеДанные.Дата 	= ПолучитьДатуНаСервере();
		Элемент.ТекущиеДанные.Вес 	= 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПослеУдаления(Элемент)
		
	ПодключитьОбработчикОжидания("ОбновитьЗаголовокЧекЛистаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПодключитьОбработчикОжидания("ОбновитьЗаголовокЧекЛистаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистВыполненоПриИзменении(Элемент)
		
	ОбновитьЗаголовокЧекЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЧекЛист.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные); 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаСтрокиЧекЛиста", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводСтроки(ОписаниеОповещения, ТекущиеДанные.Описание, НСтр("ru = 'Введите описание строки чек - листа'"),
		, Истина);
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЭкспортЗадания(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЭкспортЗаданияЗавершение", ЭтотОбъект),
			НСтр("ru = 'Документ не записан. Для продолжения необходима запись. Продолжить?'"), 
				РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФормуЭкспорта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортЗаданияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИзФормы(Неопределено);
	ОткрытьФормуЭкспорта();	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЭкспорта()
	
	ОткрытьФорму("Документ.Задание.Форма.ФормаЭкспорта", Новый Структура("Основание", Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура СервисПриИзменении(Элемент)
	
	ПриИзмененииСервиса();
	РассчитатьSLA();
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетПриИзменении(Элемент)
		
	РассчитатьSLA();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
		
	РассчитатьSLA();
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьСписокДействийДиаграммаГанта(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса =
		НСтр("ru = 'Данные еще не записаны. Показать диаграмму Ганта
		|возможно только после записи данных.
		|
		|Данные будут записаны.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПоказатьДиаграммуГантаЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ОКОтмена);
		Возврат;
			
	Иначе
		
		Если Модифицированность Тогда
			Если Не Записать() Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	Список.Добавить("ПоказатьДиаграммуГанта", НСтр("ru = 'по заданию'"), , БиблиотекаКартинок.ВидДиаграммаГанта);
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		Список.Добавить("ПоказатьДиаграммуГантаПоПроекту", НСтр("ru = 'по проекту'"), , 
			БиблиотекаКартинок.ВидСписокЗадач);
	КонецЕсли;
	
	Список.СортироватьПоПредставлению();
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОткрытьСписокДействийДиаграммаЗавершение", ЭтаФорма),
		Список, Элементы[Команда.Имя]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиаграммуГантаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатВопроса;
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Создание:'"), ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка), БиблиотекаКартинок.Информация32);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДействийДиаграммаЗавершение(Результат, Доп) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "ПоказатьДиаграммуГанта" Тогда
		
		ПоказатьДиаграммуГантаФрагмент();
		
	ИначеЕсли Результат.Значение = "ПоказатьДиаграммуГантаПоПроекту" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
			Ошибки = Неопределено;
			Отказ = Ложь;
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.Проект",
				НСтр("ru = 'Не указан проект'"), НСтр("ru = 'Ошибки'"));
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
			Возврат;
		КонецЕсли;
		
		ПоказатьДиаграммуГантаПроектФрагмент();
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиаграммуГантаФрагмент()
    
    Структура = Новый Структура("Задание", Объект.Ссылка);
    ОткрытьФорму("Обработка.ДиаграммаГантаПоЗаданию.Форма.Форма", Структура);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиаграммуГантаПроектФрагмент()
	
	Структура = Новый Структура("Проект", Объект.Проект);
	ОткрытьФорму("Обработка.ДиаграммаГантаПоПроекту.Форма.Форма", Структура);

КонецПроцедуры

&НаКлиенте
Процедура НадписьАвторНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Спк = УправлениеITОтделом8УФКлиент.ПолучитьСписокНадписьАвтор(Объект);
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НадписьАвторНажатиеЗавершение", ЭтотОбъект), Спк,
		Элементы.НадписьАвтор, );
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура НадписьАвторНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт    

КонецПроцедуры

&НаСервере
Процедура СоздатьСкриншотИзДвоичныхДанных(ДвоичныеДанные)
	
	Попытка
		ЭтотОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось записать задание'"));
	КонецПопытки;
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",		Объект.Ссылка);
	ПараметрыФайла.Вставить("Автор",				Пользователи.ТекущийПользователь());
	ПараметрыФайла.Вставить("ИмяБезРасширения",		СтрШаблон(НСтр("ru = 'Снимок экрана %1'"), 
		Формат(ТекущаяДатаСеанса(), "ДФ='(dd-MM-yyyy HH-mm-ss)'")));
	ПараметрыФайла.Вставить("РасширениеБезТочки",	"jpg");
	ПараметрыФайла.Вставить("ВремяИзменения",		Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
	РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор), 
		"");
	
	Модифицированность 	= Истина;
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкриншот(Команда)
	
	Оп = Новый ОписаниеОповещения("ДобавитьСкриншотЗавершение", ЭтотОбъект);
	ЗаданияКлиент.ПолучитьКартинкуИзБуфераОбмена(Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкриншотЗавершение(Подключено, ДвоичныеДанные) Экспорт
	
	Если Подключено	= Истина Тогда
		СоздатьСкриншотИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаблюдателей()
	Если ЗначениеЗаполнено(Объект.Процесс) Тогда
		Для Каждого СтрНаблюдатель Из Объект.Процесс.Наблюдатели Цикл
			ДобавитьПользователяВНаблюдателиНаСервере(СтрНаблюдатель.Наблюдатель);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроцессСодержитЭтап(Знач Процесс, Знач Этап)
	
	Если НЕ ЗначениеЗаполнено(Процесс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Процесс) <> Тип("СправочникСсылка.Процессы") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Процесс.Этапы.Найти(Этап, "Этап") <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПроцессПриИзменении(Элемент)
	
	ПроцессПриИзмененииНаСервере();
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаСервере
Процедура ВзятьНаКонтроль(Пометка)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Адресат", Пользователи.ТекущийПользователь());
	НайденнаяСтрока = Объект.Наблюдатели.НайтиСтроки(Отбор);
	Если Пометка Тогда
		Если НайденнаяСтрока.Количество() = 0 Тогда
			НоваяСтрока 			= Объект.Наблюдатели.Добавить();
			НоваяСтрока.Адресат 	= Пользователи.ТекущийПользователь();
		КонецЕсли;
	Иначе
		Объект.Наблюдатели.Удалить(НайденнаяСтрока[0]);
	КонецЕсли;
	
	Модифицированность = Истина;
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура НаКонтроль(Команда)
	
	ВзятьНаКонтроль(НЕ Элементы.ФормаНаКонтроль.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПодзадачиСотрудникам(Команда)
	
	// Записываем
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса =
			НСтр("ru = 'Данные еще не записаны.
				|Создать подзадачи возможно только после записи данных.
				|Данные будут записаны.'");

		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьПодзадачиСотрудникамЗавершение", ЭтотОбъект), 
			ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	СоздатьПодзадачиСотрудникамФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПодзадачиСотрудникамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатВопроса;
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗаписатьДокументНаСервере(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Создание:'"), ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка), БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДокументНаСервере(РежимЗаписиПроведение)
	
	Док = РеквизитФормыВЗначение("Объект");
	
	Док.ДополнительныеСвойства.Вставить("ТрудозатратыВключены", ТрудозатратыВключены);
	
	Если РежимЗаписиПроведение = Истина Тогда 	
		Попытка	
			Док.Записать(РежимЗаписиДокумента.Проведение);
			ЗначениеВРеквизитФормы(Док,"Объект");
			Возврат Истина;
		Исключение
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
	Иначе 
		Попытка
			Док.Записать(РежимЗаписиДокумента.Запись);
			ЗначениеВРеквизитФормы(Док,"Объект");
			Возврат Истина;
		Исключение
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура СоздатьПодзадачиСотрудникамФрагмент()
	
	Структура = Новый Структура();
	Структура.Вставить("Задание", 		Объект.Ссылка);
	Структура.Вставить("Тема", 			Объект.Тема);
	Структура.Вставить("ВыполнитьДо", 	Объект.КрайняяДатаВыполнения);
	Структура.Вставить("Процесс",		Объект.Процесс);
	Структура.Вставить("Инициатор",		ПользователиКлиент.ТекущийПользователь());
	ОткрытьФорму("Документ.Задание.Форма.ФормаСозданияПодзаданий", Структура,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПодпроцесс(Команда)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Дата",		ПолучитьДатуНаСервере());
	СтруктураОбъекта.Вставить("Процесс",	Объект.ТекущийЭтап);
	СтруктураОбъекта.Вставить("Тема",		Объект.Тема);
	СтруктураОбъекта.Вставить("Родитель",	Объект.Ссылка);
	ОткрытьФорму("Документ.Задание.Форма.ФормаДокумента", Новый Структура("ОткрываетсяИзВне, Объект", 
		Истина, СтруктураОбъекта),,Новый УникальныйИдентификатор(),);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПереданнаяСтрокаПоиска", Объект.Тема);
	ОткрытьФорму("ОбщаяФорма.ФормаПоиска", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПриИзменении(Элемент)
		
	Если ЗначениеЗаполнено(Объект.Инициатор) Тогда
		Если ЗначениеЗаполнено(Объект.Процесс) И НужноДобавитьИнициатораВНаблюдатели(Объект.Процесс) Тогда
			ДобавитьИнициатораВНаблюдатели(Объект.Инициатор);
		КонецЕсли;
		РассчитатьSLA();
	КонецЕсли;	
	
	РассчитатьОбщийВесЗадания();
	
	Если ЗначениеЗаполнено(Объект.Инициатор) Тогда 
		ПриИзмененииИнициатораНаСервере();
		ЗаполнениеКлиентаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда 
		Объект.Клиент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпринтАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.Спринт.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	МассивТипов = СформироватьСписокСпринтов();
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура СпринтПоступленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, 
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.Спринт.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	МассивТипов = СформироватьСписокСпринтовСоздания();
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивТипов);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСебяИзСпискаНаблюдателей(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = 
		НСтр("ru = 'Удалить себя из списка наблюдателей (Вы перестанете получать уведомления об изменении задания)?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ИсключитьСебяИзСпискаНаблюдателейЗавершение", ЭтотОбъект), Текст, 
		Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСебяИзСпискаНаблюдателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = Неопределено ИЛИ Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    мПользователиТекущийПользователь	= ПользователиКлиент.ТекущийПользователь();
    Индекс = Объект.Наблюдатели.Количество() - 1;
    Пока Индекс >= 0 Цикл
        Строки = Объект.Наблюдатели[Индекс];
        Если Строки.Адресат = мПользователиТекущийПользователь Тогда
            Объект.Наблюдатели.Удалить(Индекс);
        КонецЕсли;
        Индекс = Индекс - 1;
    КонецЦикла;
    Модифицированность = Истина;
    ОбновитьВидимость();
    
КонецПроцедуры

&НаКлиенте
Процедура ПереходПрисоединенныеФайлыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	Если Не ЗаписатьДокументНаСервере(Ложь) Тогда
		Возврат;
	КонецЕсли;
	ПереходПрисоединенныеФайлыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходПрисоединенныеФайлыФрагмент()
	
	Структура = Новый Структура;
	Структура.Вставить("ВладелецФайла", Объект.Ссылка);
	Структура.Вставить("ТолькоФайлы", Истина);
	Структура.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", Структура, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.Процесс.ТолькоПросмотр = ?(ЗначениеЗаполнено(Объект.Процесс), Объект.Процесс.НеИзменять, Ложь);
	Элементы.ОписаниеФорматированныйДокумент.Видимость 	= Истина;
	Элементы.ПанельРедактирование.Видимость	= Истина;
	Элементы.ГруппаПроблемы.Видимость		= УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИспользоватьПроблемы");
	Элементы.ФормаДокументПроблемаСоздатьНаОсновании.Видимость = Элементы.ГруппаПроблемы.Видимость;	
	УстановитьДоступностьКнопокТрудозатраты();	
	Элементы.ГруппаДаты.Видимость = УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("SLAСервисыРаботы");
	Элементы.ГруппаПланДлительность.Доступность = УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskРаспределениеЗаданий");
		
	ПриИзмененииИнициатораНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьТекущийИсполнительНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Процесс) Тогда
		НазначитьИсполнителя(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаписиЗаданияТрудозатратЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаписатьДокументНаСервере(Истина) Тогда
		Если Не ЗаписатьДокументНаСервере(Ложь) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВключитьТрудозатратыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьТрудозатратыФрагмент()
	
	ТрудозатратыВключены = Не ТрудозатратыВключены;
	Если ТрудозатратыВключены Тогда
		ТекстСообщения = НСтр("ru = 'Автоучет трудозатрат запущен.'");
		#Если ВебКлиент Тогда
		ПоказатьОповещениеПользователя("Трудозатраты", 
			ПолучитьНавигационнуюСсылку(ПолучитьФорму("Документ.Задание.Форма.ФормаДокумента")), ТекстСообщения,
			БиблиотекаКартинок.сстЧасы);
		#Иначе
			ПоказатьОповещениеПользователя("Трудозатраты", ПолучитьНавигационнуюСсылку(ЭтаФорма), ТекстСообщения,
			БиблиотекаКартинок.сстЧасы);
		#КонецЕсли
		ВключитьТрудозатраты();
	Иначе
		ДобавитьТрудозатратыПользователю(Ложь);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура Наблюдатели(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если Объект.Наблюдатели.Количество() > 0 Тогда
		МассивНаблюдателей = Новый Массив;
		Для Каждого СтрокаНаблюдатель Из Объект.Наблюдатели Цикл
			СтруктураСтрока = Новый Структура("НомерСтроки, Адресат");
			ЗаполнитьЗначенияСвойств(СтруктураСтрока, СтрокаНаблюдатель);
			МассивНаблюдателей.Добавить(СтруктураСтрока);
		КонецЦикла;
		ПараметрыФормы.Вставить("МассивНаблюдателей", МассивНаблюдателей);
	КонецЕсли;
	ПараметрыФормы.Вставить("Объект", Объект);
	ПараметрыФормы.Вставить("ТолькоПросмотрФормы", ТолькоПросмотр);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияСпискаНаблюдателей", ЭтотОбъект);
	ОткрытьФорму("Документ.Задание.Форма.ФормаНаблюдатели", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыЗадания(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектСсылка", Объект.Ссылка);
	ОткрытьФорму("Документ.Задание.Форма.ФормаЭтапыЗадания", ПараметрыФормы, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
    
&НаКлиенте
Процедура Исполнители(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектСсылка", Объект.Ссылка);
	Обработчик = Новый ОписаниеОповещения("ВыбратьИсполнителяФормаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.Задание.Форма.ФормаИсполнителейЗадания", ПараметрыФормы, ЭтотОбъект,,,,Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);   
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВЗадании(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Вложения.Видимость = Не Элементы.Вложения.Видимость;
	Иначе
		ПереходПрисоединенныеФайлыФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодчиненныеЗадания(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы.Вставить("ОбъектСсылка", Объект.Ссылка);
	КонецЕсли;
	ОткрытьФорму("Документ.Задание.Форма.ФормаПодчиненныеЗадания", ПараметрыФормы, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСнятьЗаданиеНаИсполнение(Команда)
	
	Если ТрудозатратыВключены Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОстановитьТрудозатраты", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Авторасчет тудозатрат будет остановлен. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПослеВопросаОстановитьТрудозатратыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОстановитьТрудозатраты(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПослеВопросаОстановитьТрудозатратыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОстановитьТрудозатратыФрагмент()
		
	Если ТрудозатратыВключены Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			Если Не ЗаписатьДокументНаСервере(Истина) Тогда
				Если Не ЗаписатьДокументНаСервере(Ложь) Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось записать документ.'"));
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОстановитьТрудозатратыОписаниеОповещения", 
			ЭтотОбъект);
		ДобавитьТрудозатратыПользователю(Ложь, ОписаниеОповещения);
		
	Иначе
		
		ПослеВопросаОстановитьТрудозатратыОписаниеОповещения(Неопределено, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОстановитьТрудозатратыОписаниеОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Объект.ТекущийИсполнитель = ПользователиКлиент.ТекущийПользователь() Тогда		
		Объект.ТекущийИсполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	Иначе
		Объект.ТекущийИсполнитель = ПользователиКлиент.ТекущийПользователь();
	КонецЕсли;
	ВыбратьИсполнителяФормаЗавершение(Объект.ТекущийИсполнитель, Неопределено);
	
	ОбновитьВыборИсполнителя();

КонецПроцедуры	

&НаКлиенте
Процедура Основания(Команда)
	
	ПараметрыФормы 		= Новый Структура;
	Если Объект.Основания.Количество() > 0 Тогда
		МассивОснований = ЗаполнитьМассивОснованийНаСервере();
		ПараметрыФормы.Вставить("МассивОснований", МассивОснований);
	КонецЕсли;
	ПараметрыФормы.Вставить("Объект", Объект);
	ПараметрыФормы.Вставить("ТолькоПросмотрФормы",  ТолькоПросмотр);
	ОписаниеОповещения  = Новый ОписаниеОповещения("ПослеЗакрытияСпискаОснований", ЭтотОбъект);
	ОткрытьФорму("Документ.Задание.Форма.ФормаПредметыЗадания", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьМассивОснованийНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	МассивОснований = Новый Массив;
	Для Каждого СтрокаОснование Из Объект.Основания Цикл
		МассивОснований.Добавить(СтрокаОснование.Основание);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивОснований;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОснованияНаСервере(МассивОснований)
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаМассива Из МассивОснований Цикл
		СтрокаОснование = Объект.Основания.Добавить();
		СтрокаОснование.Основание = СтрокаМассива;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗакрытияСпискаОснований(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Основания.Очистить();
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьОснованияНаСервере(Результат);
	КонецЕсли;
	
	Модифицированность = Истина;
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьЗадание(Команда)	
	
	Если Объект.Ссылка.Пустая() Тогда		
	ТекстВопроса =
		НСтр("ru = 'Задание еще не записано.
			|Подсветить задание можно только после записи задания.
			|Записать и подсветить задание?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПодсветитьЗаданиеЗавершение", ЭтотОбъект),
			ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПодсветитьЗаданиеФрагмент();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодсветитьЗаданиеФрагмент()
	
	Элементы.ФормаПодсветитьЗадание.Пометка = НЕ Элементы.ФормаПодсветитьЗадание.Пометка;
	УстановитьПодсветкуНаСервере(Элементы.ФормаПодсветитьЗадание.Пометка);  	
	Оповестить("ИзмениласьОтметкаПодсветка");
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодсветитьЗаданиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаписатьДокументНаСервере(Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ПодсветитьЗаданиеФрагмент();
	
КонецПроцедуры	

&НаКлиенте
Процедура Отметка(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 		
		ТекстВопроса =
		НСтр("ru = 'Задание еще не записано.
			|Установить отметку можно только после записи задания.
			|Записать задание и установить отметку?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьОтметкуЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	УстановитьОтметкуФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаписатьДокументНаСервере(Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтметкуФрагмент();
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьОтметкуФрагмент()
	
	СписокОтметок = Новый СписокЗначений;
	СписокОтметок.Добавить("ОтметкаЧерная",  НСтр("ru = 'Отметка: черная'"), ,  БиблиотекаКартинок.КнопкаЧерная);
	СписокОтметок.Добавить("ОтметкаСиняя",   НСтр("ru = 'Отметка: синяя'"), ,   БиблиотекаКартинок.КнопкаСиняя);
	СписокОтметок.Добавить("ОтметкаЗеленая", НСтр("ru = 'Отметка: зеленая'"), , БиблиотекаКартинок.КнопкаЗеленая);
	СписокОтметок.Добавить("ОтметкаКрасная", НСтр("ru = 'Отметка: красная'"), , БиблиотекаКартинок.КнопкаКрасная);
	СписокОтметок.Добавить("ОтметкаЖелтая",  НСтр("ru = 'Отметка: желтая'"), ,  БиблиотекаКартинок.КнопкаЖелтая);
	СписокОтметок.Добавить("Очистить",		 НСтр("ru = 'Очистить'"));
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("УстановитьОтметкуВыборИзМеню", ЭтотОбъект), СписокОтметок,
		Элементы.ОтметкаКнопка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуВыборИзМеню(Результат, ДополнительныеПараметры) Экспорт
	
	ОтметкаДоИзменения = ОтметкаКнопка;
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Результат.Значение = "ОтметкаЧерная" Тогда
		
		УстановитьОтметкуНаСервере(ПредопределенноеЗначение("Перечисление.ОтметкиОбъектов.Черная"),
			БиблиотекаКартинок.КнопкаЧерная);
		
	ИначеЕсли Результат.Значение = "ОтметкаСиняя" Тогда
		
		УстановитьОтметкуНаСервере(ПредопределенноеЗначение("Перечисление.ОтметкиОбъектов.Синяя"),
			БиблиотекаКартинок.КнопкаСиняя);
		
	ИначеЕсли Результат.Значение = "ОтметкаЗеленая" Тогда
		
		УстановитьОтметкуНаСервере(ПредопределенноеЗначение("Перечисление.ОтметкиОбъектов.Зеленая"),
			БиблиотекаКартинок.КнопкаЗеленая);
		
	ИначеЕсли Результат.Значение = "ОтметкаКрасная" Тогда	
		
		УстановитьОтметкуНаСервере(ПредопределенноеЗначение("Перечисление.ОтметкиОбъектов.Красная"),
			БиблиотекаКартинок.КнопкаКрасная);
		
	ИначеЕсли Результат.Значение = "ОтметкаЖелтая" Тогда
		
		УстановитьОтметкуНаСервере(ПредопределенноеЗначение("Перечисление.ОтметкиОбъектов.Желтая"),
			БиблиотекаКартинок.КнопкаЖелтая);
		
	ИначеЕсли Результат.Значение = "Очистить" Тогда	
		
		УстановитьОтметкуНаСервере(ПредопределенноеЗначение("Перечисление.ОтметкиОбъектов.ПустаяСсылка"),
			БиблиотекаКартинок.КнопкаЧерная);

	КонецЕсли;
	
	Если ОтметкаКнопка <> ОтметкаДоИзменения Тогда
		Оповестить("ИзмениласьОтметкаПодсветка");
	КонецЕсли;
	
КонецПроцедуры

#Область Трудозатраты

&НаКлиенте
Процедура ТрудозатратыСтоп(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаЗаписиЗаданияТрудозатратЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Задание будет записано. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВключитьТрудозатратыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыСтарт(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаЗаписиЗаданияТрудозатратЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Задание будет записано. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВключитьТрудозатратыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыУказатьТрудозатраты(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаЗаписиЗаданияУказатьТрудозатратыЗавершение", 
			ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Задание будет записано. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	УказатьТрудозатратыФрагмент();
	
КонецПроцедуры

#КонецОбласти

//@skip-warning
&НаКлиенте
Процедура ИсполнительНеВыбран(Команда)
	
	Если НЕ ПроверитьПравоСменыИсполнителя() Тогда
		Возврат;
	КонецЕсли;
	
	// Добавляем новый в таблицу Этапы запись, что для данного этапа выбран Исполнитель.
	Объект.ТекущийИсполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	
	ОбновитьВыборИсполнителя();
	ОбновитьВидимость();
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПереходСТекущегоЭтапаНеВозможен(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПереходСТекущегоЭтапаНеВозможенЗавершение", ЭтотОбъект);
	Структура = Новый Структура("Ключ", Объект.Процесс);
	ОткрытьФорму("Справочник.Процессы.Форма.ФормаЭлемента", Структура, ЭтаФорма,,,,
		ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходСТекущегоЭтапаНеВозможенЗавершение(Результат,ДополнительныеПараметры) Экспорт
	
	Прочитать();
	ОбновитьДоступностьРедактирования();
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПеревестиНаЭтап(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать задание.'"));
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ТекПользователь = Неопределено;
	Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ТекПользователь) Тогда
		ПоказатьПредупреждение(,
			СтрШаблон(НСтр("ru = 'Исполнителем по данному заданию является %1.
                            |Сменить этап имеет право только он сам или его руководители.'"),
				ТекПользователь),
				180,
				НСтр("ru = 'Нельзя сменить этап задания'"));
		Возврат;
	КонецЕсли;
	
	// Проверка, что текущий этап подпроцесс и он не выполнен.
	ЗаданиеСтруктура = Новый Структура;
	ЗаданиеСтруктура.Вставить("ТекущийЭтап", Объект.ТекущийЭтап);
	ЗаданиеСтруктура.Вставить("Ссылка", 	 Объект.Ссылка);
	Если НЕ ЗаданияСервер.ВыполненПодпроцесс(ЗаданиеСтруктура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Текущий этап - подпроцесс. 
                  |Для его выполнения необходимо запустить и выполнить подпроцесс (кнопка с синим треугольником на форме).
                  |После этого можно перейти на другой этап.'"));
		Возврат;
	КонецЕсли;
	
	СтруктураЭтапа		= ЗаданияСервер.ПолучитьСтруктуруЭтапаПоИмениКоманды(Команда.Имя);
	Если СтруктураЭтапа = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Этап не найден'"));
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = ЗначенияРеквизитовЗадания();
	СтруктураРеквизитов.Вставить("Источник",       УникальныйИдентификатор);
	СтруктураРеквизитов.Вставить("НовыйЭтап",      СтруктураЭтапа.Этап);
	СтруктураРеквизитов.Вставить("ПереданаСсылка", Ложь);
	СтруктураРеквизитов.Вставить("ЗаписатьОбъект", Ложь);
	Результат 			= ЗаданияКлиент.ПеревестиЗаданиеНаЭтап(Объект, СтруктураРеквизитов);
	Если Не Результат.ВыполненПеревод Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Выполнено = (ПолучитьРеквизитЭтапа(СтруктураЭтапа.Этап, "СостояниеЭтапа") 
		= ПредопределенноеЗначение("Перечисление.СостоянияЭтаповПроцесса.Выполнен"))
		ИЛИ	(ПолучитьРеквизитЭтапа(СтруктураЭтапа.Этап, "СостояниеЭтапа") 
			= ПредопределенноеЗначение("Перечисление.СостоянияЭтаповПроцесса.Закрыт"));
	
	Если НЕ Объект.Выполнено Тогда
		Объект.Завершено    = Ложь;
	КонецЕсли;
		
	// Обновляем все на форме.
	ОбновитьПереводНаЭтапы();
	ОбновитьДоступностьРедактирования();
	Модифицированность = Истина;
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДействий_КарточкаНоменклатуры(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КарточкаНоменклатуры) Тогда
		Ошибки = Неопределено;
		Отказ = Ложь;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.КарточкаНоменклатуры",
			НСтр("ru = 'Укажите карточку номенклатуры'"), НСтр("ru = 'Ошибки'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		Возврат;
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	Список.Добавить("ИсторияПоМестамХраненияКарточкаНоменклатуры", НСтр("ru = 'История по местам хранения'"),, 
		БиблиотекаКартинок.ИсторияИзменений);
	Список.Добавить("ИсторияПоОтветственнымСотрудникамКарточкаНоменклатуры", 
		НСтр("ru = 'История по ответственным сотрудникам'"),,БиблиотекаКартинок.ИсторияВерсий);
	Список.Добавить("ОстаткиКарточкаНоменклатуры", НСтр("ru = 'Остатки'"), , БиблиотекаКартинок.Отчеты);
	Список.Добавить("СписокОбращенийКарточкаНоменклатуры", НСтр("ru = 'Список обращений'"), , 
		БиблиотекаКартинок.сстСписок);
	
	Список.СортироватьПоПредставлению();
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОткрытьСписокДействийЗавершение", ЭтаФорма), Список,
		Элементы[Команда.Имя]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДействий_МестоХранения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.МестоХранения) Тогда
		Ошибки = Неопределено;
		Отказ = Ложь;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.МестоХранения",
			НСтр("ru = 'Укажите место хранения'"), НСтр("ru = 'Ошибки'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		Возврат;
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	Если ПроверкаРолиЛогиныИПароли() Тогда
		Список.Добавить("ЛогиныПаролиМестаХранения", НСтр("ru = 'Логины и пароли'"),,
			БиблиотекаКартинок.ВидимостьДопНастроек);
	КонецЕсли;
	Если ПроверкаРолиУдаленноеУправление() Тогда 
		Список.Добавить("УдаленноеУправлениеМестаХранения", НСтр("ru = 'Удаленное управление'"),,
			БиблиотекаКартинок.RemoteManipulatorSystem);
	КонецЕсли;
	Список.Добавить("СписокОбращенийМестаХранения", НСтр("ru = 'Список обращений'"), , БиблиотекаКартинок.сстСписок);
	Список.Добавить("ОстаткиМестаХранения", НСтр("ru = 'Остатки'"), , БиблиотекаКартинок.Отчеты);

	Список.СортироватьПоПредставлению();
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОткрытьСписокДействийЗавершение", ЭтаФорма), Список,
		Элементы[Команда.Имя]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДействий_Инициатор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Инициатор) Тогда
		Ошибки = Неопределено;
		Отказ = Ложь;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.Инициатор", 
			НСтр("ru = 'Укажите инициатора'"), НСтр("ru = 'Ошибки'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		Возврат;
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	Если ПроверкаРолиЛогиныИПароли() Тогда
		Список.Добавить("ЛогиныПаролиИнициатор", НСтр("ru = 'Логины и пароли'"), , 
			БиблиотекаКартинок.ВидимостьДопНастроек);
	КонецЕсли;
	Список.Добавить("СписокОбращенийИнициатор", НСтр("ru = 'Список обращений'"), , БиблиотекаКартинок.сстСписок);
	Если ПроверкаРолиУдаленноеУправление() Тогда 
		Список.Добавить("УдаленноеУправлениеИнициатор", НСтр("ru = 'Удаленное управление'"),,
			БиблиотекаКартинок.RemoteManipulatorSystem);
	КонецЕсли;
	Список.Добавить("ОстаткиИнициатор", НСтр("ru = 'Остатки'"), , БиблиотекаКартинок.Отчеты);
	
	Список.СортироватьПоПредставлению();
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОткрытьСписокДействийЗавершение", ЭтаФорма), Список, 
		Элементы[Команда.Имя]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДействийЗавершение(Результат, Доп) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Место хранения.
	Если Результат.Значение = "ЛогиныПаролиМестаХранения" Тогда
		
		Отбор = Новый Структура("Объект", Объект.МестоХранения);
		ОткрытьФорму("Справочник.ЛогиныИПароли.ФормаСписка", Отбор, ЭтотОбъект);
		
	ИначеЕсли Результат.Значение = "УдаленноеУправлениеМестаХранения" Тогда
		
		Отбор = Новый Структура("Объект", Объект.МестоХранения);
		ОткрытьФорму("Справочник.УдаленноеУправление.ФормаСписка", Отбор, ЭтаФорма);
		
	ИначеЕсли Результат.Значение = "СписокОбращенийМестаХранения" Тогда		
		
		СтруктураОтбора = Новый Структура("МестоХранения", Объект.МестоХранения);
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("СтруктураОтборов", СтруктураОтбора);
		ПараметрыФормы.Вставить("ПрименитьОтборыПриЗагрузкеФормы", Истина);
		Форма 			= ПолучитьФорму("Документ.Задание.ФормаСписка", , , Истина);
		Если Форма.Открыта() Тогда
			Оповестить("Задание_ФормаСписка_УстановитьОтбор", ПараметрыФормы, ЭтаФорма);
			Форма.Активизировать();
		Иначе
			ОткрытьФорму("Документ.Задание.ФормаСписка", ПараметрыФормы, , Истина);
		КонецЕсли;
		
	ИначеЕсли Результат.Значение = "ОстаткиМестаХранения" Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Объект.МестоХранения);
		
		ОткрытьФорму("Отчет.ОстаткиНаСкладах.Форма",
			Новый Структура("КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии", Массив,
			Новый Структура("МестоХранения", Объект.МестоХранения), Истина));
		
	// Инициатор.
	ИначеЕсли Результат.Значение = "ЛогиныПаролиИнициатор" Тогда
		
		Отбор = Новый Структура("Объект", Объект.Инициатор);
		ОткрытьФорму("Справочник.ЛогиныИПароли.ФормаСписка", Отбор, ЭтотОбъект);
		
	ИначеЕсли Результат.Значение = "СписокОбращенийИнициатор" Тогда		
		
		СтруктураОтбора = Новый Структура("Инициатор", Объект.Инициатор);
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("СтруктураОтборов", СтруктураОтбора);
		ПараметрыФормы.Вставить("ПрименитьОтборыПриЗагрузкеФормы", Истина);

		Форма = ПолучитьФорму("Документ.Задание.ФормаСписка", , , Истина);
		Если Форма.Открыта() Тогда
			Оповестить("Задание_ФормаСписка_УстановитьОтбор", ПараметрыФормы, ЭтаФорма);
			Форма.Активизировать();
		Иначе
			ОткрытьФорму("Документ.Задание.ФормаСписка", ПараметрыФормы, , Истина);
		КонецЕсли;
		
	ИначеЕсли Результат.Значение = "УдаленноеУправлениеИнициатор" Тогда
		
		Отбор = Новый Структура("Объект", Объект.Инициатор);
		ОткрытьФорму("Справочник.УдаленноеУправление.ФормаСписка", Отбор, ЭтаФорма);
				
	ИначеЕсли Результат.Значение = "ОстаткиИнициатор" Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Объект.Инициатор);
		
		ОткрытьФорму("Отчет.ОстаткиНаСкладах.Форма",
			Новый Структура("КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии", Массив, 
			Новый Структура("МестоХранения", Объект.Инициатор), Истина));
					
	// Карточка номенклатуры.
	ИначеЕсли Результат.Значение = "ИсторияПоМестамХраненияКарточкаНоменклатуры" Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Объект.КарточкаНоменклатуры);
		
		ОткрытьФорму("Отчет.ИсторияКарточкиНоменклатурыПоМестамХранения.Форма",
			Новый Структура("КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии", Массив,
			Новый Структура("Номенклатура", Объект.КарточкаНоменклатуры), Истина),, "Номенклатура=" 
				+ Объект.КарточкаНоменклатуры);
		
	ИначеЕсли Результат.Значение = "ИсторияПоОтветственнымСотрудникамКарточкаНоменклатуры" Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Объект.КарточкаНоменклатуры);
		
		ОткрытьФорму("Отчет.ИсторияКарточкиНоменклатурыПоОтветственным.Форма",
			Новый Структура("КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии", Массив,
			Новый Структура("Номенклатура", Объект.КарточкаНоменклатуры), Истина),, "Номенклатура=" 
				+ Объект.КарточкаНоменклатуры);
			
	ИначеЕсли Результат.Значение = "ОстаткиКарточкаНоменклатуры" Тогда
		
		Номенклатура = ВычислитьКод("Объект.КарточкаНоменклатуры.Владелец");
		Массив = Новый Массив;    
		Массив.Добавить(Номенклатура);
		
		ОткрытьФорму("Отчет.ОстаткиНаСкладах.Форма",
			Новый Структура("КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии", Массив,
			Новый Структура("Номенклатура", Номенклатура), Истина),, "Номенклатура=" + Номенклатура);
			
	ИначеЕсли Результат.Значение = "СписокОбращенийКарточкаНоменклатуры" Тогда
		
		СтруктураОтборов	= Новый Структура("КарточкаНоменклатуры", Объект.КарточкаНоменклатуры);
		ПараметрыФормы		= Новый Структура;
		ПараметрыФормы.Вставить("СтруктураОтборов", СтруктураОтборов);
		ПараметрыФормы.Вставить("ПрименитьОтборыПриЗагрузкеФормы", Истина);

		Форма = ПолучитьФорму("Документ.Задание.ФормаСписка", , , Истина);
		Если Форма.Открыта() Тогда
			Оповестить("Задание_ФормаСписка_УстановитьОтбор", ПараметрыФормы, ЭтаФорма);
			Форма.Активизировать();
		Иначе
			ОткрытьФорму("Документ.Задание.ФормаСписка", ПараметрыФормы, , Истина);
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Проблемы(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы.Вставить("ОбъектСсылка", Объект.Ссылка);
	КонецЕсли;
	ОткрытьФорму("Документ.Задание.Форма.ФормаПроблемы", ПараметрыФормы, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Работа с вложениями.
//
&НаКлиенте
Процедура ДобавитьВложение(Команда)
	
	#Если Не ВебКлиент Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.МножественныйВыбор = Истина;
		ОписаниеОповещение        = Новый ОписаниеОповещения("ДиалогВыбораФайловПослеВыбора", ЭтотОбъект);
		Диалог.Показать(ОписаниеОповещение);
		
	#Иначе

		Адрес         = "";
		ВыбранныйФайл = "";
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ПомещениеФайлаПриОкончании", ЭтотОбъект);
		НачатьПомещениеФайла(ОбработчикОповещенияОЗакрытии, Адрес, ВыбранныйФайл, Истина, УникальныйИдентификатор);
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда
		
		Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Ссылка, ПараметрыВложения(), ЭтотОбъект);
		Иначе
			УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка, ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
		ПутьКФайлу = ТекущиеДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			
			Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
				
				Попытка					
					Данные = Новый ДвоичныеДанные(ТекущиеДанные.ИмяФайлаНаКомпьютере);
					ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ПоместитьВоВременноеХранилище(Данные, 
						УникальныйИдентификатор), ПараметрыВложения(), ЭтотОбъект);
				Исключение
					ФайловаяСистемаКлиент.ЗапуститьПрограмму("""" + ПутьКФайлу + """");
				КонецПопытки;
			Иначе
				ФайловаяСистемаКлиент.ЗапуститьПрограмму("""" + ПутьКФайлу + """");
			КонецЕсли;
			
		#Иначе
			ПолучитьФайл(ПутьКФайлу, ТекущиеДанные.ИмяФайла, Истина);
		#КонецЕсли
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		
		ПутьКФайлу = ТекущиеДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ИмяФайлаНаКомпьютере) Тогда
				ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
				СоздатьКаталог(ИмяВременнойПапки);
				ПутьКФайлу = ИмяВременнойПапки + "\" + ТекущиеДанные.ИмяФайла;
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ТекущиеДанные.ИмяФайлаНаКомпьютере);
				ДвоичныеДанные.Записать(ПутьКФайлу);
			КонецЕсли;
			ФайловаяСистемаКлиент.ЗапуститьПрограмму("""" + ПутьКФайлу + """");
		#Иначе
			ПолучитьФайл(ПутьКФайлу, ТекущиеДанные.ИмяФайла, Истина);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзФормы(Команда)
	
	Записать(Новый Структура("РежимЗаписи, ОбновлятьФорму", РежимЗаписиДокумента.Проведение, Истина));
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Структура = Новый Структура;
	Структура.Вставить("ТипШаблона", ПредопределенноеЗначение("Перечисление.ТипыШаблоновЗаданий.РучноеЗаполнение"));
	Структура.Вставить("Активность", Истина);
	ОткрытьФорму("Справочник.ШаблоныЗаданий.ФормаВыбора",Структура,,,,,
		Новый ОписаниеОповещения("ЗаполнитьПоШаблонуЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ЗаполнитьПоШаблонуНаСервере(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереносПерепискиИзДругойЗадачи(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Попытка
			ЭтотОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось записать задание'"));
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ОткрытьФорму("Документ.Задание.Форма.ПереносПерепискиИзДругойЗадачи", , ЭтаФорма,,,,
		Новый ОписаниеОповещения("ПереносПерепискиИзДругойЗадачиЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереносПерепискиИзДругойЗадачиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда		
		Если Результат.Задание = Объект.Ссылка Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать текущее задание для переноса'"));
			Возврат;
		КонецЕсли;
		
		РезультатПереноса = ЗаданияСервер.ПеренестиПерепискуПоЗаданию(Объект.Ссылка, Результат);
		Если РезультатПереноса.Свойство("Наблюдатели") Тогда
			Для Каждого Адресат Из РезультатПереноса.Наблюдатели Цикл
				НоваяСтрока = Объект.Наблюдатели.Добавить();
				НоваяСтрока.Адресат = Адресат;
			КонецЦикла;
			Если РезультатПереноса.Наблюдатели.Количество() > 0 Тогда
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьВидимость();
		ВывестиКомментарии();
		ОбновитьЗаголовокКомментариев();
		ОбновитьЗаголовокФайлы();
		ОбновитьНаблюдателей();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВДокументЗаказПоставщику(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеВопросаЗаписиЗаданияДобавитьВДокументЗаказПоставщикуЗавершение", 
			ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Задание будет записано. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ДобавитьВДокументЗаказПоставщикуФрагмент();
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаписиЗаданияДобавитьВДокументЗаказПоставщикуЗавершение(Результат,
	ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаписатьДокументНаСервере(Истина) Тогда
		Если Не ЗаписатьДокументНаСервере(Ложь) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьВДокументЗаказПоставщикуФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВДокументЗаказПоставщикуФрагмент()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораДокументаЗаказПоставщику", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаВыбора", , ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДокументаЗаказПоставщику(Результат, ДополнительныеПараметры) Экспорт 
	
	Структура = Новый Структура("Ключ, Документ", Результат, Объект.Ссылка);
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", Структура, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)

	Идентификатор 		= Строка(УникальныйИдентификаторОбъекта());	
	АдресСсылкиСоздать	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_create("comment",
		Новый Структура("article", Идентификатор));
	ДанныеСобытия = Новый Структура("HRef", АдресСсылкиСоздать);	

	ДополнительныеПараметрыФормы  = Новый Структура;
	ТребуетсяЗапись = Объект.Ссылка.Пустая();
	ДополнительныеПараметрыФормы.Вставить("ТребуетсяЗапись", ТребуетсяЗапись);	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОбработкиНажатияКомментарииПолеHTML", ЭтотОбъект);
	КомментарииКлиент.КомментарииПолеHTMLПриНажатии(ДанныеСобытия, ОписаниеОповещения, ЭтаФорма,
		ДополнительныеПараметрыФормы);		

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура ОбновитьВидимость()
	
	УстановитьВидимостьДоступность();
	
	мПользователиТекущийПользователь	= Пользователи.ТекущийПользователь();
	мАвтор								= Объект.Автор;
	мПравоИзмененияИсполнителя 			= ЗаданияСервер.ПравоРедактированияТекущийПользователь(Объект);
	
	Элементы.ФормаНаКонтроль.Пометка 	= Ложь;
	Элементы.ФормаЗапуститьПодпроцесс.Видимость = ТипЗнч(Объект.ТекущийЭтап) = Тип("СправочникСсылка.Процессы");
	
	// Заполняем сколько наблюдателей есть.			
	ЗаголовокНаблюдатели			= НСтр("ru = 'Наблюдатели'");
	КомандаНаблюдатели 			    = Команды.Найти("Наблюдатели");
	КомандаНаблюдатели.Подсказка 	= "";
	Если Объект.Наблюдатели.Количество() > 0 Тогда		
		ЗаголовокНаблюдатели = ЗаголовокНаблюдатели + " (" + Объект.Наблюдатели.Количество() + ")";
		Для Каждого Строки Из Объект.Наблюдатели Цикл
			КомандаНаблюдатели.Подсказка = КомандаНаблюдатели.Подсказка + Строка(Строки.Адресат) + Символы.ПС;
			Если Строки.Адресат = мПользователиТекущийПользователь Тогда
				Элементы.ФормаНаКонтроль.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Элементы.Наблюдатели.Заголовок = ЗаголовокНаблюдатели;
	
	Элементы.ФормаСоздатьПодзадачиСотрудникам.Доступность 	= НЕ ТолькоПросмотр;
	Элементы.ДатаЗавершения.Видимость 			= Объект.ДатаЗавершения <> Дата(1, 1, 1) И Объект.Завершено = Истина;
	Элементы.ДатаВыполнения.Видимость 			= Объект.ДатаВыполнения <> Дата(1, 1, 1) И Объект.Выполнено = Истина;
	Элементы.ОценкаВыполнения.ТолькоПросмотр 	= мПользователиТекущийПользователь <> мАвтор;
	Элементы.ОценкаВыполнения.Видимость 		= мПользователиТекущийПользователь = мАвтор 
		ИЛИ (ЗначениеЗаполнено(Объект.ОценкаВыполнения) 
		И Объект.ОценкаВыполнения <> Справочники.ОценкиЗаданий.БезОценки);
	Элементы.УчетнаяЗаписьЭлектроннойПочты.Видимость = 
		Объект.СпособСоздания <> Справочники.СпособыСозданияЗаданий.ЭлектроннаяПочта;
		
	Элементы.РучнаяУстановкаДатВSLA.Видимость				= УправлениеSLA.ДоступноИзменениеДатSLA();
	Элементы.КрайняяДатаВыполнения.ТолькоПросмотр 			= НЕ Элементы.РучнаяУстановкаДатВSLA.Видимость 
		ИЛИ НЕ Объект.РучнаяУстановкаДатВSLA;
	Элементы.КрайняяДатаРеакции.ТолькоПросмотр 				= Элементы.КрайняяДатаВыполнения.ТолькоПросмотр;	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Адресат", мПользователиТекущийПользователь);
	НайденныеСтроки = Объект.Наблюдатели.НайтиСтроки(ПараметрыОтбора);
	Элементы.ФормаИсключитьСебяИзСпискаНаблюдателей.Видимость = НайденныеСтроки.Количество() > 0;
		
	Если ЭтоВебКлиент Тогда
		Элементы.ВставитьКартинкуИзБуфера.Видимость			= Ложь;
		Элементы.ФормаДобавитьСкриншот.Видимость			= Ложь;
	КонецЕсли;
		
	Если мПравоИзмененияИсполнителя = Истина Тогда
		Элементы.ФормаИсключитьСебяИзСпискаНаблюдателей.Доступность	 = Истина;
		Элементы.РежимРедактированияОписания.Доступность	 		 = Истина;
	Иначе 
		Элементы.ФормаИсключитьСебяИзСпискаНаблюдателей.Доступность	 = Ложь;
		Элементы.РежимРедактированияОписания.Доступность	 		 = Ложь;
	КонецЕсли;
	
	Элементы.Теги.ТолькоПросмотр						= ТолькоПросмотр;
	Элементы.ГруппаВремяПоЗаданию.ТолькоПросмотр 		= ТолькоПросмотр;
	Элементы.НазначитьИсполнителяКнопка.Видимость		= НЕ ТолькоПросмотр;
	Элементы.ФормаДобавитьСкриншот.Доступность			= НЕ ТолькоПросмотр;
	Элементы.НазначитьИсполнителя.Доступность			= НЕ ТолькоПросмотр;
	Элементы.ФормаОбъединитьЗадачи.Доступность			= НЕ ТолькоПросмотр;
	Элементы.ФормаЗаписатьИзФормы.Доступность			= НЕ ТолькоПросмотр;
	Элементы.ГруппаКнопкиТрудозатраты.Доступность		= НЕ ТолькоПросмотр;
	Элементы.ВыбранныеТеги.Доступность					= НЕ ТолькоПросмотр;
	Элементы.ГруппаПереводНаЭтап.Доступность			= НЕ ТолькоПросмотр;
	
	ОбновитьЗаголовокЧекЛиста();
	ОбновитьЗаголовокОснования();
	ОбновитьЗаголовокКомментариев();
	ОбновитьЗаголовокФайлы();
	ОбновитьЗаголовокПодзадачи();
	ОбновитьЗаголовокПроблемы();
	ОбновитьВидимостьУслугаНедоступна();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокЧекЛиста()
	
	ЗаголовокЧекЛист = "";
	Если НЕ Объект.Ссылка.Пустая() И Объект.ЧекЛист.Количество() > 0 Тогда
		ЗаголовокЧекЛист = СтрШаблон(
			НСтр("ru = '%1 из %2'"), 
			Объект.ЧекЛист.НайтиСтроки(Новый Структура("Выполнено", Истина)).Количество(),
			Объект.ЧекЛист.Количество());
	КонецЕсли;
	
	ПроцентВыполненияВид = ?(Объект.ЧекЛист.Количество() > 0, ВидПоляФормы.ПолеНадписи, ВидПоляФормы.ПолеВвода);
	Если Элементы.ПроцентВыполнения.Вид <> ПроцентВыполненияВид Тогда
		
		Элементы.ПроцентВыполнения.Вид = ПроцентВыполненияВид;
		Элементы.ПроцентВыполнения.ОтображениеПодсказки = 
			?(ПроцентВыполненияВид = ВидПоляФормы.ПолеНадписи, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Авто);
		Элементы.ПроцентВыполнения.Подсказка = 
			?(ПроцентВыполненияВид = ВидПоляФормы.ПолеНадписи, 
			НСтр("ru = 'Процент выполнения задания подсчитывается автоматически по пунктам чек-листа.
                  |Процент можно изменить вручную только если чек-лист пуст.'"),
			НСтр("ru = 'Процент выполнения задания устанавливается вручную.'"));
			
		Если ПроцентВыполненияВид = ВидПоляФормы.ПолеВвода Тогда
			Элементы.ПроцентВыполнения.КнопкаОчистки 			= Истина;
			Элементы.ПроцентВыполнения.КнопкаВыпадающегоСписка 	= Истина;
			Элементы.ПроцентВыполнения.СписокВыбора.Очистить();
			Процент = 0;
			Пока Процент < 100 Цикл
				Элементы.ПроцентВыполнения.СписокВыбора.Добавить(Процент, Строка(Процент) + "%");
				Процент = Процент + 10;
			КонецЦикла;
		Иначе
			Элементы.ПроцентВыполнения.Формат = "ЧН=0";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроцентВыполненияВид = ВидПоляФормы.ПолеНадписи Тогда
		
		ОбщийВес 		= 0;
		ВыполненоВес 	= 0;
		Для Каждого СтрокаЧекЛиста Из Объект.ЧекЛист Цикл
			ОбщийВес 		= ОбщийВес + ?(СтрокаЧекЛиста.Вес > 1, СтрокаЧекЛиста.Вес, 1);
			ВыполненоВес 	= ВыполненоВес 
				+ ?(СтрокаЧекЛиста.Выполнено, ?(СтрокаЧекЛиста.Вес > 1, СтрокаЧекЛиста.Вес, 1), 0);
		КонецЦикла;
		Если Объект.ЧекЛист.Количество() <> 0 И ОбщийВес <> 0 Тогда
			Объект.ПроцентВыполнения = Окр(ВыполненоВес * 100 / ОбщийВес);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокОснования()
	
	ЗаголовокОснования = НСтр("ru = 'Основания'");
	Если Объект.Основания.Количество() > 0 Тогда
		ЗаголовокОснования = ЗаголовокОснования + " (" + Объект.Основания.Количество() + ")";
	КонецЕсли;
	Элементы.Основания1.Заголовок = ЗаголовокОснования;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокКомментариев()
	
	КоличествоКомментариев = ?(Объект.Ссылка.Пустая(), 0, Комментарии.КоличествоКомментариев(Объект.Ссылка));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФайлы()
	
	ЗаголовокФайлыВЗадании = НСтр("ru = 'Файлы'");
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		// Заполняем сколько файлов прикреплено.
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(*) КАК КоличествоФайлов
			|ИЗ
			|	Справочник.ЗаданиеПрисоединенныеФайлы КАК Файлы
			|ГДЕ
			|	Файлы.ВладелецФайла = &ВладелецФайла
			|	И Файлы.ИДФайлаЭлектронногоПисьма = """"
			|	И Файлы.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();	
		Если Выборка.Следующий() Тогда
			Если Выборка.КоличествоФайлов > 0 Тогда
				ЗаголовокФайлыВЗадании = ЗаголовокФайлыВЗадании + " (" + Строка(Выборка.КоличествоФайлов) + ")";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ФайлыВЗадании.Заголовок = ЗаголовокФайлыВЗадании;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокПодзадачи()
	
	ЗаголовокПодчиненныеЗадания = НСтр("ru = 'Подзадачи'");
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Задание.Ссылка КАК Задание
			|ИЗ
			|	Документ.Задание КАК Задание
			|ГДЕ
			|	Задание.Родитель = &Родитель
			|	И НЕ Задание.ПометкаУдаления
			|	И (&ДоступностьРолиПросмотраЧужихЗаданий
			|			ИЛИ &ДоступностьРолиПолныеПрава
			|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
			|				И ВЫБОР
			|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
			|						ТОГДА ИСТИНА
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))";		
		
		ТекПользователь = Пользователи.ТекущийПользователь();
		Запрос.УстановитьПараметр("ТекущийПользователь",
			ТекПользователь);
		Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий",
			УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий",
			УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава",
			УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
		Запрос.УстановитьПараметр("Родитель",
			Объект.Ссылка);
		Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",
			УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Количество() > 0 Тогда
			ЗаголовокПодчиненныеЗадания = ЗаголовокПодчиненныеЗадания + " (" + Результат.Количество() + ")";
		КонецЕсли;	
		
	КонецЕсли;
	
	Элементы.ПодчиненныеЗадания1.Заголовок = ЗаголовокПодчиненныеЗадания;

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокПроблемы()
	
	ЗаголовокПроблемы  = НСтр("ru = 'Проблемы'");
	Если НЕ Объект.Ссылка.Пустая() Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(*) КАК КоличествоПроблем
			|ИЗ
			|	Документ.Проблема.Задания КАК ПроблемаЗадания
			|ГДЕ
			|	ПроблемаЗадания.Задание = &Задание";
		
		Запрос.УстановитьПараметр("Задание", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.КоличествоПроблем > 0 Тогда
				ЗаголовокПроблемы = ЗаголовокПроблемы + " (" + Строка(Выборка.КоличествоПроблем) + ")";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Проблемы1.Заголовок = ЗаголовокПроблемы;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьПереводНаЭтапы() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Процесс) Тогда
		Элементы.ГруппаПеревестиНаЭтап.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТекущийЭтап) Тогда
		Объект.ТекущийЭтап = Справочники.ЭтапыПроцессов.Новый;
	КонецЕсли;
	
	мОбъектТекущийЭтап 		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ТекущийЭтап, 
		"Ссылка,Картинка,Наименование,СостояниеЭтапа"
		+ ?(ТипЗнч(Объект.ТекущийЭтап) = Тип("СправочникСсылка.ЭтапыПроцессов"), ",ЦветФона,ЦветТекста", ""));
	
	мWebЦветаБелый 			= WebЦвета.Белый;
	мWebЦветаЧерный 		= WebЦвета.Черный;
	мКартинка				= БиблиотекаКартинок.сстВыполнение;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПроцессыЭтапыПроцесса.КонечныйЭтап.Код КАК КодЭтапа,
		|	ПроцессыЭтапыПроцесса.КонечныйЭтап КАК Этап,
		|	ВЫБОР
		|		КОГДА ПроцессыЭтапыПроцесса.КонечныйЭтап ССЫЛКА Справочник.ЭтапыПроцессов
		|				И ПроцессыЭтапыПроцесса.КонечныйЭтап.ЗаголовокКнопки <> """"
		|			ТОГДА ПроцессыЭтапыПроцесса.КонечныйЭтап.ЗаголовокКнопки
		|		ИНАЧЕ ПроцессыЭтапыПроцесса.КонечныйЭтап.Наименование
		|	КОНЕЦ КАК НаименованиеЭтапа,
		|	ПроцессыЭтапыПроцесса.КонечныйЭтап.ВидЭтапа КАК ВидЭтапа
		|	
		|ИЗ
		|	Справочник.Процессы.ЭтапыПроцесса КАК ПроцессыЭтапыПроцесса
		|ГДЕ
		|	ПроцессыЭтапыПроцесса.Ссылка = &Процесс
		|	И ПроцессыЭтапыПроцесса.НачальныйЭтап = &НачальныйЭтап
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроцессыЭтапыПроцесса.КонечныйЭтап
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Процесс", Объект.Процесс);
	Запрос.УстановитьПараметр("НачальныйЭтап", мОбъектТекущийЭтап.Ссылка);
	Результат = Запрос.Выполнить();
	
	// Очищаем.
	Для Индекс = 0 По Элементы.ГруппаПеревестиНаЭтап.ПодчиненныеЭлементы.Количество() - 1 Цикл
		Элементы.Удалить(Элементы.ГруппаПеревестиНаЭтап.ПодчиненныеЭлементы.Получить(0));
	КонецЦикла;
	
	// Выводим текущий этап.
	мМассивТекущегоЭтапа = Новый Массив;
	Попытка
		мМассивТекущегоЭтапа.Добавить(Новый ФорматированнаяСтрока(мОбъектТекущийЭтап.Картинка.Получить()));
	Исключение
		мМассивТекущегоЭтапа.Добавить(Новый ФорматированнаяСтрока(мКартинка));
	КонецПопытки;
	Попытка
		Элементы.ГруппаЭтап.ЦветФона 		= РаботаСЦветомКлиентСервер.HexВЦвет(мОбъектТекущийЭтап.ЦветФона);
		мМассивТекущегоЭтапа.Добавить(Новый ФорматированнаяСтрока(" " + мОбъектТекущийЭтап.Наименование, ,
			РаботаСЦветомКлиентСервер.HexВЦвет(мОбъектТекущийЭтап.ЦветТекста)));
	Исключение
		Элементы.ГруппаЭтап.ЦветФона 		= мWebЦветаБелый;
		мМассивТекущегоЭтапа.Добавить(Новый ФорматированнаяСтрока(" " + мОбъектТекущийЭтап.Наименование, ,
			мWebЦветаЧерный));
	КонецПопытки;
	Элементы.НадписьТекущийЭтап.Заголовок 	= Новый ФорматированнаяСтрока(мМассивТекущегоЭтапа);
		
	Если НЕ Результат.Пустой() Тогда
		
		Элементы.ДекорацияПеревестиНаЭтап.Заголовок = НСтр("ru = 'Перевести задание на этап:'");
		
		// Добавляем новые.
		Выборка 			= Результат.Выбрать();
		КоличествоЭтапов 	= Выборка.Количество();
		КнопокПереходов 	= 0;
		Пока Выборка.Следующий() Цикл
			
			Этап			= Выборка.Этап;
			ИмяКоманды		= "Этап_" + Выборка.ВидЭтапа + "_" + СтрЗаменить(Этап.УникальныйИдентификатор(), "-", "");
			Кнопка			= Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.ГруппаПеревестиНаЭтап);
			Кнопка.Доступность = Не ТолькоПросмотр;
			КнопокПереходов = КнопокПереходов + 1;
			
			// для совместимости с разрешением экрана 1024х768.
			Если КнопокПереходов = 3 И КоличествоЭтапов > 3 Тогда 
				
				ИмяКоманды 				= "ЕстьЕщеЭтапы";
				Кнопка					= Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), 
					Элементы.ГруппаПеревестиНаЭтап);
				КомандаЭтапа 			= Команды.Найти(ИмяКоманды);
				Если КомандаЭтапа = Неопределено Тогда
					КомандаЭтапа		= Команды.Добавить(ИмяКоманды);
					КомандаЭтапа.Действие	= "ОткрытьФормуПеревестиНаЭтап"; 
				КонецЕсли;
				КомандаЭтапа.Заголовок	= СтрЗаменить(СтрШаблон(НСтр("ru = 'Все этапы (%1) >>'"), 
					КоличествоЭтапов), " ",	Символы.НПП);
				Кнопка.ИмяКоманды 		= ИмяКоманды;
				Кнопка.Высота 			= 2;
				Кнопка.ВысотаЗаголовка 	= 2;
				Кнопка.Ширина			= 30;
				Кнопка.Доступность		= Не ТолькоПросмотр;
				Прервать;
			КонецЕсли;
			//
			КомандаЭтапа 	= Команды.Найти(ИмяКоманды);
				
			Если КомандаЭтапа = Неопределено Тогда
				
				КомандаЭтапа				= Команды.Добавить(ИмяКоманды);
				КомандаЭтапа.Действие		= "ПеревестиНаЭтап"; 
				КомандаЭтапа.Заголовок		= СтрЗаменить(Выборка.НаименованиеЭтапа, " ", Символы.НПП);
				Попытка
					КомандаЭтапа.Картинка	= Этап.Картинка.Получить();
				Исключение
					КомандаЭтапа.Картинка	= мКартинка;
				КонецПопытки;
				КомандаЭтапа.Отображение 	= ОтображениеКнопки.КартинкаИТекст;
				
			КонецЕсли;
			
			Кнопка.ИмяКоманды 				= ИмяКоманды;
			Кнопка.Высота 					= 2;
			Кнопка.ВысотаЗаголовка 			= 2;
			Кнопка.Ширина					= 30;
			Кнопка.АвтоМаксимальнаяШирина 	= Ложь;
			Попытка
				Если ТипЗнч(Этап) = Тип("СправочникСсылка.ЭтапыПроцессов") Тогда
					ЗначенияЦветов			= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Этап, "ЦветФона, ЦветТекста");
					Кнопка.ЦветФона 		= РаботаСЦветомКлиентСервер.HexВЦвет(ЗначенияЦветов.ЦветФона);
					Кнопка.ЦветТекста 		= РаботаСЦветомКлиентСервер.HexВЦвет(ЗначенияЦветов.ЦветТекста);
				Иначе
					Кнопка.ЦветФона 		= мWebЦветаБелый;
					Кнопка.ЦветТекста 		= мWebЦветаЧерный;
				КонецЕсли;
			Исключение
				Кнопка.ЦветФона 			= мWebЦветаБелый;
				Кнопка.ЦветТекста 			= мWebЦветаЧерный;
			КонецПопытки;
			
		КонецЦикла;
				
	Иначе
		
		// Если текущий этап не конец.
		Если мОбъектТекущийЭтап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Выполнен 
			И мОбъектТекущийЭтап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Закрыт Тогда
			
			// Добавляем в качестве следующего этапа кнопку о настройке текущего процесса.
			Кнопка = Элементы.Добавить("ПереходСТекущегоЭтапаНеВозможен", Тип("КнопкаФормы"), 
				Элементы.ГруппаПеревестиНаЭтап);
			Кнопка.Доступность = Не ТолькоПросмотр;		
			КомандаЭтапа = Команды.Найти("ПереходСТекущегоЭтапаНеВозможен");
				
			Если КомандаЭтапа = Неопределено Тогда
				
				КомандаЭтапа			= Команды.Добавить("ПереходСТекущегоЭтапаНеВозможен");
				КомандаЭтапа.Действие	= "ПереходСТекущегоЭтапаНеВозможен"; 
				КомандаЭтапа.Заголовок	= НСтр("ru = 'Процесс не настроен. Настроить?'"); 
				КомандаЭтапа.Картинка	= БиблиотекаКартинок.Предупреждение;
				КомандаЭтапа.Отображение = ОтображениеКнопки.КартинкаИТекст;
				
			КонецЕсли;
			
			Кнопка.ИмяКоманды 			= "ПереходСТекущегоЭтапаНеВозможен";
			Кнопка.Высота 				= 2;
			Кнопка.ВысотаЗаголовка 		= 2;
			Кнопка.Ширина				= 30;
		ИначеЕсли мОбъектТекущийЭтап.СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Закрыт Тогда
			Элементы.ДекорацияПеревестиНаЭтап.Заголовок = НСтр("ru = 'Нет доступных этапов.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыПроцесса()
	
	Если ЗначениеЗаполнено(Объект.Процесс) Тогда
		Объект.ТипПроцесса = Объект.Процесс.ТипПроцесса;
	КонецЕсли;
	
КонецПроцедуры

#Область Трудозатраты

&НаСервере
Процедура ОбновитьЗаголовокТрудозатрат()
		
	КоличествоЗаписейТрудозатрат = ?(Объект.Ссылка.Пустая(), 0, 
		ТрудозатратыСервер.КоличествоЗаписейТрудозатратОбъекта(Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если КоличествоЗаписейТрудозатрат > 0 И ПоследняяДатаОкончанияТрудозатратОбъекта() = Дата(1, 1, 1) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Установите дату окончания в последней строке для добавления новых данных по трудозатратам'"),,
			Элементы.Трудозатраты);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоследняяДатаОкончанияТрудозатратОбъекта()
	
	Возврат ТрудозатратыСервер.ПоследняяДатаОкончанияТрудозатратОбъекта(Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ТрудозатратыПослеУдаления(Элемент)
	
	ОбновитьЗаголовокТрудозатрат();
	
КонецПроцедуры

#КонецОбласти

//@skip-warning
&НаКлиенте
Процедура ОткрытьФормуПеревестиНаЭтап(Команда)
	
	ТекущийПользователь = Неопределено;
	Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ТекущийПользователь) Тогда
		ПоказатьПредупреждение(, 
			СтрШаблон(НСтр("ru = 'Исполнителем по данному заданию является %1.
                            |Сменить этап имеет право только он сам или его руководители.'"), 
			ТекущийПользователь),
			180, 
			НСтр("ru = 'Нельзя сменить этап задания'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать задание.'"));
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ОписаниеОповещенияФорма = Новый ОписаниеОповещения("ПеревестиНаЭтапФормаЗавершение", ЭтотОбъект, Объект.Ссылка);
	ДанныеФормыЗадания		= ЗначенияРеквизитовЗадания();
	ДанныеФормыЗадания.Вставить("ОбъектЗадание", Объект);
	ПараметрыФормы			= Новый Структура;
	ПараметрыФормы.Вставить("ДанныеФормыЗадания", ДанныеФормыЗадания);
	ПараметрыФормы.Вставить("ПереданаСсылка", 	  Ложь);
	ПараметрыФормы.Вставить("Источник", 	      УникальныйИдентификатор);
	ПараметрыФормы.Вставить("СсылкаНаОбъект",     Объект.Ссылка);
	ПараметрыФормы.Вставить("ЗаписатьОбъект",  	  Ложь);
	ОткрытьФорму("ОбщаяФорма.ФормаПереводаЗаданияНаЭтап", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещенияФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаЭтапФормаЗавершение(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("НовыйЭтап") Тогда
			Объект.ТекущийЭтап = Результат.НовыйЭтап;
		КонецЕсли;
		
		Если Результат.Свойство("ИсполнительПоУмолчанию") И ЗначениеЗаполнено(Результат.ИсполнительПоУмолчанию) Тогда
			Объект.ТекущийИсполнитель = Результат.ИсполнительПоУмолчанию;
		КонецЕсли;
				
		ОбновитьПереводНаЭтапы();
		ОбновитьДоступностьРедактирования();
		ВывестиКомментарии();
		Модифицированность = Истина;
		РассчитатьОбщийВесЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВыборИсполнителя() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Процесс) Тогда		
		Элементы.НазначитьИсполнителя.Видимость	= Ложь;
		Возврат;
	КонецЕсли;
		
	мОбъектТекущийИсполнитель 	= Объект.ТекущийИсполнитель;
	
	мМассивТекущийИсполнитель = Новый Массив;
	мМассивТекущийИсполнитель.Добавить(Новый ФорматированнаяСтрока(
		?(ТипЗнч(мОбъектТекущийИсполнитель) = Тип("СправочникСсылка.Пользователи"), 
		БиблиотекаКартинок.ИсполнительВыбор, 
		БиблиотекаКартинок.ИсполнительГруппаПользователей)));
	мМассивТекущийИсполнитель.Добавить(Новый ФорматированнаяСтрока(" " 
		+ ?(ЗначениеЗаполнено(мОбъектТекущийИсполнитель), 
		Строка(мОбъектТекущийИсполнитель), "<" + НСтр("ru = 'Не выбран'") + ">")));
	Элементы.НадписьТекущийИсполнитель.Заголовок = Новый ФорматированнаяСтрока(мМассивТекущийИсполнитель);
	
	Элементы.НазначитьИсполнителя.Видимость			= Истина;
	Элементы.ВзятьСнятьЗаданиеНаИсполнение.Картинка	= ?(мОбъектТекущийИсполнитель = Пользователи.ТекущийПользователь(),
		БиблиотекаКартинок.СнятьСИсполнения, 
		БиблиотекаКартинок.ВзятьНаИсполнение);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьРедактирования() Экспорт
	
	Если (НЕ Объект.Ссылка.Пустая()) И Объект.Завершено Тогда
		ТолькоПросмотр = Не МожноИзменятьЗавершенныеЗадания;
	Иначе
		ТолькоПросмотр = НЕ ЗаданияСервер.ПравоРедактированияТекущийПользователь(Объект);
	КонецЕсли;
	
	ОбновитьПереводНаЭтапы();
	ОбновитьВыборИсполнителя();
	ОбновитьВидимость();
	
КонецПроцедуры

//@skip-warning
&НаСервере
Функция ПолучитьСтруктуруИсполнителяПоУИД(УИД)
	
	Исполнитель = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	
	Результат = Новый Структура();
	Результат.Вставить("Исполнитель", Исполнитель);
		
	Возврат Результат;
	
КонецФункции

//@skip-warning
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЭтапаПоУИД(ВидЭтапа, УИД)
	
	Если ВидЭтапа = 0 Тогда
		Этап = Справочники.ЭтапыПроцессов.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	Иначе
		Этап = Справочники.Процессы.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Этап) Тогда
		
		РеквизитыЭтапа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Этап, "Наименование, НавСсылка, СостояниеЭтапа");
		
		Результат = Новый Структура();
		Результат.Вставить("Этап", 				Этап);
		Результат.Вставить("Наименование",		РеквизитыЭтапа.Наименование);
		Результат.Вставить("НавСсылка",			РеквизитыЭтапа.НавСсылка);
		Результат.Вставить("СостояниеЭтапа",	РеквизитыЭтапа.СостояниеЭтапа);
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВычислитьКод(Код)
	
	Возврат Вычислить(Код);
	
КонецФункции

&НаСервере
Процедура ДобавитьПользователяВНаблюдателиНаСервере(Адресат)
	
	Если ЗначениеЗаполнено(Адресат) 
		И Объект.Наблюдатели.НайтиСтроки(Новый Структура("Адресат", Адресат)).Количество() = 0 Тогда
		
		НоваяСтрока 		= Объект.Наблюдатели.Добавить();
		НоваяСтрока.Адресат	= Адресат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнициатораВНаблюдатели(мИнициатор)
	Если ТипЗнч(мИнициатор) = Тип("СправочникСсылка.ФизическиеЛица") 
		ИЛИ ТипЗнч(мИнициатор) = Тип("СправочникСсылка.КонтактныеЛица") 
		ИЛИ ТипЗнч(мИнициатор) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ОтборСтрок = Новый Структура("Адресат",мИнициатор);
		НайденныеСтроки = Объект.Наблюдатели.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество()=0 Тогда			
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИнициатораВНаблюдателиЗавершение",
				ЭтотОбъект, ОтборСтрок);
			ПоказатьВопрос(ОписаниеОповещения,
				СтрШаблон(НСтр("ru = '<%1> отсутствует в списке наблюдателей. Добавить?'"), мИнициатор),
				РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнициатораВНаблюдателиЗавершение(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	СтрокаНаблюдатели 				= Объект.Наблюдатели.Добавить();
	СтрокаНаблюдатели.Адресат 		= ДополнительныеПараметры.Адресат;
	ОбновитьВидимость();
	
КонецПроцедуры

&НаСервере
Функция НужноДобавитьИнициатораВНаблюдатели(ПроцессПоЗаданию)
	Если ЗначениеЗаполнено(ПроцессПоЗаданию.ДобавлятьНовогоИнициатораВНаблюдатели) Тогда
		Возврат ПроцессПоЗаданию.ДобавлятьНовогоИнициатораВНаблюдатели;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СервисПослеВыбора(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ПроверитьВозможностьВыбора(Результат, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Сервис <%1> запрещено использовать в документе.'"), Результат));
		Возврат;
	КонецЕсли;
	
	Объект.Сервис = Результат;
	ПриИзмененииСервиса();
	Если Не ЗначениеЗаполнено(Объект.SLA) Тогда
		РассчитатьSLA();
	КонецЕсли;
	
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКнопокТрудозатраты()
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекущийИсполнитель  = Объект.ТекущийИсполнитель;
	Иначе
		ТекущийИсполнитель = Объект.Ссылка.ТекущийИсполнитель;
	КонецЕсли;
	ТекущийПользователь  = Пользователи.ТекущийПользователь();
	Если ТекущийИсполнитель = ТекущийПользователь 
		ИЛИ (НЕ ЗначениеЗаполнено(ТекущийИсполнитель) И ЗначениеЗаполнено(ТекущийПользователь)) Тогда
		Если ТрудозатратыВключены Тогда			
			Элементы.ТрудозатратыУказатьТрудозатраты.Доступность = Ложь;
		Иначе			
			Элементы.ТрудозатратыУказатьТрудозатраты.Доступность = Истина;
		КонецЕсли;
	Иначе		
		Элементы.ТрудозатратыСтоп.Доступность				= Ложь;
		Элементы.ТрудозатратыСтарт.Доступность				= Ложь;
		Элементы.ТрудозатратыУказатьТрудозатраты.Доступность= Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТрудозатратыВключены Тогда		
		Элементы.ТрудозатратыСтоп.Доступность   = Истина;
		Элементы.ТрудозатратыСтарт.Доступность  = Ложь;
	Иначе		
		Элементы.ТрудозатратыСтоп.Доступность   = Ложь;
		Элементы.ТрудозатратыСтарт.Доступность  = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусТрудозатрат()

	ТрудозатратыВключены  				= Ложь;
	ТекущийПользователь 				= Пользователи.ТекущийПользователь();
	УчетВремениАвторасчетТрудозатрат  	= УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ТекущийПользователь, 
		"АвторасчетТрудозатратВДокументах");
	
	Если Объект.Ссылка.Пустая() 
		И УчетВремениАвторасчетТрудозатрат 
		И (ТекущийПользователь = Объект.ТекущийИсполнитель 
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ТекущийИсполнитель))Тогда
		ТрудозатратыВключены 					 = Истина;
		Возврат;
	ИначеЕсли Объект.Ссылка.Пустая() И Не УчетВремениАвторасчетТрудозатрат Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка.ТекущийЭтап) Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетВремениАвторасчетТрудозатрат И ТекущийПользователь = Объект.Ссылка.ТекущийИсполнитель Тогда
		ТрудозатратыВключены = Истина;
		ВключитьТрудозатраты();
	Иначе		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Объект", 			 Объект.Ссылка);
		СтруктураЗаписи.Вставить("Исполнитель", 	 ТекущийПользователь);
		ТрудозатратыВключены = РегистрыСведений.Трудозатраты.ТрудозатратыВключены(СтруктураЗаписи); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьТрудозатраты()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	МоментВремени		= ТекущаяДатаСеанса();
	
	СтруктураЗаписи 	= Новый Структура;
	СтруктураЗаписи.Вставить("Объект", 			Объект.Ссылка);
	СтруктураЗаписи.Вставить("Исполнитель", 	ТекущийПользователь);
	СтруктураЗаписи.Вставить("Инициатор", 		Объект.Инициатор);
	СтруктураЗаписи.Вставить("МоментВремени",	МоментВремени);
	СтруктураЗаписи.Вставить("КлючУникальности",Новый УникальныйИдентификатор);
	Если НЕ РегистрыСведений.Трудозатраты.ВключитьТрудозатраты(СтруктураЗаписи) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не удалось включить авторасчет трудозатрат. Подробности см. в журнале регистрации.'"));
		ТрудозатратыВключены = Ложь;
	КонецЕсли;
	
	Если ТрудозатратыВключены Тогда		 		
		Элементы.ТрудозатратыСтарт.Доступность					= Ложь;
		Элементы.ТрудозатратыСтоп.Доступность					= Истина;
		Элементы.ТрудозатратыУказатьТрудозатраты.Доступность 	= Ложь;
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ТрудозатратыПередЗакрытиемНаСервере()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Объект.Ссылка.ТекущийИсполнитель = ТекущийПользователь Тогда
		СтруктураЗаписи 	= Новый Структура;
		СтруктураЗаписи.Вставить("Объект", 			Объект.Ссылка);
		СтруктураЗаписи.Вставить("Исполнитель", 	ТекущийПользователь);
		СтруктураЗаписи.Вставить("Данные",			Объект.Ссылка.ТекущийЭтап);
		МоментВремени		= ТекущаяДатаСеанса();
		СтруктураЗаписи.Вставить("МоментВремени",	МоментВремени);
		СтруктураЗаписи.Вставить("ВидРаботы",		Справочники.ВидыРабот.РаботаСДокументами);
		СтруктураЗаписи.Вставить("Описание",        НСтр("ru = 'Автоучет трудозатрат'"));
		РегистрыСведений.Трудозатраты.ВыключитьТрудозатраты(СтруктураЗаписи);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьТрудозатратыПользователю(ЭтоНоваяЗапись, ОписаниеОповещенияЗавершение = Неопределено)
	
	МоментВремени		   = ПолучитьДатуНаСервере();
	ТекущийПользователь    = ПользователиКлиент.ТекущийПользователь();
	
	ЗначениеКлюча 		   = Новый Структура;
	ЗначениеКлюча.Вставить("Объект", 		Объект.Ссылка);
	ЗначениеКлюча.Вставить("Исполнитель", 	ТекущийПользователь);
	ЗначениеКлюча.Вставить("Инициатор", 	Объект.Инициатор);
	
	Если ЭтоНоваяЗапись Тогда
		ЗначениеКлюча.Вставить("ДатаНачала",	МоментВремени);
		ЗначениеКлюча.Вставить("ДатаОкончания",	МоментВремени);
		ЗначениеКлюча.Вставить("Данные",	    Объект.ТекущийЭтап);
		КлючЗаписиТрудозатрат = Новый УникальныйИдентификатор;
	Иначе	
		КлючЗаписиТрудозатрат = КлючЗаписиТрудозатратНаСервере(ЗначениеКлюча);
	КонецЕсли;
	
	ЗначениеКлюча.Вставить("КлючУникальности", КлючЗаписиТрудозатрат);
		
	Если ЭтоНоваяЗапись Тогда
		СтруктураПараметров = ЗначениеКлюча;
		СтруктураПараметров.Вставить("ВидФормы", "ВводТрудозатратИзОбъекта");
		ОписаниеОповещения     = Новый ОписаниеОповещения("ДобавитьТрудозатратыНоваяЗаписьОписаниеОповещения", 
			ЭтотОбъект);
	Иначе	
		МассивКлючаЗаписи      = Новый Массив;
		МассивКлючаЗаписи.Добавить(ЗначениеКлюча);
		КлючЗаписи 		       = Новый("РегистрСведенийКлючЗаписи.Трудозатраты", МассивКлючаЗаписи);
		СтруктураПараметров    = Новый Структура;
		СтруктураПараметров.Вставить("Ключ", КлючЗаписи);
		СтруктураПараметров.Вставить("ВидФормы", "ВводТрудозатрат");
		ДопПараметры = Новый Структура;
		Если ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ДопПараметры.Вставить("ОписаниеЗавершения",ОписаниеОповещенияЗавершение); 
		КонецЕсли;		
		ОписаниеОповещения     = Новый ОписаниеОповещения("ДобавитьТрудозатратыОписаниеОповещения", ЭтотОбъект, 
			ДопПараметры);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.Трудозатраты.Форма.ФормаЗаписи", СтруктураПараметров, ЭтотОбъект,,,, 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТрудозатратыОписаниеОповещения(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат = Неопределено Тогда
		ТрудозатратыВключены = Истина;
		Возврат;
	КонецЕсли;
	
	ТрудозатратыВключены 					   			= Ложь;
	Элементы.ТрудозатратыСтоп.Доступность   			= Ложь;
	Элементы.ТрудозатратыСтарт.Доступность  			= Истина;
	Элементы.ТрудозатратыУказатьТрудозатраты.Доступность = Истина;
		
	Если ДополнительныеПараметры.Свойство("ОписаниеЗавершения") Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеЗавершения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТрудозатратыНоваяЗаписьОписаниеОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция КлючЗаписиТрудозатратНаСервере(ЗначениеКлюча)
	
	Возврат РегистрыСведений.Трудозатраты.КлючЗаписиТрудозатрат(ЗначениеКлюча);
	
КонецФункции

&НаСервере
Функция ЗначенияРеквизитовЗадания()
	
	РеквизитыДокумента	 		  = Объект.Ссылка.Метаданные().Реквизиты;
	СтандартныеРеквизитыДокумента = Объект.Ссылка.Метаданные().СтандартныеРеквизиты;
	СтруктураРеквизитов 		  = Новый Структура;
	
	Для Каждого ЭлементМассива Из РеквизитыДокумента Цикл
		СтруктураРеквизитов.Вставить(ЭлементМассива.Имя, Объект[ЭлементМассива.Имя]); 
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из СтандартныеРеквизитыДокумента Цикл
		СтруктураРеквизитов.Вставить(ЭлементМассива.Имя, Объект[ЭлементМассива.Имя]); 
	КонецЦикла;
	СтруктураРеквизитов.Вставить("ДатаАктуальности", 	ТекущаяДатаСеанса());
	СтруктураРеквизитов.Вставить("НеПроверятьПроцесс", 	Ложь);
	СтруктураРеквизитов.Вставить("ВвестиКомментарийПриПереходеНаЭтап", 
		Элементы.ДобавлятьКомментарийПриПереходеНаЭтап.Пометка);
	СтруктураРеквизитов.Вставить("ЭтоВебКлиент", 		ЭтоВебКлиент);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьКомментарийИПеревестиНаЭтап(ДополнительныеПараметры)
		
	ПеревестиНаЭтапФормаЗавершение(ДополнительныеПараметры.СтруктураПриПереходе, Новый Структура);
	
	Если Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Модифицированность = Ложь;
	Иначе ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать задание.'"));
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокЧекЛистаКлиент()
	
	ОбновитьЗаголовокЧекЛиста();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитЭтапа(Знач Этап, Знач Реквизит)
	
	Возврат Этап[Реквизит];
	
КонецФункции

&НаСервере
Процедура УстановитьОтметкуНаСервере(ЗначениеОтметки, ЗначениеКартинки)
	
	Если ЗначениеЗаполнено(ЗначениеОтметки) Тогда
		КомандаОтметка 			 = Команды.Найти("Отметка");
		КомандаОтметка.Картинка  = ЗначениеКартинки;
		КомандаОтметка.Заголовок = СтрШаблон(НСтр("ru='%1'"), Строка(ЗначениеОтметки));
		КомандаОтметка.Подсказка = СтрШаблон(НСтр("ru='Отметка: %1'"), Строка(ЗначениеОтметки));
	Иначе		
		КомандаОтметка 			 = Команды.Найти("Отметка");
		КомандаОтметка.Картинка  = ЗначениеКартинки;
		КомандаОтметка.Заголовок = НСтр("ru='Отметки'");
		КомандаОтметка.Подсказка = НСтр("ru='Отметка: не отмечено'");
	КонецЕсли;
	
	ОтметкаКнопка = ЗначениеОтметки;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда		
		УправлениеITОтделом8УФ.УстановитьОтметкиОбъекту(Объект.Ссылка, ОтметкаКнопка, Пользователи.ТекущийПользователь());
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсветкуНаСервере(Подсветка)
	
	ЦветаПомеченногоЗадания		= ЗаданияСервер.ПолучитьЦветаПомеченногоЗадания();
	Если Подсветка Тогда	
		Элементы.Тема.ЦветФона  = ЦветаПомеченногоЗадания.ЦветФона;
		Элементы.Тема.ЦветТекста= ЦветаПомеченногоЗадания.ЦветТекста;
	Иначе
		Элементы.Тема.ЦветФона  = WebЦвета.Белый;
		Элементы.Тема.ЦветТекста= WebЦвета.Черный;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда		
		УправлениеITОтделом8УФ.ПодсветитьОбъект(Объект.Ссылка, Пользователи.ТекущийПользователь());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораКрайнейДаты(Знач ИмяРеквизитаНаФорме)
	
	ТекДата			= ОбщегоНазначенияКлиент.ДатаСеанса();
	Элементы[ИмяРеквизитаНаФорме].СписокВыбора.Очистить();
	Если Объект[ИмяРеквизитаНаФорме] <> Дата(1, 1, 1) Тогда
		мДата = НачалоДня(Объект[ИмяРеквизитаНаФорме]);
	Иначе
		мДата = НачалоДня(ТекДата);
	КонецЕсли;
	НачалоПериода 	= 8 * 3600;
	КонецПериода 	= 19 * 3600;
	Сек 			= НачалоПериода;
	Пока Сек <= КонецПериода Цикл
		ДатаШага = мДата + Сек;
		Если ДатаШага >= ТекДата Тогда
			Элементы[ИмяРеквизитаНаФорме].СписокВыбора.Добавить(ДатаШага);
		КонецЕсли;
		Сек = Сек + 1800;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТегов()
	
	// Очистим старые теги.
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого СтрокаТегов Из Элементы.ВыбранныеТеги.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(СтрокаТегов);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
		
	// Вновь отобразим теги, которые есть в документе.
	ГруппаРодитель 	= Неопределено;
	НомерСтрокиГрупп= 0;
	ТекущаяШирина	= 0;
	ШрифтПоУмолчанию = Новый Шрифт("ANSI моноширинный шрифт");
	Для Каждого Строки Из Объект.Теги Цикл
	
		Если НЕ ЗначениеЗаполнено(Строки.Тег) Тогда
			Продолжить;
		КонецЕсли; 
	
		ЗначениеТега = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строки.Тег, "Наименование,ЦветФона,ЦветТекста");
		
		Если ГруппаРодитель = Неопределено ИЛИ ТекущаяШирина + СтрДлина(ЗначениеТега.Наименование) + 3 > 35 Тогда
			
			ГруппаРодитель 				= Элементы.Добавить("ГруппаТеговФормы" + НомерСтрокиГрупп, Тип("ГруппаФормы"),
				Элементы.ВыбранныеТеги);
			ГруппаРодитель.Вид 			= ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаРодитель.Отображение 	= ОтображениеОбычнойГруппы.Нет;
			ГруппаРодитель.Группировка 	= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаРодитель.ОтображатьЗаголовок 	= Ложь;
			НомерСтрокиГрупп 			= НомерСтрокиГрупп + 3;
			ТекущаяШирина 				= 0;
			
		КонецЕсли;
	
		ЦветФона   = ?(ПустаяСтрока(ЗначениеТега.ЦветФона), WebЦвета.Белый,
			РаботаСЦветомКлиентСервер.HexВЦвет(ЗначениеТега.ЦветФона));
		ЦветТекста = ?(ПустаяСтрока(ЗначениеТега.ЦветТекста), WebЦвета.Черный,
			РаботаСЦветомКлиентСервер.HexВЦвет(ЗначениеТега.ЦветТекста));
	
		Поле			= Элементы.Добавить("ТегФормы" + Формат(Строки.НомерСтроки, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="),
			Тип("ДекорацияФормы"), ГруппаРодитель);
		МассивСтрок		= Новый Массив;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" " + ЗначениеТега.Наименование + " ", ШрифтПоУмолчанию));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.УдалитьТег,,,,
			"ТегФормы" + Формат(Строки.НомерСтроки, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=")));
		Поле.Заголовок	= Новый ФорматированнаяСтрока(МассивСтрок);
		Поле.ЦветФона	= ЦветФона;
		Поле.ЦветТекста = ЦветТекста;
		Поле.РастягиватьПоГоризонтали = Ложь;
		Поле.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_УдалениеТега");
		Поле.Доступность = НЕ ТолькоПросмотр;
		ТекущаяШирина	= ТекущаяШирина + СтрДлина(ЗначениеТега.Наименование) + 3;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТегСервер(НаименованиеТега)
	
	Результат = Справочники.Теги.НайтиПоНаименованию(НаименованиеТега, Истина);
	
	Если Результат.Пустая() Тогда
		
		ТегОбъект 				= Справочники.Теги.СоздатьЭлемент();
		ТегОбъект.Наименование 	= НаименованиеТега;
		ТегОбъект.Записать();
		Результат				= ТегОбъект.Ссылка;
		
	КонецЕсли;
	
	НайденныеСтроки = Объект.Теги.НайтиСтроки(Новый Структура("Тег", Результат));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
				
		// Переместим строку в конец.
		Объект.Теги.Удалить(НайденныеСтроки[0]);
		
	КонецЕсли;
	
	// Добавим в конец.
	НоваяСтрока 	= Объект.Теги.Добавить();
	НоваяСтрока.Тег = Результат;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаРолиУдаленноеУправление()
	
	Возврат УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИспользоватьУдаленноеУправление") 
		И ПравоДоступа("Чтение", Метаданные.Справочники.УдаленноеУправление);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверкаРолиЛогиныИПароли()
	         
	Возврат ПравоДоступа("Чтение", Метаданные.Справочники.ЛогиныИПароли);
	               
КонецФункции

&НаКлиенте
Процедура РешенияСтатьяБазыЗнанийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивОбъектов = Новый Массив;
	ЗаданияКлиент.ПолучитьМассивОбъектовПоРеквизитамФормы(ЭтотОбъект, МассивОбъектов);
	СписокВыбранныхСтатей = Новый СписокЗначений;
	ЗаданияКлиент.ПолучитьСписокВыбранныхСтатейИзРеквизитовФормы(ЭтотОбъект, СписокВыбранныхСтатей);
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтображатьВозможныеРешения", Истина);
	ПараметрыФормы.Вставить("МассивПредметов",    		  МассивОбъектов);
	ПараметрыФормы.Вставить("СписокВыбранныхСтатей",	  СписокВыбранныхСтатей);
	ПараметрыФормы.Вставить("РежимВыбора",                Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",         Истина);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.ФормаСписка", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ВыборСтатьиЗавершение", ЭтотОбъект), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтатьиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РешенияТекущиеДанные = Элементы.Решения.ТекущиеДанные;
	Если РешенияТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РешенияТекущиеДанные.СтатьяБазыЗнаний = Результат;
	РешенияТекущиеДанные.Решение		  = ПредопределенноеЗначение("Справочник.Решения.ПустаяСсылка");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеОбработкиНажатияКомментарииПолеHTML(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ТребуетсяЗапись") 
			И Результат.ТребуетсяЗапись Тогда
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаЗаписатьЗаданиеДобавлениеКомментария", 
				ЭтотОбъект,	Результат);
			ПоказатьВопрос(ОписаниеОповещения, 
				НСтр("ru = 'Данные еще не записаны. Для добавления комментария необходима запись данных. Продолжить?'"),
				РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.ГруппаКомментарии Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаКомментарии;
	КонецЕсли;
	
	ВывестиКомментарии();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаписатьЗаданиеДобавлениеКомментария(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Попытка
			Записать();
		Исключение
			ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), 
				ОписаниеОшибки()));
			Возврат;
		КонецПопытки;
	КонецПопытки;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОбработкиНажатияКомментарииПолеHTML", ЭтотОбъект);
	КомментарииКлиент.ОбработатьАдресСсылки_create(ДополнительныеПараметры.ДанныеСсылки, ОписаниеОповещения, 
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиКомментарии()
	
	мТекстHTML = ПолучитьКомментарии(Объект.Ссылка, УникальныйИдентификатор);
	Если СообщенияХТМЛ <> мТекстHTML Тогда
		СообщенияХТМЛ = мТекстHTML;
		Если НеобходимостьПереходаВКонецКомментариев Тогда
			ПодключитьОбработчикОжидания("ПрокруткаДоКонцаКомментариев", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрокруткаДоКонцаКомментариев()
	
	#Если Не ВебКлиент Тогда
	Элементы.СообщенияХТМЛ.Документ.body.scrollTop = Элементы.СообщенияХТМЛ.Документ.body.scrollHeight + 100000;
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НеобходимостьПереходаВКонецКомментариев()
	
	УпорядочиваниеКомментариевВЗадании = 
		УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеНастройки("УпорядочиваниеКомментариевВЗадании");
	Если НЕ ЗначениеЗаполнено(УпорядочиваниеКомментариевВЗадании) Тогда
		УпорядочиваниеКомментариевВЗадании = Перечисления.УпорядочиваниеКомментариевВЗадании.ПоДатеПоВозрастанию;
	КонецЕсли;
	
	Возврат УпорядочиваниеКомментариевВЗадании = Перечисления.УпорядочиваниеКомментариевВЗадании.ПоДатеПоВозрастанию;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКомментарии(Знач Задание, Знач УникальныйИдентификатор)
	
	Возврат Комментарии.ПолучитьHTML(Задание, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ДиалогВыбораФайловПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Расположение 	= 2;
		НоваяСтрока.ИмяФайлаНаКомпьютере = ВыбранныйФайл;
		
		ИмяФайла 			 		= ИмяФайлаБезКаталога(ВыбранныйФайл);
		НоваяСтрока.ИмяФайла		= ИмяФайла;
		
		Расширение					= ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
		НоваяСтрока.ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
		ДополнительныеПараметры 	= Новый Структура("СтрокаТаблицыВложений", НоваяСтрока);
		
		Файл = Новый Файл(ВыбранныйФайл);
		Файл.НачатьПолучениеРазмера(
			Новый ОписаниеОповещения("ПолучениеРазмераЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
	КонецЦикла;
	
	Если ВыбранныеФайлы.Количество() > 0 Тогда
		Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяФайлаБезКаталога(Знач ПолноеИмяФайла)
	
	ИмяФайла = ПолноеИмяФайла;
	Пока Истина Цикл
		
		Позиция = Макс(СтрНайти(ИмяФайла, "\"), СтрНайти(ИмяФайла, "/"));
		Если Позиция = 0 Тогда
			Возврат ИмяФайла;
		КонецЕсли;
		
		ИмяФайла = Сред(ИмяФайла, Позиция + 1);
		
	КонецЦикла;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура ПомещениеФайлаПриОкончании(РезультатПомещения, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если РезультатПомещения = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение		 = 4;
	НоваяСтрока.ИмяФайлаНаКомпьютере = Адрес;
	НоваяСтрока.ИмяФайла			 = ВыбранноеИмяФайла;
	
	Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ВыбранноеИмяФайла);
	НоваяСтрока.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	
	Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ОбновитьЗаголовокФайлыВложенияПриИзменении();
	
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеРазмераЗавершение(Размер, ДополнительныеПараметры) Экспорт

	СтрокаТаблицыВложений  = ДополнительныеПараметры.СтрокаТаблицыВложений;
	СтрокаТаблицыВложений.Размер = Размер;
	СтрокаТаблицыВложений.РазмерПредставление = 
		ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 
		
	ОбновитьЗаголовокФайлыВложенияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВложения()
	
	ПараметрыВложения = ВзаимодействияКлиент.ПустаяСтруктураПараметровПисьмаВложения();
	ПараметрыВложения.ДатаПисьмаОснования = Объект.Дата;
	ПараметрыВложения.ПисьмоОснование     = Объект.Ссылка;
	ПараметрыВложения.ТемаПисьмаОснования = Объект.Заголовок;
	
	Возврат ПараметрыВложения;
	
КонецФункции

&НаКлиенте
Процедура ВопросОЗаписиФайлаПослеЗакрытия(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьСвойстваВложения(ДополнительныеПараметры.ТекущийИндексВКоллекции);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваВложения(ТекущийИндексВКоллекции)
	
	ТекущиеДанные = Вложения.Получить(ТекущийИндексВКоллекции);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Вложения.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		
	ФайлДоступенДляРедактирования = 
		(Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик"));
	ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ТолькоПросмотр", 
		ТекущиеДанные.Ссылка,НЕ ФайлДоступенДляРедактирования);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы,, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложение(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьВложение(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка				= Ложь;
	ПараметрыПеретаскивания.Действие	= ДействиеПеретаскивания.Отмена;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ТипЗнч(ФайлПринятый) = Тип("Файл") Тогда
					МассивФайлов.Добавить(ФайлПринятый);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		ДополнительныеПараметры = Новый Структура("ВыбранныйФайл", ВыбранныйФайл);
		ОписаниеОповещение = Новый ОписаниеОповещения("ПроверкаЭтоФайлПослеЗавершения", ЭтотОбъект, 
			ДополнительныеПараметры);
		ВыбранныйФайл.НачатьПроверкуЭтоФайл(ОписаниеОповещение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЭтоФайлПослеЗавершения(ЭтоФайл, ДополнительныеПараметры) Экспорт

	Если НЕ ЭтоФайл Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = ДополнительныеПараметры.ВыбранныйФайл.ПолноеИмя;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение = 2;
	НоваяСтрока.ИмяФайлаНаКомпьютере = ПолноеИмя;
	
	ИмяФайла = ИмяФайлаБезКаталога(ПолноеИмя);
	НоваяСтрока.ИмяФайла = ИмяФайла;
	
	Расширение					= ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
	НоваяСтрока.ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	ДополнительныеПараметры		= Новый Структура("СтрокаТаблицыВложений", НоваяСтрока);
	//@skip-warning
	ОписаниеОповещение			= Новый ОписаниеОповещения("НовыйФайлПослеИнициализации", ЭтотОбъект, 
		ДополнительныеПараметры);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещение, ПолноеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФайлыВложенияПриИзменении()
	
	Если Вложения.Количество() > 0 Тогда
		Элементы.ФайлыВЗадании.Заголовок = СтрШаблон(НСтр("ru = 'Файлы (%1)'"), Вложения.Количество());
	Иначе
		Элементы.ФайлыВЗадании.Заголовок = НСтр("ru = 'Файлы'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПослеУдаления(Элемент)
	
	ОбновитьЗаголовокФайлыВложенияПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПриСозданииНаСервере()
	
	Если ТолькоПросмотр = Истина Тогда		
		Элементы.ФормаЗаписатьИзФормы.Доступность 					= Ложь;
		Элементы.ФормаНаКонтроль.Доступность	  					= Ложь;
		Элементы.ФормаИсключитьСебяИзСпискаНаблюдателей.Доступность = Ложь;
		Элементы.ДобавлятьКомментарийПриПереходеНаЭтап.Доступность  = Ложь;
		Элементы.ФормаЗапуститьПодпроцесс.Доступность				= Ложь;
		Элементы.ФормаДобавитьСкриншот.Доступность					= Ложь;
		Элементы.Выполнение.Доступность			  					= Ложь;
		Элементы.НазначитьИсполнителяКнопка.Доступность 			= Ложь;
		Элементы.РежимРедактированияОписания.Доступность			= Ложь;
		Элементы.Теги.Доступность									= Ложь;
		Элементы.ВыбранныеТеги.Доступность							= Ложь;
		Элементы.ФормаЗаполнитьПоШаблону.Доступность				= Ложь;
	КонецЕсли;

КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Шаблон)
		
	мВложения         = Новый Структура;
	мОписаниеИзменено = Ложь;
		
	ЗаданиеОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.Задание"));
	ЗаданияСервер.ЗаполнитьЗаданиеПоШаблону(Шаблон, ЗаданиеОбъект);
	ЗаданиеОбъект.ДополнительныеСвойства.Свойство("ВложенияОписания", мВложения);
	ЗаданиеОбъект.ДополнительныеСвойства.Свойство("ОписаниеИзменено", мОписаниеИзменено);
	ЗначениеВРеквизитФормы(ЗаданиеОбъект, "Объект");
		
	Если мОписаниеИзменено Тогда		
		ОписаниеФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, мВложения);
		МодифицированностьОписаниеФорматированныйДокумент 	= Истина;
		Элементы.ГруппаТекст.ТекущаяСтраница 				= Элементы.СтраницаПравки;
		Элементы.РежимРедактированияОписания.Заголовок 		= НСтр("ru = 'Просмотр'");
		Элементы.РежимРедактированияОписания.Картинка		= БиблиотекаКартинок.НеРедактировать;
		Элементы.ВставитьКартинкуИзБуфера.Доступность 		= Истина;
		Элементы.ОформитьФрагментКода.Доступность	  		= Истина;
	КонецЕсли;	
	
	ОбновитьСписокТегов();
	ОбновитьВидимость();
	ОбновитьВыборИсполнителя();
	ОбновитьДоступностьРедактирования();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПриоритет()
	
	Объект.Приоритет = ЗаданияСервер.РассчитатьПриоритет(Объект.Влияние, Объект.Срочность);
	РассчитатьSLA();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаПриИзменении(Элемент)
	
	РассчитатьSLA();
	ОбновитьВидимостьУслугаНедоступна();
	РассчитатьОбщийВесЗадания();
	
КонецПроцедуры

&НаСервере
Функция РассчитатьSLA(Источник = Неопределено)
		
	ОбъектИзменения = ?(Источник = Неопределено, Объект, Источник);
	Если ОбъектИзменения.РучнаяУстановкаДатВSLA = Истина Тогда
		Возврат Ложь;
	КонецЕсли;	
	Результат = УправлениеSLA.РассчитатьSLA(ОбъектИзменения);
	
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Результат.Свойство("НеВсеДанные") Тогда
		ОбъектИзменения.УслугаНедоступна = Ложь;
		ОбъектИзменения.КрайняяДатаВыполнения = Дата(1, 1, 1);
		ОбъектИзменения.КрайняяДатаРеакции = Дата(1, 1, 1);
		ОбновитьВидимостьУслугаНедоступна();
		Возврат Ложь;
	КонецЕсли;
	
	Если Результат.Свойство("Ошибки") Тогда
		ОбъектИзменения.УслугаНедоступна = Истина;
		ОбъектИзменения.КрайняяДатаВыполнения = Дата(1, 1, 1);
		ОбъектИзменения.КрайняяДатаРеакции = Дата(1, 1, 1);
		ОбновитьВидимостьУслугаНедоступна();
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Процесс) Тогда
		ОбъектИзменения.Процесс = Результат.Процесс;
		ПроцессПриИзмененииНаСервере();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектИзменения.Инициатор) Тогда
		ОбъектИзменения.Инициатор = Результат.Клиент;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбъектИзменения, Результат, 
		"Клиент, КрайняяДатаРеакции, КрайняяДатаВыполнения, Организация, УслугаНедоступна, SLA");
	ОбновитьВидимостьУслугаНедоступна();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьУслугаНедоступна()
	
	Если Объект.УслугаНедоступна Тогда
		Элементы.ДекорацияДаты.Заголовок = НСтр("ru = 'Даты (!)'");
		Элементы.ГруппаДатыЗаголовок.ЦветФона = Новый Цвет(220, 20, 60);
		Элементы.ДекорацияДаты.ЦветТекста = WebЦвета.Белый;
	Иначе
		Элементы.ДекорацияДаты.Заголовок = НСтр("ru = 'Даты:'");
		Элементы.ГруппаДатыЗаголовок.ЦветФона = Новый Цвет(245, 251, 247);
		Элементы.ДекорацияДаты.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроцессПриИзмененииНаСервере()
	
	// Проверка изменения текущего этапа.
	Попытка
		Если НЕ ПроцессСодержитЭтап(Объект.Процесс, Объект.ТекущийЭтап) Тогда
			Объект.ТекущийЭтап = Справочники.ЭтапыПроцессов.Новый;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	// Исполнитель по умолчанию для этапа из нового процесса.
	ИсполнительПоУмолчанию = Справочники.Пользователи.ПустаяСсылка();
	Если ЗначениеЗаполнено(Объект.Процесс) И ТипЗнч(Объект.Процесс) = Тип("СправочникСсылка.Процессы") Тогда
		ИсполнительПоУмолчанию   = ЗаданияСервер.ПолучитьИсполнителяЗаданияПоУмолчанию(Объект.Процесс, 
			Объект.ТекущийЭтап);
	КонецЕсли;
	
	// Проверка изменения исполнителя.
	Если ЗначениеЗаполнено(ИсполнительПоУмолчанию) Тогда
		Объект.ТекущийИсполнитель = ИсполнительПоУмолчанию;
	КонецЕсли;

	ОбновитьРеквизитыПроцесса();
	ОбновитьПереводНаЭтапы();
	ОбновитьВыборИсполнителя();
	ОбновитьНаблюдателей();
	ОбновитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСервиса()
	
	Если НЕ ЗначениеЗаполнено(Объект.Сервис) И ЗначениеЗаполнено(Объект.Услуга) Тогда
		Объект.Услуга = Справочники.Услуги.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сервис) И ЗначениеЗаполнено(Объект.Услуга) Тогда
		Если Объект.Сервис <> Объект.Услуга.Владелец Тогда
			Объект.Услуга = Справочники.Услуги.ПустаяСсылка();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОбщийВесЗадания()
	
	Объект.ОбщийВес = ЗаданияСервер.ОбщийВесЗадания(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаНаСервере(ОбъектСсылка, ИмяРеквизита)
	
	Возврат ОбъектСсылка[ИмяРеквизита];
	
КонецФункции

&НаКлиенте
Процедура ПослеВводаСтрокиЧекЛиста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ТекущиеДанные.Описание = Результат;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСписокСпринтов()
	
	Возврат Справочники.Спринты.АвтоПодборСпринтовВыполнения();
	
КонецФункции

&НаСервере
Функция СформироватьСписокСпринтовСоздания()
	
	ДатаАктуальности = ?(Объект.Ссылка.Пустая(), Неопределено, Объект.ДатаСоздания);
	Возврат Справочники.Спринты.АвтоПодборСпринтСоздания(ДатаАктуальности);
	
КонецФункции

&НаСервере
Функция УникальныйИдентификаторОбъекта()
    
    ОбъектЗадание = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.Задание"));    
    Возврат ОбъектЗадание.Ссылка.УникальныйИдентификатор(); 
    
КонецФункции
	
#КонецОбласти
