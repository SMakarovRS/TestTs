
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	#Область БСП
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельВариантаНавигации;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	#КонецОбласти
	
	#Область УстановкаОтборов
	
	ЭтоВебКлиент 		= УправлениеITОтделом8УФ.ПриложениеЯвляетсяВебКлиентом();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Элементы.ОтборИсполнитель.СписокВыбора.Очистить();
	Элементы.ОтборИсполнитель.СписокВыбора.Добавить(НСтр("ru = 'Я'"));
	Элементы.ОтборИсполнитель.СписокВыбора.Добавить(НСтр("ru = 'Мои группы'"));
	Элементы.ОтборИсполнитель.СписокВыбора.Добавить(НСтр("ru = 'Подчиненные'"));
	Элементы.ОтборИсполнитель.СписокВыбора.Добавить(НСтр("ru = '<Не выбран>'"));
	СписокПодчиненных	= УправлениеITОтделом8УФ.СписокПодчиненныхСотрудников(ТекущийПользователь, Ложь);
	
	Для Каждого Элемент Из СписокПодчиненных Цикл		
		Если ТипЗнч(Элемент) = Тип("СправочникСсылка.Пользователи") 
			И Элемент.Недействителен = Ложь Тогда
			Элементы.ОтборИсполнитель.СписокВыбора.Добавить(Элемент, Строка(Элемент));
		КонецЕсли;		
	КонецЦикла;
	
	ОтборСтатусЗадания	= "";
	ОтборИсполнитель 	= "";
	ЗаданияСервер.ЗаполнитьСписокВыбораСтатусовЗаданий(Элементы.ОтборСтатусЗадания.СписокВыбора);
	
	Если Параметры.Свойство("Инициатор")
		ИЛИ Параметры.Свойство("МестоХранения")
		ИЛИ Параметры.Свойство("КарточкаНоменклатуры")
		ИЛИ Параметры.Свойство("ПрименитьОтборыПриЗагрузкеФормы")
		ИЛИ Параметры.Свойство("ТекущиеДела") Тогда
		
		КонтекстноеОткрытие = Истина;
		
	КонецЕсли;
	
	// Отбор по инициатору, месту хранения, карточке номенклатуры.
	Если Параметры.Свойство("Инициатор") Тогда
		УстановитьОтборСписка("Инициатор", "ГруппаОтборИнициатор", Параметры.Инициатор);
	КонецЕсли;
	
	Если Параметры.Свойство("МестоХранения") Тогда
		УстановитьОтборСписка("МестоХранения", "ГруппаОтборМестоХранения", Параметры.МестоХранения);
   	КонецЕсли;
	
	Если Параметры.Свойство("КарточкаНоменклатуры") Тогда
		УстановитьОтборСписка("КарточкаНоменклатуры", "ГруппаОтборКарточкаНоменклатуры", 
			Параметры.КарточкаНоменклатуры);
   	КонецЕсли;
	
	Если Параметры.Свойство("ПрименитьОтборыПриЗагрузкеФормы") Тогда
		
		ЗаполнитьОтборыИзПараметровФормы();
		
	// ТекущиеДела.	
	ИначеЕсли Параметры.Свойство("ТекущиеДела")
		И Параметры.ТекущиеДела = Истина Тогда
		
		Если Параметры.Свойство("Статус") Тогда
		
			СтруктураПараметров = Новый Структура;
			СтруктураОтборов	= Новый Структура;
			СтруктураОтборов.Вставить("Статус", Параметры.Статус);
			СтруктураПараметров.Вставить("СтруктураОтборов", СтруктураОтборов);
			ЗаполнитьОтборыИзПараметровФормы(СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтборИнициатор	= Справочники.Пользователи.ПустаяСсылка();
	ОтборКлиент		= Справочники.Контрагенты.ПустаяСсылка();
	
	#КонецОбласти

	#Область УстановкаПараметровДинамическогоСписка
	
	// Мои, подчиненных, не мои.
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	Список.Параметры.УстановитьЗначениеПараметра("ДоступностьРолиПросмотраЧужихЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Список.Параметры.УстановитьЗначениеПараметра("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Список.Параметры.УстановитьЗначениеПараметра("ДоступностьРолиПолныеПрава", 
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
		
	Список.Параметры.УстановитьЗначениеПараметра("СписокПользователейИГруппПользователей",
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекущийПользователь));
		
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	Список.Параметры.УстановитьЗначениеПараметра("ДоступностьРолиServiceDeskРаспределениеЗаданий", 
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskРаспределениеЗаданий"));
		
	БлокируемыеПоля = Новый Массив;
	БлокируемыеПоля.Добавить("ОсталосьДоКрайнейДаты");
	
	Список.УстановитьОграниченияИспользованияВГруппировке(БлокируемыеПоля);
	Список.УстановитьОграниченияИспользованияВОтборе(БлокируемыеПоля);
	Список.УстановитьОграниченияИспользованияВПорядке(БлокируемыеПоля);
		
	#КонецОбласти

	// Добавляем раскраску динамического списка с заданиями.
	УстановитьУсловноеОформление();
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если Не КонтекстноеОткрытие Тогда
		
		ВосстановитьНастройкиОтборов();
		Если ПустаяСтрока(ИмяТекущейПанелиНавигации) Тогда
			ИмяТекущейПанелиНавигации = "СтраницаИнициаторы";
		КонецЕсли;
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы[ИмяТекущейПанелиНавигации];
		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТекущейПанелиНавигации) Тогда
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИнициаторы;
	КонецЕсли;
	
	мБыстрыйПросмотрЗадания = Неопределено;
	ИмяКлючаОбъекта			= СтрЗаменить(ЭтотОбъект.ИмяФормы, ".", "");
	мБыстрыйПросмотрЗадания = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, 
		ИмяКлючаОбъекта + "_БыстрыйПросмотрЗадания");
		
	Если мБыстрыйПросмотрЗадания <> Неопределено Тогда
		БыстрыйПросмотрЗадания = мБыстрыйПросмотрЗадания;
	КонецЕсли;
	
	ОбновитьВидимость();
	ОбновитьПанельНавигации();
	
	ИнтервалПроверкиОповещений = ЗаданияСервер.ИнтервалПроверкиИзмененийЗаданийДляВсплывающихОповещений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьТекущуюДатуВПараметреСписка", 60, Истина);
	ПроверитьОповещенияПользователя();
	ПанельНавигацииРазвернутьВсе();
	ОбновитьДополнительныеСведенияПоЗаданию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//@skip-warning
	Если ИмяСобытия = "Документ.Задание.ФормаСписка" 
		ИЛИ ИмяСобытия = "Задание_ФормаСписка_УстановитьОтбор" Тогда
		
		ОбработкаОповещенияУстановитьОтбор(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбновитьЦветаЭтаповПроцесса" Тогда
		
		УстановитьУсловноеОформление();
		
	ИначеЕсли ИмяСобытия = "ОбновитьФормуСпискаЗаданий" Тогда
		
		ОбновитьФормуСпискаЗаданий();
				
	ИначеЕсли ИмяСобытия = "Запись_Комментарий" Тогда
		
		Элементы.Список.Обновить();
		
	ИначеЕсли ИмяСобытия = "Задание_ДобавленКомментарий" Тогда
		
		Если ЭтаФорма.УникальныйИдентификатор = Источник Тогда
			
			СформироватьОписаниеЗадачи(ТекущееЗадание);
			СформироватьСписокКомментариев(ТекущееЗадание);
			
		КонецЕсли;
			
	ИначеЕсли ИмяСобытия = "ИзмениласьОтметкаПодсветка" Тогда
		
		Обновить(Неопределено);
		
	ИначеЕсли ИмяСобытия = "ОчиститьСеансовыеДанные" Тогда
		
		//@skip-warning
		СеансовыеДанные = Новый Структура;
		
	ИначеЕсли ИмяСобытия = "Задание_ФормаСписка_УстановленОтборПериод" Тогда
		
		Если НЕ КонтекстноеОткрытие Тогда	
			СохранитьНастройкиОтборов();
		КонецЕсли;
		
		ОбновитьПанельНавигацииНаКлиенте();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ КонтекстноеОткрытие И НЕ ЗавершениеРаботы Тогда
		
		СохранитьНастройкиОтборов();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ХТМЛЗадачаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;

	ДополнительныеПараметрыФормы  = Новый Структура;
	ДополнительныеПараметрыФормы.Вставить("ТребуетсяЗапись", Ложь);
	ОписаниеОповещения  = Новый ОписаниеОповещения("ПослеОбработкиНажатияКомментарииПолеHTML", ЭтотОбъект);
	СтруктураПараметров = Новый Структура;
	Объект			  = Новый Структура;
	Объект.Вставить("Ссылка", ТекущееЗадание);
	СтруктураПараметров.Вставить("Объект", Объект);
	СтруктураПараметров.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	КомментарииКлиент.КомментарииПолеHTMLПриНажатии(ДанныеСобытия, ОписаниеОповещения, СтруктураПараметров, 
		ДополнительныеПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.Имя = "Инициаторы"	
		И Элементы.СтраницыПанелиНавигации.ТекущаяСтраница <> Элементы.СтраницаИнициаторы Тогда
		Возврат;
		
	ИначеЕсли Элемент.Имя = "Процессы" 
		И Элементы.СтраницыПанелиНавигации.ТекущаяСтраница <> Элементы.СтраницаПроцессы Тогда
		Возврат;
		
	ИначеЕсли Элемент.Имя = "Приоритеты" 
		И Элементы.СтраницыПанелиНавигации.ТекущаяСтраница <> Элементы.СтраницаПриоритеты Тогда
		Возврат;
		
	ИначеЕсли Элемент.Имя = "ТипыПроцессов" 
		И Элементы.СтраницыПанелиНавигации.ТекущаяСтраница <> Элементы.СтраницаТипыПроцессов Тогда
		Возврат;
		
	ИначеЕсли Элемент.Имя = "Исполнители" 
		И	Элементы.СтраницыПанелиНавигации.ТекущаяСтраница <> Элементы.СтраницаИсполнители Тогда
		Возврат;
		
	ИначеЕсли Элемент.Имя = "ГруппыЗадания" 
		И Элементы.СтраницыПанелиНавигации.ТекущаяСтраница <> Элементы.СтраницаГруппы Тогда
		Возврат;
		
	КонецЕсли;
	
	Если НеОтрабатыватьАктивизациюПанелиНавигации Тогда
		НеОтрабатыватьАктивизациюПанелиНавигации = Ложь;
		
	Иначе
		ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиПанелиНавигации", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	УстановитьОтборСписка("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение		= Неопределено;
		
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСпринтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	УстановитьОтборСписка("Спринт", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение		= Неопределено;
		
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКлиентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Тип") Тогда
		СтандартнаяОбработка	= Ложь;
		УстановитьОтборСписка("Клиент", Элемент.Родитель.Имя, ВыбранноеЗначение);
		ВыбранноеЗначение		= Неопределено;
	КонецЕсли;

	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИнициаторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Тип") Тогда
		СтандартнаяОбработка	= Ложь;
		
		Если ИмяТекущейПанелиНавигации = "СтраницаИнициаторы" Тогда
			УдалитьОтборПанельНавигации();
		КонецЕсли;
		
		УстановитьОтборСписка("Инициатор", Элемент.Родитель.Имя, ВыбранноеЗначение);
		ВыбранноеЗначение = Неопределено;
	КонецЕсли;
	
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОтборПанельНавигации()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		, "ОтборПанелиНавигации");

КонецПроцедуры	

&НаКлиенте
Процедура ОтборПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	УстановитьОтборСписка("Проект", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение		= Неопределено;
		
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТегОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	УстановитьОтборСписка("Теги.Тег", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение		= Неопределено;
	
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборГруппаЗаданийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	УстановитьОтборСписка("ГруппаЗадания", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение		= Неопределено;
		
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМестоХраненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	УстановитьОтборСписка("МестоХранения", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение		= Неопределено;
	
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКарточкаНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	УстановитьОтборСписка("КарточкаНоменклатуры", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение		= Неопределено;
		
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ИмяТекущейПанелиНавигации = "СтраницаИсполнители" Тогда
		УдалитьОтборПанельНавигации();
	КонецЕсли;
	
	УстановитьОтборСпискаИсполнительНаСервере(ВыбранноеЗначение);
	
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусЗаданияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтатусЗадания = ВыбранноеЗначение;
	УстановитьОтборСпискаСтатусЗаданияНаСервере(ОтборСтатусЗадания);
	ОбновитьПанельНавигацииНаКлиенте();
	
	ЭтотОбъект.Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусЗаданияОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборСтатусЗадания = "";
	УдалитьЭлементыОтборовПоСтатусуЗадания();
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокаПоискаПриИзменении(Элемент)
		
	Если Не ПустаяСтрока(ОтборСтрокаПоиска) Тогда
		НайденныйЭлемент = Элементы.ОтборСтрокаПоиска.СписокВыбора.НайтиПоЗначению(ОтборСтрокаПоиска);
		
		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.ОтборСтрокаПоиска.СписокВыбора.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		Элементы.ОтборСтрокаПоиска.СписокВыбора.Вставить(0, ОтборСтрокаПоиска);
		
		Если Элементы.ОтборСтрокаПоиска.СписокВыбора.Количество() > 10 Тогда
			Элементы.ОтборСтрокаПоиска.СписокВыбора.Удалить(10);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтборСпискаПоСтрокеПоискаНаСервере();
	
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ОтборСтрокаПоиска.ЦветФона = WebЦвета.Белый;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроцессОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	УстановитьОтборСписка("Процесс", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение		= Неопределено;
			
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	УстановитьОтборСписка("Категория", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение		= Неопределено;
		
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИнициаторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, 
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.ОтборИнициатор.СписокВыбора.Очистить();
		ДанныеВыбора = ЗаданияСервер.ПолучитьСписокВыбораИнициатора(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКлиентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.ОтборКлиент.СписокВыбора.Очистить();
		ДанныеВыбора = ЗаданияСервер.ПолучитьСписокВыбораКлиента(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСпринтАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.ОтборСпринт.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	МассивТипов = СформироватьСписокСпринтов();
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивТипов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
			
	ПодключитьОбработчикОжидания("ОбновитьДополнительныеСведенияПоЗаданию", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ПолучитьДатуНаСервере());
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ПолучитьДатуНаСервере());
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаБыстрыйПросмотрПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ОписаниеЗадачи Тогда
		СформироватьОписаниеЗадачи(ТекущееЗадание);
	ИначеЕсли ТекущаяСтраница = Элементы.Комментарии Тогда
		ОбновитьДополнительныеСведенияПоЗаданию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	КлючеваяОперация = "ДокументЗадание (открытие)";
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// Пропускаем, пусто в списке.
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Пропускаем, столбец скрыт.
	Массив = Строки.ПолучитьКлючи();
	Если НЕ Строки.Получить(Массив[0]).Данные.Свойство("ОсталосьДоКрайнейДаты") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, МИНУТА) >= -60
		|				И РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, МИНУТА) <= 60
		|			ТОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, МИНУТА)
		|		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ЧАС) >= -24
		|				И РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ЧАС) <= 24
		|			ТОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ЧАС)
		|		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ДЕНЬ) >= -31
		|				И РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ДЕНЬ) <= 31
        |			ТОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ДЕНЬ)
        |		ИНАЧЕ РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, МЕСЯЦ)
        |	КОНЕЦ КАК Значение,
        |	ВЫБОР
        |		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, МИНУТА) >= -60
        |				И РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, МИНУТА) <= 60
        |			ТОГДА &Минут
        |		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ЧАС) >= -24
        |				И РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ЧАС) <= 24
        |			ТОГДА &Часов
        |		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ДЕНЬ) >= -31
        |				И РАЗНОСТЬДАТ(&ТекущаяДата, Задание.КрайняяДатаВыполнения, ДЕНЬ) <= 31
        |			ТОГДА &Дней
        |		ИНАЧЕ &Месяц
        |	КОНЕЦ КАК ЕдиницаИзмерения
        |ИЗ
        |	Документ.Задание КАК Задание
        |ГДЕ
        |	Задание.Выполнено = ЛОЖЬ
        |	И Задание.КрайняяДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
        |	И Задание.Ссылка В(&МассивСсылок)
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	Задание.Ссылка,
        |	ВЫБОР
        |		КОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, МИНУТА) >= -60
        |				И РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, МИНУТА) <= 60
        |			ТОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, МИНУТА)
        |		КОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ЧАС) >= -24
        |				И РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ЧАС) <= 24
        |			ТОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ЧАС)
        |		КОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ДЕНЬ) >= -31
        |				И РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ДЕНЬ) <= 31
        |			ТОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ДЕНЬ)
        |		ИНАЧЕ РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, МЕСЯЦ)
        |	КОНЕЦ,
        |	ВЫБОР
        |		КОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, МИНУТА) >= -60
        |				И РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, МИНУТА) <= 60
        |			ТОГДА &Минут
        |		КОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ЧАС) >= -24
        |				И РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ЧАС) <= 24
        |			ТОГДА &Часов
        |		КОГДА РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ДЕНЬ) >= -31
        |				И РАЗНОСТЬДАТ(Задание.ДатаВыполнения, Задание.КрайняяДатаВыполнения, ДЕНЬ) <= 31
        |			ТОГДА &Дней
        |		ИНАЧЕ &Месяц
        |	КОНЕЦ
        |ИЗ
        |	Документ.Задание КАК Задание
        |ГДЕ
        |	Задание.Выполнено = ИСТИНА
        |	И Задание.КрайняяДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
        |	И Задание.Ссылка В(&МассивСсылок)";
	
	мТекДата = ТекущаяДатаСеанса();
	
	Запрос.УстановитьПараметр("МассивСсылок",	Массив);
	Запрос.УстановитьПараметр("ТекущаяДата",	мТекДата);
	Запрос.УстановитьПараметр("Минут",			НСтр("ru = 'мин.'"));
	Запрос.УстановитьПараметр("Часов",			НСтр("ru = 'ч.'"));
	Запрос.УстановитьПараметр("Дней",			НСтр("ru = 'дн.'"));
	Запрос.УстановитьПараметр("Месяц",			НСтр("ru = 'мес.'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаСписка = Строки[Выборка.Ссылка];
		СтрокаСписка.Данные.ОсталосьДоКрайнейДаты = СтрШаблон(НСтр("ru = '%1 %2'"), 
				Выборка.Значение, 
				Выборка.ЕдиницаИзмерения);
				
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьВСпринт(Команда)
		
	МассивВыделенныхСтрок = Элементы.Список.ВыделенныеСтроки;
	АктивныеСпринты = ЗаданияСервер.АктивныеСпринты();
	
	Если АктивныеСпринты.Количество() = 1 Тогда
	
		ЗаданияСервер.ВключитьЗаданияВСпринт(МассивВыделенныхСтрок, АктивныеСпринты[0]);
		Обновить(Неопределено);
		Элементы.Список.Обновить();
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура("МассивВыделенныхСтрок", МассивВыделенныхСтрок);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборСпринта", ЭтаФорма, ДополнительныеПараметры);
		
		ПараметрыОткрытияФормы = Новый Структура("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.Спринты.ФормаВыбора", ПараметрыОткрытияФормы, ЭтаФорма,,,,ОповещениеОЗакрытии, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСпринта(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданияСервер.ВключитьЗаданияВСпринт(ДопПараметры.МассивВыделенныхСтрок, РезультатЗакрытия);
	Обновить(Неопределено);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьИзСпринта(Команда)
		
	МассивВыделенныхСтрок = Новый Массив;
	
	Если Команда <> Неопределено Тогда
		
		Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выделите задачи для исключения из спринтов'"));
			Возврат;
		КонецЕсли;
		
		МассивВыделенныхСтрок = Элементы.Список.ВыделенныеСтроки;
		Если МассивВыделенныхСтрок.Количество() = 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выделите задачи для исключения из спринтов'"));
			Возврат;
		КонецЕсли;
	Иначе
		МассивВыделенныхСтрок.Добавить(ТекущееЗадание);
	КонецЕсли;
	
	ЗаданияСервер.ИсключитьЗаданияИзСпринтов(МассивВыделенныхСтрок);
	Обновить(Неопределено);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеИОтправкаЭлектронныхПисем(Команда)
	
	ПолучениеИОтправкаЭлектронныхПисемНаСервере();
	ОбновитьФормуСпискаЗаданий();
	ПодключитьОбработчикОжидания("ОбновитьДополнительныеСведенияПоЗаданию", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПроцессТекущийЭтап(Команда)
	
	ГруппировкаЭлементы		= Список.Группировка.Элементы;
	ГруппировкаЭлементы.Очистить();
 	ЭлементГруппировки		= ГруппировкаЭлементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле	= Новый ПолеКомпоновкиДанных("Процесс");
 	ЭлементГруппировки		= ГруппировкаЭлементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле	= Новый ПолеКомпоновкиДанных("ТекущийЭтап");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьПоИсполнителям(Команда)
	
	ГруппировкаЭлементы		= Список.Группировка.Элементы;
	ГруппировкаЭлементы.Очистить();
 	ЭлементГруппировки		= ГруппировкаЭлементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле	= Новый ПолеКомпоновкиДанных("ТекущийИсполнитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаВыполненоНеВыполнено(Команда)
	
	ГруппировкаЭлементы		= Список.Группировка.Элементы;
	ГруппировкаЭлементы.Очистить();
 	ЭлементГруппировки		= ГруппировкаЭлементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле	= Новый ПолеКомпоновкиДанных("Выполнено");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоПроцессам(Команда)
	
	ГруппировкаЭлементы		= Список.Группировка.Элементы;
	ГруппировкаЭлементы.Очистить();
 	ЭлементГруппировки		= ГруппировкаЭлементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле	= Новый ПолеКомпоновкиДанных("Процесс");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоРодительскимЗадачам(Команда)
	
	ГруппировкаЭлементы		= Список.Группировка.Элементы;
	ГруппировкаЭлементы.Очистить();
 	ЭлементГруппировки		= ГруппировкаЭлементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных("Родитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоПриоритетам(Команда)
	
	ГруппировкаЭлементы		= Список.Группировка.Элементы;
	ГруппировкаЭлементы.Очистить();
 	ЭлементГруппировки		= ГруппировкаЭлементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле	= Новый ПолеКомпоновкиДанных("Приоритет");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоГруппам(Команда)
	
	ГруппировкаЭлементы					= Список.Группировка.Элементы;
	ГруппировкаЭлементы.Очистить();
 	ЭлементГруппировки					= ГруппировкаЭлементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле				= Новый ПолеКомпоновкиДанных("ГруппаЗадания");
	ЭлементГруппировки.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаБезГруппировок(Команда)
	
	ГруппировкаЭлементы = Список.Группировка.Элементы;
	ГруппировкаЭлементы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоПроектам(Команда)
	
	ГруппировкаЭлементы		= Список.Группировка.Элементы;
	ГруппировкаЭлементы.Очистить();
 	ЭлементГруппировки		= ГруппировкаЭлементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле	= Новый ПолеКомпоновкиДанных("Проект");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоСервисам(Команда)
	
	ГруппировкаЭлементы		= Список.Группировка.Элементы;
	ГруппировкаЭлементы.Очистить();
 	ЭлементГруппировки		= ГруппировкаЭлементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле	= Новый ПолеКомпоновкиДанных("Сервис");

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоТипамДокументов(Команда)

	ГруппировкаЭлементы		= Список.Группировка.Элементы;
	ГруппировкаЭлементы.Очистить();
 	ЭлементГруппировки		= ГруппировкаЭлементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле	= Новый ПолеКомпоновкиДанных("ТипПроцесса");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоСпринтам(Команда)
	
	ГруппировкаЭлементы		= Список.Группировка.Элементы;
	ГруппировкаЭлементы.Очистить();
 	ЭлементГруппировки		= ГруппировкаЭлементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле	= Новый ПолеКомпоновкиДанных("Спринт");
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеВыполнениеЗаданий(Команда)
	
	ЗаданияСервер.АвтоматическоеВыполнениеЗаданий(Истина);
	ОбновитьФормуСпискаЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеЗавершениеЗаданий(Команда)
	
	ЗаданияСервер.АвтоматическоеЗавершениеЗаданий(Истина);
	ОбновитьФормуСпискаЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеСозданиеРегламентныхЗаданий(Команда)
	
	ЗаданияСервер.АвтоматическоеСозданиеРегламентныхЗаданийИнтерактивно(Истина);
	ОбновитьФормуСпискаЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДополнительныеСведенияПоЗаданию()	
	
	Попытка
		ТекущееЗадание = Элементы.Список.ТекущаяСтрока;
		Если НЕ ЗначениеЗаполнено(ТекущееЗадание) ИЛИ ТипЗнч(ТекущееЗадание) <> Тип("ДокументСсылка.Задание") Тогда
			ТекущееЗадание = Неопределено;
		КонецЕсли;
		
	Исключение
		ТекущееЗадание = Неопределено;
		
	КонецПопытки;
	
	Если ТекущееЗадание <> Неопределено И ЗначениеЗаполнено(ТекущееЗадание) Тогда
		Если Элементы.ОтображатьДополнительныеСведенияПоЗаданию.Пометка Тогда
			
			Если Элементы.ГруппаБыстрыйПросмотр.ТекущаяСтраница = Элементы.ОписаниеЗадачи Тогда
				СформироватьОписаниеЗадачи(ТекущееЗадание);
			КонецЕсли;
			
			Если Элементы.ГруппаБыстрыйПросмотр.ТекущаяСтраница = Элементы.Комментарии Тогда
				СформироватьСписокКомментариев(ТекущееЗадание);
			КонецЕсли;
			
			ЗаголовокКомментариев = ПолучитьЗаголовокКомментариев(ТекущееЗадание);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительныеСведенияПоЗаданию(Команда)
	
	Элементы.ОтображатьДополнительныеСведенияПоЗаданию.Пометка = 
		НЕ Элементы.ОтображатьДополнительныеСведенияПоЗаданию.Пометка;
	БыстрыйПросмотрЗадания = Элементы.ОтображатьДополнительныеСведенияПоЗаданию.Пометка;
	
	Если НЕ КонтекстноеОткрытие Тогда
		СохранитьНастройкиОтборов();
	КонецЕсли;
	
	ОбновитьВидимость();
	ОбновитьДополнительныеСведенияПоЗаданию();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображениеПанелиНавигации(Команда)
	
	ПанельНавигацииСкрыта = Не ПанельНавигацииСкрыта;
	ОбновитьВидимость();
	Если Не ПанельНавигацииСкрыта Тогда
		ПанельНавигацииРазвернутьВсе();
	КонецЕсли;
	
	СохранитьНастройкиОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиПанелиНавигации()
	
	Если ПанельНавигацииСкрыта Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменениеТекущейСтрокиПанелиНавигации Тогда
		ИзменениеТекущейСтрокиПанелиНавигации = Ложь;
	Иначе 
		ИзменениеТекущейСтрокиПанелиНавигации = Истина;
	КонецЕсли;
	
	ТаблицаОтбора 					= "";
	СтруктураОтбораЗначение 		= Неопределено;
	СтруктураОтбораОписаниеТипов 	= Неопределено;
	ПредставлениеОтбора 			= "";
	СтруктураОтбора 				= Неопределено;
	
	Если Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИнициаторы Тогда
		
		ТекущиеДанные = Элементы.ИнициаторыПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если ТекущиеДанные.ЭтоГруппа И ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				
				Значение = НСтр("ru = 'Все'");
				
			ИначеЕсли НЕ ТекущиеДанные.ЭтоГруппа Тогда
					
				Значение = ТекущиеДанные.Инициатор;
				
			Иначе
				
				Значение = Новый СписокЗначений;
				Для Каждого Стр Из ТекущиеДанные.ПолучитьЭлементы() Цикл
					Значение.Добавить(Стр.Инициатор);
					Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
						Значение.Добавить(Стр2.Инициатор);
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
			ТаблицаОтбора 					= "Инициаторы";
			СтруктураОтбораЗначение 		= Значение;
			СтруктураОтбораОписаниеТипов 	= Неопределено;
			СтруктураОтбора 				= Новый Структура("Значение, ОписаниеТипов", Значение, Неопределено);
			ПредставлениеОтбора 			= ТекущиеДанные.Инициатор;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПроцессы Тогда
		
		ТекущиеДанные = Элементы.ПроцессыПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ЭтоГруппа И ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				
				ТаблицаОтбора 					= "Процессы";
				СтруктураОтбораЗначение 		= НСтр("ru = 'Все'");
				СтруктураОтбораОписаниеТипов 	= Неопределено;
				СтруктураОтбора 				= Новый Структура("Значение,ОписаниеТипов", НСтр("ru = 'Все'"), 
					Неопределено);
				ПредставлениеОтбора 			= ТекущиеДанные.Процесс;
				
			ИначеЕсли ТекущиеДанные.ЭтоГруппа Тогда
				
				Значение = Новый СписокЗначений;
				Для Каждого Стр Из ТекущиеДанные.ПолучитьЭлементы() Цикл
					Значение.Добавить(Стр.Процесс);
				КонецЦикла;
				
				ТаблицаОтбора 					= "Процессы";
				СтруктураОтбораЗначение 		= Значение;
				СтруктураОтбораОписаниеТипов 	= Неопределено;
				СтруктураОтбора 				= Новый Структура("Значение,ОписаниеТипов", Значение, Неопределено);
				ПредставлениеОтбора 			= ТекущиеДанные.Процесс;
				
			Иначе
				
				ТаблицаОтбора 					= "Процессы";
				СтруктураОтбораЗначение 		= ТекущиеДанные.Процесс;
				СтруктураОтбораОписаниеТипов 	= ТекущиеДанные.ТекущийЭтап;
				СтруктураОтбора 				= Новый Структура("Значение,ТекущийЭтап", ТекущиеДанные.Процесс, 
					ТекущиеДанные.ТекущийЭтап);
				ПредставлениеОтбора 			= ТекущиеДанные.Процесс;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПриоритеты Тогда
		
		ТекущиеДанные = Элементы.ПриоритетыПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ЭтоГруппа Тогда
				
				Если ИмяНавигации <> "Приоритеты" ИЛИ ОтборНавигацииЗначение <> НСтр("ru = 'Все'") Тогда 
					
					ТаблицаОтбора 				= "Приоритеты";
					СтруктураОтбораЗначение 	= НСтр("ru = 'Все'");
					СтруктураОтбораОписаниеТипов= Неопределено;
					СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", НСтр("ru = 'Все'"), 
						Неопределено);
					ПредставлениеОтбора 		= ТекущиеДанные.Приоритет;
					
				КонецЕсли;
				
			Иначе
				
				ТаблицаОтбора 				= "Приоритеты";
				СтруктураОтбораЗначение 	= ТекущиеДанные.Приоритет;
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", ТекущиеДанные.Приоритет, 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные.Приоритет;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИсполнители Тогда
		
		ТекущиеДанные = Элементы.ИсполнителиПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ЭтоГруппа Тогда
				
				ТаблицаОтбора 				= "Исполнители";
				СтруктураОтбораЗначение 	= НСтр("ru = 'Все'");
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", НСтр("ru = 'Все'"), 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные.Исполнитель;
				
			Иначе
				
				ТаблицаОтбора 				= "Исполнители";
				СтруктураОтбораЗначение 	= ТекущиеДанные.Исполнитель;
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", ТекущиеДанные.Исполнитель, 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные.Исполнитель;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаГруппы Тогда
		
		ТекущиеДанные = Элементы.ГруппыЗаданийПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			
				ТаблицаОтбора 				= "ГруппаЗадания";
				СтруктураОтбораЗначение 	= НСтр("ru = 'Все'");
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение, ОписаниеТипов", НСтр("ru = 'Все'"), 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные;
				
		Иначе
			
			ТаблицаОтбора 					= "ГруппаЗадания";
			СтруктураОтбораЗначение 		= ТекущиеДанные.ГруппаЗадания;
			СтруктураОтбораОписаниеТипов	= Неопределено;
			СтруктураОтбора 				= Новый Структура("Значение, ОписаниеТипов", ТекущиеДанные.ГруппаЗадания, 
				Неопределено);
			ПредставлениеОтбора 			= ТекущиеДанные.ГруппаЗадания;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаТипыПроцессов Тогда
		
		ТекущиеДанные = Элементы.ТипыПроцессовПанелиНавигации.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ЭтоГруппа Тогда
								
				ТаблицаОтбора 				= "ТипыПроцессов";
				СтруктураОтбораЗначение 	= НСтр("ru = 'Все'");
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", НСтр("ru = 'Все'"), 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные.ТипПроцесса;
				
			Иначе
				
				ТаблицаОтбора 				= "ТипыПроцессов";
				СтруктураОтбораЗначение 	= ТекущиеДанные.ТипПроцесса;
				СтруктураОтбораОписаниеТипов= Неопределено;
				СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", ТекущиеДанные.ТипПроцесса, 
					Неопределено);
				ПредставлениеОтбора 		= ТекущиеДанные.ТипПроцесса;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаОтбора <> ИмяНавигации ИЛИ СтруктураОтбораЗначение <> ОтборНавигацииЗначение 
		ИЛИ СтруктураОтбораОписаниеТипов <> ОтборНавигацииОписаниеТипов Тогда
		
		ИзменитьОтборПоПанелиНавигации(ТаблицаОтбора, СтруктураОтбора);
		СохранитьТекущееАктивноеЗначениеВНастройках(ТаблицаОтбора, ПредставлениеОтбора);
		
		ИмяНавигации 				= ТаблицаОтбора;
		ОтборНавигацииЗначение 		= СтруктураОтбораЗначение;
		ОтборНавигацииОписаниеТипов	= СтруктураОтбораОписаниеТипов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееАктивноеЗначениеВНастройках(ИмяДерева, Значение)
	
	НайденныеСтроки =  НастройкиДеревьевПанелиНавигации.НайтиСтроки(Новый Структура("ИмяДерева",ИмяДерева));
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		СтрокаДереваНастроек = НайденныеСтроки[0];
		
	ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
		СтрокаДереваНастроек = НайденныеСтроки[0];
		
		Для Инд = 1 По НайденныеСтроки.Количество()-1 Цикл
			НастройкиДеревьевПанелиНавигации.Удалить(НайденныеСтроки[инд]);
		КонецЦикла;
		
	Иначе
		СтрокаДереваНастроек = НастройкиДеревьевПанелиНавигации.Добавить();
		СтрокаДереваНастроек.ИмяДерева = ИмяДерева;
		
	КонецЕсли;
	
	СтрокаДереваНастроек.ТекущееЗначение = Значение;

КонецПроцедуры 

&НаСервере
Процедура ПереключитьПанельНавигацииСервер(ИмяКоманды)
	
	НеОтрабатыватьАктивизациюПанелиНавигации = Истина;
	
	МассиСсылок = ДинамическийСписокВТаблицуЗначений();
	
	Если ИмяКоманды = "УстановитьВариантНавигацииПоИнициатору" Тогда
		ЗаполнитьПанельИнициаторов(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИнициаторы;
		
	ИначеЕсли ИмяКоманды = "УстановитьВариантНавигацииПоПроцессу" Тогда
		ЗаполнитьПанельПроцессов(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПроцессы;
		
	ИначеЕсли ИмяКоманды = "УстановитьВариантНавигацииПоПриоритету" Тогда
		ЗаполнитьПанельПриоритетов(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПриоритеты;
		
	ИначеЕсли ИмяКоманды = "УстановитьВариантНавигацииПоИсполнителю" Тогда
		ЗаполнитьПанельИсполнителей(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИсполнители;
		
	ИначеЕсли ИмяКоманды = "УстановитьВариантНавигацииПоГруппамЗаданий" Тогда
		ЗаполнитьПанельГруппыЗаданий(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаГруппы;
		
	ИначеЕсли ИмяКоманды = "УстановитьВариантНавигацииПоТипамПроцессов" Тогда
		ЗаполнитьПанельТипыПроцессов(МассиСсылок);
		Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаТипыПроцессов;
		
	КонецЕсли;
	
	ПанельНавигацииСкрыта 		= Ложь;
	ИмяТекущейПанелиНавигации 	= Элементы.СтраницыПанелиНавигации.ТекущаяСтраница.Имя;
	ОбновитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьПанельНавигации(Команда)
		
	ПереключитьПанельНавигацииСервер(Команда.Имя);
	ПанельНавигацииРазвернутьВсе();
	СохранитьНастройкиОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантНавигацииПоИнициатору(Команда)
	
	ПереключитьПанельНавигации(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантНавигацииПоИсполнителю(Команда)
	
	ПереключитьПанельНавигации(Команда);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантНавигацииПоПриоритету(Команда)
	
	ПереключитьПанельНавигации(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантНавигацииПоПроцессу(Команда)
	
	ПереключитьПанельНавигации(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантНавигацииПоГруппамЗаданий(Команда)
	
	ПереключитьПанельНавигации(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантНавигацииПоТипамПроцессов(Команда)
	
	ПереключитьПанельНавигации(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьПанельНавигацииНаКлиенте();
	ОбновитьФормуСпискаЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПодзадачиСотрудникам(Команда)
	
	ДокументЗадание = ТекущееЗадание;
	Если ДокументЗадание <> Неопределено И ТипЗнч(ДокументЗадание) = Тип("ДокументСсылка.Задание") Тогда
		
		Если ИзменениеЗавершенногоЗаданияЗапрещено(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, Нстр("ru = 'Задание завершено. Создание подзадач не возможно.'"));
			Возврат;
		КонецЕсли;
		
		Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Вы не можете создать подзадачи для данного задания.'"));
			Возврат;
		КонецЕсли;
		
		СтруктураЗадачи = ПолучитьСтруктуруЗадачиНаСервере();
		Если СтруктураЗадачи <> Неопределено Тогда
			ОткрытьФорму("Документ.Задание.Форма.ФормаСозданияПодзаданий", 
				СтруктураЗадачи,,,,, Новый ОписаниеОповещения("СоздатьПодзадачиСотрудникамФрагментЗавершение", 
					ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура СоздатьПодзадачиСотрудникамФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПодпроцесс(Команда)
	
	СтруктураЗадачи = ПолучитьСтруктуруЗадачиНаСервере();
	Если СтруктураЗадачи <> Неопределено Тогда
		СтруктураОбъекта = Новый Структура;
		СтруктураОбъекта.Вставить("Дата",			ПолучитьДатуНаСервере());
		СтруктураОбъекта.Вставить("Процесс",		СтруктураЗадачи.Процесс);
		СтруктураОбъекта.Вставить("Тема",			СтруктураЗадачи.Тема);
		СтруктураОбъекта.Вставить("Родитель",		СтруктураЗадачи.Задание);
		ОткрытьФорму("Документ.Задание.Форма.ФормаДокумента", 
			Новый Структура("ОткрываетсяИзВне, Объект", Истина, СтруктураОбъекта),,Новый УникальныйИдентификатор(),);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаЭтап(Команда)
	
	ДокументЗадание = ТекущееЗадание;
	Если ДокументЗадание <> Неопределено И ТипЗнч(ДокументЗадание) = Тип("ДокументСсылка.Задание") Тогда
		
		Если ИзменениеЗавершенногоЗаданияЗапрещено(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, Нстр("ru = 'Задание завершено. Изменение этапа в задании не возможно.'"));
			Возврат;
		КонецЕсли;
		
		Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Вы не можете изменить этап у данного задания.'"));
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеревестиНаЭтапЗавершение", ЭтотОбъект, ДокументЗадание);
		ПараметрыФормы		= Новый Структура;
		ПараметрыФормы.Вставить("СсылкаНаОбъект", ДокументЗадание);
		ПараметрыФормы.Вставить("ЗаписатьОбъект", Истина);
		ПараметрыФормы.Вставить("ПереданаСсылка", Истина);
		ОткрытьФорму("ОбщаяФорма.ФормаПереводаЗаданияНаЭтап", ПараметрыФормы, ЭтаФорма,,,, 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаЭтапЗавершение(Результат, ДополнительныеПараметры) Экспорт
			
	Если Результат <> Неопределено И Результат.ВыполненПеревод Тогда
		Оповестить("ОбновитьФормуСпискаЗаданий");
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыбратьИсполнителя(Команда)
	
	ДокументЗадание = ТекущееЗадание;
	Если ДокументЗадание <> Неопределено И ТипЗнч(ДокументЗадание) = Тип("ДокументСсылка.Задание") Тогда
		
		Если ИзменениеЗавершенногоЗаданияЗапрещено(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, Нстр("ru = 'Задание завершено. Изменение исполнителя в задании не возможно.'"));
			Возврат;
		КонецЕсли;
		
		Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Вы не можете изменить исполнителя у данного задания.'"));
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИсполнителяФормаЗавершение", ЭтотОбъект, ДокументЗадание);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИсполнителя", Новый Структура("СсылкаНаОбъект", ДокументЗадание),
			ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьИсполнителяИзДиалогаНаСервере(Знач ЗаданиеСсылка, Знач Результат)
	
	Если ИзменениеЗавершенногоЗаданияЗапрещено(ЗаданиеСсылка) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(Нстр("ru = '%1 завершено. Изменение исполнителя в задании не возможно.'"), Результат));
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ЗаданиеСсылка) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Вы не можете изменить текущего исполнителя у %1'"), Результат));
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ЗаданиеОбъект 						= ЗаданиеСсылка.ПолучитьОбъект();
		ЗаданиеОбъект.ТекущийИсполнитель 	= Результат;
		ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителяФормаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого ЗаданиеСсылка Из Элементы.Список.ВыделенныеСтроки Цикл
			ВыбратьИсполнителяИзДиалогаНаСервере(ЗаданиеСсылка, Результат);
		КонецЦикла;
		Оповестить("ОбновитьФормуСпискаЗаданий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителяЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = "ВыбратьПользователяИзСправочника" Тогда
			ВыбратьИсполнителяИзСправочника();
		ИначеЕсли
			ВыбранныйЭлемент.Значение = "НеВыбран" Тогда ИсполнительНеВыбран();
		Иначе
			СтруктураПользователя = Новый Структура;
			СтруктураПользователя.Вставить("Имя", ВыбранныйЭлемент.Значение);
			ВыбратьИсполнителяНаСервере(СтруктураПользователя);
		КонецЕсли;
	КонецЕсли;
	Оповестить("ОбновитьФормуСпискаЗаданий");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
	
	ДокументЗадание = ТекущееЗадание;
	Если ДокументЗадание <> Неопределено И ТипЗнч(ДокументЗадание)=Тип("ДокументСсылка.Задание") Тогда
		
		мТолькоПросмотр = ИзменениеЗавершенногоЗаданияЗапрещено(ДокументЗадание) 
			ИЛИ НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ДокументЗадание);
			
		Структура	   = Новый Структура;
		Структура.Вставить("ВладелецФайла",  ТекущееЗадание);
		Структура.Вставить("ТолькоФайлы", 	 Истина);
		Структура.Вставить("ТолькоПросмотр", мТолькоПросмотр);
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", Структура, 
			ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.Независимый);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданиеПоНомеру(Команда)
	
	Стр = "";
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ОткрытьЗаданиеПоНомеруЗавершение",
		ЭтотОбъект, Новый Структура("Стр", Стр)), Стр, НСтр("ru = 'Введите № задачи'"), 20, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданиеПоНомеруЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Стр = ?(Строка = Неопределено, ДополнительныеПараметры.Стр, Строка);
	
	Если Стр <> Неопределено И СокрЛП(Стр) <> "" Тогда
		
		Значение = НайтиЗаданиеПоНомеру(Стр);
		Если ЗначениеЗаполнено(Значение) Тогда
			ПоказатьЗначение(, Значение);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Задание с номером ""*%1"" не найдено'"),
				Стр));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьЗадание(Команда)
	
	МассивЗаданий = Новый Массив;
	МассивЗаданий = Элементы.Список.ВыделенныеСтроки;
	ИтоговыйМассивЗаданий = Новый Массив;
	Для Каждого СтрокаМассива Из МассивЗаданий Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("ДокументСсылка.Задание") Тогда
			ИтоговыйМассивЗаданий.Добавить(СтрокаМассива);
		КонецЕсли;
	КонецЦикла;
	
	//@skip-warning
	Результат = УправлениеITОтделом8УФКлиент.ПодсветитьМассивОбъектов(ИтоговыйМассивЗаданий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПодсвеченным(Команда)
	
	ОтборПоПодсвеченнымНаСервере();
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЧерная(Команда)
	
	ОтметитьКнопкой(ПредопределенноеЗначение("Перечисление.ОтметкиОбъектов.Черная"));
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСиняя(Команда)
	
	ОтметитьКнопкой(ПредопределенноеЗначение("Перечисление.ОтметкиОбъектов.Синяя"));
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗеленая(Команда)
	
	ОтметитьКнопкой(ПредопределенноеЗначение("Перечисление.ОтметкиОбъектов.Зеленая"));
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаКрасная(Команда)
	
	ОтметитьКнопкой(ПредопределенноеЗначение("Перечисление.ОтметкиОбъектов.Красная"));
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЖелтая(Команда)
	
	ОтметитьКнопкой(ПредопределенноеЗначение("Перечисление.ОтметкиОбъектов.Желтая"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтметкуКнопкой(Команда)
	
	ОтметитьКнопкой(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЧернаяКнопка(Команда)
	
	УстановитьОтборПоОтметкеНаСервере(1, "ОтборЧернаяКнопка");
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСиняяКнопка(Команда)
	
	УстановитьОтборПоОтметкеНаСервере(2, "ОтборСиняяКнопка");
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗеленаяКнопка(Команда)
	
	УстановитьОтборПоОтметкеНаСервере(3, "ОтборЗеленаяКнопка");
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКраснаяКнопка(Команда)
	
	УстановитьОтборПоОтметкеНаСервере(4, "ОтборКраснаяКнопка");
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЖелтаяКнопка(Команда)
	
	УстановитьОтборПоОтметкеНаСервере(5, "ОтборЖелтаяКнопка");
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьВПроблему(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив;
	Для Каждого Эл из Элементы.Список.ВыделенныеСтроки Цикл
		Массив.Добавить(Элементы.Список.ДанныеСтроки(Эл).Ссылка);
	КонецЦикла;	
	
	ФормаПроблемы = ПолучитьФорму("Документ.Проблема.ФормаОбъекта");
	ДанныеФормыПроблемы = ФормаПроблемы.Объект;
	ОбъединитьВПроблемуНаСервере(ДанныеФормыПроблемы, Массив);
	КопироватьДанныеФормы(ДанныеФормыПроблемы, ФормаПроблемы.Объект);
	ФормаПроблемы.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМетрики(Команда)
	
	МетрикиВызовСервера.РассчитатьМетрики();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список, Список);
КонецПроцедуры

&НаКлиенте
Процедура ВНачалоОчереди(Команда)
	
	МассивВыделенныхСтрок = Элементы.Список.ВыделенныеСтроки;
	ПереместитьЗаданияВОчереди(МассивВыделенныхСтрок, Команда.Имя);
	
	Оповестить("ОбновитьФормуСпискаЗаданий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВверхВОчереди(Команда)
	
	МассивВыделенныхСтрок = Элементы.Список.ВыделенныеСтроки;
	ПереместитьЗаданияВОчереди(МассивВыделенныхСтрок, Команда.Имя);
	
	Оповестить("ОбновитьФормуСпискаЗаданий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВнизВОчереди(Команда)
	
	МассивВыделенныхСтрок = Элементы.Список.ВыделенныеСтроки;
	ПереместитьЗаданияВОчереди(МассивВыделенныхСтрок, Команда.Имя);
	
	Оповестить("ОбновитьФормуСпискаЗаданий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВКонецОчереди(Команда)
	
	МассивВыделенныхСтрок = Элементы.Список.ВыделенныеСтроки;
	ПереместитьЗаданияВОчереди(МассивВыделенныхСтрок, Команда.Имя);
	
	Оповестить("ОбновитьФормуСпискаЗаданий");
	
КонецПроцедуры

&НаКлиенте
Процедура МастерРегистрацииЗаданий(Команда)
	
	ОткрытьФорму("Обработка.МастерРегистрацииЗаданий.Форма.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсемПросмотрено(Команда)
	
	ТекстВопроса 		= НСтр("ru = 'Всем заданиям будет установлен признак ""Просмотрено"". Продолжить?'");
	ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеВопросаУстановитьПросмотрено", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,
		НСтр("ru = 'Все просмотрено'")); 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПанельОтборов

&НаКлиенте
Процедура СкрытьПоказатьПанельОтборов(Команда)
	
	НовоеЗначениеВидимости 								= Не Элементы.ПанельОтборов.Видимость;
	Элементы.ПанельОтборов.Видимость					= НовоеЗначениеВидимости;
	Элементы.ДекорацияПоказатьПанельОтборов.Видимость	= Не НовоеЗначениеВидимости;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	ДопПараметры			= Новый Структура;
	ДопПараметры.Вставить("ОписаниеОповещенияОВыбореПериода", "Задание_ФормаСписка_УстановленОтборПериод");
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, ДопПараметры);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборамиВызовСервера.СохранитьНастройкиОтборов(ЭтотОбъект);
	ИмяКлючаОбъекта = СтрЗаменить(ЭтотОбъект.ИмяФормы, ".", "");
	
	// Статус задания.	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
			ИмяКлючаОбъекта + "_ОтборСтатусЗадания", 
			ОтборСтатусЗадания);
			
	// Отбор строка поиска.
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
			ИмяКлючаОбъекта + "_ОтборСтрокаПоиска", 
			ОтборСтрокаПоиска);
			
	// Список выбора ОтборСтрокаПоиска.	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
			ИмяКлючаОбъекта + "_ОтборСтрокаПоискаСписокВыбора", 
			Элементы.ОтборСтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());
				
	// Имя панели навигации.		
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
			ИмяКлючаОбъекта + "_ИмяТекущейПанелиНавигации",
			ИмяТекущейПанелиНавигации);
			
	// Видимость панели отборов.		
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
			ИмяКлючаОбъекта + "_ВидимостьПанелиОтборов", 
			Элементы.ПанельОтборов.Видимость);
			
	// ПанельНавигацииСкрыта.		
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
			ИмяКлючаОбъекта + "_ПанельНавигацииСкрыта", 
			ПанельНавигацииСкрыта);
	
	// Быстрый просмотр задания.
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
			ИмяКлючаОбъекта + "_БыстрыйПросмотрЗадания", 
			БыстрыйПросмотрЗадания);

	
	ЭтотОбъект.Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	
	РаботаСОтборамиВызовСервера.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список);
	ИмяКлючаОбъекта		= СтрЗаменить(ЭтотОбъект.ИмяФормы, ".", "");
	ИспользуютсяОтборы	= Ложь;
	
	// Статус задания.	
	мОтборСтатусЗадания	= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, 
		ИмяКлючаОбъекта + "_ОтборСтатусЗадания");
				
	Если Не ПустаяСтрока(мОтборСтатусЗадания) Тогда
			
		ОтборСтатусЗадания = мОтборСтатусЗадания;
		УстановитьОтборСпискаСтатусЗаданияНаСервере(ОтборСтатусЗадания, Ложь);
		ИспользуютсяОтборы = Истина;
		
	КонецЕсли;
	
	// Строка поиска.
	мОтборСтрокаПоиска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, 
		ИмяКлючаОбъекта + "_ОтборСтрокаПоиска");
				
	Если Не ПустаяСтрока(мОтборСтрокаПоиска) Тогда
		
		ОтборСтрокаПоиска = мОтборСтрокаПоиска;
		УстановитьОтборСпискаПоСтрокеПоискаНаСервере(Ложь);
		ИспользуютсяОтборы = Истина;
		
	КонецЕсли;
	
	// Список выбора строки поиска.
	мСписокВыбораСтрокиПоиска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, 
		ИмяКлючаОбъекта + "_ОтборСтрокаПоискаСписокВыбора");
		
	Если ТипЗнч(мСписокВыбораСтрокиПоиска) = Тип("Массив") Тогда
		Элементы.ОтборСтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(мСписокВыбораСтрокиПоиска);
	КонецЕсли;
	
	// Имя панели навигации.
	ИмяТекущейПанелиНавигации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, 
		ИмяКлючаОбъекта + "_ИмяТекущейПанелиНавигации");
		
	Если НЕ ИспользуютсяОтборы  И НЕ ЗначениеЗаполнено(ОтборПериод) Тогда 	
		
		// Видимость панели отборов.
		мЗначениеВидимости = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, 
			ИмяКлючаОбъекта + "_ВидимостьПанелиОтборов");
			
		Если мЗначениеВидимости = Неопределено Тогда
			мЗначениеВидимости = Истина;
		КонецЕсли;
		
		Элементы.ПанельОтборов.Видимость					= мЗначениеВидимости;
		Элементы.ДекорацияПоказатьПанельОтборов.Видимость	= НЕ мЗначениеВидимости;
		
	КонецЕсли;
	
	// ПанельНавигацииСкрыта.
	ПанельНавигацииСкрыта = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, 
		ИмяКлючаОбъекта + "_ПанельНавигацииСкрыта");
	
КонецПроцедуры
	
&НаСервере
Процедура УстановитьОтборСписка(ИмяПоляОтбора, ИмяГруппыРодителя, ЗначениеОтбора)
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяПоляОтбора",				ИмяПоляОтбора);
	ДопПараметры.Вставить("ИмяГруппыРодителя",			ИмяГруппыРодителя);
	ДопПараметры.Вставить("ЗначениеОтбора",				ЗначениеОтбора);
	ДопПараметры.Вставить("ПредставлениеЗначенияОтбора",Строка(ЗначениеОтбора));
	
	РаботаСОтборамиВызовСервера.СоздатьЭлементФормыПоЗначениюОтбора(ЭтотОбъект, ДопПараметры);
	РаботаСОтборамиВызовСервера.УстановитьОтборСписка(ЭтотОбъект, Список, 
		Новый Структура("ИмяПоляОтбора", ИмяПоляОтбора));
		
	Если НЕ КонтекстноеОткрытие Тогда	
		СохранитьНастройкиОтборов();
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборОбработкаНавигационнойСсылки(Элемент, 
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
		
	// Общее.
	СтандартнаяОбработка = Ложь;
	ОтборИД = Сред(Элемент.Имя, СтрДлина("Отбор_") + 1);
	УдалитьЭлементОтбор(ОтборИД);
	
	// Документ "Задание".
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементОтбор(ОтборИД)
	
	РаботаСОтборамиВызовСервера.УдалитьОтборСписка(ЭтотОбъект, Список, Новый Структура("ОтборИД", ОтборИД));
	
	Если НЕ КонтекстноеОткрытие Тогда	
		СохранитьНастройкиОтборов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеОтборы(Команда)
			
	УдалитьОтборы();
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОтборы()
	
	// Общие команды.
	РаботаСОтборамиВызовСервера.УдалитьВсеОтборыСписка(ЭтотОбъект, Список);
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	
	// Форма списка задание.
	ОтборСтрокаПоиска = "";
	Элементы.ОтборСтрокаПоиска.ЦветФона = WebЦвета.Белый;
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		"Ссылка");
	
	ОтборСтатусЗадания = "";
	УдалитьЭлементыОтборовПоСтатусуЗадания();
	
	// Подсвеченные.
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		, НСтр("ru = 'Отбор по подсвеченным'"));
	Элементы.ОтборПоПодсвеченным.Пометка = Ложь;
		
	// Отмеченные кнопками.
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		, НСтр("ru = 'Отбор по отметке'"));
	Элементы.ОтборЧернаяКнопка.Пометка	= Ложь;
	Элементы.ОтборСиняяКнопка.Пометка	= Ложь;
	Элементы.ОтборЗеленаяКнопка.Пометка	= Ложь;
	Элементы.ОтборКраснаяКнопка.Пометка	= Ложь;
	Элементы.ОтборЖелтаяКнопка.Пометка	= Ложь;
	
	Если НЕ КонтекстноеОткрытие Тогда	
		СохранитьНастройкиОтборов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСпискаИсполнительНаСервере(Знач ВыбранноеЗначение)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяПоляОтбора",		"ТекущийИсполнитель");
	ДопПараметры.Вставить("ИмяГруппыРодителя",	"ГруппаОтборИсполнитель");
	
	ТекПользователь =	Пользователи.ТекущийПользователь();
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если ВыбранноеЗначение = (НСтр("ru = 'Я'")) Тогда
			ЗначениеОтбора = ТекПользователь;
			
		ИначеЕсли ВыбранноеЗначение = (НСтр("ru = 'Мои группы'")) Тогда
			ЗначениеОтбора = УправлениеITОтделом8УФ.ГруппыТекущегоПользователя();
			
		ИначеЕсли ВыбранноеЗначение = (НСтр("ru = 'Подчиненные'")) Тогда
			ЗначениеОтбора = УправлениеITОтделом8УФ.СписокПодчиненныхСотрудников(ТекПользователь, Ложь);
			
		Иначе
			ВыбранноеЗначение	= НСтр("ru = '<Не выбран>'");
			ЗначениеОтбора		= Новый Массив;
			ЗначениеОтбора.Добавить(Справочники.Пользователи.ПустаяСсылка());
			ЗначениеОтбора.Добавить(Справочники.ГруппыПользователей.ПустаяСсылка());
			ЗначениеОтбора.Добавить(Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		ЗначениеОтбора = ВыбранноеЗначение;
		
	КонецЕсли;
	
	ДопПараметры.Вставить("ЗначениеОтбора",				ЗначениеОтбора);
	ДопПараметры.Вставить("ПредставлениеЗначенияОтбора", Строка(ВыбранноеЗначение));
	
	РаботаСОтборамиВызовСервера.СоздатьЭлементФормыПоЗначениюОтбора(ЭтотОбъект, ДопПараметры);
	РаботаСОтборамиВызовСервера.УстановитьОтборСписка(ЭтотОбъект, Список, 
		Новый Структура("ИмяПоляОтбора", "ТекущийИсполнитель"));

	Если НЕ КонтекстноеОткрытие Тогда	
		СохранитьНастройкиОтборов();
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьОтборСпискаСтатусЗаданияНаСервере(Знач ВыбранноеЗначение, Знач СохранитьНастройки = Истина)
	
	УдалитьЭлементыОтборовПоСтатусуЗадания(СохранитьНастройки);
	
	Если ВыбранноеЗначение = НСтр("ru = 'Новые'")
		ИЛИ ВыбранноеЗначение = НСтр("ru = 'ВРаботе'")
		ИЛИ ВыбранноеЗначение = НСтр("ru = 'НовыеВРаботе'") 
		ИЛИ ВыбранноеЗначение = НСтр("ru = 'Приостановлено'") Тогда
		
		ЗначениеОтбора		= Новый Массив;
		
		Если ВыбранноеЗначение = НСтр("ru = 'Новые'") Тогда
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Новый);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Бэклог);
			
		ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'ВРаботе'") 
			ИЛИ ВыбранноеЗначение = НСтр("ru = 'В работе'") Тогда
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подготовка);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.ВРаботе);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подпроцесс);
		
		ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'НовыеВРаботе'") Тогда
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Новый);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Бэклог);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подготовка);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.ВРаботе);
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подпроцесс);
			
		ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'Приостановлено'") Тогда
			ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Приостановка);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"СостояниеЭтапа", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,	, Истина);

	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'Выполненные'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Выполнено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);

	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'Завершенные'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Завершено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'ВыполненныНоНеЗавершенные'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Выполнено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Завершено", Ложь, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'Просрочено'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Просрочено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'ПросроченоНовыеВРаботе'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Просрочено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
		ЗначениеОтбора = Новый Массив;
		ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Новый);
		ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Бэклог);
		ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подготовка);
		ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.ВРаботе);
		ЗначениеОтбора.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подпроцесс);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"СостояниеЭтапа", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,	, Истина);
		
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'ПросроченоВыполненные'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Просрочено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Выполнено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'СрокСегодня'") Тогда
		мСтандартныйПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
		
		ГруппаОтбораИ =	Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КрайняяДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаНачала;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КрайняяДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаОкончания;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'СрокЗавтра'") Тогда
		мСтандартныйПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.Завтра);
		
		ГруппаОтбораИ =	Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КрайняяДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаНачала;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КрайняяДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаОкончания;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'СрокНеделя'") Тогда
		мСтандартныйПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.Следующие7Дней);
		
		ГруппаОтбораИ =	Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КрайняяДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаНачала;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("КрайняяДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаОкончания;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'ВыполненныеЗаНеделю'") Тогда
		мСтандартныйПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.Последние7Дней);
		
		ГруппаОтбораИ =	Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаНачала;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбора					= ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаВыполнения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= мСтандартныйПериод.ДатаОкончания;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Выполнено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);

	ИначеЕсли ВыбранноеЗначение = НСтр("ru = 'Измененные'") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Изменено", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);		
		
	КонецЕсли;
	
	Если НЕ КонтекстноеОткрытие И СохранитьНастройки Тогда	
		СохранитьНастройкиОтборов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыОтборовПоСтатусуЗадания(Знач СохранятьНастройки = Истина)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, 
		"СостояниеЭтапа");
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		"Выполнено");
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		"Завершено");
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		"Просрочено");

	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		"Изменено");
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "КрайняяДатаВыполнения");
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "ДатаВыполнения");
	
	Если НЕ КонтекстноеОткрытие И СохранятьНастройки Тогда	
		СохранитьНастройкиОтборов();
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьОтборСпискаПоСтрокеПоискаНаСервере(Знач СохранитьНастройки = Истина)
	
	Если ПустаяСтрока(ОтборСтрокаПоиска) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		"Ссылка");
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Задание.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.Задание КАК Задание
			|ГДЕ
			|	 ИСТИНА
			|	И &ДопУсловия";
	
		ДопУсловия = "";
		ЗаданияСервер.УстановитьПараметрыЗапросаПоСтрокеПоиска(ОтборСтрокаПоиска, Запрос, ДопУсловия);
	
		Если СтрНайти(Запрос.Текст, "&ДопУсловия") > 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия", ДопУсловия);
		Иначе
			Запрос.УстановитьПараметр("ДопУсловия", Истина);
		КонецЕсли;
	
		МассивЗаданий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Ссылка", МассивЗаданий, ВидСравненияКомпоновкиДанных.ВСписке,	, Истина);
		
		Если МассивЗаданий.Количество() = 0 Тогда
			Элементы.ОтборСтрокаПоиска.ЦветФона = WebЦвета.Розовый;
		Иначе
			Элементы.ОтборСтрокаПоиска.ЦветФона = WebЦвета.Белый;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ КонтекстноеОткрытие И СохранитьНастройки Тогда	
		СохранитьНастройкиОтборов();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ОбластьВставкиПоляРекурсивно(ОбластьВставкиПоля)
	
	Если ОбластьВставкиПоля.Структура.Количество() = 0 Тогда
		Возврат ОбластьВставкиПоля.Выбор.Элементы;
		
	Иначе
		Возврат ОбластьВставкиПоляРекурсивно(ОбластьВставкиПоля.Структура[0]);
		
	КонецЕсли;
	
КонецФункции	

&НаСервере
Функция ДинамическийСписокВТаблицуЗначений()
	
	// Получаем схема компановки данных (здесь хранится текст запроса).
	Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	// Получаем настройки пользователя (отборы, сортировки и т.п.).
	Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
		
	Если Настройки.Структура[0].Структура.Количество() > 0 Тогда // есть группировки.
		ОбластьВставкиПоля = ОбластьВставкиПоляРекурсивно(Настройки.Структура[0]);
	Иначе
		ОбластьВставкиПоля = Настройки.Структура[0].Выбор.Элементы;
	КонецЕсли;
	
	НовоеПолеСсылка				= Новый ПолеКомпоновкиДанных("Ссылка");
	НовоеПоле 					= ОбластьВставкиПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование 	= Истина;
	НовоеПоле.Поле				= НовоеПолеСсылка;
	НовоеПоле.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	// Удаляем отбор панели навигации, чтобы не влиял на подсчет.
	Для Каждого Элм Из Настройки.Отбор.Элементы Цикл
		Если Элм.Представление = "ОтборПанелиНавигации" Тогда
			Настройки.Отбор.Элементы.Удалить(Элм);
		КонецЕсли;
	КонецЦикла;
		
	// Выводим динамический список в таблицу значений.
	КомпоновщикМакета	= Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки		= КомпоновщикМакета.Выполнить(Схема, Настройки, , , 
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат		= ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Возвращаем полученную таблицу значений.
	Возврат Результат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПанельНавигацииНаКлиенте()
	
	ОбновитьПанельНавигации();
	ПанельНавигацииРазвернутьВсе();
	
КонецПроцедуры	

#КонецОбласти

&НаСервере
Процедура ОбновитьВидимость()
	
	// Вид "Список задач".
	Элементы.ОтображатьДополнительныеСведенияПоЗаданию.Пометка = БыстрыйПросмотрЗадания;		
	Элементы.ГруппаПанельНавигации.Видимость				= НЕ ПанельНавигацииСкрыта;
	КомандаИзменитьОтображениеПанелиНавигации = Команды.Найти("ИзменитьОтображениеПанелиНавигации");
	КомандаОтображатьДополнительныеСведенияПоЗаданию = Команды.Найти("ОтображатьДополнительныеСведенияПоЗаданию");
	
	Если ПанельНавигацииСкрыта Тогда
		Элементы.ИзменитьОтображениеПанелиНавигации.Картинка = БиблиотекаКартинок.СтрелкаВправо;
		КомандаИзменитьОтображениеПанелиНавигации.Подсказка = НСтр("ru = 'Показать панель навигации'");
		КомандаИзменитьОтображениеПанелиНавигации.Заголовок = НСтр("ru = 'Показать панель навигации'");		
	Иначе
		Элементы.ИзменитьОтображениеПанелиНавигации.Картинка = БиблиотекаКартинок.СтрелкаВлево;
		КомандаИзменитьОтображениеПанелиНавигации.Подсказка = НСтр("ru = 'Скрыть панель навигации'");
		КомандаИзменитьОтображениеПанелиНавигации.Заголовок = НСтр("ru = 'Скрыть панель навигации'");		
	КонецЕсли;

	Элементы.ГруппаБыстрыйПросмотр.Видимость = Элементы.ОтображатьДополнительныеСведенияПоЗаданию.Пометка;
	Если БыстрыйПросмотрЗадания Тогда
		КомандаОтображатьДополнительныеСведенияПоЗаданию.Подсказка = НСтр("ru = 'Скрыть ""Быстрый просмотр задания""'");
		КомандаОтображатьДополнительныеСведенияПоЗаданию.Заголовок = НСтр("ru = 'Скрыть ""Быстрый просмотр задания""'");		
	Иначе
		КомандаОтображатьДополнительныеСведенияПоЗаданию.Подсказка = 
			НСтр("ru = 'Отображать ""Быстрый просмотр задания""'");
		КомандаОтображатьДополнительныеСведенияПоЗаданию.Заголовок = 
			НСтр("ru = 'Отображать ""Быстрый просмотр задания""'");
	КонецЕсли;
	
	УстановитьЗаголовокВидаПанелиНавигации();
	
	ЕстьПравоВыполненияЗадания 						= УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskВыполнениеЗаданий") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава");
		
	Элементы.КнопкаПеревестиНаЭтап.Видимость 		= ЕстьПравоВыполненияЗадания;
	Элементы.КнопкаВыбратьИсполнителя.Видимость		= ЕстьПравоВыполненияЗадания;
	Элементы.СписокКонтекстноеМенюВыбратьИсполнителя.Видимость = ЕстьПравоВыполненияЗадания;
	Элементы.СоздатьПодзадачиСотрудникам.Видимость  = ЕстьПравоВыполненияЗадания;
	Элементы.ПодсветитьЗадание.Видимость			= ЕстьПравоВыполненияЗадания;
	Элементы.СписокОткрытьЗаданиеПоНомеру.Видимость = ЕстьПравоВыполненияЗадания;
	Элементы.МастерРегистрацииЗаданий.Видимость		= ЕстьПравоВыполненияЗадания;
	
	Элементы.ОбъединитьВПроблему.Видимость			= 
		УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИспользоватьПроблемы")
		И ЕстьПравоВыполненияЗадания;
		
	ЕстьПравоИзменения								= УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава");
	Элементы.ИзменитьВыделенные.Видимость			= ЕстьПравоИзменения;
	ПредставлениеПериода	= РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	
	// Очередь заданий.
	ПравоУправлятьОчередью	= УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskРаспределениеЗаданий")
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава");
	Элементы.СписокКонтекстноеМенюОчередь.Видимость = ПравоУправлятьОчередью;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучениеИОтправкаЭлектронныхПисемНаСервере()
	
	УправлениеЭлектроннойПочтой.ПолучениеИОтправкаЭлектронныхПисем();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокВидаПанелиНавигации(ЗначениеОтбора = Неопределено)
	
	Для Каждого ПодчиненныйЭлемент Из Элементы.ВыборВариантаНавигации.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("КнопкаФормы") Тогда
			ПодчиненныйЭлемент.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ПанельНавигацииСкрыта Тогда
		Если ПустаяСтрока(ЗаголовокПанелиНавигации) Тогда
			ЗаголовокПанелиНавигации = " ";
		КонецЕсли;
		Элементы.ВыборВариантаНавигации.Заголовок = ЗаголовокПанелиНавигации;
		Элементы.ВыборВариантаНавигации.Подсказка = ЗаголовокПанелиНавигацииПодсказка;
	Иначе
	
		Если Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИнициаторы Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По инициаторам'");
			Элементы.УстановитьВариантНавигацииПоИнициатору.Пометка = Истина;
			
		ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПроцессы Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По процессам'");
			Элементы.УстановитьВариантНавигацииПоПроцессу.Пометка = Истина;
						
		ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаПриоритеты Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По приоритетам'");
			Элементы.УстановитьВариантНавигацииПоПриоритету.Пометка = Истина;
			
		ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаИсполнители Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По исполнителям'");
			Элементы.УстановитьВариантНавигацииПоИсполнителю.Пометка = Истина;
			
		ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаГруппы Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По группам'");
			Элементы.УстановитьВариантНавигацииПоГруппамЗаданий.Пометка = Истина;
		
		ИначеЕсли Элементы.СтраницыПанелиНавигации.ТекущаяСтраница = Элементы.СтраницаТипыПроцессов Тогда
			
			ЗаголовокПанелиНавигации = НСтр("ru = 'По типам'");
			Элементы.УстановитьВариантНавигацииПоТипамПроцессов.Пометка = Истина;
			
		КонецЕсли;
		
		Элементы.ВыборВариантаНавигации.Заголовок = ЗаголовокПанелиНавигации;
		Элементы.ВыборВариантаНавигации.Подсказка = НСтр("ru = 'Выбор варианта...'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельНавигации()
	
	МассивСсылок 					= ДинамическийСписокВТаблицуЗначений();
	ТекущаяСтраницаПанелиНавигации	= Элементы.СтраницыПанелиНавигации.ТекущаяСтраница;
	
	Если ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаИнициаторы Тогда
		ЗаполнитьПанельИнициаторов(МассивСсылок);
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаИсполнители Тогда
		ЗаполнитьПанельИсполнителей(МассивСсылок);
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаПриоритеты Тогда
		ЗаполнитьПанельПриоритетов(МассивСсылок);
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаПроцессы Тогда
		ЗаполнитьПанельПроцессов(МассивСсылок);
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаТипыПроцессов Тогда
		ЗаполнитьПанельТипыПроцессов(МассивСсылок);
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаГруппы Тогда
		ЗаполнитьПанельГруппыЗаданий(МассивСсылок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьГруппуОтбораПанелиНавигации()

	Возврат ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор.Элементы, 
			"ОтборПанелиНавигации", 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
КонецФункции

&НаСервере
Процедура ИзменитьОтборПоПанелиНавигации(Знач ИмяТаблицы, Знач ДанныеДляОбработки);
	
	ГруппаОтбора = СоздатьГруппуОтбораПанелиНавигации();
	
	Если ДанныеДляОбработки = Неопределено Тогда
		ЗаголовокПанелиНавигации = НСтр("ru = 'Все'");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		"ОтборПанелиНавигации");
		
		Возврат;
	КонецЕсли;
	
	Если ДанныеДляОбработки.Значение = НСтр("ru = 'Все'") Тогда
		ЗаголовокПанелиНавигации = ДанныеДляОбработки.Значение;
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
		"ОтборПанелиНавигации");
		
		Возврат;
	КонецЕсли;
	
	Если ИмяТаблицы = "Инициаторы" Тогда
		
		#Область ОтборИнициатор
		ИмяПоля = "Инициатор";
		ПравоеЗначение = ДанныеДляОбработки.Значение;
		Если ПравоеЗначение = Неопределено Тогда
			
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
			ЗначениеОтбора = Новый Массив;
			ЗначениеОтбора.Добавить(Неопределено);
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.ВнешниеПользователи.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.КонтактныеЛица.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.ПотенциальныеКлиенты.ПустаяСсылка"));
			ЗначениеОтбора.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
			
		Иначе
			
			Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
				ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			ЗначениеОтбора = ДанныеДляОбработки.Значение;
			
		КонецЕсли;
						
		ИмяОтбора = НСтр("ru = 'Инициатор'");
		#КонецОбласти
		
	ИначеЕсли ИмяТаблицы = "Процессы" Тогда
		
		#Область Процессы
		Если ДанныеДляОбработки.Свойство("ТекущийЭтап") Тогда
			ИмяПоля						= "ТекущийЭтап";
			ВидСравненияЭлементаОтбора	= ВидСравненияКомпоновкиДанных.Равно;
			ПравоеЗначение				= ДанныеДляОбработки.ТекущийЭтап;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, ИмяПоля,
																   ВидСравненияЭлементаОтбора, ПравоеЗначение);
		КонецЕсли;
															   
		ИмяПоля = "Процесс";
		Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ПравоеЗначение = ДанныеДляОбработки.Значение;
		
		ИмяОтбора = НСтр("ru = 'Процесс'");
		ЗначениеОтбора = ДанныеДляОбработки.Значение;
		#КонецОбласти
		
	ИначеЕсли ИмяТаблицы = "Приоритеты" Тогда
		
		#Область Приоритеты
		ИмяПоля = "Приоритет";
		Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ПравоеЗначение = ДанныеДляОбработки.Значение;
		
		ИмяОтбора = НСтр("ru = 'Приоритет'");
		ЗначениеОтбора = ДанныеДляОбработки.Значение;
		#КонецОбласти
		
	ИначеЕсли ИмяТаблицы = "Исполнители" Тогда
		
		#Область Исполнители
		ИмяПоля = "ТекущийИсполнитель";
		Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора 	= ВидСравненияКомпоновкиДанных.ВСписке;
			ПравоеЗначение 				= ДанныеДляОбработки.Значение;
			ЗначениеОтбора				= ДанныеДляОбработки.Значение;
			
		ИначеЕсли ДанныеДляОбработки.Значение = "ПустаяСсылка" Тогда
			ВидСравненияЭлементаОтбора 	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ПравоеЗначение				= Неопределено;
			ЗначениеОтбора				= "<Не выбран>";
			
		Иначе	
			ВидСравненияЭлементаОтбора	= ВидСравненияКомпоновкиДанных.Равно;
			ПравоеЗначение				= ДанныеДляОбработки.Значение;
			ЗначениеОтбора				= ДанныеДляОбработки.Значение;
			
		КонецЕсли;
		ИмяОтбора 		= НСтр("ru = 'Исполнители'");
		#КонецОбласти
		
	ИначеЕсли ИмяТаблицы = "ГруппаЗадания" Тогда
		
		#Область ГруппаЗадания
		ИмяПоля = "ГруппаЗадания";
		Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ПравоеЗначение	= ДанныеДляОбработки.Значение;
		ИмяОтбора		= НСтр("ru = 'Группа задания'");
		ЗначениеОтбора	= ДанныеДляОбработки.Значение;
		#КонецОбласти
		
	ИначеЕсли ИмяТаблицы = "ТипыПроцессов" Тогда
		
		#Область ТипыПроцессов
		ИмяПоля = "ТипПроцесса";
		Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ПравоеЗначение = ДанныеДляОбработки.Значение;
		
		ИмяОтбора = НСтр("ru = 'Тип документа'");
		ЗначениеОтбора = ДанныеДляОбработки.Значение;
		#КонецОбласти
		
	Иначе
		
		ЗаголовокПанелиНавигации = "";
		Возврат;
		
	КонецЕсли;
	
	ЗаголовокПанелиНавигации = ИмяОтбора;
	Если СтрДлина(ЗаголовокПанелиНавигации) > 30 Тогда
		ЗаголовокПанелиНавигации = Лев(ЗаголовокПанелиНавигации, 27) + "...";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора ,ИмяПоля, 
		ВидСравненияЭлементаОтбора, ПравоеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельИнициаторов(Знач МассивСсылок = Неопределено)
		
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Пользователи)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА &СтрокаПользователи
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.ФизическиеЛица)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА &СтрокаФизическиеЛица
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Контрагенты)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА &СтрокаКонтрагенты
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.КонтактныеЛица)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)
		|			ТОГДА &СтрокаКонтактныеЛица
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Подразделения)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|			ТОГДА &СтрокаПодразделения
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Сотрудники)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ТОГДА &СтрокаСотрудники
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.ПотенциальныеКлиенты)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.ПотенциальныеКлиенты.ПустаяСсылка)
		|			ТОГДА &СтрокаПотенциальныеКлиенты
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Организации)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА &СтрокаОрганизации
		|		ИНАЧЕ &СтрокаИнициаторНеВыбран
		|	КОНЕЦ КАК Группа,
		|	Задание.Инициатор КАК Инициатор,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Задание.Инициатор) КАК ИнициаторПредставление,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	(&ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПолныеПрава
		|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И Задание.Ссылка В(&МассивСсылок)
		|
		|СГРУППИРОВАТЬ ПО
		|	Задание.Инициатор,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Пользователи)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА &СтрокаПользователи
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.ФизическиеЛица)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА &СтрокаФизическиеЛица
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Контрагенты)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА &СтрокаКонтрагенты
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.КонтактныеЛица)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)
		|			ТОГДА &СтрокаКонтактныеЛица
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Подразделения)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|			ТОГДА &СтрокаПодразделения
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Сотрудники)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ТОГДА &СтрокаСотрудники
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.ПотенциальныеКлиенты)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.ПотенциальныеКлиенты.ПустаяСсылка)
		|			ТОГДА &СтрокаПотенциальныеКлиенты
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Организации)
		|				И Задание.Инициатор <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА &СтрокаОрганизации
		|		ИНАЧЕ &СтрокаИнициаторНеВыбран
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Группа,
		|	Инициатор
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	Группа,
		|	Инициатор,
		|	ИнициаторПредставление
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	СтрокаИнициаторНеВыбран = НСтр("ru = 'Инициатор не выбран'");
	
	// Строки локализации.
	Запрос.УстановитьПараметр("СтрокаФизическиеЛица",		НСтр("ru = 'Физические лица'"));
	Запрос.УстановитьПараметр("СтрокаПользователи",   		НСтр("ru = 'Пользователи'"));
	Запрос.УстановитьПараметр("СтрокаКонтрагенты", 	  		НСтр("ru = 'Контрагенты'"));
	Запрос.УстановитьПараметр("СтрокаКонтактныеЛица", 		НСтр("ru = 'Контактные лица'"));
	Запрос.УстановитьПараметр("СтрокаПодразделения",  		НСтр("ru = 'Подразделения'"));
	Запрос.УстановитьПараметр("СтрокаСотрудники",  			НСтр("ru = 'Сотрудники'"));
	Запрос.УстановитьПараметр("СтрокаПотенциальныеКлиенты",	НСтр("ru = 'Потенциальные клиенты'"));
	Запрос.УстановитьПараметр("СтрокаОрганизации",			НСтр("ru = 'Организации'"));
	Запрос.УстановитьПараметр("СтрокаИнициаторНеВыбран",	СтрокаИнициаторНеВыбран);
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий", 				
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 	
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава", 						
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
		
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",				
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
		
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Инициаторы.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= Инициаторы.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Инициаторы'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа = Истина;
		СтрокиПервыйУровень 				= СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл
			НоваяСтрока					= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			НоваяСтрока.Представление	= Строка(Строка2.Группа);
			НоваяСтрока.ИндексКартинки	= 1;
			
			Если СтрокаИнициаторНеВыбран <> Строка2.Группа Тогда
				
				НоваяСтрока.ЭтоГруппа = Истина;
			
				Для Каждого Подстрока Из Строка2.Строки Цикл
					
					НоваяПодСтрока					= НоваяСтрока.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НоваяПодСтрока, Подстрока);
					НоваяПодСтрока.Представление	= ?(ЗначениеЗаполнено(Подстрока.Инициатор), 
						Подстрока.ИнициаторПредставление, НСтр("ru = '<Не выбран>'"));
					НоваяПодСтрока.ИндексКартинки	= 2;
					НоваяПодСтрока.ЭтоГруппа 		= Ложь;
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока.ЭтоГруппа = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельПроцессов(Знач МассивСсылок = Неопределено)
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.Процесс КАК Процесс,
		|	Задание.ТекущийЭтап КАК ТекущийЭтап,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество				
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	(&ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПолныеПрава
		|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И Задание.Ссылка В(&МассивСсылок)		
		|
		|СГРУППИРОВАТЬ ПО
		|	Задание.Процесс,
		|	Задание.ТекущийЭтап
		|
		|УПОРЯДОЧИТЬ ПО
		|	Процесс,
		|	ТекущийЭтап
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	Процесс,
		|	ТекущийЭтап
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий", 				
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 	
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава",
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
		
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",				
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
		
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Процессы.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= Процессы.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Процессы'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа = Истина;
		СтрокиПервыйУровень = СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл
			НоваяСтрока					= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			НоваяСтрока.Представление	= Строка(Строка2.Процесс);
			НоваяСтрока.ИндексКартинки	= 1;
			НоваяСтрока.ЭтоГруппа = Истина;
			
			Для Каждого Подстрока Из Строка2.Строки Цикл
				
				НоваяПодСтрока					= НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяПодСтрока, Подстрока);
				НоваяПодСтрока.Представление	= ?(ЗначениеЗаполнено(Подстрока.ТекущийЭтап), 
					Строка(Подстрока.ТекущийЭтап), 
					НСтр("ru = '<Не выбран>'"));
				НоваяПодСтрока.ИндексКартинки	= 2;
				НоваяПодСтрока.ЭтоГруппа = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельПриоритетов(Знач МассивСсылок = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.Приоритет КАК Приоритет,
		|	ВЫБОР
		|		КОГДА Задание.Приоритет <> ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.ПустаяСсылка)
		|			ТОГДА Задание.Приоритет
		|		ИНАЧЕ ""Не выбран""
		|	КОНЕЦ КАК Представление,
		|	ВЫБОР
		|		КОГДА Задание.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.ПустаяСсылка)
		|				И НЕ Задание.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество		
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	(&ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПолныеПрава
		|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И Задание.Ссылка В(&МассивСсылок)				
		|
		|СГРУППИРОВАТЬ ПО
		|	Задание.Приоритет,
		|	ВЫБОР
		|		КОГДА Задание.Приоритет <> ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.ПустаяСсылка)
		|			ТОГДА Задание.Приоритет
		|		ИНАЧЕ ""Не выбран""
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Задание.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.ПустаяСсылка)
		|				И НЕ Задание.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Задание.Приоритет.Порядок
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	Приоритет
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий", 				
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 	
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава", 
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
	
	Запрос.УстановитьПараметр("МассивСсылок",	МассивСсылок);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Приоритеты.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= Приоритеты.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Приоритеты'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа = Истина;
		СтрокиПервыйУровень = СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл
			
			НоваяСтрока					= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			НоваяСтрока.ИндексКартинки	= 2;
			НоваяСтрока.ЭтоГруппа = Ложь;

		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельИсполнителей(Знач МассивСсылок = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст =		
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(Задание.ТекущийИсполнитель.Ссылка, ""ПустаяСсылка"") КАК Исполнитель,
			|	СУММА(ВЫБОР
			|			КОГДА Задание.Выполнено
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК Количество
			|ИЗ
			|	Документ.Задание КАК Задание
			|ГДЕ
			|	(&ДоступностьРолиПросмотраЧужихЗаданий
			|			ИЛИ &ДоступностьРолиПолныеПрава
			|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
			|				И ВЫБОР
			|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
			|						ТОГДА ИСТИНА
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
			|	И Задание.Ссылка В(&МассивСсылок)
			|	И (ТИПЗНАЧЕНИЯ(Задание.ТекущийИсполнитель) = ТИП(Справочник.Пользователи)
			|				И Задание.ТекущийИсполнитель.Недействителен = ЛОЖЬ
			|			ИЛИ ТИПЗНАЧЕНИЯ(Задание.ТекущийИсполнитель) = ТИП(Справочник.ГруппыПользователей)
			|			ИЛИ Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(Задание.ТекущийИсполнитель.Ссылка, ""ПустаяСсылка"")
			|ИТОГИ ПО
			|	ОБЩИЕ,
			|	Исполнитель КАК Исполнитель
			|АВТОУПОРЯДОЧИВАНИЕ";
		
	ТекПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 	
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава",	
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
		
	Запрос.УстановитьПараметр("МассивСсылок",	МассивСсылок);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Исполнители.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= Исполнители.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Исполнители'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа 		= Истина;
		СтрокиПервыйУровень 				= СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл			
			
			НоваяСтрока						= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			Если Строка2.Исполнитель <> "ПустаяСсылка" Тогда
				НоваяСтрока.Представление 	= Строка(Строка2.Исполнитель);
			Иначе
				НоваяСтрока.Представление 	= НСтр("ru = '<Не выбран>'");
			КонецЕсли;
			НоваяСтрока.ИндексКартинки		= 2;
			НоваяСтрока.ЭтоГруппа 			= Ложь;

		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельГруппыЗаданий(Знач МассивСсылок = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.ГруппаЗадания КАК ГруппаЗадания,
		|	Задание.ГруппаЗадания КАК Представление,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество		
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	(&ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПолныеПрава
		|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И Задание.Ссылка В(&МассивСсылок)
		|
		|СГРУППИРОВАТЬ ПО
		|	Задание.ГруппаЗадания
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	ГруппаЗадания КАК ГруппаЗадания,
		|	Представление
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава", 
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
	
	Запрос.УстановитьПараметр("МассивСсылок",	МассивСсылок);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ГруппыЗаданий.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= ГруппыЗаданий.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Группа заданий'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа = Истина;
		СтрокиПервыйУровень = СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл
			
			НоваяСтрока					= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			Если ПустаяСтрока(НоваяСтрока.Представление) Тогда
				НоваяСтрока.Представление = НСтр("ru = '<Не выбран>'");
			КонецЕсли;
			НоваяСтрока.ИндексКартинки	= 2;
			НоваяСтрока.ЭтоГруппа = Ложь;

		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельТипыПроцессов(Знач МассивСсылок = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.ТипПроцесса КАК ТипПроцесса,
		|	ВЫБОР
		|		КОГДА Задание.ТипПроцесса <> ЗНАЧЕНИЕ(Справочник.ТипыПроцессов.ПустаяСсылка)
		|			ТОГДА Задание.ТипПроцесса
		|		ИНАЧЕ ""Не выбран""
		|	КОНЕЦ КАК Представление,
		|	ВЫБОР
		|		КОГДА Задание.ТипПроцесса = ЗНАЧЕНИЕ(Справочник.ТипыПроцессов.ПустаяСсылка)
		|				И НЕ Задание.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок,
		|	СУММА(ВЫБОР
		|			КОГДА Задание.Выполнено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество				
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	(&ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПолныеПрава
		|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И Задание.Ссылка В(&МассивСсылок)		
		|
		|СГРУППИРОВАТЬ ПО
		|	Задание.ТипПроцесса,
		|	ВЫБОР
		|		КОГДА Задание.ТипПроцесса <> ЗНАЧЕНИЕ(Справочник.ТипыПроцессов.ПустаяСсылка)
		|			ТОГДА Задание.ТипПроцесса
		|		ИНАЧЕ ""Не выбран""
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Задание.ТипПроцесса = ЗНАЧЕНИЕ(Справочник.ТипыПроцессов.ПустаяСсылка)
		|				И НЕ Задание.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Представление
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	ТипПроцесса
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава",	
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
	
	Запрос.УстановитьПараметр("МассивСсылок",	МассивСсылок);
	
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТипыПроцессов.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= ТипыПроцессов.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка);
		СтрокиПервыйУровень.Представление	= НСтр("ru = 'Типы документов'");
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа = Истина;
		СтрокиПервыйУровень = СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл
			
			НоваяСтрока					= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			НоваяСтрока.ИндексКартинки	= 2;
			НоваяСтрока.ЭтоГруппа = Ложь;

		КонецЦикла;
		
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЗаданияСервер.УстановитьУсловноеОформлениеСпискаЗаданий(Список);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборыИзПараметровФормы(Знач ПараметрыСтруктураОтборов = Неопределено)
	
	СтруктураОтборов = Неопределено;
	Если ПараметрыСтруктураОтборов <> Неопределено 
		И ПараметрыСтруктураОтборов.Свойство("СтруктураОтборов") Тогда
		СтруктураОтборов = ПараметрыСтруктураОтборов.СтруктураОтборов;
		
	ИначеЕсли Параметры.Свойство("СтруктураОтборов") Тогда
		СтруктураОтборов = Параметры.СтруктураОтборов;
		
	КонецЕсли;
	
	Если СтруктураОтборов = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ИмяТекущейПанелиНавигации 						= "СтраницаИнициаторы";
	Элементы.СтраницыПанелиНавигации.ТекущаяСтраница= Элементы[ИмяТекущейПанелиНавигации];
	
	// Статус.	
	Если СтруктураОтборов.Свойство("Статус", ОтборСтатусЗадания) Тогда
		УстановитьОтборСпискаСтатусЗаданияНаСервере(ОтборСтатусЗадания);
	Иначе
		ОтборСтатусЗадания		= "";
		УдалитьЭлементыОтборовПоСтатусуЗадания();
	КонецЕсли;
	
	// Инициатор.
	мИнициатор = Неопределено;
	Если СтруктураОтборов.Свойство("Инициатор", мИнициатор) Тогда
		УстановитьОтборСписка("Инициатор", "ГруппаОтборИнициатор", мИнициатор);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Инициатор");
		
	КонецЕсли;
	
	// Клиент.
	мКлиент = Неопределено;
	Если СтруктураОтборов.Свойство("Клиент", мКлиент) Тогда
		УстановитьОтборСписка("Клиент", "ГруппаОтборКлиент", мКлиент);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Клиент");
		
	КонецЕсли;
	
	// Исполнитель.
	Если СтруктураОтборов.Свойство("Исполнитель", ОтборИсполнитель) Тогда
		УстановитьОтборСпискаИсполнительНаСервере(ОтборИсполнитель);
		ОтборИсполнитель = "";
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"ТекущийИполнитель");
	
	КонецЕсли;
	
	// Спринт.
	мСпринт = Неопределено;
	Если СтруктураОтборов.Свойство("Спринт", мСпринт) Тогда
		УстановитьОтборСписка("Спринт", "ГруппаОтборСпринт", мСпринт);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Спринт");
	
	КонецЕсли;
	
	// Организация.
	мОрганизация = Неопределено;
	Если СтруктураОтборов.Свойство("Организация", мОрганизация) Тогда
		УстановитьОтборСписка("Организация", "ГруппаОтборОрганизация", мОрганизация);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Организация");
	
	КонецЕсли;
			
	// Проект.
	мПроект = Неопределено;
	Если СтруктураОтборов.Свойство("Проект", мПроект) Тогда
		УстановитьОтборСписка("Проект", "ГруппаОтборПроект", мПроект);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Проект");
		
	КонецЕсли;
	
	// Тег.
	мТег = Неопределено;
	Если СтруктураОтборов.Свойство("Тег", мТег) Тогда
		УстановитьОтборСписка("Теги.Тег", "ГруппаОтборТег", мТег);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Теги.Тег");
		
	КонецЕсли;
	
	// Группа задания.
	мГруппаЗадания = Неопределено;
	Если СтруктураОтборов.Свойство("ГруппаЗадания", мГруппаЗадания) Тогда
		УстановитьОтборСписка("ГруппаЗадания", "ГруппаОтборГруппаЗаданий", мГруппаЗадания);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"ГруппаЗадания");
		
	КонецЕсли;
	
	// Место хранения.
	мМестоХранения = Неопределено;
	Если СтруктураОтборов.Свойство("МестоХранения", мМестоХранения) Тогда
		УстановитьОтборСписка("МестоХранения", "ГруппаОтборМестоХранения", мМестоХранения);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"МестоХранения");
		
	КонецЕсли;
	
	// Карточка номенклатуры.
	мКарточкаНоменклатуры = Неопределено;
	Если СтруктураОтборов.Свойство("КарточкаНоменклатуры", мКарточкаНоменклатуры) Тогда
		УстановитьОтборСписка("КарточкаНоменклатуры", "ГруппаОтборКарточкаНоменклатуры", мКарточкаНоменклатуры);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"КарточкаНоменклатуры");
		
	КонецЕсли;
	
	// Процесс.
	мПроцесс = Неопределено;
	Если СтруктураОтборов.Свойство("Процесс", мПроцесс) Тогда
		УстановитьОтборСписка("Процесс", "ГруппаОтборПроцесс", мПроцесс);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Процесс");
		
	КонецЕсли;

	// Категория.
	мКатегория = Неопределено;
	Если СтруктураОтборов.Свойство("Категория", мКатегория) Тогда
		УстановитьОтборСписка("Категория", "ГруппаОтборКатегория", мКатегория);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор,
			"Категория");
		
	КонецЕсли;
	
	// Период.
	мСтандартныйПериод = Новый СтандартныйПериод;
	Если СтруктураОтборов.Свойство("ДатаНачала") Тогда
		ОтборПериод.ДатаНачала	= СтруктураОтборов.ДатаНачала;
	Иначе
		ОтборПериод.ДатаНачала	= мСтандартныйПериод.ДатаНачала;
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("ДатаОкончания") Тогда
		ОтборПериод.ДатаОкончания	= СтруктураОтборов.ДатаОкончания;
	Иначе
		ОтборПериод.ДатаОкончания	= мСтандартныйПериод.ДатаОкончания;
	КонецЕсли;
	
	РаботаСОтборамиКлиентСервер.УстановитьОтборПоПериоду(Список.КомпоновщикНастроек.Настройки.Отбор,
		ОтборПериод.ДатаНачала, ОтборПериод.ДатаОкончания, "Дата");
		
КонецПроцедуры

&НаКлиенте
Процедура ПанельНавигацииРазвернутьВсе()
	
	НеОтрабатыватьАктивизациюПанелиНавигации	= Истина;
	ТекущаяСтраницаПанелиНавигации 				= Элементы.СтраницыПанелиНавигации.ТекущаяСтраница;
	
	Если ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаИнициаторы Тогда
		ИмяДерева 	= "Инициаторы";
		ИмяПоля 	= "Инициатор";
		ТекТаблица 	= Инициаторы;
		ТекЭлемент 	= Элементы.ИнициаторыПанелиНавигации;
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаИсполнители Тогда
		ИмяДерева 	= "Исполнители";
		ИмяПоля 	= "Исполнитель";
		ТекТаблица 	= Исполнители;
		ТекЭлемент 	= Элементы.ИсполнителиПанелиНавигации;
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаПриоритеты Тогда
		ИмяДерева 	= "Приоритеты";
		ИмяПоля 	= "Приоритет";
		ТекТаблица 	= Приоритеты;
		ТекЭлемент 	= Элементы.ПриоритетыПанелиНавигации;
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаПроцессы Тогда
		ИмяДерева 	= "Процессы";
		ИмяПоля 	= "Процесс";
		ТекТаблица 	= Процессы;
		ТекЭлемент 	= Элементы.ПроцессыПанелиНавигации;
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаТипыПроцессов Тогда
		ИмяДерева 	= "ТипыПроцессов";
		ИмяПоля 	= "ТипПроцесса";
		ТекТаблица 	= ТипыПроцессов;
		ТекЭлемент 	= Элементы.ТипыПроцессовПанелиНавигации;
		
	ИначеЕсли ТекущаяСтраницаПанелиНавигации = Элементы.СтраницаГруппы Тогда
		ИмяДерева 	= "ГруппыЗаданий";
		ИмяПоля 	= "ГруппаЗадания";
		ТекТаблица 	= ГруппыЗаданий;
		ТекЭлемент 	= Элементы.ГруппыЗаданийПанелиНавигации;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТекТаблица.ПолучитьЭлементы() Цикл
		ТекЭлемент.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
	НайденныеСтроки =  НастройкиДеревьевПанелиНавигации.НайтиСтроки(Новый Структура("ИмяДерева",ИмяДерева));
	ИдентификаторСтроки = 0;
	Если НайденныеСтроки.Количество()>0 Тогда
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля,
					ИдентификаторСтроки,ТекТаблица.ПолучитьЭлементы(),НайденныеСтроки[0].ТекущееЗначение,Ложь);
		Элементы[НайденныеСтроки[0].ИмяДерева + "ПанелиНавигации"].ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруЗадачиНаСервере()
	
	Если ТекущееЗадание <> Неопределено Тогда
		Структура = Новый Структура();
		Структура.Вставить("Задание", 		ТекущееЗадание);		
		РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущееЗадание, 
			"Тема, Процесс, КрайняяДатаВыполнения");		
		Структура.Вставить("Тема", 			РеквизитыЗадания.Тема);
		Структура.Вставить("Процесс",		РеквизитыЗадания.Процесс);
		Структура.Вставить("ВыполнитьДо", 	РеквизитыЗадания.КрайняяДатаВыполнения);
		Структура.Вставить("Инициатор",		Пользователи.ТекущийПользователь());
		Возврат Структура;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВыбратьИсполнителяНаСервере(Команда)
	
	// Выбор исполнителя, определяем кто будет исполнителем.
	УИД = Сред(Команда.Имя, 13);
	УИД = Лев(УИД, 8) + "-" + Сред(УИД, 9, 4) + "-" + Сред(УИД, 13, 4) + "-" + Сред(УИД, 17, 4) + "-" + Сред(УИД, 21);
	
	Структура = ПолучитьСтруктуруИсполнителяПоУИД(УИД);
	
	НачатьТранзакцию();
	Попытка
		ТекущееЗаданиеОбъект = ТекущееЗадание.ПолучитьОбъект();
		ТекущееЗаданиеОбъект.ТекущийИсполнитель = Структура.Исполнитель;
		ТекущееЗаданиеОбъект.Записать();
		ТекущееЗадание = ТекущееЗаданиеОбъект.Ссылка;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруИсполнителяПоУИД(Знач УИД)
	
	ИсполнительСсылка = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	
	Результат = Новый Структура();
	Результат.Вставить("Исполнитель", ИсполнительСсылка);
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИсполнительНеВыбранНаСервере()
	
	НачатьТранзакцию();
	Попытка
		ТекущееЗаданиеОбъект = ТекущееЗадание.ПолучитьОбъект();
		ТекущееЗаданиеОбъект.ТекущийИсполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ТекущееЗаданиеОбъект.Записать();
		ТекущееЗадание = ТекущееЗаданиеОбъект.Ссылка;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьИсполнителяИзСправочникаЗавершениеНаСервере(Результат);
	
	НачатьТранзакцию();
	Попытка
		ТекущееЗаданиеОбъект 					= ТекущееЗадание.ПолучитьОбъект();
		ТекущееЗаданиеОбъект.ТекущийИсполнитель = Результат;
		ТекущееЗаданиеОбъект.Записать();  
		ЗафиксироватьТранзакцию();
		ТекущееЗадание = ТекущееЗаданиеОбъект.Ссылка;
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

//@skip-warning
&НаСервере
Функция ПолучитьСписокИсполнителей()
	
	Если НЕ ЗначениеЗаполнено(ТекущееЗадание.Процесс) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	мОбъектТекущийЭтап 			= ТекущееЗадание.ТекущийЭтап;
	
	// Вставляем если есть исполнители по плану
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Результат.Исполнитель
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПроцессыИсполнители.Исполнитель КАК Исполнитель
		|	ИЗ
		|		Справочник.Процессы.ИсполнителиЭтапов КАК ПроцессыИсполнители
		|	ГДЕ
		|		ПроцессыИсполнители.Ссылка = &Ссылка
		|		И ПроцессыИсполнители.Этап = &Этап
		|		И ТИПЗНАЧЕНИЯ(ПроцессыИсполнители.Исполнитель) = ТИП(Справочник.Пользователи)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ГруппыПользователейСостав.Пользователь
		|	ИЗ
		|		Справочник.Процессы.ИсполнителиЭтапов КАК ПроцессыИсполнители
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|			ПО ПроцессыИсполнители.Исполнитель = ГруппыПользователейСостав.Ссылка
		|	ГДЕ
		|		ПроцессыИсполнители.Ссылка = &Ссылка
		|		И ПроцессыИсполнители.Этап = &Этап
		|		И ТИПЗНАЧЕНИЯ(ПроцессыИсполнители.Исполнитель) = ТИП(Справочник.ГруппыПользователей)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаданиеИсполнители.Исполнитель
		|	ИЗ
		|		Документ.Задание.Исполнители КАК ЗаданиеИсполнители
		|	ГДЕ
		|		ЗаданиеИсполнители.Ссылка = &ЗаданиеСсылка
		|		И ТИПЗНАЧЕНИЯ(ЗаданиеИсполнители.Исполнитель) = ТИП(Справочник.Пользователи)
		|		И &ИспользоватьВПроцессеПрошлыхИсполнителей
		|		И НЕ ЗаданиеИсполнители.Исполнитель ЕСТЬ NULL ) КАК Результат
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(Результат.Исполнитель) = ТИП(Справочник.Пользователи)
		|				ТОГДА НЕ Результат.Исполнитель.Недействителен
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущееЗадание.Процесс);
	Запрос.УстановитьПараметр("Этап", мОбъектТекущийЭтап);
	Запрос.УстановитьПараметр("ЗаданиеСсылка", ТекущееЗадание);
	Запрос.УстановитьПараметр("ИспользоватьВПроцессеПрошлыхИсполнителей", 
		ТекущееЗадание.Процесс.ВыводПрошлыхИсполнителейВСпискеВыбора);
	
	мПользователиТекущийПользователь = Пользователи.ТекущийПользователь();
	
	РезультатЗапроса = Запрос.Выполнить();
	СписокИсполнителей = Новый СписокЗначений;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			пЗначение = "Исполнитель_" + СтрЗаменить(Выборка.Исполнитель.УникальныйИдентификатор(), "-", "");
			
			Если СписокИсполнителей.НайтиПоЗначению(пЗначение) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			пПредставление 	= Выборка.Исполнитель;
						
			Если Выборка.Исполнитель = мПользователиТекущийПользователь Тогда
				пПредставление 	= Строка(Выборка.Исполнитель) + " " + НСтр("ru = '(Вы)'");
				пКартинка 		= БиблиотекаКартинок.ИсполнительТекущийПользователь;
			Иначе
				пПредставление 	= Выборка.Исполнитель;
				пКартинка 		= БиблиотекаКартинок.ИсполнительПользователь;
			КонецЕсли;
			СписокИсполнителей.Добавить(пЗначение,пПредставление,,пКартинка);
		КонецЦикла;
	КонецЕсли;
	СписокИсполнителей.Добавить("НеВыбран", НСтр("ru = '<Не выбран>'"),,БиблиотекаКартинок.Очистить);
	СписокИсполнителей.Добавить("ВыбратьПользователяИзСправочника", НСтр("ru = 'Выбрать пользователя...'"),,
		БиблиотекаКартинок.ИсполнительВыборИзСправочника);
	Возврат СписокИсполнителей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаСервере
Функция ПроверитьИсполнителяПриПереводеНаЭтап(Знач Задание)
			
	Возврат ЗаданияСервер.ПравоРедактированияТекущийПользователь(Задание);
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиЗаданиеПоНомеру(Знач Номер)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Задание.Ссылка
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	Задание.Номер ПОДОБНО &Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задание.Номер УБЫВ";
	Запрос.УстановитьПараметр("Номер", "%" + Номер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Документы.Задание.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТекущуюДатуВПараметреСписка()
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ПолучитьДатуНаСервере());
	ПодключитьОбработчикОжидания("ОбновитьТекущуюДатуВПараметреСписка", 60, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОповещенияПользователя()

	Если ИнтервалПроверкиОповещений > 0 Тогда

		Структура = КоличествоНовыхИИзмененныхЗаданий();
		Если Структура.Новые <> 0 ИЛИ Структура.Изменено <> 0 Тогда
			
			Если Структура.Новые <> 0 И Структура.Изменено = 0 Тогда
				Текст = СтрШаблон(НСтр("ru = 'Новые задания: %1'"), Структура.Новые);
			ИначеЕсли Структура.Новые = 0 И Структура.Изменено <> 0 Тогда
				Текст = СтрШаблон(НСтр("ru = 'Изменились задания: %1'"), Структура.Изменено);
			Иначе
				Текст = СтрШаблон(НСтр("ru = 'Новые задания: %1, изменилось: %2'"), 
					Структура.Новые, Структура.Изменено);
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПроверкиОповещенияПользователя", ЭтотОбъект);
			ПоказатьОповещениеПользователя(НСтр("ru = 'Изменился список заданий'"), Оповещение, 
				Текст, БиблиотекаКартинок.ДиалогИнформация, );
		КонецЕсли;  
		
		ПодключитьОбработчикОжидания("ПроверитьОповещенияПользователя", ИнтервалПроверкиОповещений, Истина);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПроверкиОповещенияПользователя(Параметры) Экспорт
	
	УдалитьОтборы();
	ОтборСтатусЗаданияОбработкаВыбора(Элементы.ОтборСтатусЗадания, НСтр("ru = 'Измененные'"), Ложь);
	Активизировать();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоНовыхИИзмененныхЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Структура = Новый Структура("Новые, Изменено", 0, 0);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сумма(ВЫБОР
		|		КОГДА РеквизитыЗаданийПоПользователям.ДатаОткрытия ЕСТЬ NULL
		|		И ЕСТЬNULL(РеквизитыЗаданийПоПользователям.ДатаОткрытия, ДАТАВРЕМЯ(1, 1, 1, 0, 0,
		|			0)) < ЕСТЬNULL(РеквизитыЗаданий.ДатаПоследнегоИзменения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Новые,
		|	Сумма(ВЫБОР
		|		КОГДА НЕ РеквизитыЗаданийПоПользователям.ДатаОткрытия ЕСТЬ NULL
		|		И ЕСТЬNULL(РеквизитыЗаданийПоПользователям.ДатаОткрытия, ДАТАВРЕМЯ(1, 1, 1, 0, 0,
		|			0)) < ЕСТЬNULL(РеквизитыЗаданий.ДатаПоследнегоИзменения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Изменено
		|ИЗ
		|	Документ.Задание КАК ДокументЗадание
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыЗаданийПоПользователям КАК РеквизитыЗаданийПоПользователям
		|		ПО РеквизитыЗаданийПоПользователям.Объект = ДокументЗадание.Ссылка
		|		И РеквизитыЗаданийПоПользователям.Пользователь = &ТекущийПользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыЗаданий КАК РеквизитыЗаданий
		|		ПО ДокументЗадание.Ссылка = РеквизитыЗаданий.Объект
		|ГДЕ
		|	&ДоступностьРолиПолныеПрава
		|	ИЛИ &ДоступностьРолиПросмотраЧужихЗаданий
		|	ИЛИ (&ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|	И ВЫБОР
		|		КОГДА ДокументЗадание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ)
		|	ИЛИ ДокументЗадание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей)";
	
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава", 
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий", 
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
	Запрос.УстановитьПараметр("ТекущийПользователь", 
		Пользователи.ТекущийПользователь());		
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей", 
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(Пользователи.ТекущийПользователь()));		
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура ОбновитьОтбор()
	
	Список.Отбор.Элементы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокКомментариев(Знач Задание)
	
	Если НЕ Элементы.ОтображатьДополнительныеСведенияПоЗаданию.Пометка ИЛИ 
		Элементы.ГруппаБыстрыйПросмотр.ТекущаяСтраница <> Элементы.Комментарии Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияХТМЛ = СформироватьСписокКомментариевНаСервереБезКонтекста(Задание, ЭтаФорма.УникальныйИдентификатор)
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСписокКомментариевНаСервереБезКонтекста(Знач Задание, Знач УникальныйИдентификатор)
	
	Возврат Комментарии.ПолучитьHTML(Задание, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура СформироватьОписаниеЗадачи(Знач Задание)
	
	Если НЕ Элементы.ОтображатьДополнительныеСведенияПоЗаданию.Пометка ИЛИ 
		Элементы.ГруппаБыстрыйПросмотр.ТекущаяСтраница <> Элементы.ОписаниеЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЗадания = СформироватьОписаниеЗадачиНаСервереБезКонтекста(Задание, ЭтаФорма.УникальныйИдентификатор);
	Если ОписаниеЗадания <> ХТМЛЗадача Тогда
		ХТМЛЗадача = ОписаниеЗадания;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьОписаниеЗадачиНаСервереБезКонтекста(Знач Задание, Знач УникальныйИдентификатор)
	
	Возврат ЗаданияСервер.СформироватьОписаниеЗадачи(Задание, УникальныйИдентификатор);
		
КонецФункции

&НаКлиенте
Процедура ИсполнительНеВыбран()	
	ИсполнительНеВыбранНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителяИзСправочника()
	// Выбираем исполнителя из справочника "Пользователи"
	
	Структура = Новый Структура();
	Структура.Вставить("ЗакрыватьПриВыборе", Истина);
	Структура.Вставить("РежимВыбора", Истина);
		
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Структура, ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ВыбратьИсполнителяИзСправочникаЗавершение", ЭтаФорма), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителяИзСправочникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ВыбратьИсполнителяИзСправочникаЗавершениеНаСервере(Результат);  
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтборПоПодсвеченнымНаСервере()

	Элементы.ОтборПоПодсвеченным.Пометка = НЕ Элементы.ОтборПоПодсвеченным.Пометка;
	Отбор = Список.КомпоновщикНастроек.Настройки.Отбор;
	
	// Очистить связанные отборы.
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Отбор.Элементы, НСтр("ru = 'Отбор по подсвеченным'"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	Если Элементы.ОтборПоПодсвеченным.Пометка Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"Подсвечено", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	Иначе
		Отбор.Элементы.Удалить(ГруппаОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКнопкой(Кнопка)
	
	МассивЗаданий = Новый Массив;
	МассивЗаданий = Элементы.Список.ВыделенныеСтроки;
	ИтоговыйМассивЗаданий = Новый Массив;
	Для Каждого СтрокаМассива Из МассивЗаданий Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("ДокументСсылка.Задание") Тогда
			ИтоговыйМассивЗаданий.Добавить(СтрокаМассива);
		КонецЕсли;
	КонецЦикла;
	
	//@skip-warning
	Результат = УправлениеITОтделом8УФКлиент.ОтметитьОтметкамиЗадания(ИтоговыйМассивЗаданий, Кнопка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОтметкеНаСервере(НомерОтметки, ИмяЭлементаФормы)	
	
	ЭлементФормы 		 = Элементы.Найти(ИмяЭлементаФормы);
	ЭлементФормы.Пометка = НЕ ЭлементФормы.Пометка;
	Отбор = Список.КомпоновщикНастроек.Настройки.Отбор;
	
	// Очистить связанные отборы.
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Отбор.Элементы, НСтр("ru = 'Отбор по отметке'"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	Если ЭлементФормы.Пометка Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"НомерОтметки", НомерОтметки, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Для Каждого мЭлемент Из Элементы.ГруппаОтборПоКнопкам.ПодчиненныеЭлементы Цикл
			
			Если мЭлемент = ЭлементФормы ИЛИ мЭлемент = Элементы.ГруппаОтборПоКнопкам Тогда
				Продолжить;
			Иначе
				Попытка
					мЭлемент.Пометка = Ложь;
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Отбор.Элементы.Удалить(ГруппаОтбора);
		
	КонецЕсли;
	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьЗаголовокКомментариев(Знач Задание)
	
	КоличествоКомментариев 				= Комментарии.КоличествоКомментариев(Задание);
	Возврат ?(КоличествоКомментариев > 0, Строка(КоличествоКомментариев), "");
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбъединитьВПроблемуНаСервере(ДанныеФормы, Массив)

	Если Массив.Количество() > 0 Тогда
	
		Для Каждого Ссылка Из Массив Цикл
			НоваяСтрока = ДанныеФормы.Задания.Добавить();
			НоваяСтрока.Задание = Ссылка;
		КонецЦикла;
		
		ДанныеФормы.Приоритет = Массив[0].Приоритет;
		ДанныеФормы.Сервис	  = Массив[0].Сервис;
		ДанныеФормы.Категория = Массив[0].Категория;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщенияХТМЛПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ДанныеСобытия.Anchor = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыФормы  = Новый Структура;
	ДополнительныеПараметрыФормы.Вставить("ТребуетсяЗапись", Ложь);
	ОписаниеОповещения  = Новый ОписаниеОповещения("ПослеОбработкиНажатияКомментарииПолеHTML", ЭтотОбъект);
	СтруктураПараметров = Новый Структура;
	Объект			  = Новый Структура;
	Объект.Вставить("Ссылка", ТекущееЗадание);
	СтруктураПараметров.Вставить("Объект", Объект);
	СтруктураПараметров.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	КомментарииКлиент.КомментарииПолеHTMLПриНажатии(ДанныеСобытия, ОписаниеОповещения, СтруктураПараметров, 
		ДополнительныеПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиНажатияКомментарииПолеHTML(Результат, ДополнительныеПараметры) Экспорт
	
	ПодключитьОбработчикОжидания("ОбновитьДополнительныеСведенияПоЗаданию", 0.2, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеЗавершенногоЗаданияЗапрещено(Знач ЗаданиеСсылка)
	
	Результат = Ложь;
	Если ЗаданиеСсылка.Завершено 
		И НЕ УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИзменятьЗавершенныеЗадания") Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияУстановитьОтбор(Знач Отбор)
	
	УдалитьОтборы();
	ЗаполнитьОтборыИзПараметровФормы(Отбор);
	ОбновитьПанельНавигацииНаКлиенте();
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуСпискаЗаданий()
		
	Если ПанельНавигацииСкрыта Тогда
		Элементы.Список.Обновить();
	Иначе	
		Элементы.Список.Обновить();
		ОбновитьПанельНавигацииНаКлиенте();
		ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиПанелиНавигации", 0.2, Истина);
	КонецЕсли;
	
	Если ТекущееЗадание <> Неопределено 
		И ТекущееЗадание <>	ПредопределенноеЗначение("Документ.Задание.ПустаяСсылка") Тогда
		
		ОбновитьВидимость();
		ОбновитьДополнительныеСведенияПоЗаданию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьЗаданияВОчереди(Знач МассивЗаданий, Знач ИмяКоманды)
	
	Для Каждого ЗаданиеСсылка Из МассивЗаданий Цикл
		Если ЗначениеЗаполнено(ЗаданиеСсылка.ТекущийИсполнитель)
			И НЕ ЗаданиеСсылка.Выполнено
			И НЕ ЗаданиеСсылка.Завершено
			И НЕ ЗаданиеСсылка.ПометкаУдаления Тогда
			
			Если ИмяКоманды = "ВНачалоОчереди" Тогда
				ЗаданияСервер.ПереместитьЗаданиеВНачалоОчереди(ЗаданиеСсылка);
				
			ИначеЕсли ИмяКоманды = "ВверхВОчереди" Тогда
				ЗаданияСервер.ПереместитьЗаданиеВверхВОчереди(ЗаданиеСсылка);
				
			ИначеЕсли ИмяКоманды = "ВнизВОчереди" Тогда
				ЗаданияСервер.ПереместитьЗаданиеВнизВОчереди(ЗаданиеСсылка);
				
			Иначе
				ЗаданияСервер.ПереместитьЗаданиеВКонецОчереди(ЗаданиеСсылка);
				 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСписокСпринтов()
	
	Возврат Справочники.Спринты.АвтоПодборСпринтовВыполнения();
	
КонецФункции

&НаКлиенте
Процедура ОтборСпринтСозданияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	УстановитьОтборСписка("СпринтСоздания", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение		= Неопределено;
		
	ОбновитьПанельНавигацииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаУстановитьПросмотрено(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПросмотреноНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПросмотреноНаСервере()
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.Ссылка КАК Задание
		|ИЗ
		|	Документ.Задание КАК Задание
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыЗаданий КАК РеквизитыЗаданий
		|		ПО Задание.Ссылка = РеквизитыЗаданий.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыЗаданийПоПользователям КАК РеквизитыЗаданийПоПользователям
		|		ПО (Задание.Ссылка = РеквизитыЗаданийПоПользователям.Объект)
		|		И (РеквизитыЗаданийПоПользователям.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	ЕСТЬNULL(РеквизитыЗаданийПоПользователям.ДатаОткрытия, ДатаВремя(1, 1, 1, 0, 0,
		|		0)) < ЕСТЬNULL(РеквизитыЗаданий.ДатаПоследнегоИзменения, ДатаВремя(1, 1, 1, 0, 0, 0))";
	
	ТекущийПользователь 	= Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи= РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РегистрыСведений.РеквизитыЗаданийПоПользователям.УстановитьДатуОткрытия(ВыборкаДетальныеЗаписи.Задание, 
			ТекущийПользователь);
	КонецЦикла;	
	
	Элементы.Список.Обновить();
	
КонецПроцедуры	 	

#КонецОбласти