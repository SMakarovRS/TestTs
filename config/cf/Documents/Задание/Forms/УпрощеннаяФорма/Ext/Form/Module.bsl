
#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	МожноИзменятьЗавершенныеЗадания = УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИзменятьЗавершенныеЗадания");	
	ЭтоВебКлиент = УправлениеITОтделом8УФ.ПриложениеЯвляетсяВебКлиентом();
	МодифицированностьОписаниеФорматированныйДокумент = Ложь;
	
	ТолькоПросмотр = ЗаданияСервер.ПравоРедактированияТекущийПользователь(Объект);
	
	СЛС.ПриСозданииНаСервере(Объект, Отказ, СтандартнаяОбработка, Параметры, ЭтаФорма);	
	
	Если Объект.Ссылка.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
        Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗаписьЭлектроннойПочты) Тогда
            Объект.УчетнаяЗаписьЭлектроннойПочты = 
                УправлениеITОтделом8УФПовтИсп.УчетнаяЗаписьЭлектроннойПочтыПоУмолчанию();
        КонецЕсли;
		
		// Если открыта из формы создания подзаданий, то заполним.
	    ОткрываетсяИзВне 			= Ложь;
	    Если Параметры.Свойство("ОткрываетсяИзВне") Тогда
	        //@skip-warning
	        ОткрываетсяИзВне 		= Параметры["ОткрываетсяИзВне"];
			Если ОткрываетсяИзВне Тогда
				СтруктураДокумента 	= Параметры.Объект;
				ЗаполнитьЗначенияСвойств(Объект,СтруктураДокумента);
				Объект.ТекущийЭтап 	= Справочники.ЭтапыПроцессов.Новый; 
				Если Параметры.Свойство("КопироватьТекст") И ЗначениеЗаполнено(Объект.Родитель) Тогда
					Если Параметры.КопироватьТекст Тогда
						// Показываем HTML.
						СтруктураВложений = Новый Структура;
						Текст = РаботаСHTML.ОбработатьТекстHTMLДляФорматированногоДокумента(Объект, 
							Объект.Родитель.ТекстHTML,	СтруктураВложений);
						ОписаниеФорматированныйДокумент.УстановитьHTML(СокрЛП(Текст), СтруктураВложений);
					КонецЕсли;
				КонецЕсли;
	            ЭтаФорма.Модифицированность = Истина;
			КонецЕсли;
			
			Объект.Инициатор = Пользователи.ТекущийПользователь();
			
			Если НЕ ЗначениеЗаполнено(ОБъект.ТекущийЭтап) Тогда
				Объект.ТекущийЭтап = Справочники.ЭтапыПроцессов.Новый;
			КонецЕсли;
			
		КонецЕсли;
		
		// Задание создается из формы Планировщика.
		Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ДанныеЗаписиКалендаря") Тогда
				ДанныеЗаписиКалендаря = Параметры.ЗначенияЗаполнения.ДанныеЗаписиКалендаря;
				Объект.Дата			  = ДанныеЗаписиКалендаря.Начало;
				Объект.Тема			  = ДанныеЗаписиКалендаря.Наименование;
				Объект.Описание		  = ДанныеЗаписиКалендаря.Описание;
				ОписаниеФорматированныйДокумент.УстановитьHTML(ДанныеЗаписиКалендаря.Описание, Новый Структура);
			КонецЕсли;
			Если Параметры.ЗначенияЗаполнения.Свойство("Процесс") Тогда 
				Объект.Процесс = Параметры.ЗначенияЗаполнения.Процесс;
				Элементы.Тема.ПодсказкаВвода = НСтр("ru = 'Жалоба кратко'");
			КонецЕсли;			
		КонецЕсли;
		
		// Задание создается из обработки "РабочийСтол".
		Если Параметры.Свойство("РабочийСтолЗначенияЗаполнения") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры.РабочийСтолЗначенияЗаполнения);
		КонецЕсли;
		
		Объект.Инициатор = Пользователи.ТекущийПользователь();
		Если НЕ ЗначениеЗаполнено(Объект.Клиент) Тогда
			Объект.Клиент = ЗаданияСервер.КлиентИнициатора(Объект.Инициатор);				
		КонецЕсли;
				
		НайденнаяОрганизация = ЗаданияСервер.ОрганизацияИнициатора(Объект.Инициатор);
		Если ЗначениеЗаполнено(НайденнаяОрганизация) Тогда
			Объект.Организация = НайденнаяОрганизация;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Процесс) Тогда
			Объект.Процесс = Справочники.Процессы.Обращение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ТекущийЭтап) Тогда
			Объект.ТекущийЭтап = Справочники.ЭтапыПроцессов.Новый;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Срочность) Тогда
			Объект.Срочность = Перечисления.Срочность.Средняя;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Влияние) Тогда
			Объект.Влияние = Перечисления.Влияние.Среднее;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ОценкаВыполнения) Тогда
			Объект.ОценкаВыполнения = Справочники.ОценкиЗаданий.БезОценки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ТекущийИсполнитель) И ЗначениеЗаполнено(Объект.Процесс) Тогда
			Объект.ТекущийИсполнитель = ЗаданияСервер.ПолучитьИсполнителяЗаданияПоУмолчанию(Объект.Процесс);
		КонецЕсли;
		
		Объект.ПроцентВыполнения = 0;
		
		Если ЗначениеЗаполнено(Объект.Родитель) И НЕ ОткрываетсяИзВне Тогда
			// Показываем HTML.
			СтруктураВложений = Новый Структура;
			Текст = РаботаСHTML.ОбработатьТекстHTMLДляФорматированногоДокумента(Объект, Объект.Родитель.ТекстHTML, 
				СтруктураВложений);
			ОписаниеФорматированныйДокумент.УстановитьHTML(СокрЛП(Текст), СтруктураВложений);
		Иначе
			Попытка
				Если Найти(Объект.Описание, "e1cib/") = 1 Тогда
					ТекстHTML = Объект.ТекстHTML;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		ЗаданияСервер.ДобавитьНаблюдателейКоторыеПодписаныНаВсеНовыеЗадания(Объект);
		
		// Наблюдатели по умолчанию.
		Если ЗначениеЗаполнено(Объект.Процесс) Тогда
			Для Каждого СтрНаблюдатель Из Объект.Процесс.Наблюдатели Цикл
				ДобавитьПользователяВНаблюдателиНаСервере(СтрНаблюдатель.Наблюдатель);
			КонецЦикла;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		// Проверка, на то, что можно открыть документ.
		Если НЕ ЗаданияСервер.ПравоОткрытияЗадания(Объект) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Нет прав на открытие ""%1""'"), 
				Объект.Ссылка));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	
	#Область БСП_ПриСозданииНаСервере

	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ВерсионированиеОбъектов	
		
	#КонецОбласти
		
	Если (НЕ Объект.Ссылка.Пустая()) ИЛИ (ТолькоПросмотр) Тогда
		Элементы.ГруппаТекст.ТекущаяСтраница			= Элементы.СтраницаПросмотра;
		Элементы.РежимРедактированияОписания.Картинка 	= БиблиотекаКартинок.Изменить;
		Элементы.РежимРедактированияОписания.Заголовок 	= НСтр("ru = 'Правка'");
		Элементы.ВставитьКартинкуИзБуфера.Доступность	= Ложь;
	Иначе
		Элементы.ГруппаТекст.ТекущаяСтраница 			= Элементы.СтраницаПравки;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Элементы.РежимРедактированияОписания.Доступность = Ложь;
		Элементы.Тема.ТолькоПросмотр = Истина;
		Элементы.Основное.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ОбновитьВидимость();
	
	Элементы.Вложения.Видимость = Ложь;
	
	Если ТолькоПросмотр = Истина Тогда
		УстановитьДоступностьПриСозданииНаСервере();
   КонецЕсли;
    
   НеобходимостьПереходаВКонецКомментариев = НеобходимостьПереходаВКонецКомментариев();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Если РегистрыСведений.РеквизитыЗаданийПоПользователям.УстановитьДатуОткрытия(Объект.Ссылка) Тогда
			ОповеститьОПрочтении = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
   ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
   // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли;
	
	Если ОповеститьОПрочтении Тогда
		ОповеститьОбИзменении(Объект.Ссылка);	
	КонецЕсли;	
		
	// Корректировки документа
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	Если НЕ Объект.Ссылка.Пустая() И КоличествоСообщений > 0 
		И УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиент.ТекущийПользователь(), "ОткрыватьНеНовоеЗаданиеНаВкладеСообщение") = Истина Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаКомментарии;
		
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда	
		ЭтаФорма.ТекущийЭлемент = Элементы.Страницы;
	КонецЕсли;
	
	// Переписка по заданию.
	ВывестиКомментарии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Если Параметр.Свойство("ВладелецФайла") И Параметр.ВладелецФайла = Объект.Ссылка Тогда
		
			ОбновитьВидимость();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Комментарий" Тогда
		
		Если Параметр.Свойство("ВладелецКомментария") И Параметр.ВладелецКомментария = Объект.Ссылка Тогда
			Если (Не Модифицированность) И (НЕ МодифицированностьОписаниеФорматированныйДокумент) Тогда
				ЭтаФорма.Прочитать();
			КонецЕсли;
			ОбновитьЗаголовокКомментариев();
		КонецЕсли;
		
	КонецЕсли;
			
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СЛС.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
	ПараметрыОбработкиТекста = Неопределено;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТаблицаВложенийКартинокФорматированногоДокумента = ЗаданияСервер.ПолучитьВложения(Объект.Ссылка, Ложь);
		Для Каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
			Если СтрЧислоВхождений(Вложение.ИДФайлаЭлектронногоПисьма, "docimg_") > 0 Тогда
				НоваяСтрока 				= ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла 		= Вложение.Наименование;
				НоваяСтрока.ИдентификаторФайлаДляHTML = "docimg_" + Строка(Новый УникальныйИдентификатор);
				Попытка
					НоваяСтрока.Картинка	= Новый Картинка(РаботаСФайлами.ДвоичныеДанныеФайла(Вложение.Ссылка));
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		ПараметрыОбработкиТекста = Новый Структура("ПрисоединенныеФайлы", 
			ТаблицаВложенийКартинокФорматированногоДокумента);
	КонецЕсли;

	// Установим текст и вид текста.
	ТекстHTML			   = РаботаСHTML.ОбработатьТекстHTML(Объект.Ссылка, ПараметрыОбработкиТекста, 
		УникальныйИдентификатор);
	Элементы.ТекстHTML.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	Элементы.ТекстHTML.ТолькоПросмотр = Ложь;
		
	// Подготовим форматированный документ.
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ИдентификаторСообщения) Тогда
		СтруктураВложений = Новый Структура;
		Текст = РаботаСHTML.ОбработатьТекстHTMLДляФорматированногоДокумента(Объект, Объект.ТекстHTML, 
			СтруктураВложений);
		ОписаниеФорматированныйДокумент.УстановитьHTML(СокрЛП(Текст), СтруктураВложений);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	мТекущаяДата = ТекущаяДатаСеанса();
	
	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		ТекущийОбъект.Дата = мТекущаяДата;
	КонецЕсли;
		
	Если ТекущийОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ТекущийОбъект.ДатаСоздания = мТекущаяДата;
		
		ДоступностьSLA = ПолучитьДоступностьSLA();
		Если ДоступностьSLA = Истина Тогда 
			РассчитатьSLA(ТекущийОбъект);
		КонецЕсли;
		
	Иначе
		ТекущийОбъект.ДатаКорректировки = мТекущаяДата;
	КонецЕсли; 
	
	Если ТекущийОбъект.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	Иначе
		ТекущийОбъект.АвторКорректировки = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Записываем картинки и текст.	
	Если МодифицированностьОписаниеФорматированныйДокумент = Истина Тогда
		СохранитьФорматированныйДокумент();
		ТекущийОбъект.ТекстHTML	= ТекстHTML;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		Попытка
			ТекущееЗадание   = Документы.Задание.ПолучитьСсылку(Новый УникальныйИдентификатор());
			ТекущийОбъект.УстановитьСсылкуНового(ТекущееЗадание);
		Исключение
			ОписаниеОш = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОш);
			Возврат;
		КонецПопытки;
	Иначе
		ТекущееЗадание = Объект.Ссылка;
	КонецЕсли;
	
	// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
	Если МодифицированностьОписаниеФорматированныйДокумент = Истина Тогда
		УдаленныеВложения = Новый СписокЗначений;
		ТаблицаВложенийКартинокФорматированногоДокумента = ЗаданияСервер.ПолучитьВложения(ТекущееЗадание, Ложь);
		Для Каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
			Если СтрЧислоВхождений(Вложение.ИДФайлаЭлектронногоПисьма, "docimg_") > 0 Тогда
				УдаленныеВложения.Добавить(Вложение.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		// Удалим удаленные вложения
		Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
			ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
			Попытка
				ОбъектВложение.Заблокировать();
				ОбъектВложение.Удалить();
			Исключение
			    ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление вложений при записи'"),
			       УровеньЖурналаРегистрации.Ошибка,,,
			       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЦикла;
		
		// Записываем новые вложения - картинки из форматированного документа в присоединенные файлы.
		Для Каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ДополнительныеРеквизиты = Новый Структура("ИДФайлаЭлектронногоПисьма", Вложение.ИдентификаторФайлаДляHTML);
			ПараметрыФайла 			= РаботаСФайлами.ПараметрыДобавленияФайла(ДополнительныеРеквизиты);
			ПараметрыФайла.ВладелецФайлов = ТекущееЗадание; 
			ПараметрыФайла.Вставить("ИмяБезРасширения",   "_" 
				+ СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_"));
			ПараметрыФайла.Вставить("РасширениеБезТочки", "png");
			ПараметрыФайла.ВремяИзмененияУниверсальное = Неопределено;
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилище); 			
			
		КонецЦикла;
	КонецЕсли;
	
	// Вложения, которые были прикреплены в файлах.
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл		
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			
			// из временного хранилища.
			РазложенноеИмяФайла = УправлениеITОтделом8УФ.РазложитьИмяФайла(СтрокаТаблицыВложений.ИмяФайла);
			ПараметрыФайла 		= РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.ВладелецФайлов = ТекущееЗадание; 
			ПараметрыФайла.ВремяИзмененияУниверсальное = Неопределено;
			ЗаполнитьЗначенияСвойств(ПараметрыФайла, РазложенноеИмяФайла);			
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
			
		КонецЕсли;		
		СтрокаТаблицыВложений.Расположение = 0;		
	КонецЦикла;
	
	ОбновитьВидимость();
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	СЛС.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	ОбновитьВидимость();
	УстановитьТолькоПросмотрОписания();
	РегистрыСведений.РеквизитыЗаданийПоПользователям.УстановитьДатуОткрытия(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Корректировки документа
	Если ПараметрыЗаписи.Свойство("ОбновитьФормуСпискаЗаданий")
		И ПараметрыЗаписи.ОбновитьФормуСпискаЗаданий = Истина Тогда
		Оповестить("ОбновитьФормуСпискаЗаданий");
	КонецЕсли;
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, 
			"ДокументЗаданиеУпрощенаяФорма (проведение)");	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ОбновитьФормуСпискаЗаданий", Модифицированность ИЛИ Объект.Ссылка.Пустая());
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
       ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.ЗамерВремени();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , 
						"Вложения", , Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Если Элементы.Вложения.Видимость = Истина Тогда
		Элементы.Вложения.Видимость = Ложь;
	КонецЕсли;
	Элементы.ФормаФайлы.Пометка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьАвторНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НадписьАвторНажатиеЗавершение", ЭтотОбъект), 
		УправлениеITОтделом8УФКлиент.ПолучитьСписокНадписьАвтор(Объект), Элементы.НадписьАвтор, );
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура НадписьАвторНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт    

КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленоФайловНажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Вложения.Видимость = Не Элементы.Вложения.Видимость;
		Элементы.ФормаФайлы.Пометка = Элементы.Вложения.Видимость;
	Иначе
		ПереходПрисоединенныеФайлыФрагмент();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеФорматированныйДокументПриИзменении(Элемент)
	
	МодифицированностьОписаниеФорматированныйДокумент = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СрочностьПриИзменении(Элемент)
	
	ДоступностьSLA = ПолучитьДоступностьSLA();
	Если ДоступностьSLA = Истина Тогда 
		РассчитатьSLA();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаПриИзменении(Элемент)
	
	ДоступностьSLA = ПолучитьДоступностьSLA();
		Если ДоступностьSLA = Истина Тогда 
		РассчитатьSLA();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияSLAНажатие(Элемент)
	
	ДокументЗадание	= Новый Структура();
	ДокументЗадание.Вставить("Задание", Объект);
	
	ОткрытьФорму("Документ.Задание.Форма.ИнформацияSLA", ДокументЗадание, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
КонецПроцедуры

&НаКлиенте
Процедура СервисПриИзменении(Элемент)
	
	ПриИзмененииСервиса();
	
	ДоступностьSLA = ПолучитьДоступностьSLA();
		Если ДоступностьSLA = Истина Тогда 
		РассчитатьSLA();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СервисНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтборПараметры		 = Новый Структура();
	
	ОтборПараметры.Вставить("ТипСервиса", ПредопределенноеЗначение("Перечисление.ТипыСервисов.ПользовательскийСервис"));
			
	ОписаниеОповещения 	 = Новый ОписаниеОповещения("СервисПослеВыбора", ЭтотОбъект);
	ОткрытьФорму("Справочник.Сервисы.Форма.ФормаВыбора", ОтборПараметры, ЭтаФорма,,,, ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ЗадачаНеРешенаВернутьНаВыполнениеНаСервере()
	
	Объект.Выполнено = Ложь;
	Объект.ПроцентВыполнения = 0;
	
	Индекс = Объект.Этапы.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Стр = Объект.Этапы.Получить(Индекс);
		Если ЗначениеЗаполнено(Стр.Этап) Тогда
			Если Стр.Этап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Выполнен 
				И Стр.Этап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Закрыт Тогда
				
				Объект.ТекущийЭтап = Стр.Этап;
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеРешенаВернутьНаВыполнение(Команда)
	
	ЗадачаНеРешенаВернутьНаВыполнениеНаСервере();
	Записать();
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Оп = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);
	ЗаданияКлиент.ПолучитьКартинкуИзБуфераОбмена(Оп);
		
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Подключено, ДвоичныеДанные) Экспорт
	
	Если Подключено = Истина Тогда
		ВставитьКартинкуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзДвоичныхДанных(Знач ДвоичныеДанные)
	
	НП=0; КП=0;
	//@skip-warning
	Элементы.ОписаниеФорматированныйДокумент.ПолучитьГраницыВыделения(НП, КП);
	Элементы.ОписаниеФорматированныйДокумент.ВыделенныйТекст = "";
	ВставитьКартинкуВОписаниеНаСервере(ДвоичныеДанные, НП);
	Модифицированность = Истина;
	МодифицированностьОписаниеФорматированныйДокумент = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьКартинкуВОписаниеНаСервере(ДвоичныеДанные, НП)
	
	Картинка = Новый Картинка(ДвоичныеДанные);
	ОписаниеФорматированныйДокумент.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	//@skip-warning
	ОписаниеФорматированныйДокумент.Вставить(НП, Картинка, ТипЭлементаФорматированногоДокумента.Картинка); 
	//@skip-warning
	ОписаниеФорматированныйДокумент.Вставить(НП, Символы.ПС, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСкриншотИзДвоичныхДанных(ДвоичныеДанные)
	
	Попытка
		ЭтотОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось записать задание'"));
	КонецПопытки;
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",              Объект.Ссылка);
	ПараметрыФайла.Вставить("Автор",                       Пользователи.ТекущийПользователь());
	ПараметрыФайла.Вставить("ИмяБезРасширения",            
		СтрШаблон(НСтр("ru = 'Снимок экрана %1'"), Формат(ТекущаяДатаСеанса(), "ДФ='(dd-MM-yyyy HH-mm-ss)'")));
	ПараметрыФайла.Вставить("РасширениеБезТочки",          "jpg");
	ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
	РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДвоичныеДанные, 
		УникальныйИдентификатор), "");
	Модифицированность 	= Истина;
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкриншот(Команда)
		
	Оп = Новый ОписаниеОповещения("ДобавитьСкриншотЗавершение", ЭтотОбъект);
	ЗаданияКлиент.ПолучитьКартинкуИзБуфераОбмена(Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкриншотЗавершение(Подключено, ДвоичныеДанные) Экспорт
	
	Если Подключено	= Истина Тогда
		СоздатьСкриншотИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходПрисоединенныеФайлыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	Если Не ЗаписатьДокументНаСервере(Ложь) Тогда
		Возврат;
	КонецЕсли;
	ПереходПрисоединенныеФайлыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходПрисоединенныеФайлыФрагмент()
	
	Структура = Новый Структура;
	Структура.Вставить("ВладелецФайла", Объект.Ссылка);
	Структура.Вставить("ТолькоФайлы", Истина);
	Структура.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", Структура, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьФорматированныйДокумент()
	
	// Надо сохранить форматированный документ в HTML.
	СтруктураВложений = Новый Структура;
	ОписаниеФорматированныйДокумент.ПолучитьHTML(ТекстHTML, СтруктураВложений);
	
	ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
	Для Каждого Вложение Из СтруктураВложений Цикл
		
		НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
		НоваяСтрока.ИмяФайла = Вложение.Ключ;
		НоваяСтрока.ИдентификаторФайлаДляHTML = "docimg_" + Строка(Новый УникальныйИдентификатор);
		НоваяСтрока.Картинка = Вложение.Значение;
		
	КонецЦикла;
	
	Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
		
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
		Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
		    ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
		ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
	КонецЕсли;
	
	Если СтрНайти(НРег(ТекстHTML), "<body>") > 0 Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, Сред(ТекстHTML, СтрНайти(НРег(ТекстHTML), "<body>"), 6),
			"<body style=""font-family:Arial;font-size:10pt;"">");
	КонецЕсли;
	
	ТекстHTML = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстHTML);
		
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияОписания(Команда)
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(НСтр("ru = 'Задание записано и описание задания '"));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'не подлежит'"),Новый Шрифт(,,Истина), 
			WebЦвета.Красный));
		МассивСтрок.Добавить(НСтр("ru = ' изменению.
                                       |Для уточнений и переписки в задании используйте вкладку '"));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '""Комментарии""'"),,WebЦвета.Синий));
		МассивСтрок.Добавить(".");
		ПоказатьПредупреждение(, Новый ФорматированнаяСтрока(МассивСтрок),, НСтр("ru = 'Правка не доступна'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаТекст.ТекущаяСтраница = Элементы.СтраницаПравки 
		И МодифицированностьОписаниеФорматированныйДокумент = Истина Тогда
		Записать();
	КонецЕсли;
	Элементы.ГруппаТекст.ТекущаяСтраница = ?(Элементы.ГруппаТекст.ТекущаяСтраница = Элементы.СтраницаПросмотра,
		Элементы.СтраницаПравки, Элементы.СтраницаПросмотра);
	УстановитьТолькоПросмотрОписания();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотрОписания()
	
	РежимТолькоПросмотра = (Элементы.ГруппаТекст.ТекущаяСтраница = Элементы.СтраницаПросмотра) ИЛИ ТолькоПросмотр;
	
	Если РежимТолькоПросмотра Тогда
		// Установим текст и вид текста.
		ТекстHTML 						  = РаботаСHTML.ОбработатьТекстHTML(Объект.Ссылка, , 
			УникальныйИдентификатор);
		Элементы.ТекстHTML.Вид 			  = ВидПоляФормы.ПолеHTMLДокумента;
		Элементы.ТекстHTML.ТолькоПросмотр = Ложь;
	Иначе		
		// Показываем HTML.
		СтруктураВложений = Новый Структура;
		Текст = РаботаСHTML.ОбработатьТекстHTMLДляФорматированногоДокумента(Объект, Объект.ТекстHTML, 
			СтруктураВложений);
		ОписаниеФорматированныйДокумент.УстановитьHTML(СокрЛП(Текст), СтруктураВложений);
	КонецЕсли;
	
	Элементы.ПанельФорматированияОписания.Доступность	= НЕ РежимТолькоПросмотра;
	Элементы.ВставитьКартинкуИзБуфера.Доступность		= НЕ РежимТолькоПросмотра;
	Элементы.РежимРедактированияОписания.Картинка 		= ?(РежимТолькоПросмотра, БиблиотекаКартинок.Изменить, 
		БиблиотекаКартинок.НеРедактировать);
	Элементы.РежимРедактированияОписания.Заголовок 		= ?(РежимТолькоПросмотра, НСтр("ru = 'Правка'"), 
		НСтр("ru = 'Просмотр'"));
	
КонецПроцедуры

// Вложения.
&НаКлиенте
Процедура ДобавитьВложение(Команда)
	
	#Если Не ВебКлиент Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.МножественныйВыбор = Истина;
		ОписаниеОповещение        = Новый ОписаниеОповещения("ДиалогВыбораФайловПослеВыбора", ЭтотОбъект);
		Диалог.Показать(ОписаниеОповещение);
		
	#Иначе

		Адрес         = "";
		ВыбранныйФайл = "";
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ПомещениеФайлаПриОкончании", ЭтотОбъект);
		НачатьПомещениеФайла(ОбработчикОповещенияОЗакрытии, Адрес, ВыбранныйФайл, Истина, УникальныйИдентификатор);
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда
		
		Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Ссылка, ПараметрыВложения(), ЭтотОбъект);
		Иначе			
			УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка, ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
		ПутьКФайлу = ТекущиеДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			
			Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
				
				Попытка					
					Данные = Новый ДвоичныеДанные(ТекущиеДанные.ИмяФайлаНаКомпьютере);
					ВзаимодействияКлиент.ОткрытьВложениеПисьмо(
						ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор), 
                       ПараметрыВложения(), ЭтотОбъект);
				Исключение
					ЗапуститьПриложение("""" + ПутьКФайлу + """");
				КонецПопытки;
			Иначе
				ЗапуститьПриложение("""" + ПутьКФайлу + """");
			КонецЕсли;
			
		#Иначе
			ПолучитьФайл(ПутьКФайлу, ТекущиеДанные.ИмяФайла, Истина);
		#КонецЕсли
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		
		ПутьКФайлу = ТекущиеДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ИмяФайлаНаКомпьютере) Тогда
				ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
				СоздатьКаталог(ИмяВременнойПапки);
				ПутьКФайлу = ИмяВременнойПапки + "\" + ТекущиеДанные.ИмяФайла;
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ТекущиеДанные.ИмяФайлаНаКомпьютере);
				ДвоичныеДанные.Записать(ПутьКФайлу);
			КонецЕсли;
			ЗапуститьПриложение("""" + ПутьКФайлу + """");
		#Иначе
			ПолучитьФайл(ПутьКФайлу, ТекущиеДанные.ИмяФайла, Истина);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзФормы(Команда)
	
	Записать(Новый Структура("РежимЗаписи,ОбновлятьФорму", РежимЗаписиДокумента.Проведение,Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)

	Идентификатор 		= Строка(УникальныйИдентификаторОбъекта());	
	АдресСсылкиСоздать	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_create("comment",
		Новый Структура("article", Идентификатор));
	ДанныеСобытия = Новый Структура("HRef", АдресСсылкиСоздать);	

	ДополнительныеПараметрыФормы  = Новый Структура;
	ТребуетсяЗапись = Объект.Ссылка.Пустая();
	ДополнительныеПараметрыФормы.Вставить("ТребуетсяЗапись", ТребуетсяЗапись);	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОбработкиНажатияКомментарииПолеHTML", ЭтотОбъект);
	КомментарииКлиент.КомментарииПолеHTMLПриНажатии(ДанныеСобытия, ОписаниеОповещения, ЭтаФорма,
		ДополнительныеПараметрыФормы);		

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, 
	СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура ОбновитьВидимость()
	
	мТекущийИсполнитель					= Объект.ТекущийИсполнитель;
	
	// Заполняем сколько файлов прикреплено.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК КоличествоФайлов
		|ИЗ
		|	Справочник.ЗаданиеПрисоединенныеФайлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И Файлы.ИДФайлаЭлектронногоПисьма = """"
		|	И Файлы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	ЗаголовокФайлыВЗадании = НСтр("ru = 'Файлы'");
	Если Выборка.Следующий() Тогда
		Если Выборка.КоличествоФайлов > 0 Тогда
			ЗаголовокФайлыВЗадании = СтрШаблон(НСтр("ru = 'Файлы (%1)'"), Выборка.КоличествоФайлов);
		КонецЕсли;
	КонецЕсли;
	Элементы.ФормаФайлы.Заголовок = ЗаголовокФайлыВЗадании;
		
	ТолькоПросмотр = НЕ ЗаданияСервер.ПравоРедактированияТекущийПользователь(Объект);
	Элементы.ФормаДобавитьСкриншот.Доступность = НЕ ТолькоПросмотр;
		
	мОбъектТекущийЭтап 									= Объект.ТекущийЭтап;
		
	Элементы.ГруппаИсполнитель.Видимость 				= ЗначениеЗаполнено(мТекущийИсполнитель);
	Если Элементы.ГруппаИсполнитель.Видимость Тогда
		
		мWebЦветаБелый 	= WebЦвета.Белый;
		мWebЦветаЧерный = WebЦвета.Черный;
		мКартинка		= БиблиотекаКартинок.сстВыполнение;
		
		СтрТекущийИсполнитель = Строка(мТекущийИсполнитель);
		Контакты 		= "";
		Если ТипЗнч(мТекущийИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			Стр = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(мТекущийИсполнитель,
				Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
			Если НЕ ПустаяСтрока(Стр) Тогда
				Контакты = Контакты + "тел. " + Стр + " ";
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Контакты) Тогда
			СтрТекущийИсполнитель = СтрТекущийИсполнитель + " (" + СокрЛП(Контакты) + ")";
		КонецЕсли;
		
		Элементы.НадписьТекущийИсполнитель.Заголовок 	= СтрТекущийИсполнитель;
		Элементы.КартинкаТекущийИсполнитель.Картинка 	= БиблиотекаКартинок.ИсполнительВыбор;
			
	КонецЕсли;
		
	Элементы.ГруппаЭтап.Видимость 						= ЗначениеЗаполнено(мОбъектТекущийЭтап) 
		И мОбъектТекущийЭтап <> Справочники.ЭтапыПроцессов.Новый;
		
	Если Элементы.ГруппаЭтап.Видимость Тогда
		
		Элементы.НадписьТекущийЭтап.Заголовок = мОбъектТекущийЭтап.Наименование;
		Попытка
			Элементы.КартинкаТекущийЭтап.Картинка = мОбъектТекущийЭтап.Картинка.Получить();
		Исключение	
			Элементы.КартинкаТекущийЭтап.Картинка = мКартинка;
		КонецПопытки;
			
		Если НЕ ЗначениеЗаполнено(мОбъектТекущийЭтап) Тогда
			мОбъектТекущийЭтап = Объект.ТекущийЭтап;
		КонецЕсли;
				
		Попытка
			Элементы.ГруппаЭтап.ЦветФона 			= РаботаСЦветомКлиентСервер.HexВЦвет(мОбъектТекущийЭтап.ЦветФона);
			Элементы.НадписьТекущийЭтап.ЦветТекста 	= РаботаСЦветомКлиентСервер.HexВЦвет(мОбъектТекущийЭтап.ЦветТекста);
		Исключение
			Элементы.ГруппаЭтап.ЦветФона 			= мWebЦветаБелый;
			Элементы.НадписьТекущийЭтап.ЦветТекста 	= мWebЦветаЧерный;
		КонецПопытки;
		
	КонецЕсли;
		
	Элементы.Тема.ТолькоПросмотр					= Объект.Выполнено ИЛИ ТолькоПросмотр;
	
	// Сервис и услугу можно редактировать если задание не выполнено, 
	// не открыто для только просмотра и не назначен исполнитель.
	Элементы.Сервис.ТолькоПросмотр					= Объект.Выполнено ИЛИ ТолькоПросмотр 
		ИЛИ ЗначениеЗаполнено(Объект.ТекущийИсполнитель);	
	Элементы.Услуга.ТолькоПросмотр					= Объект.Выполнено ИЛИ ТолькоПросмотр 
		ИЛИ ЗначениеЗаполнено(Объект.ТекущийИсполнитель);
	Элементы.ДекорацияИнформацияSLA.Видимость = ПолучитьФункциональнуюОпцию("SLAСервисыРаботы");
	
	Элементы.ОписаниеФорматированныйДокумент.ТолькоПросмотр = Объект.Выполнено ИЛИ ТолькоПросмотр;
	Элементы.ПанельФорматированияОписания.Видимость = НЕ Объект.Выполнено ИЛИ ТолькоПросмотр;
	Элементы.ГруппаДатаИПриоритет.ТолькоПросмотр	= Объект.Выполнено ИЛИ ТолькоПросмотр;
	Элементы.ГруппаЗадачаНеРешена.Видимость			= Объект.Выполнено ИЛИ ТолькоПросмотр;
	УстановитьДоступностьПриСозданииНаСервере();
	
	Если ЭтоВебКлиент Тогда
		Элементы.ВставитьКартинкуИзБуфера.Видимость	= Ложь;
		Элементы.ФормаДобавитьСкриншот.Видимость	= Ложь;
	КонецЕсли;
	
	ОбновитьЗаголовокКомментариев();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПользователяВНаблюдателиНаСервере(Адресат)
	
	Если ЗначениеЗаполнено(Адресат) 
		И Объект.Наблюдатели.НайтиСтроки(Новый Структура("Адресат", Адресат)).Количество() = 0 Тогда
		
		НоваяСтрока 		= Объект.Наблюдатели.Добавить();
		НоваяСтрока.Адресат	= Адресат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДокументНаСервере(РежимЗаписиПроведение)
	
	Док = РеквизитФормыВЗначение("Объект");
	Если РежимЗаписиПроведение = Истина Тогда 	
		Попытка	
			Док.Записать(РежимЗаписиДокумента.Проведение);
			ЗначениеВРеквизитФормы(Док,"Объект");
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	Иначе 
		Попытка
			Док.Записать(РежимЗаписиДокумента.Запись);
			ЗначениеВРеквизитФормы(Док,"Объект");
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СообщенияХТМЛПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;	
	Если ДанныеСобытия.Anchor = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыФормы  = Новый Структура;
	ТребуетсяЗапись = Объект.Ссылка.Пустая() ИЛИ Модифицированность;
	ДополнительныеПараметрыФормы.Вставить("ТребуетсяЗапись", ТребуетсяЗапись);	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОбработкиНажатияКомментарииПолеHTML", ЭтотОбъект);
	КомментарииКлиент.КомментарииПолеHTMLПриНажатии(ДанныеСобытия, ОписаниеОповещения, ЭтаФорма, 
		ДополнительныеПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиНажатияКомментарииПолеHTML(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ТребуетсяЗапись") 
			И Результат.ТребуетсяЗапись Тогда				
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаЗаписатьЗаданиеДобавлениеКомментария", 
				ЭтотОбъект,	Результат);
			ПоказатьВопрос(ОписаниеОповещения, 
				НСтр("ru = 'Данные еще не записаны. Для добавления комментария необходима запись данных. Продолжить?'"), 
				РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.ГруппаКомментарии Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаКомментарии;
	КонецЕсли;
	
	ВывестиКомментарии();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаписатьЗаданиеДобавлениеКомментария(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Попытка
			Записать();
		Исключение
			ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Не удалось записать документ по причине: %1'"), 
				ОписаниеОшибки()));
			Возврат;
		КонецПопытки;
	КонецПопытки;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОбработкиНажатияКомментарииПолеHTML", ЭтотОбъект);
	КомментарииКлиент.ОбработатьАдресСсылки_create(ДополнительныеПараметры.ДанныеСсылки, ОписаниеОповещения, 
		ЭтотОбъект);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВывестиКомментарии()
		
	мТекстHTML = ПолучитьКомментарии(Объект.Ссылка, УникальныйИдентификатор);
	Если СообщенияХТМЛ <> мТекстHTML Тогда
		ОбновитьЗаголовокКомментариев();
		СообщенияХТМЛ = мТекстHTML;
		Если НеобходимостьПереходаВКонецКомментариев Тогда
			ПодключитьОбработчикОжидания("ПрокруткаДоКонцаКомментариев", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКомментарии(Знач Задание, Знач УникальныйИдентификатор)
	
	Возврат Комментарии.ПолучитьHTML(Задание, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПрокруткаДоКонцаКомментариев()
    
    #Если Не ВебКлиент Тогда
    Элементы.СообщенияХТМЛ.Документ.body.scrollTop = Элементы.СообщенияХТМЛ.Документ.body.scrollHeight + 100000;
    #КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокКомментариев()
	
	КоличествоКомментариев = ?(Объект.Ссылка.Пустая(), 0, Комментарии.КоличествоКомментариев(Объект.Ссылка));
	Элементы.ГруппаКомментарии.Заголовок = НСтр("ru = 'Комментарии'") + ?(КоличествоКомментариев > 0, " (" 
		+ Строка(КоличествоКомментариев) + ")", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайловПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Расположение 		 = 2;
		НоваяСтрока.ИмяФайлаНаКомпьютере = ВыбранныйФайл;
		
		ИмяФайла 			 = ИмяФайлаБезКаталога(ВыбранныйФайл);
		НоваяСтрока.ИмяФайла = ИмяФайла;
		
		Расширение                  = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
		НоваяСтрока.ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
		ДополнительныеПараметры 	= Новый Структура("СтрокаТаблицыВложений", НоваяСтрока);		
			
		Файл = Новый Файл(ВыбранныйФайл);
		Файл.НачатьПолучениеРазмера(
			Новый ОписаниеОповещения("ПолучениеРазмераЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
	КонецЦикла;
	
	Если ВыбранныеФайлы.Количество() > 0 Тогда
		Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяФайлаБезКаталога(Знач ПолноеИмяФайла)
	
	ИмяФайла = ПолноеИмяФайла;
	Пока Истина Цикл
		
		Позиция = Макс(СтрНайти(ИмяФайла, "\"), СтрНайти(ИмяФайла, "/"));
		Если Позиция = 0 Тогда
			Возврат ИмяФайла;
		КонецЕсли;
		
		ИмяФайла = Сред(ИмяФайла, Позиция + 1);
		
	КонецЦикла;
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура ПомещениеФайлаПриОкончании(РезультатПомещения, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если РезультатПомещения = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение         = 4;
	НоваяСтрока.ИмяФайлаНаКомпьютере = Адрес;
	НоваяСтрока.ИмяФайла             = ВыбранноеИмяФайла;
	
	Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ВыбранноеИмяФайла);
	НоваяСтрока.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	
	Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();	
	ОбновитьЗаголовокФайлы();	
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеРазмераЗавершение(Размер, ДополнительныеПараметры) Экспорт

	СтрокаТаблицыВложений  = ДополнительныеПараметры.СтрокаТаблицыВложений;
	СтрокаТаблицыВложений.Размер = Размер;
	СтрокаТаблицыВложений.РазмерПредставление = 
		ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 
		
	ОбновитьЗаголовокФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФайлы()
	
	Если Вложения.Количество() > 0 Тогда
		Элементы.ФормаФайлы.Заголовок = СтрШаблон(НСтр("ru = 'Файлы (%1)'"), Вложения.Количество());
	Иначе
		Элементы.ФормаФайлы.Заголовок = НСтр("ru = 'Файлы'");
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Функция ПараметрыВложения()
	
	ПараметрыВложения = ВзаимодействияКлиент.ПустаяСтруктураПараметровПисьмаВложения();
	ПараметрыВложения.ДатаПисьмаОснования = Объект.Дата;
	ПараметрыВложения.ПисьмоОснование     = Объект.Ссылка;
	ПараметрыВложения.ТемаПисьмаОснования = Объект.Заголовок;
	
	Возврат ПараметрыВложения;
	
КонецФункции

&НаКлиенте
Процедура ВопросОЗаписиФайлаПослеЗакрытия(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьСвойстваВложения(ДополнительныеПараметры.ТекущийИндексВКоллекции);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваВложения(ТекущийИндексВКоллекции)
	
	ТекущиеДанные = Вложения.Получить(ТекущийИндексВКоллекции);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Вложения.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		
	ФайлДоступенДляРедактирования = 
		(Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик"));
	ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ТолькоПросмотр", 
		ТекущиеДанные.Ссылка,НЕ ФайлДоступенДляРедактирования);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы,, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложение(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьВложение(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка             = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ТипЗнч(ФайлПринятый) = Тип("Файл") Тогда
					МассивФайлов.Добавить(ФайлПринятый);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		ДополнительныеПараметры = Новый Структура("ВыбранныйФайл", ВыбранныйФайл);
		ОписаниеОповещение = Новый ОписаниеОповещения("ПроверкаЭтоФайлПослеЗавершения", ЭтотОбъект, 
			ДополнительныеПараметры);
		ВыбранныйФайл.НачатьПроверкуЭтоФайл(ОписаниеОповещение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЭтоФайлПослеЗавершения(ЭтоФайл, ДополнительныеПараметры) Экспорт

	Если НЕ ЭтоФайл Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = ДополнительныеПараметры.ВыбранныйФайл.ПолноеИмя;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение = 2;
	НоваяСтрока.ИмяФайлаНаКомпьютере = ПолноеИмя;
	
	ИмяФайла = ИмяФайлаБезКаталога(ПолноеИмя);
	НоваяСтрока.ИмяФайла = ИмяФайла;
	
	Расширение                      = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
	НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	ДополнительныеПараметры         = Новый Структура("СтрокаТаблицыВложений", НоваяСтрока);
	//@skip-warning
	ОписаниеОповещение              = Новый ОписаниеОповещения("НовыйФайлПослеИнициализации", ЭтотОбъект, 
		ДополнительныеПараметры);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещение, ПолноеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПослеУдаления(Элемент)
	
	ОбновитьЗаголовокФайлы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПриСозданииНаСервере()
	
	Если ТолькоПросмотр = Истина Тогда
		Элементы.ФормаДобавитьСкриншот.Доступность = Ложь;
		Если Объект.Завершено Тогда
			Стр = НСтр("ru = 'Задание завершено и не подлежит изменениям. Если есть какие-то вопросы закройте форму этого документа и создайте новый документ.'");
		Иначе
			Стр = НСтр("ru = 'Задание не подлежит изменению. Недостаточно прав для его редактирования.'");
		КонецЕсли;
		Элементы.ЗадачаНеРешена.Заголовок = Стр;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьSLA(Источник = Неопределено)
		
	ОбъектИзменения = ?(Источник = Неопределено, Объект, Источник);
	Если ОбъектИзменения.РучнаяУстановкаДатВSLA = Истина Тогда
		Возврат Ложь;
	КонецЕсли;	
	Результат = УправлениеSLA.РассчитатьSLA(ОбъектИзменения);
	
	Если Результат.Свойство("НеВсеДанные") Тогда
		ОбъектИзменения.УслугаНедоступна = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	Если Результат.Свойство("Ошибки") Тогда
		ОбъектИзменения.УслугаНедоступна = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Процесс) Тогда
		ОбъектИзменения.Процесс = Результат.Процесс;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбъектИзменения, Результат, 
		"Клиент, КрайняяДатаРеакции, КрайняяДатаВыполнения, Организация, УслугаНедоступна, SLA");
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииСервиса()
	
	Если НЕ ЗначениеЗаполнено(Объект.Сервис) И ЗначениеЗаполнено(Объект.Услуга) Тогда
		Объект.Услуга = Справочники.Услуги.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сервис) И ЗначениеЗаполнено(Объект.Услуга) Тогда
		Если Объект.Сервис <> Объект.Услуга.Владелец Тогда
			Объект.Услуга = Справочники.Услуги.ПустаяСсылка();
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДоступностьSLA()
	
	Если ПолучитьФункциональнуюОпцию("SLAСервисыРаботы") = Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции
	
&НаКлиенте
Процедура СервисПослеВыбора(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Сервис = Результат;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция НеобходимостьПереходаВКонецКомментариев()
	
	УпорядочиваниеКомментариевВЗадании = 
		УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеНастройки("УпорядочиваниеКомментариевВЗадании");
	Если НЕ ЗначениеЗаполнено(УпорядочиваниеКомментариевВЗадании) Тогда
		УпорядочиваниеКомментариевВЗадании = Перечисления.УпорядочиваниеКомментариевВЗадании.ПоДатеПоВозрастанию;
	КонецЕсли;
	
	Возврат УпорядочиваниеКомментариевВЗадании = Перечисления.УпорядочиваниеКомментариевВЗадании.ПоДатеПоВозрастанию;
	
КонецФункции

&НаСервере
Функция УникальныйИдентификаторОбъекта()
    
    ОбъектЗадание = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.Задание"));    
    Возврат ОбъектЗадание.Ссылка.УникальныйИдентификатор(); 
    
КонецФункции

#КонецОбласти