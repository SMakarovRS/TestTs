
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь	= Пользователи.ТекущийПользователь();
	// Мои, подчиненных, не мои
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);	
	// Получаем подчиненных
	СписокПодчиненных         = УправлениеITОтделом8УФ.СписокПодчиненныхСотрудников(ТекущийПользователь);	
    Список.Параметры.УстановитьЗначениеПараметра("СписокПодчиненных", СписокПодчиненных);
	
	Список.Параметры.УстановитьЗначениеПараметра("СписокПользователейИГруппПользователей",
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекущийПользователь));
		
	Список.Параметры.УстановитьЗначениеПараметра("ДоступностьРолиПросмотраЧужихЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Список.Параметры.УстановитьЗначениеПараметра("ДоступностьРолиПросмотраНеРаспределенныхЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Список.Параметры.УстановитьЗначениеПараметра("ДоступностьРолиПолныеПрава", 
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
	
	// Добавляем раскраску динамического списка с заданиями
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьЦветаЭтаповПроцесса" Тогда
		УстановитьУсловноеОформление();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события формы "ПриЗагрузкеДанныхИзНастроекНаСервере".
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)	
	
	Если Параметры.Свойство("ОтборОрганизация") И ЗначениеЗаполнено(Параметры.ОтборОрганизация) Тогда
		ОтборОрганизация = Параметры.ОтборОрганизация;
	Иначе 
		ОтборОрганизация = Настройки.Получить("ОтборОрганизация");
	КонецЕсли;	
	
	ОтборИнициатор			= Настройки.Получить("ОтборИнициатор");
	ОтборТекущийИсполнитель	= Настройки.Получить("ОтборТекущийИсполнитель");
	ОтборАвтор				= Настройки.Получить("ОтборАвтор");		
	ПоказыватьСкрытьБыстрыеОтборы = Настройки.Получить("ПоказыватьСкрытьБыстрыеОтборы");	
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда 
		Список.Параметры.УстановитьЗначениеПараметра("Организация",ОтборОрганизация);
	КонецЕсли; 
	
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Инициатор", ОтборИнициатор, 
		ЗначениеЗаполнено(ОтборИнициатор));
		
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ТекущийИсполнитель", 
		ОтборТекущийИсполнитель, ЗначениеЗаполнено(ОтборТекущийИсполнитель));
		
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Автор", ОтборАвтор, 
		ЗначениеЗаполнено(ОтборАвтор));	
		
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда 
		Список.Параметры.УстановитьЗначениеПараметра("Организация",ОтборОрганизация);
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("Организация",
			ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ОтборКонтрагент.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ОтборАвторПриИзменении(Элемент)
	
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Автор", ОтборАвтор, 	
		ЗначениеЗаполнено(ОтборАвтор));
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборИнициаторПриИзменении(Элемент)
	
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Инициатор", ОтборИнициатор, 
		ЗначениеЗаполнено(ОтборИнициатор));
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборТекущийИсполнительПриИзменении(Элемент)
	
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ТекущийИсполнитель", ОтборТекущийИсполнитель,
		ЗначениеЗаполнено(ОтборТекущийИсполнитель));
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьСкрытьБыстрыеОтборы(Команда)
	
	ПоказыватьСкрытьБыстрыеОтборы = НЕ ПоказыватьСкрытьБыстрыеОтборы;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЧернаяКнопка(Команда)
	
	УстановитьОтборПоОтметкеНаСервере(1, "ОтборЧернаяКнопка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСиняяКнопка(Команда)
	
	УстановитьОтборПоОтметкеНаСервере(2, "ОтборСиняяКнопка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗеленаяКнопка(Команда)
	
	УстановитьОтборПоОтметкеНаСервере(3, "ОтборЗеленаяКнопка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКраснаяКнопка(Команда)
	
	УстановитьОтборПоОтметкеНаСервере(4, "ОтборКраснаяКнопка");	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЖелтаяКнопка(Команда)
	
	УстановитьОтборПоОтметкеНаСервере(5, "ОтборЖелтаяКнопка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПодсвеченным(Команда)
	
	ОтборПоПодсвеченнымНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УО = Список.УсловноеОформление.Элементы;
	УО.Очистить();
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭтапыПроцессов.Ссылка,
		|	ЭтапыПроцессов.ЦветФона,
		|	ЭтапыПроцессов.ЦветТекста
		|ИЗ
		|	Справочник.ЭтапыПроцессов КАК ЭтапыПроцессов
		|ГДЕ
		|	ЭтапыПроцессов.ЭтоГруппа = ЛОЖЬ";
	
	мWebЦветаБелый	= WebЦвета.Белый;
	мWebЦветаЧерный = WebЦвета.Черный;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ЦветФона 	= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ЦветФона);
			ЦветТекста 	= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ЦветТекста);
		Исключение
			ЦветФона 	= мWebЦветаБелый;
			ЦветТекста 	= мWebЦветаЧерный;
		КонецПопытки;
		
		Если ЦветФона <> мWebЦветаБелый ИЛИ ЦветТекста <> мWebЦветаЧерный Тогда
			ЭлементУО 						= УО.Добавить();
			Если ЦветФона <> мWebЦветаБелый Тогда
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
			КонецЕсли;
			Если ЦветТекста <> мWebЦветаЧерный Тогда
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
			КонецЕсли;
			ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТекущийЭтап");
			ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение 	= Выборка.Ссылка;		
						
		КонецЕсли;
	КонецЦикла;	
	
	// ПОМЕЧЕННЫЕ
	Попытка
		ЦветФонаПомеченнойЗадачи 	= РаботаСЦветомКлиентСервер.HexВЦвет(
			УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ЦветФонаПомеченнойЗадачи"));
		ЦветТекстаПомеченнойЗадачи	= РаботаСЦветомКлиентСервер.HexВЦвет(
			УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ЦветТекстаПомеченнойЗадачи"));
	Исключение
		ЦветФонаПомеченнойЗадачи 	= Новый Цвет(255, 255, 204);
		ЦветТекстаПомеченнойЗадачи	= WebЦвета.Черный;
	КонецПопытки;
	
	ЭлементУО 						= УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаПомеченнойЗадачи);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаПомеченнойЗадачи);
	ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Подсвечено");
	ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение 	= Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.БыстрыеОтборы.Видимость 					= ПоказыватьСкрытьБыстрыеОтборы;
	Элементы.ФормаПоказатьСкрытьБыстрыеОтборы.Пометка	= ПоказыватьСкрытьБыстрыеОтборы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОтметкеНаСервере(НомерОтметки, ИмяЭлементаФормы)	
	
	ЭлементФормы 		 = Элементы.Найти(ИмяЭлементаФормы);
	ЭлементФормы.Пометка = НЕ ЭлементФормы.Пометка;
	Отбор = Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;	
	// Очистить связанные отборы.
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Отбор.Элементы, НСтр("ru = 'Отбор по отметке'"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	Если ЭлементФормы.Пометка Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
		"НомерОтметки", НомерОтметки, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		Для Каждого мЭлемент Из Элементы.ГруппаОтборПоКнопкам.ПодчиненныеЭлементы Цикл
			Если мЭлемент = ЭлементФормы ИЛИ мЭлемент = Элементы.ГруппаОтборПоКнопкам Тогда
				Продолжить;
			Иначе
				Попытка
					мЭлемент.Пометка = Ложь;				
				Исключение
					Продолжить;
				КонецПопытки;	
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		Отбор.Элементы.Удалить(ГруппаОтбора);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ОтборПоПодсвеченнымНаСервере()

	Элементы.ОтборПоПодсвеченным.Пометка = НЕ Элементы.ОтборПоПодсвеченным.Пометка;
	
	Отбор = Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	
	// Очистить связанные отборы.
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Отбор.Элементы, НСтр("ru = 'Отбор по подсвеченным'"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	Если Элементы.ОтборПоПодсвеченным.Пометка Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"Подсвечено", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	Иначе
		Отбор.Элементы.Удалить(ГруппаОтбора);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

