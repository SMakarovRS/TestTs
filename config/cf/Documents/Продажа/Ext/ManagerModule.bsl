#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс	

// Функция возвращает список имен «ключевых» реквизитов.
//
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать,
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив реквизитов, редактируемых при групповой обработке.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;		
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;

	СписокКонтактов = Новый Массив;
	СписокКонтактов.Добавить(Ссылка.Контрагент);
	
	Возврат СписокКонтактов;
	
КонецФункции

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	РеквизитПоложениеСтатьиДоходовРасходов = Реквизиты.Найти("Продажа.ПоложениеСтатьиДоходовРасходов");
	Реквизиты.Удалить(РеквизитПоложениеСтатьиДоходовРасходов);
		
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт	
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Контрагент", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Контрагент");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;
	СоответствиеИзменениеОбъекта.Вставить("ПродажаИзменениеОбъектаПроведение", НСтр("ru = 'Проведение'"));
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("ПродажаРасчетМетрикЗаписьДокумента", НСтр("ru = 'Запись документа'"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура, Знач Источник) Экспорт
	
	Результат = Ложь;
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ИмяСобытия = "ПродажаИзменениеОбъектаПроведение" Тогда
		
		Если Структура.ЭтоНовый И Источник.Проведен Тогда
			Результат = Истина;
		Иначе
			ИсточникПередЗаписью = Структура.ИсточникПередЗаписью;
			Если Источник.Проведен <> ИсточникПередЗаписью.Проведен И ИсточникПередЗаписью.Проведен = Истина Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗаполнениеОбъектов
// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗаполнениеОбъектов

// СтандартныеПодсистемы.ВариантыОтчетов
// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();		
		КомандаОтчет.Менеджер      = Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Взаиморасчеты с контрагентами'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность      = "Обычное";
		КомандаОтчет.КлючВарианта  = "Основной";		
		
	КонецЕсли;
			
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
		
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция печати документа.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_Списание";
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(ТекущийДокумент);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
				
		Запрос.Текст=
			"ВЫБРАТЬ
			|	Продажа.Ссылка,
			|	Продажа.ВерсияДанных,
			|	Продажа.ПометкаУдаления,
			|	Продажа.Номер,
			|	Продажа.Дата КАК ДатаДокумента,
			|	Продажа.Проведен,
			|	Продажа.Организация,
			|	Продажа.МестоХранения,
			|	Продажа.Комментарий,
			|	Продажа.Основание,
			|	Продажа.Автор,
			|	Продажа.ДатаСоздания,
			|	Продажа.АвторКорректировки,
			|	Продажа.ДатаКорректировки,
			|	Продажа.Номенклатура.(
			|		Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Номенклатура,
			|		Комплект,
			|		Партия,
			|		КарточкаНоменклатуры,
			|		ЕдиницаИзмерения,
			|		Количество,
			|		Описание,
			|		КарточкаНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
			|		КарточкаНоменклатуры.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|		КарточкаНоменклатуры.СерийныйНомер КАК СерийныйНомер,
			|		ЕдиницаИзмерения.Код,
			|		Цена,
			|		Сумма,
			|		СтавкаНДС,
			|		СуммаНДС,
			|		Всего
			|	),
			|	Продажа.ДополнительныеРеквизиты.(
			|		Ссылка,
			|		НомерСтроки,
			|		Свойство,
			|		Значение,
			|		ТекстоваяСтрока
			|	),
			|	Продажа.Представление,
			|	Продажа.МоментВремени,
			|	Продажа.Контрагент,
			|	Продажа.Договор,
			|	Продажа.СуммаДокумента,
			|	Продажа.ВалютаДокумента
			|ИЗ
			|	Документ.Продажа КАК Продажа
			|ГДЕ
			|	Продажа.Ссылка = &ТекущийДокумент
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ВыборкаСтрок = Шапка.Номенклатура.Выбрать();
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		МОЛ					= УправлениеITОтделом8УФ.ПолучитьОтветственногоСотрудникаМестаХранения(Шапка.ДатаДокумента, Шапка.МестоХранения);
		
		Если ИмяМакета = "НакладнаяМ15" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Продажа.ПФ_MXL_НакладнаяМ15");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Продажа_НакладнаяМ15";
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерДокумента", 			НомерДокумента));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаСоставления", 			Формат(Шапка.ДатаДокумента, "ДЛФ=D")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеОрганизации", 	УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("КонтрагентНаименование",		Шапка.Контрагент));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СкладНаименование", 			Шапка.МестоХранения));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтраницы", 1));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк
			ВыборкаСтрокНоменклатуры                = Шапка.Номенклатура.Выбрать();
			ОбластьМакета							= Макет.ПолучитьОбласть("Строка");
			Сумма									= 0;
			Количество								= ВыборкаСтрокНоменклатуры.Количество();
			ИтогНДС = 0;
			СуммаСНДС = 0;
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ИтогНДС		= ИтогНДС + ВыборкаСтрокНоменклатуры.СуммаНДС;
				СуммаСНДС	= СуммаСНДС + ВыборкаСтрокНоменклатуры.Всего;
			КонецЦикла;
						
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("КоличествоПорядковыхНомеровЗаписейПрописью", 	ЧислоПрописью(ВыборкаСтрокНоменклатуры.Количество(), ,",,,с,,,,,0")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью",                              	РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаСНДС, Шапка.ВалютаДокумента)));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогНДС",                                    	?(ЗначениеЗаполнено(ИтогНДС), Формат(Цел(ИтогНДС), "ЧДЦ=0") + " " + НСтр("ru = 'руб.'") + " " + Формат((ИтогНДС - Цел(ИтогНДС)) * 100, "ЧЦ=2; ЧВН=") + " " + НСтр("ru = 'коп.'") + " ", "______ " + НСтр("ru = 'руб.'") + " ______ " + НСтр("ru = 'коп.'"))));
			
			СтруктураРуководители = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, Шапка.ДатаДокумента);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДолжностьРуководителя", 		СтруктураРуководители.РуководительДолжность));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОРуководителя", 			СтруктураРуководители.ФИОРуководителя));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОГлавБухгалтера", 			СтруктураРуководители.ФИОГлавногоБухгалтера));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДолжностьКладовщика",	 	СтруктураРуководители.КладовщикДолжность));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОКладовщика", 				СтруктураРуководители.ФИОКладовщика));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);			
			
		ИначеЕсли ИмяМакета = "РасходнаяНакладная" Тогда			
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Продажа.ПФ_MXL_РасходнаяНакладная");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Продажа_РасходнаяНакладная";
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Номер", НомерДокумента));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаДокумента", Формат(Шапка.ДатаДокумента, "ДЛФ=DD")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МестоХранения", Шапка.МестоХранения));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("МОЛ",		МОЛ));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ПолноеНаименованиеОрганизации", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ДатаИВремяПечати", ТекущаяДатаСеанса()));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("СамДокумент", ТекущийДокумент));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывод строк
			ВыборкаСтрокНоменклатуры                = Шапка.Номенклатура.Выбрать();
			ОбластьМакета							= Макет.ПолучитьОбласть("СтрокаТаблицы");
			Сумма									= 0;
			Количество								= ВыборкаСтрокНоменклатуры.Количество();
			Пока ВыборкаСтрокНоменклатуры.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатуры);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			ОбластьМакета							= Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Количество", Количество));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Сумма", Формат(Шапка.СуммаДокумента, "ЧДЦ=2; ЧН=0,00")));
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Процедура печати документа.
//
Функция ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_Продажа";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продажа.Ссылка КАК Ссылка,
		|	Продажа.Номер,
		|	Продажа.Дата КАК ДатаДокумента,
		|	Продажа.Организация,
		|	Продажа.Контрагент,
		|	Продажа.СуммаВключаетНДС,
		|	Продажа.ВалютаДокумента,
		|	Продажа.Услуги.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		Описание,
		|		СтатьяДоходовРасходов,
		|		СтавкаНДС,
		|		СуммаНДС,
		|		ЕдиницаИзмерения,
		|		Всего
		|	),
		|	Продажа.Дата
		|ИЗ
		|	Документ.Продажа КАК Продажа
		|ГДЕ
		|	Продажа.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ВыборкаСтрокУслуги 		 = Шапка.Услуги.Выбрать();
		
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Продажа_ПФ_MXL_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Продажа.ПФ_MXL_" + ИмяМакета);
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", СтрШаблон(НСтр("ru = 'Акт № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПолучателя", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;
				
		Пока ВыборкаСтрокУслуги.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокУслуги);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки", Количество));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Товар", ВыборкаСтрокУслуги.Номенклатура));			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокУслуги.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокУслуги.СуммаНДС;
			Всего		= Всего 	+ ВыборкаСтрокУслуги.Всего;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", УправлениеITОтделом8УФ.ФорматСумм(Сумма)));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", НСтр("ru = 'Без налога (НДС)'")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", "-"));
		Иначе
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":"));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДС)));
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтоговаяСтрока", СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), Строка(Количество), УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента))));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента)));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатнаяФорма()

// Процедура печати документа.
//
Функция ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Перем Ошибки;
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продажа.Ссылка КАК Ссылка,
		|	Продажа.Номер,
		|	Продажа.Дата КАК ДатаДокумента,
		|	Продажа.Организация,
		|	Продажа.Контрагент,
		|	Продажа.СуммаВключаетНДС,
		|	Продажа.ВалютаДокумента,
		|	Продажа.Номенклатура.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Комплект,
		|		Партия,
		|		КарточкаНоменклатуры,
		|		ЕдиницаИзмерения,
		|		Количество,
		|		Описание,
		|		СтатьяДоходовРасходов,
		|		Цена,
		|		Сумма,
		|		СтавкаНДС,
		|		СуммаНДС,
		|		Всего
		|	),
		|	Продажа.Услуги.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		Описание,
		|		СтатьяДоходовРасходов,
		|		СтавкаНДС,
		|		СуммаНДС,
		|		ЕдиницаИзмерения,
		|		Всего
		|	),
		|	Продажа.Дата,
		|	Продажа.Организация.БанковскийСчетПоУмолчанию КАК БанковскийСчет
		|ИЗ
		|	Документ.Продажа КАК Продажа
		|ГДЕ
		|	Продажа.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокНоменклатура = Шапка.Номенклатура.Выбрать();
		ВыборкаСтрокУслуги = Шапка.Услуги.Выбрать();
				
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Продажа_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетНаОплату");
		
		СтруктураЗаполнения.Очистить();
		
		СведенияОбОрганизации = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,Шапка.БанковскийСчет);
		СведенияОбКонтрагенте = УправлениеITОтделом8УФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		СтруктураЗаполнения   = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормы(Шапка.Ссылка);
		
		// Если используется пользовательский макет - этих секций не было.
		Если Макет.Области.Найти("ЗаглавиеСЛоготипом") <> Неопределено
			И Макет.Области.Найти("ЗаглавиеБезЛоготипа") <> Неопределено Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеБезЛоготипа");
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		Иначе
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некорректно.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, "");
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			СтруктураЗаполнения.Вставить("БанкПолучателяПредставление", СведенияОбОрганизации.Банк.Наименование + " " + СведенияОбОрганизации.Банк.Город);
		КонецЕсли; 
		СтруктураЗаполнения.Вставить("ИНН", СведенияОбОрганизации.ИНН);
		СтруктураЗаполнения.Вставить("КПП", СведенияОбОрганизации.КПП);
		СтруктураЗаполнения.Вставить("ПредставлениеПоставщика", СведенияОбОрганизации.ПолноеНаименование);
		СтруктураЗаполнения.Вставить("БИКБанкаПолучателя", СведенияОбОрганизации.БИК);
		СтруктураЗаполнения.Вставить("СчетБанкаПолучателяПредставление", СведенияОбОрганизации.КоррСчет);
		СтруктураЗаполнения.Вставить("СчетПолучателяПредставление", СведенияОбОрганизации.НомерСчета);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", СтрШаблон(НСтр("ru = 'Счет на оплату № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"))));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);										
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПолучателя", УправлениеITОтделом8УФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,")));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;

		Пока ВыборкаСтрокУслуги.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокУслуги);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки", Количество));			
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Запас", ВыборкаСтрокУслуги.Номенклатура));									
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма	= Сумма 	+ ВыборкаСтрокУслуги.Сумма;
			СуммаНДС= СуммаНДС	+ ВыборкаСтрокУслуги.СуммаНДС;
			Всего	= Всего		+ ВыборкаСтрокУслуги.Всего;
			
		КонецЦикла;
		
		Пока ВыборкаСтрокНоменклатура.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокНоменклатура);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НомерСтроки", Количество));			
			ОбластьМакета.Параметры.Заполнить(Новый Структура("Запас", ВыборкаСтрокНоменклатура.Номенклатура));			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма	= Сумма		+ ВыборкаСтрокНоменклатура.Сумма;
			СуммаНДС= СуммаНДС	+ ВыборкаСтрокНоменклатура.СуммаНДС;
			Всего	= Всего		+ ВыборкаСтрокНоменклатура.Всего;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", УправлениеITОтделом8УФ.ФорматСумм(Сумма)));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", НСтр("ru = 'Без налога (НДС)'")));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", "-"));
		Иначе
			ОбластьМакета.Параметры.Заполнить(Новый Структура("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":"));
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ВсегоНДС", УправлениеITОтделом8УФ.ФорматСумм(СуммаНДС)));
		КонецЕсли; 
				
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("ИтогоКОплате") = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Не обнаружена область макета ""Итог к оплате"". Возможно используется пользовательский макет.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, "");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоКОплате");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоКОплате", УправлениеITОтделом8УФ.ФорматСумм(Всего)));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтоговаяСтрока", СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"), Строка(Количество), УправлениеITОтделом8УФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента))));		
		ОбластьМакета.Параметры.Заполнить(Новый Структура("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента)));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		СтруктураРуководители = УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, Шапка.ДатаДокумента);
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОРуководителя", СтруктураРуководители.ФИОРуководителя));
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОБухгалтера", СтруктураРуководители.ФИОГлавногоБухгалтера));
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьСчетНаОплату()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяМ15") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяМ15", НСтр("ru = 'Накладная (М-15)'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "НакладнаяМ15"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасходнаяНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасходнаяНакладная", НСтр("ru = 'Расходная накладная'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "РасходнаяНакладная"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктОбОказанииУслуг", НСтр("ru = 'Акт об оказании услуг'"), ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, "АктОбОказанииУслуг"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплату") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаОплату", НСтр("ru = 'Счет на оплату'"), ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, "СчетНаОплату"));	
	КонецЕсли;
		
КонецПроцедуры

// Функция возвращает данные для печати документа.
//
Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Возврат Новый Структура("Данные, Макеты",
							ДанныеПоВсемОбъектам,
							Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
											ОписаниеОбластей,
											ТипыМакетов,
											ДвоичныеДанныеМакетов));
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт	
		
	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 3;
	
	// Накладная (М-15)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяМ15";
	КомандаПечати.Представление = НСтр("ru = 'Накладная (М-15)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 4;
	
	// Расходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасходнаяНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Расходная накладная'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 5;
	
	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;	
	КомандаПечати.Порядок = 6;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"), 
		?(ЗначениеЗаполнено(Данные.ВидДокумента), Данные.ВидДокумента, НСтр("ru = 'Продажа'")), 
		Данные.Номер,
		Данные.Дата);
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("ВидДокумента");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли