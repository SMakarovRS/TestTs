#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоложениеСтатьиДоходовРасходов = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для Каждого Строки Из Номенклатура Цикл
			Строки.СтатьяДоходовРасходов = СтатьяДоходовРасходов;
		КонецЦикла;
		Для Каждого Строки Из Услуги Цикл
			Строки.СтатьяДоходовРасходов = СтатьяДоходовРасходов;
		КонецЦикла;
	КонецЕсли;
	
	Если ПоложениеЗаказаКлиента = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для Каждого Строки Из Номенклатура Цикл
			Строки.ЗаказКлиента = ЗаказКлиента;
		КонецЦикла;
		Для Каждого Строки Из Услуги Цикл
			Строки.ЗаказКлиента = ЗаказКлиента;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента = Номенклатура.Итог("Всего") + Услуги.Итог("Всего");
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда	
		Возврат;		
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("ВидДокумента");
	
	// Проверка на ошибки
	СписокОшибок = ПроверитьДокументПередПроведением();
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	СЛС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);	
	
	// Подготовка наборов записей.
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	СЛС.ОтразитьДвиженияВРазделахУчета(Ссылка, ДополнительныеСвойства, Движения, Отказ);	
	
	// Запись наборов записей.
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль.
	СЛС.ВыполнитьКонтрольОтрицательныхОстатков(Ссылка, ДополнительныеСвойства, Отказ);	
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа.
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль.
	СЛС.ВыполнитьКонтрольОтрицательныхОстатков(Ссылка, ДополнительныеСвойства, Отказ, Истина);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Основание = ДанныеЗаполнения;
	КонецЕсли;

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Задание") Тогда
		
		Организация			= ДанныеЗаполнения.Организация;
		МестоХранения		= ДанныеЗаполнения.МестоХранения;
		Комментарий			= ДанныеЗаполнения.Тема;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ПоложениеЗаказаКлиента	= Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		ПоложениеСтатьиДоходовРасходов	= Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Дата,Номер,Проведен,МестоХранения");
		ВалютаДокумента			= ДанныеЗаполнения.ВалютаДокумента;
		СуммаВключаетНДС		= ДанныеЗаполнения.СуммаВключаетНДС;
		ЗаказКлиента			= ДанныеЗаполнения;
		Основание				= ДанныеЗаполнения;
		ВидДокумента			= Перечисления.ВидДокументаПродажа.ПродажаПокупателю;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Поступление") Тогда 
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Дата,Номер,Проведен,Контрагент,Договор,Основание");
		ПоложениеЗаказаКлиента	= Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		ВалютаДокумента			= ДанныеЗаполнения.ВалютаДокумента;
		СуммаВключаетНДС		= ДанныеЗаполнения.СуммаВключаетНДС;
		Основание				= ДанныеЗаполнения;
		ВидДокумента			= Перечисления.ВидДокументаПродажа.ПродажаПокупателю;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ЗаказКлиента) Тогда
			Контрагент	= ДанныеЗаполнения.ЗаказКлиента.Контрагент;
			Договор		= ДанныеЗаполнения.ЗаказКлиента.Договор;
		Иначе
			Контрагент	= ДанныеЗаполнения.Контрагент;
			Договор		= ДанныеЗаполнения.Договор;
		КонецЕсли;
		
		Для Каждого Строки Из ДанныеЗаполнения.Номенклатура Цикл
			
			Если НЕ ЗначениеЗаполнено(Строки.Номенклатура) Тогда
				Продолжить;				
			КонецЕсли;
			
			Если ТипЗнч(Строки.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
				Коэффициент = 1;
				КоличествоК = Строки.Количество;						
			Иначе
				Коэффициент = Строки.ЕдиницаИзмерения.Коэффициент;
				КоличествоК = Строки.Количество * Коэффициент;
			КонецЕсли;
			
			НоваяСтрока						= Номенклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки,,"Количество,ЕдиницаИзмерения");
			НоваяСтрока.Количество			= Строки.Количество;
			НоваяСтрока.ЕдиницаИзмерения	= Строки.Номенклатура.ЕдиницаИзмерения;
			
			// Цена
			НоваяСтрока.Цена = НоваяСтрока.Цена / Коэффициент;
			
			// Сумма.
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			
			// Сумма НДС.
			СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
			
			НоваяСтрока.СуммаНДС = ?(ДанныеЗаполнения.СуммаВключаетНДС, 
			НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
			НоваяСтрока.Сумма * СтавкаНДС / 100);
			
			// Всего.
			НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(ДанныеЗаполнения.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
			
		КонецЦикла;
		
		Для Каждого Строки Из ДанныеЗаполнения.Услуги Цикл
			
			Если НЕ ЗначениеЗаполнено(Строки.Номенклатура) Тогда
				Продолжить;				
			КонецЕсли;
			
			Если ТипЗнч(Строки.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
				Коэффициент = 1;
				КоличествоК = Строки.Количество;						
			Иначе
				Коэффициент = Строки.ЕдиницаИзмерения.Коэффициент;
				КоличествоК = Строки.Количество * Коэффициент;
			КонецЕсли;
			
			НоваяСтрока						= Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки,,"Количество,ЕдиницаИзмерения");
			НоваяСтрока.Количество			= Строки.Количество;
			НоваяСтрока.ЕдиницаИзмерения	= Строки.Номенклатура.ЕдиницаИзмерения;
			
			// Цена
			НоваяСтрока.Цена = НоваяСтрока.Цена / Коэффициент;
			
			// Сумма.
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			
			// Сумма НДС.
			СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
			
			НоваяСтрока.СуммаНДС = ?(ДанныеЗаполнения.СуммаВключаетНДС, 
			НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
			НоваяСтрока.Сумма * СтавкаНДС / 100);
			
			// Всего.
			НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(ДанныеЗаполнения.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти	

#Область СлужебныеПроцедурыИФункции

// Проверяет документ перед проведением, возвращает СписокЗначений с ошибками,
// если пустой, то ошибок нет.
Функция ПроверитьДокументПередПроведением()
	
	СписокОшибок = Неопределено;
			
	// Проверка не заполненных столбцов.
	Для Каждого Строки Из Номенклатура Цикл
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", СтрШаблон(НСтр("ru = 'Для номенклатуры %1  не заполнены карточки номенклатуры.'"), Строки.Номенклатура), "");
		КонецЕсли;
		
		Если Строки.Количество = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не заполнено перемещаемое количество.'"), Строки.Номенклатура), "");
		КонецЕсли;
	КонецЦикла;
	
	// Проверка, что в Номенклатуре нет услуг.
	Для Каждого Строки Из Номенклатура Цикл
		Если ЗначениеЗаполнено(Строки.Номенклатура) Тогда
			Если ЗначениеЗаполнено(Строки.Номенклатура.ВидНоменклатуры) Тогда
				Если Строки.Номенклатура.ВидНоменклатуры.ТипВидаНоменклатуры = Перечисления.ТипыВидовНоменклатуры.Услуга Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", СтрШаблон(НСтр("ru = 'Номенклатура %1 не может быть выбрана в дереве, т.к. это услуга.'"), Строки.Номенклатура), "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	// В услугах нет номенклатуры.
	Для Каждого Строки Из Услуги Цикл
		Если ЗначениеЗаполнено(Строки.Номенклатура) Тогда
			Если ЗначениеЗаполнено(Строки.Номенклатура.ВидНоменклатуры) Тогда
				Если Строки.Номенклатура.ВидНоменклатуры.ТипВидаНоменклатуры <> Перечисления.ТипыВидовНоменклатуры.Услуга Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", СтрШаблон(НСтр("ru = 'Номенклатура %1  не может быть выбрана в Услугах, т.к. это номенклатура.'"), Строки.Номенклатура), "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если СписокОшибок <> Неопределено Тогда
		Возврат СписокОшибок;
	КонецЕсли;
	
	// Проверка дублей строк.
	ТЗНоменклатура = Номенклатура.Выгрузить();
	ТЗНоменклатура.Колонки.Добавить("КоличествоОдинаковых");
	Для Каждого Строки Из ТЗНоменклатура Цикл
		Строки.КоличествоОдинаковых = 1;
	КонецЦикла;
	ТЗНоменклатура.Свернуть("Номенклатура,КарточкаНоменклатуры", "КоличествоОдинаковых");
	
	Для Каждого Строки Из ТЗНоменклатура Цикл
		Если Строки.КоличествоОдинаковых > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", СтрШаблон(НСтр("ru = 'Для номенклатуры %1' есть дублирующиеся строки.'"), Строки.Номенклатура), "");
		КонецЕсли;		
	КонецЦикла;
	
	// Проверки номенклатуры.
	Для Каждого Строки Из Номенклатура Цикл
		
		// Учет по карточкам и количество <> 1
		Если Строки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры И Строки.Количество <> 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", СтрШаблон(НСтр("ru = 'Для номенклатуры %1 в ее виде указано, что ведется учет по карточкам. Для такой номенклатуры количество в строке не может быть больше единицы.'"), Строки.Номенклатура), "");
		КонецЕсли;
		
		// Проверка, что карточка соответствует номенклатуре.
		Если Строки.Номенклатура <> Строки.КарточкаНоменклатуры.Владелец Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", СтрШаблон(НСтр("ru = 'Для номенклатуры %1 выбрана карточка, которая не является дочерней карточкой этой номенклатуры.'"), Строки.Номенклатура), "");
		КонецЕсли;
		
		// Карточка не заполнена.
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", СтрШаблон(НСтр("ru = 'В строке %1 не выбрана карточка номенклатуры.'"), Строки.НомерСтроки + 1), "");
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат СписокОшибок;
КонецФункции

#КонецОбласти

#КонецЕсли