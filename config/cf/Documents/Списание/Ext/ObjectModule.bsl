#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строки Из Номенклатура Цикл
		
		Если ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке ИЛИ НЕ ЗначениеЗаполнено(ПоложениеПодразделения) Тогда
			Строки.Подразделение = Подразделение;
		КонецЕсли;
		Если ПоложениеСтатьиДоходовРасходов = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке ИЛИ НЕ ЗначениеЗаполнено(ПоложениеСтатьиДоходовРасходов) Тогда
			Строки.СтатьяДоходовРасходов = СтатьяДоходовРасходов;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда	
		Возврат;		
	КонецЕсли;
	
	// Проверка на ошибки.
	СписокОшибок = ПроверитьДокументПередПроведением();
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок, Отказ);	
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	СЛС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);	
	
	// Подготовка наборов записей.
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	СЛС.ОтразитьДвиженияВРазделахУчета(Ссылка, ДополнительныеСвойства, Движения, Отказ);
		
	// Запись наборов записей.
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль.
	СЛС.ВыполнитьКонтрольОтрицательныхОстатков(Ссылка, ДополнительныеСвойства, Отказ);	
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа.
	УправлениеITОтделом8УФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеITОтделом8УФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеITОтделом8УФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль.
	СЛС.ВыполнитьКонтрольОтрицательныхОстатков(Ссылка, ДополнительныеСвойства, Отказ, Истина);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Основание = ДанныеЗаполнения;
	КонецЕсли;
		
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Поступление") Тогда
		
		// На основании документа "Поступление".
		Организация				= ДанныеЗаполнения.Организация;
		МестоХранения 			= ДанныеЗаполнения.МестоХранения;
		СтатьяДоходовРасходов  	= ДанныеЗаполнения.СтатьяДоходовРасходов;
		ПоложениеСтатьиДоходовРасходов	= ДанныеЗаполнения.ПоложениеСтатьиДоходовРасходов;
		ПоложениеПодразделения	= ДанныеЗаполнения.ПоложениеПодразделения;
		Подразделение			= ДанныеЗаполнения.Подразделение;
		
		Для Каждого Строки Из ДанныеЗаполнения.Номенклатура Цикл
			ЗаполнитьЗначенияСвойств(Номенклатура.Добавить(), Строки);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Перемещение") Тогда
		
		// На основании документа "Перемещение.
		Организация = ДанныеЗаполнения.ОрганизацияПрихода;
		МестоХранения = ДанныеЗаполнения.МестоХраненияПрихода;
		Подразделение = ДанныеЗаполнения.Подразделение;
		ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		
		Для Каждого Строки Из ДанныеЗаполнения.Номенклатура Цикл
			ЗаполнитьЗначенияСвойств(Номенклатура.Добавить(), Строки);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Задание") Тогда
		
		Организация			= ДанныеЗаполнения.Организация;
		МестоХранения		= ДанныеЗаполнения.МестоХранения;
		Подразделение		= ДанныеЗаполнения.Подразделение;
		ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Источник")
		И ТипЗнч(ДанныеЗаполнения.Источник) = Тип("ДокументСсылка.Инвентаризация") Тогда
		
		ИнвентаризацияСсылка= ДанныеЗаполнения.Источник;
		МестоХраненияСсылка	= ДанныеЗаполнения.МестоХранения;
		Организация			= ИнвентаризацияСсылка.Организация;
		МестоХранения		= МестоХраненияСсылка;		
		Основание			= ИнвентаризацияСсылка;
		Комиссия			= ИнвентаризацияСсылка.Комиссия;
		
		Запрос = Новый Запрос;		
		// С учетом ранее списанной номенклатуры.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеНоменклатура.Номенклатура КАК Номенклатура,
		|	СписаниеНоменклатура.КарточкаНоменклатуры КАК КарточкаНоменклатуры,
		|	СписаниеНоменклатура.Ссылка.МестоХранения КАК МестоХранения,
		|	СУММА(СписаниеНоменклатура.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_Списания
		|ИЗ
		|	Документ.Списание.Номенклатура КАК СписаниеНоменклатура
		|ГДЕ
		|	СписаниеНоменклатура.Ссылка.Проведен
		|	И СписаниеНоменклатура.Ссылка.Основание = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СписаниеНоменклатура.Номенклатура,
		|	СписаниеНоменклатура.КарточкаНоменклатуры,
		|	СписаниеНоменклатура.Ссылка.МестоХранения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(-(ВЫБОР
		|			КОГДА ВТ_Списания.Количество ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ ВТ_Списания.Количество
		|		КОНЕЦ + ИнвентаризацияНоменклатура.Отклонение)) КАК Количество,
		|	ИнвентаризацияНоменклатура.Номенклатура КАК Номенклатура,
		|	ИнвентаризацияНоменклатура.Комплект КАК Комплект,
		|	ИнвентаризацияНоменклатура.Партия КАК Партия,
		|	ИнвентаризацияНоменклатура.КарточкаНоменклатуры КАК КарточкаНоменклатуры,
		|	ИнвентаризацияНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ИнвентаризацияНоменклатура.Цена КАК Цена,
		|	СУММА(-(ВЫБОР
		|			КОГДА ВТ_Списания.Количество ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ ВТ_Списания.Количество
		|		КОНЕЦ + ИнвентаризацияНоменклатура.Отклонение)) * ИнвентаризацияНоменклатура.Цена КАК Сумма
		|ИЗ
		|	Документ.Инвентаризация.Номенклатура КАК ИнвентаризацияНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Списания КАК ВТ_Списания
		|		ПО ИнвентаризацияНоменклатура.Номенклатура = ВТ_Списания.Номенклатура
		|			И ИнвентаризацияНоменклатура.КарточкаНоменклатуры = ВТ_Списания.КарточкаНоменклатуры
		|			И ИнвентаризацияНоменклатура.МестоХранения = ВТ_Списания.МестоХранения
		|ГДЕ
		|	ИнвентаризацияНоменклатура.Отклонение < 0
		|	И ИнвентаризацияНоменклатура.Ссылка = &Ссылка
		|	И ИнвентаризацияНоменклатура.МестоХранения = &МестоХранения
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвентаризацияНоменклатура.МестоХранения,
		|	ИнвентаризацияНоменклатура.Номенклатура,
		|	ИнвентаризацияНоменклатура.Комплект,
		|	ИнвентаризацияНоменклатура.Партия,
		|	ИнвентаризацияНоменклатура.КарточкаНоменклатуры,
		|	ИнвентаризацияНоменклатура.ЕдиницаИзмерения,
		|	ИнвентаризацияНоменклатура.Цена";
		
		Запрос.УстановитьПараметр("Ссылка",			ИнвентаризацияСсылка);
		Запрос.УстановитьПараметр("МестоХранения",	МестоХраненияСсылка);
		
		Массив 					= Запрос.ВыполнитьПакет();		
		ВыборкаДетальныеЗаписи	= Массив[1].Выбрать();		
		
		Номенклатура.Очистить();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Количество > 0 Тогда
				НоваяСтрока = Номенклатура.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
				НоваяСтрока.Партия = Справочники.КарточкиНоменклатуры.ПустаяСсылка();
			КонецЕсли;	
		КонецЦикла;	
		
		Если Номенклатура.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Нет данных для создания документа ""Списание""!'");
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти	
	
#Область СлужебныеПроцедурыИФункции

// Проверяет документ перед проведением, возвращает СписокЗначений с ошибками,
// если пустой, то ошибок нет.
Функция ПроверитьДокументПередПроведением()
	
	СписокОшибок = Неопределено;
			
	// Проверка незаполненных столбцов.
	Для Каждого Строки Из Номенклатура Цикл
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
				СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не заполнена карточка номенклатуры.'"), Строки.Номенклатура), "");
		КонецЕсли;
		
		Если Строки.Количество = 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
				СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не заполнено списываемое количество.'"), Строки.Номенклатура), "");
		КонецЕсли;
	КонецЦикла;
	
	// Проверка, что в Номенклатуре нет услуг.
	Для Каждого Строки Из Номенклатура Цикл
		Если ЗначениеЗаполнено(Строки.Номенклатура) Тогда
			Если ЗначениеЗаполнено(Строки.Номенклатура.ВидНоменклатуры) Тогда
				Если Строки.Номенклатура.ВидНоменклатуры.ТипВидаНоменклатуры = Перечисления.ТипыВидовНоменклатуры.Услуга Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
						СтрШаблон(НСтр("ru = 'Номенклатура %1  не может быть списана, т.к. это услуга.'"), 
						Строки.Номенклатура), "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокОшибок <> Неопределено Тогда
		Возврат СписокОшибок;
	КонецЕсли;
	
	// Проверка дублей строк.
	ТЗНоменклатура = Номенклатура.Выгрузить();
	ТЗНоменклатура.Колонки.Добавить("КоличествоОдинаковых");
	Для Каждого Строки Из ТЗНоменклатура Цикл
		Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Строки.Номенклатура) Тогда
			Строки.КоличествоОдинаковых = 1;
		Иначе
			ТЗНоменклатура.Удалить(Строки);
		КонецЕсли;
	КонецЦикла;
	ТЗНоменклатура.Свернуть("Номенклатура, КарточкаНоменклатуры", "КоличествоОдинаковых");
	
	Для Каждого Строки Из ТЗНоменклатура Цикл
		Если Строки.КоличествоОдинаковых > 1 
			И УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Строки.Номенклатура) = Истина Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
				СтрШаблон(НСтр("ru = 'Для номенклатуры %1 есть дублирующиеся строки.'"), Строки.Номенклатура), "");
		КонецЕсли;		
	КонецЦикла;
	
	// Проверки номенклатуры.
	Для Каждого Строки Из Номенклатура Цикл
		
		// Учет по карточкам и количество <> 1.
		Если Строки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры И Строки.Количество <> 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
				СтрШаблон(НСтр("ru = 'Для номенклатуры %1 в ее виде указано, что ведется учет по карточкам. 
				|Для такой номенклатуры количество в строке не может быть больше единицы.'"),
				Строки.Номенклатура), "");
		КонецЕсли;
		
		// Проверка, что карточка соответствует номенклатуре.
		Если Строки.Номенклатура <> Строки.КарточкаНоменклатуры.Владелец Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
				СтрШаблон(НСтр("ru = 'Для номенклатуры %1  выбрана карточка, которая не является дочерней карточкой.'"),
				Строки.Номенклатура), "");
		КонецЕсли;
		
		// Карточка не заполнена.
		Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Номенклатура", 
				СтрШаблон(НСтр("ru = 'В строке %1  не выбрана карточка номенклатуры.'"), Строки.НомерСтроки), "");
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат СписокОшибок;
	
КонецФункции

#КонецОбласти

#КонецЕсли