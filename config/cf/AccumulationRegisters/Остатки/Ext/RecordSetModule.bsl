#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ПередЗаписью набора записей.
//
Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка
	  ИЛИ НЕ ДополнительныеСвойства.Свойство("ДляПроведения")
	  ИЛИ НЕ ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Установка исключительной блокировки текущего набора записей регистратора.
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Остатки.НаборЗаписей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Отбор.Регистратор.Значение);
	Блокировка.Заблокировать();
	
	Если НЕ СтруктураВременныеТаблицы.Свойство("ДвиженияОстаткиИзменение") 
		ИЛИ	СтруктураВременныеТаблицы.Свойство("ДвиженияОстаткиИзменение") 
		И НЕ СтруктураВременныеТаблицы.ДвиженияОстаткиИзменение Тогда
		
		// Если временная таблица "ДвиженияОстаткиИзменение" не существует или не содержит записей,
		// об изменении набора, значит набор записывается первый раз или для набора был выполнен контроль остатков.
		// Текущее состояние набора помещается во временную таблицу "ДвиженияЗаказыПоставщикамПередЗаписью",
		// чтобы при записи получить изменение нового набора относительно текущего.
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Остатки.НомерСтроки КАК НомерСтроки,
			|	Остатки.Организация КАК Организация,
			|	Остатки.МестоХранения КАК МестоХранения,
			|	Остатки.Партия КАК Партия,
			|	Остатки.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА Остатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|			ТОГДА Остатки.Количество
			|		ИНАЧЕ -Остатки.Количество
			|	КОНЕЦ КАК КоличествоПередЗаписью
			|ПОМЕСТИТЬ ДвиженияОстаткиПередЗаписью
			|ИЗ
			|	РегистрНакопления.Остатки КАК Остатки
			|ГДЕ
			|	Остатки.Регистратор = &Регистратор
			|	И &Замещение";
		
		Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
		Запрос.УстановитьПараметр("Замещение", Замещение);
				
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	Иначе
		
		// Если временная таблица "ДвиженияОстаткиИзменение" существует и содержит записи,
		// об изменении набора, значит набор записывается не первый раз и для набора не был выполнен контроль остатков.
		// Текущее состояние набора и текущее состояние изменений помещаются во временную таблцу "ДвиженияОстаткиПередЗаписью",
		// чтобы при записи получить изменение нового набора относительно первоначального.
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДвиженияОстаткиИзменение.НомерСтроки КАК НомерСтроки,
			|	ДвиженияОстаткиИзменение.Организация КАК Организация,
			|	ДвиженияОстаткиИзменение.МестоХранения КАК МестоХранения,
			|	ДвиженияОстаткиИзменение.Партия КАК Партия,
			|	ДвиженияОстаткиИзменение.Номенклатура КАК Номенклатура,
			|	ДвиженияОстаткиИзменение.КоличествоПередЗаписью КАК КоличествоПередЗаписью
			|ПОМЕСТИТЬ ДвиженияОстаткиПередЗаписью
			|ИЗ
			|	ДвиженияОстаткиИзменение КАК ДвиженияОстаткиИзменение
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Остатки.НомерСтроки,
			|	Остатки.Организация,
			|	Остатки.МестоХранения,
			|	Остатки.Партия,
			|	Остатки.Номенклатура,
			|	ВЫБОР
			|		КОГДА Остатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|			ТОГДА Остатки.Количество
			|		ИНАЧЕ -Остатки.Количество
			|	КОНЕЦ
			|ИЗ
			|	РегистрНакопления.Остатки КАК Остатки
			|ГДЕ
			|	Остатки.Регистратор = &Регистратор
			|	И &Замещение";
		
		Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
		Запрос.УстановитьПараметр("Замещение", Замещение);
				
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Временная таблица "ДвиженияЗаказыПоставщикамИзменение" уничтожается.
	// Удаляется информация о ее существовании.
	
	Если СтруктураВременныеТаблицы.Свойство("ДвиженияОстаткиИзменение") Тогда
		
		Запрос = Новый Запрос("УНИЧТОЖИТЬ ДвиженияОстаткиИзменение");
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		СтруктураВременныеТаблицы.Удалить("ДвиженияОстаткиИзменение");
	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ПриЗаписи набора записей.
//
Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка
	  ИЛИ НЕ ДополнительныеСвойства.Свойство("ДляПроведения")
	  ИЛИ НЕ ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Рассчитывается изменение нового набора относительно текущего с учетом накопленных изменений
	// и помещается во временную таблицу "ДвиженияЗаказыПоставщикамИзменение".
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ДвиженияОстаткиИзменение.НомерСтроки) КАК НомерСтроки,
		|	ДвиженияОстаткиИзменение.Организация КАК Организация,
		|	ДвиженияОстаткиИзменение.МестоХранения КАК МестоХранения,
		|	ДвиженияОстаткиИзменение.Номенклатура КАК Номенклатура,
		|	ДвиженияОстаткиИзменение.Партия КАК Партия,
		|	СУММА(ДвиженияОстаткиИзменение.КоличествоПередЗаписью) КАК КоличествоПередЗаписью,
		|	СУММА(ДвиженияОстаткиИзменение.КоличествоИзменение) КАК КоличествоИзменение,
		|	СУММА(ДвиженияОстаткиИзменение.КоличествоПриЗаписи) КАК КоличествоПриЗаписи
		|ПОМЕСТИТЬ ДвиженияОстаткиИзменение
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДвиженияОстаткиПередЗаписью.НомерСтроки КАК НомерСтроки,
		|		ДвиженияОстаткиПередЗаписью.Организация КАК Организация,
		|		ДвиженияОстаткиПередЗаписью.МестоХранения КАК МестоХранения,
		|		ДвиженияОстаткиПередЗаписью.Номенклатура КАК Номенклатура,
		|		ДвиженияОстаткиПередЗаписью.Партия КАК Партия,
		|		ДвиженияОстаткиПередЗаписью.КоличествоПередЗаписью КАК КоличествоПередЗаписью,
		|		ДвиженияОстаткиПередЗаписью.КоличествоПередЗаписью КАК КоличествоИзменение,
		|		0 КАК КоличествоПриЗаписи
		|	ИЗ
		|		ДвиженияОстаткиПередЗаписью КАК ДвиженияОстаткиПередЗаписью
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияОстаткиПриЗаписи.НомерСтроки,
		|		ДвиженияОстаткиПриЗаписи.Организация,
		|		ДвиженияОстаткиПриЗаписи.МестоХранения,
		|		ДвиженияОстаткиПриЗаписи.Номенклатура,
		|		ДвиженияОстаткиПриЗаписи.Партия,
		|		0,
		|		ВЫБОР
		|			КОГДА ДвиженияОстаткиПриЗаписи.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ДвиженияОстаткиПриЗаписи.Количество
		|			ИНАЧЕ ДвиженияОстаткиПриЗаписи.Количество
		|		КОНЕЦ,
		|		ДвиженияОстаткиПриЗаписи.Количество
		|	ИЗ
		|		РегистрНакопления.Остатки КАК ДвиженияОстаткиПриЗаписи
		|	ГДЕ
		|		ДвиженияОстаткиПриЗаписи.Регистратор = &Регистратор) КАК ДвиженияОстаткиИзменение
		|
		|СГРУППИРОВАТЬ ПО
		|	ДвиженияОстаткиИзменение.Организация,
		|	ДвиженияОстаткиИзменение.МестоХранения,
		|	ДвиженияОстаткиИзменение.Номенклатура,
		|	ДвиженияОстаткиИзменение.Партия
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДвиженияОстаткиИзменение.КоличествоИзменение) <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	МестоХранения,
		|	Номенклатура,
		|	Партия";
	
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Новые изменения были помещены во временную таблицу.
	// Добавляется информация о ее существовании и наличии в ней записей об изменении.
	СтруктураВременныеТаблицы.Вставить("ДвиженияОстаткиИзменение", ВыборкаИзРезультатаЗапроса.Количество > 0);
	
	// Временная таблица "ДвиженияЗаказыПоставщикамПередЗаписью" уничтожается
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ДвиженияОстаткиПередЗаписью");
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры // ПриЗаписи()

#КонецОбласти

#КонецЕсли