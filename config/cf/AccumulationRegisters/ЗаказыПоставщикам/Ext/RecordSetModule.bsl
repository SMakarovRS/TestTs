#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события ПередЗаписью набора записей.
//
Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка
  		ИЛИ НЕ ДополнительныеСвойства.Свойство("ДляПроведения")
  		ИЛИ НЕ ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Установка исключительной блокировки текущего набора записей регистратора.
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыПоставщикам.НаборЗаписей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Отбор.Регистратор.Значение);
	Блокировка.Заблокировать();
	
	Если НЕ СтруктураВременныеТаблицы.Свойство("ДвиженияЗаказыПоставщикамИзменение")
		ИЛИ	СтруктураВременныеТаблицы.Свойство("ДвиженияЗаказыПоставщикамИзменение")
		И НЕ СтруктураВременныеТаблицы.ДвиженияЗаказыПоставщикамИзменение Тогда
		
		// Если временная таблица "ДвиженияЗаказыПоставщикамИзменение" не существует или не содержит записей
		// об изменении набора, значит набор записывается первый раз или для набора был выполнен контроль остатков.
		// Текущее состояние набора помещается во временную таблицу "ДвиженияЗаказыПоставщикамПередЗаписью",
		// чтобы при записи получить изменение нового набора относительно текущего.
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаказыПоставщикам.НомерСтроки КАК НомерСтроки,
			|	ЗаказыПоставщикам.Организация КАК Организация,
			|	ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
			|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|			ТОГДА ЗаказыПоставщикам.Количество
			|		ИНАЧЕ -ЗаказыПоставщикам.Количество
			|	КОНЕЦ КАК КоличествоПередЗаписью
			|ПОМЕСТИТЬ ДвиженияЗаказыПоставщикамПередЗаписью
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
			|ГДЕ
			|	ЗаказыПоставщикам.Регистратор = &Регистратор
			|	И &Замещение";
		
		Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
		Запрос.УстановитьПараметр("Замещение", Замещение);
				
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	Иначе
		
		// Если временная таблица "ДвиженияЗаказыПокупателейИзменение" существует и содержит записи
		// об изменении набора, значит набор записывается не первый раз и для набора не был выполнен контроль остатков.
		// Текущее состояние набора и текущее состояние изменений помещаются во временную таблицу "ДвиженияЗаказыПокупателейПередЗаписью",
		// чтобы при записи получить изменение нового набора относительно первоначального.
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДвиженияЗаказыПоставщикамИзменение.НомерСтроки КАК НомерСтроки,
			|	ДвиженияЗаказыПоставщикамИзменение.Организация КАК Организация,
			|	ДвиженияЗаказыПоставщикамИзменение.ЗаказПоставщику КАК ЗаказПоставщику,
			|	ДвиженияЗаказыПоставщикамИзменение.Номенклатура КАК Номенклатура,
			|	ДвиженияЗаказыПоставщикамИзменение.КоличествоПередЗаписью КАК КоличествоПередЗаписью
			|ПОМЕСТИТЬ ДвиженияЗаказыПоставщикамПередЗаписью
			|ИЗ
			|	ДвиженияЗаказыПоставщикамИзменение КАК ДвиженияЗаказыПоставщикамИзменение
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаказыПоставщикам.НомерСтроки,
			|	ЗаказыПоставщикам.Организация,
			|	ЗаказыПоставщикам.ЗаказПоставщику,
			|	ЗаказыПоставщикам.Номенклатура,
			|	ВЫБОР
			|		КОГДА ЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|			ТОГДА ЗаказыПоставщикам.Количество
			|		ИНАЧЕ -ЗаказыПоставщикам.Количество
			|	КОНЕЦ
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
			|ГДЕ
			|	ЗаказыПоставщикам.Регистратор = &Регистратор
			|	И &Замещение";
		
		Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
		Запрос.УстановитьПараметр("Замещение", Замещение);
				
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Временная таблица "ДвиженияЗаказыПоставщикамИзменение" уничтожается
	// Удаляется информация о ее существовании.
	
	Если СтруктураВременныеТаблицы.Свойство("ДвиженияЗаказыПоставщикамИзменение") Тогда
		
		Запрос = Новый Запрос("УНИЧТОЖИТЬ ДвиженияЗаказыПоставщикамИзменение");
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		СтруктураВременныеТаблицы.Удалить("ДвиженияЗаказыПоставщикамИзменение");
	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ПриЗаписи набора записей.
//
Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка
  ИЛИ НЕ ДополнительныеСвойства.Свойство("ДляПроведения")
  ИЛИ НЕ ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Рассчитывается изменение нового набора относительно текущего с учетом накопленных изменений
	// и помещается во временную таблицу "ДвиженияЗаказыПоставщикамИзменение".
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ДвиженияЗаказыПоставщикамИзменение.НомерСтроки) КАК НомерСтроки,
		|	ДвиженияЗаказыПоставщикамИзменение.Организация КАК Организация,
		|	ДвиженияЗаказыПоставщикамИзменение.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ДвиженияЗаказыПоставщикамИзменение.Номенклатура КАК Номенклатура,
		|	СУММА(ДвиженияЗаказыПоставщикамИзменение.КоличествоПередЗаписью) КАК КоличествоПередЗаписью,
		|	СУММА(ДвиженияЗаказыПоставщикамИзменение.КоличествоИзменение) КАК КоличествоИзменение,
		|	СУММА(ДвиженияЗаказыПоставщикамИзменение.КоличествоПриЗаписи) КАК КоличествоПриЗаписи
		|ПОМЕСТИТЬ ДвиженияЗаказыПоставщикамИзменение
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДвиженияЗаказыПоставщикамПередЗаписью.НомерСтроки КАК НомерСтроки,
		|		ДвиженияЗаказыПоставщикамПередЗаписью.Организация КАК Организация,
		|		ДвиженияЗаказыПоставщикамПередЗаписью.ЗаказПоставщику КАК ЗаказПоставщику,
		|		ДвиженияЗаказыПоставщикамПередЗаписью.Номенклатура КАК Номенклатура,
		|		ДвиженияЗаказыПоставщикамПередЗаписью.КоличествоПередЗаписью КАК КоличествоПередЗаписью,
		|		ДвиженияЗаказыПоставщикамПередЗаписью.КоличествоПередЗаписью КАК КоличествоИзменение,
		|		0 КАК КоличествоПриЗаписи
		|	ИЗ
		|		ДвиженияЗаказыПоставщикамПередЗаписью КАК ДвиженияЗаказыПоставщикамПередЗаписью
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияЗаказыПоставщикамПриЗаписи.НомерСтроки,
		|		ДвиженияЗаказыПоставщикамПриЗаписи.Организация,
		|		ДвиженияЗаказыПоставщикамПриЗаписи.ЗаказПоставщику,
		|		ДвиженияЗаказыПоставщикамПриЗаписи.Номенклатура,
		|		0,
		|		ВЫБОР
		|			КОГДА ДвиженияЗаказыПоставщикамПриЗаписи.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ДвиженияЗаказыПоставщикамПриЗаписи.Количество
		|			ИНАЧЕ ДвиженияЗаказыПоставщикамПриЗаписи.Количество
		|		КОНЕЦ,
		|		ДвиженияЗаказыПоставщикамПриЗаписи.Количество
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам КАК ДвиженияЗаказыПоставщикамПриЗаписи
		|	ГДЕ
		|		ДвиженияЗаказыПоставщикамПриЗаписи.Регистратор = &Регистратор) КАК ДвиженияЗаказыПоставщикамИзменение
		|
		|СГРУППИРОВАТЬ ПО
		|	ДвиженияЗаказыПоставщикамИзменение.Организация,
		|	ДвиженияЗаказыПоставщикамИзменение.ЗаказПоставщику,
		|	ДвиженияЗаказыПоставщикамИзменение.Номенклатура
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДвиженияЗаказыПоставщикамИзменение.КоличествоИзменение) <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ЗаказПоставщику,
		|	Номенклатура";
	
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Новые изменения были помещены во временную таблицу "ДвиженияЗаказыПоставщикамИзменение".
	// Добавляется информация о ее существовании и наличии в ней записей об изменении.
	СтруктураВременныеТаблицы.Вставить("ДвиженияЗаказыПоставщикамИзменение", ВыборкаИзРезультатаЗапроса.Количество > 0);
	
	// Временная таблица "ДвиженияЗаказыПоставщикамПередЗаписью" уничтожается
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ДвиженияЗаказыПоставщикамПередЗаписью");
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры // ПриЗаписи()

#КонецОбласти

#КонецЕсли