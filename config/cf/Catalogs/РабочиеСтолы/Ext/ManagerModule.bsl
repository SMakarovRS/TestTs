#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьРабочийСтолПриПервоначальномЗаполнении(Знач ПараметрыПроверки = Неопределено, 
					АдресХранилища = Неопределено) Экспорт
	
	ЗагрузитьРабочийСтол();
	
КонецПроцедуры	

Функция ВыгрузитьРабочийСтол(Знач РабочийСтол = Неопределено) Экспорт
	
	КоличествоЗаписейВXML 	= 100;
	НомерТекущийЗаписиXML 	= 0;
	НомерПорции 			= 0;
	КаталогXML 				= КаталогВременныхФайлов() + "dt\";
	УдалитьФайлы(КаталогXML, "*");
	СоздатьКаталог(КаталогXML);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Рабочий стол.
    Запись = Новый ЗаписьXML;
    Запись.УстановитьСтроку();    
    Запись.ЗаписатьОбъявлениеXML();
    Запись.ЗаписатьНачалоЭлемента("Данные");	
	Запись.ЗаписатьНачалоЭлемента("РабочийСтол");
    Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.1/data/enterprise/current-config");
    Запись.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
    Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	СериализаторXDTO.ЗаписатьXML(Запись, РабочийСтол.ПолучитьОбъект());
	
	Запись.ЗаписатьКонецЭлемента();
	Запись.ЗаписатьКонецЭлемента();
	Текст 	= Запись.Закрыть();
	XMLФайл = КаталогXML + "0_sprdt.xml";
	МойXML 	= Новый ТекстовыйДокумент;
	МойXML.ДобавитьСтроку(Текст);
	МойXML.Записать(XMLФайл);
	
	// Виджеты.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Виджеты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Виджеты КАК Виджеты
		|ГДЕ
		|	НЕ Виджеты.ПометкаУдаления
		|	И Виджеты.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Владелец", РабочийСтол);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НомерТекущийЗаписиXML = 0 Тогда
		    Запись = Новый ЗаписьXML;
		    Запись.УстановитьСтроку();
		    		    
		    Запись.ЗаписатьОбъявлениеXML();
		    Запись.ЗаписатьНачалоЭлемента("Данные");			
			Запись.ЗаписатьНачалоЭлемента("Виджеты");
			
			Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.1/data/enterprise/current-config");
		    Запись.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
		    Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
			
		ИначеЕсли НомерТекущийЗаписиXML = 0 ИЛИ НомерТекущийЗаписиXML = КоличествоЗаписейВXML Тогда
			
			Если НомерТекущийЗаписиXML = КоличествоЗаписейВXML Тогда
		    	Запись.ЗаписатьКонецЭлемента();	
		    	Запись.ЗаписатьКонецЭлемента();				
				Текст = Запись.Закрыть();	

				XMLФайл = КаталогXML + "1_sprvd_" + Формат(НомерПорции, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + ".xml";
				МойXML 	= Новый ТекстовыйДокумент; 
				МойXML.ДобавитьСтроку(Текст);
				МойXML.Записать(XMLФайл);
				
				НомерПорции = НомерПорции + 1;
			КонецЕсли;
			
			НомерТекущийЗаписиXML = 0;			
			
			Запись = Новый ЗаписьXML;
		    Запись.УстановитьСтроку();		    
		    Запись.ЗаписатьОбъявлениеXML();
		    Запись.ЗаписатьНачалоЭлемента("Данные");			
			Запись.ЗаписатьНачалоЭлемента("Виджеты");
		    Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.1/data/enterprise/current-config");		    
		    Запись.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
		    Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
			
		КонецЕсли;		
		
		СериализаторXDTO.ЗаписатьXML(Запись, Выборка.Ссылка.ПолучитьОбъект());		
		НомерТекущийЗаписиXML = НомерТекущийЗаписиXML + 1;
				
	КонецЦикла;
		
	Запись.ЗаписатьКонецЭлемента();
	Запись.ЗаписатьКонецЭлемента();	
	Текст 		= Запись.Закрыть();
	XMLФайл 	= КаталогXML + "1_sprvd_" + Формат(НомерПорции, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + ".xml";
	МойXML 		= Новый ТекстовыйДокумент;
	МойXML.ДобавитьСтроку(Текст);
	МойXML.Записать(XMLФайл);
	НомерПорции = НомерПорции + 1;
	
	// Делаем архив.
	ИмяАрхива 	= ПолучитьИмяВременногоФайла();
	Файлы 		= НайтиФайлы(КаталогXML, "*", Ложь);	
	НовыйАрхив 	= Новый ЗаписьZipФайла(ИмяАрхива);
	Для Каждого Ф Из Файлы Цикл	
		НовыйАрхив.Добавить(Ф.ПолноеИмя);
	КонецЦикла;
	НовыйАрхив.Записать();
	
	ДД 		= Новый ДвоичныеДанные(ИмяАрхива);
	Адрес 	= ПоместитьВоВременноеХранилище(ДД);
	
	УдалитьФайлы(КаталогXML);
	УдалитьФайлы(ИмяАрхива);
	
	Возврат Адрес;
	
КонецФункции

Процедура ЗагрузитьРабочийСтол(Знач Адрес = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Адрес <> Неопределено Тогда
		ДД 	= ПолучитьИзВременногоХранилища(Адрес);
		УдалитьИзВременногоХранилища(Адрес);
	Иначе
		ДД 	= ПолучитьОбщийМакет("ШаблонРабочегоСтола");
	КонецЕсли;
	
	ПапкаНазначения = КаталогВременныхФайлов() + "dt\";
	
	Попытка
		Поток 			= ДД.ОткрытьПотокДляЧтения();
		ЧтениеАрхива	= Новый ЧтениеZipФайла(Поток);
	Исключение
		ТекстОшибки 	= НСтр("ru = 'В файле отсутствует информация о данных рабочего стола.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
		
	КонецПопытки;
	
	Для Каждого ЭлементАрхива Из ЧтениеАрхива.Элементы Цикл
		
		ИсходноеПолноеИмя	= НРег(ЭлементАрхива.ИсходноеПолноеИмя);
		ЧтениеАрхива.Извлечь(ЭлементАрхива, ПапкаНазначения);
		ВременныйФайлXML 	= ПапкаНазначения + ЭлементАрхива.ПолноеИмя;
		ЧтениеXML 		 	= Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ВременныйФайлXML);
		ЧтениеXML.ПерейтиКСодержимому();
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		
		Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
						
			ОбъектСправочника = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
			ОбъектСправочника.ОбменДанными.Загрузка = Истина;
			ОбъектСправочника.Записать();
			
		КонецЦикла;
		ЧтениеXML.Прочитать();

	КонецЦикла;	
	
	ЧтениеАрхива.Закрыть();
	Поток.Закрыть();
	ЧтениеXML.Закрыть();
	
	ЧтениеАрхива = Неопределено;
	Поток		 = Неопределено;
	ЧтениеXML	 = Неопределено;
	
	Попытка
		ФайловаяСистема.УдалитьВременныйКаталог(ПапкаНазначения);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
