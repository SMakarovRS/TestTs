#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий
	
Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	Если НЕ ЭтоГруппа Тогда
				
		// Делаем свертку по всем колонкам Исполнителей, чтобы не было дубляжа
		СтрокаСверки = "";
		Для каждого Стр Из ЭтотОбъект.Метаданные().ТабличныеЧасти.ИсполнителиЭтапов.Реквизиты Цикл
			Если НЕ ПустаяСтрока(СтрокаСверки) Тогда
				СтрокаСверки = СтрокаСверки + ",";
			КонецЕсли;
			СтрокаСверки = СтрокаСверки + Стр.Имя;
		КонецЦикла;
		ИсполнителиЭтапов.Свернуть(СтрокаСверки,);
		ИсполнителиЭтапов.Сортировать("Этап,Исполнитель");
		
		// Удаляем лишние этапы
		Индекс = ИсполнителиЭтапов.Количество();
		Пока Индекс > 0 И ИсполнителиЭтапов.Количество() > 0 Цикл
			Индекс = Индекс - 1;
			Этап = ИсполнителиЭтапов[Индекс].Этап;
			Если НЕ ЗначениеЗаполнено(Этап) Тогда
				ИсполнителиЭтапов.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			
			Найден = Ложь;
			Для каждого Строки Из ЭтапыПроцесса Цикл
				Если Строки.НачальныйЭтап = Этап ИЛИ Строки.КонечныйЭтап = Этап Тогда
					Найден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ Найден Тогда
				ИсполнителиЭтапов.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		Если Картинка.Получить() = Неопределено Тогда 
			Картинка = Новый ХранилищеЗначения(БиблиотекаКартинок.Подпроцесс);
		КонецЕсли;	
		
		Если Ссылка.Пустая() Тогда
			НовыйУИД = Новый УникальныйИдентификатор;
			НоваяСсылка = Справочники.Процессы.ПолучитьСсылку(НовыйУИД);
			УстановитьСсылкуНового(НоваяСсылка);		
			НавСсылка = ПолучитьНавигационнуюСсылку(НоваяСсылка, "Картинка");
		Иначе
			НавСсылка = ПолучитьНавигационнуюСсылку(ЭтотОбъект, "Картинка");
		КонецЕсли;
		
		ВидЭтапа = 1;
		
		Для каждого Строки Из Этапы Цикл
			Строки.НавСсылка = Строки.Этап.НавСсылка;
		КонецЦикла;
		
		СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Подпроцесс;
		
		Если АвтоматическоеВыполнениеЗадания Тогда
			Если НЕ ЗначениеЗаполнено(АвтоматическоеВыполнениеЗаданияЭтап) Тогда
				// Не выбран этап
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
					"Объект.АвтоматическоеВыполнениеЗаданияЭтап",
					НСтр("ru = 'Не заполнен этап, который будет установлен при автоматическом выполнении задания'"),
					"Ошибки");
			Иначе
				// Проверка, что этап закрытия содержится в списке этапов процесса
				ЭтапНайден = Ложь;
				Для каждого Строки Из Этапы Цикл
					Если АвтоматическоеВыполнениеЗаданияЭтап = Строки.Этап Тогда
						ЭтапНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЭтапНайден Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
						"Объект.Этапы",
						СтрШаблон(НСтр("ru = 'Этап автоматического выполнения <%1> не найден в списке этапов процесса'"), АвтоматическоеВыполнениеЗаданияЭтап),
						"Ошибки");					
				КонецЕсли;
				
				// Этап является закрывающим?
				Если АвтоматическоеВыполнениеЗаданияЭтап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Закрыт 
					И АвтоматическоеВыполнениеЗаданияЭтап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Выполнен Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
						"Объект.Этапы",
						СтрШаблон(НСтр("ru = 'Этап автоматического выполнения <%1> не является закрывающим (состояние этапа не равно Закрыт или Выполнен)'"), АвтоматическоеВыполнениеЗаданияЭтап),
						"Ошибки");					
				КонецЕсли;
			КонецЕсли;
			
			Если АвтоматическоеВыполнениеЗаданияЧасов = 0 Тогда
				// Не выбрано время закрытия
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.АвтоматическоеВыполнениеЗаданияЧасов",
					НСтр("ru = 'Не указано время автоматического выполнения задания'"),
					"Ошибки");
			КонецЕсли;			
		КонецЕсли;
	Иначе
		Если Картинка.Получить() = Неопределено Тогда 
			Картинка = Новый ХранилищеЗначения(БиблиотекаКартинок.Подсистема);
		КонецЕсли;	
		
		Если Ссылка.Пустая() Тогда
			НовыйУИД = Новый УникальныйИдентификатор;
			НоваяСсылка = Справочники.Процессы.ПолучитьСсылку(НовыйУИД);
			УстановитьСсылкуНового(НоваяСсылка);		
			НавСсылка = ПолучитьНавигационнуюСсылку(НоваяСсылка, "Картинка");
		Иначе
			НавСсылка = ПолучитьНавигационнуюСсылку(ЭтотОбъект, "Картинка");
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли