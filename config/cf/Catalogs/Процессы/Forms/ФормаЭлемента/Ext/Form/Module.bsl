
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если Объект.Ссылка.Пустая() Тогда
	
		Если Объект.Этапы.Количество()	= 0 Тогда
			НоваяСтрока 				= Объект.Этапы.Добавить();
			НоваяСтрока.Этап 			= Справочники.ЭтапыПроцессов.Новый;
			НоваяСтрока 				= Объект.Этапы.Добавить();
			НоваяСтрока.Этап 			= Справочники.ЭтапыПроцессов.Возобновлено;
		КонецЕсли;
		
		Если Объект.ЭтапыПроцесса.Количество() = 0 Тогда
			НоваяСтрока 				= Объект.ЭтапыПроцесса.Добавить();
			НоваяСтрока.НачальныйЭтап 	= Справочники.ЭтапыПроцессов.ПустаяСсылка();
			НоваяСтрока.КонечныйЭтап 	= Справочники.ЭтапыПроцессов.Новый;
		КонецЕсли;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Элементы.ЭтапыДляПереходов.ТолькоПросмотр 		= Истина;
		Элементы.ИсполнителиТЗ.ТолькоПросмотр 			= Истина;
		Элементы.ГруппаКнопкиИсполнители.Видимость	 	= Истина;
		Элементы.ГруппаКнопкиЭтапы.Видимость			= Истина;
		Элементы.АвтоматическоеВыполнение.ТолькоПросмотр= Истина;
	КонецЕсли;
		
	ЗаполнитьЭтапы();
	ОбновитьВидимость();
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекГрСхема = ТекОбъект.ГрафическаяСхема.Получить();
	Если ТекГрСхема <> Неопределено Тогда
		ГрСхема = ТекГрСхема;
	КонецЕсли;	
	
	ЗаданияСервер.УстановитьШагКорректировкиВеса(ШагКорректировкиВеса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Удаляем лишние
	УдалитьЛишниеПереходыВЭтапах();
	
	ЗаполнитьЭтапыАвтоматическогоЗакрытия();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ГрафическаяСхема = Новый ХранилищеЗначения(ГрСхема);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВесРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ШагКорректировкиВеса > 1 Тогда		
		
		СтандартнаяОбработка = Ложь;
		Если Направление = 1 Тогда
			Объект.Вес = Объект.Вес + ШагКорректировкиВеса;
		Иначе
			Объект.Вес = Объект.Вес - ШагКорректировкиВеса;
		КонецЕсли;	
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапы

&НаКлиенте
Процедура Этапы1ПриАктивизацииЯчейки(Элемент)
	Если Элементы.Этапы1.ТекущиеДанные <> Неопределено Тогда
		ОбновитьПереходы(Элементы.Этапы1.ТекущиеДанные.Этап);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Этапы1ПередНачаломИзменения(Элемент, Отказ)
	Если Элементы.Этапы1.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭтап = Элементы.Этапы1.ТекущиеДанные.Этап;
	Если ТекущийЭтап = ПредопределенноеЗначение("Справочник.ЭтапыПроцессов.Новый") 
		И Элемент.ТекущийЭлемент.Имя = "ЭтапыЭтапПодпроцесс" Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя редактировать данный этап'"));
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Этапы1ЭтапПриИзменении(Элемент)
	
	Если Элементы.Этапы1.ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
		
	Элементы.Этапы1.ТекущиеДанные.НавСсылка 	= ПолучитьНавСсылку(Элементы.Этапы1.ТекущиеДанные.Этап);
	Элементы.Этапы1.ТекущиеДанные.Подпроцесс 	= 
		ТипЗнч(Элементы.Этапы1.ТекущиеДанные.Этап) <> Тип("СправочникСсылка.ЭтапыПроцессов");
	
КонецПроцедуры

&НаКлиенте
Процедура Этапы1ПередУдалением(Элемент, Отказ)
	
	Если Элементы.Этапы1.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭтап = Элементы.Этапы1.ТекущиеДанные.Этап;
	
	Если ТекущийЭтап = ПредопределенноеЗначение("Справочник.ЭтапыПроцессов.Новый") Тогда
	 	ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя удалять данный этап'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Удаляем лишние
	УдалитьЛишниеПереходыВЭтапах();
	
КонецПроцедуры

&НаКлиенте
Процедура Этапы1ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.Этапы1.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭтап = Элементы.Этапы1.ТекущиеДанные.Этап;
	ПараметрыЭтапа = Новый Структура;
	ПараметрыЭтапа.Вставить("Этап", ТекущийЭтап);
	НайденныеСтроки = Объект.Этапы.НайтиСтроки(ПараметрыЭтапа);
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбранный этап уже есть в таблице'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Этапы1ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Удаляем лишние.
	УдалитьЛишниеПереходыВЭтапах();	
	ЗаполнитьЭтапыАвтоматическогоЗакрытия();
	Если Объект.ИсполнителиЭтапов.Количество() > 0 Тогда
		ИсполнительТекущиеДанные = Элементы.ИсполнителиЭтапов.ТекущиеДанные;
		Если ИсполнительТекущиеДанные <> Неопределено Тогда
			ОбновитьЭтапыИсполнителя(ИсполнительТекущиеДанные.Исполнитель);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Этапы1ПослеУдаления(Элемент)
	
	// Удаляем лишние.
	УдалитьЛишниеПереходыВЭтапах();	
	ЗаполнитьЭтапыАвтоматическогоЗакрытия();
	Если Объект.ИсполнителиЭтапов.Количество() > 0 Тогда
		ИсполнительТекущиеДанные = Элементы.ИсполнителиЭтапов.ТекущиеДанные;
		Если ИсполнительТекущиеДанные <> Неопределено Тогда
			ОбновитьЭтапыИсполнителя(ИсполнительТекущиеДанные.Исполнитель);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнителиЭтапов

&НаКлиенте
Процедура ИсполнителиЭтаповПриАктивизацииЯчейки(Элемент)
	Если Элементы.ИсполнителиЭтапов.ТекущиеДанные <> Неопределено Тогда
		ОбновитьЭтапыИсполнителя(Элементы.ИсполнителиЭтапов.ТекущиеДанные.Исполнитель);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиЭтаповПослеУдаления(Элемент)
	
	УдалитьЛишниеПереходыВЭтапах();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиЭтаповПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УдалитьЛишниеПереходыВЭтапах();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеТабличныеЧасти

&НаКлиенте
Процедура АвтоматическоеЗакрытиеЗаданияЧасовПриИзменении(Элемент)
	
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеВыполнениеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыТрекераПриИзменении(Элемент)
	
	ЗаполнитьЭтапы();
	ОбновитьОтборПоЭтапам();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыТрекераПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.НачальныйЭтап) 
			И Элемент.ТекущиеДанные.КонечныйЭтап = ПредопределенноеЗначение("Справочник.ЭтапыПроцессов.Новый") Тогда
		
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Эту строку удалить нельзя'");
			Сообщение.Поле = "ЭтапыПроцесса[1].СтатусыПроцессаНачальныйСтатус";
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();			
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПроцессаПослеУдаления(Элемент)
	ЗаполнитьЭтапы();
	ОбновитьОтборПоЭтапам();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И Элемент.ТекущиеДанные <> Неопределено Тогда
        Элемент.ТекущиеДанные.Этап 				= Элементы.ЭтапыОповещений.ТекущиеДанные.Этап;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыДляПереходовФлагПриИзменении(Элемент)
	
	НачальныйЭтап = Элементы.Этапы1.ТекущиеДанные.Этап;
	КонечныйЭтап  = Элементы.ЭтапыДляПереходов.ТекущиеДанные.КонечныйЭтап;
	Флаг 		  = Элементы.ЭтапыДляПереходов.ТекущиеДанные.Флаг;
	
	Если Флаг Тогда
		
		Найдено = Ложь;
		Для Каждого Строки Из Объект.ЭтапыПроцесса Цикл
			Если Строки.НачальныйЭтап = НачальныйЭтап И Строки.КонечныйЭтап = КонечныйЭтап Тогда
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Найдено Тогда
			НоваяСтрока					= Объект.ЭтапыПроцесса.Добавить();
			НоваяСтрока.НачальныйЭтап	= НачальныйЭтап;
			НоваяСтрока.КонечныйЭтап	= КонечныйЭтап;
		КонецЕсли;
		
	Иначе
		
		Для Каждого Строки Из Объект.ЭтапыПроцесса Цикл
			Если Строки.НачальныйЭтап = НачальныйЭтап И Строки.КонечныйЭтап = КонечныйЭтап Тогда
				Объект.ЭтапыПроцесса.Удалить(Строки);
			КонецЕсли;
		КонецЦикла;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиТЗФлагПриИзменении(Элемент)
	
	Исполнитель = Элементы.ИсполнителиЭтапов.ТекущиеДанные.Исполнитель;
	Этап 	    = Элементы.ИсполнителиТЗ.ТекущиеДанные.Этап;
	Флаг 		= Элементы.ИсполнителиТЗ.ТекущиеДанные.Флаг;	
	Если Флаг Тогда		
		Найдено = Ложь;
		Для Каждого Строки Из Объект.ИсполнителиЭтапов Цикл
			Если Строки.Исполнитель = Исполнитель И Строки.Этап = Этап Тогда
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Найдено Тогда
			НоваяСтрока = Объект.ИсполнителиЭтапов.Добавить();
			НоваяСтрока.Этап = Этап;
			НоваяСтрока.Исполнитель = Исполнитель;
		КонецЕсли;
		
	Иначе

		Для Каждого Строки Из Объект.ИсполнителиЭтапов Цикл
			Если Строки.Исполнитель = Исполнитель И Строки.Этап = Этап Тогда
				Объект.ИсполнителиЭтапов.Удалить(Строки);
			КонецЕсли;
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВставитьЭтапСхемы(Команда)
	
	СЗ = Новый СписокЗначений;
	Для Каждого Строка Из Объект.Этапы Цикл
		СЗ.Добавить(Строка.Этап,,, ВычислитьКодНаСервере("Параметр.Картинка.Получить()", Строка.Этап));
	КонецЦикла;
	Оп = Новый ОписаниеОповещения("ВставитьЭтапСхемыЗавершение", ЭтотОбъект);
	СЗ.ПоказатьВыборЭлемента(Оп, НСтр("ru = 'Выберите этап'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеЭтапы(Команда)
	
	Если Элементы.Этапы1.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачальныйЭтап = Элементы.Этапы1.ТекущиеДанные.Этап;
	Для Каждого Строки Из ЭтапыДляПереходов Цикл		
		Если НЕ Строки.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		Строки.Флаг  = Ложь;
		КонечныйЭтап = Строки.КонечныйЭтап;
		
		Для Каждого Строки2 Из Объект.ЭтапыПроцесса Цикл
			Если Строки2.НачальныйЭтап = НачальныйЭтап И Строки2.КонечныйЭтап = КонечныйЭтап Тогда
				Объект.ЭтапыПроцесса.Удалить(Строки2);
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеЭтапы(Команда)
	Если Элементы.Этапы1.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачальныйЭтап = Элементы.Этапы1.ТекущиеДанные.Этап;
	Для Каждого Строки Из ЭтапыДляПереходов Цикл
		
		Если Строки.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		Строки.Флаг = Истина;
		КонечныйЭтап = Строки.КонечныйЭтап;
		
		Найдено = Ложь;
		Для Каждого Строки Из Объект.ЭтапыПроцесса Цикл
			Если Строки.НачальныйЭтап = НачальныйЭтап И Строки.КонечныйЭтап = КонечныйЭтап Тогда
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Найдено Тогда
			НоваяСтрока = Объект.ЭтапыПроцесса.Добавить();
			НоваяСтрока.НачальныйЭтап = НачальныйЭтап;
			НоваяСтрока.КонечныйЭтап = КонечныйЭтап;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеЭтапыИсполнители(Команда)
	
	Если Элементы.ИсполнителиЭтапов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Исполнитель = Элементы.ИсполнителиЭтапов.ТекущиеДанные.Исполнитель;
	Для Каждого Строки Из ИсполнителиТЗ Цикл		
		Если Строки.Флаг Тогда
			Продолжить;
		КонецЕсли;		
		Строки.Флаг = Истина;
		Этап 		= Строки.Этап;		
		Найдено = Ложь;
		Для Каждого Строки2 Из Объект.ИсполнителиЭтапов Цикл
			Если Строки2.Этап = Этап И Строки2.Исполнитель = Исполнитель Тогда
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
		Если НЕ Найдено Тогда
			НоваяСтрока 	 = Объект.ИсполнителиЭтапов.Добавить();
			НоваяСтрока.Этап = Этап;
			НоваяСтрока.Исполнитель = Исполнитель;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеЭтапыИсполнителя(Команда)
	
	Если Элементы.ИсполнителиЭтапов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Исполнитель = Элементы.ИсполнителиЭтапов.ТекущиеДанные.Исполнитель;
	Для Каждого Строки Из ИсполнителиТЗ Цикл		
		Если НЕ Строки.Флаг Тогда
			Продолжить;
		КонецЕсли;		
		Строки.Флаг = Ложь;
		Этап 		= Строки.Этап;		
		Для Каждого Строки2 Из Объект.ИсполнителиЭтапов Цикл
			Если Строки2.Этап = Этап И Строки2.Исполнитель = Исполнитель Тогда
				Объект.ИсполнителиЭтапов.Удалить(Строки2);
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСхемуИзФайла(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Графическая схема (*.grs)|*.grs|Все файлы (*.*)|*.*";
	Диалог.МножественныйВыбор = Ложь;
	Оп = Новый ОписаниеОповещения("ОбработчикЗакрытияДиалогаВыбораФайла", ЭтотОбъект, "ЧтениеСхемы");
	Диалог.Показать(Оп);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСхемуВФайл(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = "Графическая схема (*.grs)|*.grs|Все файлы (*.*)|*.*";
	Диалог.МножественныйВыбор = Ложь;
	Оп = Новый ОписаниеОповещения("ОбработчикЗакрытияДиалогаВыбораФайла", ЭтотОбъект, "ЗаписьСхемы");
	Диалог.Показать(Оп);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьЭтапы()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Этап");
		
	Для Каждого Строки Из Объект.ЭтапыПроцесса Цикл
		Если ЗначениеЗаполнено(Строки.НачальныйЭтап) Тогда
			НайденнаяСтрока = ТЗ.Найти(Строки.НачальныйЭтап, "Этап");
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока 	 = ТЗ.Добавить();
				НоваяСтрока.Этап = Строки.НачальныйЭтап;
			КонецЕсли;
		КонецЕсли;		
		Если ЗначениеЗаполнено(Строки.КонечныйЭтап) Тогда
			НайденнаяСтрока = ТЗ.Найти(Строки.КонечныйЭтап, "Этап");
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока 	 = ТЗ.Добавить();
				НоваяСтрока.Этап = Строки.КонечныйЭтап;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Этапы.Очистить();
	Этапы.Загрузить(ТЗ);
	
	ЗаполнитьЭтапыАвтоматическогоЗакрытия();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыАвтоматическогоЗакрытия()
	
	// Заполняем этапы.
	АвтоматическоеВыполнение.Очистить();
	Для Каждого Строки Из Объект.Этапы Цикл
		
		Если НЕ ЗначениеЗаполнено(Строки.Этап) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Строки.Этап) = Тип("СправочникСсылка.ЭтапыПроцессов") Тогда		
			НоваяСтрока = АвтоматическоеВыполнение.Добавить();
			НоваяСтрока.Этап = Строки.Этап;
			НоваяСтрока.НавСсылка = Строки.Этап.НавСсылка;
			Структура = Новый Структура;
			Структура.Вставить("Этап", Строки.Этап);
			НоваяСтрока.Флаг = Объект.АвтоматическоеВыполнение.НайтиСтроки(Структура).Количество() > 0;
		КонецЕсли;
		
	КонецЦикла;	

	// Удаляем лишнее.
	Для Каждого Строки Из Объект.АвтоматическоеВыполнение Цикл
		
		Структура = Новый Структура;
		Структура.Вставить("Этап", Строки.Этап);
		Если АвтоматическоеВыполнение.НайтиСтроки(Структура).Количество() = 0 Тогда
			Объект.АвтоматическоеВыполнение.Удалить(Строки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимость()
	
	Элементы.АвтоматическоеЗакрытиеЗаданияЧасов.Доступность = Объект.АвтоматическоеВыполнениеЗадания;
	Если Объект.АвтоматическоеВыполнениеЗаданияЧасов < 24 Тогда
		Элементы.АвтоматическоеЗакрытиеЗаданияВремя.Заголовок = "ч.";
	Иначе
		Стр = Строка(Цел(Объект.АвтоматическоеВыполнениеЗаданияЧасов / 24)) + " д.";
		Если Объект.АвтоматическоеВыполнениеЗаданияЧасов % 24 <> 0 Тогда
			Стр = Стр + Формат(Объект.АвтоматическоеВыполнениеЗаданияЧасов % 24, "ЧДЦ=0; ЧН=0") + " ч.";
		КонецЕсли;
		Элементы.АвтоматическоеЗакрытиеЗаданияВремя.Заголовок = "ч. (" + Стр + ")";
	КонецЕсли;
	Элементы.АвтоматическоеЗакрытиеЗаданияЭтап.АвтоОтметкаНезаполненного = Объект.АвтоматическоеВыполнениеЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборПоЭтапам()
	
	Если Элементы.ЭтапыОповещений.ТекущиеДанные <> Неопределено Тогда
	    Элементы.Исполнители.ОтборСтрок = Новый ФиксированнаяСтруктура("Этап", 
	    	Элементы.ЭтапыОповещений.ТекущиеДанные.Этап);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПриАктивизацииСтроки(Элемент)
	
	ОбновитьОтборПоЭтапам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПереходы(ТекущийЭтап)
	
	ЭтапыДляПереходов.Очистить();	
	Для Каждого Строки Из Объект.Этапы Цикл
		Если Строки.Этап <> ТекущийЭтап Тогда
			НоваяСтрока = ЭтапыДляПереходов.Добавить();
			НоваяСтрока.КонечныйЭтап = Строки.Этап;
			НоваяСтрока.НавСсылка 	 = Строки.НавСсылка;
			
			// Расставляем флаги.
			НоваяСтрока.Флаг = Ложь;
			Для Каждого Строки2 Из Объект.ЭтапыПроцесса Цикл
				Если Строки2.НачальныйЭтап = ТекущийЭтап И Строки2.КонечныйЭтап = Строки.Этап Тогда
					НоваяСтрока.Флаг = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНавСсылку(Ссылка)
	
	Попытка
		Возврат Ссылка.НавСсылка;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура УдалитьЛишниеПереходыВЭтапах()
	
	// Удаляем лишние переходы в этапах.
	Для Каждого Строки2 Из Объект.ЭтапыПроцесса Цикл
		Найден1 = Ложь;
		Найден2 = Ложь;
		Для каждого Строки Из Объект.Этапы Цикл
			Если Строки2.НачальныйЭтап = Строки.Этап Тогда
				Найден1 = Истина;
			КонецЕсли;			
			Если Строки2.КонечныйЭтап = Строки.Этап Тогда
				Найден2 = Истина;
			КонецЕсли;			
		КонецЦикла;
		
		Если (НЕ Найден1 ИЛИ НЕ Найден2) И ЗначениеЗаполнено(Строки2.НачальныйЭтап) Тогда
			Объект.ЭтапыПроцесса.Удалить(Строки2);
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем лишних исполнителей этапов.
	Для Каждого Строки2 Из Объект.ИсполнителиЭтапов Цикл
		Найден = Ложь;
		Для Каждого Строки Из Объект.Этапы Цикл
			Если Строки2.Этап = Строки.Этап Тогда
				Найден = Истина;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
		Если НЕ Найден Тогда
			Объект.ИсполнителиЭтапов.Удалить(Строки2);
		КонецЕсли;		
	КонецЦикла;
	
	// Удаляем лишних исполнителей этапов.
	Для Каждого Строки2 Из Объект.ИсполнителиЭтапов Цикл
		Найден = Ложь;
		Для Каждого Строки Из Объект.Исполнители Цикл
			Если Строки2.Исполнитель = Строки.Исполнитель Тогда
				Найден = Истина;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
		Если НЕ Найден Тогда
			Объект.ИсполнителиЭтапов.Удалить(Строки2);
		КонецЕсли;		
	КонецЦикла;
	
	Если Объект.Исполнители.Количество() = 0 Тогда 
		ИсполнителиТЗ.Очистить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭтапыИсполнителя(Исполнитель)
	
	ИсполнителиТЗ.Очистить();	
	Для Каждого Строки Из Объект.Этапы Цикл
		НоваяСтрока 			= ИсполнителиТЗ.Добавить();
		НоваяСтрока.Этап 		= Строки.Этап;
		НоваяСтрока.НавСсылка 	= Строки.НавСсылка;
		НоваяСтрока.Исполнитель = Исполнитель;
		
		// Расставляем флаги.
		НоваяСтрока.Флаг = Ложь;
		Для Каждого Строки2 Из Объект.ИсполнителиЭтапов Цикл
			Если Строки2.Этап = Строки.Этап И Строки2.Исполнитель = Исполнитель Тогда
				НоваяСтрока.Флаг = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыДляПереходовИсполнительПоУмолчаниюПриИзменении(Элемент)
	
	НачальныйЭтап = Элементы.Этапы1.ТекущиеДанные.Этап;
	КонечныйЭтап  = Элементы.ЭтапыДляПереходов.ТекущиеДанные.КонечныйЭтап;
	
	Для Каждого Строки Из Объект.ЭтапыПроцесса Цикл
		Если Строки.НачальныйЭтап = НачальныйЭтап И Строки.КонечныйЭтап = КонечныйЭтап Тогда
			Строки.ИсполнительПоУмолчанию = Элементы.ЭтапыДляПереходов.ТекущиеДанные.ИсполнительПоУмолчанию;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыДляПереходовТребоватьПриПереводеНаСледующийЭтапИсполнителяПриИзменении(Элемент)
	
	НачальныйЭтап = Элементы.Этапы1.ТекущиеДанные.Этап;
	КонечныйЭтап = Элементы.ЭтапыДляПереходов.ТекущиеДанные.КонечныйЭтап;
	
	Для Каждого Строки Из Объект.ЭтапыПроцесса Цикл
		Если Строки.НачальныйЭтап = НачальныйЭтап И Строки.КонечныйЭтап = КонечныйЭтап Тогда
			Строки.ТребоватьПриПереводеНаСледующийЭтапИсполнителя = Элементы.ЭтапыДляПереходов.ТекущиеДанные.ТребоватьПриПереводеНаСледующийЭтапИсполнителя;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыДляПереходовПереноситьИсполнителяИзПредыдущегоЭтапаПриИзменении(Элемент)
	
	НачальныйЭтап = Элементы.Этапы1.ТекущиеДанные.Этап;
	КонечныйЭтап = Элементы.ЭтапыДляПереходов.ТекущиеДанные.КонечныйЭтап;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрыватьЗаданиеПриНеАктивностиПриИзменении(Элемент)
	ОбновитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеВыполнениеПометкаПриИзменении(Элемент)
	
	Этап = Элементы.АвтоматическоеВыполнение.ТекущиеДанные.Этап;
	Флаг = Элементы.АвтоматическоеВыполнение.ТекущиеДанные.Флаг;	
	Если Флаг Тогда		
		Найдено = Ложь;
		Для Каждого Строки Из Объект.АвтоматическоеВыполнение Цикл
			Если Строки.Этап = Этап Тогда
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
		Если НЕ Найдено Тогда
			НоваяСтрока = Объект.АвтоматическоеВыполнение.Добавить();
			НоваяСтрока.Этап = Этап;
		КонецЕсли;		
	Иначе
		Для Каждого Строки Из Объект.АвтоматическоеВыполнение Цикл
			Если Строки.Этап = Этап Тогда
				Объект.АвтоматическоеВыполнение.Удалить(Строки);				
			КонецЕсли;
		КонецЦикла;				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияДиалогаВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбранныеФайлы.Количество()=0 Тогда
		Возврат;
	ИначеЕсли ДополнительныеПараметры="ЧтениеСхемы" Тогда
		ГрСхема.Прочитать(ВыбранныеФайлы[0]);
	ИначеЕсли ДополнительныеПараметры="ЗаписьСхемы" Тогда
		ГрСхема.Записать(ВыбранныеФайлы[0]);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВычислитьКодНаСервере(Код, Параметр=Неопределено)
	Возврат Вычислить(Код);
КонецФункции

&НаСервере
Функция ПолучитьXMLТекущейСхемы(Схема)
	
	// http://www.softonit.ru/free/116-graphscheme.html	
	// Получаем XML исходной схемы
	ИсходнаяСхемаСериализаторXDTO	= Новый СериализаторXDTO(ФабрикаXDTO);	
	ИсходнаяСхемаЗаписьXML			= Новый ЗаписьXML;
	ИсходнаяСхемаЗаписьXML.УстановитьСтроку();
	ИсходнаяСхемаСериализаторXDTO.ЗаписатьXML(ИсходнаяСхемаЗаписьXML, Схема, НазначениеТипаXML.Явное);	
	ИсходнаяСхемаXML				= ИсходнаяСхемаЗаписьXML.Закрыть();
	
	Возврат ИсходнаяСхемаXML;
	
КонецФункции

&НаКлиенте
Процедура ВставитьЭтапСхемыЗавершение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	// На основе: http://www.softonit.ru/free/116-graphscheme.html
	Если ВыбранныйЭлемент=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВставитьЭтапСхемыЗавершениеФрагмент(ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЭтапСхемыЗавершениеФрагмент(ВыбранныйЭлемент)
	ТекЭтап = ВыбранныйЭлемент;
	
	ШаблонЭлементаXML ="<item>
		|	<itemType>0</itemType>
		|	<itemId>%ID%</itemId>
		|	<currentLanguage>#</currentLanguage>
		|	<itemTitle>
		|		<item xmlns=""http://v8.1c.ru/8.1/data/core"">
		|			<lang>#</lang>
		|			<content>%Заголовок%</content>
		|		</item>
		|	</itemTitle>
		|	<tipText/>
		|	<itemCode>%ИмяЭлемента%</itemCode>
		|	<itemTabOrder>1</itemTabOrder>
		|	<backColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:FormBackColor</backColor>
		|	<textColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:FormTextColor</textColor>
		|	<lineColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:BorderColor</lineColor>
		|	<groupNum>0</groupNum>
		|	<zOrder>0</zOrder>
		|	<hyperlink>false</hyperlink>
		|	<transparent>false</transparent>
		|	<textFont kind=""AutoFont""/>
		|	<alignHor>Center</alignHor>
		|	<alignVer>Center</alignVer>
		|	<picturePlacement>Left</picturePlacement>
		|	<rectLeft>%Лево%</rectLeft>
		|	<rectRight>%Право%</rectRight>
		|	<rectTop>%Верх%</rectTop>
		|	<rectBottom>%Низ%</rectBottom>
		|	<picture %Картинка%/>
		|	<pictureStyle>4</pictureStyle>
		|	<shape>Block</shape>
		|	<flipMode>0</flipMode>
		|	<angle xsi:type=""xs:decimal"">0</angle>
		|</item>";
	ШаблонКартинки = "xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui"" t=""false"" ref=""d3p1:%ИмяКартинки%""";
	
	ТекЗаголовок = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(""+ТекЭтап, "&", "&amp;"), "<", "&lt;"), ">", "&gt;"), "'", "&apos;"), """", "&quot;");
	ТекКартинка = "";
	КартинкаЭтапа = ВычислитьКодНаСервере("Параметр.Картинка.Получить()", ТекЭтап);
	Если ТипЗнч(КартинкаЭтапа)=Тип("Картинка") Тогда
		Если КартинкаЭтапа.Вид = ВидКартинки.ИзБиблиотеки Тогда
			ТекКартинка = ПолучитьИмяКартинкиБиблиотеки(КартинкаЭтапа);
	    КонецЕсли;
	КонецЕсли;
	ТекКартинка = ?(ТекКартинка="", "", СтрЗаменить(ШаблонКартинки, "%ИмяКартинки%", ТекКартинка));
	
	ЭлементXML = СтрЗаменить(СтрЗаменить(ШаблонЭлементаXML, "%Заголовок%", ТекЗаголовок), "%Картинка%", ТекКартинка);
		
	//***
	ТекИмяЭлемента = "";	
	ИсходнаяСхемаXML = ПолучитьXMLТекущейСхемы(ГрСхема);	
	
	// Получаем максимальный Id исходной схемы.	
	ПостроительDOM					= Новый ПостроительDOM;
	ЧтениеXML						= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ИсходнаяСхемаXML);
	ДокументDOM						= ПостроительDOM.Прочитать(ЧтениеXML);	
	
	//ID.
	СписокЭлементовDOM				= ДокументDOM.ПолучитьЭлементыПоИмени("itemId");
	МаксимальныйИД					= 0;
	Для Каждого Элемент Из СписокЭлементовDOM Цикл
		
		Попытка
			ИД = Число(Элемент.ТекстовоеСодержимое);
			Если ИД > МаксимальныйИД Тогда
				МаксимальныйИД = ИД;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	МаксимальныйИД					= МаксимальныйИД + 1;
	
	//Низ.
	СписокЭлементовDOM				= ДокументDOM.ПолучитьЭлементыПоИмени("rectBottom");
	МаксимальныйНиз 				= 0;
	Для Каждого Элемент Из СписокЭлементовDOM Цикл
		
		Попытка
			ИД = Число(Элемент.ТекстовоеСодержимое);
			Если ИД > МаксимальныйНиз Тогда
				МаксимальныйНиз = ИД;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	МаксимальныйНиз = МаксимальныйНиз + 10;
	
	ТекИД = Формат(МаксимальныйИД, "ЧН=; ЧГ=");
	ТекИмяЭлемента = "Элемент"+ТекИД;
	
	ЭлементXML = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлементXML, "%ИмяЭлемента%", ТекИмяЭлемента), "%ID%", ТекИД),
		"%Лево%", "20"), "%Право%", "220"), "%Верх%", Формат(МаксимальныйНиз, "ЧН=; ЧГ=")), "%Низ%", Формат(МаксимальныйНиз+30, "ЧН=; ЧГ="));
	ИсходнаяСхемаXML = Лев(ИсходнаяСхемаXML, СтрДлина(ИсходнаяСхемаXML) - СтрДлина("</FlowchartContextType>")) + ЭлементXML + "</FlowchartContextType>";
	НовыйСериализаторXDTO	= Новый СериализаторXDTO(ФабрикаXDTO);
	ЧтениеXML				= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ИсходнаяСхемаXML);
	ГрСхема					= НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);		
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяКартинкиБиблиотеки(Картинка)
	
	Для Каждого Элемент Из Метаданные.ОбщиеКартинки Цикл
		Если Картинка = БиблиотекаКартинок[Элемент.Имя] Тогда
			Возврат Элемент.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция СписокЭтапов()
	
	СЗ = Новый СписокЗначений;
	
	Для Каждого Строки Из Объект.Этапы Цикл
		Если Не Строки.Этап = Неопределено Тогда 
			Если Строки.Этап.ВидЭтапа = 0 Тогда
				Если Строки.Этап.СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Выполнен ИЛИ Строки.Этап.СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Закрыт Тогда
					СЗ.Добавить(Строки.Этап);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СЗ;
	
КонецФункции

&НаКлиенте
Процедура АвтоматическоеЗакрытиеЗаданияЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	МассивОтбора = Новый Массив;
	Для Каждого Эл Из СписокЭтапов() Цикл
		МассивОтбора.Добавить(Эл.Значение);
	КонецЦикла;	
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("Отбор", Новый Структура("Ссылка", МассивОтбора));
	СтруктураОтбора.Вставить("РежимВыбора", Истина);
	СтруктураОтбора.Вставить("МножественныйВыбор", Ложь);
	СтруктураОтбора.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.ЭтапыПроцессов.ФормаВыбора", СтруктураОтбора, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеЗакрытиеЗаданияЭтапОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.АвтоматическоеВыполнениеЗаданияЭтап = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура Этапы1ИсполнительПоУмолчаниюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Этапы1.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ИсполнительПоУмолчанию) Тогда
		ТекущиеДанные.УдалитьПереноситьИсполнителяИзПредыдущегоЭтапа = Ложь;	
	КонецЕсли;	
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти