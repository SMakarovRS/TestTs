#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура заполняет массив документов физ. лиц
//
Функция ДокументФизЛицаПоВиду(Период, ФизическоеЛицо, ВидДокумента = Неопределено) Экспорт
	
	ДокументыФизическихЛиц = Новый Массив;
	ДанныеДокумента = Новый Структура("ФизическоеЛицо, ВидДокумента, Серия, Номер, ДатаВыдачи, СрокДействия,"
		+ "КемВыдан, КодПодразделения, ЯвляетсяДокументомУдостоверяющимЛичность, Представление");
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		Возврат ДокументыФизическихЛиц;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		
		Период = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК ФизическоеЛицо,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.СрокДействия КАК СрокДействия,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК КодПодразделения,
	|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность КАК
	|		ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Период, ФизЛицо = &ФизЛицо
	|	И &УсловиеПоискаПоВидуДокумента) КАК ДокументыФизическихЛицСрезПоследних
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачи УБЫВ";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ФизЛицо", ФизическоеЛицо);
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоискаПоВидуДокумента", "ВидДокумента = &ВидДокумента");
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
		
	Иначе
		
		Запрос.УстановитьПараметр("УсловиеПоискаПоВидуДокумента", Истина); // выберем все документы
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
		ДокументыФизическихЛиц.Добавить(ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДокументыФизическихЛиц;
	
КонецФункции // ДокументФизЛицаПоВиду()

// СтандартныеПодсистемы.Печать
////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Информация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Информация", 
			НСтр("ru = 'Информация'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "Информация"));
	КонецЕсли;
		
КонецПроцедуры

// Функция печати документа
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_МестаХранения";
	
	ПервыйСправочник = Истина;
	
	Для Каждого ТекущийОбъект Из МассивОбъектов Цикл
	
		Если НЕ ПервыйСправочник Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйСправочник = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормыСправочника(ТекущийОбъект);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийОбъект", ТекущийОбъект);
		Запрос.Текст = 
			"ВЫБРАТЬ * ИЗ Справочник.ФизическиеЛица КАК ФизическиеЛица ГДЕ ФизическиеЛица.Ссылка = &ТекущийОбъект";
		
		Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Если ИмяМакета = "Информация" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ФизическиеЛица.ПФ_MXL_Информация");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ФизическиеЛица_Информация";
			
			// ШАПКА.
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			СтруктураЗаполнения.Вставить("ДатаИВремяПечати", ТекущаяДатаСеанса());
			СтруктураЗаполнения.Вставить("ТекстЗаголовка", "Информация по физическому лицу " + Шапка.Ссылка);
			СтруктураЗаполнения.Вставить("ТекущийПользователь", 
				ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Контактная информация			
						
			МассивКИ = Новый Массив;
			МассивКИ.Добавить(СтруктураЗаполнения.Ссылка);
			
			КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивКИ, , , 
				ТекущаяДатаСеанса());
			
			Если КонтактнаяИнформация.Количество() > 0 Тогда 
				
				ОбластьМакета = Макет.ПолучитьОбласть("КонтактнаяИнформация");
				
				Для Каждого Строка Из КонтактнаяИнформация Цикл 
					
					Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
												
						ОбластьМакета.Параметры.Адрес = "Адрес: " + Строка.Представление;
						
					ИначеЕсли Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
						
						ОбластьМакета.Параметры.Телефон = " Телефон: " + Строка.Представление;
						
					ИначеЕсли Строка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда 
						
						ОбластьМакета.Параметры.Email = " Адрес электронной почты: " + Строка.Представление;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
								 
			// Задания
			
			ЗапросСписокОбращений = Новый Запрос;
			ЗапросСписокОбращений.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Задание.Ссылка КАК Задание,
				|	Задание.Дата КАК Дата,
				|	Задание.Выполнено КАК Выполнено,
				|	Задание.Завершено КАК Завершено,
				|	Задание.Тема КАК Тема,
				|	Задание.ТекущийИсполнитель КАК ТекущийИсполнитель,
				|	Задание.Инициатор КАК Инициатор
				|ИЗ
				|	Документ.Задание КАК Задание
				|ГДЕ
				|	Задание.Инициатор = &Инициатор
				|	И Задание.Проведен = ИСТИНА
				|
				|УПОРЯДОЧИТЬ ПО
				|	Дата";
			
			ЗапросСписокОбращений.УстановитьПараметр("Инициатор", СтруктураЗаполнения.Ссылка);
			
			РезультатВыборка = ЗапросСписокОбращений.Выполнить();
			
			Если НЕ РезультатВыборка.Пустой() Тогда 
				
				ВыборкаСписокЗаданий = РезультатВыборка.Выбрать();
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаЗадания");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				НомерСтроки = 1;
				ОбластьМакета = Макет.ПолучитьОбласть("ТелоЗадания");
				Пока ВыборкаСписокЗаданий.Следующий() Цикл 
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаСписокЗаданий);
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, 
						Новый Структура("НомерСтроки,Выполнено,Завершено", НомерСтроки,
							?(ВыборкаСписокЗаданий.Выполнено, "✔", ""),
							?(ВыборкаСписокЗаданий.Завершено, "✔", "")));
					ТабличныйДокумент.Вывести(ОбластьМакета);
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗадания");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			// Статьи
			
			ЗапросСписокСтатей = Новый Запрос;
			ЗапросСписокСтатей.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СвязьСтатейБазыЗнаний.Статья,
				|	СвязьСтатейБазыЗнаний.Статья.Автор КАК Автор,
				|	СвязьСтатейБазыЗнаний.Статья.КраткоеОписание КАК КраткоеОписание,
				|	СвязьСтатейБазыЗнаний.Статья.ДатаСоздания КАК ДатаСоздания
				|ИЗ
				|	РегистрСведений.СвязьСтатейБазыЗнаний КАК СвязьСтатейБазыЗнаний
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
				|		ПО СвязьСтатейБазыЗнаний.Объект = ФизическиеЛица.Ссылка
				|ГДЕ
				|	ФизическиеЛица.Ссылка = &Ссылка";
			
			ЗапросСписокСтатей.УстановитьПараметр("Ссылка", СтруктураЗаполнения.Ссылка);
			
			РезультатВыборка = ЗапросСписокСтатей.Выполнить();
			
			Если Не РезультатВыборка.Пустой() Тогда 
				
				ВыборкаСписокСтатей = РезультатВыборка.Выбрать();
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаСтатьи");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				НомерСтроки = 1;
				ОбластьМакета = Макет.ПолучитьОбласть("ТелоСтатьи");
				Пока ВыборкаСписокСтатей.Следующий() Цикл 
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаСписокСтатей);
					ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
					ТабличныйДокумент.Вывести(ОбластьМакета);
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСтатьи");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;	
			
			// Остатки
			
			ЗапросОстатки = Новый Запрос;
			ЗапросОстатки.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОстаткиОстатки.Организация,
				|	ВЫБОР
				|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
				|			ТОГДА ОстаткиОстатки.Номенклатура
				|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец
				|	КОНЕЦ КАК Номенклатура,
				|	ОстаткиОстатки.Партия,
				|	ОстаткиОстатки.Номенклатура КАК КарточкаНоменклатуры,
				|	ОстаткиОстатки.КоличествоОстаток КАК Количество,
				|	ОстаткиОстатки.СуммаОстаток КАК Сумма,
				|	ВЫБОР
				|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
				|			ТОГДА ОстаткиОстатки.Номенклатура.ВидНоменклатуры.НавСсылка
				|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ВидНоменклатуры.НавСсылка
				|	КОНЕЦ КАК НавСсылка,
				|	ВЫБОР
				|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
				|			ТОГДА ОстаткиОстатки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
				|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
				|	КОНЕЦ КАК УчетПоКарточкам,
				|	ОстаткиОстатки.Номенклатура.ИнвентарныйНомер КАК ИнвентарныйНомер,
				|	ОстаткиОстатки.Номенклатура.СерийныйНомер КАК СерийныйНомер
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Остатки.Остатки(&ДатаКон, ) КАК ОстаткиОстатки
				|		ПО Сотрудники.Ссылка = ОстаткиОстатки.МестоХранения.ПоследнийОтветственный
				|ГДЕ
				|	Сотрудники.Физлицо = &Физлицо";
			
			ЗапросОстатки.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДатаСеанса()));
			ЗапросОстатки.УстановитьПараметр("Физлицо", СтруктураЗаполнения.Ссылка);
			
			РезультатВыборка = ЗапросОстатки.Выполнить();
			
			Если НЕ РезультатВыборка.Пустой() Тогда
				
				ВыборкаОстатки = РезультатВыборка.Выбрать();
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаСписокНоменклатуры");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				НомерСтроки = 1;
				ОбластьМакета = Макет.ПолучитьОбласть("ТелоСписокНоменклатуры");
				Пока ВыборкаОстатки.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаОстатки);
					ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
					ТабличныйДокумент.Вывести(ОбластьМакета);
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСписокНоменклатуры");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			ЗапросЛогиныИПароли = Новый Запрос;								
			ЗапросЛогиныИПароли.Текст = 		
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СправочникЛогиныИПароли.ТипПароля КАК ТипПароля,
				|	СправочникЛогиныИПароли.Объект КАК Объект,
				|	СправочникЛогиныИПароли.Программа КАК Программа,
				|	СправочникЛогиныИПароли.Категория КАК Категория,
				|	СправочникЛогиныИПароли.Комментарий КАК Комментарий,
				|	СправочникЛогиныИПароли.Автор КАК Автор,
				|	0 КАК КартинкаСтроки,
				|	СправочникЛогиныИПароли.Ссылка КАК Ссылка,
				|	ЛогиныИПаролиСрезПоследних.Логин КАК Логин,
				|	ЛогиныИПаролиСрезПоследних.Период КАК Дата
				|ИЗ
				|	Справочник.ЛогиныИПароли КАК СправочникЛогиныИПароли
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛогиныИПаролиХранилище.СрезПоследних КАК ЛогиныИПаролиСрезПоследних
				|		ПО СправочникЛогиныИПароли.Ссылка = ЛогиныИПаролиСрезПоследних.Владелец
				|ГДЕ
				|	ВЫБОР
				|		КОГДА СправочникЛогиныИПароли.ТипПароля = ЗНАЧЕНИЕ(Перечисление.ТипыПаролей.ПустаяСсылка)
				|			ТОГДА ИСТИНА
				|		КОГДА СправочникЛогиныИПароли.ТипПароля = ЗНАЧЕНИЕ(Перечисление.ТипыПаролей.Общий)
				|			ТОГДА ИСТИНА
				|		КОГДА СправочникЛогиныИПароли.ТипПароля = ЗНАЧЕНИЕ(Перечисление.ТипыПаролей.ГруппыПользователей)
				|			ТОГДА СправочникЛогиныИПароли.ГруппаПользователей В (&СписокГруппТекущегоПользователя)
				|		КОГДА СправочникЛогиныИПароли.ТипПароля = ЗНАЧЕНИЕ(Перечисление.ТипыПаролей.Личный)
				|		И СправочникЛогиныИПароли.Автор = &ТекущийПользователь
				|		И СправочникЛогиныИПароли.Автор <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				|		И &ТекущийПользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ
				|	И СправочникЛогиныИПароли.Объект = &Объект";
			
			ТекущийПользователь = Пользователи.ТекущийПользователь();
			ЗапросЛогиныИПароли.УстановитьПараметр("Объект", ТекущийОбъект.Ссылка);
			ЗапросЛогиныИПароли.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
			ЗапросЛогиныИПароли.УстановитьПараметр("СписокГруппТекущегоПользователя",
			УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекущийПользователь));
			
			РезультатВыборка = ЗапросЛогиныИПароли.Выполнить();
			
			Если НЕ РезультатВыборка.Пустой() Тогда 
				
				ВыборкаЛогины = РезультатВыборка.Выбрать(); 
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаЛогины");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ТелоЛогины");				
				Пока ВыборкаЛогины.Следующий() Цикл 
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаЛогины);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЛогины");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
						
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, 
			Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции
	
// Функция получает данные для печати.
//
Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам  = Новый Соответствие;
	ОписаниеОбластей 	  = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов           = Новый Соответствие;
	МакетыСтруктура		  = Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов", 
		ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов);	
	
	Возврат Новый Структура("Данные, Макеты", ДанныеПоВсемОбъектам, МакетыСтруктура);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЗащитаПерсональныхДанных");
		Модуль.ДобавитьКомандуПечатиСогласияНаОбработкуПерсональныхДанных(КомандыПечати);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	
	// Информация
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Информация";
	КомандаПечати.Представление = НСтр("ru = 'Информация'");
	КомандаПечати.СписокФорм 	= "ФормаЭлемента,ФормаСписка";
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта     = Новый Соответствие;	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("ФизическиеЛицаРасчетМетрикЗаписьЭлемента", НСтр("ru = 'Запись элемента'"));

	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли