
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Автонаименование = Объект.Наименование = АвтоматическоеНаименование(ЭтотОбъект) 
		ИЛИ ПустаяСтрока(Объект.Наименование);
	
	Если НЕ ПустаяСтрока(Объект.ПолноеИмяОснования) Тогда
		МетаданныеОснования    = Метаданные.НайтиПоПолномуИмени(Объект.ПолноеИмяОснования);
		ПредставлениеОснования = МетаданныеОснования.Представление();
		ЗаполнитьСписокВыбораЗначенийРеквизита();
	КонецЕсли;
	
	ОбновитьПриоритетыОпределения();
	Если Объект.Ссылка.Пустая() Тогда		
		
		ЗаполнитьПравилоПоУмолчанию();
		Объект.ПравилоАвтоназначенияИсполнителей = 
			Перечисления.ПравилаАвтоназначенияИсполнителей.ИсполнительСНаименьшейНагрузкой;
			
	КонецЕсли;
	
	УстановитьПараметрыВыбораШаблона();
	Элементы.ВидыДействий.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;	
	ОбновитьВидимостьДоступность();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипДействийПравилСобытий"));
	Элементы.ТипДействия.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
	ОбновитьСписокМетрик();
	ОбновитьАвтоназначения();
	
	Если УправлениеITОтделом8УФ.ЭтоДемоСерверОграниченныеПрава() Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТипДействия = ТекущийОбъект.ТипДействия;
	Если ТекущийОбъект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail 
		ИЛИ ТекущийОбъект.ТипДействия = Перечисления.ТипДействийПравилСобытий.СоздатьНапоминание
		ИЛИ ТекущийОбъект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеTelegram
		ИЛИ ТекущийОбъект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоSMS Тогда
		
		Если ТекущийОбъект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail
			ИЛИ ТекущийОбъект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоSMS
			ИЛИ ТекущийОбъект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеTelegram Тогда
			ЗаполнитьТаблицуРеквизитовОповещениеПоEmailSMS();
		ИначеЕсли ТекущийОбъект.ТипДействия = Перечисления.ТипДействийПравилСобытий.СоздатьНапоминание Тогда
			ЗаполнитьТаблицуРеквизитовСоздатьНапоминание();
		КонецЕсли;
		
	КонецЕсли;
	
	ДЗ = РеквизитФормыВЗначение("Компетенции", Тип("ДеревоЗначений"));
	СЛС.ПрочитатьИерархическоеДерево(ДЗ, Объект.Компетенции, "Компетенции", "Компетенция");
	ЗначениеВРеквизитФормы(ДЗ, "Компетенции");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
		
	Если Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail 
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоSMS
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеTelegram
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.СоздатьНапоминание Тогда 	
		
		Для Каждого СтрокаПолучатели Из Объект.ПолучателиОповещений Цикл
			Если ПустаяСтрока(СтрокаПолучатели.ПолучательВариантЗаполнения) Тогда
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , "Вариант заполнения получателя");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
					"Объект.ПолучателиОповещений[" 
					+ Объект.ПолучателиОповещений.Индекс(СтрокаПолучатели) + "].ПолучательВариантЗаполнения", , Отказ);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПолучатели.ПолучательЗначение) Тогда
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , "Значение заполнения получателя");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
					"Объект.ПолучателиОповещений[" + Объект.ПолучателиОповещений.Индекс(СтрокаПолучатели) 
					+ "].ПолучательЗначение", , Отказ);
			КонецЕсли;	
			
			Если Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail Тогда		
				
				Если НЕ ЗначениеЗаполнено(СтрокаПолучатели.ШаблонСообщения) Тогда
					ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , "Шаблон сообщения");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						"Объект.ПолучателиОповещений[" + Объект.ПолучателиОповещений.Индекс(СтрокаПолучатели) 
						+ "].ШаблонСообщения", , Отказ);				
				КонецЕсли;				
				
				Если ПустаяСтрока(СтрокаПолучатели.УчетнаяЗаписьВариантЗаполнения) Тогда
					ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , 
						"Вариант заполнения учетной записи эл.почты");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						"Объект.ПолучателиОповещений[" + Объект.ПолучателиОповещений.Индекс(СтрокаПолучатели) 
						+ "].УчетнаяЗаписьВариантЗаполнения", , Отказ);				
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаПолучатели.УчетнаяЗаписьЗначение) Тогда
					ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , 
						"Значение заполнения учетной записи эл.почты");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						"Объект.ПолучателиОповещений[" + Объект.ПолучателиОповещений.Индекс(СтрокаПолучатели) 
						+ "].УчетнаяЗаписьЗначение", , Отказ);				
				КонецЕсли;

			ИначеЕсли Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоSMS
				ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеTelegram Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаПолучатели.ШаблонСообщения) Тогда
					ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , "Шаблон сообщения");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						"Объект.ПолучателиОповещений[" + Объект.ПолучателиОповещений.Индекс(СтрокаПолучатели) 
						+ "].ШаблонСообщения", , Отказ);				
				КонецЕсли;				
				
			ИначеЕсли Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.СоздатьНапоминание Тогда
				
				Если ПустаяСтрока(СтрокаПолучатели.НапоминаниеВариантЗаполнения) Тогда
					ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , ,
						"Вариант заполнения времени напоминания");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						"Объект.ПолучателиОповещений[" + Объект.ПолучателиОповещений.Индекс(СтрокаПолучатели) 
						+ "].НапоминаниеВариантЗаполнения", , Отказ);				
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаПолучатели.НапоминаниеЗначение) Тогда
					ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , 
						"Значение заполнения времени напоминания");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						"Объект.ПолучателиОповещений[" + Объект.ПолучателиОповещений.Индекс(СтрокаПолучатели) 
						+ "].НапоминаниеЗначение", , Отказ);				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
	ИначеЕсли Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.СоздатьДело Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДелаПользователь) Тогда
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , "Значение заполнения пользователь");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,"Объект.ДелаПользователь", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДЗ = РеквизитФормыВЗначение("Компетенции", Тип("ДеревоЗначений"));
	СЛС.ЗаписатьИерархическоеДерево(ТекущийОбъект.Компетенции, ДЗ, "Компетенция");
	
	ТекущийОбъект.ПриоритетОпределенияКлиентовИИнициаторов = "";
	Для Индекс = 1 По ПриоритетОпределения.Количество() Цикл
		Стр = ПриоритетОпределения.Получить(Индекс - 1);
		ТекущийОбъект.ПриоритетОпределенияКлиентовИИнициаторов = ТекущийОбъект.ПриоритетОпределенияКлиентовИИнициаторов 
			+ Стр.Значение + Символы.ПС;
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипДействияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Объект.ТипДействия = ТипДействия;
	Для Каждого СтрокаОповещения Из Объект.ПолучателиОповещений Цикл
		СтрокаОповещения.ШаблонСообщения  = Неопределено;
		СтрокаОповещения.ШаблонОформления = Неопределено;
	КонецЦикла;
	Объект.Наименование 	= АвтоматическоеНаименование(ЭтотОбъект);	
	ТипДействияПриИзмененииНаСервере();	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Автонаименование = Объект.Наименование = АвтоматическоеНаименование(ЭтотОбъект) 
		ИЛИ ПустаяСтрока(Объект.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Значения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Элементы.Значения.ТекущиеДанные.Реквизит) Тогда
		
		ИмяРеквизита	= Элементы.Значения.ТекущиеДанные.Реквизит;		
		ТипРеквизита	= ПравилаСобытийСервер.ПолучитьТипЗначенияРеквизитаОбъекта(Объект.ПолноеИмяОснования, 
			ИмяРеквизита);
		Элементы.ЗначенияЗначение.ОграничениеТипа = ТипРеквизита;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияРеквизитПриИзменении(Элемент)
	
	Если Элементы.Значения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Значения.ТекущиеДанные.Значение = "";	
	ЗначенияПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.СписокВыбора.Очистить();
	
	Если Элементы.Значения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита	= Элементы.Значения.ТекущиеДанные.Реквизит;
	ТипРеквизита	= ПравилаСобытийСервер.ПолучитьТипЗначенияРеквизитаОбъекта(Объект.ПолноеИмяОснования, ИмяРеквизита);
	
	Если ТипРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Равно 			= ПредопределенноеЗначение("Перечисление.ТипыУсловийЗаполненияЗаданий.Равно");
	НеРавно			= ПредопределенноеЗначение("Перечисление.ТипыУсловийЗаполненияЗаданий.НеРавно");
	Содержит 		= ПредопределенноеЗначение("Перечисление.ТипыУсловийЗаполненияЗаданий.Содержит");
	НеСодержит 		= ПредопределенноеЗначение("Перечисление.ТипыУсловийЗаполненияЗаданий.НеСодержит");
	Больше 			= ПредопределенноеЗначение("Перечисление.ТипыУсловийЗаполненияЗаданий.Больше");
	Меньше 			= ПредопределенноеЗначение("Перечисление.ТипыУсловийЗаполненияЗаданий.Меньше");
	БольшеИлиРавно 	= ПредопределенноеЗначение("Перечисление.ТипыУсловийЗаполненияЗаданий.БольшеИлиРавно");
	МеньшеИлиРавно 	= ПредопределенноеЗначение("Перечисление.ТипыУсловийЗаполненияЗаданий.МеньшеИлиРавно");
	Заполнено 		= ПредопределенноеЗначение("Перечисление.ТипыУсловийЗаполненияЗаданий.Заполнено");
	НеЗаполнено 	= ПредопределенноеЗначение("Перечисление.ТипыУсловийЗаполненияЗаданий.НеЗаполнено");
	
	Если СтрНайти(Строка(ТипРеквизита), "Булево") <> 0 Тогда
		Элемент.СписокВыбора.Добавить(Равно);
		Элемент.СписокВыбора.Добавить(НеРавно);
	ИначеЕсли СтрНайти(Строка(ТипРеквизита), "Строка") <> 0 Тогда
		Элемент.СписокВыбора.Добавить(Равно);
		Элемент.СписокВыбора.Добавить(НеРавно);
		Элемент.СписокВыбора.Добавить(Содержит);
		Элемент.СписокВыбора.Добавить(НеСодержит);
	ИначеЕсли СтрНайти(Строка(ТипРеквизита), "Дата") <> 0 Тогда
		Элемент.СписокВыбора.Добавить(Равно);
		Элемент.СписокВыбора.Добавить(НеРавно);
		Элемент.СписокВыбора.Добавить(Больше);
		Элемент.СписокВыбора.Добавить(Меньше);
		Элемент.СписокВыбора.Добавить(БольшеИлиРавно);
		Элемент.СписокВыбора.Добавить(МеньшеИлиРавно);
		Элемент.СписокВыбора.Добавить(Заполнено);
		Элемент.СписокВыбора.Добавить(НеЗаполнено);
	ИначеЕсли СтрНайти(Строка(ТипРеквизита), "Число") <> 0 Тогда
		Элемент.СписокВыбора.Добавить(Равно);
		Элемент.СписокВыбора.Добавить(НеРавно);
		Элемент.СписокВыбора.Добавить(Больше);
		Элемент.СписокВыбора.Добавить(Меньше);
		Элемент.СписокВыбора.Добавить(БольшеИлиРавно);
		Элемент.СписокВыбора.Добавить(МеньшеИлиРавно);
	Иначе
		Элемент.СписокВыбора.Добавить(Равно);
		Элемент.СписокВыбора.Добавить(НеРавно);
		Элемент.СписокВыбора.Добавить(Заполнено);
		Элемент.СписокВыбора.Добавить(НеЗаполнено);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОповещенийПолучательВариантЗаполненияПриИзменении(Элемент)
	
	Если Элементы.ПолучателиОповещений.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПолучателиОповещений.ТекущиеДанные.ПолучательЗначение = "";	
	Элементы.ПолучателиОповещенийПолучательЗначение.СписокВыбора.Очистить();
	Если НЕ ПустаяСтрока(Элементы.ПолучателиОповещений.ТекущиеДанные.ПолучательВариантЗаполнения) Тогда
		ВариантЗаполнения = Элементы.ПолучателиОповещений.ТекущиеДанные.ПолучательВариантЗаполнения;		
		ОписаниеРеквизита = ОписаниеРеквизитаПоИмени("Получатель");
		Если ОписаниеРеквизита <> Неопределено Тогда
			Если ВариантЗаполнения = "Указанный" Тогда
				Элементы.ПолучателиОповещенийПолучательЗначение.ОграничениеТипа = ОписаниеРеквизита.ТипЗначения;
			Иначе
				Элементы.ПолучателиОповещенийПолучательЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");			
				Для Каждого ЭлСписка Из ОписаниеРеквизита.СписокРеквизитовОснования Цикл
					Элементы.ПолучателиОповещенийПолучательЗначение.СписокВыбора.Добавить(ЭлСписка.Значение, 
						ЭлСписка.Представление);
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОповещенийПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ПолучателиОповещений.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеРеквизита = ОписаниеРеквизитаПоИмени("Получатель");
	Если ОписаниеРеквизита = Неопределено ИЛИ ОписаниеРеквизита.СписокРеквизитовОснования.Количество() = 0 Тогда		
		Элементы.ПолучателиОповещенийПолучательВариантЗаполнения.СписокВыбора.Очистить();
		Элементы.ПолучателиОповещенийПолучательВариантЗаполнения.СписокВыбора.Добавить("Указанный", 
			НСтр("ru = 'Указанный'"));		
	КонецЕсли;			
	
	Элементы.ПолучателиОповещенийПолучательЗначение.СписокВыбора.Очистить();
	Если НЕ ПустаяСтрока(Элементы.ПолучателиОповещений.ТекущиеДанные.ПолучательВариантЗаполнения) Тогда		
		ВариантЗаполнения = Элементы.ПолучателиОповещений.ТекущиеДанные.ПолучательВариантЗаполнения;				
		Если ОписаниеРеквизита <> Неопределено Тогда
			Если ВариантЗаполнения = "Указанный" Тогда
				Элементы.ПолучателиОповещенийПолучательЗначение.ОграничениеТипа = ОписаниеРеквизита.ТипЗначения;
				Элементы.ПолучателиОповещенийПолучательЗначение.КнопкаВыпадающегоСписка = Ложь;
			Иначе
				Элементы.ПолучателиОповещенийПолучательЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");							
				Для Каждого ЭлСписка Из ОписаниеРеквизита.СписокРеквизитовОснования Цикл
					Элементы.ПолучателиОповещенийПолучательЗначение.СписокВыбора.Добавить(ЭлСписка.Значение, 
						ЭлСписка.Представление);
				КонецЦикла;
				Элементы.ПолучателиОповещенийПолучательЗначение.КнопкаВыпадающегоСписка = Истина;
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;		
	
	Если Объект.ТипДействия = ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.ОповещениеПоEmail") Тогда 
		ОписаниеРеквизита = ОписаниеРеквизитаПоИмени("УчетнаяЗапись");
		Если ОписаниеРеквизита = Неопределено ИЛИ ОписаниеРеквизита.СписокРеквизитовОснования.Количество() = 0 Тогда			
			Элементы.ПолучателиОповещенийУчетнаяЗаписьВариантЗаполнения.СписокВыбора.Очистить();
			Элементы.ПолучателиОповещенийУчетнаяЗаписьВариантЗаполнения.СписокВыбора.Добавить("Указанный", 
				НСтр("ru = 'Указанный'"));			
		КонецЕсли;
		
		Элементы.ПолучателиОповещенийУчетнаяЗаписьЗначение.СписокВыбора.Очистить();
		Если Не ПустаяСтрока(Элементы.ПолучателиОповещений.ТекущиеДанные.УчетнаяЗаписьВариантЗаполнения) Тогда					
			ВариантЗаполнения = Элементы.ПолучателиОповещений.ТекущиеДанные.УчетнаяЗаписьВариантЗаполнения;					
			Если ОписаниеРеквизита = Неопределено Тогда
				Элементы.ПолучателиОповещенийУчетнаяЗаписьЗначение.ОграничениеТипа = 
					Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты");
			Иначе	
				Если ВариантЗаполнения = "Указанный" Тогда
					Элементы.ПолучателиОповещенийУчетнаяЗаписьЗначение.ОграничениеТипа = ОписаниеРеквизита.ТипЗначения;
				Иначе
					Элементы.ПолучателиОповещенийУчетнаяЗаписьЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");			
					Для Каждого ЭлСписка Из ОписаниеРеквизита.СписокРеквизитовОснования Цикл
						Элементы.ПолучателиОповещенийУчетнаяЗаписьЗначение.СписокВыбора.Добавить(ЭлСписка.Значение, 
							ЭлСписка.Представление);
					КонецЦикла;
					Элементы.ПолучателиОповещенийУчетнаяЗаписьЗначение.КнопкаВыпадающегоСписка = Истина;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;	
		
	Если Объект.ТипДействия = ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.СоздатьНапоминание") Тогда 
		ОписаниеРеквизита = ОписаниеРеквизитаПоИмени("ВремяСобытия");
		Если ОписаниеРеквизита = Неопределено ИЛИ ОписаниеРеквизита.СписокРеквизитовОснования.Количество() = 0 Тогда			
			Элементы.ПолучателиОповещенийНапоминаниеВариантЗаполнения.СписокВыбора.Очистить();
			Элементы.ПолучателиОповещенийНапоминаниеВариантЗаполнения.СписокВыбора.Добавить("Указанный", 
				НСтр("ru = 'Указанный'"));
		КонецЕсли;		
		
		Элементы.ПолучателиОповещенийНапоминаниеЗначение.СписокВыбора.Очистить();
		Если Не ПустаяСтрока(Элементы.ПолучателиОповещений.ТекущиеДанные.НапоминаниеВариантЗаполнения) Тогда
			ВариантЗаполнения = Элементы.ПолучателиОповещений.ТекущиеДанные.НапоминаниеВариантЗаполнения;					
			Если ОписаниеРеквизита = Неопределено Тогда
				Элементы.ПолучателиОповещенийУчетнаяЗаписьЗначение.ОграничениеТипа = Новый ОписаниеТипов("Дата");
			Иначе	
				Если ВариантЗаполнения = "Указанный" Тогда
					Элементы.ПолучателиОповещенийНапоминаниеЗначение.ОграничениеТипа = ОписаниеРеквизита.ТипЗначения;				
				Иначе
					Элементы.ПолучателиОповещенийНапоминаниеЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");			
					ЗаполнитьСписокСтандартныхИнтервалов(Элементы.ПолучателиОповещенийНапоминаниеЗначение.СписокВыбора);
					Элементы.ПолучателиОповещенийНапоминаниеЗначение.КнопкаВыпадающегоСписка = Истина;
				КонецЕсли;	
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	
	#Если ВебКлиент Тогда
		Элементы.ТипДействия.РежимВыбораИзСписка = Истина;				
	#Иначе
		СтандартнаяОбработка = Ложь;
	#КонецЕсли
	
	ДанныеВыбора = ТипДействияЗаполнитьСписокВыбора();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОповещенийУчетнаяЗаписьВариантЗаполненияПриИзменении(Элемент)
	
	Если Элементы.ПолучателиОповещений.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПолучателиОповещений.ТекущиеДанные.УчетнаяЗаписьЗначение = "";		
	
	Если Не ПустаяСтрока(Элементы.ПолучателиОповещений.ТекущиеДанные.УчетнаяЗаписьВариантЗаполнения) Тогда		
		ВариантЗаполнения = Элементы.ПолучателиОповещений.ТекущиеДанные.УчетнаяЗаписьВариантЗаполнения;		
		ОписаниеРеквизита = ОписаниеРеквизитаПоИмени("УчетнаяЗапись");
		Если ОписаниеРеквизита = Неопределено Тогда
			Элементы.ПолучателиОповещенийУчетнаяЗаписьЗначение.ОграничениеТипа = 
				Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты");
		Иначе	
			Если ВариантЗаполнения = "Указанный" Тогда
				Элементы.ПолучателиОповещенийУчетнаяЗаписьЗначение.ОграничениеТипа = ОписаниеРеквизита.ТипЗначения;
			Иначе
				Элементы.ПолучателиОповещенийУчетнаяЗаписьЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");			
				Для Каждого ЭлСписка Из ОписаниеРеквизита.СписокРеквизитовОснования Цикл
					Элементы.ПолучателиОповещенийУчетнаяЗаписьЗначение.СписокВыбора.Добавить(ЭлСписка.Значение, 
						ЭлСписка.Представление);
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОповещенийНапоминаниеВариантЗаполненияПриИзменении(Элемент)
	
	Если Элементы.ПолучателиОповещений.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПолучателиОповещений.ТекущиеДанные.НапоминаниеЗначение = "";	
	Элементы.ПолучателиОповещенийНапоминаниеЗначение.СписокВыбора.Очистить();
	Если Не ПустаяСтрока(Элементы.ПолучателиОповещений.ТекущиеДанные.НапоминаниеВариантЗаполнения) Тогда
		ВариантЗаполнения = Элементы.ПолучателиОповещений.ТекущиеДанные.НапоминаниеВариантЗаполнения;		
		ОписаниеРеквизита = ОписаниеРеквизитаПоИмени("ВремяСобытия");
		Если ОписаниеРеквизита = Неопределено Тогда
			Элементы.ПолучателиОповещенийУчетнаяЗаписьЗначение.ОграничениеТипа = Новый ОписаниеТипов("Дата");
		Иначе	
			Если ВариантЗаполнения = "Указанный" Тогда
				Элементы.ПолучателиОповещенийНапоминаниеЗначение.ОграничениеТипа = ОписаниеРеквизита.ТипЗначения;				
			Иначе
				Элементы.ПолучателиОповещенийНапоминаниеЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");			
				ЗаполнитьСписокСтандартныхИнтервалов(Элементы.ПолучателиОповещенийНапоминаниеЗначение.СписокВыбора);
				Элементы.ПолучателиОповещенийНапоминаниеЗначение.КнопкаВыпадающегоСписка = Истина;
			КонецЕсли;	
		КонецЕсли;
		
	 КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОповещенийПриИзменении(Элемент)
	
	Объект.Наименование = АвтоматическоеНаименование(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОповещенийПолучательЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПолучателиОповещений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ПолучательВариантЗаполнения) Тогда		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указан ""Вариант заполнения"" для получателя.'"), ,
			"Объект.ПолучателиОповещений[" + Элементы.ПолучателиОповещений.ТекущаяСтрока 
				+ "].ПолучательВариантЗаполнения");
		СтандартнаяОбработка = Ложь;
		Возврат;  
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОповещенийУчетнаяЗаписьЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПолучателиОповещений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.УчетнаяЗаписьВариантЗаполнения) Тогда		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указан ""Вариант заполнения"" для учетной записи эл.почты.'"), ,
			"Объект.ПолучателиОповещений[" + Элементы.ПолучателиОповещений.ТекущаяСтрока 
				+ "].УчетнаяЗаписьВариантЗаполнения");
		СтандартнаяОбработка = Ложь;
		Возврат;  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОповещенийНапоминаниеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПолучателиОповещений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.НапоминаниеВариантЗаполнения) Тогда		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указан ""Вариант заполнения"" для напоминания.'"), ,
			"Объект.ПолучателиОповещений[" + Элементы.ПолучателиОповещений.ТекущаяСтрока 
				+ "].НапоминаниеВариантЗаполнения");
		СтандартнаяОбработка = Ложь;
		Возврат;  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрочностьПриИзменении(Элемент)
	
	ОбновитьСрочностьВлияние();
	
КонецПроцедуры

&НаКлиенте
Процедура ВлияниеПриИзменении(Элемент)
	
	ОбновитьСрочностьВлияние();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") 			
			И ЭтоТипОрганизация(ВыбранноеЗначение) Тогда
			СтандартнаяОбработка = Ложь;
					
			ОткрытьФормуВыбораОрганизации("Значение");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовДереваКомпетенции

&НаКлиенте
Процедура КомпетенцииФлагПриИзменении(Элемент)
    
	ТекущиеДанные = Элементы.Компетенции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Флаг = 2 Тогда
		ТекущиеДанные.Флаг = 0;
	КонецЕсли;
	УправлениеITОтделом8УФКлиент.ПометитьВложенныеЭлементы(ТекущиеДанные);
	УправлениеITОтделом8УФКлиент.ПометитьЭлементыРодителей(ТекущиеДанные.ПолучитьРодителя());
    
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОповещений

&НаКлиенте
Процедура ОбязательныеРеквизитыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ОбязательныеРеквизиты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Элементы.ОбязательныеРеквизиты.ТекущиеДанные.Реквизит) Тогда
		
		ИмяРеквизита	= Элементы.ОбязательныеРеквизиты.ТекущиеДанные.Реквизит;		
		ТипРеквизита	= ПравилаСобытийСервер.ПолучитьТипЗначенияРеквизитаОбъекта(Объект.ПолноеИмяОснования, 
			ИмяРеквизита);
		Элементы.ОбязательныеРеквизитыРеквизит.ОграничениеТипа = ТипРеквизита;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыМетрик

&НаКлиенте
Процедура МетрикиФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	П = Новый Структура;
	П.Вставить("Формула", ЭтотОбъект.Формула);
	ОткрытьФорму("Справочник.ДействияПравилСобытий.Форма.ВводФормулы", П, Элемент,,,,
		Новый ОписаниеОповещения("МетрикиФормулаНачалоВыбораЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура МетрикиФормулаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда		
		ЗаписатьИзменениеРеквизитаМетрики("Формула", Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МетрикиИзмерение1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура;
	Структура.Вставить("Формула", ЭтотОбъект.Измерение1);
	ОткрытьФорму("Справочник.ДействияПравилСобытий.Форма.ВводФормулы", Структура, Элемент,,,,
		Новый ОписаниеОповещения("МетрикиИзмерение1НачалоВыбораЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура МетрикиИзмерение1НачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаписатьИзменениеРеквизитаМетрики("Измерение1", Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МетрикиИзмерение2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура;
	Структура.Вставить("Формула", ЭтотОбъект.Измерение2);
	ОткрытьФорму("Справочник.ДействияПравилСобытий.Форма.ВводФормулы", Структура, Элемент,,,,
		Новый ОписаниеОповещения("МетрикиИзмерение2НачалоВыбораЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура МетрикиИзмерение2НачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаписатьИзменениеРеквизитаМетрики("Измерение2", Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МетрикиИзмерение3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура;
	Структура.Вставить("Формула", ЭтотОбъект.Измерение3);
	ОткрытьФорму("Справочник.ДействияПравилСобытий.Форма.ВводФормулы", Структура, Элемент,,,,
		Новый ОписаниеОповещения("МетрикиИзмерение3НачалоВыбораЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура МетрикиИзмерение3НачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаписатьИзменениеРеквизитаМетрики("Измерение3", Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МетрикиИзмерение4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура;
	Структура.Вставить("Формула", ЭтотОбъект.Измерение4);
	ОткрытьФорму("Справочник.ДействияПравилСобытий.Форма.ВводФормулы", Структура, Элемент,,,,
		Новый ОписаниеОповещения("МетрикиИзмерение4НачалоВыбораЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура МетрикиИзмерение4НачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаписатьИзменениеРеквизитаМетрики("Измерение4", Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МетрикиИзмерение5НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура;
	Структура.Вставить("Формула", ЭтотОбъект.Измерение5);
	ОткрытьФорму("Справочник.ДействияПравилСобытий.Форма.ВводФормулы",Структура, Элемент,,,,
		Новый ОписаниеОповещения("МетрикиИзмерение5НачалоВыбораЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура МетрикиИзмерение5НачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаписатьИзменениеРеквизитаМетрики("Измерение5", Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МетрикиПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Структура = Новый Структура;
	Структура.Вставить("Формула", ЭтотОбъект.ПериодРегистрации);
	ОткрытьФорму("Справочник.ДействияПравилСобытий.Форма.ВводФормулы", Структура, Элемент,,,,
		Новый ОписаниеОповещения("МетрикиПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура МетрикиПериодРегистрацииНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаписатьИзменениеРеквизитаМетрики("ПериодРегистрации", Результат);
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура СписокМетрикПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокМетрик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Метрика 	= ТекущиеДанные.Значение;
	
	Если Не ЗначениеЗаполнено(Метрика) Тогда
		Возврат;
	КонецЕсли;	
	
	Если Метрика = ТекущаяМетрика Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы.РасчетМетрикГруппа1.Видимость	= Ложь;
	Элементы.РасчетМетрикГруппа2.Видимость 	= Ложь;
	Элементы.РасчетМетрикГруппа3.Видимость 	= Ложь;
	Элементы.РасчетМетрикГруппа4.Видимость 	= Ложь;
	Элементы.РасчетМетрикГруппа5.Видимость 	= Ложь;
	
	Если ЗначениеЗаполнено(Метрика) Тогда
		ТекущаяМетрика	= Метрика;
		ОтборСтрок 		= Новый Структура("Метрика", Метрика);
		МассивСтрок 	= Объект.РасчетМетрик.НайтиСтроки(ОтборСтрок);
		ТекущаяСтрока 	= Неопределено;		
		Если МассивСтрок.Количество() > 0 Тогда
			ТекущаяСтрока  = МассивСтрок[0];
			ЭтотОбъект.Формула 	= ТекущаяСтрока.Формула;
			ЭтотОбъект.ПланФакт	= ТекущаяСтрока.ПланФакт;
			ЭтотОбъект.ПериодРегистрации = ТекущаяСтрока.ПериодРегистрации;			
		КонецЕсли;
		
		Массив = МетрикиВызовСервера.ЗначенияИзмеренийПоУмолчаниюДляМетрики(Метрика);
		Для Индекс = 1 По  Массив.Количество() Цикл
			
			Строки 							= Массив.Получить(Индекс - 1);			
			ИмяГруппы						= "РасчетМетрикГруппа" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
			ИмяИзмерения					= "Измерение" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
			Элементы[ИмяГруппы].Видимость 	= Истина;
			Элементы[ИмяИзмерения].Заголовок= ?(НЕ ПустаяСтрока(Строки.Представление), Строки.Представление, 
				Строка(Строки.ТипИзмерения));
			Элементы[ИмяИзмерения].АвтоОтметкаНезаполненного = Строки.Обязательное;
			Если ТекущаяСтрока <> Неопределено Тогда
				ЭтотОбъект[ИмяИзмерения] = ТекущаяСтрока[ИмяИзмерения];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМетрикЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если СписокМетрик.НайтиПоЗначению(ВыбранноеЗначение) <> Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Добавляемая метрика (%1) уже присутствует в списке'"), ВыбранноеЗначение),
					ВыбранноеЗначение, "СписокМетрикЗначение", "СписокМетрик");
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;	
		
		НоваяСтрока = Объект.РасчетМетрик.Добавить();
		НоваяСтрока.Метрика  		 = ВыбранноеЗначение;
		НоваяСтрока.ПланФакт 		 = ПредопределенноеЗначение("Перечисление.ПланФакт.Факт");
		ЭтотОбъект.ПланФакт			 = НоваяСтрока.ПланФакт;
		ЭтотОбъект.Формула	 		 = "";
		ЭтотОбъект.ПериодРегистрации = "";
		ЭтотОбъект.Измерение1		 = "";
		ЭтотОбъект.Измерение2		 = "";
		ЭтотОбъект.Измерение3		 = "";
		ЭтотОбъект.Измерение4		 = "";
		ЭтотОбъект.Измерение5		 = "";
		
		Модифицированность   = Истина;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура МетрикиПланФактПриИзменении(Элемент)
	
	ЗаписатьИзменениеРеквизитаМетрики("ПланФакт", ЭтотОбъект.ПланФакт);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменениеРеквизитаМетрики(Знач ИмяРеквизита, Знач Результат)
	
	ЭтотОбъект[ИмяРеквизита] = Результат;
	
	Если ЗначениеЗаполнено(ТекущаяМетрика) Тогда
		ОтборСтрок  = Новый Структура("Метрика", ТекущаяМетрика);
		МассивСтрок = Объект.РасчетМетрик.НайтиСтроки(ОтборСтрок);
		
		Если МассивСтрок.Количество() > 0 Тогда
			ТекущаяСтрока = МассивСтрок[0];
		Иначе
			ТекущаяСтрока = Объект.РасчетМетрик.Добавить();
		КонецЕсли;
		
		ТекущаяСтрока[ИмяРеквизита] = Результат;		
		Модифицированность 			= Истина;		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокМетрикЗначениеПриИзменении(Элемент)
	
	СписокМетрикПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМетрикПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СписокМетрик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Метрика = ТекущиеДанные.Значение;
	Если ЗначениеЗаполнено(Метрика) Тогда
		ОтборСтрок  = Новый Структура("Метрика", Метрика);
		МассивСтрок = Объект.РасчетМетрик.НайтиСтроки(ОтборСтрок);
		
		Для Каждого Строка Из МассивСтрок Цикл
			Объект.РасчетМетрик.Удалить(Строка);
		КонецЦикла;	
		
	КонецЕсли;	
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриоритеты

&НаКлиенте
Процедура ПриоритетЗагрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетЗагрузкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетЗагрузкиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Проверить(Команда)
	
	ПроверитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьВидимостьДоступность()
	
	Если ЗначениеЗаполнено(Объект.ТипДействия) Тогда	
		ИндексТипаТипУсловия = Перечисления.ТипДействийПравилСобытий.Индекс(Объект.ТипДействия);
		ИмяТипУсловия 		 = Метаданные.Перечисления.ТипДействийПравилСобытий.ЗначенияПеречисления[
			ИндексТипаТипУсловия].Имя;			 
	Иначе
		ИмяТипУсловия = "Пусто";
	КонецЕсли;
	
	Если Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ПроизвольныйАлгоритм 
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.УстановкаРеквизитовОбъекта
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.СоздатьДело
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.АвтоназначениеИсполнителя
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.СоздатьЗаданиеИлиКомментарийЗадания
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.РасчетМетрик
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ПроверкаОбязательныхРеквизитов
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ВыполнениеОбработки Тогда
		Элементы.ВидыДействий.ТекущаяСтраница 	= Элементы["Действия" + ИмяТипУсловия];
	Иначе	
		Элементы.ВидыДействий.ТекущаяСтраница 	= Элементы.ВидыДействий.ПодчиненныеЭлементы.ДействияОповещение;
	КонецЕсли;
	
	Элементы.ПредставлениеОснования.Видимость	= ЗначениеЗаполнено(Объект.ПолноеИмяОснования);
		
	Если Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail Тогда
		Элементы.ПолучателиОповещенийШаблонСообщения.Видимость  = Истина;
		Элементы.ПолучателиОповещенийШаблонОформления.Видимость = Истина;
		Элементы.УчетнаяЗаписьЭлПочты.Видимость 			    = Истина;
		Элементы.Напоминание.Видимость 							= Ложь;	
		Элементы.ПолучателиОповещенийTelegramБот.Видимость 		= Ложь;	
		
	ИначеЕсли Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоSMS
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеTelegram Тогда
		Элементы.ПолучателиОповещенийШаблонСообщения.Видимость  = Истина;
		Элементы.ПолучателиОповещенийШаблонОформления.Видимость = Ложь;
		Элементы.УчетнаяЗаписьЭлПочты.Видимость 				= Ложь;
		Элементы.Напоминание.Видимость 							= Ложь;
		Элементы.ПолучателиОповещенийTelegramБот.Видимость 		= 
			(Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеTelegram);
		
	ИначеЕсли Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.СоздатьНапоминание Тогда
		Элементы.Напоминание.Видимость 							= Истина;
		Элементы.ПолучателиОповещенийШаблонСообщения.Видимость  = Ложь;
		Элементы.ПолучателиОповещенийШаблонОформления.Видимость = Ложь;
		Элементы.УчетнаяЗаписьЭлПочты.Видимость 				= Ложь;
		Элементы.ПолучателиОповещенийTelegramБот.Видимость 		= Ложь;	
	КонецЕсли;	
	
	Элементы.ТипДействия.Доступность = Объект.ТипДействия <> Перечисления.ТипДействийПравилСобытий.ПроизвольныйАлгоритм 
		ИЛИ НЕ ПустаяСтрока(ПредставлениеОснования);
	
КонецПроцедуры

// Процедура - Заполнить правило по умолчанию при создании правила.
//
&НаСервере
Процедура ЗаполнитьПравилоПоУмолчанию()
	
	Макет = Справочники.ДействияПравилСобытий.ПолучитьМакет("КодДействияПоУмолчанию");
	Объект.КодДействия = Макет.ПолучитьТекст();
	Объект.ТипДействия = ?(ПустаяСтрока(Объект.ПолноеИмяОснования), 
		Перечисления.ТипДействийПравилСобытий.ПроизвольныйАлгоритм, 
		Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail);
	ТипДействия = Объект.ТипДействия;
	ТипДействияПриИзмененииНаСервере();
	Если Автонаименование Тогда
		Объект.Наименование = АвтоматическоеНаименование(ЭтотОбъект);
	КонецЕсли;
	Объект.ДелаАнализТемы 	= Истина;
	Объект.ДелаПользователь = Пользователи.ТекущийПользователь();
	
	Объект.Срочность 		= Перечисления.Срочность.Средняя;
	Объект.Влияние 			= Перечисления.Влияние.Среднее;
	Объект.Приоритет 		= Перечисления.ПриоритетЗадания.Средний;
	Объект.ТипПроцесса		= Справочники.ТипыПроцессов.Инцидент;
	Объект.Процесс			= Справочники.Процессы.Обращение;	
	
	Объект.СоздаватьИнициатораСТипомЕслиОнНеНайден = "Сотрудники";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АвтоматическоеНаименование(Форма)
	
	Объект = Форма.Объект;
	Если (Объект.ТипДействия = ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.ОповещениеПоEmail")
		ИЛИ Объект.ТипДействия = ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.ОповещениеПоSMS")
		ИЛИ Объект.ТипДействия = ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.ОповещениеTelegram")
		ИЛИ Объект.ТипДействия = ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.СоздатьНапоминание"))
		И Объект.ПолучателиОповещений.Количество() > 0 Тогда
			СтрокаПолучатели = "";
			Для Каждого СтрПолучатели Из Объект.ПолучателиОповещений Цикл
				СтрокаПолучатели = СтрокаПолучатели + СтрПолучатели.ПолучательЗначение + ", ";
			КонецЦикла;
			СтрокаПолучатели = СокрЛП(СтрокаПолучатели);
			СтрокаПолучатели = СРЕД(СтрокаПолучатели, 1, СтрДлина(СтрокаПолучатели) - 1);
			Если НЕ ПустаяСтрока(Форма.ПредставлениеОснования) Тогда
				Возврат СтрШаблон(НСтр("ru='%1 (%2, %3)'"), Объект.ТипДействия, Форма.ПредставлениеОснования, 
					СтрокаПолучатели);
			Иначе
				Возврат СтрШаблон(НСтр("ru='%1 (%2)'"), Объект.ТипДействия, СтрокаПолучатели);
			КонецЕсли;	
	Иначе		
		Если НЕ ПустаяСтрока(Форма.ПредставлениеОснования) Тогда
			Возврат СтрШаблон(НСтр("ru='%1 (%2)'"), Объект.ТипДействия, Форма.ПредставлениеОснования);
		Иначе
			Возврат СтрШаблон(НСтр("ru='%1'"), Объект.ТипДействия);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораЗначенийРеквизита()
	
	// Заполняем список доступных реквизитов.
	Элементы.ЗначенияРеквизит.СписокВыбора.Очистить();
	Элементы.ОбязательныеРеквизитыРеквизит.СписокВыбора.Очистить();
	Элементы.ПолучателиОповещенийПолучательВариантЗаполнения.СписокВыбора.Очистить();
	Элементы.ПолучателиОповещенийУчетнаяЗаписьВариантЗаполнения.СписокВыбора.Очистить();
	Элементы.ПолучателиОповещенийНапоминаниеВариантЗаполнения.СписокВыбора.Очистить();
	
	Реквизиты = ПравилаСобытийСервер.ПолучитьСписокЗначенийДляРеквизитовОбъекта(Объект.ПолноеИмяОснования);
	Для Каждого Реквизит Из Реквизиты Цикл		
		Элементы.ЗначенияРеквизит.СписокВыбора.Добавить(Реквизит.Значение, Реквизит.Представление);	
		Элементы.ОбязательныеРеквизитыРеквизит.СписокВыбора.Добавить(Реквизит.Значение, Реквизит.Представление);	
	КонецЦикла;
	
	Элементы.ПолучателиОповещенийПолучательВариантЗаполнения.СписокВыбора.Добавить("Реквизит основания",   
		НСтр("ru = 'Реквизит основания'"));
	Элементы.ПолучателиОповещенийПолучательВариантЗаполнения.СписокВыбора.Добавить("Указанный", 		   
		НСтр("ru = 'Указанный'"));
	Элементы.ПолучателиОповещенийУчетнаяЗаписьВариантЗаполнения.СписокВыбора.Добавить("Реквизит основания",
		НСтр("ru = 'Реквизит основания'"));
	Элементы.ПолучателиОповещенийУчетнаяЗаписьВариантЗаполнения.СписокВыбора.Добавить("Указанный", 		   
		НСтр("ru = 'Указанный'"));
	Элементы.ПолучателиОповещенийНапоминаниеВариантЗаполнения.СписокВыбора.Добавить("Смещение даты",	   
		НСтр("ru = 'Смещение даты'"));
	Элементы.ПолучателиОповещенийНапоминаниеВариантЗаполнения.СписокВыбора.Добавить("Указанный", 		   
		НСтр("ru = 'Указанный'"));

КонецПроцедуры

&НаСервере
Процедура ТипДействияПриИзмененииНаСервере()
	
	Если Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеTelegram
		ИЛИ Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоSMS Тогда
		ЗаполнитьТаблицуРеквизитовОповещениеПоEmailSMS();		
	ИначеЕсли Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.СоздатьНапоминание Тогда
		ЗаполнитьТаблицуРеквизитовСоздатьНапоминание();
	КонецЕсли;
	
	УстановитьПараметрыВыбораШаблона();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораШаблона()
	
	ПараметрыВыбораШаблона = Новый Массив;
	
	Если Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail Тогда
		ПараметрыВыбораШаблона.Добавить(Новый ПараметрВыбора("Отбор.ПредназначенДляЭлектронныхПисем", Истина));
	ИначеЕсли Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоSMS Тогда
		ПараметрыВыбораШаблона.Добавить(Новый ПараметрВыбора("Отбор.ПредназначенДляSMS", Истина));
	ИначеЕсли Объект.ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеTelegram Тогда		
		ПараметрыВыбораШаблона.Добавить( Новый ПараметрВыбора("Отбор.ПредназначенДляTelegram", Истина));
	КонецЕсли;
	
	Элементы.ПолучателиОповещенийШаблонСообщения.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораШаблона);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокСтандартныхИнтервалов(СписокВыбора)
	
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("Дата срабатывания правила",		НСтр("ru='Дата срабатывания правила'"));
	СписокВыбора.Добавить("Через час",	 НСтр("ru='Через час'"));
	СписокВыбора.Добавить("Через день",	 НСтр("ru='Через день'"));
	СписокВыбора.Добавить("Через неделю",НСтр("ru='Через неделю'"));
	СписокВыбора.Добавить("Через месяц", НСтр("ru='Через месяц'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРеквизитовОповещениеПоEmailSMS()
	
	ТаблицаРеквизитов.Очистить();
	Если ЗначениеЗаполнено(Объект.ПолноеИмяОснования) Тогда
		тТаблицаРеквизитов = РеквизитФормыВЗначение("ТаблицаРеквизитов");
		СЛС.ЗаполнитьСписокРеквизитовДляДействияПравила(тТаблицаРеквизитов, Объект.ТипДействия, 
			Объект.ПолноеИмяОснования);		
		ЗначениеВРеквизитФормы(тТаблицаРеквизитов, "ТаблицаРеквизитов");
		ЗаполнитьСписокРеквизитовОснования();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРеквизитовСоздатьНапоминание()
	
	ТаблицаРеквизитов.Очистить();
	Если ЗначениеЗаполнено(Объект.ПолноеИмяОснования) Тогда		
		тТаблицаРеквизитов = РеквизитФормыВЗначение("ТаблицаРеквизитов");
		
		НовоеОписание = тТаблицаРеквизитов.Добавить();
		НовоеОписание.РеквизитИмя				= "Получатель";
		НовоеОписание.РеквизитЗаголовок 		= НСтр("ru='Кому напомнить'");
		НовоеОписание.ВидЗаполнения				= "Реквизит основания";
		НовоеОписание.ТипЗначения				= 
			Метаданные.РегистрыСведений.НапоминанияПользователя.Измерения.Пользователь.Тип;
		НовоеОписание.ОбязательноеЗаполнение	= Истина;
		
		НовоеОписание = тТаблицаРеквизитов.Добавить();
		НовоеОписание.РеквизитИмя				= "ВремяСобытия";
		НовоеОписание.РеквизитЗаголовок			= НСтр("ru='Дата напоминания'");
		НовоеОписание.ВидЗаполнения				= "Смещение даты";
		НовоеОписание.ТипЗначения				= ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
		НовоеОписание.ОбязательноеЗаполнение	= Истина;
		
		ЗначениеВРеквизитФормы(тТаблицаРеквизитов, "ТаблицаРеквизитов");
		ЗаполнитьСписокРеквизитовОснования();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРеквизитовОснования()
	
	Если Не ЗначениеЗаполнено(Объект.ПолноеИмяОснования) Тогда
		Возврат;
	КонецЕсли;
	
	СЛС.ЗаполнитьСписокРеквизитовОснованияДляДействияПравила(Объект.ПолноеИмяОснования, ТаблицаРеквизитов);

КонецПроцедуры	

&НаКлиенте
Функция ТипДействияЗаполнитьСписокВыбора()
	
	СписокВыбора = Новый СписокЗначений;
	
	Если Объект.ПолноеИмяОснования = "Документ.Задание" Тогда
		СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.АвтоназначениеИсполнителя"),
			НСтр("ru = 'Назначение исполнителя'"));
	КонецЕсли;
	
	// Оповещения
	СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.ОповещениеПоEmail"),
		НСтр("ru = 'Оповещение по email'"));
        
    Если УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИспользоватьTelegram") = Истина Тогда
    	СписокВыбора.Добавить(
    		ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.ОповещениеTelegram"),
    		НСтр("ru = 'Оповещение Telegram'"));    	
    КонецЕсли; 
                                             
	СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.ОповещениеПоSMS"),
		НСтр("ru = 'Оповещение по SMS'"));		
		
	СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.ПроверкаОбязательныхРеквизитов"),
		НСтр("ru = 'Проверка обязательных реквизитов'"));
		
	СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.ПроизвольныйАлгоритм"),
		НСтр("ru = 'Произвольный алгоритм'"));
	
	Если МетрикиВызовСервера.ИспользоватьМетрики() Тогда
		СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.РасчетМетрик"),
			НСтр("ru = 'Расчет метрик'"));
	КонецЕсли;
	
	Если Объект.ПолноеИмяОснования = "Документ.ЭлектронноеПисьмоВходящее" Тогда
		СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.СоздатьДело"),
			НСтр("ru = 'Создать дело'"));
		
		СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.СоздатьЗаданиеИлиКомментарийЗадания"),
			НСтр("ru = 'Создать задание или комментарий задания'"));
	КонецЕсли;
			
	СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.СоздатьНапоминание"),
		НСтр("ru = 'Создать напоминание'"));
	
	СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.УстановкаРеквизитовОбъекта"),
		НСтр("ru = 'Установка реквизитов объекта'"));
		
	СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ТипДействийПравилСобытий.ВыполнениеОбработки"),
		НСтр("ru = 'Выполнение обработки'"));
		
	СписокВыбора.СортироватьПоПредставлению();
		
	Возврат СписокВыбора;
			
КонецФункции

&НаКлиенте
Функция ОписаниеРеквизитаПоИмени(ИмяРеквизита)
	
	Результат = Неопределено;
	Отбор 	  = Новый Структура;
	Отбор.Вставить("РеквизитИмя", ИмяРеквизита);
	МассивРеквизитов = ТаблицаРеквизитов.НайтиСтроки(Отбор);	
	Если МассивРеквизитов.Количество() > 0 Тогда
		Результат = МассивРеквизитов[0];		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокМетрик()
	
	СписокМетрик.Очистить();
	
	ТаблицаМетрик = Объект.РасчетМетрик.Выгрузить();
	ТаблицаМетрик.Свернуть("Метрика",);
	ТаблицаМетрик.Сортировать("Метрика");
	Для Каждого Строки Из ТаблицаМетрик Цикл
		СписокМетрик.Добавить(Строки.Метрика);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСрочностьВлияние()
	
	Объект.Приоритет = ЗаданияСервер.РассчитатьПриоритет(Объект.Влияние, Объект.Срочность);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПриоритетыОпределения()
	
	Элементы.СоздаватьИнициатораСТипомЕслиОнНеНайден.СписокВыбора.Очистить();
	СЗ = ЗаданияСервер.СписокПриоритетовОпределенияКлиентовИИнициаторов(Объект.Ссылка);
	ПриоритетОпределения.Очистить();
	Для Индекс = 0 По СЗ.Количество() - 1 Цикл
		ПриоритетОпределения.Добавить(СЗ[Индекс].Значение, СЗ[Индекс].Представление);
		Элементы.СоздаватьИнициатораСТипомЕслиОнНеНайден.СписокВыбора.Добавить(СЗ[Индекс].Значение, 
			СЗ[Индекс].Представление);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьАвтоназначения()
	
	мПравила = Перечисления.ПравилаАвтоназначенияИсполнителей;
	
	Элементы.Компетенции.Видимость = Объект.АвтоназначениеСУчетомКомпетенций;
	Элементы.АвтоназначениеЗначение.Видимость = 
		Объект.ПравилоАвтоназначенияИсполнителей <> мПравила.ИсполнительСНаименьшейНагрузкой
		И Объект.ПравилоАвтоназначенияИсполнителей <> мПравила.ОтветственныйЗаСервис;
		
	Элементы.АвтоназначениеСУчетомМестоположения.Видимость = 
		Объект.ПравилоАвтоназначенияИсполнителей = мПравила.ИсполнительСНаименьшейНагрузкой
		ИЛИ Объект.ПравилоАвтоназначенияИсполнителей = мПравила.ИсполнительСНаименьшейНагрузкойИзФиксированнойГруппы
		ИЛИ Объект.ПравилоАвтоназначенияИсполнителей = 
			мПравила.ИсполнительСНаименьшейНагрузкойИзФиксированнойЛинииПоддержки;
        
	Элементы.АвтоназначениеСУчетомКомпетенций.Видимость = Элементы.АвтоназначениеСУчетомМестоположения.Видимость;
	Элементы.АвтоназначениеСУчетомГрафиковРабочегоВремени.Видимость = Элементы.АвтоназначениеСУчетомМестоположения.Видимость;
	
	// Подсказка.
	Текст = "";
	Если Объект.АвтоназначениеСУчетомМестоположения И Элементы.АвтоназначениеСУчетомМестоположения.Видимость Тогда
		Текст = Текст + Символы.ПС
			+ НСтр("ru = 'В задании/проблеме будет найдено местоположение инициатора (при его заполнении) и среди них будут выбраны подходящие пользователи.'");
	КонецЕсли;
	Если Объект.АвтоназначениеСУчетомКомпетенций И Элементы.АвтоназначениеСУчетомКомпетенций.Видимость Тогда
		Текст = Текст + Символы.ПС
			+ НСтр("ru = 'В задании/проблеме из сервиса будут получены компетенции, которые необходимы для выполнения задания/проблемы.'");
		Стр = "";	
		Для Каждого Строки Из Объект.Компетенции Цикл
			Стр = Стр + ?(ПустаяСтрока(Стр), "", "; ") + Строка(Строки.Компетенция);
		КонецЦикла;		
		Текст = Текст + Символы.ПС + СтрШаблон(НСтр("ru = 'По компетенциям: %1'"), Стр);
	КонецЕсли;
	Если Объект.АвтоназначениеСУчетомГрафиковРабочегоВремени 
		И Элементы.АвтоназначениеСУчетомГрафиковРабочегоВремени.Видимость Тогда
		Текст = Текст + Символы.ПС
			+ НСтр("ru = 'Будут найдены пользователи, которые на данный момент находятся на работе (нет отклонений от графика).'");
	КонецЕсли;	
	
	Если Объект.ПравилоАвтоназначенияИсполнителей = мПравила.ФиксированныйИсполнитель Тогда
		Текст = Текст + Символы.ПС 
            + СтрШаблон(НСтр("ru = 'В качестве исполнителя будет подставлен пользователь «%1»'"), 
				Строка(Объект.АвтоназначениеЗначение));
	ИначеЕсли Объект.ПравилоАвтоназначенияИсполнителей = мПравила.ФиксированнаяГруппаИсполнителей Тогда
		Текст = Текст + Символы.ПС 
            + СтрШаблон(НСтр("ru = 'В качестве исполнителя будет подставлена группа пользователей «%1»'"),
				Строка(Объект.АвтоназначениеЗначение));
	ИначеЕсли Объект.ПравилоАвтоназначенияИсполнителей = мПравила.ИсполнительСНаименьшейНагрузкой Тогда
		Текст = Текст + Символы.ПС 
            + НСтр("ru = 'Будет производен поиск пользователей среди всех пользователей с ролью, в которой указана операция «Участие в автоназначении исполнителей», по следующему принципу:
			|1. У пользователя меньше всего открытых заданий и проблем;
			|2. В периоде от текущего момента до срока решения у пользователя есть рабочее время (с учетом графиков рабочего времени и отклонений от графика).'");
	ИначеЕсли Объект.ПравилоАвтоназначенияИсполнителей = мПравила.ИсполнительСНаименьшейНагрузкойИзФиксированнойГруппы Тогда
		Текст = Текст + Символы.ПС 
            + СтрШаблон(НСтр("ru = 'Будет производен поиск в группе пользователей «%1», среди пользователей с ролью, в которой указана операция «Участие в автоназначении исполнителей», по следующему принципу:
			|1. У пользователя меньше всего открытых заданий и проблем;
			|2. В периоде от текущего момента до срока решения у пользователя есть рабочее время (с учетом графиков рабочего времени и отклонений от графика).'"),
			Строка(Объект.АвтоназначениеЗначение));
	ИначеЕсли Объект.ПравилоАвтоназначенияИсполнителей = мПравила.ИсполнительСНаименьшейНагрузкойИзФиксированнойЛинииПоддержки Тогда
		Текст = Текст + Символы.ПС 
            + СтрШаблон(НСтр("ru = 'Будет производен поиск на линии поддержки: «%1», среди пользователей с ролью, в которой указана операция «Участие в автоназначении исполнителей», по следующему принципу:
			|1. У пользователя меньше всего открытых заданий и проблем;
			|2. В периоде от текущего момента до срока решения у пользователя есть рабочее время (с учетом графиков рабочего времени и отклонений от графика).'"),
			Строка(Объект.АвтоназначениеЗначение));
	ИначеЕсли Объект.ПравилоАвтоназначенияИсполнителей = мПравила.ОтветственныйЗаСервис Тогда
		Текст = Текст + Символы.ПС + НСтр("ru = 'В качестве исполнителя будет подставлен пользователь или группа пользователей, которая указана ответственной за установленный в задании сервис (при его заполнении).'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Текст)
		И Объект.ПравилоАвтоназначенияИсполнителей <> мПравила.ФиксированныйИсполнитель
		И Объект.ПравилоАвтоназначенияИсполнителей <> мПравила.ФиксированнаяГруппаИсполнителей Тогда
		Текст = Текст + Символы.ПС
			+ НСтр("ru = 'Все эти условия накладываются и получаем список пользователей.
                    |В этом списке отбираем пользователя который больше всех подходит по условиям и устанавливаем его исполнителем.'");
	КонецЕсли;
	
	АвтоназначениеТекстПодсказка = Текст;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТипАвтоназначенияЗначения()
	
	Если Объект.ПравилоАвтоназначенияИсполнителей = ПредопределенноеЗначение("Перечисление.ПравилаАвтоназначенияИсполнителей.ФиксированныйИсполнитель")
		И ТипЗнч(Объект.АвтоназначениеЗначение) <> Тип("СправочникСсылка.Пользователи") Тогда
		
		МассивТипов = Новый Массив;
        МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
        Элементы.АвтоназначениеЗначение.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов); 		
		
		Объект.АвтоназначениеЗначение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		
	ИначеЕсли (Объект.ПравилоАвтоназначенияИсполнителей = ПредопределенноеЗначение("Перечисление.ПравилаАвтоназначенияИсполнителей.ФиксированнаяГруппаИсполнителей")
		ИЛИ Объект.ПравилоАвтоназначенияИсполнителей = ПредопределенноеЗначение("Перечисление.ПравилаАвтоназначенияИсполнителей.ИсполнительСНаименьшейНагрузкойИзФиксированнойГруппы"))
		И ТипЗнч(Объект.АвтоназначениеЗначение) <> Тип("СправочникСсылка.ГруппыПользователей") Тогда
		
		МассивТипов = Новый Массив;
        МассивТипов.Добавить(Тип("СправочникСсылка.ГруппыПользователей"));
        Элементы.АвтоназначениеЗначение.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов); 		
		
		Объект.АвтоназначениеЗначение = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ПустаяСсылка");
		
	ИначеЕсли Объект.ПравилоАвтоназначенияИсполнителей = ПредопределенноеЗначение("Перечисление.ПравилаАвтоназначенияИсполнителей.ИсполнительСНаименьшейНагрузкойИзФиксированнойЛинииПоддержки")
		И ТипЗнч(Объект.АвтоназначениеЗначение) <> Тип("СправочникСсылка.ЛинииПоддержки") Тогда
		
		МассивТипов = Новый Массив;
        МассивТипов.Добавить(Тип("СправочникСсылка.ЛинииПоддержки"));
        Элементы.АвтоназначениеЗначение.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов); 		
		
		Объект.АвтоназначениеЗначение = ПредопределенноеЗначение("Справочник.ЛинииПоддержки.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоАвтоназначенияИсполнителейПриИзменении(Элемент)
	
	ОбновитьТипАвтоназначенияЗначения();
	ОбновитьАвтоназначения();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоназначениеЗначениеПриИзменении(Элемент)
	
	ОбновитьАвтоназначения();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоназначениеСУчетомМестоположенияПриИзменении(Элемент)
	
	ОбновитьАвтоназначения();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоназначениеСУчетомКомпетенцийПриИзменении(Элемент)
	
	ОбновитьАвтоназначения();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоназначениеСУчетомГрафиковРабочегоВремениПриИзменении(Элемент)
	
	ОбновитьАвтоназначения();
	
КонецПроцедуры

&НаСервере
Функция ЭтоТипОрганизация(Знач Значение)	
	
	Возврат Метаданные.НайтиПоТипу(Значение).Имя = "Организации";
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораОрганизации(Знач ПолеЗначенияЗначение)
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ИмяПоля", ПолеЗначенияЗначение);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораОрганизации", ЭтотОбъект, ПараметрыПоля); 
	ОткрытьФорму("Справочник.Организации.ФормаВыбора", , ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);   
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Значения.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		 ТекущиеДанные[ДополнительныеПараметры.ИмяПоля] = Результат;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ОбъектТестирования) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выберите объект тестирования'"));
		Возврат;
	КонецЕсли;
		
	//@skip-warning
	Источник = ОбъектТестирования.ПолучитьОбъект();
	Попытка
		Выполнить(Объект.КодДействия);
	Исключение
	    ОбщегоНазначения.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	
КонецПроцедуры

#КонецОбласти
