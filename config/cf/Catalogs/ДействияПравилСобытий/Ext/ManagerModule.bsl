#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция ПредопределенноеЗначениеПоИдентификатору(Знач ИмяИдентификатора, Перезаполнить = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос        = Новый Запрос();
	Запрос.Текст  =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДействияПравилСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДействияПравилСобытий КАК ДействияПравилСобытий
		|ГДЕ
		|	ДействияПравилСобытий.Идентификатор = &ИмяИдентификатора";
	
	Запрос.УстановитьПараметр("ИмяИдентификатора", ИмяИдентификатора);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		Перезаполнить     	= Истина;
		Спр 				= Справочники.ДействияПравилСобытий.СоздатьЭлемент();
		Спр.Идентификатор 	= ИмяИдентификатора;
		Спр.Наименование  	= ИмяИдентификатора;
		Спр.Записать();
		
		Возврат Спр.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьГруппу(Знач ИмяИдентификатора, Знач ИмяГруппы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДействияПравилСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДействияПравилСобытий КАК ДействияПравилСобытий
		|ГДЕ
		|	ДействияПравилСобытий.ЭтоГруппа = ИСТИНА
		|	И ДействияПравилСобытий.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ИмяИдентификатора);	
	РезультатЗапроса       = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	Иначе
		
		Спр 				= Справочники.ДействияПравилСобытий.СоздатьГруппу();
		Спр.Идентификатор 	= ИмяИдентификатора;
		Спр.Наименование  	= ИмяГруппы;
		Спр.Записать();
		
		Возврат Спр.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДействияПравилСобытийПриПервоначальномЗаполнении() Экспорт
	
	ГруппаОповещенияПоEMail = НайтиСоздатьГруппу("ОповещенияПоEMail",	НСтр("ru = 'Оповещения по EMail'"));
	ГруппаОповещенияПоSMS   = НайтиСоздатьГруппу("ОповещенияПоSMS",  	НСтр("ru = 'Оповещения по SMS'"));
	ГруппаНапоминания       = НайтиСоздатьГруппу("Напоминания",      	НСтр("ru = 'Напоминания'"));	
	ГруппаСозданиеЗаданийИКомментариевИзВходящихПисем = НайтиСоздатьГруппу("СозданиеЗаданийИКомментариевИзВходящихПисем",
						НСтр("ru = 'Создание заданий и/или комментариев из входящих писем'"));
						
	СоздатьЗаданиеИлиКомментарийЗадания(Истина, ГруппаСозданиеЗаданийИКомментариевИзВходящихПисем);
	ОповещениеПоEMailЗаданиеСозданиеИнициаторИсполнительНаблюдатели(Истина, ГруппаОповещенияПоEMail);
	ОповещениеПоSMSЗаданиеСозданиеИсполнитель(Истина, ГруппаОповещенияПоSMS);
	ОповещениеПоEMailЗаданиеВыполнениеИнициаторНаблюдатели(Истина, ГруппаОповещенияПоEMail);
	ОповещениеПоEMailЗаданиеДобавлениеОбычногоКомментарияИнициаторИсполнительНаблюдатели(Истина, 
		ГруппаОповещенияПоEMail);
		
	ОповещениеПоEMailЗаданиеДобавлениеПриватногоКомментарияАдресаты(Истина, ГруппаОповещенияПоEMail);
	ОповещениеПоEMailЗаданиеИзменениеИсполнителяИсполнительПредыдущийИсполнитель(Истина, ГруппаОповещенияПоEMail);
	ОповещениеПоEMailЗаданиеИзменениеЭтапаИнициаторНаблюдатели(Истина, ГруппаОповещенияПоEMail);
	ОповещениеПоEMailЗаданиеУстановкаОценкиИсполнительНаблюдатели(Истина, ГруппаОповещенияПоEMail);
	ОповещениеПоEMailЗаданиеЗавершениеИнициатор(Истина, ГруппаОповещенияПоEMail);
	ОповещениеПоEMailЗаказПоставщикуВыполнениеИнициатор(Истина, ГруппаОповещенияПоEMail);
	ОповещениеПоEMailЗаданиеИзменениеНаблюдателейДобавленныеНаблюдателиПредыдущиеНаблюдатели(Истина, 
		ГруппаОповещенияПоEMail);
		
	ОповещениеПоEMailСтатьяБазыЗнанийДобавлениеКомментарияАвторПользовательНеУказан(Истина, ГруппаОповещенияПоEMail);
	ОповещениеПоEMailСтатьяБазыЗнанийЗаписьСтатьиПользовательНеУказан(Истина, ГруппаОповещенияПоEMail);
	ЗаполнитьДействияПравилСобытияМетрики();
	
КонецПроцедуры

#Область Оповещения

// Оповещение по EMail для нового задания (Задание, Инициатор, Исполнитель, Наблюдатели).
//
Функция ОповещениеПоEMailЗаданиеСозданиеИнициаторИсполнительНаблюдатели(Перезаполнить = Неопределено, 
	РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоEMailЗаданиеСозданиеИнициаторИсполнительНаблюдатели",
		Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
		
		// Оповещение по е-mail при создании задания (Инициатор).		
		ТекстШаблонаИнициатор ="<p>[Задание.Уважаемыйая] [Задание.Инициатор]!
			|<br>Ваше задание зарегистрировано: ID#[Задание.НомерЧислом] от [Задание.ДатаСоздания].
			|<br>Тема: [Задание.Тема]
			|<br>
			|<br>С уважением, служба поддержки.			
			|<br>			
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";		
				
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаИнициатор, 
			НСтр("ru = 'Шаблон сообщения e-mail для нового задания (для инициатора)'"), 
			"Инициатор", 
			"Документ.Задание",
			НСтр("ru = 'Ваше задание зарегистрировано: ID#[Задание.НомерЧислом] ([Задание.Тема])'"));
		
		
		// Оповещение по e-mail для нового задания (Задание, Исполнитель).		
		ТекстШаблонаИсполнитель ="<p>[Задание.Уважаемыйая] [Задание.ТекущийИсполнитель]!
			|<br>Вам поручено задание ID#[Задание.НомерЧислом] от [Задание.Инициатор].
			|<br>Тема: [Задание.Тема]</p>
			|[Задание.ОписаниеЗаданияHTML]
			|<p><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
			    			
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаИсполнитель, 
			НСтр("ru = 'Шаблон сообщения e-mail для нового задания (для исполнителя)'"), 
			"ТекущийИсполнитель", 
			"Документ.Задание",
			НСтр("ru = 'Вам поручено задание ID#[Задание.НомерЧислом] от [Задание.Инициатор] ([Задание.Тема])'"));
													
		// Оповещение по е-mail при создании задания (Наблюдатели).	
		ТекстШаблонаНаблюдатели = 
			"<p>[Задание.Уважаемыйая] [Задание.Адресат]!
			|<br>Создано задание ID#[Задание.НомерЧислом] от [Задание.Инициатор], в котором Вы наблюдатель.
			|<br>Тема: [Задание.Тема]</p>
			|[Задание.ОписаниеЗаданияHTML]
			|<p>С уважением, служба поддержки.<br>			
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
							
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаНаблюдатели, 
			НСтр("ru = 'Шаблон сообщения e-mail для нового задания (для наблюдателей)'"), 
			"[Наблюдатели]", 
			"Документ.Задание",
			НСтр("ru = 'Создано задание ID#[Задание.НомерЧислом] от [Задание.Инициатор] ([Задание.Тема])'"));	
		
		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Документ.Задание"; 
		ДействиеОбъект.ТипДействия  = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail;
		ДействиеОбъект.Наименование = 
			"Оповещение по e-mail для нового задания (Задание, Инициатор, ТекущийИсполнитель, [Наблюдатели])";
		
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

// Оповещение по SMS для нового задания (Задание, Исполнитель).
//
Функция ОповещениеПоSMSЗаданиеСозданиеИсполнитель(Перезаполнить = Неопределено, 
		РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоSMSЗаданиеСозданиеИсполнитель", Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
		
		// Оповещение по SMS для нового задания (Задание, Исполнитель).				
		СтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийSMS(СтрокаТЗ, 
			"Новое задание [Задание.НомерЧислом] от [Задание.Инициатор]", 
			НСтр("ru = 'Шаблон сообщения SMS для нового задания (для исполнителя)'"),
			"ТекущийИсполнитель");	
		
		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования	= "Документ.Задание"; 
		ДействиеОбъект.ТипДействия  	  	= Перечисления.ТипДействийПравилСобытий.ОповещениеПоSMS;
		ДействиеОбъект.Наименование 		= "Оповещение по SMS для нового задания (Задание, ТекущийИсполнитель)";
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();			
		
	КонецЕсли;
			
	Возврат Значение;

КонецФункции

// Оповещение по EMail при выполнении задания (Задание, Инициатор, Наблюдатели).
//
Функция ОповещениеПоEMailЗаданиеВыполнениеИнициаторНаблюдатели(Перезаполнить = Неопределено, 
		РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоEMailЗаданиеВыполнениеИнициаторНаблюдатели",
		Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
				
		// Оповещение по e-mail при выполнении задания (Задание, Инициатор).	
		ТекстШаблонаИнициатор ="<p>[Задание.Уважаемыйая] [Задание.Инициатор]!
			|<br>Ваше задание ID#[Задание.НомерЧислом] от [Задание.ДатаСоздания] выполнено.
			|<br>Тема: [Задание.Тема]</p>
			|[Задание.ОписаниеИзмененийHTML]
			|<p>Вас устроило качество/сроки решения задания? Оцените нас:
			|<br>[Задание.МеханизмОценкиВыполненияHTML]
			|<br>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";		
				
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаИнициатор, 
			НСтр("ru = 'Шаблон сообщения e-mail при выполнении задания (для инициатора)'"), 
			"Инициатор", 
			"Документ.Задание",
			НСтр("ru = 'Выполнено задание ID#[Задание.НомерЧислом] ([Задание.Тема]))'"));		
																	
		// Оповещение по e-mail при выполнении задания (Задание, [Наблюдатели]).		
		ТекстШаблонаНаблюдатели = "<p>[Задание.Уважаемыйая] [Задание.Адресат]!
			|<br>Задание ID#[Задание.НомерЧислом] от [Задание.Инициатор], в котором Вы наблюдатель, выполнено.
			|<br>Тема: [Задание.Тема]</p>
			|[Задание.ОписаниеИзмененийHTML]
			|</p>С уважением, служба поддержки.<br>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
							
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаНаблюдатели, 
			НСтр("ru = 'Шаблон сообщения e-mail при выполнении задания (для наблюдателей)'"), 
			"[Наблюдатели]", 
			"Документ.Задание",
			НСтр("ru = 'Выполнено задание ID#[Задание.НомерЧислом] от [Задание.Инициатор] ([Задание.Тема])'"));
		
		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Документ.Задание"; 
		ДействиеОбъект.ТипДействия  = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail;
		ДействиеОбъект.Наименование = "Оповещение по e-mail при выполнении задания (Задание, Инициатор, [Наблюдатели])";
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

// Оповещение по EMail при добавлении обычного комментария (Задание, Инициатор, Исполнитель, Наблюдатели).
//
Функция ОповещениеПоEMailЗаданиеДобавлениеОбычногоКомментарияИнициаторИсполнительНаблюдатели(
	Перезаполнить = Неопределено, РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение =	ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоEMailЗаданиеДобавлениеОбычногоКомментарияИнициаторИсполнительНаблюдатели", 
		Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
				
		// Оповещение по e-mail при добавлении обычного комментария (Задание, Инициатор).
		ТекстШаблонаИнициатор = "<p>[Задание.Уважаемыйая] [Задание.Инициатор]!
		    |<br>Тема: [Задание.Тема]
			|<br>В задание ID#[Задание.НомерЧислом] добавлен комментарий:</p>
			|[Задание.ДобавленныйКомментарийHTML]
			|<p>
			|С уважением, служба поддержки.
			|<br>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
				
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаИнициатор, 
			НСтр("ru = 'Шаблон сообщения e-mail при добавлении обычного комментария (для инициатора)'"), 
			"Инициатор", 
			"Документ.Задание",
			НСтр("ru = 'Добавлен комментарий в задание ID#[Задание.НомерЧислом] ([Задание.Тема])'") + 
				" (IDC#[Задание.ДобавленныйКомментарийНомерЧислом])");		
		
		
		// Оповещение по e-mail при добавлении обычного комментария (Задание, Исполнитель).
		ТекстШаблонаИсполнитель ="<p>[Задание.Уважаемыйая] [Задание.ТекущийИсполнитель]!
		    |<br>Тема: [Задание.Тема]
			|<br>В задание ID#[Задание.НомерЧислом] от [Задание.Инициатор] добавлен комментарий:</p>
			|[Задание.ДобавленныйКомментарийHTML]
			|<p><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
			    			
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаИсполнитель, 
			НСтр("ru = 'Шаблон сообщения e-mail при добавлении обычного комментария (для исполнителя)'"), 
			"ТекущийИсполнитель", 
			"Документ.Задание",
			НСтр("ru = 'Добавлен комментарий в задание ID#[Задание.НомерЧислом] от [Задание.Инициатор] ([Задание.Тема])'") +
				" (IDC#[Задание.ДобавленныйКомментарийНомерЧислом])'");
													
		// Оповещение по e-mail при добавлении обычного комментария (Задание, [Наблюдатели]).		
		ТекстШаблонаНаблюдатели ="<p>[Задание.Уважаемыйая] [Задание.Адресат]!
		    |<br>Тема: [Задание.Тема]
			|<br>В задание ID#[Задание.НомерЧислом] от [Задание.Инициатор], где Вы наблюдатель, добавлен комментарий:</p>
			|[Задание.ДобавленныйКомментарийHTML]
			|<p>С уважением, служба поддержки.
			|<br>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
							
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаНаблюдатели, 
			НСтр("ru = 'Шаблон сообщения e-mail при добавлении обычного комментария (для наблюдателей)'"), 
			"[Наблюдатели]", 
			"Документ.Задание",
			НСтр("ru = 'Добавлен комментарий в задание ID#[Задание.НомерЧислом] от [Задание.Инициатор] ([Задание.Тема])'") +
				" (IDC#[Задание.ДобавленныйКомментарийНомерЧислом])'");	
		
		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Документ.Задание"; 
		ДействиеОбъект.ТипДействия  = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail;
		ДействиеОбъект.Наименование = 
			"Оповещение по e-mail при добавлении обычного комментария (Задание, Инициатор, ТекущийИсполнитель, [Наблюдатели])";
		
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

// Оповещение по EMail при добавлении приватного комментария (Задание, Адресаты приватного комментария).
//
Функция ОповещениеПоEMailЗаданиеДобавлениеПриватногоКомментарияАдресаты(Перезаполнить = Неопределено, 
		РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоEMailЗаданиеДобавлениеПриватногоКомментарияАдресаты",
		Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
				
		// Оповещение по e-mail при добавлении приватного комментария (Задание, [Наблюдатели]).	
		ТекстШаблона =
			"<p>[Задание.Уважаемыйая] [Задание.Адресат]!
			|<br>Тема: [Задание.Тема]
			|<br>В задание ID#[Задание.НомерЧислом] добавлен комментарий:</p>
			|[Задание.ДобавленныйКомментарийHTML]
			|<p>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";		
				
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблона, 
			НСтр("ru = 'Шаблон сообщения e-mail при добавлении приватного комментария (для адресатов комментария)'"), 
			"[АдресатыПриватногоКомментария]", 
			"Документ.Задание",
			НСтр("ru = 'Добавлен комментарий в задание ID#[Задание.НомерЧислом] от [Задание.Инициатор] ([Задание.Тема])'") +
				" (IDC#[Задание.ДобавленныйКомментарийНомерЧислом])'");					
		
		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Документ.Задание"; 
		ДействиеОбъект.ТипДействия  = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail;
		ДействиеОбъект.Наименование = 
			"Оповещение по e-mail при добавлении приватного комментария (Задание, [АдресатыПриватногоКомментария])";
		
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

// Оповещение по EMail при изменении исполнителя (Задание, Инициатор, Предыдущий исполнитель).
//
Функция ОповещениеПоEMailЗаданиеИзменениеИсполнителяИсполнительПредыдущийИсполнитель(Перезаполнить = Неопределено,
		РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоEMailЗаданиеИзменениеИсполнителяИсполнительПредыдущийИсполнитель",
		Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
				
		// Оповещение по e-mail при изменении исполнителя (Задание, Исполнитель).		
		ТекстШаблонаИсполнитель ="<p>[Задание.Уважаемыйая] [Задание.ТекущийИсполнитель]!
			|<br>Вам поручено задание ID#[Задание.НомерЧислом] от [Задание.Инициатор].
			|<br>Тема: [Задание.Тема]</p>
			|[Задание.ОписаниеЗаданияHTML]			
			|<p>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
				
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаИсполнитель, 
			НСтр("ru = 'Шаблон сообщения e-mail при изменении исполнителя (для исполнителя)'"), 
			"ТекущийИсполнитель", 
			"Документ.Задание",
			НСтр("ru = 'Вам поручено задание ID#[Задание.НомерЧислом] от [Задание.Инициатор] ([Задание.Тема])'"));
																	
		// Оповещение по e-mail при изменении исполнителя (Задание, [ПредыдущийИсполнитель]).		
		ТекстШаблонаПредыдущийИсполнитель ="<p>[Задание.Уважаемыйая] [Задание.ПредыдущийИсполнитель]!
			|<br>Вы больше не исполнитель в задании ID#[Задание.НомерЧислом] от [Задание.Инициатор].
			|<br>Тема: [Задание.Тема]</p>			
			|[Задание.ОписаниеЗаданияHTML]
			|<p>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
							
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаПредыдущийИсполнитель, 
			НСтр("ru = 'Шаблон сообщения e-mail при изменении исполнителя (для предыдущего исполнителя)'"), 
			"[ПредыдущийИсполнитель]", 
			"Документ.Задание",
			НСтр("ru = 'Вы больше не исполнитель в задании ID#[Задание.НомерЧислом] от'") + 
				" [Задание.Инициатор] ([Задание.Тема])");
		
		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Документ.Задание"; 
		ДействиеОбъект.ТипДействия  = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail;
		ДействиеОбъект.Наименование = 
			"Оповещение по e-mail при изменении исполнителя (Задание, ТекущийИсполнитель, [ПредыдущийИсполнитель])";
		
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

// Оповещение по EMail при изменении этапа задания (Задание, Инициатор, Наблюдатели).
//
Функция ОповещениеПоEMailЗаданиеИзменениеЭтапаИнициаторНаблюдатели(Перезаполнить = Неопределено,
		РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоEMailЗаданиеИзменениеЭтапаИнициаторНаблюдатели",
		Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
				
		// Оповещение по e-mail при изменении этапа задания (Задание, Инициатор).	
		ТекстШаблонаИнициатор ="<p>[Задание.Уважаемыйая] [Задание.Инициатор]!
			|<br>В задании ID#[Задание.НомерЧислом] произошли изменения:
			|<br>Тема: [Задание.Тема]</p>
			|[Задание.ОписаниеИзмененийHTML]
			|<p>
			|С уважением, служба поддержки.
			|<br>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
				
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаИнициатор, 
			НСтр("ru = 'Шаблон сообщения e-mail при изменении этапа задания (для инициатора)'"), 
			"Инициатор", 
			"Документ.Задание",
			НСтр("ru = 'Произошли изменения в задании ID#[Задание.НомерЧислом] ([Задание.Тема])'"));		
																	
		// Оповещение по e-mail при изменении этапа задания (Задание, [Наблюдатели]).	
		ТекстШаблонаНаблюдатели ="<p>[Задание.Уважаемыйая] [Задание.Адресат]!
			|<br>В задании ID#[Задание.НомерЧислом] от [Задание.Инициатор], в котором Вы наблюдатель, произошли изменения:
			|<br>Тема: [Задание.Тема]
			|[Задание.ОписаниеИзмененийHTML]</p>
			|<p>
			|С уважением, служба поддержки.
			|<br>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
							
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаНаблюдатели, 
			НСтр("ru = 'Шаблон сообщения e-mail при изменении этапа задания (для наблюдателей)'"), 
			"[Наблюдатели]", 
			"Документ.Задание",
			НСтр("ru = 'Произошли изменения в задании ID#[Задание.НомерЧислом] от [Задание.Инициатор] ([Задание.Тема])'"));	
		
		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Документ.Задание"; 
		ДействиеОбъект.ТипДействия  = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail;
		ДействиеОбъект.Наименование = 
			"Оповещение по e-mail при изменении этапа задания (Задание, Инициатор, [Наблюдатели])";
		
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

// Оповещение по EMail при установке оценки (Задание, Инициатор, Наблюдатели).
//
Функция ОповещениеПоEMailЗаданиеУстановкаОценкиИсполнительНаблюдатели(Перезаполнить = Неопределено,
		РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоEMailЗаданиеУстановкаОценкиИсполнительНаблюдатели",
		Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
				
		ТекстШаблонаИсполнитель ="<p>[Задание.Уважаемыйая] [Задание.ТекущийИсполнитель]!
			|<br>В задании ID#[Задание.НомерЧислом] от [Задание.Инициатор] произошли изменения:
			|<br>Тема: [Задание.Тема]</p>
			|[Задание.ОписаниеИзмененийHTML]
			|<p>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
				
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаИсполнитель, 
			НСтр("ru = 'Шаблон сообщения e-mail при установке оценки в задании (для исполнителя)'"), 
			"ТекущийИсполнитель", 
			"Документ.Задание",
			НСтр("ru = 'Произошли изменения в задании ID#[Задание.НомерЧислом] от [Задание.Инициатор] ([Задание.Тема])'"));		
																	
		// Оповещение по e-mail при установке оценки в задании (Задание, [Наблюдатели]).	
		ТекстШаблонаНаблюдатели ="<p>[Задание.Уважаемыйая] [Задание.Адресат]!			
			|<br>В задании ID#[Задание.НомерЧислом] от [Задание.Инициатор], в котором Вы наблюдатель, произошли изменения:
			|<br>Тема: [Задание.Тема]</p>
			|[Задание.ОписаниеИзмененийHTML]
			|<p>
			|С уважением, служба поддержки.
			|<br>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
							
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаНаблюдатели, 
			НСтр("ru = 'Шаблон сообщения e-mail при установке оценки в задании (для наблюдателей)'"), 
			"[Наблюдатели]", 
			"Документ.Задание",
			НСтр("ru = 'Произошли изменения в задании ID#[Задание.НомерЧислом] от [Задание.Инициатор] ([Задание.Тема])'"));	
		
		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Документ.Задание"; 
		ДействиеОбъект.ТипДействия  = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail;
		ДействиеОбъект.Наименование = 
			"Оповещение по e-mail при установке оценки в задании (Задание, Инициатор, [Наблюдатели])";
		
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

// Оповещение по EMail при завершении задания (Задание, Инициатор).
//
Функция ОповещениеПоEMailЗаданиеЗавершениеИнициатор(Перезаполнить = Неопределено, 
		РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоEMailЗаданиеЗавершениеИнициатор",
		Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
				
		// Оповещение по e-mail при выполнении задания (Задание, Инициатор).	
		ТекстШаблона ="<p>[Задание.Уважаемыйая] [Задание.Инициатор]!
			|<br>Задание ID#[Задание.НомерЧислом] завершено.
			|<br>Тема: [Задание.Тема]
			|<br>
			|<br>С уважением, служба поддержки.
			|<br>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
				
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблона, 
			НСтр("ru = 'Шаблон сообщения e-mail при завершении задания (для инициатора)'"), 
			"Инициатор", 
			"Документ.Задание",
			НСтр("ru = 'Задание ID#[Задание.НомерЧислом] завершено ([Задание.Тема])'"));														

		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Документ.Задание"; 
		ДействиеОбъект.ТипДействия  = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail;
		ДействиеОбъект.Наименование = "Оповещение по e-mail при завершении задания (Задание, Инициатор)";
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

// Оповещение по e-mail при выполнении заказа поставщику (ЗаказПоставщику, Инициатор).
//
Функция ОповещениеПоEMailЗаказПоставщикуВыполнениеИнициатор(Перезаполнить = Неопределено,
		РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоEMailЗаказПоставщикуВыполнениеИнициатор",
		Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
				
		// Оповещение по e-mail при выполнении заказа поставщику (ЗаказПоставщику, Инициатор).	
		ТекстШаблона ="<p>[Задание.Уважаемыйая] [ЗаказПоставщику.Инициатор]!
			|<br>[ЗаказПоставщику.Дата] Вы сделали заказ со следующими позициями:
			|<br>[ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатураHTML]			
			|<br>Ваш заказ выполнен.
			|<br>
			|<br>С уважением, служба поддержки.</p>";
				
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблона, 
			НСтр("ru = 'Шаблон сообщения e-mail при выполнении заказа поставщику (для инициатора)'"), 
			"Инициатор", 
			"Документ.ЗаказПоставщику",
			НСтр("ru = 'Выполнен Ваш заказ №[ЗаказПоставщику.Номер]'"));														

		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Документ.ЗаказПоставщику"; 
		ДействиеОбъект.ТипДействия  = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail;
		ДействиеОбъект.Наименование = 
			"Оповещение по e-mail при выполнении заказа постащику (Заказ поставщику, Инициатор)";
		
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

// Оповещение по EMail при изменении наблюдателей (Задание, ПредыдущиеНаблюдатели, ДобавленныеНаблюдатели).
//
Функция ОповещениеПоEMailЗаданиеИзменениеНаблюдателейДобавленныеНаблюдателиПредыдущиеНаблюдатели(
		Перезаполнить = Неопределено, РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоEMailЗаданиеИзменениеНаблюдателейДобавленныеНаблюдателиПредыдущиеНаблюдатели",
		Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
				
		// Оповещение по e-mail при изменении наблюдателей (Задание, [ПредыдущиеНаблюдатели]).	
		ТекстШаблонаПредыдущиеНаблюдатели ="<p>[Задание.Уважаемыйая] [Задание.Адресат]!			
			|<br>Вы больше не наблюдатель в задании ID#[Задание.НомерЧислом] от [Задание.Инициатор].
			|<br>Тема: [Задание.Тема]
			|<br>
			|<br>С уважением, служба поддержки.
			|<br>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
				
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаПредыдущиеНаблюдатели, 
			НСтр("ru = 'Шаблон сообщения e-mail при изменении наблюдателей (для предыдущих наблюдателей)'"), 
			"[ПредыдущиеНаблюдатели]", 
			"Документ.Задание",
			НСтр("ru = 'Вы больше не наблюдатель в задании ID#[Задание.НомерЧислом] от'") +
				" [Задание.Инициатор] ([Задание.Тема])");
																	
		// Оповещение по e-mail при изменении наблюдателей (Задание, [ДобавленныеНаблюдатели]).
		ТекстШаблонаДобавленныеНаблюдатели = "<p>[Задание.Уважаемыйая] [Задание.Адресат]!			
			|<br>Вы назначены наблюдателем в задании ID#[Задание.НомерЧислом] от [Задание.Инициатор].
			|<br>Тема: [Задание.Тема]</p>
			|[Задание.ОписаниеЗаданияHTML]			
			|</p>С уважением, служба поддержки.
			|<br>
			|<br><i>При ответе на данное письмо, пожалуйста, не изменяйте тему письма!</i></p>";
							
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаДобавленныеНаблюдатели, 
			НСтр("ru = 'Шаблон сообщения e-mail при изменении наблюдателей (для добавленных наблюдателей)'"), 
			"[ДобавленныеНаблюдатели]", 
			"Документ.Задание",
			НСтр("ru = 'Вы назначены наблюдателем в задании ID#[Задание.НомерЧислом] от'") + 
				" [Задание.Инициатор] ([Задание.Тема])");
		
		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Документ.Задание"; 
		ДействиеОбъект.ТипДействия  =	Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail;
		ДействиеОбъект.Наименование =	НСтр("ru = 'Оповещение по e-mail при изменении наблюдателей'") +
				" (Задание, [ПредыдущиеНаблюдатели], [ДобавленныеНаблюдатели])";
		
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

// Оповещение по EMail при добавлении комментария (Статья базы знаний, Автор, ПользовательНеУказан).
//
Функция ОповещениеПоEMailСтатьяБазыЗнанийДобавлениеКомментарияАвторПользовательНеУказан(Перезаполнить = Неопределено,
	РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоEMailСтатьяБазыЗнанийДобавлениеКомментарияАвторПользовательНеУказан",
		Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
				
		ТекстШаблонаАвтор = "<p>Уважаемый(ая) [СтатьиБазыЗнаний.Автор.Наименование]!			
			|<br>К статье ""[СтатьиБазыЗнаний.Наименование]"" добавлен комментарий:
			|<br>[СтатьиБазыЗнаний.ДобавленныйКомментарийHTML]
			|<br>			
			|<br>С уважением, служба поддержки.</p>";
				
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблонаАвтор, 
			НСтр("ru = 'Шаблон сообщения e-mail при добавлении комментария (для автора)'"), 
			"Автор", 
			"Справочник.СтатьиБазыЗнаний",
			НСтр("ru = 'Добавлен комментарий к статье ""[СтатьиБазыЗнаний.Наименование]""'"));		
																	
		ТекстШаблона = "<p>Уважаемый пользователь!
			|<br>К статье ""[СтатьиБазыЗнаний.Наименование]"" добавлен комментарий:			
			|<br>[СтатьиБазыЗнаний.ДобавленныйКомментарийHTML]
			|<br>			
			|<br>С уважением, служба поддержки.</p>";
						
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблона, 
			НСтр("ru = 'Шаблон сообщения e-mail при добавлении комментария (пользователь не указан)'"), 
			, 
			"Справочник.СтатьиБазыЗнаний",
			НСтр("ru = 'Добавлен комментарий к статье ""[СтатьиБазыЗнаний.Наименование]""'"));	
		
		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Справочник.СтатьиБазыЗнаний"; 
		ДействиеОбъект.ТипДействия  = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail;
		ДействиеОбъект.Наименование = 
			"Оповещение по e-mail при добавлении комментария (Статьи базы знаний, Автор, пользователь не указан)";
		
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

// Оповещение по EMail при записи статьи (Статья базы знаний, Автор, ПользовательНеУказан).
//
Функция ОповещениеПоEMailСтатьяБазыЗнанийЗаписьСтатьиПользовательНеУказан(Перезаполнить = Неопределено,
		РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору(
		"ОповещениеПоEMailСтатьяБазыЗнанийЗаписьСтатьиПользовательНеУказан",
		Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ТЗПолучателиОповещений = Новый ТаблицаЗначений;
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("ПолучательЗначение");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонСообщения");
		ТЗПолучателиОповещений.Колонки.Добавить("ШаблонОформления");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьВариантЗаполнения");
		ТЗПолучателиОповещений.Колонки.Добавить("УчетнаяЗаписьЗначение");
				
		ТекстШаблона = "<p>Уважаемый пользователь!			
			|<br>Была добавлена (либо изменена) статья ""[СтатьиБазыЗнаний.Наименование]"".
			|<br>Автор статьи:	[СтатьиБазыЗнаний.Автор.Наименование].			
			|<br>Ссылка:		[СтатьиБазыЗнаний.ВнешняяСсылкаНаОбъект]			
			|<br>[СтатьиБазыЗнаний.ТекстСтатьиHTML]
			|<br>
			|<br>С уважением, служба поддержки.</p>";
				
		НоваяСтрокаТЗ = ТЗПолучателиОповещений.Добавить();
		ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(НоваяСтрокаТЗ, 
			ТекстШаблона, 
			НСтр("ru = 'Шаблон сообщения e-mail при записи статьи (пользователь не указан)'"), 
			, 
			"Справочник.СтатьиБазыЗнаний",
			НСтр("ru = 'Добавлена (либо изменена) статья ""[СтатьиБазыЗнаний.Наименование]""'"));		
			
		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Справочник.СтатьиБазыЗнаний"; 
		ДействиеОбъект.ТипДействия  = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail;
		ДействиеОбъект.Наименование = 
			НСтр("ru = 'Оповещение по e-mail при записи статьи (Статьи базы знаний, необходимо указать получателя)'");
			
		ДействиеОбъект.ПолучателиОповещений.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗПолучателиОповещений Цикл
			НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

#КонецОбласти

#Область Метрики

// Полностью выполняет заполнение расчета метрик в документе "Задание".
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДействияПравилСобытияМетрики() Экспорт
	
	ГруппаМетрики = НайтиСоздатьГруппу("Метрики", НСтр("ru = 'Метрики'"));	
	РасчетМетрикДокументЗадание(Истина, ГруппаМетрики);
	
КонецПроцедуры

// Заполнение расчета метрик в документе "Задание".
//
// Параметры:
//	Перезаполнить - Булево - перезаполнить действия или нет.
//	РодительЭлемента - СправочникСсылка.ДействияПравилСобытий - группа куда записать.
//
Процедура РасчетМетрикДокументЗадание(Перезаполнить = Неопределено, РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	Значение = ПредопределенноеЗначениеПоИдентификатору("РасчетМетрикДокументЗадание", Перезаполнить);
	
	Если Перезаполнить Тогда
		ТЗРасчетМетрик 	= СоздатьТаблицуМетрик();		
		
		#Область КоличествоВыполненныхЗаданий
		ЗаполнитьСтрокуТЗРасчетМетрик(ТЗРасчетМетрик,
			"КоличествоВыполненныхЗаданий",
			"Результат = ?(Источник.ПометкаУдаления = Ложь И Источник.Выполнено = Истина, 1, 0);",
		    ,
			"Результат = Источник.ДатаВыполнения;",
			"Результат = Источник.Инициатор;",
			"Результат = Источник.Клиент;",
			"Результат = Источник.ТекущийИсполнитель;");
		#КонецОбласти
		
		#Область КоличествоНераспределенныхЗаданий
		ЗаполнитьСтрокуТЗРасчетМетрик(ТЗРасчетМетрик,
			"КоличествоНераспределенныхЗаданий",			
			"Результат = ?(Источник.ПометкаУдаления = Ложь И Источник.Выполнено = Ложь И " 
			+ "(Не ЗначениеЗаполнено(Источник.ТекущийИсполнитель)), 1, 0);",
			,
			"Результат = Источник.ДатаСоздания;",
			"Результат = Источник.Инициатор;",
			"Результат = Источник.Клиент;");
	    #КонецОбласти
		
		#Область КоличествоОткрытыхЗаданий
		ЗаполнитьСтрокуТЗРасчетМетрик(ТЗРасчетМетрик,
			"КоличествоОткрытыхЗаданий",
			"Результат = ?(Источник.Выполнено = Ложь И Источник.ПометкаУдаления = Ложь"
			+ " И ЗначениеЗаполнено(Источник.ТекущийЭтап)"
			+ " И Источник.ТекущийЭтап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Приостановка, 1, 0);",
		    ,
			"Результат = Источник.ДатаСоздания;",
			"Результат = Источник.Инициатор;",
			"Результат = Источник.Клиент;",
			"Результат = Источник.ТекущийИсполнитель;");
		#КонецОбласти

		#Область КоличествоПросроченныхЗаданий
		ЗаполнитьСтрокуТЗРасчетМетрик(ТЗРасчетМетрик,
			"КоличествоПросроченныхЗаданий",
			"Результат = ?(Источник.ПометкаУдаления = Ложь И Источник.КрайняяДатаВыполнения <>"
			+ " Дата(1, 1, 1) И Источник.Выполнено = ЛОЖЬ И Источник.КрайняяДатаВыполнения < ТекущаяДатаСеанса()"
			+ " И ЗначениеЗаполнено(Источник.ТекущийЭтап)"
			+ " И Источник.ТекущийЭтап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Приостановка, 1, 0);",
		    ,
			"Результат = Источник.ДатаСоздания;",
			"Результат = Источник.ТекущийИсполнитель;",
			"Результат = Источник.Клиент;",
			"Результат = Источник.Инициатор;",
			"Результат = Источник.SLA;");
		#КонецОбласти
		
		#Область ОбщееКоличествоЗаданий
		ЗаполнитьСтрокуТЗРасчетМетрик(ТЗРасчетМетрик,
			"ОбщееКоличествоЗаданий",
			"Результат = ?(Источник.ПометкаУдаления = Ложь, 1, 0);",
		    ,
			"Результат = Источник.ДатаСоздания;",
			"Результат = Источник.Инициатор;",
			"Результат = Источник.Клиент;",
			"Результат = Источник.Исполнитель;");
		#КонецОбласти
		
		ДействиеОбъект 						= Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования 	= "Документ.Задание"; 
		ДействиеОбъект.ТипДействия  		= Перечисления.ТипДействийПравилСобытий.РасчетМетрик;
		ДействиеОбъект.Наименование 		= НСтр("ru = 'Расчет метрик (документ Задание)'");
		ДействиеОбъект.РасчетМетрик.Очистить();
		
		Для Каждого СтрокаТЗ Из ТЗРасчетМетрик Цикл
			НоваяСтрока = ДействиеОбъект.РасчетМетрик.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ); 
		КонецЦикла;
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеПисьмоВходящее

// Запись электронного .
//
Функция СоздатьЗаданиеИлиКомментарийЗадания(Перезаполнить = Неопределено, РодительЭлемента = Неопределено) Экспорт
	
	Если Перезаполнить = Неопределено Тогда 
		Перезаполнить = Ложь;
	КонецЕсли;
	
	Значение = ПредопределенноеЗначениеПоИдентификатору("СоздатьЗаданиеИлиКомментарийЗадания", Перезаполнить);
	
	Если Перезаполнить Тогда
		
		ДействиеОбъект = Значение.ПолучитьОбъект();
		ДействиеОбъект.ПолноеИмяОснования = "Документ.ЭлектронноеПисьмоВходящее"; 
		ДействиеОбъект.ТипДействия  = Перечисления.ТипДействийПравилСобытий.СоздатьЗаданиеИлиКомментарийЗадания;
		ДействиеОбъект.Наименование = "Создать задание или комментарий задания (Электронное письмо входящее)";
		ДействиеОбъект.ТипПроцесса 	= Справочники.ТипыПроцессов.Инцидент;
		ДействиеОбъект.Процесс		= Справочники.Процессы.Обращение;
		ДействиеОбъект.Срочность	= Перечисления.Срочность.Средняя;		
		ДействиеОбъект.Влияние		= Перечисления.Влияние.Среднее;
		ДействиеОбъект.Приоритет	= Перечисления.ПриоритетЗадания.Средний;
		ДействиеОбъект.ПриоритетОпределенияКлиентовИИнициаторов =
			ЗаданияСервер.ПриоритетОпределенияКлиентовИИнициаторовПоУмолчанию();
		
		Если РодительЭлемента <> Неопределено Тогда  	
			ДействиеОбъект.Родитель		  = РодительЭлемента;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
	КонецЕсли;
			
	Возврат Значение;	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСтрокуТЗПолучателиОповещенийEMail(СтрокаТЗ, Знач ТекстШаблона, Знач НаименованиеШаблона,
	Знач НаименованиеРеквизита, Знач ПолноеИмяОснования, Знач ТемаПисьма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ШаблонОповещения = Справочники.ШаблоныСообщений.НайтиПоНаименованию(НаименованиеШаблона);
	
	Если НЕ ЗначениеЗаполнено(ШаблонОповещения) Тогда
		Шаблон = Справочники.ШаблоныСообщений.СоздатьЭлемент();
	Иначе
		Шаблон = ШаблонОповещения.ПолучитьОбъект();
	КонецЕсли;
	
	ФД = Новый ФорматированныйДокумент;	
	ФД.УстановитьHTML(ТекстШаблона, Новый Структура);	
	ТекстШаблонаHTML			  = "";
	КартинкиТекстаHTML			  = Новый Структура;
	ФД.ПолучитьHTML(ТекстШаблонаHTML, КартинкиТекстаHTML);		
	Шаблон.Наименование			  = НаименованиеШаблона;
	Шаблон.Автор 				  = Пользователи.СсылкаНеуказанногоПользователя();
	
	Если ПолноеИмяОснования	= "Документ.Задание" Тогда
		Шаблон.Назначение 			  = Метаданные.Документы.Задание.Представление();
		Шаблон.ПолноеИмяТипаПараметраВводаНаОсновании = Метаданные.Документы.Задание.ПолноеИмя();
		
	ИначеЕсли ПолноеИмяОснования = "Документ.ЗаказПоставщику" Тогда
		Шаблон.Назначение 			  = Метаданные.Документы.ЗаказПоставщику.Представление();
		Шаблон.ПолноеИмяТипаПараметраВводаНаОсновании = Метаданные.Документы.ЗаказПоставщику.ПолноеИмя();
		
	ИначеЕсли ПолноеИмяОснования = "Справочник.СтатьиБазыЗнаний" Тогда
		Шаблон.Назначение 			  = Метаданные.Справочники.СтатьиБазыЗнаний.Представление();
		Шаблон.ПолноеИмяТипаПараметраВводаНаОсновании = Метаданные.Справочники.СтатьиБазыЗнаний.ПолноеИмя();
		
	КонецЕсли;
	
	Шаблон.ПредназначенДляSMS 	  = Ложь;
	Шаблон.ПредназначенДляВводаНаОсновании = Истина;
	Шаблон.ПредназначенДляЭлектронныхПисем = Истина;
	Шаблон.ТекстШаблонаПисьма 	  = ФД.ПолучитьТекст();
	Шаблон.ТекстШаблонаПисьмаHTML = ТекстШаблонаHTML;	
	Шаблон.ТемаПисьма			  = ТемаПисьма;	
	Шаблон.ТипТекстаПисьма 		  = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
	Шаблон.ТолькоДляАвтора 		  = Ложь;
	Шаблон.Записать();
	
	СтрокаТЗ.ШаблонСообщения  = Шаблон.Ссылка;
	СтрокаТЗ.ШаблонОформления = Справочники.ОформленияОповещенийEmailПравилСобытий.СовременныйШаблон;
	
	Если НЕ ПустаяСтрока(НаименованиеРеквизита) Тогда		
		СтрокаТЗ.ПолучательВариантЗаполнения = НСтр("ru = 'Реквизит основания'");	
		СтрокаТЗ.ПолучательЗначение 		 = НаименованиеРеквизита;	
	КонецЕсли;

	Если ПолноеИмяОснования	= "Документ.Задание" Тогда	
		СтрокаТЗ.УчетнаяЗаписьВариантЗаполнения = НСтр("ru = 'Реквизит основания'");		
		СтрокаТЗ.УчетнаяЗаписьЗначение = "УчетнаяЗаписьЭлектроннойПочты";
		
	Иначе		
		СтрокаТЗ.УчетнаяЗаписьВариантЗаполнения = НСтр("ru = 'Указанный'");	
		СтрокаТЗ.УчетнаяЗаписьЗначение = УправлениеITОтделом8УФПовтИсп.УчетнаяЗаписьЭлектроннойПочтыПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТЗПолучателиОповещенийSMS(СтрокаТЗ, Знач ТекстШаблона, Знач НаименованиеШаблона, 
		Знач НаименованиеРеквизита) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ШаблонОповещения = Справочники.ШаблоныСообщений.НайтиПоНаименованию(НаименованиеШаблона);
	
	Если НЕ ЗначениеЗаполнено(ШаблонОповещения) Тогда
		Шаблон = Справочники.ШаблоныСообщений.СоздатьЭлемент();
	Иначе
		Шаблон = ШаблонОповещения.ПолучитьОбъект();
	КонецЕсли;
	
	Шаблон.Наименование			= НаименованиеШаблона;
	Шаблон.Автор 				= Пользователи.СсылкаНеуказанногоПользователя();
	Шаблон.Назначение 			= Метаданные.Документы.Задание.Представление();
	Шаблон.ПолноеИмяТипаПараметраВводаНаОсновании = Метаданные.Документы.Задание.ПолноеИмя();
	Шаблон.ПредназначенДляSMS 	= Истина;
	Шаблон.ПредназначенДляВводаНаОсновании = Истина;
	Шаблон.ПредназначенДляЭлектронныхПисем = Ложь;
	Шаблон.ТекстШаблонаSMS 		= ТекстШаблона;	
	Шаблон.ТолькоДляАвтора 		= Ложь;
	Шаблон.Записать();
	
	СтрокаТЗ.ШаблонСообщения  = Шаблон.Ссылка;	
	
	Если НЕ ПустаяСтрока(НаименованиеРеквизита) Тогда		
		СтрокаТЗ.ПолучательВариантЗаполнения = НСтр("ru = 'Реквизит основания'");	
		СтрокаТЗ.ПолучательЗначение 		 = НаименованиеРеквизита;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТЗРасчетМетрик(ТаблицаРасчетМетрик, 
										Знач МетрикаИдентификатор, 
										Знач Формула = "Результат = 1;",
										Знач ПланФакт = Неопределено, 
										Знач ПериодРегистрации = "",
										Знач Измерение1 = "", 
										Знач Измерение2 = "", 
										Знач Измерение3 = "", 
										Знач Измерение4 = "", 
										Знач Измерение5 = "")

	Метрика = Справочники.Метрики.ПредопределенноеЗначениеПоИдентификатору(МетрикаИдентификатор, Истина);
	
	СтрокаТЗ 				= ТаблицаРасчетМетрик.Добавить();
	СтрокаТЗ.Метрика  		= Метрика;	
	СтрокаТЗ.Формула  		= Формула;
	СтрокаТЗ.ПланФакт  		= ?(ПланФакт = Неопределено, Перечисления.ПланФакт.Факт, ПланФакт);
	СтрокаТЗ.ПериодРегистрации = ПериодРегистрации;
	СтрокаТЗ.Измерение1  	= Измерение1;
	СтрокаТЗ.Измерение2  	= Измерение2;
	СтрокаТЗ.Измерение3  	= Измерение3;
	СтрокаТЗ.Измерение4  	= Измерение4;
	СтрокаТЗ.Измерение5  	= Измерение5;
	

КонецПроцедуры

Функция СоздатьТаблицуМетрик()

	ТЗРасчетМетрик = Новый ТаблицаЗначений;
	ТЗРасчетМетрик.Колонки.Добавить("Метрика");
	ТЗРасчетМетрик.Колонки.Добавить("Измерение1");
	ТЗРасчетМетрик.Колонки.Добавить("Измерение2");
	ТЗРасчетМетрик.Колонки.Добавить("Измерение3");
	ТЗРасчетМетрик.Колонки.Добавить("Измерение4");
	ТЗРасчетМетрик.Колонки.Добавить("Измерение5");
	ТЗРасчетМетрик.Колонки.Добавить("ПланФакт");
	ТЗРасчетМетрик.Колонки.Добавить("Формула");
	ТЗРасчетМетрик.Колонки.Добавить("ПериодРегистрации");
	
	Возврат ТЗРасчетМетрик;

КонецФункции // СоздатьТаблицуМетрик()()

#КонецОбласти

#КонецЕсли