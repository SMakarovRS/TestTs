
#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Вывод дерева	
	ВывестиДеревоНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Разворачиваем дерево.
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
	
	ПредыдущиеРеквизитыСтроки = СтруктураСтрокиДерева();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьДеревоНоменклатуры(ТекущийОбъект);
	
	СписокОшибок = Неопределено;
	Для Каждого Строки Из ТекущийОбъект.ИсходныеКомплектующие Цикл
		Если НЕ ЗначениеЗаполнено(Строки.Номенклатура) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.ИсходныеКомплектующие", СтрШаблон(НСтр("ru = 'Для строки %1 не заполнена номенклатура.'"), Строки.ИД), "");
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок, Отказ);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНоменклатуры

&НаКлиенте
Процедура ДеревоНоменклатураНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.НавСсылка			= СтруктураДанные.НавСсылка;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения	= СтруктураДанные.ЕдиницаИзмерения;
	 	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатураНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборУслуги", Ложь);
	ПараметрыФормы.Вставить("ВыбранноеЗначение", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("Ключ", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТабличнойЧасти.Номенклатура);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатураПриИзменении(Элемент)
	
	ОбновитьНумерациюВДеревеЗначенийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если Копирование Тогда
		Отказ = Истина;
		РеквизитДерево = ЭтаФорма["ДеревоНоменклатуры"];		
		Приемник = РеквизитДерево.НайтиПоИдентификатору(СтрокаТабличнойЧасти.ПолучитьИдентификатор()).ПолучитьРодителя(); 
		
		Если Приемник = Неопределено Тогда
			НоваяСтрока = ДеревоНоменклатурыДобавитьСтрокуКопированием(РеквизитДерево,Неопределено,СтрокаТабличнойЧасти);
		Иначе
			НоваяСтрока = ДеревоНоменклатурыДобавитьСтрокуКопированием(РеквизитДерево,Приемник,СтрокаТабличнойЧасти);
		КонецЕсли;
		ОбновитьНумерациюВДеревеЗначенийНаСервере();
		Если НЕ НоваяСтрока = Неопределено Тогда
			 Элементы.ДеревоНоменклатуры.Развернуть(НоваяСтрока.ПолучитьИдентификатор(),Истина);
		КонецЕсли;	
		Возврат;
	КонецЕсли;
		  
	Если Не Копирование И УправлениеITОтделом8УФПовтИсп.НоменклатураМожетИметьКомплектующие(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(НСтр("ru = 'Добавить в комплект'"));
		СЗ.Добавить(НСтр("ru = 'Добавить на этом же уровне'"));
		
		Если ДеревоНоменклатуры.ПолучитьЭлементы().Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Отказ = Истина;
		СтруктураЭлемента 	= Новый Структура("Элемент",Элемент);		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВыбораИзМеню",ЭтотОбъект,СтруктураЭлемента);		
		ПоказатьВыборИзМеню(ОписаниеОповещения,СЗ,Элементы.ДеревоНоменклатуры.КоманднаяПанель);
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Результат				= Новый Структура("Значение", НСтр("ru = 'Добавить на этом же уровне'"));
	СтруктураЭлемента 		= Новый Структура("Элемент", Элемент);
	ПослеВыбораИзМеню(Результат, СтруктураЭлемента);
	
КонецПроцедуры

&НаКлиенте
Функция ДеревоНоменклатурыДобавитьСтрокуКопированием(РеквизитДерево,Приемник,Источник)
	
	Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;
	    
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	//Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(НоваяСтрока.Номенклатура) Тогда 
	//	НоваяСтрока.КарточкаНоменклатуры = ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
	//КонецЕсли;	

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
        ДеревоНоменклатурыДобавитьСтрокуКопированием(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
	КонецЦикла;
	
    Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломИзменения(Элемент, Отказ)
	
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.ДеревоНоменклатуры.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьТабличнуюЧастьНоменклатура();
			
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПослеУдаления(Элемент)
	
	СохранитьДеревоНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// Узел нельзя переносить в узлы подчиненные ему самому,
    // т.е. родительский узел нельзя переносить в дочерние.
    // Проверим это условие для всех выделенных элементов.
	
    СтандартнаяОбработка = Ложь;

    РеквизитДерево 	= ЭтаФорма["ДеревоНоменклатуры"];

    ИДНовыйРодитель = Строка;
    // Новый Родитель равен Неопределено => Корень дерева/
    НовыйРодитель 	= ?(ИДНовыйРодитель = Неопределено, Неопределено, РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель));

    ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);

    Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент, НовыйРодитель) Тогда
        ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СохранитьДеревоНоменклатуры();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;
    РеквизитДерево 		 = ЭтаФорма["ДеревоНоменклатуры"];
    ИДПриемник 			 = Строка;
	
    // ИД Приемник равен Неопределено => Корень дерева.
    Приемник = ?(ИДПриемник = Неопределено, Неопределено,
        РеквизитДерево.НайтиПоИдентификатору(ИДПриемник));

    Источник	= РеквизитДерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	Если ТипЗНЧ(Приемник) = Тип("ДанныеФормыЭлементДерева") Тогда
		Если Не ЗначениеЗаполнено(Приемник.Номенклатура) Тогда			
			ДопПараметры 		= Новый Структура("РеквизитДерево, Приемник, Источник, ИДПриемник", РеквизитДерево, Приемник, Источник, ИДПриемник);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеретаскиваниеПослеВопросаСоздатьНоменклутуру", ЭтотОбъект, ДопПараметры);
			
			Кнопки 				= Новый СписокЗначений;
			Кнопки.Добавить("КнопкаСоздатьНовую"	, НСтр("ru='Создать новую'"));
			Кнопки.Добавить("КнопкаВыбратьИзСписка"	, НСтр("ru='Выбрать из списка'"));
			Кнопки.Добавить("КнопкаОтмена"			, НСтр("ru='Отмена'"));
			
			ПоказатьВопрос(ОписаниеОповещения, СтрШаблон(НСтр("ru = 'Перед добавлением в комплект необходимо заполнить номенклатуру .
                                                               |Создать новую или выбрать существующую из списка?'"), Приемник.Номенклатура), Кнопки,,"КнопкаСоздатьНовую");
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ДеревоНоменклатурыПеретаскиваниеФрагмент(РеквизитДерево, Приемник, Источник, ИДПриемник);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для Каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БСП

&НаСервере
Процедура ОбновитьНумерациюВДеревеЗначенийНаСервере()
	
	ОбновитьНумерациюВДеревеНоменклатуры(ДеревоНоменклатуры);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет нумерацию элементов в дереве
Процедура ОбновитьНумерациюВДеревеНоменклатуры(СтрокаДерева, ИндексСтроки = 1) Экспорт
	
	ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого Строки Из ЭлементыДерева Цикл
		Строки.ИД 				= ИндексСтроки;
		Родитель 				= Строки.ПолучитьРодителя();
		Строки.РодительскийИД   = ?(Родитель = Неопределено, 0, Родитель.ИД);
		ИндексСтроки 			= ИндексСтроки + 1;
		ОбновитьНумерациюВДеревеНоменклатуры(Строки, ИндексСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМеню(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 		 
		Возврат;
	КонецЕсли;
	
	РеквизитДерево 	= ЭтаФорма["ДеревоНоменклатуры"];
	ВКомплект 		= Ложь;
	Элемент 		= ДополнительныеПараметры.Элемент;
	
	Если Результат.Значение = НСтр("ru='Добавить в комплект'") Тогда 
		ВКомплект = Истина;
	КонецЕсли;
	
	Если ВКомплект Тогда
		// Внутрь комплекта
		Приемник = РеквизитДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Если НЕ Элемент.Развернут(Приемник.ПолучитьИдентификатор()) Тогда
			Элемент.Развернуть(Приемник.ПолучитьИдентификатор());
		КонецЕсли;		
		НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Приемник);	
	ИначеЕсли РеквизитДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя() = Неопределено Тогда
		// Добавляем в корень
		НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Неопределено);
	Иначе
		// На текущий уровень
		Приемник = РеквизитДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя();
		Если НЕ Элемент.Развернут(Приемник.ПолучитьИдентификатор()) Тогда
			Элемент.Развернуть(Приемник.ПолучитьИдентификатор());
		КонецЕсли;		
		НоваяСтрока = ДобавитьСтрокуДерева(РеквизитДерево, Приемник);
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элемент;
	Элемент.ТекущаяСтрока 	= НоваяСтрока.ПолучитьИдентификатор();
	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоНоменклатураНоменклатура;
	Элемент.ИзменитьСтроку();

КонецПроцедуры

&НаКлиенте
Функция ДобавитьСтрокуДерева(РеквизитДерево, Родитель)
	
	Возврат ДобавлениеСтрокиДерева(РеквизитДерево, Родитель);
	
КонецФункции

&НаКлиенте
Функция ДобавлениеСтрокиДерева(РеквизитДерево, Родитель)Экспорт
	
	Если Родитель = Неопределено Тогда
		 //Добавляем в корень
		НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока 					= Родитель.ПолучитьЭлементы().Добавить();
		НоваяСтрока.РодительскийИД		= Родитель.РодительскийИД;		
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция СтруктураСтрокиДерева()
	
	Возврат ОбработкаТабличныхЧастей.СтруктураИзДереваЗначений(ЭтаФорма, "ДеревоНоменклатуры");
	
КонецФункции

&НаСервере
// Вывод дерева номенклатуры.
Процедура ВывестиДеревоНоменклатуры()
	
	ТЗ = Объект.ИсходныеКомплектующие.Выгрузить();
	//ТЗ.Очистить();
	ТЗ.Колонки.Добавить("НавСсылка");
	Для Каждого Строки Из ТЗ Цикл
		Строки.НавСсылка = УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(Строки.Номенклатура);
	КонецЦикла;
	ДЗ = ДанныеФормыВЗначение(ДеревоНоменклатуры, Тип("ДеревоЗначений"));
	ДЗ.Строки.Очистить();	
	ЗаполнитьДеревоНоменклатуры(ДЗ, ТЗ, Неопределено, Неопределено);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
		
КонецПроцедуры

&НаСервере
// Новое дерево значений.
Процедура ЗаполнитьДеревоНоменклатуры(ДеревоНоменклатуры, Знач ИсходныеКомплектующие, РодительскийИД = Неопределено, ИД = Неопределено) Экспорт
		
	Если ИД = Неопределено Тогда
		ДеревоНоменклатуры.Строки.Очистить();
		РодительскийИД	= 0;
		ИД				= 1;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("РодительскийИД", РодительскийИД);
	МассивСтрок 	= ИсходныеКомплектующие.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Строки Из МассивСтрок Цикл
		Если ЗначениеЗаполнено(Строки.Номенклатура) Тогда
			СтрокаДерева 				= ДеревоНоменклатуры.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Строки);
			СтрокаДерева.ИД 			= ИД;
			СтрокаДерева.РодительскийИД = РодительскийИД;
			ИД 							= ИД + 1;
			ЗаполнитьДеревоНоменклатуры(СтрокаДерева, ИсходныеКомплектующие, Строки.ИД, ИД);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Сохранения дерева номенклатуры.
Процедура СохранитьДеревоНоменклатуры(ТекущийОбъект =  Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.Спецификация"));
	Иначе
		ТекОбъект = ТекущийОбъект;
	КонецЕсли;
	
	ДЗ = ДанныеФормыВЗначение(ДеревоНоменклатуры, Тип("ДеревоЗначений"));	
	
	ОбработкаТабличныхЧастей.СохранитьДеревоНоменклатуры(ДЗ, ТекОбъект.ИсходныеКомплектующие);
	
	Если ТекущийОбъект = Неопределено Тогда
		ЗначениеВДанныеФормы(ТекОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТабличнуюЧастьНоменклатура()
	
	СтрокаТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТекущиеДанные = Неопределено Тогда		
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТекущиеДанные.Номенклатура) Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПредыдущиеРеквизитыСтроки Цикл
		Если КлючИЗначение.Значение <> СтрокаТекущиеДанные[КлючИЗначение.Ключ] Тогда			
			СтруктураТекущиеДанные	= СтруктураСтрокиТабличнойЧасти();
			ЗаполнитьЗначенияСвойств(СтруктураТекущиеДанные,СтрокаТекущиеДанные);
			ОбновитьСтрокуТабличнойЧасти(ПредыдущиеРеквизитыСтроки, СтруктураТекущиеДанные);
			Модифицированность 		= Истина;
			Возврат;
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтруктураСтрокиТабличнойЧасти()
	
	Возврат ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма,"ИсходныеКомплектующие");
	
КонецФункции

&НаСервере
Процедура ОбновитьСтрокуТабличнойЧасти(ПредыдущиеРеквизитыСтроки, СтруктураТекущиеДанные)
		
	Отбор 		= ОбработкаТабличныхЧастей.СтруктураИзТабличнойЧасти(ЭтаФорма,"ИсходныеКомплектующие");
	
	ЗаполнитьЗначенияСвойств(Отбор,ПредыдущиеРеквизитыСтроки);
	
	МассивСтрок = Объект.ИсходныеКомплектующие.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() <> 1 Тогда //обновляем полностью.
		СохранитьДеревоНоменклатуры();
	Иначе
		ЗаполнитьЗначенияСвойств(МассивСтрок[0],СтруктураТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)

	// Может содержать дочерние
	Если НовыйРодитель <> Неопределено Тогда
		Если ЗначениеЗаполнено(НовыйРодитель.Номенклатура) Тогда
			Параметр = Новый Структура();
			Параметр.Вставить("Номенклатура", НовыйРодитель.Номенклатура);
			Если НЕ ЗначениеНаСервере("Параметры.Номенклатура.ВидНоменклатуры.МожетИметьКомплектующие", Параметр) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	// Родитель в родителе
    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
	КонецЦикла;
	
    Возврат Истина;

КонецФункции

&НаСервере
Функция ЗначениеНаСервере(Стр, Параметры = Неопределено)
	
	Возврат Вычислить(Стр);
	
КонецФункции

&НаКлиенте
Процедура ДеревоНоменклатурыПеретаскиваниеФрагмент(РеквизитДерево, Приемник, Источник, ИДПриемник)
	
	НоваяСтрока	= СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник);

	Если Приемник = Неопределено Тогда
		НоваяСтрока.РодительскийИД = 0;
	Иначе		
		НоваяСтрока.РодительскийИД = Приемник.РодительскийИД;
	КонецЕсли;
	
    // Производится копирование в корень.
    // Для "красоты" развернем вновь созданную ветвь.
	Элемент = Элементы.ДеревоНоменклатуры;
	
    Если Приемник = Неопределено И НоваяСтрока <> Неопределено Тогда
        Элемент.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
    КонецЕсли;

    // Для "красоты" развернем ветвь-родителя
    Если НЕ Приемник = Неопределено Тогда
        Элемент.Развернуть(ИДПриемник, Истина);
	КонецЕсли;
	
	ОбновитьНумерациюВДеревеЗначенийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен.
    // Это происходит если выделены несколько элементов,
    // одной и той же ветви дерева на разных уровнях иерархии.
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень.
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
            [КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Если Источник.ПолучитьРодителя() = Неопределено Тогда
        РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
    Иначе
        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("НавСсылка", УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(СтруктураДанные.Номенклатура));
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	
	СписокЕдиницаИзмерения = Новый СписокЗначений;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);
	
	СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, Номенклатура.ЕдиницаИзмерения.Наименование + " " + НСтр("ru='(ед. хранения)'"));
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Номенклатура);
	
	Родитель = Номенклатура.Родитель;
	
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Прервать;
		Иначе
			МассивОтбора.Добавить(Родитель);
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	КонецЦикла;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

#КонецОбласти
