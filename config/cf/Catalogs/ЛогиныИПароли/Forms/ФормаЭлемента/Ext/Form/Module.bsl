
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Период	= ТекущаяДатаСеанса();
	
	Если Объект.Ссылка.Пустая() Тогда		
		УИД		= Строка(Новый УникальныйИдентификатор());
		УИД		= СтрЗаменить(УИД, "-", "");
		Если Параметры.Свойство("Объект") Тогда
			Объект.Объект = Параметры.Объект;
		КонецЕсли;	
	КонецЕсли;			
			
	Если Не ЗначениеЗаполнено(Объект.ТипПароля) Тогда
		
		Объект.ТипПароля = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеНастройки("ОсновнойТипПароляПриСоздании");
		Если НЕ ЗначениеЗаполнено(Объект.ТипПароля) Тогда
			Объект.ТипПароля = Перечисления.ТипыПаролей.Личный;
		КонецЕсли;
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Объект) Тогда
		ОбновитьСписокВыбораЛогинов();
	КонецЕсли;	
	
	ВидимостьПаролей = УправлениеITОтделом8УФПовтИсп.Право("ЧтениеПаролей") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ДобавлениеИзменениеПаролей");	
		
	ИсторияИзменений.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	ТекущийПериод = НачалоДня(ТекущаяДатаСеанса());
	ИсторияИзменений.Параметры.УстановитьЗначениеПараметра("ТекущийПериод", ТекущийПериод);	
	ОбновитьВидимостьДоступность();
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УИД = Строка(Новый УникальныйИдентификатор());
	УИД = СтрЗаменить(УИД, "-", "");
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПолучитьДанныеИзХранилища();
	КонецЕсли;	
	                                
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЛогинПарольИзменен Тогда
		СтруктураДляЗаписи = Новый Структура;
		СтруктураДляЗаписи.Вставить("Логин", Логин);
		СтруктураДляЗаписи.Вставить("Пароль", ДешифрованиеXor(ШифрованныйПароль, УИД));
		СтруктураДляЗаписи.Вставить("Период", Период);
	
		УстановитьПривилегированныйРежим(Истина);	
		РегистрыСведений.ЛогиныИПаролиХранилище.ЗаписатьДанныеВХранилище(ТекущийОбъект.Ссылка, СтруктураДляЗаписи);		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);	
	
	Пароль = ?(ШифрованныйПароль = Неопределено ИЛИ ШифрованныйПароль.Количество() = 0,	"",
		ДешифрованиеXor(ШифрованныйПароль, УИД));
		
	ЛогинДоИзменения			= Логин;
	ПарольДоИзменения			= Пароль;
	ПроверятьУникальностьПароля = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ОбновитьСписокВыбораЛогинов();
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	Элементы.ИсторияИзменений.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
			
	Если СокрЛП(Логин) = "" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Логин"" не заполнено'"), ,
			"Логин");
		Отказ = Истина;			
	КонецЕсли;
	
	Если Логин <> ЛогинДоИзменения
		ИЛИ Пароль <> ПарольДоИзменения Тогда
		ЛогинПарольИзменен = Истина;
	КонецЕсли;	
	
	ШифрованныйПароль = ШифрованиеXor(Пароль, УИД);
	
	// Проверка пароля на уникальность.
	Если Не Объект.Ссылка.Пустая() Тогда // Для первой записи не выполняем проверку. 
		Если ЛогинПарольИзменен 
			И ПроверятьУникальностьПароля
			И НЕ ПарольУникальный() Тогда
			Отказ = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаПарольНеУникальный", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, 
				НСтр("ru = 'Пароль уже использовался ранее. Продолжить?'"),
				РежимДиалогаВопрос.ДаНет);
			
			Возврат;
			
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	мТекущаяДата = ТекущаяДатаСеанса();
	Если ТекущийОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ТекущийОбъект.ДатаСоздания = мТекущаяДата;		
	Иначе
		ТекущийОбъект.ДатаКорректировки = мТекущаяДата;
	КонецЕсли;
	
	Если ТекущийОбъект.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	Иначе
		ТекущийОбъект.АвторКорректировки = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПароляПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьАвторНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НадписьАвторНажатиеЗавершение", ЭтотОбъект), 
		УправлениеITОтделом8УФКлиент.ПолучитьСписокНадписьАвтор(Объект), Элементы.НадписьАвтор, );
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
		
	ОбновитьСписокВыбораЛогинов();
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ИсторияИзмененийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсторияИзменений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Владелец", Объект.Ссылка);
	СтруктураЗаписи.Вставить("Период", 	ТекущиеДанные.Период);
		
	ОткрытьФорму("РегистрСведений.ЛогиныИПаролиХранилище.Форма.ФормаПросмотраПароля", СтруктураЗаписи, ЭтотОбъект,
		, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СкрытьПоказатьПароль(Команда)
	
	Элементы.СкрытьПоказатьПароль.Пометка = НЕ Элементы.СкрытьПоказатьПароль.Пометка;	
	Элементы.Пароль.РежимПароля = НЕ Элементы.СкрытьПоказатьПароль.Пометка;
	Если Элементы.Пароль.РежимПароля = Ложь Тогда
		ТекущийЭлемент = Элементы.Пароль;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПароль(Команда)
		
	ОткрытьФорму("Обработка.ФормированиеПароля.Форма",,,,,,
		Новый ОписаниеОповещения("СформироватьПарольЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьПарольЗавершение(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Ложь И Результат <> Неопределено Тогда
		Пароль = Результат.Пароль;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьДанныеИзХранилища()
	
	УстановитьПривилегированныйРежим(Истина);
	Данные	= РегистрыСведений.ЛогиныИПаролиХранилище.ПрочитатьДанныеИзХранилища(Объект.Ссылка);
	УстановитьПривилегированныйРежим(Ложь);
	
	Период				= Данные.Период;
	Логин				= Данные.Логин; 	
	ШифрованныйПароль	= ШифрованиеXor(Данные.Пароль, УИД);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДоступность()
		
	Элементы.СформироватьПароль.Видимость		= ВидимостьПаролей;
	Элементы.СкрытьПоказатьПароль.Видимость		= ВидимостьПаролей;
	
	Элементы.Объект.Заголовок = НСтр("ru = 'Владелец'");
	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Сотрудник'");
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.МестаХранения") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Место хранения'");
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Подразделения") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Подразделение'");
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Карточка номенклатуры'");
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Физическое лицо'");
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Контрагент'");
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Контактное лицо'");
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Организации") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Организация'");
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ПотенциальныеКлиенты") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Потенциальный клиент'");
	Иначе
		Элементы.Объект.Заголовок = НСтр("ru = 'Владелец'");
	КонецЕсли;
	
	Элементы.ГруппаПользователей.Видимость = Объект.ТипПароля = Перечисления.ТипыПаролей.ГруппыПользователей;	
	
	ПосчитатьКоличествоВСпискеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораЛогинов()
	
	Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЛогиныИПаролиХранилище.Логин КАК Логин
		|ИЗ
		|	РегистрСведений.ЛогиныИПаролиХранилище КАК ЛогиныИПаролиХранилище
		|ГДЕ
		|	ЛогиныИПаролиХранилище.Владелец.Объект = &Объект
		|УПОРЯДОЧИТЬ ПО
		|	Логин";
	
	Запрос.УстановитьПараметр("Объект", Объект.Объект);
	
	СписокВыбора = Элементы.Логин.СписокВыбора;
	СписокВыбора.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Логин);
	КонецЦикла;	
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура НадписьАвторНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт    
	// ТУТ НИЧЕГО			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ШифрованиеXor(Знач СтрокаДляШифрования, Знач Ключ)
	
	Результат = Новый СписокЗначений;
	Если ПустаяСтрока(СтрокаДляШифрования) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивДляОбработки = Новый Массив;
	Для Индекс = 1 По СтрДлина(СтрокаДляШифрования) Цикл
		МассивДляОбработки.Добавить(КодСимвола(Сред(СтрокаДляШифрования, Индекс, 1)));
	КонецЦикла;
	
	БуферКлюча	= ПолучитьБуферДвоичныхДанныхИзСтроки(Ключ);
	СчетчикКлюча= 0;
	ДлинаКлюча	= СтрДлина(Ключ);
	
	РезультатСписок = Новый СписокЗначений;
	Для Каждого Число1 Из МассивДляОбработки Цикл
		Число2		= БуферКлюча.Получить(СчетчикКлюча);			
		РезультатСписок.Добавить(ПобитовоеИсключительноеИли(Число1, Число2));
		СчетчикКлюча= (СчетчикКлюча + 1) % ДлинаКлюча;
	КонецЦикла;
	
	Возврат РезультатСписок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДешифрованиеXor(Знач мСписокЗначений, Знач Ключ)
	
	Результат = "";
	Если мСписокЗначений = Неопределено ИЛИ мСписокЗначений.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	БуферКлюча	= ПолучитьБуферДвоичныхДанныхИзСтроки(Ключ);
	СчетчикКлюча= 0;
	ДлинаКлюча	= СтрДлина(Ключ);
	
	Для Каждого Число1 Из мСписокЗначений Цикл
		Число2		= БуферКлюча.Получить(СчетчикКлюча);
		Результат	= Результат + Символ(ПобитовоеИсключительноеИли(Число1.Значение, Число2)); 
		СчетчикКлюча= (СчетчикКлюча + 1) % ДлинаКлюча;
	КонецЦикла;	
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПосчитатьКоличествоВСпискеНаСервере()
	
	Схема		= Элементы.ИсторияИзменений.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки	= Элементы.ИсторияИзменений.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета	= Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки		= КомпоновщикМакета.Выполнить(Схема, Настройки,
		, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= МакетКомпоновки.НаборыДанных.НаборДанныхДинамическогоСписка.Запрос;
	СтрокаВЫБРАТЬ	= Лев(Запрос.Текст, Найти(Запрос.Текст, Символы.ПС));
	
	Запрос.Текст	= СтрокаВЫБРАТЬ + "Количество(*) КАК Кол"
		+ Сред(Запрос.Текст, Найти(Запрос.Текст, Символы.ПС + "ИЗ" + Символы.ПС));
		
	Для Каждого Парам Из МакетКомпоновки.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(Парам.Имя, Парам.Значение);
	КонецЦикла;
	
	Результат	= Запрос.Выполнить();	
	Выборка		= Результат.Выбрать();
	Выборка.Следующий();	
	ИсторияИзмененийКоличество = Выборка.Кол;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидыНоменклатурыПоПО()
	
	СписокДляОтбораПоВидуНоменклатуры = Новый СписокЗначений;
	СписокДляОтбораПоВидуНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.ПрограммноеОбеспечение);
	СписокДляОтбораПоВидуНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.Лицензия);
	СписокДляОтбораПоВидуНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.СетевоеОборудование);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.МожетИметьIPАдрес = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокДляОтбораПоВидуНоменклатуры.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокДляОтбораПоВидуНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораПрограммы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Программа = Результат;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрограммаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип")	Тогда
			
			Если ВыбранноеЗначение = Тип(Новый ОписаниеТипов("Строка")) Тогда
				СтандартнаяОбработка = Истина;
				
			ИначеЕсли ЭтоТипНоменклатура(ВыбранноеЗначение) Тогда			
				СтандартнаяОбработка = Ложь;	
				ОткрытьФормуВыбораНоменклатуры();
				
			КонецЕсли;
			
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЭтоТипНоменклатура(Знач Значение)
	
	Возврат Метаданные.НайтиПоТипу(Значение).Имя = "Номенклатура";
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораНоменклатуры()
		
	Структура 		= Новый Структура();
	Структура.Вставить("Ключ", Объект.Программа);
	Структура.Вставить("ПросмотрСписком", Истина);
	Структура.Вставить("ВыбранноеЗначение", Объект.Программа);
	Структура.Вставить("СписокДляОтбораПоВидуНоменклатуры", ПолучитьВидыНоменклатурыПоПО());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПрограммы", ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", Структура, ЭтотОбъект,
		,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаПарольНеУникальный(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПроверятьУникальностьПароля = Ложь;
		ЭтотОбъект.Записать();
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция ПарольУникальный()
	
	Результат = Истина;
	УстанавливаемыйПароль = ДешифрованиеXor(ШифрованныйПароль, УИД);
	Если ПустаяСтрока(УстанавливаемыйПароль) Тогда // Пустой пароль не проверяем.
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = РегистрыСведений.ЛогиныИПаролиХранилище.ПарольУникальный(Объект.Ссылка, УстанавливаемыйПароль);  
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти