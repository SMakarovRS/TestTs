
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЕстьПолныеПрава		= УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава");
	
	КатегорииБазыЗнаний.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь); 
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	
	Если Параметры.Свойство("ОтображатьВозможныеРешения") 
		И Параметры.Свойство("МассивПредметов")
		И Параметры.МассивПредметов.Количество() > 0 Тогда
		СписокПредметов.ЗагрузитьЗначения(Параметры.МассивПредметов);
		Если Параметры.СписокВыбранныхСтатей.количество() > 0 Тогда
			СписокВыбранныхСтатей.ЗагрузитьЗначения(Параметры.СписокВыбранныхСтатей.ВыгрузитьЗначения());
		КонецЕсли;	
		ЗаполнитьВозможныеРешенияНаСервере();
		УстановитьУсловноеОформление();
	Иначе
		Элементы.СтраницаВозможныеРешения.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	Если Параметры.РежимВыбора Тогда
		КлючНазначенияИспользования = "ВыборПодбор";
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Если Параметры.Свойство("ЗакрыватьПриВыборе") И Параметры.ЗакрыватьПриВыборе <> Неопределено Тогда
			ЭтотОбъект.ЗакрыватьПриВыборе = Параметры.ЗакрыватьПриВыборе;
		КонецЕсли;	
	Иначе
		КлючНазначенияИспользования = "Список";
	КонецЕсли;
	
	Параметры.Свойство("ПредметСтатьи", ПредметСтатьи);	
	
	Если Элементы.СтраницаВозможныеРешения.Видимость = Ложь Тогда
		ОбновитьЭлементыИУстановитьОтбор();	
		ЗагрузитьНастройкиФормы();
	КонецЕсли;	
	
	УстановитьВидимостьИДоступность();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Решения, "Владелец", 
		ПредопределенноеЗначение("Справочник.СтатьиБазыЗнаний.ПустаяСсылка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "БазаЗнаний_ЗаписьСтатьи" Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСписокСтатей", 0.2, Истина);
	ИначеЕсли ИмяСобытия = "БазаЗнаний_РедактированиеСтатьи" Тогда		
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "БазаЗнаний_ЗаписьКатегории" Тогда		
		Элементы.КатегорииБазыЗнаний.Обновить();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Попытка
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("СтрокаПоискаСписокВыбора", Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());	
	СохранитьНастройкиФормы(СтруктураНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбработчикОжидания_СписокПриАктивизацииСтроки", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжидания_СписокПриАктивизацииСтроки", 0.2, Истина);
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;		
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьКнопокБлокировки(ТекущиеДанные.Редактирует);
	
КонецПроцедуры

&НаКлиенте
Процедура ТегОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;	
	СтандартнаяОбработка = Ложь;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Теги") Тогда
		ДобавитьЭлементВТаблицуОтборов(ВыбранноеЗначение, "ОтборыГруппыТеги");		
		ОбновитьЭлементыИУстановитьОтбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыОтборовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущиеДанныеКатегории = Элементы.КатегорииБазыЗнаний.ТекущиеДанные;
	ТекущаяКатегория 	   = ?(ТекущиеДанныеКатегории = Неопределено, 
		ПредопределенноеЗначение("Справочник.КатегорииБазыЗнаний.ПустаяСсылка"), ТекущиеДанныеКатегории.Ссылка);
		
	Если Элементы.СтраницаВозможныеРешения.Видимость Тогда
		ТекущиеДанныеВозможныеРешения = Элементы.ВозможныеРешения.ТекущиеДанные;
		ТекущийЭлементРешения         = ?(ТекущиеДанныеВозможныеРешения = Неопределено, НСтр("ru = 'Возможные решения'"), 
			ТекущиеДанныеВозможныеРешения.ЭлементРешения);
			
	КонецЕсли;	
	
	Если ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
		ПредыдущаяКатегория = ТекущаяКатегория; 
		ВыполнитьОткрытиеСтраницыПоиск(ТекущаяКатегория);
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКатегории Тогда		
		ВыполнитьОткрытиеСтраницыКатегории();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВозможныеРешения Тогда
		ПредыдущийЭлементВозможногоРешения = ТекущийЭлементРешения; 
		ПриАктивизацииСтрокиВозможныеРешенияНаСервере(?(ПредыдущийЭлементВозможногоРешения = НСтр("ru = 'Возможные решения'"),
			Неопределено, ПредыдущийЭлементВозможногоРешения));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КатегорииБазыЗнаний") Тогда
		ДобавитьЭлементВТаблицуОтборов(ВыбранноеЗначение, "ОтборыГруппыКатегории");		
		ОбновитьЭлементыИУстановитьОтбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда		
		НайденныйЭлемент = Элементы.СтрокаПоиска.СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.СтрокаПоиска.СписокВыбора.Удалить(НайденныйЭлемент);
		КонецЕсли;		
		Элементы.СтрокаПоиска.СписокВыбора.Вставить(0, СтрокаПоиска);
		Если Элементы.СтрокаПоиска.СписокВыбора.Количество() > 10 Тогда
			Элементы.СтрокаПоиска.СписокВыбора.Удалить(10);
		КонецЕсли;		
	КонецЕсли;
	
	УстановитьОтборы();
		
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.СтрокаПоиска.ЦветФона = WebЦвета.Белый;
	РаботаСОтборамиКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Ссылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборАвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;	
	СтандартнаяОбработка = Ложь;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		ДобавитьЭлементВТаблицуОтборов(ВыбранноеЗначение, "ОтборыГруппыАвторы");		
		ОбновитьЭлементыИУстановитьОтбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект);	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ОтборПериод;	
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПользователяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если НЕ ТипЗНЧ(ВыбранноеЗначение) = Тип("Тип") Тогда			
			СтандартнаяОбработка = Ложь;
			ДобавитьЭлементВТаблицуОтборов(ВыбранноеЗначение, "ОтборыПользователя");		
			ОбновитьЭлементыИУстановитьОтбор();			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСервисОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;	
	СтандартнаяОбработка = Ложь;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сервисы") Тогда
		ДобавитьЭлементВТаблицуОтборов(ВыбранноеЗначение, "ОтборыГруппыСервисы");		
		ОбновитьЭлементыИУстановитьОтбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроцессОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;	
	СтандартнаяОбработка = Ложь;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Процессы") Тогда
		ДобавитьЭлементВТаблицуОтборов(ВыбранноеЗначение, "ОтборыГруппыПроцессы");		
		ОбновитьЭлементыИУстановитьОтбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборSLAОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;	
	СтандартнаяОбработка = Ложь;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СоглашениеSLA") Тогда
		ДобавитьЭлементВТаблицуОтборов(ВыбранноеЗначение, "ОтборыГруппыSLA");		
		ОбновитьЭлементыИУстановитьОтбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Список.РежимВыбора Тогда
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		СтандартнаяОбработка = Ложь;	
				
		Если ЭтотОбъект.ЗакрыватьПриВыборе Тогда
			ОповеститьОВыборе(ТекущиеДанные.Ссылка);
		Иначе
			ДобавитьСтатьюКПредмету(ТекущиеДанные.Ссылка);
			Оповестить("БазаЗнаний_ДобавленаСвязаннаяСтатья");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗахватитьНаРедактирование(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Результат = ЗахватитьНаРедактированиеНаСервере(ТекущиеДанные.Ссылка);	
	Элементы.Список.Обновить();
	Если Результат И Элементы.Список.ТекущиеДанные <> Неопределено Тогда		
		УстановитьДоступностьКнопокБлокировки(Элементы.Список.ТекущиеДанные.Редактирует);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("Статья", ТекущиеДанные.Ссылка);
	Если ЗначениеЗаполнено(ТекущиеДанные.Редактирует)
		И ТекущиеДанные.Редактирует <> ТекущийПользователь Тогда
		
		Если ЕстьПолныеПрава Тогда
			ОбработкаОповещения	= Новый ОписаниеОповещения("ЗавершитьРедактированиеАдминистратором", ЭтотОбъект, ДопПараметры);
			ТекстВопроса		= НСтр("ru='При завершении редактирования администратором возможна потеря данных в параллельных сессиях.
			|Вы уверены что хотите продолжить?'");
			
			ПоказатьВопрос(ОбработкаОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, , 
				КодВозвратаДиалога.Нет);
				
		Иначе 
			Возврат;
		КонецЕсли;
	Иначе 
		ЗавершитьРедактированиеАдминистратором(КодВозвратаДиалога.Да, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеФильтры(Команда)
	
	ВыполнитьОткрытиеСтраницыПоиск(ПредопределенноеЗначение("Справочник.КатегорииБазыЗнаний.ПустаяСсылка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатью(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Редактор = ТекущиеДанные.Редактирует;
	Если ЗначениеЗаполнено(Редактор) И Редактор <> ПользователиКлиент.ТекущийПользователь() Тогда
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru='Статья ""%1"" захвачена пользователем ""%2"" на редактирование.'"),
			Строка(ТекущиеДанные.Ссылка),
			Строка(Редактор));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка); 	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеСтатьи", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДоступностьКнопокБлокировки(РедакторСтатьи = Неопределено)
	
	Если НЕ Элементы.ФормаГруппаБлокировкаСтатьи.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьЗахвата		= Ложь;
	ДоступностьОсвобождения	= Ложь;
	
	Если НЕ ЗначениеЗаполнено(РедакторСтатьи) Тогда
		ДоступностьЗахвата = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(РедакторСтатьи) И (РедакторСтатьи = ТекущийПользователь ИЛИ ЕстьПолныеПрава) Тогда
		ДоступностьОсвобождения = Истина;
	КонецЕсли;
	
	Элементы.ЗахватитьНаРедактирование.Доступность		= ДоступностьЗахвата;
	Элементы.МенюЗахватитьНаРедактирование.Доступность	= ДоступностьЗахвата;
	Элементы.ЗавершитьРедактирование.Доступность		= ДоступностьОсвобождения;
	Элементы.МенюЗавершитьРедактирование.Доступность	= ДоступностьОсвобождения;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗахватитьНаРедактированиеНаСервере(СтатьяСсылка)
	
	Возврат Справочники.СтатьиБазыЗнаний.ЗахватитьСтатьюНаРедактирование(СтатьяСсылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗавершитьРедактированиеНаСервере(СтатьяСсылка)
	
	Возврат Справочники.СтатьиБазыЗнаний.ЗавершитьРедактированиеСтатьи(СтатьяСсылка);
	
КонецФункции

&НаКлиенте
Процедура КатегорииБазыЗнанийПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаКатегории Тогда
		Если Элементы.КатегорииБазыЗнаний.ТекущиеДанные = Неопределено Тогда					
			ПредыдущаяКатегория = ПредопределенноеЗначение("Справочник.КатегорииБазыЗнаний.ПустаяСсылка");
			ПодключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСписокСтатей", 0.2, Истина);
		Иначе		
			Если Элементы.КатегорииБазыЗнаний.ТекущиеДанные.Ссылка <> ПредыдущаяКатегория Тогда 
				ПредыдущаяКатегория = Элементы.КатегорииБазыЗнаний.ТекущиеДанные.Ссылка;				
				ПодключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСписокСтатей", 0.2, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжидания_ОбновитьСписокСтатей()
	
	ВыполнитьОткрытиеСтраницыКатегории();
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьСтатьюКПредмету(Статья)
	
	НаборЗаписей = РегистрыСведений.СвязьСтатейБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Статья.Установить(Статья);
	НаборЗаписей.Отбор.Объект.Установить(ПредметСтатьи);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда		
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Данная статья уже добавлена к предмету ""%1""'"), 
			ПредметСтатьи));
		Возврат;
	КонецЕсли;
	СтрокаНабора = НаборЗаписей.Добавить();
	СтрокаНабора.Статья = Статья;
	СтрокаНабора.Объект = ПредметСтатьи;
	СтрокаНабора.Дата   = ТекущаяДатаСеанса();
	СтрокаНабора.Пользователь = Пользователи.ТекущийПользователь();
	
	Попытка
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Если УправлениеITОтделом8УФПовтИсп.Право("ДобавлениеИзменениеБазыЗнаний") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") Тогда		
		Элементы.ФормаГруппаБлокировкаСтатьи.Видимость = Истина; 
		Элементы.ФормаИзменитьСтатью.Видимость		   = Истина;
	Иначе
		Элементы.ФормаГруппаБлокировкаСтатьи.Видимость = Ложь; 
		Элементы.ФормаИзменитьСтатью.Видимость		   = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	УстановитьПривилегированныйРежим(Истина);	
	НастройкиТекущегоПользователя 	= "БазаЗнаний_ФормаСпискаСтатей_Настройки_" 
		+ Пользователи.ТекущийПользователь().Наименование;
	Настройки 						= ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы, НастройкиТекущегоПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Настройки <> Неопределено Тогда
		Попытка Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(Настройки.СтрокаПоискаСписокВыбора);
		Исключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы(СтруктураНастроек)
	
	УстановитьПривилегированныйРежим(Истина);	
	НастройкиТекущегоПользователя 	= "БазаЗнаний_ФормаСпискаСтатей_Настройки_"
		+ Пользователи.ТекущийПользователь().Наименование;
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, НастройкиТекущегоПользователя, СтруктураНастроек);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементВТаблицуОтборов(ОтборСсылка, ГруппаЭлементов)
		
	НайденныеСтроки = ЭтотОбъект.ТаблицаОтборов.НайтиСтроки(Новый Структура("ЭлементОтбора, ИмяГруппыЭлементов",
		ОтборСсылка, ГруппаЭлементов));
	
	Если НайденныеСтроки.Количество() > 0 Тогда						
		ЭтотОбъект.ТаблицаОтборов.Удалить(НайденныеСтроки[0]);		
	КонецЕсли;
	
	НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
	НоваяСтрока.ЭлементОтбора      = ОтборСсылка;
	НоваяСтрока.ИмяГруппыЭлементов = ГруппаЭлементов;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыИУстановитьОтбор()
	
	ОбновитьПредставлениеПериода();	
	ОбновитьЭлементыОтборов();
	УстановитьОтборы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборы()
		
	Если Элементы.СтраницаВозможныеРешения.Видимость 
		И Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаВозможныеРешения Тогда
		УстановитьОтборыВозможныеРешения();
		Возврат;
	КонецЕсли;
	
	СписокКатегорий = ТаблицаОтборов.Выгрузить(
		Новый Структура("ИмяГруппыЭлементов", "ОтборыГруппыКатегории")).ВыгрузитьКолонку("ЭлементОтбора");
	СписокАвторов   = ТаблицаОтборов.Выгрузить(
		Новый Структура("ИмяГруппыЭлементов", "ОтборыГруппыАвторы")).ВыгрузитьКолонку("ЭлементОтбора");
	СписокТегов		= ТаблицаОтборов.Выгрузить(
		Новый Структура("ИмяГруппыЭлементов", "ОтборыГруппыТеги")).ВыгрузитьКолонку("ЭлементОтбора");
	СписокОбъектов  = ТаблицаОтборов.Выгрузить(
		Новый Структура("ИмяГруппыЭлементов", "ОтборыПользователя")).ВыгрузитьКолонку("ЭлементОтбора");
	СписокСервисов  = ТаблицаОтборов.Выгрузить(
		Новый Структура("ИмяГруппыЭлементов", "ОтборыГруппыСервисы")).ВыгрузитьКолонку("ЭлементОтбора");
	СписокПроцессов = ТаблицаОтборов.Выгрузить(
		Новый Структура("ИмяГруппыЭлементов", "ОтборыГруппыПроцессы")).ВыгрузитьКолонку("ЭлементОтбора");
	СписокSLA       = ТаблицаОтборов.Выгрузить(
		Новый Структура("ИмяГруппыЭлементов", "ОтборыГруппыSLA")).ВыгрузитьКолонку("ЭлементОтбора");
	
	Если СписокСервисов.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокОбъектов, СписокСервисов, Истина); 
	КонецЕсли;
	
	Если СписокПроцессов.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокОбъектов, СписокПроцессов, Истина); 
	КонецЕсли;
	
	Если СписокSLA.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокОбъектов, СписокSLA, Истина); 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтатьиБазыЗнаний.Ссылка
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязьКлючевыхСловБазыЗнаний КАК СвязьКлючевыхСловБазыЗнаний
		|		ПО СтатьиБазыЗнаний.Ссылка = СвязьКлючевыхСловБазыЗнаний.СтатьяБазыЗнаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязьСтатейБазыЗнаний КАК СвязьСтатейБазыЗнаний
		|		ПО СтатьиБазыЗнаний.Ссылка = СвязьСтатейБазыЗнаний.Статья
		|ГДЕ
		|	ИСТИНА
		|	И &ДопУсловия";
		
	ДопУсловия = "";
	
	Если СписокАвторов.Количество() > 0 Тогда
		ДопУсловия = ДопУсловия + " И СтатьиБазыЗнаний.Автор В(&СписокАвторов)";
		Запрос.УстановитьПараметр("СписокАвторов", СписокАвторов);
	КонецЕсли;
	
	Если СписокКатегорий.Количество() > 0 Тогда
		ДопУсловия = ДопУсловия + " И СтатьиБазыЗнаний.Категории.Категория В(&СписокКатегорий)";
		Запрос.УстановитьПараметр("СписокКатегорий", СписокКатегорий);		
	КонецЕсли;
	
	Если СписокТегов.Количество() > 0 Тогда
		ДопУсловия = ДопУсловия + " И СвязьКлючевыхСловБазыЗнаний.Тег В(&СписокТегов)";			
		Запрос.УстановитьПараметр("СписокТегов", СписокТегов);	
	КонецЕсли;
	
	Если СписокОбъектов.Количество() > 0 Тогда
		ДопУсловия = ДопУсловия + " И СвязьСтатейБазыЗнаний.Объект В(&СписокОбъектов)";			
		Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПериод) Тогда
		ДопУсловия = ДопУсловия 
			+ " И СтатьиБазыЗнаний.ДатаСоздания >= &ДатаНачала И СтатьиБазыЗнаний.ДатаСоздания <= &ДатаОкончания";
		Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(ОтборПериод.ДатаНачала));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ОтборПериод.ДатаОкончания));
	КонецЕсли;
	
	БазаЗнанийВызовСервера.УстановитьПараметрыЗапросаПоСтрокеПоиска(СтрокаПоиска, Запрос, ДопУсловия);  
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если МассивСсылок.Количество() > 0 Тогда
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ссылка", МассивСсылок, Истина,
			ВидСравненияКомпоновкиДанных.ВСписке);
	Иначе
		Если Не ПустаяСтрока(СтрокаПоиска) Тогда
			Элементы.СтрокаПоиска.ЦветФона = WebЦвета.Розовый;
		КонецЕсли;	
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ссылка", 
			Справочники.СтатьиБазыЗнаний.ПустаяСсылка(), Истина);
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыОтборов(НужноУдалитьЭлементы = Истина)
	
	Если НужноУдалитьЭлементы Тогда
		УдалитьЭлементыОтборов();
	КонецЕсли;	
			
	ГруппаРодитель 	 = Неопределено;
	НомерСтрокиГрупп = 0;
	ТекущаяШирина	 = 0;
	ШрифтПоУмолчанию = Новый Шрифт("ANSI моноширинный шрифт");
	НомерСтроки      = 0;	
	
	Для Каждого Строки Из ЭтотОбъект.ТаблицаОтборов Цикл					
		Если ГруппаРодитель = Неопределено 
			ИЛИ ТекущаяШирина + СтрДлина(Строка(Строки.ЭлементОтбора)) + 3 > 35
			ИЛИ СтрНайти(ГруппаРодитель.Имя, Элементы[Строки.ИмяГруппыЭлементов].Имя) = 0 Тогда			
			ГруппаРодитель 						= Элементы.Добавить(Элементы[Строки.ИмяГруппыЭлементов].Имя 
				+ НомерСтрокиГрупп, Тип("ГруппаФормы"), Элементы[Строки.ИмяГруппыЭлементов]);
			ГруппаРодитель.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаРодитель.Отображение 			= ОтображениеОбычнойГруппы.Нет;
			ГруппаРодитель.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаРодитель.ОтображатьЗаголовок 	= Ложь;			
			НомерСтрокиГрупп 					= НомерСтрокиГрупп + 3;
			ТекущаяШирина 						= 0;
			
		КонецЕсли;
		
		Поле = Элементы.Добавить(Строки.ИмяГруппыЭлементов + "N" + Формат(НомерСтроки, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="), 
			Тип("ДекорацияФормы"), ГруппаРодитель);
			
		МассивСтрок    = Новый Массив;                                                       
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.УдалитьТег,,,, 
			Строки.ИмяГруппыЭлементов + Формат(НомерСтроки, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=")));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" " + Строка(Строки.ЭлементОтбора), ШрифтПоУмолчанию));		
		Поле.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок,,, WebЦвета.СветлоЖелтый);
		Поле.РастягиватьПоГоризонтали = Ложь;
		Поле.Подсказка = Поле.Заголовок;
		Поле.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_УдалениеЭлементаОтбораФормы");
		ТекущаяШирина  = ТекущаяШирина + СтрДлина(Строка(Строки.ЭлементОтбора)) + 3;
		НомерСтроки    = НомерСтроки + 1;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалениеЭлементаОтбораФормы(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	УдалитьЭлементОтбораНаСервере(НавигационнаяСсылка);
		
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементОтбораНаСервере(НавигационнаяСсылка)
	
	Если СтрНайти(НавигационнаяСсылка, "ОтборыГруппыКатегории") > 0 Тогда		
		ГруппаЭлементов = "ОтборыГруппыКатегории";
	ИначеЕсли СтрНайти(НавигационнаяСсылка, "ОтборыГруппыТеги") > 0 Тогда		
		ГруппаЭлементов = "ОтборыГруппыТеги";
	ИначеЕсли СтрНайти(НавигационнаяСсылка, "ОтборыГруппыАвторы") > 0 Тогда		
		ГруппаЭлементов = "ОтборыГруппыАвторы";
	ИначеЕсли СтрНайти(НавигационнаяСсылка, "ОтборыПользователя") > 0 Тогда		
		ГруппаЭлементов = "ОтборыПользователя";
	ИначеЕсли СтрНайти(НавигационнаяСсылка, "ОтборыГруппыСервисы") > 0 Тогда		
		ГруппаЭлементов = "ОтборыГруппыСервисы";
	ИначеЕсли СтрНайти(НавигационнаяСсылка, "ОтборыГруппыПроцессы") > 0 Тогда		
		ГруппаЭлементов = "ОтборыГруппыПроцессы";
	ИначеЕсли СтрНайти(НавигационнаяСсылка, "ОтборыГруппыSLA") > 0 Тогда		
		ГруппаЭлементов = "ОтборыГруппыSLA";	
	КонецЕсли;	
	
	УдалитьЭлементыОтборов();
	ИндексСтроки   = Сред(НавигационнаяСсылка, СтрДлина(ГруппаЭлементов) + 1);
	ТаблицаОтборов.Удалить(ИндексСтроки);			
	ОбновитьЭлементыОтборов(Ложь);
	УстановитьОтборы();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыОтборов(СписокГруппЭлементовОтбора = Неопределено)
	
	УдаляемыеЭлементы = Новый Массив;
	Если СписокГруппЭлементовОтбора = Неопределено Тогда
		ТЗОтборы          = ТаблицаОтборов.Выгрузить();
		ТЗОтборы.Свернуть("ИмяГруппыЭлементов");
		СписокОтборов	  = ТЗОтборы.ВыгрузитьКолонку("ИмяГруппыЭлементов");			
		Для Каждого ЭлементСписка Из СписокОтборов Цикл
			Для Каждого ЭлементФормы Из Элементы[ЭлементСписка].ПодчиненныеЭлементы Цикл
				УдаляемыеЭлементы.Добавить(ЭлементФормы);
			КонецЦикла;	
		КонецЦикла;
	Иначе		
		Для Каждого ЭлементСписка Из СписокГруппЭлементовОтбора Цикл
			Для Каждого ЭлементФормы Из Элементы[ЭлементСписка].ПодчиненныеЭлементы Цикл
				УдаляемыеЭлементы.Добавить(ЭлементФормы);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли; 	
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьОткрытиеСтраницыКатегории()
	
	РаботаСОтборамиКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Ссылка");
	ТаблицаОтборов.Очистить();		
	ОтборПериод = Новый СтандартныйПериод;
	Если ЗначениеЗаполнено(ПредыдущаяКатегория) Тогда
		Если Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаКатегории Тогда 
			ДобавитьЭлементВТаблицуОтборов(ПредыдущаяКатегория, "ОтборыГруппыКатегории");
		КонецЕсли;
	КонецЕсли;	
	УстановитьОтборы();
	
КонецПроцедуры	

&НаСервере
Процедура ВыполнитьОткрытиеСтраницыПоиск(ТекущаяКатегория)	
	
	РаботаСОтборамиКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Ссылка");
	ТаблицаОтборов.Очистить();
	ОтборПериод = Новый СтандартныйПериод;
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить("ОтборыГруппыКатегории");
	МассивГрупп.Добавить("ОтборыГруппыТеги");	
	МассивГрупп.Добавить("ОтборыГруппыСервисы");
	МассивГрупп.Добавить("ОтборыГруппыПроцессы");
	МассивГрупп.Добавить("ОтборыГруппыSLA");
	МассивГрупп.Добавить("ОтборыГруппыАвторы");
	МассивГрупп.Добавить("ОтборыПользователя");
	
	УдалитьЭлементыОтборов(МассивГрупп);	
	Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда
		НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
		НоваяСтрока.ЭлементОтбора      = ТекущаяКатегория;
		НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыКатегории";
	КонецЕсли;	
	ОбновитьЭлементыИУстановитьОтбор();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(НовыйПериод, Параметры) Экспорт
	
	Если НовыйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НовыйПериод)=Тип("СтандартныйПериод") Тогда
		ОтборПериод = НовыйПериод;
	ИначеЕсли ТипЗнч(НовыйПериод)=Тип("Дата") Тогда
		ОтборПериод.ДатаОкончания = НовыйПериод;
	КонецЕсли;	
	
	ОбновитьЭлементыИУстановитьОтбор();
	
	#Если ВебКлиент Тогда
		ОбновитьОтображениеДанных();
	#КонецЕсли 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеПериода()
	
	Если НЕ ЗначениеЗаполнено(ОтборПериод) ИЛИ (НЕ ЗначениеЗаполнено(ОтборПериод.ДатаНачала) 
		И НЕ ЗначениеЗаполнено(ОтборПериод.ДатаОкончания)) Тогда
		ПредставлениеПериода = НСтр("ru = 'Период: за все время'");
	Иначе
		ДатаОкончанияПериода = ?(ЗначениеЗаполнено(ОтборПериод.ДатаОкончания), КонецДня(ОтборПериод.ДатаОкончания), 
			ОтборПериод.ДатаОкончания);
			
		Если ДатаОкончанияПериода < ОтборПериод.ДатаНачала Тогда			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбрана дата окончания периода, которая меньше даты начала'"));
			ПредставлениеПериода = НСтр("ru = 'с '") + Формат(ОтборПериод.ДатаНачала, "ДФ=dd.MM.yyyy");
		Иначе
			ПредставлениеПериода = НСтр("ru = 'за '") + НРег(ПредставлениеПериода(ОтборПериод.ДатаНачала, ДатаОкончанияПериода));
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МассивДоступныхКатегорийСтатей()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КатегорииБазыЗнаний.Ссылка
		|ИЗ
		|	Справочник.КатегорииБазыЗнаний КАК КатегорииБазыЗнаний
		|ГДЕ
		|	ВЫБОР
		|			КОГДА КатегорииБазыЗнаний.ТипКатегории = ЗНАЧЕНИЕ(Перечисление.ТипыКатегорийСтатейБазыЗнаний.Приватная)
		|				ТОГДА ВЫБОР
		|						КОГДА КатегорииБазыЗнаний.Автор = &ТекущийПользователь
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");

КонецФункции

&НаКлиенте
Процедура ЗавершитьРедактированиеАдминистратором(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьРедактированиеНаСервере(ДопПараметры.Статья);
	
	Элементы.Список.Обновить();
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьДоступностьКнопокБлокировки(ТекущиеДанные.Редактирует);
	КонецЕсли;
	
	Оповестить("БазаЗнаний_ЗаписьСтатьи");
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ПросмотрСтатьи(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, , , , , );
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозможныеРешенияНаСервере()
	
	ПриАктивизацииСтрокиВозможныеРешенияНаСервере(Неопределено, Истина);	
		
КонецПроцедуры

&НаКлиенте
Процедура ВозможныеРешенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВозможныеРешения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , ТекущиеДанные.ЭлементРешения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВозможныеРешенияПриАктивизацииСтроки(Элемент)
			
	Если Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаВозможныеРешения Тогда
		Если Элементы.ВозможныеРешения.ТекущиеДанные = Неопределено Тогда					
			ПредыдущийЭлементВозможногоРешения = НСтр("ru = 'Возможные решения'");
			ПодключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСписокВозможныхРешений", 0.2, Истина);
		Иначе		
			Если Элементы.ВозможныеРешения.ТекущиеДанные.ЭлементРешения <> ПредыдущийЭлементВозможногоРешения Тогда 
				ПредыдущийЭлементВозможногоРешения = Элементы.ВозможныеРешения.ТекущиеДанные.ЭлементРешения;				
				ПодключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСписокВозможныхРешений", 0.2, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжидания_ОбновитьСписокВозможныхРешений()
	
	ТекущиеДанные = Элементы.ВозможныеРешения.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭлементРешения = НСтр("ru = 'Возможные решения'") Тогда
		ПриАктивизацииСтрокиВозможныеРешенияНаСервере();
	Иначе
		ПриАктивизацииСтрокиВозможныеРешенияНаСервере(ТекущиеДанные.ЭлементРешения);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриАктивизацииСтрокиВозможныеРешенияНаСервере(ЭлементРешения = Неопределено, ПервоеОткрытие = Ложь)
	
	РаботаСОтборамиКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Ссылка");
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтатьиБазыЗнаний.Ссылка КАК Ссылка,
		|	СвязьСтатейБазыЗнаний.Объект КАК Объект
		|ПОМЕСТИТЬ ВТ_Статьи
		|ИЗ
		|	РегистрСведений.СвязьСтатейБазыЗнаний КАК СвязьСтатейБазыЗнаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
		|		ПО СвязьСтатейБазыЗнаний.Статья = СтатьиБазыЗнаний.Ссылка
		|ГДЕ
		|	СвязьСтатейБазыЗнаний.Объект В(&МассивПредметов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиБазыЗнаний.Ссылка,
		|	СвязьКлючевыхСловБазыЗнаний.Тег
		|ИЗ
		|	РегистрСведений.СвязьКлючевыхСловБазыЗнаний КАК СвязьКлючевыхСловБазыЗнаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
		|		ПО СвязьКлючевыхСловБазыЗнаний.СтатьяБазыЗнаний = СтатьиБазыЗнаний.Ссылка
		|ГДЕ
		|	СвязьКлючевыхСловБазыЗнаний.Тег В(&МассивПредметов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Статьи.Ссылка КАК Ссылка,
		|	ВТ_Статьи.Объект КАК Объект
		|ИЗ
		|	ВТ_Статьи КАК ВТ_Статьи
		|ГДЕ
		|	ВТ_Статьи.Ссылка.Категории.Категория В
		|			(ВЫБРАТЬ
		|				СправочникКатегорииБазыЗнаний.Ссылка
		|			ИЗ
		|				Справочник.КатегорииБазыЗнаний КАК СправочникКатегорииБазыЗнаний
		|			ГДЕ
		|				ВЫБОР
		|					КОГДА СправочникКатегорииБазыЗнаний.ТипКатегории = ЗНАЧЕНИЕ(Перечисление.ТипыКатегорийСтатейБазыЗнаний.Приватная)
		|						ТОГДА ВЫБОР
		|								КОГДА СправочникКатегорииБазыЗнаний.Автор = &ТекущийПользователь
		|									ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)";
		
	Запрос.УстановитьПараметр("МассивПредметов", 	 ?(ЭлементРешения = Неопределено, СписокПредметов, ЭлементРешения));
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Выборка = Запрос.Выполнить().Выбрать();	
	Если ПервоеОткрытие Тогда
		Если Выборка.Количество() > 0 Тогда
			Элементы.СтраницаВозможныеРешения.Видимость = Истина;		
			СтрокаРешений = ВозможныеРешения.ПолучитьЭлементы().Добавить();
			СтрокаРешений.ЭлементРешения              = НСтр("ru = 'Возможные решения'");
			СтрокаРешений.ЭлементРешенияПредставление = НСтр("ru = 'Связанные объекты'");
			ПредыдущийЭлементВозможногоРешения        = НСтр("ru = 'Возможные решения'");
			МассивСсылок   = Новый Массив;
			МассивОбъектов = Новый Массив;
			Пока Выборка.Следующий() Цикл
				Если МассивСсылок.Найти(Выборка.Ссылка) = Неопределено Тогда
					МассивСсылок.Добавить(Выборка.Ссылка);
				КонецЕсли;	
				Если МассивОбъектов.Найти(Выборка.Объект) = Неопределено Тогда
					МассивОбъектов.Добавить(Выборка.Объект);
					НоваяСтрока = СтрокаРешений.ПолучитьЭлементы().Добавить();
					НоваяСтрока.ЭлементРешения = Выборка.Объект;
					НоваяСтрока.ЭлементРешенияПредставление = Строка(Выборка.Объект) + " (" + Строка(ТипЗНЧ(Выборка.Объект)) + ")";
					Если ОбщегоНазначения.ЭтоДокумент(Выборка.Объект.Метаданные()) Тогда
						НоваяСтрока.Картинка = БиблиотекаКартинок.Документ;
					ИначеЕсли ОбщегоНазначения.ЭтоСправочник(Выборка.Объект.Метаданные()) Тогда
						НоваяСтрока.Картинка = БиблиотекаКартинок.Справочник;
					Иначе
						НоваяСтрока.Картинка = БиблиотекаКартинок.Реквизит;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			Элементы.СтраницаВозможныеРешения.Заголовок = "Возможные решения (" + Строка(МассивСсылок.Количество()) + ")";
			РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ссылка", МассивСсылок, Истина, 
				ВидСравненияКомпоновкиДанных.ВСписке);
				
		Иначе
			Элементы.СтраницаВозможныеРешения.Видимость = Ложь;	
		КонецЕсли;
		
	Иначе	
		МассивСсылок = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Если МассивСсылок.Найти(Выборка.Ссылка) = Неопределено Тогда
				МассивСсылок.Добавить(Выборка.Ссылка);
			КонецЕсли;			 
		КонецЦикла;	
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ссылка", МассивСсылок, Истина,
			ВидСравненияКомпоновкиДанных.ВСписке);
			
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьОтборыВозможныеРешения()
	
	РаботаСОтборамиКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Ссылка");	
	
	Если ПредыдущийЭлементВозможногоРешения = Неопределено 
		ИЛИ ПредыдущийЭлементВозможногоРешения = НСтр("ru = 'Возможные решения'") Тогда
		
		ЭлементРешения = Неопределено;
		
	Иначе
		
		ЭлементРешения = ПредыдущийЭлементВозможногоРешения;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;		
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтатьиБазыЗнаний.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Статьи
		|ИЗ
		|	РегистрСведений.СвязьСтатейБазыЗнаний КАК СвязьСтатейБазыЗнаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
		|		ПО СвязьСтатейБазыЗнаний.Статья = СтатьиБазыЗнаний.Ссылка
		|ГДЕ
		|	СвязьСтатейБазыЗнаний.Объект В(&МассивПредметов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиБазыЗнаний.Ссылка
		|ИЗ
		|	РегистрСведений.СвязьКлючевыхСловБазыЗнаний КАК СвязьКлючевыхСловБазыЗнаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
		|		ПО СвязьКлючевыхСловБазыЗнаний.СтатьяБазыЗнаний = СтатьиБазыЗнаний.Ссылка
		|ГДЕ
		|	СвязьКлючевыхСловБазыЗнаний.Тег В(&МассивПредметов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Статьи.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_Статьи КАК ВТ_Статьи
		|ГДЕ
		|	ВТ_Статьи.Ссылка.Категории.Категория В
		|			(ВЫБРАТЬ
		|				СправочникКатегорииБазыЗнаний.Ссылка
		|			ИЗ
		|				Справочник.КатегорииБазыЗнаний КАК СправочникКатегорииБазыЗнаний
		|			ГДЕ
		|				ВЫБОР
		|					КОГДА СправочникКатегорииБазыЗнаний.ТипКатегории = ЗНАЧЕНИЕ(Перечисление.ТипыКатегорийСтатейБазыЗнаний.Приватная)
		|						ТОГДА ВЫБОР
		|								КОГДА СправочникКатегорииБазыЗнаний.Автор = &ТекущийПользователь
		|									ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|	И &ДопУсловия";
	
	ДопУсловия = "";
	БазаЗнанийВызовСервера.УстановитьПараметрыЗапросаПоСтрокеПоиска(СтрокаПоиска, Запрос, ДопУсловия);
	
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда	
		НачалоВставки    = СтрНайти(Запрос.Текст, "И (СтатьиБазыЗнаний") - 1;
		ТекстДоИзменения = Сред(Запрос.Текст, 1, НачалоВставки);
		Вставка			 = Сред(Запрос.Текст, НачалоВставки);
		Запрос.Текст	 = ТекстДоИзменения + СтрЗаменить(Вставка, "СтатьиБазыЗнаний", "ВТ_Статьи.Ссылка");	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивПредметов", 	 ?(ЭлементРешения = Неопределено, СписокПредметов, ЭлементРешения));
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если МассивСсылок.Количество() > 0 Тогда
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ссылка", МассивСсылок, Истина,
			ВидСравненияКомпоновкиДанных.ВСписке);
	Иначе
		Если Не ПустаяСтрока(СтрокаПоиска) Тогда
			Элементы.СтрокаПоиска.ЦветФона = WebЦвета.Розовый;
		КонецЕсли;	
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ссылка",
			Справочники.СтатьиБазыЗнаний.ПустаяСсылка(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжидания_СписокПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Решения, "Владелец",
			ПредопределенноеЗначение("Справочник.СтатьиБазыЗнаний.ПустаяСсылка"));
	Иначе 
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Решения, "Владелец", ТекущиеДанные.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Если СписокВыбранныхСтатей.Количество() > 0 Тогда
		
		УО = Список.УсловноеОформление.Элементы;	
		УО.Очистить();
		ЭлементУО 						= УО.Добавить();
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона",   WebЦвета.Белый);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
		ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементУсловия.ПравоеЗначение 	= СписокВыбранныхСтатей;
		
	КонецЕсли; 	
	
КонецПроцедуры	

#КонецОбласти