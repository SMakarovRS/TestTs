
#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ФОРМЫ.

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ (УправлениеITОтделом8УФПовтИсп.Право("ДобавлениеИзменениеБазыЗнаний") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава")) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Недостаточно прав для редактирования статьи.'"));
		Отказ = Истина;
	КонецЕсли;	
	
	ЭтоВебКлиент = УправлениеITОтделом8УФ.ПриложениеЯвляетсяВебКлиентом();
	
	Если Параметры.Свойство("Ключ") Тогда
		ЭтотОбъект.СтатьяБазыЗнаний = Параметры.Ключ;
	КонецЕсли;
	ЭтотОбъект.Область = Параметры.Область;
	
	// Если это не редактирование подраздела попытаемся захватить статью на редактирование.
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Область) Тогда
		СтатьяЗахвачена = Справочники.СтатьиБазыЗнаний.ЗахватитьСтатьюНаРедактирование(ЭтотОбъект.СтатьяБазыЗнаний);
		
		Если НЕ СтатьяЗахвачена Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Не удалось захватить статью на редактирование.'"), , , , Отказ);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ЭтотОбъект.Редактирует = Пользователи.ТекущийПользователь();
	
	Если Параметры.Свойство("Идентификатор") Тогда
		ЭтотОбъект.Идентификатор = Параметры.Идентификатор;
	Иначе 
		ЭтотОбъект.Идентификатор = ЭтотОбъект.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ЭтотОбъект.СтатьяБазыЗнаний.Пустая() Тогда
		ЭтотОбъект.Черновик = Истина;
	КонецЕсли;
	
	НоваяЗапись = ЭтотОбъект.СтатьяБазыЗнаний.Пустая();
	
	ИнициализацияДанных();
	
	Если НоваяЗапись И Параметры.Свойство("ЗначенияЗаполнения") Тогда 
		ЗаполнитьПоЗначениямЗаполнения(Параметры.ЗначенияЗаполнения);
	КонецЕсли;
	
	ЭтотОбъект.АвтоЗаголовок	= Ложь;
	ЭтотОбъект.Заголовок		= ?(ЭтотОбъект.ЭтоПодраздел, НСтр("ru = 'Изменение раздела'"), 
		НСтр("ru = 'Изменение статьи'"));
	
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(ПредметыСтатьи, 
		"Статья", ЭтотОбъект.СтатьяБазыЗнаний);
		
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Решения, 
		"Владелец", ЭтотОбъект.СтатьяБазыЗнаний);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗначениямЗаполнения(СтруктураЗаполнения)
	
	Если СтруктураЗаполнения.Свойство("Категория") Тогда
		СтрокаКатегория 		  = ЭтотОбъект.Категории.Добавить();
		СтрокаКатегория.Категория = СтруктураЗаполнения.Категория;
		Отбор					  = Новый Структура("Категория", СтруктураЗаполнения.Категория);		
		ДеревоЗначений 			  = РеквизитФормыВЗначение("КатегорииДерево");
		МассивСтрок				  = ДеревоЗначений.Строки.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			Для Каждого СтрокаДерева Из МассивСтрок Цикл				
				СтрокаДерева.Использование = Истина;
			КонецЦикла;	
		КонецЕсли;	
		ЗначениеВРеквизитФормы(ДеревоЗначений, "КатегорииДерево"); 
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	УстановитьРеквизитыЗаголовков();
	Если СтатьяЗахвачена Тогда
		Оповестить("БазаЗнаний_РедактированиеСтатьи");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатьяБазыЗнаний) Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.СтраницыСодержаниеСтатьи;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
		
	Если НЕ ЭтотОбъект.ЭтоПодраздел И ЭтотОбъект.Категории.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана ни одна категория, к которой относится статья.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ЭтоПодраздел Тогда
		ПроверяемыеРеквизиты.Добавить("КраткоеОписание");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗапросСохранения(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЭтотОбъект.Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗапросСохранения", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru='Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		Отказ = Истина;	
			
	ИначеЕсли НЕ ЭтотОбъект.ЭтоПодраздел Тогда
		
		// Разблокируем статью если она не изменилась.
		ЗавершитьРедактированиеСтатьиНаСервере(ЭтотОбъект.СтатьяБазыЗнаний);
		Оповестить("БазаЗнаний_ЗаписьСтатьи");
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ЭтоПодраздел Тогда
		
		ОповеститьОбИзменении(ЭтотОбъект.СтатьяБазыЗнаний);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "БазаЗнаний_ЗаписьКатегории" Тогда
		ОбновитьКатегории(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.

&НаКлиенте
Процедура СтраницыСодержаниеСтатьиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаКатегории Тогда
		ОбновитьКатегории(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КраткоеОписаниеПриИзменении(Элемент)
	УстановитьРеквизитыЗаголовков();
КонецПроцедуры

// Содержание.

&НаКлиенте
Процедура СодержаниеДеревоПередНачаломДобавленияЗаписьДанных(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатьяБазыЗнаний) Тогда
		Записать(Неопределено);
	КонецЕсли;
	
	ОткрытьРазделСтатьи(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатьяБазыЗнаний) Тогда
		ОписаниеОповещения	= Новый ОписаниеОповещения("СодержаниеДеревоПередНачаломДобавленияЗаписьДанных", 
			ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru='Данные на записаны.
			|Создание раздела возможно только после записи.
			|Выполнить запись статьи?'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		СодержаниеДеревоПередНачаломДобавленияЗаписьДанных(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДеревоПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.СодержаниеДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьРазделСтатьи(ТекущиеДанные.Область);
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДеревоПередУдалениемПодтверждение(Результат, ДопПараметры) Экспорт 
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДопПараметры.Свойство("Область") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбластей = Новый Массив;
	РекурсивноЗаполнитьПодчиненныеОбласти(МассивОбластей, ДопПараметры.Область);
	МассивОбластей.Добавить(ДопПараметры.Область);
	
	Для Каждого ИмяОбласти Из МассивОбластей Цикл
		
		СтруктураОтбора = Новый Структура("Область", ИмяОбласти);
		
		// Удалим картинки.
		СтрокиКартинки = ЭтотОбъект.Картинки.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиКартинки Цикл
			ЭтотОбъект.Картинки.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		// Удалим таблицы.
		СтрокиТаблицы = ЭтотОбъект.Таблицы.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			ЭтотОбъект.Таблицы.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		// Удалим содержание.
		СтрокиСодержания = ЭтотОбъект.Содержание.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиСодержания Цикл
			ЭтотОбъект.Содержание.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла;
	
	ПостроитьДеревоСодержаниеНаСервере();
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДеревоПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные	= Элементы.СодержаниеДерево.ТекущиеДанные;
	ПараметрыФормы	= Новый Структура("Область", ТекущиеДанные.Область);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СодержаниеДеревоПередУдалениемПодтверждение", ЭтотОбъект,
		ПараметрыФормы);
	
	ПоказатьВопрос(ОписаниеОповещения,
		СтрШаблон(НСтр("ru = 'Действительно удалить раздел ""%1"" и все его вложенные разделы?'"), 
		СокрЛП(ТекущиеДанные.Представление)), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, ,
		КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Категории.

&НаКлиенте
Процедура КатегорииДеревоПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.КатегорииДерево.ТекущийЭлемент.Имя = "КатегорииДеревоИспользование" Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.КатегорииДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Категория);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДеревоИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КатегорииДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использование Тогда
		НоваяСтрока = ЭтотОбъект.Категории.Добавить();
		НоваяСтрока.Категория = ТекущиеДанные.Категория;
	Иначе 
		МассивСтрок = ЭтотОбъект.Категории.НайтиСтроки(Новый Структура("Категория", ТекущиеДанные.Категория));
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			ЭтотОбъект.Категории.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Предметы статьи.

&НаКлиенте
Процедура ПредметыСтатьиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПредметыСтатьи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыСтатьиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ЭтотОбъект.СтатьяБазыЗнаний.Пустая() Тогда
		Отказ 		   	   = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаЗаписатьСтатью", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Статья еще не записана. Назаначить статью объекту возможно только после записи статьи. Записать статью?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;	
	
	Отказ = Истина;
	ДобавитьПредметВСтатью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаписатьСтатью(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Записать(Неопределено);
	
	ДобавитьПредметВСтатью(Новый Структура("ОбновитьПринудительно", Истина));
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьПредметВСтатью(СтруктураПараметров = Неопределено)
	
	ФормаПараметры = Новый Структура;	
	ФормаПараметры.Вставить("Статья", ЭтотОбъект.СтатьяБазыЗнаний);
	Если СтруктураПараметров = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПредметВСтатьюФрагмент", ЭтотОбъект);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПредметВСтатьюФрагмент", ЭтотОбъект, 
			СтруктураПараметров);
	КонецЕсли;	
	ОткрытьФорму("РегистрСведений.СвязьСтатейБазыЗнаний.Форма.ФормаЗаписи", ФормаПараметры, ЭтотОбъект,,,, 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредметВСтатьюФрагмент(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ОбновитьПринудительно") Тогда
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(ПредметыСтатьи, 
			"Статья", ЭтотОбъект.СтатьяБазыЗнаний);
	КонецЕсли;	
	
	Элементы.ПредметыСтатьи.Обновить();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПредставлениеСтатьиHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Anchor = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрСсылки = ДанныеСобытия.Href;
	Если Лев(ПараметрСсылки, 6) = "e1c://" Тогда
		Если СтрНайти(ПараметрСсылки, "e1cib") > 0 Тогда  
			Если СтрНайти(ПараметрСсылки, "tempstorage") > 0 Тогда
				НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/tempstorage"));
				Если НомерНачало > 0 Тогда
					Попытка
						АдресХранилище 	= Сред(ПараметрСсылки, НомерНачало);		    
						ПараметрыФормы = Новый Структура("СтрокаHTML", "<html><body><img src='" + АдресХранилище 
							+ "'></body></html>");
						ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.ПросмотрHTML", ПараметрыФормы, ЭтотОбъект, 
							Новый УникальныйИдентификатор);
					Исключение
						Возврат;
					КонецПопытки;	
				Иначе	
					Возврат;
				КонецЕсли;
			ИначеЕсли СтрНайти(ПараметрСсылки, "data") > 0 Тогда
				НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/data"));
				Если НомерНачало > 0 Тогда
					Попытка
						Адрес = Сред(ПараметрСсылки, НомерНачало);	
						ПерейтиПоНавигационнойСсылке(Адрес); 
					Исключение					
						Возврат;
					КонецПопытки;	
				Иначе
				КонецЕсли;	
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВставитьКартинку(Команда)
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.СтатьяБазыЗнаний) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаВставитьКартинку", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Статья еще не записана. Вставить картинку можно только после записи статьи. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;	
	
	ВставитьКартинкуФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаВставитьКартинку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Если ЗаписатьНаКлиенте() Тогда 	
		ВставитьКартинкуФрагмент();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВставитьКартинкуФрагмент()
	
	ВыделенныйТекст	= СокрЛП(Элементы.ТекстСтатьи.ВыделенныйТекст);
	ЗакладкаНачало	= Неопределено;
	ЗакладкаКонец 	= Неопределено;
	Элементы.ТекстСтатьи.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);
	
	МассивЭлементов	= ТекстСтатьи.ПолучитьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
	Если МассивЭлементов.Количество() > 0 И ТипЗнч(МассивЭлементов[0]) = Тип("ТекстФорматированногоДокумента") Тогда
		ЭлементФорматированногоДокумента = МассивЭлементов[0];
		Если ЗакладкаНачало = ЗакладкаКонец 
			И БазаЗнанийКлиентСервер.ЭтоСтрокаКартинки(ЭлементФорматированногоДокумента.Текст) Тогда
			
			ЗакладкаНачало	= ЭлементФорматированногоДокумента.ЗакладкаНачала;
			ЗакладкаКонец	= ЭлементФорматированногоДокумента.ЗакладкаКонца;
			ВыделенныйТекст	= ЭлементФорматированногоДокумента.Текст;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяКартинки		= БазаЗнанийКлиентСервер.ПолучитьИмяКартинки(ВыделенныйТекст);
	ДопПараметры	= Новый Структура("ИмяКартинки, Текст, Начало, Конец", ИмяКартинки, ВыделенныйТекст, ЗакладкаНачало,
		ЗакладкаКонец);
	
	Если ПустаяСтрока(ИмяКартинки) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВставитьКартинку", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Строка описания картинки не найдена.
							|Создать новую картинку?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьВставитьКартинку(КодВозвратаДиалога.Да, ДопПараметры); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьФайл(Команда)
	
	Если Не ЗначениеЗаполнено(СтатьяБазыЗнаний) Тогда		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВставитьФайлПослеВопроса", ЭтотОбъект),
					    НСтр("ru = 'Перед добавлением файла статья будет записана. Продолжить?'"),
						РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВставитьФайлФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТаблицу(Команда)
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.СтатьяБазыЗнаний) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаВставитьТаблицу", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Статья еще не записана. Вставить таблицу можно только после записи статьи. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;	
	
	ВставитьТаблицуФрагмент();
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаВставитьТаблицу(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Если ЗаписатьНаКлиенте() Тогда 	
		ВставитьТаблицуФрагмент();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВставитьТаблицуФрагмент()
	
	ВыделенныйТекст	= СокрЛП(Элементы.ТекстСтатьи.ВыделенныйТекст);
	ЗакладкаНачало	= Неопределено;
	ЗакладкаКонец 	= Неопределено;
	Элементы.ТекстСтатьи.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);
	
	МассивЭлементов	= ТекстСтатьи.ПолучитьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
	Если МассивЭлементов.Количество() > 0 И ТипЗнч(МассивЭлементов[0]) = Тип("ТекстФорматированногоДокумента") Тогда
		ЭлементФорматированногоДокумента = МассивЭлементов[0];
		Если ЗакладкаНачало = ЗакладкаКонец 
			И БазаЗнанийКлиентСервер.ЭтоСтрокаТаблицы(ЭлементФорматированногоДокумента.Текст) Тогда
			
			ЗакладкаНачало	= ЭлементФорматированногоДокумента.ЗакладкаНачала;
			ЗакладкаКонец	= ЭлементФорматированногоДокумента.ЗакладкаКонца;
			ВыделенныйТекст	= ЭлементФорматированногоДокумента.Текст;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТаблицы		= БазаЗнанийКлиентСервер.ПолучитьИмяТаблицы(ВыделенныйТекст);
	ДопПараметры	= Новый Структура("ИмяТаблицы, Текст, Начало, Конец", ИмяТаблицы, ВыделенныйТекст, ЗакладкаНачало, 
		ЗакладкаКонец);
	
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВставитьТаблицу", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Строка описания таблицы не найдена.
				|Создать новую таблицу?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьВставитьТаблицу(КодВозвратаДиалога.Да, ДопПараметры); 
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВставитьКод(Команда)
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.СтатьяБазыЗнаний) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаВставитьКод", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Статья еще не записана. Вставить код можно только после записи статьи. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;	
	
	ВставитьКодФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаВставитьКод(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Если ЗаписатьНаКлиенте() Тогда 	
		ВставитьКодФрагмент();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВставитьКодФрагмент()
	
	ВыделенныйТекст	= СокрЛП(Элементы.ТекстСтатьи.ВыделенныйТекст);
	ЗакладкаНачало	= Неопределено;
	ЗакладкаКонец 	= Неопределено;
	Элементы.ТекстСтатьи.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);
	
	МассивЭлементов	= ТекстСтатьи.ПолучитьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
	Если МассивЭлементов.Количество() > 0 И ТипЗнч(МассивЭлементов[0]) = Тип("ТекстФорматированногоДокумента") Тогда
		ЭлементФорматированногоДокумента = МассивЭлементов[0];
		Если ЗакладкаНачало = ЗакладкаКонец 
			И БазаЗнанийКлиентСервер.ЭтоСтрокаТаблицы(ЭлементФорматированногоДокумента.Текст) Тогда
			
			ЗакладкаНачало	= ЭлементФорматированногоДокумента.ЗакладкаНачала;
			ЗакладкаКонец	= ЭлементФорматированногоДокумента.ЗакладкаКонца;
			ВыделенныйТекст	= ЭлементФорматированногоДокумента.Текст;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТаблицы		= БазаЗнанийКлиентСервер.ПолучитьИмяПодсветкиКода(ВыделенныйТекст);
	ДопПараметры	= Новый Структура("Имя, Текст, Начало, Конец", ИмяТаблицы, ВыделенныйТекст, ЗакладкаНачало, 
		ЗакладкаКонец);
	
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВставитьКод", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Строка описания кода не найдена.
				|Вставить новый код?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьВставитьКод(КодВозвратаДиалога.Да, ДопПараметры); 
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВставитьГиперссылку(Команда)
	
	ВыделенныйТекст	= СокрЛП(Элементы.ТекстСтатьи.ВыделенныйТекст);
	ЗакладкаНачало	= Неопределено;
	ЗакладкаКонец 	= Неопределено;
	Гиперссылка		= "";
	
	Элементы.ТекстСтатьи.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);
	МассивЭлементов	= ТекстСтатьи.ПолучитьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
	Если МассивЭлементов.Количество() > 0 И ТипЗнч(МассивЭлементов[0]) = Тип("ТекстФорматированногоДокумента") Тогда
		ЭлементФорматированногоДокумента = МассивЭлементов[0];
		Если НЕ ПустаяСтрока(ЭлементФорматированногоДокумента.НавигационнаяСсылка) Тогда
			ЗакладкаНачало	= ЭлементФорматированногоДокумента.ЗакладкаНачала;
			ЗакладкаКонец	= ЭлементФорматированногоДокумента.ЗакладкаКонца;
			Гиперссылка		= ЭлементФорматированногоДокумента.НавигационнаяСсылка;
			ВыделенныйТекст	= ЭлементФорматированногоДокумента.Текст;
		КонецЕсли;
	КонецЕсли;
	
	ТекстСсылки	= ВыделенныйТекст;
	
	ДопПараметры = Новый Структура("Гиперссылка, Текст, Начало, Конец", Гиперссылка, ТекстСсылки, ЗакладкаНачало, 
		ЗакладкаКонец);
	
	Если ПустаяСтрока(Гиперссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВставитьГиперссылку", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Строка описания гиперссылки не найдена.
                                                 |Создать новую гиперссылку?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьВставитьГиперссылку(КодВозвратаДиалога.Да, ДопПараметры); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСноску(Команда)
	
	ВыделенныйТекст	= СокрЛП(Элементы.ТекстСтатьи.ВыделенныйТекст);
	ЗакладкаНачало	= Неопределено;
	ЗакладкаКонец 	= Неопределено;
	Гиперссылка		= "";
	Элементы.ТекстСтатьи.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);
	
	МассивЭлементов	= ТекстСтатьи.ПолучитьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
	Если МассивЭлементов.Количество() > 0 И ТипЗнч(МассивЭлементов[0]) = Тип("ТекстФорматированногоДокумента") Тогда
		ЭлементФорматированногоДокумента = МассивЭлементов[0];
		Если НЕ ПустаяСтрока(ЭлементФорматированногоДокумента.НавигационнаяСсылка) Тогда
			ЗакладкаНачало	= ЭлементФорматированногоДокумента.ЗакладкаНачала;
			ЗакладкаКонец	= ЭлементФорматированногоДокумента.ЗакладкаКонца;
			ВыделенныйТекст	= ЭлементФорматированногоДокумента.Текст;
			Гиперссылка		= ЭлементФорматированногоДокумента.НавигационнаяСсылка;
		КонецЕсли;
	КонецЕсли;
	
	ТекстСсылки	= ВыделенныйТекст;
	
	ДопПараметры = Новый Структура("Гиперссылка, Текст, Начало, Конец", Гиперссылка, ТекстСсылки, ЗакладкаНачало, 
		ЗакладкаКонец);
	
	Если ПустаяСтрока(Гиперссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВставитьСноску", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Строка описания сноски не найдена.
                                                 |Создать новую сноску?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьВставитьСноску(КодВозвратаДиалога.Да, ДопПараметры); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзменений(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", СтатьяБазыЗнаний);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.ПросмотрИстории", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ЭтотОбъект.ПроверитьЗаполнение();
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗакрытия = ЗаписатьНаСервере();
	
	// Произошла запись статьи или подраздела.
	Если ПараметрыЗакрытия.Количество() = 0 Тогда // оповещение о записи статьи или подраздела.
		Оповестить("БазаЗнаний_ЗаписьСтатьи", , СтатьяБазыЗнаний);
	Иначе // оповещение владельца о необходимости записи данных формы.
		//@skip-warning
		Если ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("УправляемаяФорма") 
			И ЭтотОбъект.ВладелецФормы.ИмяФормы = "Справочник.СтатьиБазыЗнаний.Форма.РедактированиеСтатьи" Тогда
			
			ЭтотОбъект.ВладелецФормы.ПриОкончанииРедактированияПодраздела(ПараметрыЗакрытия, Неопределено);
			ЭтотОбъект.ВладелецФормы.ЗаписатьНаСервере(Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если НЕ Модифицированность Тогда
		ЭтотОбъект.Закрыть();
		Возврат;
	КонецЕсли;
	
	Результат = ЭтотОбъект.ПроверитьЗаполнение();
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
		
	Если ЭтотОбъект.ЭтоПодраздел Тогда
		ЗаписатьИЗакрытьВыполнить(КодВозвратаДиалога.Да, Неопределено);
	Иначе
		ОписаниеОповещения	= Новый ОписаниеОповещения("ЗаписатьИЗакрытьВыполнить", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru='Завершить редактирование с освобождением статьи?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКатегории(Команда)
	
	ПостроитьДеревоКатегорииНаСервере();
	
	Для Каждого ЭлементДерева Из ЭтотОбъект.КатегорииДерево.ПолучитьЭлементы() Цикл
		Элементы.КатегорииДерево.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОформление(Команда)
	
	УдалитьОформлениеФорматированногоДокумента();
	ВыполнитьОформлениеФорматированногоДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
	
	Если Не ЗначениеЗаполнено(СтатьяБазыЗнаний) Тогда		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПрисоединенныеФайлыПослеВопроса", ЭтотОбъект),
					    НСтр("ru = 'Перед переходом к ""Присоединенные файлы"" статья будет записана. Продолжить?'"),
						РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	                  
	ПоказатьВопрос(Новый ОписаниеОповещения("ПометитьНаУдалениеЗавершение", ЭтотОбъект), 
		?(ЗначениеРеквизита(СтатьяБазыЗнаний, "ПометкаУдаления") = Ложь, 
		НСтр("ru = 'Пометить статью базы знаний на удаление?'"), 
		НСтр("ru = 'Снять пометку удаления со статьи базы знаний?'")),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПометитьНаУдалениеНаСервере(СтатьяБазыЗнаний);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеНаСервере(СтатьяБазыЗнаний)
	
	СтатьяОбъект = СтатьяБазыЗнаний.ПолучитьОбъект();
	СтатьяОбъект.УстановитьПометкуУдаления(НЕ СтатьяБазыЗнаний.ПометкаУдаления);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизита(Ссылка, Реквизит)
	
	Возврат Ссылка[Реквизит];
	
КонецФункции

&НаКлиенте
Процедура ИмпортИзФайла(Команда)
	
	Если ЭтоВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Импорт из файла не доступен в веб клиенте.'"));
		Возврат;
	КонецЕсли;	
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("ВыбратьФайлПослеВопросаЗаписатьСтатью", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ЭтотОбъект.СтатьяБазыЗнаний) Тогда
		ПоказатьВопрос(ОповещениеПродолжения, НСтр("ru = 'Все разделы и содержание будут очищены. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		ПоказатьВопрос(ОповещениеПродолжения, 
			НСтр("ru = 'Статья еще не записана. Импорт из файла возможен только после записи статьи. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРаздел(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОчиститьРазделОповещение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,
		НСтр("ru = 'Контент статьи и файл - источник предыдущего импорта будут очищены. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлИсточник(Команда)
		
	#Если ВебКлиент Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Редактирование файла-источника импорта статьи не возможно в веб клиенте.'"));
		
	#Иначе
		
	Если Не ПустаяСтрока(ЭтотОбъект.АдресАрхиваИсточника) И Не ПустаяСтрока(ЭтотОбъект.ТипФайлаИсточника) Тогда
		РабочийКаталогТекущегоПользователя = РабочийКаталогТекущегоПользователя();
		ПутьСохранения        = РабочийКаталогТекущегоПользователя + "kb\import\" 
			+ СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_") + "\";
		КаталогПутьСохранения = Новый Файл(ПутьСохранения);
		
		Если НЕ КаталогПутьСохранения.Существует() Тогда
			СоздатьКаталог(ПутьСохранения);
		КонецЕсли; 
		
		ЭтотОбъект.УдаляемыеКаталоги.Добавить(ПутьСохранения);
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ЭтотОбъект.АдресАрхиваИсточника);
		Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
			ФайлАрхива = ПутьСохранения + "sourse.zip";
			ДвоичныеДанные.Записать(ФайлАрхива);
		КонецЕсли;		
		ЧтениеZip    = Новый ЧтениеZipФайла(ФайлАрхива);
		ЧтениеZip.ИзвлечьВсе(ПутьСохранения);
		МассивФайлов = НайтиФайлы(ПутьСохранения, "*." + ЭтотОбъект.ТипФайлаИсточника);
		Если МассивФайлов.Количество() > 0 Тогда
			ФайлИсточника = МассивФайлов[0];
			ЭтотОбъект.ФайлИсточникаПолноеИмя = ФайлИсточника.ПолноеИмя;
			ЭтотОбъект.УдаляемыеКаталоги.Добавить(ФайлИсточника.ПолноеИмя);
			Если ЭтотОбъект.ТипФайлаИсточника = "docx" ИЛИ ЭтотОбъект.ТипФайлаИсточника = "doc" Тогда
				Состояние(НСтр("ru = 'Запуск MS Word...'"),,, БиблиотекаКартинок.ДлительнаяОперация48);
				Попытка
					MSПриложение 		 = Новый COMОбъект("Word.Application");					
					MSПриложение.Documents.Open(ФайлИсточника.ПолноеИмя);
					MSПриложение.Visible = Истина;
					
					ДобавитьОбработчик MSПриложение.DocumentBeforeClose, ПередЗакрытиемДокументаWord;					
					ДобавитьОбработчик MSПриложение.Quit, ВыходИзWord;
					
				Исключение
				ОШ = ОписаниеОшибки();
				Попытка
					MSПриложение.Application.Quit();
				Исключение
				КонецПопытки;
				MSПриложение = Неопределено;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ОШ);
				Возврат;
				КонецПопытки;
			ИначеЕсли ЭтотОбъект.ТипФайлаИсточника = "xlsx" ИЛИ ЭтотОбъект.ТипФайлаИсточника = "xls" Тогда
				Состояние(НСтр("ru = 'Запуск MS Excel...'"),,, БиблиотекаКартинок.ДлительнаяОперация48);
				Попытка
					MSПриложение               = Новый COMОбъект("Excel.Application");
					MSПриложение.Visible       = 1;
					MSПриложение.DisplayAlerts = 0;
					MSПриложение.WorkBooks.Open(ФайлИсточника.ПолноеИмя);
					MSПриложение.Application.ActiveWindow.Activate();
					
					ДобавитьОбработчик MSПриложение.WorkBookBeforeClose, ПередЗакрытиемДокументаExcel;
					
				Исключение
					ОШ = ОписаниеОшибки();
					Попытка
						MSПриложение.Application.Quit();
					Исключение
					КонецПопытки;
					MSПриложение = Неопределено;
					ОбщегоНазначенияКлиент.СообщитьПользователю(ОШ);
					Возврат;
				КонецПопытки;
			КонецЕсли;
		 КонецЕсли;
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.СтраницаКатегории.Видимость	= НЕ ЭтотОбъект.ЭтоПодраздел;
	Элементы.СтраницаСодержание.Видимость	= НЕ ЭтотОбъект.ЭтоПодраздел;		
	Элементы.ГруппаТеги.Видимость			= НЕ ЭтотОбъект.ЭтоПодраздел;	
	Элементы.Родитель.Видимость				= ЭтотОбъект.ЭтоПодраздел;	
	Элементы.РазрешитьСворачивание.Видимость= ЭтотОбъект.ЭтоПодраздел;
	Элементы.Черновик.Видимость				= НЕ ЭтотОбъект.ЭтоПодраздел;	
	Элементы.КраткоеОписание.Видимость		= НЕ ЭтотОбъект.ЭтоПодраздел;	
	Элементы.ФормаПоказатьОтличия.Видимость = НЕ ЭтотОбъект.ЭтоПодраздел;	
	Элементы.ПоложениеСодержания.Видимость  = НЕ ЭтотОбъект.ЭтоПодраздел;
	Элементы.СтраницаИспользование.Видимость= НЕ ЭтотОбъект.ЭтоПодраздел;
	Элементы.СтраницаОсновная.Видимость		= НЕ ЭтотОбъект.РазделИмпортирован;
	Элементы.СтраницаОсновнаяHTML.Видимость = ЭтотОбъект.РазделИмпортирован;
	Элементы.СтраницаСодержание.Видимость	= НЕ ЭтотОбъект.РазделИмпортирован;
	Элементы.ИмпортИзФайла.Видимость		= НЕ ЭтотОбъект.ЭтоПодраздел;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРеквизитыЗаголовков()
	
	Элементы.ГруппаКраткоеОписание.ЗаголовокСвернутогоОтображения = 
		СтрШаблон(НСтр("ru = 'Краткое описание %1 заполнено'"), ?(НЕ ЗначениеЗаполнено(ЭтотОбъект.КраткоеОписание), НСтр("ru = 'не'"), ""));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивСтруктурКартинки(СтрокиТаблицы)
	
	МассивКартинки	= Новый Массив;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		СтруктураКартинки = Новый Структура("ИдентификаторКартинки, Область, АдресХранилища, Высота, Подпись, Выравнивание, Имя, Граница, Подсказка, Файл");
		ЗаполнитьЗначенияСвойств(СтруктураКартинки, СтрокаТаблицы);
		МассивКартинки.Добавить(Новый ФиксированнаяСтруктура(СтруктураКартинки));
	КонецЦикла;
	
	Возврат МассивКартинки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивСтруктурТаблицы(СтрокиТаблицы)
	
	МассивТаблицы	= Новый Массив;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		СтруктураТаблицы = Новый Структура("ИдентификаторТаблицы, Область, АдресХранилища, Подпись, Выравнивание, Имя, ТаблицаСтилейHTML, ТекстТаблицыHTML, Файл");
		ЗаполнитьЗначенияСвойств(СтруктураТаблицы, СтрокаТаблицы);
		МассивТаблицы.Добавить(Новый ФиксированнаяСтруктура(СтруктураТаблицы));
	КонецЦикла;
	
	Возврат МассивТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивСтруктурФайлы(СтрокиТаблицы)
	
	МассивФайлы	= Новый Массив;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		СтруктураФайлы = Новый Структура("Идентификатор, Файл");
		ЗаполнитьЗначенияСвойств(СтруктураФайлы, СтрокаТаблицы);
		МассивФайлы.Добавить(Новый ФиксированнаяСтруктура(СтруктураФайлы));
	КонецЦикла;
	
	Возврат МассивФайлы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивПодсветкиКода(СтрокиТаблицы)
	
	МассивФайлы	= Новый Массив;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		СтруктураФайлы = Новый Структура("Имя, Область, Текст, Язык");
		ЗаполнитьЗначенияСвойств(СтруктураФайлы, СтрокаТаблицы);
		МассивФайлы.Добавить(Новый ФиксированнаяСтруктура(СтруктураФайлы));
	КонецЦикла;
	
	Возврат МассивФайлы;
	
КонецФункции

&НаСервере
Процедура ПостроитьДеревоСодержаниеНаСервере()
	
	ДеревоЗначений = РеквизитФормыВЗначение("СодержаниеДерево");
	ДеревоЗначений.Строки.Очистить();
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Содержание Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Родитель) Тогда
			СтрокиРодитель = ДеревоЗначений.Строки;
		Иначе 
			СтрокаРодитель = ДеревоЗначений.Строки.Найти(СтрокаТаблицы.Родитель);
			Если СтрокаРодитель = Неопределено Тогда
				СтрокаРодитель = ДеревоЗначений;
			КонецЕсли;
			
			СтрокиРодитель = СтрокаРодитель.Строки;
		КонецЕсли;
		
		НоваяСтрока = СтрокиРодитель.Добавить();
		НоваяСтрока.Область			= СтрокаТаблицы.Область;
		НоваяСтрока.Представление	= СтрокаТаблицы.Наименование;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "СодержаниеДерево");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложенныеСтрокиДереваКатегорий(ТаблицаКатегорий, СтрокиДерева, РодительСсылка)
	
	СтруктураОтбора = Новый Структура("Родитель", РодительСсылка);
	ВложенныеСтроки = ТаблицаКатегорий.Скопировать(СтруктураОтбора);
	ВложенныеСтроки.Сортировать("РеквизитДопУпорядочивания"); 
	Для Каждого СтрокаТаблицы Из ВложенныеСтроки Цикл
		МассивСтрок = ЭтотОбъект.Категории.НайтиСтроки(Новый Структура("Категория", СтрокаТаблицы.Ссылка));
		
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.Использование	= (МассивСтрок.Количество() > 0);
		НоваяСтрока.Категория		= СтрокаТаблицы.Ссылка;
		Если СтрокаТаблицы.Ссылка.ПометкаУдаления Тогда
			НоваяСтрока.ИндексКартинки  = ?(СтрокаТаблицы.Ссылка.ТипКатегории = Перечисления.ТипыКатегорийСтатейБазыЗнаний.Публичная, 1, 3);
		Иначе
			НоваяСтрока.ИндексКартинки  = ?(СтрокаТаблицы.Ссылка.ТипКатегории = Перечисления.ТипыКатегорийСтатейБазыЗнаний.Публичная, 0, 2);
		КонецЕсли;	
		
		ЗаполнитьВложенныеСтрокиДереваКатегорий(ТаблицаКатегорий, НоваяСтрока.Строки, СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоКатегорииНаСервере()
	
	ДеревоЗначений = РеквизитФормыВЗначение("КатегорииДерево");
	ДеревоЗначений.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КатегорииБазыЗнаний.Родитель КАК Родитель,
	|	КатегорииБазыЗнаний.Ссылка КАК Ссылка,
	|	КатегорииБазыЗнаний.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	|ИЗ
	|	Справочник.КатегорииБазыЗнаний КАК КатегорииБазыЗнаний
	|ГДЕ
	|	ВЫБОР
	|			КОГДА КатегорииБазыЗнаний.ТипКатегории = ЗНАЧЕНИЕ(Перечисление.ТипыКатегорийСтатейБазыЗнаний.Приватная)
	|				ТОГДА ВЫБОР
	|						КОГДА КатегорииБазыЗнаний.Автор = &ТекущийПользователь
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	ТаблицаКатегорий = Запрос.Выполнить().Выгрузить();
	ТаблицаКатегорий.Индексы.Добавить("Родитель");
	
	РодительСсылка = Справочники.КатегорииБазыЗнаний.ПустаяСсылка();
	ЗаполнитьВложенныеСтрокиДереваКатегорий(ТаблицаКатегорий, ДеревоЗначений.Строки, РодительСсылка);
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "КатегорииДерево");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеФорматированногоДокумента(СтрокаОформления, ЦветТекста)
	
	МассивЭлементов = ТекстСтатьи.ПолучитьЭлементы();
	Для Каждого ЭлементДокумента Из МассивЭлементов Цикл
		Если ТипЗнч(ЭлементДокумента) = Тип("ТекстФорматированногоДокумента")
			И СтрНайти(ЭлементДокумента.Текст, "[" + СтрокаОформления + "='") > 0 Тогда		
			ЗакладкаНачало	= ЭлементДокумента.ЗакладкаНачала;
			Если СтрНайти(ЭлементДокумента.Текст,"']") > 0 Тогда
				ЗакладкаКонец = ЭлементДокумента.ЗакладкаКонца;
			КонецЕсли;
			МассивОбластей = ЭтотОбъект.ТекстСтатьи.СформироватьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
			Для Каждого ОбластьДокумента Из МассивОбластей Цикл
				ОбластьДокумента.ЦветФона   = WebЦвета.Белый;
				ОбластьДокумента.ЦветТекста = ЦветТекста;				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеГиперссылок(ЦветТекста)
	
	МассивЭлементов = ТекстСтатьи.ПолучитьЭлементы();
	Для Каждого ЭлементДокумента Из МассивЭлементов Цикл
		Если ТипЗнч(ЭлементДокумента) = Тип("ТекстФорматированногоДокумента") 
			И НЕ ПустаяСтрока(ЭлементДокумента.НавигационнаяСсылка) Тогда
			
			ЭлементДокумента.ЦветТекста = ЦветТекста;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеКомментариев(ЦветТекста)
	
	ОбластьОписания = ЭтотОбъект.ТекстСтатьи.НайтиТекст("<!--");
	Пока ОбластьОписания <> Неопределено Цикл
		ОбластьОкончания = ЭтотОбъект.ТекстСтатьи.НайтиТекст("-->", ОбластьОписания.ЗакладкаНачала);
		
		ЗакладкаНачало	= ОбластьОписания.ЗакладкаНачала;
		ЗакладкаКонец	= ОбластьОкончания.ЗакладкаКонца;
		
		МассивОбластей = ЭтотОбъект.ТекстСтатьи.СформироватьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
		Для Каждого ОбластьДокумента Из МассивОбластей Цикл
			ОбластьДокумента.ЦветТекста = ЦветТекста;
		КонецЦикла;
		
		ОбластьОписания = ЭтотОбъект.ТекстСтатьи.НайтиТекст("<!--", ЗакладкаКонец);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОформлениеФорматированногоДокумента()
	
	УстановитьОформлениеФорматированногоДокумента("picture", WebЦвета.Зеленый);
	УстановитьОформлениеФорматированногоДокумента("table", WebЦвета.Зеленый);
	УстановитьОформлениеФорматированногоДокумента("code", WebЦвета.ТемноКрасный);
	УстановитьОформлениеГиперссылок(WebЦвета.Синий);
	УстановитьОформлениеКомментариев(WebЦвета.ТемноСерый);
		
КонецПроцедуры

&НаСервере
Процедура УдалитьОформлениеФорматированногоДокумента()
	
	УстановитьОформлениеФорматированногоДокумента("picture", WebЦвета.Черный);
	УстановитьОформлениеФорматированногоДокумента("table", WebЦвета.Черный);
	УстановитьОформлениеГиперссылок(Элементы.ТекстСтатьи.ЦветТекста);
	УстановитьОформлениеКомментариев(Элементы.ТекстСтатьи.ЦветТекста);
	
КонецПроцедуры

// Чтение данных.

&НаСервере
Процедура ЗаполнитьДанныеФормыПоСсылке()
	
	// Основные данные.
	ЗапросДанные = Новый Запрос;
	ЗапросДанные.УстановитьПараметр("Ссылка", ЭтотОбъект.СтатьяБазыЗнаний);
	Если ЗначениеЗаполнено(ЭтотОбъект.Область) Тогда
		ЗапросДанные.УстановитьПараметр("Область", ЭтотОбъект.Область);
		ЗапросДанные.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБазыЗнанийСодержание.Ссылка,
		|	СтатьиБазыЗнанийСодержание.Наименование,
		|	СтатьиБазыЗнанийСодержание.Область,
		|	СтатьиБазыЗнанийСодержание.Родитель,
		|	СтатьиБазыЗнанийСодержание.Текст,
		|	СтатьиБазыЗнанийСодержание.ТекстHTML,
		|	СтатьиБазыЗнанийСодержание.Ссылка.Черновик КАК Черновик,
		|	2 КАК ПоложениеСодержания,
		|	СтатьиБазыЗнанийСодержание.РазрешитьСворачивание КАК РазрешитьСворачивание,
		|	"""" КАК КраткоеОписание
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний.Содержание КАК СтатьиБазыЗнанийСодержание
		|ГДЕ
		|	СтатьиБазыЗнанийСодержание.Ссылка = &Ссылка
		|	И СтатьиБазыЗнанийСодержание.Область = &Область";
	Иначе 
		ЗапросДанные.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБазыЗнаний.Ссылка,
		|	СтатьиБазыЗнаний.Наименование,
		|	"""" КАК Область,
		|	"""" КАК Родитель,
		|	СтатьиБазыЗнаний.Текст,
		|	СтатьиБазыЗнаний.ТекстHTML,
		|	СтатьиБазыЗнаний.Черновик,
		|	СтатьиБазыЗнаний.ПоложениеСодержания КАК ПоложениеСодержания,
		|	ИСТИНА КАК РазрешитьСворачивание,
		|	СтатьиБазыЗнаний.КраткоеОписание,
		|	СтатьиБазыЗнаний.РазделИмпортирован
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
		|ГДЕ
		|	СтатьиБазыЗнаний.Ссылка = &Ссылка";
	КонецЕсли;
	
	// Картинки.
	ЗапросКартинки = Новый Запрос;
	ЗапросКартинки.УстановитьПараметр("Ссылка"	, ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросКартинки.УстановитьПараметр("Область"	, ЭтотОбъект.Область);
	ЗапросКартинки.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнанийКартинки.Ссылка,
	|	СтатьиБазыЗнанийКартинки.Область,
	|	СтатьиБазыЗнанийКартинки.Идентификатор КАК ИдентификаторКартинки,
	|	СтатьиБазыЗнанийКартинки.Имя,
	|	СтатьиБазыЗнанийКартинки.Подпись,
	|	СтатьиБазыЗнанийКартинки.Выравнивание,
	|	СтатьиБазыЗнанийКартинки.Граница,
	|	СтатьиБазыЗнанийКартинки.Высота,
	|	СтатьиБазыЗнанийКартинки.Подсказка,
	|	СтатьиБазыЗнанийКартинки.Файл
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.Картинки КАК СтатьиБазыЗнанийКартинки
	|ГДЕ
	|	СтатьиБазыЗнанийКартинки.Ссылка = &Ссылка
	|	И 1 = 1";
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Область) Тогда
		ЗапросКартинки.Текст = СтрЗаменить(ЗапросКартинки.Текст, "1 = 1", "СтатьиБазыЗнанийКартинки.Область = &Область");
	КонецЕсли;
	
	// Таблицы.
	ЗапросТаблицы = Новый Запрос;
	ЗапросТаблицы.УстановитьПараметр("Ссылка"	, ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросТаблицы.УстановитьПараметр("Область"	, ЭтотОбъект.Область);
	ЗапросТаблицы.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнанийТаблицы.Ссылка,
	|	СтатьиБазыЗнанийТаблицы.Область,
	|	СтатьиБазыЗнанийТаблицы.Идентификатор КАК ИдентификаторТаблицы,
	|	СтатьиБазыЗнанийТаблицы.Имя,
	|	СтатьиБазыЗнанийТаблицы.Подпись,
	|	СтатьиБазыЗнанийТаблицы.Выравнивание,
	|	СтатьиБазыЗнанийТаблицы.ТаблицаСтилейHTML,
	|	СтатьиБазыЗнанийТаблицы.ТекстТаблицыHTML,
	|	СтатьиБазыЗнанийТаблицы.Файл
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.Таблицы КАК СтатьиБазыЗнанийТаблицы
	|ГДЕ
	|	СтатьиБазыЗнанийТаблицы.Ссылка = &Ссылка
	|	И 1 = 1";
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Область) Тогда
		ЗапросТаблицы.Текст = СтрЗаменить(ЗапросТаблицы.Текст, "1 = 1", "СтатьиБазыЗнанийТаблицы.Область = &Область");
	КонецЕсли;
	
	// Файлы.
	ЗапросФайлы       = Новый Запрос;
	ЗапросФайлы.УстановитьПараметр("Ссылка", ЭтотОбъект.СтатьяБазыЗнаний);	
	ЗапросФайлы.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнанийФайлы.Ссылка,
	|	СтатьиБазыЗнанийФайлы.Идентификатор,
	|	СтатьиБазыЗнанийФайлы.Файл
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.Файлы КАК СтатьиБазыЗнанийФайлы
	|ГДЕ
	|	СтатьиБазыЗнанийФайлы.Ссылка = &Ссылка";

	
	// Содержание.
	ЗапросСодержание = Новый Запрос;
	ЗапросСодержание.УстановитьПараметр("Ссылка", ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросСодержание.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнанийСодержание.НомерСтроки,
	|	СтатьиБазыЗнанийСодержание.Ссылка,
	|	СтатьиБазыЗнанийСодержание.Область,
	|	СтатьиБазыЗнанийСодержание.Родитель,
	|	СтатьиБазыЗнанийСодержание.Наименование,
	|	СтатьиБазыЗнанийСодержание.Текст,
	|	СтатьиБазыЗнанийСодержание.ТекстHTML,
	|	СтатьиБазыЗнанийСодержание.Автор,
	|	СтатьиБазыЗнанийСодержание.ДатаСоздания,
	|	СтатьиБазыЗнанийСодержание.Уровень КАК Уровень,
	|	СтатьиБазыЗнанийСодержание.РазрешитьСворачивание КАК РазрешитьСворачивание,
	|	ЕСТЬNULL(СтатьиРодители.Наименование, """") КАК РодительПредставление
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.Содержание КАК СтатьиБазыЗнанийСодержание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБазыЗнаний.Содержание КАК СтатьиРодители
	|		ПО СтатьиБазыЗнанийСодержание.Ссылка = СтатьиРодители.Ссылка
	|			И СтатьиБазыЗнанийСодержание.Родитель = СтатьиРодители.Область
	|ГДЕ
	|	СтатьиБазыЗнанийСодержание.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиБазыЗнанийСодержание.НомерСтроки";
	
	// Категории.
	ЗапросКатегории = Новый Запрос;
	ЗапросКатегории.УстановитьПараметр("Ссылка", ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросКатегории.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнанийКатегории.Категория КАК Категория
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.Категории КАК СтатьиБазыЗнанийКатегории
	|ГДЕ
	|	СтатьиБазыЗнанийКатегории.Ссылка = &Ссылка";
	
	// Сноски.
	ЗапросСноски = Новый Запрос;
	ЗапросСноски.УстановитьПараметр("Ссылка", ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросСноски.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнанийСноски.Идентификатор,
	|	СтатьиБазыЗнанийСноски.Группа,
	|	СтатьиБазыЗнанийСноски.Наименование,
	|	СтатьиБазыЗнанийСноски.ГиперссылкаТип,
	|	СтатьиБазыЗнанийСноски.ГиперссылкаАдрес,
	|	СтатьиБазыЗнанийСноски.ГиперссылкаОткрывать,
	|	СтатьиБазыЗнанийСноски.ГиперссылкаПодсказка
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.Сноски КАК СтатьиБазыЗнанийСноски
	|ГДЕ
	|	СтатьиБазыЗнанийСноски.Ссылка = &Ссылка";
	
	// Подсветка кода.
	ЗапросПодсветкаКода = Новый Запрос;
	ЗапросПодсветкаКода.УстановитьПараметр("Ссылка", ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросПодсветкаКода.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнанийПодсветкаКода.Имя,
	|	СтатьиБазыЗнанийПодсветкаКода.Область,
	|	СтатьиБазыЗнанийПодсветкаКода.Текст,
	|	СтатьиБазыЗнанийПодсветкаКода.Язык
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.ПодсветкаКода КАК СтатьиБазыЗнанийПодсветкаКода
	|ГДЕ
	|	СтатьиБазыЗнанийПодсветкаКода.Ссылка = &Ссылка";	
	
	// Ключевые слова.
	ЗапросТеги = Новый Запрос;
	ЗапросТеги.УстановитьПараметр("Ссылка", ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросТеги.Текст = 
	"ВЫБРАТЬ
	|	СвязьКлючевыхСловБазыЗнаний.Тег,
	|	СвязьКлючевыхСловБазыЗнаний.Тег.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.СвязьКлючевыхСловБазыЗнаний КАК СвязьКлючевыхСловБазыЗнаний
	|ГДЕ
	|	СвязьКлючевыхСловБазыЗнаний.СтатьяБазыЗнаний = &Ссылка";
	
	// Заполнение данных.
	ВыборкаДанные = ЗапросДанные.Выполнить().Выбрать();
	ВыборкаДанные.Следующий();
	
	ЭтотОбъект.Родитель				= ВыборкаДанные.Родитель;
	ЭтотОбъект.Наименование			= ВыборкаДанные.Наименование;
	ЭтотОбъект.Текст				= ВыборкаДанные.Текст;
	ЭтотОбъект.ТекстHTML			= ВыборкаДанные.ТекстHTML;
	ЭтотОбъект.Черновик				= ВыборкаДанные.Черновик;
	ЭтотОбъект.КраткоеОписание		= ВыборкаДанные.КраткоеОписание;
	ЭтотОбъект.ПоложениеСодержания	= ВыборкаДанные.ПоложениеСодержания;
	ЭтотОбъект.РазрешитьСворачивание= ВыборкаДанные.РазрешитьСворачивание;
	ЭтотОбъект.РазделИмпортирован	= ВыборкаДанные.РазделИмпортирован;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Область) Тогда
		ЭтотОбъект.Содержание.Загрузить(ЗапросСодержание.Выполнить().Выгрузить());
		ЭтотОбъект.Категории.Загрузить(ЗапросКатегории.Выполнить().Выгрузить());
	КонецЕсли;

	ЭтотОбъект.Картинки.Загрузить(ЗапросКартинки.Выполнить().Выгрузить());
	ЭтотОбъект.Таблицы.Загрузить(ЗапросТаблицы.Выполнить().Выгрузить());
	ЭтотОбъект.Файлы.Загрузить(ЗапросФайлы.Выполнить().Выгрузить());
	ЭтотОбъект.Сноски.Загрузить(ЗапросСноски.Выполнить().Выгрузить());
	ЭтотОбъект.Теги.Загрузить(ЗапросТеги.Выполнить().Выгрузить());
	ЭтотОбъект.ПодсветкаКода.Загрузить(ЗапросПодсветкаКода.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоПараметрам()
	
	ЭтотОбъект.Область					= Параметры.Область;
	ЭтотОбъект.Наименование				= Параметры.Наименование;
	ЭтотОбъект.Идентификатор			= ?(ЗначениеЗаполнено(Параметры.Идентификатор), Параметры.Идентификатор, 
		ЭтотОбъект.УникальныйИдентификатор);
	ЭтотОбъект.Родитель					= Параметры.Родитель;
	ЭтотОбъект.Текст					= Параметры.Текст;
	ЭтотОбъект.ТекстHTML				= Параметры.ТекстHTML;
	ЭтотОбъект.ОписаниеИзменений		= Параметры.ОписаниеИзменений;
	ЭтотОбъект.РазрешитьСворачивание	= ?(Параметры.НовыйРаздел, Истина, Параметры.РазрешитьСворачивание);
	ЭтотОбъект.ТекущийЭлемент			= Элементы.Наименование;
	
	// Заполним содержание.
	Если ТипЗнч(Параметры.Содержание) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Структура Из Параметры.Содержание Цикл
			НоваяСтрока = ЭтотОбъект.Содержание.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	ЭтотОбъект.Содержание.Сортировать("НомерСтроки");
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Содержание Цикл
		Представление = "";
		Для Уровень = 2 По СтрокаТаблицы.Уровень Цикл
			Представление = Представление + "	";
		КонецЦикла;
		Представление = Представление + СтрокаТаблицы.Наименование;
		
		Элементы.Родитель.СписокВыбора.Добавить(СтрокаТаблицы.Область, Представление);
	КонецЦикла;
	
	Для Каждого СтруктураКартинки Из Параметры.Картинки Цикл
		НоваяСтрока = ЭтотОбъект.Картинки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураКартинки);
	КонецЦикла;
	
	Для Каждого СтруктураТаблицы Из Параметры.Таблицы Цикл
		НоваяСтрока = ЭтотОбъект.Таблицы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураТаблицы);
	КонецЦикла;
	
	Для Каждого СтруктураСноски Из Параметры.Сноски Цикл
		НоваяСтрока = ЭтотОбъект.Сноски.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСноски);
	КонецЦикла;
	
	Если Параметры.Свойство("Файлы") Тогда
		Для Каждого СтруктураФайла Из Параметры.Файлы Цикл
			НоваяСтрока = ЭтотОбъект.Файлы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураФайла);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ПодсветкаКода") Тогда
		Для Каждого СтруктураФайла Из Параметры.ПодсветкаКода Цикл
			НоваяСтрока = ЭтотОбъект.ПодсветкаКода.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураФайла);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияДанных(ПриСоздании = Истина)
	
	Если Параметры.ЗаполнитьИзПараметров И ПриСоздании Тогда
		ЗаполнитьДанныеФормыПоПараметрам();
	ИначеЕсли ЗначениеЗаполнено(СтатьяБазыЗнаний) Тогда
		Если СтатьяБазыЗнаний.РазделИмпортирован Тогда
			ЗаполнитьДанныеФормыРазделИмпортирован();
		КонецЕсли;	
		ЗаполнитьДанныеФормыПоСсылке();		
	КонецЕсли;
		
	ЭтотОбъект.ТекстСтатьи.УстановитьHTML(ЭтотОбъект.ТекстHTML, Новый Структура);
	
	ЭтотОбъект.ЭтоПодраздел				= ЗначениеЗаполнено(ЭтотОбъект.Область);
	ЭтотОбъект.НаименованиеДоИзменения	= ЭтотОбъект.Наименование;
	
	ПостроитьДеревоСодержаниеНаСервере();
	ПостроитьДеревоКатегорииНаСервере();
	
	ВыполнитьОформлениеФорматированногоДокумента();
	ОбновитьСписокТегов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыРазделИмпортирован()
	
	Если Не ПустаяСтрока(СтатьяБазыЗнаний.ТипФайлаИсточника) Тогда
		ЭтотОбъект.ТипФайлаИсточника = СтатьяБазыЗнаний.ТипФайлаИсточника;
	КонецЕсли;
	
	Попытка
		ХранилищеЗначения     = СтатьяБазыЗнаний.ИсточникХранилищеЗначения.Получить();
		АдресАрхиваВХранилище = ПоместитьВоВременноеХранилище(ХранилищеЗначения, Новый УникальныйИдентификатор);
		Если НЕ ПустаяСтрока(АдресАрхиваВХранилище) Тогда
			ЭтотОбъект.АдресАрхиваИсточника = АдресАрхиваВХранилище;
		КонецЕсли;	
 	Исключение
	КонецПопытки;
		
	ЭтотОбъект.ПредставлениеРазделаHTML = БазаЗнанийHTMLВызовСервера.ПолучитьТекстСтатьиИмпортированнойИзФайла(
		СтатьяБазыЗнаний, Истина);
	
КонецПроцедуры	

// Запись данных.

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОсвободитьСтатью = НЕ ЭтоПодраздел И (Результат = КодВозвратаДиалога.Да);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОсвободитьСтатью", ОсвободитьСтатью);
	
	Если ОсвободитьСтатью Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьИЗакрытьЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВводСтроки(ОписаниеОповещения, "", НСтр("ru = 'Укажите описание изменений статьи'"), 0, Истина);
	Иначе 
		ЗаписатьИЗакрытьЗавершение("", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьЗавершение(Результат, ДопПараметры) Экспорт
	
	ЭтотОбъект.ОписаниеИзменений = Результат;	
	ПараметрыЗакрытия = ЗаписатьНаСервере(ДопПараметры.ОсвободитьСтатью);
	Оповестить("БазаЗнаний_ЗаписьСтатьи");	
	ЭтотОбъект.Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеКлючевыхСлов()
	
	НаборЗаписей = РегистрыСведений.СвязьКлючевыхСловБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтатьяБазыЗнаний.Установить(СтатьяБазыЗнаний, Истина);
	НаборЗаписей.Прочитать();
	
	ТегиДоИзменений = НаборЗаписей.ВыгрузитьКолонку("Тег");
	
	// Записываем новые значения ключевых слов.
	НаборЗаписей.Очистить();
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Теги Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		ТегСсылка = СтрокаТаблицы.Тег;
		Если НЕ ЗначениеЗаполнено(ТегСсылка) Тогда
			ТегСсылка = Справочники.Теги.ПолучитьТегПоНаименованию(СтрокаТаблицы.Наименование);
		КонецЕсли;
		
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.СтатьяБазыЗнаний = СтатьяБазыЗнаний;
		ЗаписьРегистра.Тег	= ТегСсылка;
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
	
	// Добавим в данные обновления старые теги, для уменьшения статистики.
	ТегиПослеИзменений = НаборЗаписей.ВыгрузитьКолонку("Тег");
	Для Каждого Тег Из ТегиДоИзменений Цикл
		Если ТегиПослеИзменений.Найти(Тег) = Неопределено Тогда
			ТегиПослеИзменений.Добавить(Тег);
		КонецЕсли;
	КонецЦикла;
	
	// Обновление рейтинга ключевых слов.
	ПараметрыВыполнения = Новый Структура("КлючевыеСлова", ТегиПослеИзменений);
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		ЭтотОбъект.УникальныйИдентификатор,
		"БазаЗнаний.ОбновитьРейтингКлючевыхСлов",
		ПараметрыВыполнения,
		НСтр("ru = 'Обновление рейтинга ключевых слов'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСодержаниеВОбъектРекурсивно(ЭлементОбъект, ТаблицаДанных, СтрокиДерева)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокиДанных = ТаблицаДанных.НайтиСтроки(Новый Структура("Область", СтрокаДерева.Область));
		Если СтрокиДанных.Количество() > 0 Тогда
			НоваяСтрока = ЭлементОбъект.Содержание.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиДанных[0]);
		КонецЕсли;
		
		ЗаписатьСодержаниеВОбъектРекурсивно(ЭлементОбъект, ТаблицаДанных, СтрокаДерева.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗавершитьРедактированиеСтатьиНаСервере(СтатьяБазыЗнаний)
		
	Справочники.СтатьиБазыЗнаний.ЗавершитьРедактированиеСтатьи(СтатьяБазыЗнаний);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПодразделНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатьяБазыЗнаний) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОбъект = ЭтотОбъект.СтатьяБазыЗнаний.ПолучитьОбъект();
	
	// Удаляем картинки.
	СтрокиУдаления = ЭлементОбъект.Картинки.НайтиСтроки(Новый Структура("Область", ЭтотОбъект.Область));
	Для Каждого СтрокаТаблицы Из СтрокиУдаления Цикл
		ЭлементОбъект.Картинки.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	// Удаляем таблицы.
	СтрокиУдаления = ЭлементОбъект.Таблицы.НайтиСтроки(Новый Структура("Область", ЭтотОбъект.Область));
	Для Каждого СтрокаТаблицы Из СтрокиУдаления Цикл
		ЭлементОбъект.Таблицы.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	// Удаляем подсветку кода.
	СтрокиУдаления = ЭлементОбъект.ПодсветкаКода.НайтиСтроки(Новый Структура("Область", ЭтотОбъект.Область));
	Для Каждого СтрокаТаблицы Из СтрокиУдаления Цикл
		ЭлементОбъект.ПодсветкаКода.Удалить(СтрокаТаблицы);
	КонецЦикла;	
	
	// Удаляем сноски.
	ЭлементОбъект.Сноски.Очистить();
	
	// Находим строку области или создаем новую.
	СтрокаОбласти = ЭлементОбъект.Содержание.Найти(ЭтотОбъект.Область, "Область");
	Если СтрокаОбласти = Неопределено Тогда
		СтрокаОбласти = ЭлементОбъект.Содержание.Добавить();
		СтрокаОбласти.Область	= ЭтотОбъект.Область;
	КонецЕсли;
	
	// Устанавливаем все данные.
	СтрокаОбласти.Родитель				= ЭтотОбъект.Родитель;
	СтрокаОбласти.Наименование			= ЭтотОбъект.Наименование;
	СтрокаОбласти.Текст					= ЭтотОбъект.Текст;
	СтрокаОбласти.ТекстHTML				= ЭтотОбъект.ТекстHTML;
	СтрокаОбласти.ОписаниеИзменений		= ЭтотОбъект.ОписаниеИзменений;
	СтрокаОбласти.РазрешитьСворачивание	= ЭтотОбъект.РазрешитьСворачивание;
	Если ЭтотОбъект.РазделИмпортирован Тогда
		СтрокаОбласти.РазделИмпортирован = Истина;
		СтрокаОбласти.ОписаниеМетатегов  = ЭтотОбъект.ОписаниеМетатегов;
	КонецЕсли;	
	
	// Картинки.
	Для Каждого СтрокаКартинки Из ЭтотОбъект.Картинки Цикл
		НоваяСтрока = ЭлементОбъект.Картинки.Добавить();
		НоваяСтрока.Идентификатор = СтрокаКартинки.ИдентификаторКартинки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКартинки);
	КонецЦикла;
	
	// Таблицы.
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Таблицы Цикл
		НоваяСтрока = ЭлементОбъект.Таблицы.Добавить();
		НоваяСтрока.Идентификатор = СтрокаТаблицы.ИдентификаторТаблицы;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	// Файлы.
	Для Каждого СтрокаФайлы Из ЭтотОбъект.Файлы Цикл
		МассивСтрок = ЭлементОбъект.Файлы.НайтиСтроки(Новый Структура("Идентификатор", СтрокаФайлы.Идентификатор));
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока = ЭлементОбъект.Таблицы.Добавить();
			НоваяСтрока.Идентификатор = СтрокаФайлы.Идентификатор;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФайлы);
		КонецЕсли;	
	КонецЦикла;
	
	// ПодсветкаКода.
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.ПодсветкаКода Цикл
		НоваяСтрока = ЭлементОбъект.ПодсветкаКода.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;	
	
	// Сноски.
	Для Каждого СтрокаСноски Из ЭтотОбъект.Сноски Цикл
		НоваяСтрока = ЭлементОбъект.Сноски.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСноски);
	КонецЦикла;
	
	// Записываем.
	ЭлементОбъект.Записать();
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтатьюНаСервере(ОсвободитьСтатью)
	
	Если ЗначениеЗаполнено(ЭтотОбъект.СтатьяБазыЗнаний) Тогда
		ЭлементОбъект = ЭтотОбъект.СтатьяБазыЗнаний.ПолучитьОбъект();
	Иначе 
		ЭлементОбъект = Справочники.СтатьиБазыЗнаний.СоздатьЭлемент();
	КонецЕсли;
	
	// Очистка текущих данных.
	ЭлементОбъект.Содержание.Очистить();
	ЭлементОбъект.Категории.Очистить();
	ЭлементОбъект.Картинки.Очистить();
	ЭлементОбъект.Таблицы.Очистить();
	ЭлементОбъект.Файлы.Очистить();
	ЭлементОбъект.Сноски.Очистить();
	ЭлементОбъект.ПодсветкаКода.Очистить();
	
	// Общие данные.
	ЭлементОбъект.Наименование			= ЭтотОбъект.Наименование;
	ЭлементОбъект.Текст					= ЭтотОбъект.Текст;
	ЭлементОбъект.ТекстHTML				= ЭтотОбъект.ТекстHTML;
	ЭлементОбъект.Черновик				= ЭтотОбъект.Черновик;
	ЭлементОбъект.ОписаниеИзменений		= ЭтотОбъект.ОписаниеИзменений;
	ЭлементОбъект.КраткоеОписание		= ЭтотОбъект.КраткоеОписание;
	ЭлементОбъект.ПоложениеСодержания	= ЭтотОбъект.ПоложениеСодержания;
	ЭлементОбъект.РазделИмпортирован 	= ЭтотОбъект.РазделИмпортирован;
	ЭлементОбъект.ОписаниеМетатегов	 	= ЭтотОбъект.ОписаниеМетатегов;
	ЭлементОбъект.ТипФайлаИсточника		= ЭтотОбъект.ТипФайлаИсточника;
	
	Если ЭтотОбъект.РазделИмпортирован И Не ПустаяСтрока(ЭтотОбъект.АдресАрхиваИсточника) Тогда			
		Попытка
			ЭлементОбъект.ИсточникХранилищеЗначения = 
				Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ЭтотОбъект.АдресАрхиваИсточника));
		Исключение
		КонецПопытки;	
	КонецЕсли;	
	
	// Содержание.
	ЗаписатьСодержаниеВОбъектРекурсивно(ЭлементОбъект, ЭтотОбъект.Содержание, 
		ЭтотОбъект.СодержаниеДерево.ПолучитьЭлементы());
	
	// Категории.
	ЭлементОбъект.Категории.Загрузить(ЭтотОбъект.Категории.Выгрузить());
	
	// Картинки.
	Для Каждого СтрокаКартинки Из ЭтотОбъект.Картинки Цикл
		НоваяСтрока = ЭлементОбъект.Картинки.Добавить();
		НоваяСтрока.Идентификатор = СтрокаКартинки.ИдентификаторКартинки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКартинки);
	КонецЦикла;
	
	// Таблицы.
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Таблицы Цикл
		НоваяСтрока = ЭлементОбъект.Таблицы.Добавить();
		НоваяСтрока.Идентификатор = СтрокаТаблицы.ИдентификаторТаблицы;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	// Файлы.
	Для Каждого СтрокаФайлы Из ЭтотОбъект.Файлы Цикл
		НоваяСтрока = ЭлементОбъект.Файлы.Добавить();
		НоваяСтрока.Идентификатор = СтрокаФайлы.Идентификатор;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФайлы);
	КонецЦикла;
	
	// Сноски.
	Для Каждого СтрокаСноски Из ЭтотОбъект.Сноски Цикл
		НоваяСтрока = ЭлементОбъект.Сноски.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСноски);
	КонецЦикла;
	
	// Подсветка кода.
	Для Каждого СтрокаПодсветкаКода Из ЭтотОбъект.ПодсветкаКода Цикл
		НоваяСтрока = ЭлементОбъект.ПодсветкаКода.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодсветкаКода);
	КонецЦикла;	
	
	// Запись.
	ЭлементОбъект.ОсвободитьСтатью	= ОсвободитьСтатью;
	ЭлементОбъект.Записать();
	
	// На всякий случай заменяем текущее значение.
	СтатьяБазыЗнаний = ЭлементОбъект.Ссылка;
		
	// Ключевые слова.
	ЗаписатьДанныеКлючевыхСлов();
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервере(ОсвободитьСтатью = Ложь) Экспорт
	
	Если ЭтотОбъект.Модифицированность = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЭтотОбъект.РазделИмпортирован Тогда
		УдалитьОформлениеФорматированногоДокумента();	
		// Реквизит "Текст".
		Текст = ЭтотОбъект.ТекстСтатьи.ПолучитьТекст();	
		// Реквизит "Текст HTML".
		ЭтотОбъект.ТекстСтатьи.ПолучитьHTML(ТекстHTML, Новый Структура);
	КонецЕсли;	
	
	ПараметрыЗакрытия = Новый Структура;
	
	Если Параметры.НеВыполнятьЗапись = Истина Тогда // Все передаем в параметры.
		ПараметрыЗакрытия.Вставить("Область"				, ЭтотОбъект.Область);
		ПараметрыЗакрытия.Вставить("Родитель"				, ЭтотОбъект.Родитель);
		ПараметрыЗакрытия.Вставить("Наименование"			, ЭтотОбъект.Наименование);
		ПараметрыЗакрытия.Вставить("Текст"					, ЭтотОбъект.Текст);
		ПараметрыЗакрытия.Вставить("ТекстHTML"				, ЭтотОбъект.ТекстHTML);
		ПараметрыЗакрытия.Вставить("РазрешитьСворачивание"	, ЭтотОбъект.РазрешитьСворачивание);
		ПараметрыЗакрытия.Вставить("Картинки"				, ПолучитьМассивСтруктурКартинки(ЭтотОбъект.Картинки));
		ПараметрыЗакрытия.Вставить("Таблицы"				, ПолучитьМассивСтруктурТаблицы(ЭтотОбъект.Таблицы));
		ПараметрыЗакрытия.Вставить("Файлы"				    , ПолучитьМассивСтруктурФайлы(ЭтотОбъект.Файлы));
		ПараметрыЗакрытия.Вставить("ПодсветкаКода"			, ПолучитьМассивПодсветкиКода(ЭтотОбъект.ПодсветкаКода));
		ПараметрыЗакрытия.Вставить("Сноски"					, ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.Сноски.Выгрузить()));
	Иначе 
		Если ЭтоПодраздел Тогда
			ЗаписатьПодразделНаСервере();
		Иначе 
			ЗаписатьСтатьюНаСервере(ОсвободитьСтатью);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОформлениеФорматированногоДокумента();	
	
	ЭтаФорма.Модифицированность = Ложь;
	
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(ПредметыСтатьи, 
		"Статья", ЭтотОбъект.СтатьяБазыЗнаний);
		
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Решения, 
		"Владелец", ЭтотОбъект.СтатьяБазыЗнаний);
	
	Возврат ПараметрыЗакрытия;
		
КонецФункции

// Работа с разделами.

&НаКлиенте
Процедура ОткрытьРазделСтатьи(знач ИдентификаторРаздела)
	
	НовыйРаздел = Ложь;
	Если ИдентификаторРаздела = Неопределено Тогда
		ИдентификаторРаздела = Строка(Новый УникальныйИдентификатор);
		НовыйРаздел			 = Истина;
	КонецЕсли;
	
	ПараметрыФормы		= ПолучитьПараметрыФормыПодраздела(ИдентификаторРаздела);		
	ОписаниеОповещения  = Новый ОписаниеОповещения("ПриОкончанииРедактированияПодраздела", ЭтотОбъект, ПараметрыФормы);		
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеСтатьи", ПараметрыФормы, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсивноЗаполнитьМассивИзСодержания(Массив, СтрокиДерева, Уровень, ОбластьИсключение)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Область = ОбластьИсключение Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьСтроки = СтрокаДерева.Область;
		
		СтрокиДанных = ЭтотОбъект.Содержание.НайтиСтроки(Новый Структура("Область", ОбластьСтроки));
		Если СтрокиДанных.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Структура = Новый Структура("НомерСтроки, Область, Наименование, Уровень",
			Массив.Количество() + 1,
			СтрокиДанных[0].Область,
			СтрокиДанных[0].Наименование,
			Уровень + 1);
		
		Массив.Добавить(Структура);
		
		РекурсивноЗаполнитьМассивИзСодержания(Массив, СтрокаДерева.ПолучитьЭлементы(), Уровень + 1, ОбластьИсключение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсивноЗаполнитьПодчиненныеОбласти(Массив, ОбластьРодитель)
	
	МассивСтрок = Содержание.НайтиСтроки(Новый Структура("Родитель", ОбластьРодитель));
	Для Каждого СтрокаДерева Из МассивСтрок Цикл
		Массив.Добавить(СтрокаДерева.Область);
		
		РекурсивноЗаполнитьПодчиненныеОбласти(Массив, СтрокаДерева.Область);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыФормыПодраздела(ТекущаяОбласть)
	
	ТекСодержание = Новый Массив;
	РекурсивноЗаполнитьМассивИзСодержания(ТекСодержание, СодержаниеДерево.ПолучитьЭлементы(), 0, ТекущаяОбласть);
	
	// Содержание.
	СтрокиСодержание = ЭтотОбъект.Содержание.НайтиСтроки(Новый Структура("Область", ТекущаяОбласть));
	Если СтрокиСодержание.Количество() = 0 Тогда
		мНаименование	= "";
		мРодитель		= "";
		мТекст			= "";
		мТекстHTML		= "";
		мСворачивать	= Ложь;
	Иначе 
		мНаименование	= СтрокиСодержание[0].Наименование;
		мРодитель		= СтрокиСодержание[0].Родитель;
		мТекст			= СтрокиСодержание[0].Текст;
		мТекстHTML		= СтрокиСодержание[0].ТекстHTML;
		мСворачивать	= СтрокиСодержание[0].РазрешитьСворачивание;
	КонецЕсли;
	
	// Картинки.
	СтрокиКартинки	= ЭтотОбъект.Картинки.НайтиСтроки(Новый Структура("Область", ТекущаяОбласть));
	КартинкиОбласти	= ПолучитьМассивСтруктурКартинки(СтрокиКартинки);
	
	// Таблицы.
	СтрокиТаблицы	= ЭтотОбъект.Таблицы.НайтиСтроки(Новый Структура("Область", ТекущаяОбласть));
	ТаблицыОбласти	= ПолучитьМассивСтруктурТаблицы(СтрокиТаблицы);
	
	// Файлы.
	ВсеФайлы        = ПолучитьМассивСтруктурФайлы(ЭтотОбъект.Файлы);
	
	// Вставка кода
	СтрокиПодсветкаКода	= ЭтотОбъект.ПодсветкаКода.НайтиСтроки(Новый Структура("Область", ТекущаяОбласть));
	ТаблицаПодсветкаКода = ПолучитьМассивПодсветкиКода(СтрокиПодсветкаКода);
	
	// Сноски.
	МассивСноски	= Новый Массив;
	Для Каждого СтрокаСноски Из ЭтотОбъект.Сноски Цикл
		СтруктураСноски = Новый Структура("Идентификатор, Группа, Наименование, ГиперссылкаТип, ГиперссылкаАдрес, ГиперссылкаОткрывать, ГиперссылкаПодсказка");
		ЗаполнитьЗначенияСвойств(СтруктураСноски, СтрокаСноски);
		
		МассивСноски.Добавить(Новый ФиксированнаяСтруктура(СтруктураСноски));
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор"			, ЭтотОбъект.Идентификатор);
	ПараметрыФормы.Вставить("Ключ"					, ЭтотОбъект.СтатьяБазыЗнаний);
	ПараметрыФормы.Вставить("Область"				, ТекущаяОбласть);
	ПараметрыФормы.Вставить("Идентификатор"			, ЭтотОбъект.Идентификатор);
	ПараметрыФормы.Вставить("Идентификатор"			, ЭтотОбъект.Идентификатор);
	ПараметрыФормы.Вставить("Содержание"			, Новый ФиксированныйМассив(ТекСодержание));
	ПараметрыФормы.Вставить("Родитель"				, мРодитель);
	ПараметрыФормы.Вставить("Наименование"			, мНаименование);
	ПараметрыФормы.Вставить("Текст"					, мТекст);
	ПараметрыФормы.Вставить("ТекстHTML"				, мТекстHTML);
	ПараметрыФормы.Вставить("РазрешитьСворачивание"	, мСворачивать);
	ПараметрыФормы.Вставить("ОписаниеИзменений"		, ЭтотОбъект.ОписаниеИзменений);
	ПараметрыФормы.Вставить("Картинки"				, Новый ФиксированныйМассив(КартинкиОбласти));
	ПараметрыФормы.Вставить("Таблицы"				, Новый ФиксированныйМассив(ТаблицыОбласти));
	ПараметрыФормы.Вставить("Файлы"					, Новый ФиксированныйМассив(ВсеФайлы));
	ПараметрыФормы.Вставить("Сноски"				, Новый ФиксированныйМассив(МассивСноски));
	ПараметрыФормы.Вставить("ПодсветкаКода"			, Новый ФиксированныйМассив(ТаблицаПодсветкаКода));
	ПараметрыФормы.Вставить("НеВыполнятьЗапись"		, Истина);
	ПараметрыФормы.Вставить("ЗаполнитьИзПараметров"	, Истина);
	ПараметрыФормы.Вставить("НовыйРаздел"           , НовыйРаздел);
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ПриОкончанииРедактированияПодраздела(Результат, ДопПараметры) Экспорт 
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Область", Результат.Область);
	
	// Содержание.
	СтрокиСодержания = ЭтотОбъект.Содержание.НайтиСтроки(СтруктураОтбора);
	Если СтрокиСодержания.Количество() = 0 Тогда
		СтрокаОбласти = ЭтотОбъект.Содержание.Добавить();
		СтрокаОбласти.Область = Результат.Область;
	Иначе 
		СтрокаОбласти = СтрокиСодержания[0];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаОбласти, Результат, , "Область");
	
	// Представление родителя.
	СтрокиРодитель = ЭтотОбъект.Содержание.НайтиСтроки(Новый Структура("Область", Результат.Родитель));
	Если СтрокиРодитель.Количество() > 0 Тогда
		СтрокаОбласти.РодительПредставление = СтрокиРодитель[0].Наименование;
		СтрокаОбласти.Уровень				= СтрокиРодитель[0].Уровень + 1;
	Иначе 
		СтрокаОбласти.РодительПредставление	= "";
		СтрокаОбласти.Уровень				= 1;
	КонецЕсли;
	
	// Картинки.
	СтрокиКартинки = ЭтотОбъект.Картинки.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаКартинки Из СтрокиКартинки Цикл
		ЭтотОбъект.Картинки.Удалить(СтрокаКартинки);
	КонецЦикла;
	Для Каждого СтруктураКартинки Из Результат.Картинки Цикл
		НоваяСтрока = ЭтотОбъект.Картинки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураКартинки);
	КонецЦикла;
	
	// Таблицы.
	СтрокиТаблицы = ЭтотОбъект.Таблицы.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ЭтотОбъект.Таблицы.Удалить(СтрокаТаблицы);
	КонецЦикла;
	Для Каждого СтруктураТаблицы Из Результат.Таблицы Цикл
		НоваяСтрока = ЭтотОбъект.Таблицы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураТаблицы);
	КонецЦикла;
	
	// Файлы.	
	Для Каждого СтруктураТаблицы Из Результат.Файлы Цикл
		МассивСтрок = ЭтотОбъект.Файлы.НайтиСтроки(Новый Структура("Идентификатор", СтруктураТаблицы.Идентификатор));
		Если МассивСтрок.Количество() = 0 Тогда 
			НоваяСтрока = ЭтотОбъект.Файлы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураТаблицы);
		КонецЕсли;	
	КонецЦикла;
	
	// Сноски.
	ЭтотОбъект.Сноски.Очистить();
	Для Каждого СтруктураСноски Из Результат.Сноски Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект.Сноски.Добавить(), СтруктураСноски);
	КонецЦикла;
	
	// Подсветка кода.
	СтрокиПодсветкаКода = ЭтотОбъект.ПодсветкаКода.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиПодсветкаКода Цикл
		ЭтотОбъект.ПодсветкаКода.Удалить(СтрокаТаблицы);
	КонецЦикла;
	Для Каждого СтруктураТаблицы Из Результат.ПодсветкаКода Цикл
		НоваяСтрока = ЭтотОбъект.ПодсветкаКода.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураТаблицы);
	КонецЦикла;
	
	ПостроитьДеревоСодержаниеНаСервере();
	
	// Разворачиваем дерево.
	Для Каждого ЭлементДерева Из ЭтотОбъект.СодержаниеДерево.ПолучитьЭлементы() Цикл
		Элементы.СодержаниеДерево.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУдаленииУзлаСодержания(Результат, ДопПараметры) Экспорт 
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДопПараметры.Свойство("Область") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбластей = Новый Массив;
	РекурсивноЗаполнитьПодчиненныеОбласти(МассивОбластей, ДопПараметры.Область);
	
	Для Каждого ИмяОбласти Из МассивОбластей Цикл
		
		СтруктураОтбора = Новый Структура("Область", ИмяОбласти);
		
		// Удалим картинки.
		СтрокиКартинки = ЭтотОбъект.Картинки.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиКартинки Цикл
			ЭтотОбъект.Картинки.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		// Удалим таблицы.
		СтрокиТаблицы = ЭтотОбъект.Таблицы.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			ЭтотОбъект.Таблицы.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		// Удалим содержание.
		СтрокиСодержания = ЭтотОбъект.Содержание.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиСодержания Цикл
			ЭтотОбъект.Содержание.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла;
	
	ПостроитьДеревоСодержаниеНаСервере();
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

// Работа со сносками.

&НаКлиенте
Процедура ВыполнитьВставитьСноску(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	МассивСноски = Новый Массив;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Сноски Цикл
		СтруктураСноски = Новый Структура("Идентификатор, Группа, Наименование, ГиперссылкаТип, ГиперссылкаАдрес, ГиперссылкаОткрывать, ГиперссылкаПодсказка");
		ЗаполнитьЗначенияСвойств(СтруктураСноски, СтрокаТаблицы);
		
		МассивСноски.Добавить(Новый ФиксированнаяСтруктура(СтруктураСноски));
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Гиперссылка"	, ДопПараметры.Гиперссылка);
	ПараметрыФормы.Вставить("Текст"			, ДопПараметры.Текст);
	ПараметрыФормы.Вставить("Сноски"		, Новый ФиксированныйМассив(МассивСноски));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияСноски", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеСноски",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияСноски(Результат, ДопПараметры) Экспорт 
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДопПараметры.Текст) Тогда
		ТекстСтатьи.Удалить(ДопПараметры.Начало, ДопПараметры.Конец);
	КонецЕсли;

	ИдентификаторСноски	= Результат.Идентификатор;
	СтрокиСноски		= ЭтотОбъект.Сноски.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторСноски));
	Если СтрокиСноски.Количество() = 0 Тогда
		СтрокаСноски = ЭтотОбъект.Сноски.Добавить();
	Иначе 
		СтрокаСноски = СтрокиСноски[0];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаСноски, Результат);
	
	Если НЕ ПустаяСтрока(ДопПараметры.Текст) Тогда
		ТекстСтатьи.Удалить(ДопПараметры.Начало, ДопПараметры.Конец);
	КонецЕсли;
	
	РезультатВставки = ТекстСтатьи.Вставить(ДопПараметры.Начало, ИдентификаторСноски);
	РезультатВставки.ЦветТекста				= WebЦвета.Синий;
	РезультатВставки.НавигационнаяСсылка	= "ref:" + ИдентификаторСноски;
	
	НачалоВыделения	= РезультатВставки.ЗакладкаНачала;
	
	РезультатВставки = ТекстСтатьи.Вставить(РезультатВставки.ЗакладкаКонца, " ");
	РезультатВставки.НавигационнаяСсылка	= "";
	РезультатВставки.ЦветТекста				= Элементы.ТекстСтатьи.ЦветТекста;
	
	Элементы.ТекстСтатьи.УстановитьГраницыВыделения(НачалоВыделения, РезультатВставки.ЗакладкаКонца);
	
	Если Результат.Модифицированность Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Работа с гиперссылками.

&НаКлиенте
Процедура ВыполнитьВставитьГиперссылку(Результат, ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСсылки = БазаЗнанийКлиентСервер.ПолучитьСтруктуруСсылкиПоАдресу(ДопПараметры.Гиперссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Гиперссылка"	, ДопПараметры.Гиперссылка);
	ПараметрыФормы.Вставить("Текст"			, ДопПараметры.Текст);
	ПараметрыФормы.Вставить("ОписаниеСсылки", Новый ФиксированнаяСтруктура(ОписаниеСсылки));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияГиперссылки", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеГиперссылки",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияГиперссылки(Результат, ДопПараметры) Экспорт 
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДопПараметры.Текст) Тогда
		ТекстСтатьи.Удалить(ДопПараметры.Начало, ДопПараметры.Конец);
	КонецЕсли;
	
	Если ПустаяСтрока(Результат.Представление) Тогда		
		ЭтотОбъект.Модифицированность = Истина;		
		Возврат;
	КонецЕсли;
	
	Если Результат.Удалить Тогда
		НавигационнаяСсылка = "";
	Иначе 
		НавигационнаяСсылка = БазаЗнанийКлиентСервер.ПолучитьАдресСсылкиПоСтруктуре(Результат);
	КонецЕсли;
		
	РезультатВставки = ТекстСтатьи.Вставить(ДопПараметры.Начало, Результат.Представление);
	
	РезультатВставки.НавигационнаяСсылка = НавигационнаяСсылка;
	Если ПустаяСтрока(НавигационнаяСсылка) Тогда
		РезультатВставки.ЦветТекста = Элементы.ТекстСтатьи.ЦветТекста;
	Иначе 
		РезультатВставки.ЦветТекста = WebЦвета.Синий;
	КонецЕсли;
	
	НачалоВыделения	= РезультатВставки.ЗакладкаНачала;
	
	РезультатВставки = ТекстСтатьи.Вставить(РезультатВставки.ЗакладкаКонца, " ");
	РезультатВставки.НавигационнаяСсылка	= "";
	РезультатВставки.ЦветТекста				= Элементы.ТекстСтатьи.ЦветТекста;
	
	Элементы.ТекстСтатьи.УстановитьГраницыВыделения(НачалоВыделения, РезультатВставки.ЗакладкаКонца);
	
	Если Результат.Модифицированность Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Работа с картинками.

&НаКлиенте
Процедура ВыполнитьВставитьКартинку(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКартинки	= ДопПараметры.ИмяКартинки;
	
	МассивИмена = Новый Массив;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Картинки Цикл
		Если СтрокаТаблицы.Имя = ИмяКартинки Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИмена.Добавить(СтрокаТаблицы.Имя);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторКартинки"	, "");
	ПараметрыФормы.Вставить("Идентификатор"			, ЭтотОбъект.Идентификатор);
	ПараметрыФормы.Вставить("АдресХранилища"		, "");
	ПараметрыФормы.Вставить("Имя"					, ИмяКартинки);
	ПараметрыФормы.Вставить("Подпись"				, "");
	ПараметрыФормы.Вставить("Выравнивание"			, 0);
	ПараметрыФормы.Вставить("Граница"				, 0);
	ПараметрыФормы.Вставить("Высота"				, 200);
	ПараметрыФормы.Вставить("Подсказка"				, "");
	ПараметрыФормы.Вставить("Имена"					, Новый ФиксированныйМассив(МассивИмена));
	ПараметрыФормы.Вставить("Файл"					, ПредопределенноеЗначение("Справочник.СтатьиБазыЗнанийПрисоединенныеФайлы.ПустаяСсылка"));
	ПараметрыФормы.Вставить("СтатьяБазыЗнаний"		, ЭтотОбъект.СтатьяБазыЗнаний);
	
	Если ЗначениеЗаполнено(ИмяКартинки) Тогда
		МассивСтроки = ЭтотОбъект.Картинки.НайтиСтроки(Новый Структура("Область, Имя", ЭтотОбъект.Область, ИмяКартинки));
		Если МассивСтроки.Количество() > 0 Тогда
			СтрокаКартинки = МассивСтроки[0];									
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, СтрокаКартинки);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыФормы.ИдентификаторКартинки) Тогда
		ПараметрыФормы.ИдентификаторКартинки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ДопПараметры.Вставить("ИдентификаторКартинки", ПараметрыФормы.ИдентификаторКартинки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияКартинки", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеКартинки",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияКартинки(Результат, ДопПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Результат.Свойство("Имя") Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = ЭтотОбъект.Картинки.НайтиСтроки(Новый Структура("ИдентификаторКартинки", 
		ДопПараметры.ИдентификаторКартинки));
		
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТаблицы = МассивСтрок[0];
	Иначе 
		СтрокаТаблицы = ЭтотОбъект.Картинки.Добавить();
		СтрокаТаблицы.Область				= ЭтотОбъект.Область;
		СтрокаТаблицы.ИдентификаторКартинки	= ДопПараметры.ИдентификаторКартинки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Результат);
	
	Если Результат.ВставкаВТекст = Истина Тогда
	
		ТекстПодстановки = "[picture='" + Результат.Имя + "']";
		
		Если БазаЗнанийКлиентСервер.ЭтоСтрокаКартинки(ДопПараметры.Текст) Тогда
			ТекстСтатьи.Удалить(ДопПараметры.Начало, ДопПараметры.Конец);
		КонецЕсли;
		
		РезультатВставки			= ТекстСтатьи.Вставить(ДопПараметры.Начало, ТекстПодстановки);
		РезультатВставки.ЦветФона 	= WebЦвета.Белый;
		РезультатВставки.ЦветТекста = WebЦвета.Зеленый;
		НачалоВыделения				= РезультатВставки.ЗакладкаНачала;
		
		РезультатВставки 			= ТекстСтатьи.Вставить(РезультатВставки.ЗакладкаКонца, " ");
		РезультатВставки.ЦветФона 	= Элементы.ТекстСтатьи.ЦветФона;
		РезультатВставки.ЦветТекста = WebЦвета.Зеленый;
		
		Элементы.ТекстСтатьи.УстановитьГраницыВыделения(НачалоВыделения, РезультатВставки.ЗакладкаКонца);
				
	КонецЕсли;
	
	Если Результат.Модифицированность Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры	

// Работа с таблицами.
&НаКлиенте
Процедура ВыполнитьВставитьТаблицу(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = ДопПараметры.ИмяТаблицы;
	
	МассивИмена = Новый Массив;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Таблицы Цикл
		Если СтрокаТаблицы.Имя = ИмяТаблицы Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИмена.Добавить(СтрокаТаблицы.Имя);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторТаблицы"	, "");
	ПараметрыФормы.Вставить("Идентификатор"			, ЭтотОбъект.Идентификатор);	
	ПараметрыФормы.Вставить("Имя"					, ИмяТаблицы);
	ПараметрыФормы.Вставить("Подпись"				, "");
	ПараметрыФормы.Вставить("Выравнивание"			, 0);
	ПараметрыФормы.Вставить("Имена"					, Новый ФиксированныйМассив(МассивИмена));
	ПараметрыФормы.Вставить("Файл"					, 
		ПредопределенноеЗначение("Справочник.СтатьиБазыЗнанийПрисоединенныеФайлы.ПустаяСсылка"));
		
	ПараметрыФормы.Вставить("СтатьяБазыЗнаний"		, ЭтотОбъект.СтатьяБазыЗнаний);
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		МассивСтроки = ЭтотОбъект.Таблицы.НайтиСтроки(Новый Структура("Область, Имя", ЭтотОбъект.Область, ИмяТаблицы));
		Если МассивСтроки.Количество() > 0 Тогда
			СтрокаТаблицы = МассивСтроки[0];		
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, СтрокаТаблицы);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПараметрыФормы.ИдентификаторТаблицы) Тогда
		ПараметрыФормы.ИдентификаторТаблицы = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
		
	ДопПараметры.Вставить("ИдентификаторТаблицы", ПараметрыФормы.ИдентификаторТаблицы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияТаблицы", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеТаблицы",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияТаблицы(Результат, ДопПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Результат.Свойство("Имя") Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = ЭтотОбъект.Таблицы.НайтиСтроки(Новый Структура("ИдентификаторТаблицы", ДопПараметры.ИдентификаторТаблицы));
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТаблицы = МассивСтрок[0];
	Иначе 
		СтрокаТаблицы = ЭтотОбъект.Таблицы.Добавить();
		СтрокаТаблицы.Область				= ЭтотОбъект.Область;
		СтрокаТаблицы.ИдентификаторТаблицы	= ДопПараметры.ИдентификаторТаблицы;
		СтрокаТаблицы.Файл					= Результат.Файл;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Результат);
	
	Если Результат.ВставкаВТекст = Истина Тогда
		
		ТекстПодстановки = "[table='" + Результат.Имя + "']";
		
		Если БазаЗнанийКлиентСервер.ЭтоСтрокаТаблицы(ДопПараметры.Текст) Тогда
			ТекстСтатьи.Удалить(ДопПараметры.Начало, ДопПараметры.Конец);
		КонецЕсли;
		
		РезультатВставки 			= ТекстСтатьи.Вставить(ДопПараметры.Начало, ТекстПодстановки);
		РезультатВставки.ЦветФона 	= WebЦвета.Белый;
		РезультатВставки.ЦветТекста	= WebЦвета.Зеленый;
		НачалоВыделения				= РезультатВставки.ЗакладкаНачала;
		
		РезультатВставки 			= ТекстСтатьи.Вставить(РезультатВставки.ЗакладкаКонца, " ");
		РезультатВставки.ЦветФона 	= Элементы.ТекстСтатьи.ЦветФона;
		РезультатВставки.ЦветТекста	= WebЦвета.Зеленый;
		
		Элементы.ТекстСтатьи.УстановитьГраницыВыделения(НачалоВыделения, РезультатВставки.ЗакладкаКонца);
		
	КонецЕсли;
	
	Если Результат.Модифицированность Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Работа с таблицами.
&НаКлиенте
Процедура ВыполнитьВставитьКод(Результат, ДопПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПодсветкаКода = ДопПараметры.Имя;
	
	МассивИмена = Новый Массив;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.ПодсветкаКода Цикл
		Если СтрокаТаблицы.Имя = ИмяПодсветкаКода Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИмена.Добавить(СтрокаТаблицы.Имя);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор"			, ЭтотОбъект.Идентификатор);
	ПараметрыФормы.Вставить("Имя"					, ИмяПодсветкаКода);
	ПараметрыФормы.Вставить("Текст"					, "");
	ПараметрыФормы.Вставить("Язык"					, "");
	ПараметрыФормы.Вставить("Имена"					, Новый ФиксированныйМассив(МассивИмена));
	ПараметрыФормы.Вставить("СтатьяБазыЗнаний"		, ЭтотОбъект.СтатьяБазыЗнаний);
	
	Если ЗначениеЗаполнено(ИмяПодсветкаКода) Тогда
		МассивСтроки = ЭтотОбъект.ПодсветкаКода.НайтиСтроки(Новый Структура("Область, Имя", 
			ЭтотОбъект.Область, ИмяПодсветкаКода));
		Если МассивСтроки.Количество() > 0 Тогда
			СтрокаКартинки = МассивСтроки[0];									
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, СтрокаКартинки);
		КонецЕсли;
	КонецЕсли;
		
	ДопПараметры.Вставить("Идентификатор", ПараметрыФормы.Идентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияВставкиКода", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеКода",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
	
	&НаКлиенте
Процедура ПриОкончанииРедактированияВставкиКода(Результат, ДопПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Результат.Свойство("Имя") Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = ЭтотОбъект.ПодсветкаКода.НайтиСтроки(Новый Структура("Имя", ДопПараметры.Имя));
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТаблицы = МассивСтрок[0];
	Иначе 
		СтрокаТаблицы = ЭтотОбъект.ПодсветкаКода.Добавить();
		СтрокаТаблицы.Область = ЭтотОбъект.Область;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Результат);
	
	Если Результат.ВставкаВТекст = Истина Тогда
		
		ТекстПодстановки = "[code='" + Результат.Имя + "']";
		
		Если БазаЗнанийКлиентСервер.ЭтоСтрокаПодсветкиКода(ДопПараметры.Текст) Тогда
			ТекстСтатьи.Удалить(ДопПараметры.Начало, ДопПараметры.Конец);
		КонецЕсли;
		
		РезультатВставки 			= ТекстСтатьи.Вставить(ДопПараметры.Начало, ТекстПодстановки);
		РезультатВставки.ЦветФона 	= WebЦвета.Белый;
		РезультатВставки.ЦветТекста	= WebЦвета.ТемноКрасный;
		НачалоВыделения				= РезультатВставки.ЗакладкаНачала;
		
		РезультатВставки 			= ТекстСтатьи.Вставить(РезультатВставки.ЗакладкаКонца, " ");
		РезультатВставки.ЦветФона 	= Элементы.ТекстСтатьи.ЦветФона;
		РезультатВставки.ЦветТекста	= WebЦвета.ТемноКрасный;
		
		Элементы.ТекстСтатьи.УстановитьГраницыВыделения(НачалоВыделения, РезультатВставки.ЗакладкаКонца);
		
	КонецЕсли;
	
	Если Результат.Модифицированность Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Работа с тегами.

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаТегов(ТаблицаТегов)

	Представление = "";
	Для Каждого СтрокаТаблицы Из ТаблицаТегов Цикл
		Представление = Представление + СтрокаТаблицы.Наименование + ", ";
	КонецЦикла;

	Возврат Представление;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораДляКлючевогоПоля(Текст, ИндексВСписке)
	
	ВозвращаемыйСписок = Новый СписокЗначений;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	Теги.Ссылка КАК Тег,
	|	ПРЕДСТАВЛЕНИЕ(Теги.Ссылка) КАК Представление,
	|	ЕСТЬNULL(РейтингКлючевыхСловБазыЗнаний.Количество, 0) КАК Рейтинг
	|ИЗ
	|	Справочник.Теги КАК Теги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РейтингКлючевыхСловБазыЗнаний КАК РейтингКлючевыхСловБазыЗнаний
	|		ПО Теги.Ссылка = РейтингКлючевыхСловБазыЗнаний.Тег
	|			И (РейтингКлючевыхСловБазыЗнаний.КатегорияБазыЗнаний = ЗНАЧЕНИЕ(Справочник.КатегорииБазыЗнаний.ПустаяСсылка))
	|ГДЕ
	|	Теги.Наименование >= &ВведеннаяСтрока
	|	И ПОДСТРОКА(Теги.Наименование, 1, 500) = &ВведеннаяСтрока
	|
	|УПОРЯДОЧИТЬ ПО
	|	Теги.Наименование,
	|	Рейтинг";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "500", Формат(СтрДлина(Текст), "ЧГ="));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВведеннаяСтрока", Текст);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ВозвращаемыйСписок;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("Тег"					, Выборка.Тег);
		ЗначениеВыбора.Вставить("Наименование"			, Выборка.Представление);
		ЗначениеВыбора.Вставить("Рейтинг"				, Выборка.Рейтинг);
		ЗначениеВыбора.Вставить("ИндексВСпискеТегов"	, ИндексВСписке);
		
		ВозвращаемыйСписок.Добавить(ЗначениеВыбора,
			ЗначениеВыбора.Наименование + " (" + Формат(ЗначениеВыбора.Рейтинг, "ЧН=0; ЧГ=") + ")");
		
	КонецЦикла;
	
	Возврат ВозвращаемыйСписок;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазобратьСтрокуСТегами(СтрокаТегов)
	
	МассивТегов		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаТегов, ",");
	Соответствие	= Новый Соответствие;
	Для Каждого ЗначениеМассива Из МассивТегов Цикл
		Соответствие.Вставить(НРег(ЗначениеМассива), Новый Структура("Ссылка, Наименование", 
			Неопределено, ЗначениеМассива));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНаименований", МассивТегов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Теги.Ссылка,
	|	Теги.Наименование
	|ИЗ
	|	Справочник.Теги КАК Теги
	|ГДЕ
	|	Теги.Наименование В(&МассивНаименований)
	|	И НЕ Теги.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначениеПоиска = НРег(Выборка.Наименование);
		
		Структура = Соответствие.Получить(ЗначениеПоиска);
		Если Структура = Неопределено Тогда
			Структура = Новый Структура("Ссылка, Наименование");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
		
		Соответствие.Вставить(ЗначениеПоиска, Структура);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

&НаКлиенте
Процедура ПрисоединенныеФайлыПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Записать(Неопределено);	
	Если ЗначениеЗаполнено(СтатьяБазыЗнаний) Тогда
		ПрисоединенныеФайлыФрагмент();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрисоединенныеФайлыФрагмент()
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла", ЭтотОбъект.СтатьяБазыЗнаний);
	ПараметрыФормы.Вставить("РежимВыбора", 	 Ложь);	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьФайлПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Записать(Неопределено);
	Если ЗначениеЗаполнено(СтатьяБазыЗнаний) Тогда
		ВставитьФайлФрагмент();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВставитьФайлФрагмент()	
	
	ВыделенныйТекст	= СокрЛП(Элементы.ТекстСтатьи.ВыделенныйТекст);
	ЗакладкаНачало	= Неопределено;
	ЗакладкаКонец 	= Неопределено;
	
	Элементы.ТекстСтатьи.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);	
	МассивЭлементов	= ТекстСтатьи.ПолучитьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
	Если МассивЭлементов.Количество() > 0 И ТипЗнч(МассивЭлементов[0]) = Тип("ТекстФорматированногоДокумента") Тогда
		ЭлементФорматированногоДокумента = МассивЭлементов[0];
		Если ЗакладкаНачало = ЗакладкаКонец 
			И БазаЗнанийКлиентСервер.ЭтоСтрокаФайла(ЭлементФорматированногоДокумента.Текст) Тогда
			
			ЗакладкаНачало	= ЭлементФорматированногоДокумента.ЗакладкаНачала;
			ЗакладкаКонец	= ЭлементФорматированногоДокумента.ЗакладкаКонца;
			ВыделенныйТекст	= ЭлементФорматированногоДокумента.Текст;
			
		КонецЕсли;
	КонецЕсли;
	
	ИДФайла		= БазаЗнанийКлиентСервер.ПолучитьИДФайла(ВыделенныйТекст);
	ДопПараметры= Новый Структура("ИДФайла, Текст, Начало, Конец", ИДФайла, ВыделенныйТекст, ЗакладкаНачало, 
		ЗакладкаКонец);
	
	Если ПустаяСтрока(ИДФайла) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВставитьФайл", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Строка описания файла не найдена.
                                                 |Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьВставитьФайл(КодВозвратаДиалога.Да, ДопПараметры); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВставитьФайл(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИДФайла = "";	
	Если ДополнительныеПараметры.Свойство("ИДФайла") Тогда
		ИДФайла = ДополнительныеПараметры.ИДФайла;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла", ЭтотОбъект.СтатьяБазыЗнаний);
	ПараметрыФормы.Вставить("РежимВыбора", 	 Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеВставкиФайла", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВставкиФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСтруктура = ДополнитьСтруктуруФайла(Результат);
	
	МассивСтрок = ЭтотОбъект.Файлы.НайтиСтроки(Новый Структура("Идентификатор", РезультатСтруктура.ИДФайла));
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаФайла = МассивСтрок[0];
	Иначе
		СтрокаФайла               = ЭтотОбъект.Файлы.Добавить();
		СтрокаФайла.Файл          = Результат;
		СтрокаФайла.Идентификатор = РезультатСтруктура.ИДФайла;
	КонецЕсли;	
	
	Если НЕ ПустаяСтрока(ДополнительныеПараметры.ИДФайла) Тогда
		ТекстСтатьи.Удалить(ДополнительныеПараметры.Начало, ДополнительныеПараметры.Конец);
	КонецЕсли;
	
	Если РезультатСтруктура.Свойство("ИДФайла") Тогда
		ТекстПодстановки 			= "[fileid='" + РезультатСтруктура.ИДФайла + "', title='" 
			+ РезультатСтруктура.ИмяФайлаСРасширением + "']";
			
		РезультатВставки			= ТекстСтатьи.Вставить(ДополнительныеПараметры.Начало, ТекстПодстановки);
		РезультатВставки.ЦветФона 	= WebЦвета.Белый;
		РезультатВставки.ЦветТекста = WebЦвета.Зеленый;
		НачалоВыделения				= РезультатВставки.ЗакладкаНачала;
		
		РезультатВставки 			= ТекстСтатьи.Вставить(РезультатВставки.ЗакладкаКонца, " ");
		РезультатВставки.ЦветФона 	= Элементы.ТекстСтатьи.ЦветФона;
		РезультатВставки.ЦветТекста = WebЦвета.Зеленый;		
		Элементы.ТекстСтатьи.УстановитьГраницыВыделения(НачалоВыделения, РезультатВставки.ЗакладкаКонца);		
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДополнитьСтруктуруФайла(Результат)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИмяФайла",  Результат);	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.СтатьиБазыЗнанийПрисоединенныеФайлы") Тогда
		ИмяФайлаСРасширением = Результат.Наименование + "." + Результат.Расширение;
		ИмяФайлаСРасширением = СтрЗаменить(ИмяФайлаСРасширением, "..", ".");
		СтруктураВозврата.Вставить("ИмяФайлаСРасширением", ИмяФайлаСРасширением);
		СтруктураВозврата.Вставить("ИДФайла", 			   Строка(Результат.УникальныйИдентификатор()));
	КонецЕсли;
	
	Возврат СтруктураВозврата; 
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокТегов()
		
	// Очистим старые теги.
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого СтрокаТегов Из Элементы.ВыбранныеТеги.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(СтрокаТегов);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
		
	// Вновь отобразим теги, которые есть в статье.
	ГруппаРодитель 	= Неопределено;
	НомерСтрокиГрупп= 0;
	ТекущаяШирина	= 0;
	ШрифтПоУмолчанию= Новый Шрифт("ANSI моноширинный шрифт");
	НомерСтроки     = 0;
	Для Каждого Строки Из ЭтотОбъект.Теги Цикл
        
        Если НЕ ЗначениеЗаполнено(Строки.Тег) Тогда
        	Продолжить;
        КонецЕсли; 
        
        ЗначениеТега = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строки.Тег, "Наименование,ЦветФона,ЦветТекста");
        
		Если ГруппаРодитель = Неопределено ИЛИ ТекущаяШирина + СтрДлина(ЗначениеТега.Наименование) + 3 > 70 Тогда
			
			ГруппаРодитель 						= Элементы.Добавить("ГруппаТеговФормы" + НомерСтрокиГрупп, Тип("ГруппаФормы"),
				Элементы.ВыбранныеТеги);
			ГруппаРодитель.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаРодитель.Отображение 			= ОтображениеОбычнойГруппы.Нет;
			ГруппаРодитель.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаРодитель.ОтображатьЗаголовок 	= Ложь;			
			НомерСтрокиГрупп 					= НомерСтрокиГрупп + 3;
			ТекущаяШирина 						= 0;
			
		КонецЕсли;
        
        ЦветФона   = ?(ПустаяСтрока(ЗначениеТега.ЦветФона), WebЦвета.Белый,
            РаботаСЦветомКлиентСервер.HexВЦвет(ЗначениеТега.ЦветФона));
        ЦветТекста = ?(ПустаяСтрока(ЗначениеТега.ЦветТекста), WebЦвета.Черный,
            РаботаСЦветомКлиентСервер.HexВЦвет(ЗначениеТега.ЦветТекста));
        
		Поле = Элементы.Добавить("ТегФормы" + Формат(НомерСтроки, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="), Тип("ДекорацияФормы"),
			ГруппаРодитель);
		МассивСтрок    = Новый Массив;                                                       
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" " + ЗначениеТега.Наименование + " ", ШрифтПоУмолчанию));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.УдалитьТег,,,,
			"ТегФормы" + Формат(НомерСтроки, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=")));
		Поле.Заголовок   = Новый ФорматированнаяСтрока(МассивСтрок);
        Поле.ЦветФона    = ЦветФона;
        Поле.ЦветТекста  = ЦветТекста;
		Поле.РастягиватьПоГоризонтали = Ложь;
		Поле.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_УдалениеТега");
		
		ТекущаяШирина = ТекущаяШирина + СтрДлина(ЗначениеТега.Наименование) + 3;
		НомерСтроки   = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалениеТега(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
		
	ИндексСтроки = Сред(НавигационнаяСсылка, СтрДлина("ТегФормы") + 1);
	ЭтотОбъект.Теги.Удалить(ИндексСтроки);	
	ОбновитьСписокТегов();	
	Модифицированность = Истина;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Теги") Тогда
		ДобавитьТегСервер(ВыбранноеЗначение);		
	КонецЕсли;
	
	Элемент.ОбновитьТекстРедактирования();	
	ОбновитьСписокТегов();
	ТекущийЭлемент     = Элементы.Тег;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТегСервер(НаименованиеТега)
	
	Результат = Справочники.Теги.НайтиПоНаименованию(НаименованиеТега, Истина);
	
	Если Результат.Пустая() Тогда
		
		ТегОбъект 				= Справочники.Теги.СоздатьЭлемент();
		ТегОбъект.Наименование 	= НаименованиеТега;
		ТегОбъект.Записать();
		Результат				= ТегОбъект.Ссылка;
		
	КонецЕсли;
	
	НайденныеСтроки = ЭтотОбъект.Теги.НайтиСтроки(Новый Структура("Тег", Результат));
	
	Если НайденныеСтроки.Количество() > 0 Тогда				
		// Переместим строку в конец.
		ЭтотОбъект.Теги.Удалить(НайденныеСтроки[0]);		
	КонецЕсли;
	
	// Добавим в конец.
	НоваяСтрока 			 = ЭтотОбъект.Теги.Добавить();
	НоваяСтрока.Тег 		 = Результат;
	НоваяСтрока.Наименование = Результат.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьТегСервер(Текст);
		ОбновитьСписокТегов();		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлПослеВопросаЗаписатьСтатью(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда		
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.Содержание.Очистить();
	ЭтотОбъект.СодержаниеДерево.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.Картинки.Очистить();
	ЭтотОбъект.Таблицы.Очистить();
	ЭтотОбъект.Сноски.Очистить();
	Модифицированность = Истина;
	
	Если ЗаписатьНаКлиенте() Тогда 	
		ВыбратьФайлПослеВопросаФрагмент();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьНаКлиенте()
	
	Результат = ЭтотОбъект.ПроверитьЗаполнение();
	Если НЕ Результат Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ПараметрыЗакрытия = ЗаписатьНаСервере();
	
	// Произошла запись статьи или подраздела.
	Если ПараметрыЗакрытия.Количество() = 0 Тогда // оповещение о записи статьи или подраздела.
		Оповестить("БазаЗнаний_ЗаписьСтатьи", , СтатьяБазыЗнаний);
	Иначе // Оповещение владельца о необходимости записи данных формы.
		Если ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("УправляемаяФорма") 
			И ЭтотОбъект.ВладелецФормы.ИмяФормы = "Справочник.СтатьиБазыЗнаний.Форма.РедактированиеСтатьи" Тогда
			
			ЭтотОбъект.ВладелецФормы.ПриОкончанииРедактированияПодраздела(ПараметрыЗакрытия, Неопределено);
			ЭтотОбъект.ВладелецФормы.ЗаписатьНаСервере(Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Процедура ВыбратьФайлПослеВопросаФрагмент()
	
	Диалог					= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ОписаниеОповещения		= Новый ОписаниеОповещения("ВыбратьФайлЗавершениеОтображенияДиалогаВыбораФайла", ЭтотОбъект);
	Диалог.МножественныйВыбор = Ложь;	
	Диалог.Фильтр = "Документ MS Word(*.docx);(*.doc);Документ MS Excel(*.xlsx);(*.xls)|*.docx;*.doc;*.xlsx;*.xls";
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗавершениеОтображенияДиалогаВыбораФайла(ИмяФайла, ДополнительныеПараметры) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		
		Если ИмяФайла = Неопределено ИЛИ ИмяФайла.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ОткрываемыйФайл = Новый Файл(ИмяФайла[0]);
		ЭтотОбъект.Содержание.Очистить();
		ЭтотОбъект.СодержаниеДерево.ПолучитьЭлементы().Очистить();
		
		Если ОткрываемыйФайл.Расширение = ".docx" ИЛИ ОткрываемыйФайл.Расширение = ".doc" Тогда		
			ЭтотОбъект.ТипФайлаИсточника = СтрЗаменить(ОткрываемыйФайл.Расширение, ".", "");
			Состояние(НСтр("ru = 'Запуск MS Word...'"),,, БиблиотекаКартинок.ДлительнаяОперация48);
			Попытка
				MSПриложение 		 = Новый COMОбъект("Word.Application");
				MSПриложение.Visible = Ложь;
				MSПриложение.Documents.Open(ИмяФайла[0]); 
				Документ             = MSПриложение.ActiveDocument();
				// Источник: http://scriptcoding.ru/2014/01/22/sochranenie-documenta-word/.
				FormatHTML           = 8;
			Исключение
				ОШ = ОписаниеОшибки();
				ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Произошла ошибка при инициализации MS Word по причине: %1'"), ОШ));
				Попытка
					MSПриложение.Application.Quit();
				Исключение
				КонецПопытки;
				MSПриложение = Неопределено;				
				Возврат;
			КонецПопытки;
			
		ИначеЕсли ОткрываемыйФайл.Расширение = ".xlsx" ИЛИ ОткрываемыйФайл.Расширение = ".xls" Тогда
			ЭтотОбъект.ТипФайлаИсточника = СтрЗаменить(ОткрываемыйФайл.Расширение, ".", "");
			Состояние(НСтр("ru = 'Запуск MS Excel...'"),,, БиблиотекаКартинок.ДлительнаяОперация48);
			Попытка
				MSПриложение               = Новый COMОбъект("Excel.Application");
				MSПриложение.Visible       = 1;
				MSПриложение.DisplayAlerts = 0;
				MSПриложение.WorkBooks.Open(ИмяФайла[0]);				
				Документ                   = MSПриложение.ActiveWorkbook();
				// Источник: https://msdn.microsoft.com/ru-ru/library/microsoft.office.interop.excel.xlfileformat.aspx.				
				FormatHTML           	   = 44;				
			Исключение
				ОШ = ОписаниеОшибки();
				ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Произошла ошибка при инициализации MS Excel по причине: %1'"), ОШ));
				Попытка
					MSПриложение.Application.Quit();
				Исключение
				КонецПопытки;
				MSПриложение = Неопределено;				
				Возврат;
			КонецПопытки;
			
		КонецЕсли;			
		
		РабочийКаталогТекущегоПользователя = РабочийКаталогТекущегоПользователя();
		ПутьСохранения        = РабочийКаталогТекущегоПользователя + "kb\import\" 
			+ СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_") + "\";
		КаталогПутьСохранения = Новый Файл(ПутьСохранения);
		
		Если НЕ КаталогПутьСохранения.Существует() Тогда
			СоздатьКаталог(ПутьСохранения);
		КонецЕсли;
		
		ЭтотОбъект.УдаляемыеКаталоги.Добавить(ПутьСохранения);
		
		Документ.SaveAs(ПутьСохранения + "file.html", FormatHTML);
		Документ.Close(); 
		MSПриложение.Quit();
		MSПриложение   = Неопределено;
		Документ 	   = Неопределено;
		ОткрываемыйФайл= Неопределено;
		
		Если ЭтотОбъект.ТипФайлаИсточника = "docx" ИЛИ ЭтотОбъект.ТипФайлаИсточника = "doc" Тогда
			
			// Разбор ХТМЛ.
			ЧтениеHTML     = Новый ЧтениеHTML;
			ЧтениеHTML.ОткрытьФайл(ПутьСохранения + "file.html");
			ПостроительDOM = Новый ПостроительDOM;   
			ДокументHTML   = ПостроительDOM.Прочитать(ЧтениеHTML);		
			ЧтениеHTML.Закрыть();			
			
			ЭлементыHEAD   = ДокументHTML.ПолучитьЭлементыПоИмени("HEAD");
			Если ЭлементыHEAD.Количество()>0 Тогда
				ЗаписьDOM  = Новый ЗаписьDOM; 
				ЗаписьHTML = Новый ЗаписьHTML;
				ЗаписьHTML.УстановитьСтроку();
				Попытка
					ЗаписьDOM.Записать(ЭлементыHEAD[0], ЗаписьHTML);
				Исключение					
				КонецПопытки;	
				ТекстHTML_HEAD = ЗаписьHTML.Закрыть();
			КонецЕсли; 	
			
			ЭлементыBODY   = ДокументHTML.ПолучитьЭлементыПоИмени("BODY");
			Если ЭлементыBODY.Количество()>0 Тогда
				ЗаписьDOM = Новый ЗаписьDOM; 
				ЗаписьHTML= Новый ЗаписьHTML;
				ЗаписьHTML.УстановитьСтроку();
				Попытка
					ЗаписьDOM.Записать(ДокументHTML.Тело, ЗаписьHTML);
				Исключение
				КонецПопытки;	
				ТекстHTML_BODY = ЗаписьHTML.Закрыть();
			КонецЕсли;
			
			ТекстHTML_BODY   = УдалитьКомментарии(ТекстHTML_BODY);
			
			ЭлементыКартинки = ДокументHTML.Картинки;
			Если ЭлементыКартинки.Количество() > 0 Тогда				
				Состояние(НСтр("ru = 'Поиск изображений...'"),,, БиблиотекаКартинок.ДлительнаяОперация48);				
				Для Каждого ЭлементКартинка Из ЭлементыКартинки Цикл
					ПутьКИсточнику = ЭлементКартинка.Источник;
					ПутьКФайлу     = ПутьСохранения + СтрЗаменить(ПутьКИсточнику, "/", "\");
					ФайлКартинки   = Новый Файл(ПутьКФайлу);
					Если ФайлКартинки.Существует() Тогда
						СтруктураФайла = Новый Структура;
						СтруктураФайла.Вставить("Автор",          			ПользователиКлиент.ТекущийПользователь());
						СтруктураФайла.Вставить("ВладелецФайлов", 			СтатьяБазыЗнаний);
						СтруктураФайла.Вставить("ИмяБезРасширения", 		ФайлКартинки.ИмяБезРасширения);
						СтруктураФайла.Вставить("РасширениеБезТочки", 		СтрЗаменить(ФайлКартинки.Расширение, ".", ""));
						СтруктураФайла.Вставить("ВременныйАдресВХранилище", 
							ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу), Новый УникальныйИдентификатор));
							
						СтрокаОписаниеСтиля = "";
						Если ЗначениеЗаполнено(ЭлементКартинка.Ширина) Тогда
							СтрокаОписаниеСтиля ="width:" + Строка(ЭлементКартинка.Ширина) + ";"; 
						КонецЕсли;						
						Если ЗначениеЗаполнено(ЭлементКартинка.Высота) Тогда
							СтрокаОписаниеСтиля =СтрокаОписаниеСтиля + "height:" + Строка(ЭлементКартинка.Высота) + ";"; 
						КонецЕсли;						
						Если ЗначениеЗаполнено(ЭлементКартинка.Выравнивание) Тогда
							СтрокаОписаниеСтиля =СтрокаОписаниеСтиля + "align:" + Строка(ЭлементКартинка.Выравнивание) + ";"; 
						КонецЕсли;						
						СтруктураФайла.Вставить("ОписаниеСтиля", СтрокаОписаниеСтиля);
						ИДФайла 	   = ДобавитьПрисоединенныйФайлКСтатье(СтруктураФайла);						
						// Строка поиска.
						ЗаписьDOM = Новый ЗаписьDOM; 
						ЗаписьHTML= Новый ЗаписьHTML;
						ЗаписьHTML.УстановитьСтроку();
						Попытка
							ЗаписьDOM.Записать(ЭлементКартинка, ЗаписьHTML);
						Исключение
						КонецПопытки;	
						СтрокаПоиска   = ЗаписьHTML.Закрыть();						
						СтрокаЗамены   = "[pict_" + СтрЗаменить(ИДФайла, "-", "") + "]";
						ТекстHTML_BODY = СтрЗаменить(ТекстHTML_BODY, СтрокаПоиска, СтрокаЗамены);
						ФайлКартинки   = Неопределено;
					КонецЕсли;					
				КонецЦикла;
			КонецЕсли;
			
			Элементыshape = ДокументHTML.ПолучитьЭлементыПоИмени("shape");
			Если Элементыshape.Количество() > 0 Тогда
				Состояние(НСтр("ru = 'Поиск изображений...'"),,, БиблиотекаКартинок.ДлительнаяОперация48);
				Для Каждого Элементshape Из Элементыshape Цикл
					Для Каждого ДочернийУзел Из Элементshape.ДочерниеУзлы Цикл
						Если ДочернийУзел.ИмяУзла = "v:imagedata" Тогда
							ПутьКИсточнику = ДочернийУзел.Атрибуты.ПолучитьИменованныйЭлемент("src").ЗначениеУзла;
							Если Не ПустаяСтрока(ПутьКИсточнику) Тогда
								ПутьКФайлу     = ПутьСохранения + СтрЗаменить(ПутьКИсточнику, "/", "\");
								ФайлКартинки   = Новый Файл(ПутьКФайлу);
								Если ФайлКартинки.Существует() Тогда
									СтруктураФайла = Новый Структура;
									СтруктураФайла.Вставить("Автор",          			ПользователиКлиент.ТекущийПользователь());
									СтруктураФайла.Вставить("ВладелецФайлов", 			СтатьяБазыЗнаний);
									СтруктураФайла.Вставить("ИмяБезРасширения", 		ФайлКартинки.ИмяБезРасширения);
									СтруктураФайла.Вставить("РасширениеБезТочки", 		СтрЗаменить(ФайлКартинки.Расширение, ".", ""));
									СтруктураФайла.Вставить("ВременныйАдресВХранилище", 
										ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу), Новый УникальныйИдентификатор));
										
									Попытка
										СтруктураФайла.Вставить("ОписаниеСтиля", 
											Элементshape.Атрибуты.ПолучитьИменованныйЭлемент("style").ЗначениеУзла);
									Исключение
									КонецПопытки;	
									ИДФайла 	   = ДобавитьПрисоединенныйФайлКСтатье(СтруктураФайла);							
									// Строка поиска.
									ЗаписьDOM = Новый ЗаписьDOM; 
									ЗаписьHTML= Новый ЗаписьHTML;
									ЗаписьHTML.УстановитьСтроку();
									Попытка
										ЗаписьDOM.Записать(Элементshape, ЗаписьHTML);
									Исключение
									КонецПопытки;	
									СтрокаПоиска   = ЗаписьHTML.Закрыть();							
									СтрокаЗамены   = "[pict_" + СтрЗаменить(ИДФайла, "-", "") + "]";
									ТекстHTML_BODY = СтрЗаменить(ТекстHTML_BODY, СтрокаПоиска, СтрокаЗамены);
									ФайлКартинки   = Неопределено;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;	
				КонецЦикла;	
			КонецЕсли;												
			
			ЭтотОбъект.ТекстHTML 		 = ТекстHTML_BODY;
			
			Если Не ПустаяСтрока(ТекстHTML_BODY) Тогда
				ФД = Новый ФорматированныйДокумент;
				ФД.УстановитьHTML(ТекстHTML_BODY, Новый Структура);				
				ОбычныйТекст = ФД.ПолучитьТекст();
				Пока СтрНайти(ОбычныйТекст, "  ") > 0 Цикл
					ОбычныйТекст = СокрЛП(СтрЗаменить(ОбычныйТекст, "  ", " "));
				КонецЦикла;
				ЭтотОбъект.Текст = ОбычныйТекст;
			КонецЕсли;	
			ТекстHTML_HEAD = УдалитьКомментарии(ТекстHTML_HEAD);
			ЭтотОбъект.ОписаниеМетатегов = ТекстHTML_HEAD;			
			
		ИначеЕсли ЭтотОбъект.ТипФайлаИсточника = "xlsx"	ИЛИ ЭтотОбъект.ТипФайлаИсточника = "xls" Тогда
			
			// Разбор ХТМЛ.
			// Файлы - листы. 
			ЧтениеHTML           = Новый ЧтениеHTML;
			ЧтениеHTML.ОткрытьФайл(ПутьСохранения + "file.html");
			ПостроительDOM       = Новый ПостроительDOM;   
			ОсновнойДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);		
			ЧтениеHTML.Закрыть();
			
			МассивЛистов = Новый Массив;
			ЭлементыLink = ОсновнойДокументHTML.ПолучитьЭлементыПоИмени("link");
			Если ЭлементыLink.Количество() > 0 Тогда				
				Для Каждого  ЭлементLink Из ЭлементыLink Цикл
					Если ЭлементLink.Идентификатор = "shLink" И Не ПустаяСтрока(ЭлементLink.Гиперссылка) Тогда
						МассивЛистов.Добавить(ЭлементLink.Гиперссылка);
					КонецЕсли;	
				КонецЦикла; 	
			КонецЕсли;	
			
			Если МассивЛистов.Количество() > 0 Тогда
				ФайлРабочегоЛиста = МассивЛистов[0];
			КонецЕсли;	
			
			ЧтениеHTML     = Новый ЧтениеHTML;
			ЧтениеHTML.ОткрытьФайл(ПутьСохранения + ФайлРабочегоЛиста);
			ПостроительDOM = Новый ПостроительDOM;   
			ДокументHTML   = ПостроительDOM.Прочитать(ЧтениеHTML);		
			ЧтениеHTML.Закрыть();
			
			ТекстHTML_HEAD = "";		
			ЭлементыHEAD   = ДокументHTML.ПолучитьЭлементыПоИмени("HEAD");
			Если ЭлементыHEAD.Количество() > 0 Тогда
				ЭлементHEAD    = ЭлементыHEAD[0];
				
				ЭлементыScript = ЭлементHEAD.ПолучитьЭлементыПоИмени("script");				
				Для Каждого ЭлементScript Из ЭлементыScript Цикл
					ЭлементHEAD.УдалитьДочерний(ЭлементScript);
				КонецЦикла;
				
				ЕстьФайлСтилей   = Ложь;
				СтрокаСтилейHTML = "";
				ЭлементыLink = ЭлементHEAD.ПолучитьЭлементыПоИмени("link");
				Для Каждого ЭлементLink Из ЭлементыLink Цикл
					Если ЭлементLink.Отношение = "Stylesheet" И ЭлементLink.Гиперссылка = "stylesheet.css" Тогда
						ЕстьФайлСтилей = Истина;
					КонецЕсли;	
					ЭлементHEAD.УдалитьДочерний(ЭлементLink);
				КонецЦикла;
				
				Если ЕстьФайлСтилей Тогда					
					ФайлСтилей   = Новый Файл(ПутьСохранения + "file.files\stylesheet.css");
					Если ФайлСтилей.Существует() Тогда
						ЧтениеТекста = Новый ЧтениеТекста(ПутьСохранения + "file.files\stylesheet.css");					
						СтрокаСтилей = ЧтениеТекста.Прочитать();
						ЧтениеТекста.Закрыть();
					КонецЕсли;					
					ФайлСтилей = Неопределено;
				КонецЕсли;
				
				Если Не ПустаяСтрока(СтрокаСтилей) Тогда
					СтрокаСтилейHTML = "<style>" + Символы.ПС + СтрокаСтилей + "</style>";
				КонецЕсли; 	
				
				ЗаписьDOM  = Новый ЗаписьDOM; 
				ЗаписьHTML = Новый ЗаписьHTML;
				ЗаписьHTML.УстановитьСтроку();
				Попытка
					ЗаписьDOM.Записать(ЭлементHEAD, ЗаписьHTML);
				Исключение					
				КонецПопытки;	
				ТекстHTML_HEAD = ЗаписьHTML.Закрыть();			
				Если Не ПустаяСтрока(СтрокаСтилейHTML) И Не ПустаяСтрока(ТекстHTML_HEAD) Тогда
					ТекстHTML_HEAD = СтрЗаменить(ТекстHTML_HEAD, "</head>", Символы.ПС + СтрокаСтилейHTML + Символы.ПС + "</head>");
				КонецЕсли;	
			КонецЕсли;
			
			ТекстHTML_HEAD   = УдалитьКомментарии(ТекстHTML_HEAD);
			
			ЭлементыBODY   = ДокументHTML.ПолучитьЭлементыПоИмени("BODY");
			Если ЭлементыBODY.Количество() > 0 Тогда
				ЗаписьDOM = Новый ЗаписьDOM; 
				ЗаписьHTML= Новый ЗаписьHTML;
				ЗаписьHTML.УстановитьСтроку();
				Попытка
					ЗаписьDOM.Записать(ДокументHTML.Тело, ЗаписьHTML);
				Исключение
				КонецПопытки;	
				ТекстHTML_BODY = ЗаписьHTML.Закрыть();				
			КонецЕсли;			
			
			ТекстHTML_BODY   = УдалитьКомментарии(ТекстHTML_BODY);
			
			ЭлементыКартинки = ДокументHTML.Картинки;
			Если ЭлементыКартинки.Количество() > 0 Тогда				
				Состояние(НСтр("ru = 'Обработка изображений...'"),,, БиблиотекаКартинок.ДлительнаяОперация48);				
				Для Каждого ЭлементКартинка Из ЭлементыКартинки Цикл
					ПутьКИсточнику = ЭлементКартинка.Источник;
					ПутьКФайлу     = ПутьСохранения + "file.files\" + ПутьКИсточнику;
					ФайлКартинки   = Новый Файл(ПутьКФайлу);
					Если ФайлКартинки.Существует() Тогда
						СтруктураФайла = Новый Структура;
						СтруктураФайла.Вставить("Автор",          			ПользователиКлиент.ТекущийПользователь());
						СтруктураФайла.Вставить("ВладелецФайлов", 			СтатьяБазыЗнаний);
						СтруктураФайла.Вставить("ИмяБезРасширения", 		ФайлКартинки.ИмяБезРасширения);
						СтруктураФайла.Вставить("РасширениеБезТочки", 		СтрЗаменить(ФайлКартинки.Расширение, ".", ""));
						СтруктураФайла.Вставить("ВременныйАдресВХранилище", 
							ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу), Новый УникальныйИдентификатор));
							
						Если ЗначениеЗаполнено(ЭлементКартинка.Ширина) Тогда
							СтрокаОписаниеСтиля ="width:" + Строка(ЭлементКартинка.Ширина) + ";"; 
						КонецЕсли;						
						Если ЗначениеЗаполнено(ЭлементКартинка.Высота) Тогда
							СтрокаОписаниеСтиля =СтрокаОписаниеСтиля + "height:" + Строка(ЭлементКартинка.Высота) + ";"; 
						КонецЕсли;						
						Если ЗначениеЗаполнено(ЭлементКартинка.Выравнивание) Тогда
							СтрокаОписаниеСтиля =СтрокаОписаниеСтиля + "align:" + Строка(ЭлементКартинка.Выравнивание) + ";"; 
						КонецЕсли;						
						СтруктураФайла.Вставить("ОписаниеСтиля", СтрокаОписаниеСтиля);
						ИДФайла 	   = ДобавитьПрисоединенныйФайлКСтатье(СтруктураФайла);
						// Строка поиска.
						ЗаписьDOM  = Новый ЗаписьDOM; 
						ЗаписьHTML = Новый ЗаписьHTML;
						ЗаписьHTML.УстановитьСтроку();
						Попытка
							ЗаписьDOM.Записать(ЭлементКартинка, ЗаписьHTML);
						Исключение
						КонецПопытки;
						СтрокаПоиска   = ЗаписьHTML.Закрыть();							
						СтрокаЗамены   = "[pict_" + СтрЗаменить(ИДФайла, "-", "") + "]";
						ТекстHTML_BODY = СтрЗаменить(ТекстHTML_BODY, СтрокаПоиска, СтрокаЗамены);
					КонецЕсли;					
				КонецЦикла;
			КонецЕсли;
			
			Если МассивЛистов.Количество() > 1 Тогда								
				ТекстHTML_Div = "<div>" + Символы.ПС + ПравилаСобытийСервер.ПолучитьТелоТекстаHTML(ТекстHTML_BODY) + "</div>";  				
				Для Сч = 1 По МассивЛистов.Количество() - 1 Цикл
					ЧтениеHTML            = Новый ЧтениеHTML;
					ЧтениеHTML.ОткрытьФайл(ПутьСохранения + МассивЛистов[Сч]);
					ПостроительDOM        = Новый ПостроительDOM;   
					ДокументHTMLСледующий = ПостроительDOM.Прочитать(ЧтениеHTML);		
					ЧтениеHTML.Закрыть();
					
					ЗаписьDOM = Новый ЗаписьDOM; 
					ЗаписьHTML= Новый ЗаписьHTML;
					ЗаписьHTML.УстановитьСтроку();
					Попытка
						ЗаписьDOM.Записать(ДокументHTMLСледующий.Тело, ЗаписьHTML);
					Исключение
					КонецПопытки;	
					ТекстHTML_BODYСледующий = ЗаписьHTML.Закрыть();				
					
					ТекстHTML_BODYСледующий   = УдалитьКомментарии(ТекстHTML_BODYСледующий);
					
					ЭлементыКартинки = ДокументHTMLСледующий.Картинки;
					Если ЭлементыКартинки.Количество() > 0 Тогда
						Состояние(НСтр("ru = 'Обработка изображений...'"),,, БиблиотекаКартинок.ДлительнаяОперация48);
						Для Каждого ЭлементКартинка Из ЭлементыКартинки Цикл
							ПутьКИсточнику = ЭлементКартинка.Источник;
							ПутьКФайлу     = ПутьСохранения + "file.files\" + ПутьКИсточнику;
							ФайлКартинки   = Новый Файл(ПутьКФайлу);
							Если ФайлКартинки.Существует() Тогда
								СтруктураФайла = Новый Структура;
								СтруктураФайла.Вставить("Автор",          			ПользователиКлиент.ТекущийПользователь());
								СтруктураФайла.Вставить("ВладелецФайлов", 			СтатьяБазыЗнаний);
								СтруктураФайла.Вставить("ИмяБезРасширения", 		ФайлКартинки.ИмяБезРасширения);
								СтруктураФайла.Вставить("РасширениеБезТочки", 		СтрЗаменить(ФайлКартинки.Расширение, ".", ""));
								СтруктураФайла.Вставить("ВременныйАдресВХранилище", 
									ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу), Новый УникальныйИдентификатор));
									
								Если ЗначениеЗаполнено(ЭлементКартинка.Ширина) Тогда
									СтрокаОписаниеСтиля ="width:" + Строка(ЭлементКартинка.Ширина) + ";"; 
								КонецЕсли;						
								Если ЗначениеЗаполнено(ЭлементКартинка.Высота) Тогда
									СтрокаОписаниеСтиля =СтрокаОписаниеСтиля + "height:" + Строка(ЭлементКартинка.Высота) + ";"; 
								КонецЕсли;						
								Если ЗначениеЗаполнено(ЭлементКартинка.Выравнивание) Тогда
									СтрокаОписаниеСтиля =СтрокаОписаниеСтиля + "align:" + Строка(ЭлементКартинка.Выравнивание) + ";"; 
								КонецЕсли;						
								СтруктураФайла.Вставить("ОписаниеСтиля", СтрокаОписаниеСтиля);
								ИДФайла 	   = ДобавитьПрисоединенныйФайлКСтатье(СтруктураФайла);
								// Строка поиска.
								ЗаписьDOM  = Новый ЗаписьDOM; 
								ЗаписьHTML = Новый ЗаписьHTML;
								ЗаписьHTML.УстановитьСтроку();
								Попытка
									ЗаписьDOM.Записать(ЭлементКартинка, ЗаписьHTML);
								Исключение
								КонецПопытки;
								СтрокаПоиска   = ЗаписьHTML.Закрыть();							
								СтрокаЗамены   = "[pict_" + СтрЗаменить(ИДФайла, "-", "") + "]";
								ТекстHTML_BODYСледующий = СтрЗаменить(ТекстHTML_BODYСледующий, СтрокаПоиска, СтрокаЗамены);
							КонецЕсли;					
						КонецЦикла;
					КонецЕсли;
					
					Если Не ПустаяСтрока(ТекстHTML_BODYСледующий) Тогда
						ТекстHTML_Div = ТекстHTML_Div + Символы.ПС + "<hr><div>" + Символы.ПС 
							+ ПравилаСобытийСервер.ПолучитьТелоТекстаHTML(ТекстHTML_BODYСледующий) + "</div>";  
					КонецЕсли;
					
				КонецЦикла;
				
				ТекстHTML_BODY = "<body>" + Символы.ПС + ТекстHTML_Div + "</body>";
				
			КонецЕсли;
			
			ТекстHTML_BODY 		 = УдалитьКомментарии(ТекстHTML_BODY);
			ЭтотОбъект.ТекстHTML = ТекстHTML_BODY;
			
			Если Не ПустаяСтрока(ТекстHTML_BODY) Тогда
				ФД = Новый ФорматированныйДокумент;
				ФД.УстановитьHTML(ТекстHTML_BODY, Новый Структура);				
				ОбычныйТекст = ФД.ПолучитьТекст();
				Пока СтрНайти(ОбычныйТекст, "  ") > 0 Цикл
					ОбычныйТекст = СокрЛП(СтрЗаменить(ОбычныйТекст, "  ", " "));
				КонецЦикла;
				ЭтотОбъект.Текст = ОбычныйТекст;
			КонецЕсли;
			ТекстHTML_HEAD = УдалитьКомментарии(ТекстHTML_HEAD);
			ЭтотОбъект.ОписаниеМетатегов = ТекстHTML_HEAD;
		КонецЕсли;
		
		
		ЭтотОбъект.РазделИмпортирован= Истина;		
		ЭтотОбъект.Модифицированность= Истина;
		
		Попытка
			ЗаписьZIP = Новый ЗаписьZipФайла(РабочийКаталогТекущегоПользователя + "kb\import\source.zip");
			ЗаписьZIP.Добавить(ИмяФайла[0], РежимСохраненияПутейZIP.НеСохранятьПути);
			ЗаписьZIP.Записать();
		Исключение
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать файл - источник в ИБ.'"));
			Возврат;
		КонецПопытки;	
		
		ФайлАрхива = Новый Файл(РабочийКаталогТекущегоПользователя + "kb\import\source.zip");
		Если ФайлАрхива.Существует() Тогда
			ЭтотОбъект.УдаляемыеКаталоги.Добавить(РабочийКаталогТекущегоПользователя + "kb\import\source.zip");
			НачатьПомещениеФайла(Новый ОписаниеОповещения("ПослеПомещенияФайлаИсточника", ЭтотОбъект), ,
				РабочийКаталогТекущегоПользователя + "kb\import\source.zip", Ложь, УникальныйИдентификатор);
		КонецЕсли;	
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция УдалитьКомментарии(ТекстHTML)
	
	СтрНачКомм		= "<!--";
	СтрКонКомм		= "-->";
	ДлинаОкончания	= СтрДлина(СтрКонКомм);
	
	ИтоговыйТекст = "";
	
	ПозицияНачКомм = СтрНайти(ТекстHTML, СтрНачКомм);
	Пока ПозицияНачКомм > 0 Цикл
		ПозицияКонКомм = СтрНайти(ТекстHTML, СтрКонКомм);
		Если ПозицияКонКомм <= ПозицияНачКомм Тогда
			Прервать;
		КонецЕсли;		
		
		НачПозицияТекста= ПозицияНачКомм;
		КонПозицияТекста= ПозицияКонКомм + ДлинаОкончания;	
		ИтоговыйТекст	= ИтоговыйТекст + Лев(ТекстHTML, НачПозицияТекста - 1);
		ТекстHTML		= Сред(ТекстHTML, КонПозицияТекста);
		ПозицияНачКомм	= СтрНайти(ТекстHTML, СтрНачКомм);
		
	КонецЦикла;
	
	Возврат ИтоговыйТекст + ТекстHTML;

КонецФункции

&НаКлиенте
Процедура ПослеПомещенияФайлаИсточника(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Адрес) Тогда
		АдресАрхиваИсточника = Адрес;
	КонецЕсли;	
	УдалитьВременныеКаталоги();	
	ЗаписатьНаКлиенте();
	ЗаполнитьДанныеФормыРазделИмпортирован();
	УстановитьВидимость();
	
КонецПроцедуры	

&НаСервере
Функция ДобавитьПрисоединенныйФайлКСтатье(СтруктураФайла)	
	
	СтруктураФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяДатаСеанса());
	СсылкаНаФайл 	   = РаботаСФайлами.ДобавитьФайл(СтруктураФайла, СтруктураФайла.ВременныйАдресВХранилище);
	ФайлОбъект   	   = СсылкаНаФайл.ПолучитьОбъект();
	НовыйИД		 	   = Новый УникальныйИдентификатор;
	ФайлОбъект.ИДФайлаЭлектронногоПисьма = НовыйИД;
	ФайлОбъект.Записать();
	
	СтрокаКартинки = ЭтотОбъект.Картинки.Добавить();
	СтрокаКартинки.ИдентификаторКартинки = НовыйИД;
	СтрокаКартинки.Файл                  = ФайлОбъект.Ссылка;
	Если СтруктураФайла.Свойство("ОписаниеСтиля") Тогда 
		СтрокаКартинки.ОписаниеСтиля = СтруктураФайла.ОписаниеСтиля;
	КонецЕсли;	
	
	Возврат НовыйИД;
	
КонецФункции	

&НаСервере
Функция РабочийКаталогТекущегоПользователя()
	
	Возврат РаботаСФайлами.НастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросаОчиститьРазделОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.АдресАрхиваИсточника     = "";
	ЭтотОбъект.ОписаниеМетатегов        = "";
	ЭтотОбъект.ПредставлениеРазделаHTML = "";
	ЭтотОбъект.РазделИмпортирован		= Ложь;
	ЭтотОбъект.Текст					= "";	
	ЭтотОбъект.ТекстСтатьи              = "";
	ЭтотОбъект.ТипФайлаИсточника        = "";
	УдалитьВременныеКаталоги();
	Модифицированность 					= Истина;
	УдалитьФайлыИЗаписатьНаСервере();		
	УстановитьВидимость();

КонецПроцедуры

&НаСервере
Процедура УдалитьФайлыИЗаписатьНаСервере()
	
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СтатьяБазыЗнаний, МассивФайлов);
	Если МассивФайлов.Количество() > 0 Тогда
		Для Каждого Файл Из МассивФайлов Цикл
			Если Не ПустаяСтрока(Файл.Идентификатор) Тогда
				СтрокаПоиска = "pict_" + СтрЗаменить(Файл.Идентификатор, "-", "");
				Если СтрНайти(ЭтотОбъект.ТекстHTML, СтрокаПоиска) > 0 Тогда
					ФайлОбъект = Файл.ПолучитьОбъект();					
					ФайлОбъект.ПометкаУдаления = Истина;
					ФайлОбъект.Записать();
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла; 	
	КонецЕсли;		
	
	ЭтотОбъект.ТекстHTML = "";
	ЗаписатьНаСервере();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗакрытиемДокументаExcel(Документ, Отмена)
	
	Документ.Save();
	
	Состояние(НСтр("ru = 'Обновление данных по файлу-источнику...'"),,, БиблиотекаКартинок.ДлительнаяОперация48);
	Файл = Новый Файл(ЭтотОбъект.ФайлИсточникаПолноеИмя);
	Если Файл.Существует() Тогда		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ЭтотОбъект.ФайлИсточникаПолноеИмя);			
		ВыбратьФайлЗавершениеОтображенияДиалогаВыбораФайла(МассивФайлов, Новый Структура);
	КонецЕсли;	
	
	УдалитьВременныеКаталоги();
	ЭтотОбъект.ФайлИсточникаПолноеИмя = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемДокументаWord(Документ, Отмена)
	
	Документ.Save();
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ВыходИзWord()
	
	Состояние(НСтр("ru = 'Обновление данных по файлу-источнику...'"),,, БиблиотекаКартинок.ДлительнаяОперация48);
	Файл = Новый Файл(ЭтотОбъект.ФайлИсточникаПолноеИмя);
	Если Файл.Существует() Тогда		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ЭтотОбъект.ФайлИсточникаПолноеИмя);			
		ВыбратьФайлЗавершениеОтображенияДиалогаВыбораФайла(МассивФайлов, Новый Структура);
	КонецЕсли;
	
	УдалитьВременныеКаталоги();
	ЭтотОбъект.ФайлИсточникаПолноеИмя = "";

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВременныеКаталоги()
	
	Если ЭтотОбъект.УдаляемыеКаталоги.Количество() > 0 Тогда
		Для Каждого ЭлементСписка Из ЭтотОбъект.УдаляемыеКаталоги Цикл
			Попытка
				УдалитьФайлы(ЭлементСписка.Значение);
				ЭтотОбъект.УдаляемыеКаталоги.Удалить(ЭлементСписка);
			Исключение
			КонецПопытки;	
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти
