#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьПредставлениеТаблицыВHTML(ТабличныйДокумент) Экспорт
	
	Если НЕ ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("html");
	
	// Сохраняем табличный документ в HTML формате
	ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
	
	// Создадим соответствие по стилям таблицы
	СоответствиеСтилей = Новый Соответствие;
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ИмяФайла);
	ТекстHTML		= ЧтениеТекста.Прочитать();
	
	НРегТекстHTML	= НРег(ТекстHTML);
	
	// Находим таблицу стилей в отдельный реквизит, в нижнем регистре
	НачалоТаблицыСтилей = Найти(НРегТекстHTML, "<style");
	КонецТаблицыСтилей	= Найти(НРегТекстHTML, "</style>");
	
	ТаблицаСтилей = Сред(ТекстHTML, НачалоТаблицыСтилей, КонецТаблицыСтилей - НачалоТаблицыСтилей);
	ТаблицаСтилей = Сред(ТаблицаСтилей, Найти(ТаблицаСтилей, ">") + 1);
	
	// Находим таблицу данных в отдельный реквизит, в текущем виде
	НачалоТаблицы		= Найти(НРегТекстHTML, "<table");
	ОкончаниеТаблицы	= Найти(НРегТекстHTML, "</table>");
	
	ТекстТаблицы		= "<table class='t_0' " + Сред(ТекстHTML, НачалоТаблицы + 7, ОкончаниеТаблицы - НачалоТаблицы + 6) + "</table>";
	
	// Обрабатываем таблицу стилей, на каждый стиль tr или td задаем имя таблицы .t_name
	Соответствие = ПолучитьДанныеОписанияСтилей(ТаблицаСтилей);
	
	// Формируем итоговую таблицу описания
	ОписаниеСтилей	= "";
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Если Лев(КлючИЗначение.Ключ, 3) = "tr." Тогда
			ОписаниеСтилей = ОписаниеСтилей + ".t_0 " + КлючИЗначение.Ключ;
		ИначеЕсли КлючИЗначение.Ключ = "td" Тогда
			ОписаниеСтилей = ОписаниеСтилей + ".t_0 " + КлючИЗначение.Ключ;
		ИначеЕсли КлючИЗначение.Ключ = "table" Тогда
			ОписаниеСтилей = ОписаниеСтилей + ".t_0 ";
		Иначе 
			Продолжить;
		КонецЕсли;
		ОписаниеСтилей = ОписаниеСтилей + " {" + КлючИЗначение.Значение + "}" + Символы.ПС;
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаСтилей, ТекстТаблицы", ОписаниеСтилей, ТекстТаблицы);
	
КонецФункции

// Получение данных статьи по ссылке

Функция ПолучитьИерархиюОбластейСтатьи(СтатьяСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтатьяСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатьиБазыЗнанийСодержание.НомерСтроки КАК НомерСтроки,
	|	СтатьиБазыЗнанийСодержание.Область,
	|	СтатьиБазыЗнанийСодержание.Наименование,
	|	СтатьиБазыЗнанийСодержание.Уровень
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.Содержание КАК СтатьиБазыЗнанийСодержание
	|ГДЕ
	|	СтатьиБазыЗнанийСодержание.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Результат = Запрос.Выполнить();
	
	МассивДанных = Новый Массив;
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Представление = "";
			Для Уровень = 2 По Выборка.Уровень Цикл
				Представление = Представление + "	";
			КонецЦикла;
			Представление = Представление + Выборка.Наименование;
			
			МассивДанных.Добавить(Новый Структура("Область, Представление", Выборка.Область, Представление));
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивДанных;
	
КонецФункции

// Захват и освобождение статьи от редактирования

Функция ЗахватитьСтатьюНаРедактирование(знач СтатьяСсылка, знач Область = "", ТекПользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(СтатьяСсылка) Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекПользователь) Тогда
		ТекПользователь	= Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ТекущийРедактор = БазаЗнаний.ПолучитьДанныеБлокировки(СтатьяСсылка, Область).Пользователь;
	Если ЗначениеЗаполнено(ТекущийРедактор) Тогда 
		Если ТекущийРедактор <> ТекПользователь Тогда
			Возврат Ложь;
		Иначе 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектЗахвачен = Истина;
	
	НачатьТранзакцию();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.БлокировкаСтатьейБазыЗнаний");
	ЭлементБлокировки.УстановитьЗначение("СтатьяБазыЗнаний", СтатьяСсылка);
	ЭлементБлокировки.УстановитьЗначение("Область", Область);
	
	Попытка
		БлокировкаДанных.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.БлокировкаСтатьейБазыЗнаний.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СтатьяБазыЗнаний = СтатьяСсылка;
		МенеджерЗаписи.Область			= Область;
		МенеджерЗаписи.Пользователь		= ТекПользователь;
		МенеджерЗаписи.ДатаБлокировки	= ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОбъектЗахвачен = Ложь;
		
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат ОбъектЗахвачен;
	
КонецФункции

Функция ЗавершитьРедактированиеСтатьи(знач СтатьяСсылка, знач Область = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийРедактор = БазаЗнаний.ПолучитьДанныеБлокировки(СтатьяСсылка, Область).Пользователь;	
	ЕстьПолныеПрава = УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава");
	ТекПользователь	= Пользователи.ТекущийПользователь();
	
	Если (ТекущийРедактор <> ТекПользователь) И (НЕ ЕстьПолныеПрава) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектОсвобожден = Истина;
	
	НачатьТранзакцию();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.БлокировкаСтатьейБазыЗнаний");
	ЭлементБлокировки.УстановитьЗначение("СтатьяБазыЗнаний", СтатьяСсылка);
	ЭлементБлокировки.УстановитьЗначение("Область", Область);
	
	Попытка
		БлокировкаДанных.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.БлокировкаСтатьейБазыЗнаний.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СтатьяБазыЗнаний = СтатьяСсылка;
		МенеджерЗаписи.Область			= Область;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОбъектОсвобожден = Ложь;
		
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат ОбъектОсвобожден;
	
КонецФункции

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ДобавленныйКомментарийТекст";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Добавленный комментарий (в текстовом формате).'");
	НовыйРеквизит.Представление = НСтр("ru = 'Добавленный комментарий (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ТекстСтатьиТекст";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Текст статьи (в текстовом формате).'");
	НовыйРеквизит.Представление = НСтр("ru = 'Текст статьи (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	РеквизитЗапретПубликации    = Реквизиты.Найти("СтатьиБазыЗнаний.ЗапретПубликации");
	Реквизиты.Удалить(РеквизитЗапретПубликации);
	РеквизитОписаниеМетатегов   = Реквизиты.Найти("СтатьиБазыЗнаний.ОписаниеМетатегов");
	Реквизиты.Удалить(РеквизитОписаниеМетатегов);
	РеквизитПоложениеСодержания = Реквизиты.Найти("СтатьиБазыЗнаний.ПоложениеСодержания");
	Реквизиты.Удалить(РеквизитПоложениеСодержания);
	РеквизитРазделИмпортирован  = Реквизиты.Найти("СтатьиБазыЗнаний.РазделИмпортирован");
	Реквизиты.Удалить(РеквизитРазделИмпортирован);
	РеквизитТипФайлаИсточника   = Реквизиты.Найти("СтатьиБазыЗнаний.ТипФайлаИсточника");
	Реквизиты.Удалить(РеквизитТипФайлаИсточника);	
	РеквизитДопУпорядочивания   = Реквизиты.Найти("СтатьиБазыЗнаний.РеквизитДопУпорядочивания");
	Реквизиты.Удалить(РеквизитДопУпорядочивания);
	РеквизитТекстHTML 			= Реквизиты.Найти("СтатьиБазыЗнаний.ТекстHTML");
	Реквизиты.Удалить(РеквизитТекстHTML);
	РеквизитТекстТекст 			= Реквизиты.Найти("СтатьиБазыЗнаний.Текст");
	Реквизиты.Удалить(РеквизитТекстТекст);
	РеквизитПолныйТекст 		= Реквизиты.Найти("СтатьиБазыЗнаний.ПолныйТекст");
	Реквизиты.Удалить(РеквизитПолныйТекст);
	
	Если ДополнительныеПараметры.ТипШаблона = "Письмо"
		И ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "ДобавленныйКомментарийHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Добавленный комментарий (в формате HTML).'");
		НовыйРеквизит.Представление = НСтр("ru = 'Добавленный комментарий (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "ТекстСтатьиHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Текст статьи (в формате HTML).'");
		НовыйРеквизит.Представление = НСтр("ru = 'Текст статьи (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Сообщение.Вставить("Предмет", ПредметСообщения);	
	
	// Внешняя ссылка. 
	Если Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект") <> Неопределено Тогда
		ЗначениеВнешнейСсылки = Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект");
		ТекстЗаголовка = ?(ПустаяСтрока(ПредметСообщения.Наименование), "Внешняя ссылка", ПредметСообщения.Наименование);  
		Сообщение.ЗначенияРеквизитов["ВнешняяСсылкаНаОбъект"] = "<a href=" + Строка(ЗначениеВнешнейСсылки) + ">" + ТекстЗаголовка + "</a></p>";
	КонецЕсли;

КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта     = Новый Соответствие;
	СоответствиеИзменениеОбъекта.Вставить("СтатьяБазыЗнанийИзменениеОбъектаДобавлениеКомментария", НСтр("ru = 'Добавление комментария'"));
	СоответствиеИзменениеОбъекта.Вставить("СтатьяБазыЗнанийИзменениеОбъектаЗаписьСтатьи",          НСтр("ru = 'Запись статьи'"));	
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;	
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("СпринтыРасчетМетрикЗаписьЭлемента", НСтр("ru = 'Запись элемента'"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура = Неопределено, Знач Источник = Неопределено) Экспорт
	
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ПравилоСобытия.ТипПравила = Перечисления.ТипыПравилСобытий.ИзменениеОбъекта Тогда 
		Результат = Ложь;		
		
		Если ИмяСобытия = "СтатьяБазыЗнанийИзменениеОбъектаЗаписьСтатьи" Тогда
			Если Источник.Черновик = Ложь Тогда			
				Результат = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

Функция ЗначенияРеквизитовОбъектаПравилаСобытий(Знач СтруктураРеквизитов, Знач Источник, Знач СтруктураПередЗаписью) Экспорт
	
	МассивРеквизитовОснования	= СтруктураРеквизитов.МассивРеквизитовОснования; 
	МассивВычисляемыхРеквизитов	= СтруктураРеквизитов.МассивВычисляемыхРеквизитов;
	МассивПараметровШаблонов	= СтруктураРеквизитов.МассивПараметровШаблонов;
	
	// Дополним запрашиваемые реквизиты.
	Если МассивРеквизитовОснования.Найти("Ссылка") = Неопределено Тогда
		МассивРеквизитовОснования.Добавить("Ссылка");
	КонецЕсли;
	
	// Получение значений реквизитов.
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.СтатьиБазыЗнаний") Тогда // Объект уже получен.
		СтруктураЗначенийРеквизитов = Новый Структура;
		Для Каждого ЭлМассива Из МассивРеквизитовОснования Цикл
			СтруктураЗначенийРеквизитов.Вставить(ЭлМассива, Источник[ЭлМассива]); 
		КонецЦикла;	
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда	
		СтруктураЗначенийРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, МассивРеквизитовОснования);
	КонецЕсли;
	
	СоответствиеРеквизитЗначение = Новый Соответствие;
	СоответствиеРеквизитЗначение.Вставить("СтруктураЗначенийРеквизитов", СтруктураЗначенийРеквизитов);
	
	Для Каждого КлючИЗначение Из СтруктураЗначенийРеквизитов Цикл
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			ТЗРезультат = Новый ТаблицаЗначений;
			ТЗРезультат.Колонки.Добавить("Адресат");
			Для Каждого СтрокаСостава Из КлючИЗначение.Значение.Состав Цикл
				ОтборАдресат = Новый Структура;
				ОтборАдресат.Вставить("Адресат", СтрокаСостава.Пользователь);
				МассивСтрок = ТЗРезультат.НайтиСтроки(ОтборАдресат);
				Если МассивСтрок.Количество() = 0 Тогда
					НоваяСтрока = ТЗРезультат.Добавить();
					НоваяСтрока.Адресат = СтрокаСостава.Пользователь;
				КонецЕсли;
			КонецЦикла;
			СоответствиеРеквизитЗначение.Вставить(КлючИЗначение.Ключ, ТЗРезультат);
		Иначе	
			СоответствиеРеквизитЗначение.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат СоответствиеРеквизитЗначение;
	
КонецФункции

Процедура ЗаполнитьСписокРеквизитовДляПравилаСобытия(ТаблицаРеквизитов, ТипДействия) Экспорт
				
	НовыйРеквизит 			  			= ТаблицаРеквизитов.Добавить();
	НовыйРеквизит.РеквизитИмя 			= "Получатель";
	НовыйРеквизит.РеквизитЗаголовок 	= "Получатель";
	НовыйРеквизит.ТипЗначения			= ПравилаСобытийСервер.ТипыРеквизитовСКонтактнойИнформациейДляПравилСобытий();;
	НовыйРеквизит.ОбязательноеЗаполнение= Истина;
	НовыйРеквизит.ВидЗаполнения			= "Реквизит основания";
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыШаблонаПоПравиламЗаполнения(ПараметрыШаблона, МассивПараметров, Знач Источник, Знач СтруктураПравилаСобытия) Экспорт
	
	Если МассивПараметров.Найти("СтатьиБазыЗнаний.ТекстСтатьиHTML") <> Неопределено
		ИЛИ МассивПараметров.Найти("СтатьиБазыЗнаний.ТекстСтатьиТекст") <> Неопределено	Тогда
		ТекстСтатьиСтруктура = ПолучитьСтруктуруТекстСтатьи(Источник);
		ПараметрыШаблона.Вставить("ТекстСтатьиHTML",  ТекстСтатьиСтруктура.ТекстСтатьиHTML);
		ПараметрыШаблона.Вставить("ТекстСтатьиТекст", ТекстСтатьиСтруктура.ТекстСтатьиТекст);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьСтруктуруТекстСтатьи(Источник)
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстСтатьиHTML",  "");
	Результат.Вставить("ТекстСтатьиТекст", "");
	
	СтатьяБазыЗнанийHTML = "";
	
	Если Источник.Ссылка.РазделИмпортирован Тогда
		СтатьяБазыЗнанийHTML = БазаЗнанийHTMLВызовСервера.ПолучитьТекстСтатьиИмпортированнойИзФайла(Источник.Ссылка,,Истина);
	Иначе
		СтатьяБазыЗнанийHTML = БазаЗнанийHTMLВызовСервера.ПолучитьТекстСтатьиБазыЗнаний(Источник.Ссылка,,Истина);
	КонецЕсли;	
	
	Результат.Вставить("ТекстСтатьиHTML", ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СтатьяБазыЗнанийHTML));
	
	Попытка
		РезультатТекст = Взаимодействия.ПолучитьОбычныйТекстИзHTML(СтатьяБазыЗнанийHTML);
	Исключение
		РезультатТекст = "";
	КонецПопытки;
	
	Результат.Вставить("ТекстСтатьиТекст", РезультатТекст); 
	
	
	Возврат Результат;
	
КонецФункции	

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
  	

КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработка и преобразование табличного документа в HTML
Функция ПолучитьДанныеОписанияСтилей(ТаблицаСтилей)
	
	Соответствие = Новый Соответствие;
	
	ОстатокОписания = ТаблицаСтилей;
	НачалоОписания	= Найти(ОстатокОписания, "{");
	Пока НачалоОписания > 0 Цикл
		КонецОписания = Найти(ОстатокОписания, "}");
		
		ИмяОписания		= Лев(ОстатокОписания, НачалоОписания - 1);
		ТекстОписания	= Сред(ОстатокОписания, НачалоОписания + 1, КонецОписания - НачалоОписания - 1);
		
		Соответствие.Вставить(СокрЛП(ИмяОписания), СокрЛП(ТекстОписания));
		
		ОстатокОписания = Сред(ОстатокОписания, КонецОписания + 1);
		ОстатокОписания = СокрЛП(ОстатокОписания);
		НачалоОписания	= Найти(ОстатокОписания, "{");
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Процедура ИсключитьИзОписанияСтиляПозицию(ТекстОписания, ИмяПозиции)
	ПозицияНачало	= Найти(ТекстОписания, ИмяПозиции);
	Если ПозицияНачало > 0 Тогда
		ОстатокОписания	= Сред(ТекстОписания, ПозицияНачало);
		ЧислоСимволов	= Найти(ОстатокОписания, ";");
		
		ТекстОписания = Лев(ТекстОписания, ПозицияНачало - 1) + Сред(ТекстОписания, ПозицияНачало + ЧислоСимволов + 1);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаменитьИмяСтиляНаОписание(НРегТекстТаблицы, ТекстТаблицы, ИмяКласса, Описание)
	
	МассивОкончаний = Новый Массив;
	МассивОкончаний.Добавить(" ");
	МассивОкончаний.Добавить(">");
	
	Для Каждого Окончание Из МассивОкончаний Цикл
		
		КлючПоиска = "class=" + ИмяКласса + Окончание;
		ДлинаКлюча = СтрДлина(КлючПоиска);
		
		НачалоСтроки = Найти(НРегТекстТаблицы, КлючПоиска);
		Пока НачалоСтроки > 0 Цикл
			НРегТекстТаблицы = 
				Лев(НРегТекстТаблицы, НачалоСтроки - 1) + 
				"style='" + Описание + "'" + 
				Сред(НРегТекстТаблицы, НачалоСтроки + ДлинаКлюча - 1);
			
			ТекстТаблицы = 
				Лев(ТекстТаблицы, НачалоСтроки - 1) + 
				"style='" + Описание + "'" + 
				Сред(ТекстТаблицы, НачалоСтроки + ДлинаКлюча - 1);
			
			НачалоСтроки = Найти(НРегТекстТаблицы, КлючПоиска);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		Если Параметры.Свойство("Ключ") Тогда
			Параметры.Вставить("СтатьяБазыЗнаний", Параметры.Ключ);
			ВыбраннаяФорма = "Обработка.БазаЗнаний.Форма";			
		Иначе
			ВыбраннаяФорма = "РедактированиеСтатьи";
		КонецЕсли;					
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

