
#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура обработчик события ПриСозданииНаСервере.
// Осуществляет первоначальное заполнение реквизитов формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Элементы.ГруппаВариантЗаполнения.Видимость = Истина;
		ВариантЗаполнения = "1";
		ТекущийВариант = "1";
		Элементы.ФизлицоЗаполнения.Видимость = Ложь;
		
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.Физлицо.Видимость = Ложь;
		Элементы.ЛичныеДанные.Видимость = Истина;
		Элементы.ФизлицоПросмотр.Видимость = Истина;
				
		ВалютаПоУмолчанию = Константы.НациональнаяВалюта.Получить();
		
		ЗначениеНастройки = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
			
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Организация = ЗначениеНастройки;
		Иначе
			Организация = Справочники.Организации.ОсновнаяОрганизация;
		КонецЕсли;		
		
		Элементы.ДокументыПоСотруднику.Видимость = Ложь;
		
	Иначе
		
		ВариантЗаполнения = "0";
		Элементы.ГруппаВариантЗаполнения.Видимость 	= Ложь;		
		Элементы.ФизлицоЗаполнения.Видимость 		= Ложь;
		Элементы.Физлицо.Видимость 					= Истина;
		Элементы.ЛичныеДанные.Видимость 			= Ложь;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация	
	ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ЗаполнитьДокументыПоСотруднику();
	
	// Учет остатков контрагентов.
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Организация");
	
	УправлениеITОтделом8УФ.УстановитьОграничениеТипаДляЭлементовФормы(ЭтаФорма, 
		МассивЭлементов, ЗначениеЗаполнено(Объект.Организация));	
	
	ОбновитьВидимостьДоступность();
	
	ЗаданияСервер.УстановитьШагКорректировкиВеса(ШагКорректировкиВеса);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
// Процедура обработчик события ПриЧтенииНаСервере
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
// Процедура обработчик события ОбработкаОповещения.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
// Процедура обработчик события ПередЗаписьюНаСервере.
// Осуществляет первоначальное заполнение реквизитов формы.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ВариантЗаполнения = "1"
		И НЕ ЗначениеЗаполнено(ТекущийОбъект.Физлицо) Тогда
		
		ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизЛицоОбъект.Наименование = ТекущийОбъект.Наименование;
		ФизЛицоОбъект.ДатаРождения = ДатаРождения;
		ФизЛицоОбъект.Пол = Пол;
		ФизЛицоОбъект.Записать();
		
		ТекущийОбъект.Физлицо = ФизЛицоОбъект.Ссылка;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
// Процедура обработчик события ОбработкаПроверкиЗаполненияНаСервере.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаСервере
// Процедура обработчик события ПослеЗаписиНаСервере.
// Осуществляет первоначальное заполнение реквизитов формы.
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДокументыПоСотруднику();	
	Элементы.ДокументыПоСотруднику.Видимость = Истина;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события ПослеЗаписи.
// Осуществляет первоначальное заполнение реквизитов формы.
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Элементы.ЛичныеДанные.ТолькоПросмотр = Истина;
	Оповестить("Запись_Сотрудники", Новый Структура, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВыбораОрганизацииКонтрагента"
		И ИсточникВыбора.ВладелецФормы = ЭтаФорма Тогда
		УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбораФормы(ЭтаФорма, 
		 				"Организация",
						Объект.Организация,
						ВыбранноеЗначение,
						Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект));	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита ВариантЗаполнения.
//
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	Если ТекущийВариант <> ВариантЗаполнения Тогда
		УстановитьВидимостьРеквизитов();
	КонецЕсли; 
		
КонецПроцедуры 

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита ФизлицоЗаполнения.
//
Процедура ФизлицоЗаполненияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Физлицо) Тогда
		Возврат;
	КонецЕсли; 
	
	Структура = Новый Структура("ФизЛицо", Объект.Физлицо);
	ПолучитьДанныеФизЛица(Структура);
	Объект.Наименование = Структура.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуальностьПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВесРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ШагКорректировкиВеса > 1 Тогда		
		
		СтандартнаяОбработка = Ложь;
		Если Направление = 1 Тогда
			Объект.Вес = Объект.Вес + ШагКорректировкиВеса;
		Иначе
			Объект.Вес = Объект.Вес - ШагКорректировкиВеса;
		КонецЕсли;	
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, 
		НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)	
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		Ожидание, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, 
		Ожидание, СтандартнаяОбработка);
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, 
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, 
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
    ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Процедура устанавливает видимость реквизитов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьРеквизитов()
	
	Если ВариантЗаполнения = "1" Тогда
	
		ТекущийВариант = "1";
		Элементы.ФизлицоЗаполнения.Видимость = Ложь;
		
		Элементы.ЛичныеДанные.Видимость = Истина;
		Элементы.ФизлицоПросмотр.Видимость = Истина;	
	    Элементы.Физлицо.Видимость = Ложь;
		
	ИначеЕсли ВариантЗаполнения = "2" Тогда
	
		ТекущийВариант = "2";
		Элементы.ФизлицоЗаполнения.Видимость = Истина;
		
		Элементы.ЛичныеДанные.Видимость = Ложь;
		Элементы.ФизлицоПросмотр.Видимость = Ложь;	
	    Элементы.Физлицо.Видимость = Ложь;
		
	ИначеЕсли ВариантЗаполнения = "3" Тогда
	
		ТекущийВариант = "3";
		Элементы.ФизлицоЗаполнения.Видимость = Ложь;
		
		Элементы.ЛичныеДанные.Видимость = Ложь;
		Элементы.ФизлицоПросмотр.Видимость = Истина;	
	    Элементы.Физлицо.Видимость = Истина;
		
	КонецЕсли; 	
	
КонецПроцедуры // УстановитьВидимостьРеквизитов()

&НаСервереБезКонтекста
// Процедура возвращает наименование физлица.
//
// Параметры:
//  Нет.
//
Процедура ПолучитьДанныеФизЛица(Структура)
	
	Структура.Вставить("Наименование", Структура.Физлицо.Наименование); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыПоСотруднику()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегистрСведенийОтветственныеСотрудникиСрезПоследних.Период КАК Дата,
		|	РегистрСведенийОтветственныеСотрудникиСрезПоследних.Регистратор,
		|	РегистрСведенийОтветственныеСотрудникиСрезПоследних.МестоХранения
		|ИЗ
		|	РегистрСведений.ОтветственныеСотрудники.СрезПоследних(&ДатаКон, Сотрудник = &Сотрудник) КАК РегистрСведенийОтветственныеСотрудникиСрезПоследних
		|ГДЕ
		|	РегистрСведенийОтветственныеСотрудникиСрезПоследних.МестоХранения В
		|			(ВЫБРАТЬ
		|				МестаХранения.Ссылка
		|			ИЗ
		|				Справочник.МестаХранения КАК МестаХранения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СнятиеЗакрепленияСотрудниковСотрудники.Ссылка.Дата,
		|	СнятиеЗакрепленияСотрудниковСотрудники.Ссылка,
		|	СнятиеЗакрепленияСотрудниковСотрудники.МестоХранения
		|ИЗ
		|	Документ.СнятиеЗакрепленияСотрудников.Сотрудники КАК СнятиеЗакрепленияСотрудниковСотрудники
		|ГДЕ
		|	СнятиеЗакрепленияСотрудниковСотрудники.Сотрудник = &Сотрудник
		|	И СнятиеЗакрепленияСотрудниковСотрудники.МестоХранения В
		|			(ВЫБРАТЬ
		|				МестаХранения.Ссылка
		|			ИЗ
		|				Справочник.МестаХранения КАК МестаХранения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи  = РезультатЗапроса.Выбрать();
	
	Документы.Очистить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = Документы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		
		ВерсияДанных = "";		
		Попытка
			ВерсияДанных 		    = ВыборкаДетальныеЗаписи.Регистратор.ВерсияДанных;						
		Исключение			
			НоваяСтрока.Регистратор = Строка(ТипЗНЧ(ВыборкаДетальныеЗаписи.Регистратор)) + Нстр("ru = ' < доступ закрыт >'");
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Истина);		
		Если ВыборкаДетальныеЗаписи.Регистратор.Проведен	Тогда
			НоваяСтрока.ИндексКартинки = 14;
		ИначеЕсли ВыборкаДетальныеЗаписи.Регистратор.ПометкаУдаления Тогда			
			НоваяСтрока.ИндексКартинки = 13;
		Иначе НоваяСтрока.ИндексКартинки = 12;
		КонецЕсли;		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
	Если Документы.Количество() > 0 Тогда
		Документы.Сортировать("Дата Возр");
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ДокументыПоСотрудникуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыПоСотруднику.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Регистратор) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе ПоказатьЗначение(,ТекущиеДанные.Регистратор); 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДоступность()
	
	Элементы.ДатаУвольнения.Видимость = НЕ Объект.Актуальность;
	
КонецПроцедуры

#Область УчетОстатковКонтрагентов

&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
			
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикНачалоВыбора(ЭтаФорма, Объект.Организация, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикАвтоПодбор(ЭтаФорма, 
				"Организация",
				Текст, 
				ДанныеВыбора,
				Ожидание,
				СтандартнаяОбработка);
				
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Очистка(Элемент, СтандартнаяОбработка)	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбора(ЭтаФорма, 
				"Организация", 
				Объект.Организация,
				Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект),
				ВыбранноеЗначение,
				СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиВыбора(Результат, ДополнительныеПараметры) Экспорт
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
