#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает макет для установки условия правил событий.
//
// Параметры:
//	ОписаниеОбъектаМетаданных - Строка, Метаданные - объект метаданных.
//	ИмяМакетаШаблона - Строка - имя макета
//
// Возвращаемое значение:
//	Макет.
//
Функция ПолучитьПравилаОтбораСобытий(Знач ОписаниеОбъектаМетаданных, 
	Знач ИмяМакетаШаблона = "СКД_ПравилаОтбораСобытий") Экспорт
	
	Возврат ПравилаСобытийПовтИсп.ПолучитьМакетПравилОтбораСобытий(ОписаниеОбъектаМетаданных, ИмяМакетаШаблона);
	
КонецФункции

// Возвращает правило по идентификатору в нем.
//
// Параметры:
//	ИмяИдентификатора - Строка - имя идентификатора.
//
// Возвращаемое значение:
//	СправочникСсылка.ПравилаСобытий - правило.
//
Функция ПравилаПредопределенноеЗначениеПоИдентификатору(Знач ИмяИдентификатора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаСобытий КАК ПравилаСобытий
		|ГДЕ
		|	ПравилаСобытий.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ИмяИдентификатора);	
	РезультатЗапроса       = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	Иначе
		
		Спр 				= Справочники.ПравилаСобытий.СоздатьЭлемент();
		Спр.Идентификатор 	= ИмяИдентификатора;
		Спр.Наименование  	= ИмяИдентификатора;
		Спр.Записать();
		
		Возврат Спр.Ссылка;
		
	КонецЕсли;

КонецФункции	

Функция НайтиСоздатьГруппуПравила(Знач ИмяИдентификатора, Знач ИмяГруппы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаСобытий КАК ПравилаСобытий
		|ГДЕ
		|	ПравилаСобытий.Идентификатор = &Идентификатор
		|	И ПравилаСобытий.ЭтоГруппа = ИСТИНА";
	
	Запрос.УстановитьПараметр("Идентификатор", ИмяИдентификатора);	
	РезультатЗапроса       = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	Иначе
		
		Спр = Справочники.ПравилаСобытий.СоздатьГруппу();
		Спр.Идентификатор = ИмяИдентификатора;
		Спр.Наименование  = ИмяГруппы;
		Спр.Записать();
		
		Возврат Спр.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПравилаСобытийПриПервоначальномЗаполнении() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ИспользоватьШаблоныСообщений.Получить() Тогда
		Константы.ИспользоватьШаблоныСообщений.Установить(Истина);
	КонецЕсли;
	
	//Заполнение справочника ДействияПравилСобытий.	
	Справочники.ДействияПравилСобытий.ЗаполнитьДействияПравилСобытийПриПервоначальномЗаполнении();
	
	// Описываем структуру.
	ТЗ = ТаблицаСтруктураПравила();
	
	// Заполняем реквизитами.
	ЗаполнитьПравилаДляВходящихЭлектронныхПисем(ТЗ);
	ЗаполнитьПравилаДляЗаданий(ТЗ);
	ЗаполнитьПравилаДляЗаказовПоставщику(ТЗ);
	ЗаполнитьПравилаДляСтатейБазыЗнаний(ТЗ);
	ЗаполнитьПравилаДляКарточекНоменклатуры(ТЗ);	
	ЗаполнитьПравилаДляМетрик(ТЗ);
	
	// Записываем
	ЗаписатьПравилаСобытий(ТЗ);
	
КонецПроцедуры

Функция ТаблицаСтруктураПравила() Экспорт
	
	// Описываем структуру.
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Объект");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ТипПравила");
	ТЗ.Колонки.Добавить("ТипУсловия");
	ТЗ.Колонки.Добавить("Использовать");
	ТЗ.Колонки.Добавить("ПроверкаРеквизитовОбъектаИмяОбъекта");
	ТЗ.Колонки.Добавить("ПроверкаРеквизитовОбъектаИмяУсловия");
	ТЗ.Колонки.Добавить("ПроверкаРеквизитовОбъектаУсловия");
	ТЗ.Колонки.Добавить("ПрименитьОстальныеПравила");
	ТЗ.Колонки.Добавить("ЧасовДоУсловия");
	ТЗ.Колонки.Добавить("Действия");
	ТЗ.Колонки.Добавить("Родитель");
	ТЗ.Колонки.Добавить("РасчетМетрикИмяОбъекта");
	
	Возврат ТЗ;
	
КонецФункции

Процедура ЗаписатьПравилаСобытий(ТЗ) Экспорт

	// Записываем.
	Для Каждого Стр Из ТЗ Цикл		
		Объект = Стр.Объект.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(Объект, Стр);
		Объект.ПроверкаРеквизитовОбъектаУсловия = Новый ХранилищеЗначения(Стр.ПроверкаРеквизитовОбъектаУсловия.Получить());
		Объект.ПроверкаИспользуетСКД = Ложь;
		Объект.Действия.Очистить();
		Для Каждого Строки2 Из Стр.Действия Цикл
			НоваяСтрока = Объект.Действия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки2);
		КонецЦикла;			
		Объект.Записать();				
	КонецЦикла;	

КонецПроцедуры

Процедура ЗарегистрироватьИРассчитатьМетрикиПоПравилу(Знач ПравилоСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМетрики") <> Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УзелОбмена = МетрикиПовтИсп.ПолучитьУзелДляРегистрацииДанных();
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектМетаданных.Ссылка КАК Ссылка
		|ИЗ
		|	%1 КАК ОбъектМетаданных";
	
	ТекстЗапроса	= СтрШаблон(ТекстЗапроса, ПравилоСсылка.РасчетМетрикИмяОбъекта); 	
	
	НастройкиСКД = ПравилоСсылка.ПроверкаРеквизитовОбъектаУсловия.Получить();
	Если НастройкиСКД <> Неопределено Тогда
		
		СКД = Справочники.ПравилаСобытий.ПолучитьПравилаОтбораСобытий(ПравилоСсылка.РасчетМетрикИмяОбъекта);
		
		ЗапросВР = СКД.НаборыДанных[0].Запрос;
		ЗапросВР = СтрЗаменить(ЗапросВР, "= &Основание", "В (" + ТекстЗапроса + ")");
		СКД.НаборыДанных[0].Запрос = ЗапросВР;			
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
		КомпоновщикНастроек.Восстановить();
		
		КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(),,, 
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Ложь);
		
		РезультатСКД 		= Новый ТаблицаЗначений;
		ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(РезультатСКД);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Если РезультатСКД.Количество() = 0 Тогда
			// По отбору правила нет подходящих объектов.
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из РезультатСКД Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаТаблицы.Ссылка);
		КонецЦикла;
				
	КонецЕсли;	
	МетрикиВызовСервера.РассчитатьМетрики();
	
КонецПроцедуры

Функция ВыгрузитьГруппуПравилСобытий(Знач ПравилоСобытий = Неопределено) Экспорт
	
	НомерПорции 			= 0;
	КаталогXML 				= КаталогВременныхФайлов() + "er\";
	УдалитьФайлы(КаталогXML, "*");
	СоздатьКаталог(КаталогXML);
	ВсеВыгруженныеОбъекты	= Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получить всех родителей правила.
	МассивРодителей = ПолучитьВсехРодителейЭлемента(ПравилоСобытий);
	Если МассивРодителей.Количество() > 0 Тогда
		
		Запись = Новый ЗаписьXML;
    	Запись.УстановитьСтроку();    
    	Запись.ЗаписатьОбъявлениеXML();
    	Запись.ЗаписатьНачалоЭлемента("Данные");	
		Запись.ЗаписатьНачалоЭлемента("ГруппыПравилаСобытий");
    	Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.1/data/enterprise/current-config");
    	Запись.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
    	Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
			
		Для Каждого Элем Из МассивРодителей Цикл
			СериализаторXDTO.ЗаписатьXML(Запись, Элем.ПолучитьОбъект());
			ВсеВыгруженныеОбъекты.Добавить(Элем);
		КонецЦикла;
			
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Текст 	= Запись.Закрыть();
		XMLФайл = КаталогXML + "0_spr_gr_er.xml";
		МойXML 	= Новый ТекстовыйДокумент;
		МойXML.ДобавитьСтроку(Текст);
		МойXML.Записать(XMLФайл);

	КонецЕсли;
	
	// Правило и подчиненные элементы.
	Запись = Новый ЗаписьXML;
    Запись.УстановитьСтроку();    
    Запись.ЗаписатьОбъявлениеXML();
    Запись.ЗаписатьНачалоЭлемента("Данные");	
	Запись.ЗаписатьНачалоЭлемента("ЭлементыВыгрузки");
    Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.1/data/enterprise/current-config");
    Запись.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
    Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	СериализаторXDTO.ЗаписатьXML(Запись, ПравилоСобытий.ПолучитьОбъект());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаСобытий.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Правила
		|ИЗ
		|	Справочник.ПравилаСобытий КАК ПравилаСобытий
		|ГДЕ
		|	ПравилаСобытий.Ссылка В ИЕРАРХИИ(&ПравилоСобытий)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаСобытийДействия.Действие КАК Действие
		|ПОМЕСТИТЬ ВТ_ДействияПравил
		|ИЗ
		|	Справочник.ПравилаСобытий.Действия КАК ПравилаСобытийДействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Правила КАК ВТ_Правила
		|		ПО ПравилаСобытийДействия.Ссылка = ВТ_Правила.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействияПравилСобытийПолучателиОповещений.ШаблонОформления КАК ШаблонОформления
		|ПОМЕСТИТЬ ВТ_ШаблоныОформления
		|ИЗ
		|	Справочник.ДействияПравилСобытий.ПолучателиОповещений КАК ДействияПравилСобытийПолучателиОповещений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДействияПравил КАК ВТ_ДействияПравил
		|		ПО ДействияПравилСобытийПолучателиОповещений.Ссылка = ВТ_ДействияПравил.Действие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействияПравилСобытийПолучателиОповещений.ШаблонСообщения КАК ШаблонСообщения
		|ПОМЕСТИТЬ ВТ_ШаблоныСообщений
		|ИЗ
		|	Справочник.ДействияПравилСобытий.ПолучателиОповещений КАК ДействияПравилСобытийПолучателиОповещений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДействияПравил КАК ВТ_ДействияПравил
		|		ПО ДействияПравилСобытийПолучателиОповещений.Ссылка = ВТ_ДействияПравил.Действие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Правила.Ссылка КАК ЭлементВыгрузки
		|ИЗ
		|	ВТ_Правила КАК ВТ_Правила
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДействияПравил.Действие
		|ИЗ
		|	ВТ_ДействияПравил КАК ВТ_ДействияПравил
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ШаблоныОформления.ШаблонОформления
		|ИЗ
		|	ВТ_ШаблоныОформления КАК ВТ_ШаблоныОформления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ШаблоныСообщений.ШаблонСообщения
		|ИЗ
		|	ВТ_ШаблоныСообщений КАК ВТ_ШаблоныСообщений";
	
	Запрос.УстановитьПараметр("ПравилоСобытий", ПравилоСобытий);	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
 	МассивПодчиненых = РезультатЗапроса.ВыгрузитьКолонку("ЭлементВыгрузки");
	
	Для Каждого ЭлементВыгрузки Из МассивПодчиненых Цикл
		
		Если ВсеВыгруженныеОбъекты.Найти(ЭлементВыгрузки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЭлементОбъект = ЭлементВыгрузки.ПолучитьОбъект();
		Исключение
			Продолжить;
		КонецПопытки;	
		
		Если ЭлементОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СериализаторXDTO.ЗаписатьXML(Запись, ЭлементОбъект);
		ВсеВыгруженныеОбъекты.Добавить(ЭлементВыгрузки);		
		
		Если ТипЗнч(ЭлементВыгрузки) = Тип("СправочникСсылка.ДействияПравилСобытий") Тогда
			МассивРодителей = ПолучитьВсехРодителейЭлемента(ЭлементВыгрузки);
			Если МассивРодителей.Количество() > 0 Тогда
				Для Каждого ЭлементРодитель Из МассивРодителей Цикл
					Если ВсеВыгруженныеОбъекты.Найти(ЭлементРодитель) = Неопределено Тогда
						СериализаторXDTO.ЗаписатьXML(Запись, ЭлементРодитель.ПолучитьОбъект());
					    ВсеВыгруженныеОбъекты.Добавить(ЭлементРодитель);
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;	

	Запись.ЗаписатьКонецЭлемента();
	Запись.ЗаписатьКонецЭлемента();	
	Текст 		= Запись.Закрыть();
	XMLФайл 	= КаталогXML + "1_spr_ra_" + Формат(НомерПорции, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + ".xml";
	МойXML 		= Новый ТекстовыйДокумент;
	МойXML.ДобавитьСтроку(Текст);
	МойXML.Записать(XMLФайл);
	
	// Делаем архив.
	ИмяАрхива 	= ПолучитьИмяВременногоФайла();
	Файлы 		= НайтиФайлы(КаталогXML, "*", Ложь);	
	НовыйАрхив 	= Новый ЗаписьZipФайла(ИмяАрхива);
	Для Каждого мФайл Из Файлы Цикл	
		НовыйАрхив.Добавить(мФайл.ПолноеИмя);
	КонецЦикла;
	НовыйАрхив.Записать();
	
	мДД 	= Новый ДвоичныеДанные(ИмяАрхива);
	Адрес 	= ПоместитьВоВременноеХранилище(мДД);
	
	УдалитьФайлы(КаталогXML);
	УдалитьФайлы(ИмяАрхива);
	
	Возврат Адрес;

КонецФункции

Процедура ЗагрузитьПравилоСобытий(Знач Адрес = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Адрес <> Неопределено Тогда
		мДД 	= ПолучитьИзВременногоХранилища(Адрес);
		УдалитьИзВременногоХранилища(Адрес);
	КонецЕсли;
	
	ПапкаНазначения = КаталогВременныхФайлов() + "er\";
	
	Попытка
		Поток 			= мДД.ОткрытьПотокДляЧтения();
		ЧтениеАрхива	= Новый ЧтениеZipФайла(Поток);
	Исключение
		ТекстОшибки 	= НСтр("ru = 'В файле отсутствует информация о данных правила событий.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
		
	КонецПопытки;
	
	Для Каждого ЭлементАрхива Из ЧтениеАрхива.Элементы Цикл
		
		ИсходноеПолноеИмя	= НРег(ЭлементАрхива.ИсходноеПолноеИмя);
		ЧтениеАрхива.Извлечь(ЭлементАрхива, ПапкаНазначения);
		ВременныйФайлXML 	= ПапкаНазначения + ЭлементАрхива.ПолноеИмя;
		ЧтениеXML 		 	= Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ВременныйФайлXML);
		ЧтениеXML.ПерейтиКСодержимому();
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		
		Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
						
			ОбъектСправочника = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
			Если ОбъектСправочника <> Неопределено Тогда
				ОбъектСправочника.ОбменДанными.Загрузка = Истина;
				ОбъектСправочника.Записать();
			КонецЕсли;	
			
		КонецЦикла;
		ЧтениеXML.Прочитать();

	КонецЦикла;	
	
	ЧтениеАрхива.Закрыть();
	Поток.Закрыть();
	ЧтениеXML.Закрыть();
	
	ЧтениеАрхива = Неопределено;
	Поток		 = Неопределено;
	ЧтениеXML	 = Неопределено;
	
	Попытка
		ФайловаяСистема.УдалитьВременныйКаталог(ПапкаНазначения);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

#Область ЗаполнениеПравилСобытий

Процедура ЗаполнитьПравилаДляКарточекНоменклатуры(ТЗ) Экспорт
	
	ГруппаКарточкаНоменклатуры = НайтиСоздатьГруппуПравила("КарточкаНоменклатуры", "Карточка номенклатуры");
	
	ПТП = Перечисления.ТипыПравилСобытий;
	ПТУ = Перечисления.ТипУсловийПравилСобытий;
	ПТД = Перечисления.ТипДействийПравилСобытий;
	ПС  = Справочники.ПравилаСобытий;
	ДПС = Справочники.ДействияПравилСобытий;	
	
	// КарточкаНоменклатурыОкончаниеСрокаДействияЛицензий (выключено). 
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("КарточкаНоменклатурыОкончаниеСрокаДействияЛицензий"), 
					НСтр("ru = 'Карточка номенклатуры (окончание срока действия лицензий)'"), 
					ПТП.ПериодическоеСобытие, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Ложь, 
					"Справочник.КарточкиНоменклатуры", 
					"КарточкиНоменклатурыПериодическоеСобытиеОкончаниеСрокаДействияЛицензии", 
					Истина,
					,
					ГруппаКарточкаНоменклатуры);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	
	// КарточкаНоменклатурыОкончаниеСрокаПолезногоИспользования (выключено).
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("КарточкаНоменклатурыОкончаниеСрокаПолезногоИспользования"), 
					НСтр("ru = 'Карточка номенклатуры (окончание срока полезного использования)'"), 
					ПТП.ПериодическоеСобытие, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Ложь, 
					"Справочник.КарточкиНоменклатуры", 
					"КарточкиНоменклатурыПериодическоеСобытиеОкончаниеСрокаПолезногоИспользования", 
					Истина,
					,
					ГруппаКарточкаНоменклатуры);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);
	
КонецПроцедуры

Процедура ЗаполнитьПравилаДляСтатейБазыЗнаний(ТЗ) Экспорт
	
	ГруппаСтатьяБазыЗнаний     = НайтиСоздатьГруппуПравила("СтатьяБазыЗнаний", НСтр("ru = 'Статья базы знаний'"));
	
	ПТП = Перечисления.ТипыПравилСобытий;
	ПТУ = Перечисления.ТипУсловийПравилСобытий;
	ПТД = Перечисления.ТипДействийПравилСобытий;
	ПС  = Справочники.ПравилаСобытий;
	ДПС = Справочники.ДействияПравилСобытий;	
	
	// СтатьяБазыЗнанийДобавлениеКомментария.
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("СтатьяБазыЗнанийДобавлениеКомментария"),
					НСтр("ru = 'Статья базы знаний (добавление комментария)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Истина, 
					"Справочник.СтатьиБазыЗнаний", 
					"СтатьяБазыЗнанийИзменениеОбъектаДобавлениеКомментария",
					Истина,
					,
					ГруппаСтатьяБазыЗнаний);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоEMailСтатьяБазыЗнанийДобавлениеКомментарияАвторПользовательНеУказан"));
	
	// СтатьяБазыЗнанийЗаписьСтатьи (выключено).
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("СтатьяБазыЗнанийЗаписьСтатьи"),
					НСтр("ru = 'Статья базы знаний (запись статьи)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Ложь, 
					"Справочник.СтатьиБазыЗнаний", 
					"СтатьяБазыЗнанийИзменениеОбъектаЗаписьСтатьи",
					Истина,
					,
					ГруппаСтатьяБазыЗнаний);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоEMailСтатьяБазыЗнанийЗаписьСтатьиПользовательНеУказан"));
	
КонецПроцедуры

Процедура ЗаполнитьПравилаДляЗаданий(ТЗ) Экспорт

	ГруппаЗадания = НайтиСоздатьГруппуПравила("Задание", "Задание");
	
	ПТП = Перечисления.ТипыПравилСобытий;
	ПТУ = Перечисления.ТипУсловийПравилСобытий;
	ПТД = Перечисления.ТипДействийПравилСобытий;
	ПС  = Справочники.ПравилаСобытий;
	ДПС = Справочники.ДействияПравилСобытий;	

	// ЗаданиеСоздание Email.
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеСоздание"), 
					НСтр("ru = 'Задание (создание)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Истина, 
					"Документ.Задание", 
					"ЗаданиеИзменениеОбъектаСозданиеЗадания",
					Истина,
					,
					ГруппаЗадания);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоEMailЗаданиеСозданиеИнициаторИсполнительНаблюдатели"));
	
	// ЗаданиеСоздание SMS (выключено).
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеСозданиеSMS"), 
					НСтр("ru = 'Задание (создание), SMS исполнителю (отключено)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Ложь, 
					"Документ.Задание", 
					"ЗаданиеИзменениеОбъектаСозданиеЗадания", 
					Истина,
					,
					ГруппаЗадания);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия,
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоSMSЗаданиеСозданиеИсполнитель"));
	
	// ЗаданиеВыполнение.
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеВыполнение"), 
					НСтр("ru = 'Задание (выполнение)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Истина, 
					"Документ.Задание", 
					"ЗаданиеИзменениеОбъектаВыполнение", 
					Истина,
					,
					ГруппаЗадания);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоEMailЗаданиеВыполнениеИнициаторНаблюдатели"));
	
	
	// ЗаданиеДобавлениеОбычногоКомментария.
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеДобавлениеОбычногоКомментария"),
					НСтр("ru = 'Задание (добавление обычного комментария)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Истина, 
					"Документ.Задание", 
					"ЗаданиеИзменениеОбъектаДобавлениеОбычногоКомментария",
					Истина,
					,
					ГруппаЗадания);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоEMailЗаданиеДобавлениеОбычногоКомментарияИнициаторИсполнительНаблюдатели"));
	
	// ЗаданиеДобавлениеПриватногоКомментария.
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеДобавлениеПриватногоКомментария"), 
					НСтр("ru = 'Задание (добавление приватного комментария)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта,
					Истина, 
					"Документ.Задание", 
					"ЗаданиеИзменениеОбъектаДобавлениеПриватногоКомментария",
					Истина,
					,
					ГруппаЗадания);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);		
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоEMailЗаданиеДобавлениеПриватногоКомментарияАдресаты"));
	
	// ЗаданиеЗавершение (выключено).
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ,
					ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеЗавершение"), 
					НСтр("ru = 'Задание (завершение)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Ложь, 
					"Документ.Задание", 
					"ЗаданиеИзменениеОбъектаЗавершение", 
					Истина,
					,
					ГруппаЗадания);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоEMailЗаданиеЗавершениеИнициатор"));
	
	// ЗаданиеИзменениеИсполнителя.
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеИзменениеИсполнителя"), 
					НСтр("ru = 'Задание (изменение исполнителя)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Истина, 
					"Документ.Задание", 
					"ЗаданиеИзменениеОбъектаИзменениеИсполнителя", 
					Истина,
					,
					ГруппаЗадания);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоEMailЗаданиеИзменениеИсполнителяИсполнительПредыдущийИсполнитель"));	
	
	// ЗаданиеИзменениеЭтапаНеВыполнено (выключено).
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеИзменениеЭтапаНеВыполнено"), 
					НСтр("ru = 'Задание (изменение этапа)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Ложь, 
					"Документ.Задание", 
					"ЗаданиеИзменениеОбъектаИзменениеЭтапа", 
					Истина,
					,
					ГруппаЗадания);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоEMailЗаданиеИзменениеЭтапаИнициаторНаблюдатели"));
		
	// ЗаданиеУстановкаОценки (выключено).
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеУстановкаОценки"), 
					НСтр("ru = 'Задание (изменение оценки)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Ложь, 
					"Документ.Задание", 
					"ЗаданиеИзменениеОбъектаИзменениеОценки", 
					Истина,
					,
					ГруппаЗадания);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоEMailЗаданиеУстановкаОценкиИсполнительНаблюдатели"));
	
	// ЗаданиеИзменениеНаблюдателей.
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеИзменениеНаблюдателей"), 
					НСтр("ru = 'Задание (изменение наблюдателей)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Истина, 
					"Документ.Задание", 
					"ЗаданиеИзменениеОбъектаИзменениеНаблюдателей", 
					Истина,
					,
					ГруппаЗадания);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоEMailЗаданиеИзменениеНаблюдателейДобавленныеНаблюдателиПредыдущиеНаблюдатели"));
			
КонецПроцедуры

Процедура ЗаполнитьПравилаДляМетрик(ТЗ) Экспорт

	ПТП = Перечисления.ТипыПравилСобытий;
	ПТУ = Перечисления.ТипУсловийПравилСобытий;
	ПТД = Перечисления.ТипДействийПравилСобытий;
	ПС  = Справочники.ПравилаСобытий;
	ДПС = Справочники.ДействияПравилСобытий;
	
	ГруппаМетрики = НайтиСоздатьГруппуПравила("Метрики", "Метрики");
	
	// ЗаданиеЗапись (включено).
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("РасчетМетрикДокументЗаданиеЗаписьДокумента"),
					НСтр("ru = 'Расчет метрик для документа Задание (запись документа)'"), 
					ПТП.РасчетМетрик, 
					ПТУ.РасчетМетрик, 
					Истина, 
					"Документ.Задание", 
					,
					Истина,
					,
					ГруппаМетрики,
					"Документ.Задание");  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("РасчетМетрикДокументЗадание"));
	
КонецПроцедуры

Процедура ЗаполнитьПравилаДляЗаказовПоставщику(ТЗ) Экспорт
	
	ГруппаЗаказПоставщику = НайтиСоздатьГруппуПравила("ЗаказПоставщику",      "Заказ поставщику");
	
	ПТП = Перечисления.ТипыПравилСобытий;
	ПТУ = Перечисления.ТипУсловийПравилСобытий;
	ПТД = Перечисления.ТипДействийПравилСобытий;
	ПС  = Справочники.ПравилаСобытий;
	ДПС = Справочники.ДействияПравилСобытий;
	
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаказПоставщикуВыполнение"), 
					НСтр("ru = 'Заказ поставщику (выполнение)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Истина, 
					"Документ.ЗаказПоставщику", 
					"ЗаказПоставщикуИзменениеОбъектаИзменениеСостояния", 
					Истина,
					,
					ГруппаЗаказПоставщику);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("ОповещениеПоEMailЗаказПоставщикуВыполнениеИнициатор"));
	
КонецПроцедуры

Процедура ЗаполнитьПравилаДляВходящихЭлектронныхПисем(ТЗ) Экспорт
	
	ГруппаЭлектронноеПисьмоВходящее = НайтиСоздатьГруппуПравила("ЭлектронноеПисьмоВходящее", 
		"Электронное письмо входящее");
	
	ПТП = Перечисления.ТипыПравилСобытий;
	ПТУ = Перечисления.ТипУсловийПравилСобытий;
	ПТД = Перечисления.ТипДействийПравилСобытий;
	ПС  = Справочники.ПравилаСобытий;
	ДПС = Справочники.ДействияПравилСобытий;
	
	НоваяСтрока = ПравилаДобавитьВТаблицуЗначений(ТЗ, 
					ПравилаПредопределенноеЗначениеПоИдентификатору("ЭлектронноеПисьмоВходящееЗапись"), 
					НСтр("ru = 'Электронное письмо входящее (запись)'"), 
					ПТП.ИзменениеОбъекта, 
					ПТУ.ПроверкаРеквизитовОбъекта, 
					Истина, 
					"Документ.ЭлектронноеПисьмоВходящее", 
					"ЭлектронноеПисьмоВходящееЗапись", 
					Истина,
					,
					ГруппаЭлектронноеПисьмоВходящее);  
	ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
	ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
		ДПС.ПредопределенноеЗначениеПоИдентификатору("СоздатьЗаданиеИлиКомментарийЗадания"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в таблицу значений данные
//
// Параметры:
//   нет
//
Функция ПравилаДобавитьВТаблицуЗначений(ТЗ, 
	Знач Объект, 
	Знач Наименование, 
	Знач ТипПравила, 
	Знач ТипУсловия, 
	Знач Использовать, 
	Знач ИмяОбъекта, 
	Знач ИмяУсловия = "", 
	Знач ПрименитьОстальныеПравила = Истина, 
	Знач ИмяМакетаШаблона = "СКД_ПравилаОтбораСобытий", 
	Знач РодительЭлемента,
	Знач РасчетМетрикИмяОбъекта = "") Экспорт
	
	НоваяСтрока 	   		 						= ТЗ.Добавить();
	НоваяСтрока.Объект 		 						= Объект;
	НоваяСтрока.Наименование 						= Наименование;
	НоваяСтрока.ТипПравила	 						= ТипПравила;
	НоваяСтрока.ТипУсловия	 						= ТипУсловия;
	НоваяСтрока.Использовать						= Использовать;
	НоваяСтрока.ПроверкаРеквизитовОбъектаИмяОбъекта	= ИмяОбъекта;
	НоваяСтрока.ПроверкаРеквизитовОбъектаИмяУсловия	= ИмяУсловия;
	НоваяСтрока.ПрименитьОстальныеПравила 			= ПрименитьОстальныеПравила;	
	НоваяСтрока.ЧасовДоУсловия 						= 0;
	НоваяСтрока.Родитель     						= РодительЭлемента;
	НоваяСтрока.РасчетМетрикИмяОбъекта				= РасчетМетрикИмяОбъекта;
	
	СКД = Справочники.ПравилаСобытий.ПолучитьПравилаОтбораСобытий(ИмяОбъекта, ИмяМакетаШаблона);	
	
	Если ИмяУсловия = "ЗаказПоставщикуИзменениеОбъектаИзменениеСостояния" Тогда
		Для Каждого Элемент Из СКД.НастройкиПоУмолчанию.Отбор.Элементы Цикл
			Если Строка(Элемент.ЛевоеЗначение) = "СостояниеЗаказа" Тогда
				Элемент.Использование  = Истина;
				Элемент.ПравоеЗначение = Справочники.СостоянияЗаказовПоставщикам.Выполнен;
			КонецЕсли;	
		КонецЦикла;
		
	ИначеЕсли ИмяУсловия = "КарточкиНоменклатурыПериодическоеСобытиеОкончаниеСрокаДействияЛицензии"
		ИЛИ ИмяУсловия = "КарточкиНоменклатурыПериодическоеСобытиеОкончаниеСрокаПолезногоИспользования" Тогда
		
		НоваяСтрока.ЧасовДоУсловия = 48; 
		ТекстЗапроса = СКД.НаборыДанных.НаборДанных1.Запрос;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КарточкиНоменклатуры.Ссылка = &Основание", 
			"КарточкиНоменклатуры.Ссылка В (&Основание)");
		СКД.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;
		
	КонецЕсли;	
	
	ПроверкаРеквизитовОбъектаУсловия 			= Новый КомпоновщикНастроекКомпоновкиДанных;
	ПроверкаРеквизитовОбъектаУсловия.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(
		ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор)));
	ПроверкаРеквизитовОбъектаУсловия.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	ПроверкаРеквизитовОбъектаУсловия.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);		
	НоваяСтрока.ПроверкаРеквизитовОбъектаУсловия= Новый ХранилищеЗначения(ПроверкаРеквизитовОбъектаУсловия.Настройки);
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ДобавитьКолонкиВДействия(Действия)
	
	Действия = Новый ТаблицаЗначений;
	Действия.Колонки.Добавить("Действие");
	
КонецПроцедуры

Процедура ДобавитьВТаблицуЗначенийДействия(ТЗДействия, Объект)

	НоваяСтрокаТЗ = ТЗДействия.Добавить();
	НоваяСтрокаТЗ.Действие = Объект; 

КонецПроцедуры

// Возвращает массив родителей правила.
//
// Параметры:
//	Правила - СправочникСсылка.ПравилаСобытий - исходное правило.
//
// Возвращаемое значение:
//	Массив - массив родителей.
//
Функция ПолучитьВсехРодителейЭлемента(Знач Элемент)
	
	Массив = Новый Массив;	
	Запрос = Новый Запрос();
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Справочник.Родитель КАК Родитель,
		|	Справочник.Родитель.Родитель КАК РодительРодитель,
		|	Справочник.Родитель.Родитель.Родитель КАК РодительРодительРодитель,
		|	Справочник.Родитель.Родитель.Родитель.Родитель КАК РодительРодительРодительРодитель,
		|	Справочник.Родитель.Родитель.Родитель.Родитель.Родитель КАК РодительРодительРодительРодительРодитель
		|ИЗ
		|	%1 КАК Справочник
		|ГДЕ
		|	Справочник.Ссылка = &Элемент"; 
	
	Запрос.Текст = СтрШаблон(ТекстЗапроса, 
		?(ТипЗнч(Элемент) = Тип("СправочникСсылка.ПравилаСобытий"), 
		"Справочник.ПравилаСобытий", "Справочник.ДействияПравилСобытий"));
		
	ТекЭлемент = Элемент;
	
	Пока Истина Цикл 
		
		Запрос.УстановитьПараметр("Элемент", ТекЭлемент); 
	    Результат = Запрос.Выполнить(); 
		
		Если Результат.Пустой() Тогда 
	        Прервать; 
	    КонецЕсли; 
		
		Выборка = Результат.Выбрать(); 
	    Выборка.Следующий(); 
		
		Для НомерКолонки = 0 По Результат.Колонки.Количество() - 1 Цикл 
	        ТекЭлемент = Выборка[НомерКолонки]; 
			
			Если ТекЭлемент = Справочники.ПравилаСобытий.ПустаяСсылка()
				ИЛИ ТекЭлемент = Справочники.ДействияПравилСобытий.ПустаяСсылка() Тогда 
	            Прервать; 
	        Иначе 
	            Массив.Добавить(ТекЭлемент);
			КонецЕсли;
			
	    КонецЦикла; 

	    Если НЕ ЗначениеЗаполнено(ТекЭлемент) Тогда 
	        Прервать; 
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#КонецЕсли