
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ЗаполнитьПравилоПоУмолчанию();		
		ИнициализироватьПроверкаРеквизитовОбъектаУсловия();
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
				ПроверкаРеквизитовОбъектаУсловия.ЗагрузитьНастройки(Параметры.ЗначениеКопирования.ПроверкаРеквизитовОбъектаУсловия.Получить());
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Если УправлениеITОтделом8УФ.ЭтоДемоСерверОграниченныеПрава() Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	ЗаполнитьЭлементы();
		
	Элементы.ВидыУсловий.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализироватьПроверкаРеквизитовОбъектаУсловия();
	
	Если ТекущийОбъект.ПроверкаРеквизитовОбъектаУсловия.Получить() <> Неопределено Тогда
		ПроверкаРеквизитовОбъектаУсловия.ЗагрузитьНастройки(ТекущийОбъект.ПроверкаРеквизитовОбъектаУсловия.Получить());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПроверкаРеквизитовОбъектаУсловия		= Новый ХранилищеЗначения(ПроверкаРеквизитовОбъектаУсловия.Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ТипУсловия = Перечисления.ТипУсловийПравилСобытий.ПроверкаРеквизитовОбъекта Тогда
		Если Не ЗначениеЗаполнено(Объект.ПроверкаРеквизитовОбъектаИмяОбъекта) Тогда
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле",
				"Заполнение",
				"ПроверкаРеквизитовОбъектаИмяОбъекта");
				ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.ПроверкаРеквизитовОбъектаИмяОбъекта",
				,
				Отказ);
		КонецЕсли; 	
		Если Не ЗначениеЗаполнено(Объект.ПроверкаРеквизитовОбъектаИмяУсловия) Тогда
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле",
				"Заполнение",
				"ПроверкаРеквизитовОбъектаИмяУсловия");
				ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.ПроверкаРеквизитовОбъектаИмяУсловия",
				,
				Отказ);
		КонецЕсли;
	ИначеЕсли Объект.ТипУсловия = Перечисления.ТипУсловийПравилСобытий.ПроизвольныйАлгоритм Тогда
		Если Не ЗначениеЗаполнено(Объект.ПроизвольныйАлгоритмИмяОбъекта) 
			И Объект.ТипПравила = Перечисления.ТипыПравилСобытий.ИзменениеОбъекта Тогда
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле",
				"Заполнение",
				"ПроизвольныйАлгоритмИмяОбъекта");
				ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.ПроизвольныйАлгоритмИмяОбъекта",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипУсловияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипУсловийПравилСобытий.ПроизвольныйАлгоритм"));
	
	// Если изменение объекта.
	Если Объект.ТипПравила = ПредопределенноеЗначение("Перечисление.ТипыПравилСобытий.ИзменениеОбъекта") Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипУсловийПравилСобытий.ПроверкаРеквизитовОбъекта"));
	КонецЕсли;
	
	// Если периодическое событие.
	Если Объект.ТипПравила = ПредопределенноеЗначение("Перечисление.ТипыПравилСобытий.ПериодическоеСобытие") Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипУсловийПравилСобытий.ПроверкаРеквизитовОбъекта"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПравилаПриИзменении(Элемент)
	
	Если Объект.ТипПравила = ПредопределенноеЗначение("Перечисление.ТипыПравилСобытий.РасчетМетрик") Тогда
		Объект.ТипУсловия = ПредопределенноеЗначение("Перечисление.ТипУсловийПравилСобытий.РасчетМетрик");		
	Иначе
		Объект.ТипУсловия = ПредопределенноеЗначение("Перечисление.ТипУсловийПравилСобытий.ПроизвольныйАлгоритм");		
	КонецЕсли;
	
	Объект.ПроверкаРеквизитовОбъектаИмяОбъекта 	= "";	
	Объект.ПроверкаРеквизитовОбъектаИмяУсловия 	= "";
	Объект.ПроизвольныйАлгоритмИмяОбъекта 	   	= "";
	Объект.РасчетМетрикИмяОбъекта				= "";
	Объект.ЧасовДоУсловия					   	= 0;	
	Объект.Действия.Очистить();
	ЗаполнитьЭлементы();
	ИнициализироватьПроверкаРеквизитовОбъектаУсловия();
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипУсловияПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступность();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаРеквизитовОбъектаИмяОбъектаПриИзменении(Элемент)
	
	Объект.ПроверкаРеквизитовОбъектаИмяУсловия = "";				
	Если ЗначениеЗаполнено(Объект.ПроверкаРеквизитовОбъектаИмяОбъекта) Тогда		
		ИнициализироватьПроверкаРеквизитовОбъектаУсловия();		
		ЗаполнитьУсловияПроверкиПоОбъекту(Объект.ПроверкаРеквизитовОбъектаИмяОбъекта);		
	КонецЕсли;		
	Объект.Действия.Очистить();	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетМетрикИмяОбъектаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.РасчетМетрикИмяОбъекта) Тогда		
		ИнициализироватьПроверкаРеквизитовОбъектаУсловия();				
	КонецЕсли;		
	Объект.Действия.Очистить();	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПроверкиПоОбъекту(ОбъектПроверки)
	
	Элементы.ПроверкаРеквизитовОбъектаИмяУсловия.СписокВыбора.Очистить();
	МенеджерОбъекта     = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектПроверки);
	СоответствиеУсловий = МенеджерОбъекта.УсловияПравилаСобытий();	
	Если Объект.ТипПравила = Перечисления.ТипыПравилСобытий.ИзменениеОбъекта Тогда
		Условия = СоответствиеУсловий["СоответствиеИзменениеОбъекта"];
		Для Каждого КлючЗначение Из Условия Цикл
			Элементы.ПроверкаРеквизитовОбъектаИмяУсловия.СписокВыбора.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение, , 
				БиблиотекаКартинок.Перечисление);
		КонецЦикла;			
	ИначеЕсли Объект.ТипПравила = Перечисления.ТипыПравилСобытий.ПериодическоеСобытие Тогда	
		Условия = СоответствиеУсловий["СоответствиеПериодическоеСобытие"];
		Для Каждого КлючЗначение Из Условия Цикл
			Элементы.ПроверкаРеквизитовОбъектаИмяУсловия.СписокВыбора.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение, , 
				БиблиотекаКартинок.Перечисление);
		КонецЦикла;		
	КонецЕсли;		
	Элементы.ПроверкаРеквизитовОбъектаИмяУсловия.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоОповещенияПриИзменении(Элемент)
	
	ОбновитьНадписьЧасовДоУсловия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйАлгоритмИмяОбъектаПриИзменении(Элемент)
	
	Объект.Действия.Очистить();	
	ОбновитьВидимостьДоступность();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаИспользуяСКД1ПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаИспользуяСКДПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДействия

&НаКлиенте
Процедура ДействияВыполненияПослеУдаления(Элемент)
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияВыполненияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияВыполненияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда
		
		Отказ = Истина;
		
		мПроверка = ПредопределенноеЗначение("Перечисление.ТипУсловийПравилСобытий.ПроверкаРеквизитовОбъекта");
		мАлгоритм = ПредопределенноеЗначение("Перечисление.ТипУсловийПравилСобытий.ПроизвольныйАлгоритм");
		мРасчет = ПредопределенноеЗначение("Перечисление.ТипУсловийПравилСобытий.РасчетМетрик");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТипПравила", Объект.ТипПравила);
		ПараметрыФормы.Вставить("ТипУсловия", Объект.ТипУсловия);
		Если Объект.ТипУсловия = мПроверка Тогда
			ПараметрыФормы.Вставить("ПолноеИмяОснования", Объект.ПроверкаРеквизитовОбъектаИмяОбъекта);			
		ИначеЕсли Объект.ТипУсловия = мАлгоритм Тогда
			ПараметрыФормы.Вставить("ПолноеИмяОснования", Объект.ПроизвольныйАлгоритмИмяОбъекта);
		ИначеЕсли Объект.ТипУсловия = мРасчет Тогда
			ПараметрыФормы.Вставить("ПолноеИмяОснования", Объект.РасчетМетрикИмяОбъекта);
		КонецЕсли;		
		ОткрытьФорму("Справочник.ДействияПравилСобытий.ФормаВыбора", ПараметрыФормы, Элементы.ДействияВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияВыполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		НоваяСтрока = Объект.Действия.Добавить();
		НоваяСтрока.Действие = ВыбранноеЗначение;
		
		Элементы.ДействияВыполнения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ОбновитьВидимостьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗарегистрироватьОбъекты(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Данные еще не записаны. Для продолжения необходимо записать данные.'"));
		Возврат;
	КонецЕсли;	
	
	Если ПустаяСтрока(Объект.РасчетМетрикИмяОбъекта) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не заполнен объект для обработки правилом.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Действия.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для правила не заполнены действия.'"));
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаЗаполнитьОбъекты", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, 
		НСтр("ru = 'Для всех объектов, удовлетворяющих указанным условиям, будет выполнен пересчет значений метрик.
              |Операция может занять продолжительное время. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаполнитьОбъекты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	ВыполнитьРегистрациюИОбработкуОбъектовНаСервере();
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьРегистрациюИОбработкуОбъектовНаСервере()
	
	Справочники.ПравилаСобытий.ЗарегистрироватьИРассчитатьМетрикиПоПравилу(Объект.Ссылка);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьВидимостьДоступность()
	
	Если ЗначениеЗаполнено(Объект.ТипУсловия) Тогда	
		ИндексТипаТипУсловия = Перечисления.ТипУсловийПравилСобытий.Индекс(Объект.ТипУсловия);
		ИмяТипУсловия = Метаданные.Перечисления.ТипУсловийПравилСобытий.ЗначенияПеречисления[ИндексТипаТипУсловия].Имя;
	Иначе
		ИмяТипУсловия = "Пусто";
	КонецЕсли;
	Элементы.ВидыУсловий.ТекущаяСтраница = Элементы["Условия" + ИмяТипУсловия];
	
	Элементы.Действия.Заголовок = НСтр("ru = 'Действия'");
	Если Объект.Действия.Количество() > 0 Тогда
		Элементы.Действия.Заголовок = Элементы.Действия.Заголовок 
			+ " (" + Строка(Объект.Действия.Количество()) + ")";
	КонецЕсли;
		
	Элементы.ПрименитьОстальныеПравила.Видимость = Объект.ТипПравила = Перечисления.ТипыПравилСобытий.ИзменениеОбъекта;	
	Элементы.ПроверкаРеквизитовОбъектаИмяУсловия.Доступность = ЗначениеЗаполнено(Объект.ПроверкаРеквизитовОбъектаИмяОбъекта);
	Элементы.Действия.Доступность = (ЗначениеЗаполнено(Объект.ПроверкаРеквизитовОбъектаИмяОбъекта)
		И Объект.ТипУсловия = Перечисления.ТипУсловийПравилСобытий.ПроверкаРеквизитовОбъекта)
		ИЛИ (ЗначениеЗаполнено(Объект.ПроизвольныйАлгоритмИмяОбъекта) 
			И Объект.ТипУсловия = Перечисления.ТипУсловийПравилСобытий.ПроизвольныйАлгоритм 
			И Объект.ТипПравила = Перечисления.ТипыПравилСобытий.ИзменениеОбъекта)
		ИЛИ (Объект.ТипПравила = Перечисления.ТипыПравилСобытий.ПериодическоеСобытие 
			И Объект.ТипУсловия = Перечисления.ТипУсловийПравилСобытий.ПроизвольныйАлгоритм)
		ИЛИ (Объект.ТипПравила = Перечисления.ТипыПравилСобытий.РасчетМетрик 
			И Не ПустаяСтрока(Объект.РасчетМетрикИмяОбъекта));
		
	Элементы.ПроизвольныйАлгоритмИмяОбъекта.Видимость = Объект.ТипПравила = Перечисления.ТипыПравилСобытий.ИзменениеОбъекта;
	Элементы.РасчетМетрикИмяОбъекта.Видимость 		  = Объект.ТипПравила = Перечисления.ТипыПравилСобытий.РасчетМетрик;
	Элементы.ТипУсловия.Видимость					  = Объект.ТипПравила <> Перечисления.ТипыПравилСобытий.РасчетМетрик;
		
	Если Объект.ТипПравила = Перечисления.ТипыПравилСобытий.ПериодическоеСобытие Тогда
		Элементы.ГруппаЧасовДоУсловия.Видимость = Истина;
		ОбновитьНадписьЧасовДоУсловия();
	Иначе
		Элементы.ГруппаЧасовДоУсловия.Видимость = Ложь;
	КонецЕсли;	
	
	Элементы.ПроверкаРеквизитовОбъектаУсловияНастройкиОтбор.Доступность = Объект.ПроверкаИспользуетСКД;
	Элементы.ПроверкаРеквизитовОбъектаУсловияНастройкиОтборМетрики.Доступность = Объект.ПроверкаИспользуетСКД;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьЧасовДоУсловия()
	
	Если Объект.ЧасовДоУсловия < 24 Тогда
		Элементы.ДекорацияЧасовДней.Заголовок = "ч.";
	Иначе
		Стр = Строка(Цел(Объект.ЧасовДоУсловия / 24)) + " д.";
		Если Объект.ЧасовДоУсловия % 24 <> 0 Тогда
			Стр = Стр + Формат(Объект.ЧасовДоУсловия % 24, "ЧДЦ=0; ЧН=0") + " ч.";
		КонецЕсли;
		Элементы.ДекорацияЧасовДней.Заголовок = "ч. (" + Стр + ")";
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ИнициализироватьПроверкаРеквизитовОбъектаУсловия()
	
	Если Объект.ТипПравила = ПредопределенноеЗначение("Перечисление.ТипыПравилСобытий.РасчетМетрик")
		И Не ПустаяСтрока(Объект.РасчетМетрикИмяОбъекта) Тогда
		СКД = Справочники.ПравилаСобытий.ПолучитьПравилаОтбораСобытий(Объект.РасчетМетрикИмяОбъекта);
		
	ИначеЕсли Не ПустаяСтрока(Объект.ПроверкаРеквизитовОбъектаИмяОбъекта) Тогда	
		СКД = Справочники.ПравилаСобытий.ПолучитьПравилаОтбораСобытий(Объект.ПроверкаРеквизитовОбъектаИмяОбъекта);
		
	Иначе
		СКД = Новый СхемаКомпоновкиДанных;
		
	КонецЕсли;
	
	ПроверкаРеквизитовОбъектаУсловия.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор)));
	ПроверкаРеквизитовОбъектаУсловия.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	ПроверкаРеквизитовОбъектаУсловия.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

// Процедура - Заполнить элементы при открытии формы.
//
&НаСервере
Процедура ЗаполнитьЭлементы()
	
	// Заполняем выподающий список ПроверкаРеквизитовОбъектаИмяОбъекта.
	Элементы.ПроверкаРеквизитовОбъектаИмяОбъекта.СписокВыбора.Очистить();
	Элементы.ПроизвольныйАлгоритмИмяОбъекта.СписокВыбора.Очистить();
	Элементы.РасчетМетрикИмяОбъекта.СписокВыбора.Очистить();
	
	// Справочники.
	Для Каждого М Из Метаданные.Справочники Цикл
		
		Если ПравилаСобытийПовтИсп.ОбъектИсключениеПодсистемыПравилСобытий(М.ПолноеИмя()) Тогда
			Продолжить;
		КонецЕсли;
		
		// При изменении реквизитов.
		Попытка
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(М.ПолноеИмя());
			СоответствиеУсловияПравила = МенеджерОбъекта.УсловияПравилаСобытий();
			Если Объект.ТипПравила = Перечисления.ТипыПравилСобытий.ИзменениеОбъекта 
				И СоответствиеУсловияПравила["СоответствиеИзменениеОбъекта"].Количество() > 0 Тогда
				Элементы.ПроверкаРеквизитовОбъектаИмяОбъекта.СписокВыбора.Добавить("Справочник." + М.Имя, М.Синоним, ,
					БиблиотекаКартинок.Справочник);
			ИначеЕсли Объект.ТипПравила = Перечисления.ТипыПравилСобытий.ПериодическоеСобытие 
				И СоответствиеУсловияПравила["СоответствиеПериодическоеСобытие"].Количество() > 0 Тогда
				Элементы.ПроверкаРеквизитовОбъектаИмяОбъекта.СписокВыбора.Добавить("Справочник." + М.Имя, М.Синоним, ,
					БиблиотекаКартинок.Справочник);
			ИначеЕсли Объект.ТипПравила = Перечисления.ТипыПравилСобытий.РасчетМетрик 
				И СоответствиеУсловияПравила["СоответствиеРасчетМетрик"].Количество() > 0 Тогда
				Элементы.РасчетМетрикИмяОбъекта.СписокВыбора.Добавить("Справочник." + М.Имя, М.Синоним, ,
					БиблиотекаКартинок.Справочник);
			КонецЕсли;		
		Исключение
		КонецПопытки;
		
		// Для произвольного алгоритма.
		Элементы.ПроизвольныйАлгоритмИмяОбъекта.СписокВыбора.Добавить("Справочник." + М.Имя, М.Синоним, , 
			БиблиотекаКартинок.Справочник);
		
	КонецЦикла;
	
	// Документы.
	Для Каждого М Из Метаданные.Документы Цикл
		
		Если ПравилаСобытийПовтИсп.ОбъектИсключениеПодсистемыПравилСобытий(М.ПолноеИмя()) Тогда
			Продолжить;
		КонецЕсли;
		
		// При изменении реквизитов.
		Попытка
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(М.ПолноеИмя());
			СоответствиеУсловияПравила = МенеджерОбъекта.УсловияПравилаСобытий();
			Если Объект.ТипПравила = Перечисления.ТипыПравилСобытий.ИзменениеОбъекта 
				И СоответствиеУсловияПравила["СоответствиеИзменениеОбъекта"].Количество() > 0 Тогда
				Элементы.ПроверкаРеквизитовОбъектаИмяОбъекта.СписокВыбора.Добавить("Документ." + М.Имя, М.Синоним, , 
					БиблиотекаКартинок.Документ);
			ИначеЕсли Объект.ТипПравила = Перечисления.ТипыПравилСобытий.ПериодическоеСобытие 
				И СоответствиеУсловияПравила["СоответствиеПериодическоеСобытие"].Количество() > 0 Тогда
				Элементы.ПроверкаРеквизитовОбъектаИмяОбъекта.СписокВыбора.Добавить("Документ." + М.Имя, М.Синоним, , 
					БиблиотекаКартинок.Документ);
			ИначеЕсли Объект.ТипПравила = Перечисления.ТипыПравилСобытий.РасчетМетрик 
				И СоответствиеУсловияПравила["СоответствиеРасчетМетрик"].Количество() > 0 Тогда
				Элементы.РасчетМетрикИмяОбъекта.СписокВыбора.Добавить("Документ." + М.Имя, М.Синоним, , 
					БиблиотекаКартинок.Документ);
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		// Для произвольного алгоритма.
		Элементы.ПроизвольныйАлгоритмИмяОбъекта.СписокВыбора.Добавить("Документ." + М.Имя, М.Синоним, , 
			БиблиотекаКартинок.Документ);
		
	КонецЦикла;
	
	// Для произвольного алгоритма.
	Элементы.ПроизвольныйАлгоритмИмяОбъекта.СписокВыбора.Добавить("РегистрСведений.Характеристики", "Характеристики", ,
		БиблиотекаКартинок.РегистрСведений);
	
	Если ЗначениеЗаполнено(Объект.ПроверкаРеквизитовОбъектаИмяОбъекта) Тогда				
		ЗаполнитьУсловияПроверкиПоОбъекту(Объект.ПроверкаРеквизитовОбъектаИмяОбъекта);
	Иначе
		Объект.ПроверкаРеквизитовОбъектаИмяУсловия = "";				
	КонецЕсли;
		
КонецПроцедуры

// Процедура - Заполнить правило по умолчанию при создании правила.
//
&НаСервере
Процедура ЗаполнитьПравилоПоУмолчанию()
	
	Макет = Справочники.ПравилаСобытий.ПолучитьМакет("КодУсловияПоУмолчанию");
	Объект.КодУсловия = Макет.ПолучитьТекст();
	Объект.ПроверкаИспользуетСКД = Истина;
		
КонецПроцедуры	

&НаКлиенте
Процедура Действия1ДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	П = Новый Структура;
	П.Вставить("Ключ", 			ДанныеВыбора);
	П.Вставить("РежимВыбора", 	Истина);
	П.Вставить("ТипПравила", 	Объект.ТипПравила);
	П.Вставить("ТипУсловия", 	Объект.ТипУсловия);
	П.Вставить("ПолноеИмяОснования", Объект.ПроверкаРеквизитовОбъектаИмяОбъекта);
	П.Вставить("ИмяУсловия", 	Объект.ПроверкаРеквизитовОбъектаИмяУсловия);
	П.Вставить("РасчетМетрикИмяОбъекта", Объект.РасчетМетрикИмяОбъекта);
	
	ОткрытьФорму("Справочник.ДействияПравилСобытий.ФормаВыбора", П, Элемент);
	
КонецПроцедуры

#КонецОбласти