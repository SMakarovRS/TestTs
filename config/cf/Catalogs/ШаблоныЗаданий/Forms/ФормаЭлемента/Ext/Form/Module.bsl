
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
    Если Объект.Ссылка.Пустая() Тогда
        
		Пользователь 		= Пользователи.ТекущийПользователь();
		Объект.Организация 	= УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, 
            "ОсновнаяОрганизация");
		Объект.Процесс 		= УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, 
            "ОсновнойПроцесс");
		Если НЕ ЗначениеЗаполнено(Объект.Процесс) Тогда
			Объект.Процесс 	= Справочники.Процессы.Задача;
		КонецЕсли;
		Объект.Инициатор 	= Пользователь;
		Объект.КодОбработки = ЗаданияСервер.КодОбработкиШаблонаЗаданияПоУмолчанию();
		Объект.ВидимостьШаблона = Перечисления.ВидимостьШаблонов.Личный;
		Объект.ВладелецШаблона 	= Пользователь;
        Объект.ТекущийЭтап  = Справочники.ЭтапыПроцессов.Новый;
        
	КонецЕсли;                                   
	
	ОбновитьВидимость();
	ОбновитьДоступностьВидимостиШаблона();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОграничениеТипаКлиента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Попытка
		ОписаниеФорматированныйДокумент = ТекущийОбъект.ОписаниеХранилище.Получить();
	Исключение	
	    ЗаписьЖурналаРегистрации(НСтр("ru = 'ПриЧтенииНаСервере справочник ШаблоныЗаданий'"),
	       УровеньЖурналаРегистрации.Ошибка,,,
	       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;
	
	ОбновитьСписокТегов();
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ОписаниеХранилище = Новый ХранилищеЗначения(ОписаниеФорматированныйДокумент);
	ТекущийОбъект.Описание = ОписаниеФорматированныйДокумент.ПолучитьТекст();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АктивностьПриИзменении(Элемент)
	ОбновитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПроцессПриИзменении(Элемент)
	
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Теги") Тогда
		ДобавитьТегСервер(ВыбранноеЗначение);		
	КонецЕсли;
	Элемент.ОбновитьТекстРедактирования();
	
	ОбновитьСписокТегов();
	ТекущийЭлемент = Элементы.Теги;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьТегСервер(Текст);
		ОбновитьСписокТегов();
		ТекущийЭлемент = Элементы.Теги;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалениеТега(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
		
	ИндексСтроки = Сред(НавигационнаяСсылка, СтрДлина("ТегФормы") + 1);
	Объект.Теги.Удалить(ИндексСтроки - 1);	
	ОбновитьСписокТегов();	
	Модифицированность = Истина;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.Тема) Тогда
		Объект.Тема = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрочностьПриИзменении(Элемент)
	
	ОбновитьПриоритет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВлияниеПриИзменении(Элемент)
	
	ОбновитьПриоритет();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьОграничениеТипаКлиента();
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентноеЗаданиеИспользоватьПериодПриИзменении(Элемент)
	
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьШаблонаПриИзменении(Элемент)
	
	ОбновитьДоступностьВидимостиШаблона();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЧекЛист

&НаКлиенте
Процедура ЧекЛистПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Автор = ПользователиКлиент.АвторизованныйПользователь();
		Элемент.ТекущиеДанные.Вес 	= 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПослеУдаления(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьЗаголовокЧекЛистаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПодключитьОбработчикОжидания("ОбновитьЗаголовокЧекЛистаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЧекЛист.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные); 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаСтрокиЧекЛиста", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводСтроки(ОписаниеОповещения, ТекущиеДанные.Описание, НСтр("ru = 'Введите описание строки чек - листа'"),
		, Истина);
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Расписание(Команда)	
	Если Объект.Ссылка.Пустая() Тогда		
		ТекстВопроса =
			НСтр("ru = 'Данные еще не записаны. Указать расписание выполнения
                  |возможно только после записи данных.
                  |
                  |Данные будут записаны.'");
					   
		ОписаниеОповещения = Новый ОписаниеОповещения("РасписаниеВопрос",ЭтаФорма);			   
		Режим = РежимДиалогаВопрос.ОКОтмена;
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,Режим);
		Возврат;
	ИначеЕсли Модифицированность = Истина Тогда
		ТекстВопроса =
			НСтр("ru = 'Указать расписание выполнения
                  |возможно только после записи данных.
                  |
                  |Данные будут записаны.'");
					   
		ОписаниеОповещения = Новый ОписаниеОповещения("РасписаниеВопрос",ЭтаФорма);			   
		Режим = РежимДиалогаВопрос.ОКОтмена;
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,Режим);
		Возврат;		
	КонецЕсли;
	РасписаниеФрагмент();	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Запись:'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
		РасписаниеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеФрагмент()
	
	ИдентификаторРегламентногоЗадания = ПолучитьИдентификаторЗадания();	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ИдентификаторРегламентногоЗадания);
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры	
	
&НаКлиенте
Процедура РасписаниеЗавершение(Расписание, ДополнительныеПараметры) Экспорт
    
    Диалог = ДополнительныеПараметры.Диалог;
    
	ДиалогРасписание = Диалог.Расписание;
    УстановитьРасписание(ДиалогРасписание);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьВидимость()

	ОписаниеРасписания = ?(Объект.Активность, Строка(ПолучитьИдентификаторЗадания()), НСтр("ru = 'НЕ АКТИВНО'"));
	Элементы.Активность.ЦветТекстаЗаголовка = ?(Объект.Активность, WebЦвета.Зеленый, WebЦвета.Красный);	
	ОбновитьЗаголовокЧекЛиста();
	Элементы.РасписаниеСоздания.Видимость = Объект.ТипШаблона = Перечисления.ТипыШаблоновЗаданий.РегламентноеЗадание;
	Элементы.ОписаниеРасписания.Видимость = Элементы.РасписаниеСоздания.Видимость;
	Элементы.ДатаПоследнегоЗапуска.Видимость = Объект.ТипШаблона = Перечисления.ТипыШаблоновЗаданий.РегламентноеЗадание;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(БиблиотекаКартинок.сстИнформация);
	МассивСтрок.Добавить(" ");
	Если Объект.ТипШаблона = ПредопределенноеЗначение("Перечисление.ТипыШаблоновЗаданий.РучноеЗаполнение") Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Шаблон предназначен для выбора в документе ""Задание"" в качестве основы для заполнения'")));
	ИначеЕсли Объект.ТипШаблона = ПредопределенноеЗначение("Перечисление.ТипыШаблоновЗаданий.РегламентноеЗадание") Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Шаблон необходим для создания повторяющихся документов ""Задание"" по шаблону'")));
	КонецЕсли;
	Элементы.ПодсказкаТипаШаблона.Заголовок 			= Новый ФорматированнаяСтрока(МассивСтрок);
	Элементы.ПодсказкаТипаШаблона.Видимость 			= ЗначениеЗаполнено(Объект.ТипШаблона);
	Элементы.ГруппаРегламентноеЗаданияПериод.Видимость 	= Объект.ТипШаблона = Перечисления.ТипыШаблоновЗаданий.РегламентноеЗадание;
	Если Элементы.ГруппаРегламентноеЗаданияПериод.Видимость Тогда
		Элементы.РегламентноеЗаданиеПериод.Видимость 	= Объект.РегламентноеЗаданиеИспользоватьПериод;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокЧекЛиста()
	
	Элементы.ГруппаЧекЛист.Заголовок = НСтр("ru = 'Чек-лист'");
	Если Объект.ЧекЛист.Количество() > 0 Тогда
		Элементы.ГруппаЧекЛист.Заголовок = Элементы.ГруппаЧекЛист.Заголовок + " "
			+ СтрШаблон(НСтр("ru = '(%1 из %2)'"), 
                    Объект.ЧекЛист.НайтиСтроки(Новый Структура("Выполнено", Истина)).Количество(), 
                    Объект.ЧекЛист.Количество());
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокЧекЛистаКлиент()
	
	ОбновитьЗаголовокЧекЛиста();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписание(ДиалогРасписание)
	
	Об 					 = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.ШаблоныЗаданий"));
	Об.РасписаниеШаблона = Новый ХранилищеЗначения(ДиалогРасписание);
	Об.Записать();
	ЗначениеВРеквизитФормы(Об, "Объект");
	ОбновитьВидимость();
	Прочитать();

КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторЗадания()

	Зн = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.ШаблоныЗаданий"));
	РасписаниеВыполнения = Неопределено;
	Попытка
		РасписаниеВыполнения = Зн.РасписаниеШаблона.Получить();
	Исключение		
	    ЗаписьЖурналаРегистрации(НСтр("ru = 'ПолучитьИдентификаторЗадания справочник ШаблоныЗаданий'"),
	       УровеньЖурналаРегистрации.Ошибка,,,
	       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;
	
	Если РасписаниеВыполнения = Неопределено Тогда
		РасписаниеВыполнения = Новый РасписаниеРегламентногоЗадания();
	КонецЕсли;
	                             
	Возврат РасписаниеВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ТипШаблонаПриИзменении(Элемент)
	
	ОбновитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТегов()
	
	// Очистим старые теги.
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого СтрокаТегов Из Элементы.ВыбранныеТеги.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(СтрокаТегов);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
		
	// Вновь отобразим теги, которые есть в документе.
	ГруппаРодитель 		= Неопределено;
	НомерСтрокиГрупп	= 0;
	ТекущаяШирина		= 0;
	ШрифтПоУмолчанию 	= Новый Шрифт("ANSI моноширинный шрифт");
	Для Каждого Строки Из Объект.Теги Цикл
        
        Если НЕ ЗначениеЗаполнено(Строки.Тег) Тогда
        	Продолжить;
        КонецЕсли; 
        
        ЗначениеТега = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строки.Тег, "Наименование,ЦветФона,ЦветТекста");
        
		Если ГруппаРодитель = Неопределено ИЛИ ТекущаяШирина + СтрДлина(ЗначениеТега.Наименование) + 3 > 80 Тогда
			
			ГруппаРодитель 						= Элементы.Добавить("ГруппаТеговФормы" + НомерСтрокиГрупп, Тип("ГруппаФормы"), 
                Элементы.ВыбранныеТеги);
			ГруппаРодитель.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаРодитель.Отображение 			= ОтображениеОбычнойГруппы.Нет;
			ГруппаРодитель.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаРодитель.ОтображатьЗаголовок 	= Ложь;
			НомерСтрокиГрупп 					= НомерСтрокиГрупп + 3;
			ТекущаяШирина 						= 0;
			
		КонецЕсли;
        
        ЦветФона   = ?(ПустаяСтрока(ЗначениеТега.ЦветФона), WebЦвета.Белый,
            РаботаСЦветомКлиентСервер.HexВЦвет(ЗначениеТега.ЦветФона));
        ЦветТекста = ?(ПустаяСтрока(ЗначениеТега.ЦветТекста), WebЦвета.Черный,
            РаботаСЦветомКлиентСервер.HexВЦвет(ЗначениеТега.ЦветТекста));
        
		Поле             = Элементы.Добавить("ТегФормы" + Формат(Строки.НомерСтроки, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="), 
            Тип("ДекорацияФормы"), ГруппаРодитель);
		МассивСтрок      = Новый Массив;                                                       		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" " + ЗначениеТега.Наименование + " ", ШрифтПоУмолчанию));
        МассивСтрок.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.УдалитьТег,,,,"ТегФормы" 
            + Формат(Строки.НомерСтроки, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=")));
		Поле.Заголовок   = Новый ФорматированнаяСтрока(МассивСтрок);
        Поле.ЦветФона    = ЦветФона;
        Поле.ЦветТекста  = ЦветТекста;
		Поле.РастягиватьПоГоризонтали = Ложь;
		Поле.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_УдалениеТега");
		ТекущаяШирина    = ТекущаяШирина + СтрДлина(ЗначениеТега.Наименование) + 3;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТегСервер(НаименованиеТега)
	
	Результат = Справочники.Теги.НайтиПоНаименованию(НаименованиеТега, Истина);
	
	Если Результат.Пустая() Тогда
		
		ТегОбъект 				= Справочники.Теги.СоздатьЭлемент();
		ТегОбъект.Наименование 	= НаименованиеТега;
		ТегОбъект.Записать();
		Результат				= ТегОбъект.Ссылка;
		
	КонецЕсли;
	
	НайденныеСтроки = Объект.Теги.НайтиСтроки(Новый Структура("Тег", Результат));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
				
		// Переместим строку в конец.
		Объект.Теги.Удалить(НайденныеСтроки[0]);
		
	КонецЕсли;
	
	// Добавим в конец.
	НоваяСтрока 	= Объект.Теги.Добавить();
	НоваяСтрока.Тег = Результат;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПриоритет()
	
	Объект.Приоритет = ЗаданияСервер.РассчитатьПриоритет(Объект.Влияние, Объект.Срочность);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОграничениеТипаКлиента()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ПотенциальныеКлиенты"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Сотрудники"));
	Элементы.Клиент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(200));
	Элементы.Клиент.КнопкаВыбора = Истина;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьВидимостиШаблона()
	
	Если Объект.ВидимостьШаблона = Перечисления.ВидимостьШаблонов.Личный Тогда
		
		Элементы.ВладелецШаблона.Видимость = Истина;
		Элементы.ВладелецШаблона.Доступность = Истина;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
		Элементы.ВладелецШаблона.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(200));
		Элементы.ВладелецШаблона.КнопкаВыбора = Истина;	
		
		Если Объект.ВладелецШаблона <> Пользователи.ТекущийПользователь() Тогда
			Объект.ВладелецШаблона = Пользователи.ТекущийПользователь();
		КонецЕсли;
		Элементы.ВладелецШаблона.Доступность = Ложь;
		
	ИначеЕсли Объект.ВидимостьШаблона = Перечисления.ВидимостьШаблонов.ГруппыПользователей Тогда
		
		Элементы.ВладелецШаблона.Видимость = Истина;
		Элементы.ВладелецШаблона.Доступность = Истина;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.ГруппыПользователей"));
		Элементы.ВладелецШаблона.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(200));
		Элементы.ВладелецШаблона.КнопкаВыбора = Истина;	
		
	Иначе
		
		Элементы.ВладелецШаблона.Доступность = Истина;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.ГруппыПользователей"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
		Элементы.ВладелецШаблона.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(200));
		Элементы.ВладелецШаблона.КнопкаВыбора = Истина;	
		Элементы.ВладелецШаблона.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтрокиЧекЛиста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ТекущиеДанные.Описание = Результат;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти