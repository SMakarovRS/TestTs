
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьРеквизитыПоПроекту();
	
	СписокВыбора = Элементы.ТабличноеПолеПредшественникиТипСвязи.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(ПолучитьПредставлениеВидСвязиДляProject(0));
	СписокВыбора.Добавить(ПолучитьПредставлениеВидСвязиДляProject(1));
	СписокВыбора.Добавить(ПолучитьПредставлениеВидСвязиДляProject(2));
	СписокВыбора.Добавить(ПолучитьПредставлениеВидСвязиДляProject(3));
	
	МассивНазванийЗадач = Новый Массив;
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Наименование КАК Наименование,
		|	ПроектныеЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.ПометкаУдаления = ЛОЖЬ
		|	И ПроектныеЗадачи.Проект = &Проект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроектныеЗадачи.Порядок";
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивНазванийЗадач.Добавить(Выборка.Наименование);
	КонецЦикла;
	Элементы.ТабличноеПолеПредшественникиНазваниеЗадачи.СписокВыбора.ЗагрузитьЗначения(МассивНазванийЗадач);	
	ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СписокВыбора = Элементы.ТабличноеПолеРесурсовЗадачиНазваниеРесурса.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого СтрокаРесурса из ТабличноеПолеРесурсы Цикл
		СтрокаСписка = СписокВыбора.Добавить(СтрокаРесурса.GUID_Ресурса, СтрокаРесурса.НазваниеРесурса);		
		Если СтрокаРесурса.ТипРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой") Тогда
			СтрокаСписка.Картинка = БиблиотекаКартинок.Пользователь;
		Иначе
			СтрокаСписка.Картинка = БиблиотекаКартинок.Справочник;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаПлан);
	ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаФакт);
	ЗаполнитьСписокВыбораДляДатыОкончания(Элементы.ДатаЗавершенияПлан);
	ЗаполнитьСписокВыбораДляДатыОкончания(Элементы.ДатаЗавершенияФакт);
	
	ВычислитьДлительностьЗадачи();
	ОбновлениеОтображенияВФорме();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПланПриИзменении(Элемент)
	
	ВыбранноеЗначение = Объект.ДатаНачалаПлан;
		
	Если ЗначениеЗаполнено(Объект.ДатаНачалаПлан) Тогда
		ЗаполнитьСписокВыбораДляДатыНачала(Элемент);
		Если Длительность = 0 Тогда
			Объект.ДатаЗавершенияПлан = Объект.ДатаНачалаПлан;
		ИначеЕсли ЗначениеЗаполнено(Объект.ДатаЗавершенияПлан) Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(Новый ОписаниеОповещения("ИзменениеДатыЗавершения", ЭтаФорма),
				НСтр("ru = 'Изменить дату завершения?'"), Режим, 0);
		Иначе
			Объект.ДатаЗавершенияПлан = СкорректироватьДатуОкончания(РасчитатьОкончание(Объект.ДатаНачалаПлан, Длительность));
			ЗаполнитьСписокВыбораДляДатыОкончания(Элементы.ДатаЗавершенияПлан);
		КонецЕсли;
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПланОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаПлан) Тогда
		Объект.ДатаНачалаПлан = СкорректироватьДатуНачала(ВыбранноеЗначение);
		
		ЗаполнитьСписокВыбораДляДатыНачала(Элемент);
		
	    Если Длительность = 0 Тогда
			Объект.ДатаЗавершенияПлан = Объект.ДатаНачалаПлан;
		ИначеЕсли ЗначениеЗаполнено(Объект.ДатаЗавершенияПлан) Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(Новый ОписаниеОповещения("ИзменениеДатыЗавершения", ЭтаФорма),
				НСтр("ru = 'Изменить дату завершения?'"), Режим, 0);
		Иначе
			Объект.ДатаЗавершенияПлан = СкорректироватьДатуОкончания(РасчитатьОкончание(Объект.ДатаНачалаПлан, Длительность));
			ЗаполнитьСписокВыбораДляДатыОкончания(Элементы.ДатаЗавершенияПлан);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеДатыЗавершения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ДатаЗавершенияПлан = СкорректироватьДатуОкончания(РасчитатьОкончание(Объект.ДатаНачалаПлан, Длительность));
		ЗаполнитьСписокВыбораДляДатыОкончания(Элементы.ДатаЗавершенияПлан);
	Иначе 
		Длительность = РасчитатьРазницуМеждуДатами(Объект.ДатаНачалаПлан, Объект.ДатаЗавершенияПлан);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗавершенияПланОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаЗавершенияПлан = СкорректироватьДатуОкончания(ВыбранноеЗначение, Ложь);
	ЗаполнитьСписокВыбораДляДатыОкончания(Элемент);
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаПлан) Тогда
		Объект.ДатаНачалаПлан = НачалоРабочегоДня(НачалоДня(Объект.ДатаЗавершенияПлан));
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаПлан);
	КонецЕсли;
	
	Если Объект.ДатаНачалаПлан >  Объект.ДатаЗавершенияПлан Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Плановая дата завершения задачи должна быть больше, чем дата начала'"));
		Объект.ДатаЗавершенияПлан = Объект.ДатаНачалаПлан + 3600;
		ЗаполнитьСписокВыбораДляДатыОкончания(Элемент);
		Возврат;
	Конецесли;
	
	Длительность = РасчитатьРазницуМеждуДатами(Объект.ДатаНачалаПлан, Объект.ДатаЗавершенияПлан);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗавершенияПланПриИзменении(Элемент)
	
	Объект.ДатаЗавершенияПлан = СкорректироватьДатуОкончания(Объект.ДатаЗавершенияПлан, Ложь);
	ЗаполнитьСписокВыбораДляДатыОкончания(Элемент);
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаПлан) Тогда
		Объект.ДатаНачалаПлан = НачалоРабочегоДня(НачалоДня(Объект.ДатаЗавершенияПлан));
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаПлан);
	КонецЕсли;
	
	Если Объект.ДатаНачалаПлан >  Объект.ДатаЗавершенияПлан Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Плановая дата завершения задачи должна быть больше, чем дата начала'"));
		Объект.ДатаЗавершенияПлан = Объект.ДатаНачалаПлан + 3600;
		ЗаполнитьСписокВыбораДляДатыОкончания(Элемент);
		Возврат;
	Конецесли;
	
	Длительность = РасчитатьРазницуМеждуДатами(Объект.ДатаНачалаПлан, Объект.ДатаЗавершенияПлан);
	
КонецПроцедуры

// факт дата начала

&НаКлиенте
Процедура ДатаНачалаФактПриИзменении(Элемент)
	ЗаполнитьСписокВыбораДляДатыНачала(Элемент);
	ВычислитьДлительностьЗадачи();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаФактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачалаФакт = СкорректироватьДатуНачала(ВыбранноеЗначение);
	ЗаполнитьСписокВыбораДляДатыНачала(Элемент);
	ВычислитьДлительностьЗадачи();
	
КонецПроцедуры

// факт дата завершения

&НаКлиенте
Процедура ДатаЗавершенияФактПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораДляДатыНачала(Элемент);
	Если ЗначениеЗаполнено(Объект.ДатаЗавершенияФакт) и Не ЗначениеЗаполнено(Объект.ДатаНачалаФакт) Тогда
		Если Длительность = 0 Тогда
			Объект.ДатаНачалаФакт = Объект.ДатаЗавершенияФакт;
		Иначе
			Объект.ДатаНачалаФакт = СкорректироватьДатуНачала(РасчитатьОкончание(Объект.ДатаЗавершенияФакт, -Длительность));
		КонецЕсли;
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаФакт);
	КонецЕсли;
	
	ВычислитьДлительностьЗадачи();
	Если ЗначениеЗаполнено(Объект.ДатаЗавершенияФакт) Тогда
		Объект.ПроцентЗавершения = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗавершенияФактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаЗавершенияФакт = СкорректироватьДатуОкончания(ВыбранноеЗначение, Ложь);
	ЗаполнитьСписокВыбораДляДатыОкончания(Элемент);
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаФакт) Тогда
		Если Длительность = 0 Тогда
			Объект.ДатаНачалаФакт = Объект.ДатаЗавершенияФакт;
		Иначе
			Объект.ДатаНачалаФакт = НачалоРабочегоДня(НачалоДня(Объект.ДатаЗавершенияФакт));
		КонецЕсли;
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаФакт);
	КонецЕсли;
	
	Если Объект.ДатаНачалаФакт > Объект.ДатаЗавершенияФакт Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Плановая дата завершения задачи должна быть больше, чем дата начала'"));
		Объект.ДатаЗавершенияФакт = Объект.ДатаНачалаФакт;
		ЗаполнитьСписокВыбораДляДатыОкончания(Элемент);
		Возврат;
	Конецесли;
	
	ВычислитьДлительностьЗадачи();
	
	Если ЗначениеЗаполнено(Объект.ДатаЗавершенияФакт) Тогда
		Объект.ПроцентЗавершения = 100;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДлительностьПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаПлан) Тогда
		Объект.ДатаНачалаПлан = СкорректироватьДатуНачала(НачалоДня(ТекущаяДата()));
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаПлан);
	КонецЕсли;
	
	Если Длительность = 0 Тогда
		Объект.ДатаЗавершенияПлан = Объект.ДатаНачалаПлан;
	Иначе
		Объект.ДатаЗавершенияПлан = СкорректироватьДатуОкончания(РасчитатьОкончание(Объект.ДатаНачалаПлан, Длительность));
	КонецЕсли;
	ЗаполнитьСписокВыбораДляДатыОкончания(Элементы.ДатаЗавершенияПлан);
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьСписокВыбораДляДатыНачала(Элемент)
	
	Элемент.СписокВыбора.Очистить();
	пДата = ЭтаФорма[Элемент.Имя];
	Если Не ЗначениеЗаполнено(пДата) Тогда
		пДата = Объект.ДатаНачалаПлан;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пДата) Тогда
		пДата = ТекущаяДата();
	КонецЕсли;
	
	НачалоРабочегоДняДляСпискаВыбора = НачалоДня(пДата) + Час(НачалоРабочегоДня) * 60 * 60
		+ Минута(НачалоРабочегоДня) * 60;
	ОкончаниеРабочегоДня = НачалоДня(пДата) + (Час(НачалоРабочегоДня) 
		+ КоличествоРабочихЧасовВДне) * 60 * 60 + Минута(НачалоРабочегоДня) * 60;
	а = 0;
	Пока Истина Цикл
		
		ВремяСписка = НачалоРабочегоДняДляСпискаВыбора + а * 60 * 60;
		
		Если НачалоЧаса(ВремяСписка) >= НачалоЧаса(ОкончаниеРабочегоДня) Тогда
			Прервать;
		КонецЕсли;
		
		Элемент.СписокВыбора.Добавить(ВремяСписка, Формат(ВремяСписка, "ДФ='дд.ММ.гг ЧЧ:мм'"));
		а = а + 1;
		
	КонецЦикла;
	
	Если Элемент.Имя = "ДатаНачалаПлан" и Не ЗначениеЗаполнено(Объект.ДатаНачалаФакт) Тогда 
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаФакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьСписокВыбораДляДатыОкончания(Элемент)
	
	Элемент.СписокВыбора.Очистить();
	пДата = ЭтаФорма[Элемент.Имя];
	Если Не ЗначениеЗаполнено(пДата) Тогда
		пДата = Объект.ДатаЗавершенияПлан;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пДата) Тогда
		пДата = ТекущаяДата();
	КонецЕсли;
	НачалоРабочегоДняДляСпискаВыбора = НачалоДня(пДата)+(Час(НачалоРабочегоДня) + 1) * 60 * 60
		+ Минута(НачалоРабочегоДня) * 60;
	ОкончаниеРабочегоДня = НачалоДня(пДата) + (Час(НачалоРабочегоДня) 
		+ КоличествоРабочихЧасовВДне) * 60 * 60 + Минута(НачалоРабочегоДня) * 60;
	а = 0;
	Пока Истина Цикл
		
		ВремяСписка = НачалоРабочегоДняДляСпискаВыбора + а*60*60;
		
		Если НачалоЧаса(ВремяСписка) > НачалоЧаса(ОкончаниеРабочегоДня) Тогда
			Прервать;
		КонецЕсли;
		
		Элемент.СписокВыбора.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
		а = а + 1;
	КонецЦикла; 
	
	Если Элемент.Имя = "ДатаЗавершенияПлан" и Не ЗначениеЗаполнено(Объект.ДатаЗавершенияФакт) Тогда 
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаЗавершенияФакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаВремени(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ЭтаФорма[ДополнительныеПараметры.ПутьКДанным] = РезультатВыбора.Значение;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРесурсы

&НаКлиенте
Процедура ТабличноеПолеРесурсовЗадачиНазваниеРесурсаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТабличноеПолеРесурсовЗадачи.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.НазваниеРесурса) Тогда
		
		ТекущаяСтрока.GUID_Ресурса = ТекущаяСтрока.НазваниеРесурса;
		СтрокаВОбщейТаблицеРесурсов = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", 
			ТекущаяСтрока.GUID_Ресурса))[0];
		ТекущаяСтрока.НазваниеРесурса = СтрокаВОбщейТаблицеРесурсов.НазваниеРесурса;
		ТекущаяСтрока.КраткоеНазвание = СтрокаВОбщейТаблицеРесурсов.КраткоеНазвание;
		ТекущаяСтрока.ТипРесурса = СтрокаВОбщейТаблицеРесурсов.ТипРесурса;
		Если ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", 
			ТекущаяСтрока.GUID_Ресурса))[0].ТипРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой")
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Единицы) Тогда
			ТекущаяСтрока.Единицы = 100;
		Иначе
			ТекущаяСтрока.Единицы = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРесурсовЗадачиНазваниеРесурсаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекущаяСтрока = Элементы.ТабличноеПолеРесурсовЗадачи.ТекущиеДанные;
		ТекущаяСтрока.GUID_Ресурса = ВыбранноеЗначение;
			
		СтрокаВОбщейТаблицеРесурсов = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", 
			ТекущаяСтрока.GUID_Ресурса))[0];
		ТекущаяСтрока.НазваниеРесурса = СтрокаВОбщейТаблицеРесурсов.НазваниеРесурса;
		
		ТекущаяСтрока.КраткоеНазвание = СтрокаВОбщейТаблицеРесурсов.КраткоеНазвание;
		ТекущаяСтрока.ТипРесурса = СтрокаВОбщейТаблицеРесурсов.ТипРесурса;
		Если ТекущаяСтрока.ТипРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой") 
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Единицы) Тогда
			ТекущаяСтрока.Единицы = 100;
		Иначе
			ТекущаяСтрока.Единицы = 1;
		КонецЕсли;
		//Элемент.Значение = ТекущаяСтрока.НазваниеРесурса;
		Элементы.ТабличноеПолеРесурсовЗадачи.ТекущийЭлемент = Элементы.ТабличноеПолеРесурсовЗадачиЕдиницы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРесурсовЗадачиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//ОбновлениеОтображенияВФорме();
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРесурсовЗадачиПослеУдаления(Элемент)
	
	ОбновлениеОтображенияВФорме();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредшественники

&НаКлиенте
Процедура ТабличноеПолеПредшественникиНазваниеЗадачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СписокВыбора = Элементы.ТабличноеПолеПредшественникиНазваниеЗадачи.СписокВыбора;	
	ЭлементСписка = СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		
		// Проверка на зацикливание
		Если ВладелецФормы.ПроверкаЗацикливанияСвязей(НомерСтроки, СписокВыбора.Индекс(ЭлементСписка) + 3) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Указанная связь невозможна, так как она может привести к циклической зависимости между указанными задачами'"));
			Элементы.ТабличноеПолеПредшественники.ЗакончитьРедактированиеСтроки(Истина);
			Возврат;
		КонецЕсли;
		
		Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.Начало = СписокВыбора.Индекс(ЭлементСписка) + 1;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПредшественникиНачалоПриИзменении(Элемент)
	ВыбранноеЗначение = Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.Начало;
	
	Если ВыбранноеЗначение > ПоследняяСтрока - 2 Тогда
		ВыбранноеЗначение = ПоследняяСтрока - 2;
	КонецЕсли;
	
	Если ВыбранноеЗначение <= 0 Тогда
		ВыбранноеЗначение = 1;
	КонецЕсли;
	
	Если ВладелецФормы.ПроверкаЗацикливанияСвязей(НомерСтроки, ВыбранноеЗначение + 2) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Указанная связь невозможна, так как она может привести к циклической зависимости между указанными задачами'"));		
		СтандартнаяОбработка = ложь;
		Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.Начало = пНачальныйНомерСтроки;
		Возврат;
	КонецЕсли;
	                                       
	Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.Начало = ВыбранноеЗначение;
	
	СписокВыбора = Элементы.ТабличноеПолеПредшественникиНазваниеЗадачи.СписокВыбора;	
	ЭлементСписка = СписокВыбора.Получить(ВыбранноеЗначение-1);
	Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.НазваниеЗадачи = ЭлементСписка.Значение;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПредшественникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//ОбновлениеОтображенияВФорме();
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПредшественникиПослеУдаления(Элемент)
	
	ОбновлениеОтображенияВФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПредшественникиПередНачаломИзменения(Элемент, Отказ)
	
	пНачальныйНомерСтроки = Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.Начало;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПредшественникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не Копирование Тогда
		Если Не ЗначениеЗаполнено(Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.ВидСвязи) Тогда
			Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.ВидСвязи = ПолучитьПредставлениеВидСвязиДляProjectНаКлиенте(0);
		КонецЕсли;
	Конецесли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрименитьИЗакрыть(Команда)
	
	Если Элементы.Дополнительно.Доступность Тогда
		Если Объект.ВидОграничения = ВидыОграничений.КМР или 
			 Объект.ВидОграничения = ВидыОграничений.КМП Тогда
			 Объект.ДатаОграничения = Дата('00010101');
		 ИначеЕсли (ВидОграничения = ВидыОграничений.ННП или 
			 Объект.ВидОграничения = ВидыОграничений.ННР или 
			 Объект.ВидОграничения = ВидыОграничений.ФН) 
			 и Не ЗначениеЗаполнено(Объект.ДатаОграничения) Тогда
			 Объект.ДатаОграничения = Объект.ДатаНачалаПлан;
		ИначеЕсли Не ЗначениеЗаполнено(ДатаОграничения) Тогда
			 Объект.ДатаОграничения = Объект.ДатаЗавершенияПлан;
		КонецЕсли;
	КонецЕсли;
	
	Закрыть(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновлениеОтображенияВФорме()
	
	Элементы.Предшественники.Заголовок = НСтр("ru = 'Предшественники '") 
		+ ?(ТабличноеПолеПредшественники.Количество() > 0, "("+ТабличноеПолеПредшественники.Количество()+")", "");
	Элементы.Ресурсы.Заголовок = НСтр("ru = 'Ресурсы '") 
		+ ?(ТабличноеПолеРесурсовЗадачи.Количество()>0, "("+ТабличноеПолеРесурсовЗадачи.Количество()+")", "");
	
КонецПроцедуры

&НаКлиенте
Функция СкорректироватьДатуНачала(Знач пДата)
	
	Если Час(пДата) < Час(НачалоРабочегоДня) Тогда
		Возврат НачалоДня(пДата) + Час(НачалоРабочегоДня) * 3600
			+ Минута(НачалоРабочегоДня)*60;
	ИначеЕсли Час(пДата) >= Час(НачалоРабочегоДня) + КоличествоРабочихЧасовВДне Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + 24 * 3600 + Час(НачалоРабочегоДня) * 3600
			+ Минута(НачалоРабочегоДня)*60, Ложь);
	Иначе
		Возврат ВернутьДатуСУчетомВыходных(пДата, Ложь);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СкорректироватьДатуОкончания(Знач пДата, Знач СдвигатьНазад = Истина)
	
	Если Час(пДата) <= Час(НачалоРабочегоДня) и СдвигатьНазад = Истина Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) - 24 * 3600 
			+ (Час(НачалоРабочегоДня) + КоличествоРабочихЧасовВДне) * 3600
			+ Минута(НачалоРабочегоДня) * 60, Истина);
	ИначеЕсли Час(пДата) <= Час(НачалоРабочегоДня) и СдвигатьНазад = Ложь Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) 
			+ (Час(НачалоРабочегоДня) + КоличествоРабочихЧасовВДне) * 3600
			+ Минута(НачалоРабочегоДня) * 60, Истина);
	ИначеЕсли Час(пДата) > Час(НачалоРабочегоДня) + КоличествоРабочихЧасовВДне 
		И СдвигатьНазад = Ложь Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + 24 * 3600 
			+ (Час(НачалоРабочегоДня) + КоличествоРабочихЧасовВДне) * 3600
			+ Минута(НачалоРабочегоДня) * 60, Ложь);
	ИначеЕсли Час(пДата) > Час(НачалоРабочегоДня) + КоличествоРабочихЧасовВДне 
		И СдвигатьНазад = Истина Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) 
			+ (Час(НачалоРабочегоДня) + КоличествоРабочихЧасовВДне) * 3600 
			+ Минута(НачалоРабочегоДня) * 60, Ложь);
	Иначе
		Возврат ВернутьДатуСУчетомВыходных(пДата, СдвигатьНазад);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ВернутьДатуСУчетомВыходных(Знач пДата, Знач СдвигатьНазад = Истина)
	
	Если СдвигатьНазад = Истина Тогда
		Пока (ДеньНедели(пДата) = 6 И НЕ СубботаРабочий) 
			ИЛИ (ДеньНедели(пДата) = 7 И НЕ ВоскресеньеРабочий) Цикл
			пДата = пДата - (3600 * 24);
		КонецЦикла;
	Иначе
		Пока (ДеньНедели(пДата) = 6 И НЕ СубботаРабочий) 
			ИЛИ (ДеньНедели(пДата) = 7 И НЕ ВоскресеньеРабочий) Цикл
			пДата = пДата + (3600 * 24);
		КонецЦикла;
	КонецЕсли;
	
	Возврат пДата;
	
КонецФункции

&НаКлиенте
Функция РасчитатьРазницуМеждуДатами(Знач пНачало, Знач пОкончание) Экспорт 
	Перем Начало, Окончание;
	Начало = пНачало;
	Окончание = пОкончание;
	
	пДлительность = 0;
	Пока Начало<Окончание Цикл
		Если Окончание - Начало >= (3600 * 24) Тогда
			пДлительность = пДлительность + 1;
		ИначеЕсли Окончание - Начало >=(3600 * КоличествоРабочихЧасовВДне) Тогда
			Если НЕ(Час(Окончание) <= Час(НачалоРабочегоДня) 
				ИЛИ Час(Начало) >= Час(НачалоРабочегоДня)+КоличествоРабочихЧасовВДне) Тогда
				пДлительность = пДлительность + 1;
			КонецЕсли;
		Иначе
			// Дробная часть будет в часах //КоличествоРабочихЧасовВДне);
			пДлительность = пДлительность + Окр((Окончание - Начало) / (3600 * 10), 1);
		КонецЕсли;
		
		Начало = Начало + (3600 * 24);
		
		Начало = ВернутьДатуСУчетомВыходных(Начало, Ложь);
		
	КонецЦикла;
	
	Возврат пДлительность;
	
КонецФункции

&НаКлиенте
Функция РасчитатьОкончание(Знач Начало, Знач перемДлительность) Экспорт
	
	Счетчик = перемДлительность;
	Окончание = Начало;
	Если перемДлительность >= 0 Тогда
		Пока Счетчик > 0 Цикл
			
			Если Счетчик >= КоличествоРабочихЧасовВДне/10 Тогда
				Окончание = Окончание + (3600 * 24);
			Иначе
				//Дробная часть будут часы //(3600 * КоличествоРабочихЧасовВДне)*Счетчик;
				Окончание = Окончание + (3600 * Счетчик * 10);
			КонецЕсли;
			
			Пока (ДеньНедели(Окончание)=7 И НЕ ВоскресеньеРабочий) 
				ИЛИ ((ДеньНедели(Окончание)=6 И НЕ СубботаРабочий) И Час(Окончание)>0) Цикл
				Окончание = Окончание + (3600 * 24);
			КонецЦикла;
			
			Счетчик = Счетчик - 1;
		КонецЦикла;
	Иначе
		Пока Счетчик < 0 Цикл
			
			Если Счетчик <= -КоличествоРабочихЧасовВДне / 10 Тогда
				Окончание = Окончание - (3600 * 24);
			Иначе
				
				Пока Счетчик < 0 Цикл
					Если Час(Окончание - 3600) >= Час(НачалоРабочегоДня) 
						И Час(Окончание - 3600) < Час(НачалоРабочегоДня) + КоличествоРабочихЧасовВДне Тогда
						Окончание = Окончание - 3600;
						
					Иначе
						//Дробная часть будут часы //(3600 * 24)*Счетчик;
						Окончание = НачалоДня(Окончание - 24 * 3600) + (Час(НачалоРабочегоДня) - 1) * 3600 
							+ Минута(НачалоРабочегоДня) * 3600;
						
					КонецЕсли;
					Счетчик = Счетчик + 0.1;
					
				КонецЦикла;
				
				
			КонецЕсли;
			
			Пока (ДеньНедели(Окончание)=7 И НЕ ВоскресеньеРабочий) 
				ИЛИ ((ДеньНедели(Окончание)=6 И НЕ СубботаРабочий) И Час(Окончание)>0) Цикл
				
				Окончание = Окончание - (3600 * 24);
				
			КонецЦикла;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Окончание;
КонецФункции

&НаКлиенте
Процедура ВычислитьДлительностьЗадачи()
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаФакт) И ЗначениеЗаполнено(Объект.ДатаЗавершенияФакт) Тогда
		ДлительностьФакт = РасчитатьРазницуМеждуДатами(Объект.ДатаНачалаФакт, Объект.ДатаЗавершенияФакт);
	Иначе
		ДлительностьФакт = 0; 
	КонецЕсли;
	
	Длительность = РасчитатьРазницуМеждуДатами(Объект.ДатаНачалаПлан, Объект.ДатаЗавершенияПлан);
	
КонецПроцедуры

&НаКлиенте
Функция НачалоРабочегоДня(пДата)
	
	Если Час(пДата) < Час(НачалоРабочегоДня) + КоличествоРабочихЧасовВДне Тогда
		Возврат НачалоДня(пДата) + Час(НачалоРабочегоДня) * 3600 + Минута(НачалоРабочегоДня) * 60;
	Иначе
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + 24 * 3600 + Час(НачалоРабочегоДня) * 3600 
			+ Минута(НачалоРабочегоДня) * 60, Ложь);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеВидСвязиДляProject(Знач ВидСвязи) Экспорт
	
	Если ВидСвязи = 1 Тогда
		Возврат "Окончание-Окончание";
	ИначеЕсли ВидСвязи = 2 Тогда
		Возврат "Начало-Окончание";
	ИначеЕсли ВидСвязи = 3 Тогда
		Возврат "Начало-Начало";
	Иначе
		Возврат "Окончание-Начало";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеВидСвязиДляProjectНаКлиенте(Знач ВидСвязи) Экспорт
	
	Если ВидСвязи = 1 Тогда
		Возврат "Окончание-Окончание";
	ИначеЕсли ВидСвязи = 2 Тогда
		Возврат "Начало-Окончание";
	ИначеЕсли ВидСвязи = 3 Тогда
		Возврат "Начало-Начало";
	Иначе
		Возврат "Окончание-Начало";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СоответствиеСтрокРесурсовПоGUIDамПолучить(Знач GUID_Ресурса)
	
	МассивНайденныхСтрок = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", GUID_Ресурса));
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		Возврат МассивНайденныхСтрок[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыПоПроекту()
	
	// Все ресурсы
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.РесурсыПроектов КАК РесурсыПроектов
		|ГДЕ
		|	РесурсыПроектов.Проект = &Проект
		|
		|УПОРЯДОЧИТЬ ПО
		|	РесурсыПроектов.НомерСтрокиЗаписи";
	
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТабличноеПолеРесурсы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	// Настройки проекта
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.НастройкиПроектов КАК НастройкиПроектов
		|ГДЕ
		|	НастройкиПроектов.Проект = &Проект";
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачалоРабочегоДня = Выборка.НачалоРабочегоДня;
		СубботаРабочий = Выборка.СубботаРабочий;
		ВоскресеньеРабочий = Выборка.ВоскресеньеРабочий;
		КоличествоРабочихЧасовВДне = Выборка.КоличествоРабочихЧасовВДне;
	КонецЦикла;
	
	// Ресурсы задачи
	НаборТаблицаРесурсов = РегистрыСведений.РесурсыПроектныхЗадач.СоздатьНаборЗаписей();
   	НаборТаблицаРесурсов.Отбор.ПроектнаяЗадача.Установить(Объект.Ссылка);
   	НаборТаблицаРесурсов.Прочитать();
	пТаблицаРесурсовЗадачи = НаборТаблицаРесурсов.Выгрузить(, "GUID_Ресурса, Единицы, НазваниеРесурса");			
	Для Каждого СтрокаРесурсовЗадачи Из пТаблицаРесурсовЗадачи Цикл
		Если ЗначениеЗаполнено(СтрокаРесурсовЗадачи.GUID_Ресурса) Тогда
			СтрокаТаблицыРесурсов = СоответствиеСтрокРесурсовПоGUIDамПолучить(СтрокаРесурсовЗадачи.GUID_Ресурса);
			Если НЕ СтрокаТаблицыРесурсов = Неопределено Тогда
				НоваяСтрока 					= ТабличноеПолеРесурсовЗадачи.Добавить();
				НоваяСтрока.GUID_Ресурса 		= СтрокаРесурсовЗадачи.GUID_Ресурса;
				НоваяСтрока.НазваниеРесурса 	= СтрокаТаблицыРесурсов.НазваниеРесурса;
				НоваяСтрока.КраткоеНазвание 	= СтрокаТаблицыРесурсов.КраткоеНазвание;
				НоваяСтрока.Единицы 			= СтрокаРесурсовЗадачи.Единицы;
				НоваяСтрока.ТипРесурса 			= СтрокаТаблицыРесурсов.ТипРесурса;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьУправлениеПроектамиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Проект", Объект.Проект);
	Форма = ПолучитьФорму("Отчет.УправлениеПроектами.Форма.ФормаУправляемая", ПараметрыФормы, , Объект.Проект);
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
	Иначе
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

