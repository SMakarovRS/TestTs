
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Область БСП_ПриСозданииНаСервере
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	#КонецОбласти
	
	ДатаТарифов = КонецДня(ТекущаяДата());
	ОбновитьОтборы();
	ОбновитьЗаголовки();
	УстановитьУсловноеОформлениеОтклонений();
	
	ЗаданияСервер.УстановитьШагКорректировкиВеса(ШагКорректировкиВеса);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
    
	ДЗ = РеквизитФормыВЗначение("Компетенции", Тип("ДеревоЗначений"));
	СЛС.ПрочитатьИерархическоеДерево(ДЗ, Объект.Компетенции, "Компетенции", "Компетенция");
	ЗначениеВРеквизитФормы(ДЗ, "Компетенции");
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Документ.УстановкаЦенУслуг"
		ИЛИ ИмяСобытия = "Документ.ПричиныОтклоненияОтГрафика" Тогда
		ОбновитьЗаголовки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
	// Записываем дерево.
	ДЗ = РеквизитФормыВЗначение("Компетенции", Тип("ДеревоЗначений"));
	СЛС.ЗаписатьИерархическоеДерево(ТекущийОбъект.Компетенции, ДЗ, "Компетенция");
    
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьОтборы();
	ОбновитьЗаголовки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВесРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ШагКорректировкиВеса > 1 Тогда		
		
		СтандартнаяОбработка = Ложь;
		Если Направление = 1 Тогда
			Объект.Вес = Объект.Вес + ШагКорректировкиВеса;
		Иначе
			Объект.Вес = Объект.Вес - ШагКорректировкиВеса;
		КонецЕсли;	
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваКомпетенции

&НаКлиенте
Процедура КомпетенцииФлагПриИзменении(Элемент)
    
	ТекущиеДанные = Элементы.Компетенции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Флаг = 2 Тогда
		ТекущиеДанные.Флаг = 0;
	КонецЕсли;
	УправлениеITОтделом8УФКлиент.ПометитьВложенныеЭлементы(ТекущиеДанные);
	УправлениеITОтделом8УФКлиент.ПометитьЭлементыРодителей(ТекущиеДанные.ПолучитьРодителя());
    
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область БСП
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

&НаКлиенте
Процедура ДатаТарифовПриИзменении(Элемент)
	
	ОбновитьОтборы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборы()
	
	Тарифы.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", ?(ДатаТарифов = Дата(1, 1, 1), 
		Новый Граница(КонецДня(ТекущаяДатаСеанса()), ВидГраницы.Включая), 
		Новый Граница(КонецДня(ДатаТарифов), ВидГраницы.Включая)));
		
	Тарифы.Параметры.УстановитьЗначениеПараметра("Сервис", Объект.Ссылка);
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Услуги, "Владелец", Объект.Ссылка);		
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Отклонения, "Объект",	Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элементы.Тарифы.ТекущиеДанные.Регистратор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовки()
	
	КоличествоТарифов 		= 0;
	КоличествоОтклонений	= 0;
	КоличествоУслуг			= 0;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЦеныУслугСрезПоследних.Услуга) КАК КоличествоЦенТарифов
		|ИЗ
		|	РегистрСведений.ЦеныУслуг.СрезПоследних(&ДатаАктуальности, Услуга.Владелец = &Сервис) КАК ЦеныУслугСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Услуги.Ссылка) КАК КоличествоУслуг
		|ИЗ
		|	Справочник.Услуги КАК Услуги
		|ГДЕ
		|	Услуги.Владелец = &Сервис
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ОтклоненияСервисов.Регистратор) КАК КоличествоОтклонений
		|ИЗ
		|	РегистрСведений.ОтклоненияСервисов КАК ОтклоненияСервисов
		|ГДЕ
		|	ОтклоненияСервисов.Объект = &Сервис";
	
	Запрос.УстановитьПараметр("ДатаАктуальности", 	ДатаТарифов);
	Запрос.УстановитьПараметр("Сервис", 			Объект.Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Тарифы
	ВыборкаТарифы = МассивРезультатов[0].Выбрать();
	Если ВыборкаТарифы.Следующий() Тогда
		КоличествоТарифов = ВыборкаТарифы.КоличествоЦенТарифов;
	КонецЕсли;
	
	// Услуги
	ВыборкаУслуги = МассивРезультатов[1].Выбрать();
	Если ВыборкаУслуги.Следующий() Тогда
		КоличествоУслуг = ВыборкаУслуги.КоличествоУслуг;
	КонецЕсли;
	
	// Отклонения
	ВыборкаОтклонений = МассивРезультатов[2].Выбрать();
	Если ВыборкаОтклонений.Следующий() Тогда
		КоличествоОтклонений = ВыборкаОтклонений.КоличествоОтклонений;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьЗаголовки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОтклонений() Экспорт
	
	УО = Отклонения.УсловноеОформление.Элементы;
	УО.Очистить();
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыПричинОтклоненияОтГрафика.Ссылка КАК Ссылка,
		|	ВидыПричинОтклоненияОтГрафика.ЦветТекста КАК ЦветТекста,
		|	ВидыПричинОтклоненияОтГрафика.ЦветФона КАК ЦветФона
		|ИЗ
		|	Справочник.ВидыПричинОтклоненияОтГрафика КАК ВидыПричинОтклоненияОтГрафика";
	
	мWebЦветаЧерный = WebЦвета.Черный;
	мWebЦветаБелый = WebЦвета.Белый;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ЦветТекста 	= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ЦветТекста);
		Исключение
			ЦветТекста 	= мWebЦветаЧерный;
		КонецПопытки;
		Попытка
			ЦветФона 	= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ЦветФона);
		Исключение
			ЦветФона 	= мWebЦветаБелый;
		КонецПопытки;
		
		ЭлементУО 						= УО.Добавить();
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 	ЦветТекста);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", 	ЦветФона);
		ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ВидПричины");
		ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементУсловия.ПравоеЗначение 	= Выборка.Ссылка;		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
