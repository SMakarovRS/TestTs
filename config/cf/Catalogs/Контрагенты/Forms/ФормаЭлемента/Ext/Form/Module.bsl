#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьАвтоЗаполнениеРеквизитов;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт; // Длительная опреация.
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура обработчик события ПриСозданииНаСервере.
// Осуществляет первоначальное заполнение реквизитов формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
		
	ЮрЛицо = Перечисления.ВидКонтрагента.ЮридическоеЛицо;
	
	Если Объект.ВидКонтрагента = ЮрЛицо Тогда
		Элементы.КПП.Видимость = Истина;
		Элементы.ФизическоеЛицо.Видимость = Ложь;
		Объект.ФизическоеЛицо = Неопределено;
	Иначе
		Элементы.КПП.Видимость = Ложь;
		Элементы.ФизическоеЛицо.Видимость = Истина;
		Объект.КПП = "";
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация	
	ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	
		
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ЭтоНовыйЭлемент = Параметры.Ключ.Пустая();
	Элементы.ГруппаЗаполнениеПоДаннымЕдиныхГосРеестров.Видимость = ЭтоНовыйЭлемент;
	Элементы.ЗаполнитьПоИНН.Видимость = НЕ ЭтоНовыйЭлемент;
	Если ЭтоНовыйЭлемент Тогда
		ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
	КонецЕсли;
	ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	РеквизитыПроверкиКонтрагентов.НеИспользоватьКэш = Истина;
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если ПоказатьИнформациюСпарк(ЭтотОбъект) Тогда
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Многострочный");
		Если Параметры.Ключ.Пустая() Тогда
			// Если это копирование, то использовать ИНН, а не ссылку для получения индексов.
			СПАРКРиски.ПриСозданииНаСервере(
				ЭтотОбъект,
				Объект,
				Объект.ИНН,
				ПараметрыПроцедуры);
		Иначе
			СПАРКРиски.ПриСозданииНаСервере(
				ЭтотОбъект,
				Объект,
				Объект.Ссылка,
				ПараметрыПроцедуры);
		КонецЕсли;
	Иначе
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// Команды1СПАРКРиски
	СПАРКРиски.ДобавитьПодключаемыеКомандыКонтрагента(ЭтотОбъект, Объект, Элементы.Подменю1СПАРКРиски);
	// Конец Команды1СПАРКРиски
	
	УстановитьВидимостьДоступность();
	
	ЗаданияСервер.УстановитьШагКорректировкиВеса(ШагКорректировкиВеса);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеITОтделом8УФКлиент.ОбновитьНадписьАвтор(Объект, ЭтаФорма);
	Оповестить("Запись_Контрагенты", Новый Структура, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события ОбработкаОповещения.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановкаОсновногоСчета" И Параметр.Владелец = Объект.Ссылка Тогда
		
		Объект.БанковскийСчетПоУмолчанию = Параметр.НовыйОсновнойСчет;
		Если НЕ Модифицированность Тогда
			Записать();
		КонецЕсли;
		Оповестить("УстановкаОсновногоСчетаВыполнена");
		
	КонецЕсли;	
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДатаСоздания = Дата(1, 1, 1) Тогда
		ТекущийОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		ТекущийОбъект.ДатаКорректировки = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ТекущийОбъект.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	Иначе
		ТекущийОбъект.АвторКорректировки = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПрочие

&НаКлиенте
// Процедура устанавливает видимость реквизитов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьРеквизитов()
	
	Если Объект.ВидКонтрагента = ЮрЛицо Тогда
		Элементы.КПП.Видимость = Истина;
		Элементы.ФизическоеЛицо.Видимость = Ложь;
		Объект.ФизическоеЛицо = Неопределено;
	Иначе
		Элементы.КПП.Видимость = Ложь;
		Элементы.ФизическоеЛицо.Видимость = Истина;
		Объект.КПП = "";
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьРеквизитов()

&НаКлиенте
// Процедура обработчик события ПриИзменении поля ввода Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры // НаименованиеПриИзменении()

&НаКлиенте
// Процедура обработчик события ПриИзменении поля ввода ЮрФизЛицо.
//
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	Если Объект.ВидКонтрагента <> ПредопределенноеЗначение("Перечисление.ВидКонтрагента.ЮридическоеЛицо") Тогда
		Объект.КПП = "";
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо =
		(Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидКонтрагента.ЮридическоеЛицо"));
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	УстановитьВидимостьРеквизитов();
	
КонецПроцедуры // ЮрФизЛицоПриИзменении()

&НаКлиенте
// Процедура - обработчик события НачалоВыбора поля БанковскийСчетПоУмолчанию.
//
Процедура БанковскийСчетПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Элемент справочника еще не записан.'");
		Сообщение.Сообщить();
		
	КонецЕсли;

КонецПроцедуры // БанковскийСчетПоУмолчаниюНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события НачалоВыбора поля ДоговорПоУмолчанию.
//
Процедура ДоговорПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Элемент справочника еще не записан.'");
		Сообщение.Сообщить();
		
	КонецЕсли;	
	
КонецПроцедуры // ДоговорПоУмолчаниюНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура ПолеПоискаИНННаименованиеПриИзменении(Элемент)
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(ПолеПоискаИНННаименование);
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Объект.ИНН = СокрЛП(Объект.ИНН);
	ПриИзмененииИНН(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	Объект.КПП = СокрЛП(Объект.КПП);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоИностранныйКонтрагентПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент = Объект.ЭтоИностранныйКонтрагент;
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура УчетОстатковПриИзменении(Элемент)
	
	Если Не Объект.УчетОстатков Тогда
		ТекстОшибки = "";
		ТекстОшибки = ОтказОтключитьУчетОстатков();
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			Объект.УчетОстатков = Истина;
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьАвторНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НадписьАвторНажатиеЗавершение", ЭтотОбъект), 
		УправлениеITОтделом8УФКлиент.ПолучитьСписокНадписьАвтор(Объект), Элементы.НадписьАвтор, );
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьАвторНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт    

КонецПроцедуры

&НаКлиенте
Процедура ВесРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ШагКорректировкиВеса > 1 Тогда		
		
		СтандартнаяОбработка = Ложь;
		Если Направление = 1 Тогда
			Объект.Вес = Объект.Вес + ШагКорректировкиВеса;
		Иначе
			Объект.Вес = Объект.Вес - ШагКорректировкиВеса;
		КонецЕсли;	
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестров(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПолеПоискаИНННаименование) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Поле ""ИНН или наименование"" не заполнено.'"),
			,
			"ПолеПоискаИНННаименование");
		ТекущийЭлемент = Элементы.ПолеПоискаИНННаименование;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(ПолеПоискаИНННаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""ИНН"" не заполнено'"), , "Объект.ИНН");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(Объект.ИНН, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура СтранаРегистрацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// Команды1СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)

	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Объект);

КонецПроцедуры
// Конец Команды1СПАРКРиски

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП
// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)	
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		Ожидание, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, 
		Ожидание, СтандартнаяОбработка);
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, 
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, 
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
    ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ИндексыСПАРКРиски

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	Если Объект.ВидКонтрагента <> ПредопределенноеЗначение("Перечисление.ВидКонтрагента.ЮридическоеЛицо") Тогда
		Объект.КПП = "";
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо =
		(Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидКонтрагента.ЮридическоеЛицо"));
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Выполняет действия при изменении ИНН.
&НаКлиенте
Процедура ПриИзмененииИНН(ЗаполнитьРеквизиты = Ложь)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Если ЗаполнитьРеквизиты Тогда
		Если Не Элементы.ГруппаЗаполнениеПоДаннымЕдиныхГосРеестров.Видимость Тогда
			// Это не режим заполнения по Наименованию.
			ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(Объект.ИНН, Истина);
		КонецЕсли;
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

#Область ИндексыСПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ОбновитьОтображениеИндексыСПАРК();

КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()

	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Объект,
		Объект.ИНН, // Искать по ИНН
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказатьИнформациюСпарк(Форма)

	Объект = Форма.Объект;

	ПоказатьИнформацию = (Объект.ВидКонтрагента = ПредопределенноеЗначение(
		"Перечисление.ВидКонтрагента.ЮридическоеЛицо"));

	Возврат ПоказатьИнформацию;

КонецФункции

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.Префикс.Видимость 				   = Объект.УчетОстатков;
	Элементы.СтавкаНДСПоУмолчанию.Видимость    = Объект.УчетОстатков;
	Элементы.КодПоОКАТО.Видимость 			   = Объект.УчетОстатков;
	Элементы.СвидетельствоСерияНомер.Видимость = Объект.УчетОстатков;
	Элементы.СвидетельствоДатаВыдачи.Видимость = Объект.УчетОстатков;
	
КонецПроцедуры	

&НаСервере
Функция ОтказОтключитьУчетОстатков()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат "";
	Иначе	
		Возврат УправлениеITОтделом8УФ.ОтказОтключитьУчетОстатковПоКонтрагенту(Объект.Ссылка);
	КонецЕсли;	
	
КонецФункции

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)
	
	Если ЭтоИНН(ТекстЗаполнения) Тогда
		
		Объект.Наименование = "";
		Объект.ИНН = ТекстЗаполнения;
		Объект.ВидКонтрагента = ?(СтрДлина(ТекстЗаполнения) = 10,
			Перечисления.ВидКонтрагента.ЮридическоеЛицо,
			Перечисления.ВидКонтрагента.ФизическоеЛицо);
			
		ЗаполнитьРеквизитыПоИНННаСервере(ТекстЗаполнения);
		ТекстЗаполнения = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(СтрокаПоиска, Знач ЗаполнениеПоИНН = Неопределено)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтключитьАвтоЗаполнениеРеквизитов <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьАвтоЗаполнениеРеквизитов = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьАвтоЗаполнениеРеквизитов", 0.1, Истина);
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	
	Если ЗаполнениеПоИНН = Неопределено Тогда
		ЗаполнениеПоИНН = ЭтоИНН(СтрокаПоиска);
	КонецЕсли;
	
	Если ЗаполнениеПоИНН <> Истина И ЗначениеЗаполнено(Объект.ИНН)
		ИЛИ ЗначениеЗаполнено(Объект.КПП)
		ИЛИ ЗначениеЗаполнено(Объект.Наименование)
		ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ДопПараметры = Новый Структура("ЗаполнениеПоИНН, СтрокаПоиска", ЗаполнениеПоИНН, СтрокаПоиска);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаполнитьПоДаннымЕдиныхГосРеестровПриОтветеНаВопросПерезаполнитьРеквизиты",
			ЭтотОбъект,
			ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Если ЗаполнениеПоИНН Тогда
			ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаПоиска);
		Иначе
			ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(СтрокаПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровПриОтветеНаВопросПерезаполнитьРеквизиты(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ДопПараметры.ЗаполнениеПоИНН Тогда
			ЗаполнитьРеквизитыПоИНННаКлиенте(ДопПараметры.СтрокаПоиска);
		Иначе
			ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ДопПараметры.СтрокаПоиска);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаИНН)
	
	ИзменилсяИНН = (СтрокаИНН <> Объект.ИНН);
	
	Состояние(
		НСтр("ru = 'Получение данных'"),
		,
		НСтр("ru = 'Пожалуйста, подождите...'"));
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(СтрокаИНН, ОписаниеОшибки);
	Состояние();
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
			"ОбработатьОшибкуЗаполнитьРеквизитыПоИННЗавершение",
			ЭтотОбъект,
			СтрокаИНН);
		ДополнительныеПараметрыОбработкиОшибки =
			РаботаСКонтрагентамиКлиент.НовыйДополнительныеПараметрыОбработкиОшибки();
			
		ДополнительныеПараметрыОбработкиОшибки.ПредставлениеДействия    =
			НСтр("ru = 'Автоматическое заполнение реквизитов контрагентов'");
			
		ДополнительныеПараметрыОбработкиОшибки.ИдентификаторМестаВызова = "CounterpartyCard";
		ДополнительныеПараметрыОбработкиОшибки.Форма                    = ЭтотОбъект;
		
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
			ОписаниеОшибки,
			ОбработчикЗавершенияОбработкиОшибки,
			ДополнительныеПараметрыОбработкиОшибки);
		
	КонецЕсли;
	
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	
	Если ИзменилсяИНН Тогда
		// Т.к. изменился ИНН, необходимо обработать это изменение без
		// повторного заполнения реквизитов по ИНН.
		ПриИзмененииИНН(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуЗаполнитьРеквизитыПоИННЗавершение(Результат, СтрокаИНН) Экспорт
	
	Если Результат.ПовторитьДействие Тогда
		ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаИНН);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(СтрокаНаименование)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаПоиска", СтрокаНаименование);
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение",
		ЭтотОбъект, ДопПараметры);
		
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента",
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

	Если НЕ ЭтоИНН(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение реквизитов по наименованию выполняется только для юридических лиц.
	Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидКонтрагента.ЮридическоеЛицо");
	РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо = Истина;
	ЗаполнитьРеквизитыПоИНННаКлиенте(Результат);
	ТекущийЭлемент = Элементы.Наименование;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(Знач СтрокаИНН, ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = (Объект.ВидКонтрагента = Перечисления.ВидКонтрагента.ЮридическоеЛицо);
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(СтрокаИНН);
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(СтрокаИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	
	НоваяКонтактнаяИнформация = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация();
	
	Если ЭтоЮридическоеЛицо Тогда
		ЗаполнитьЭлементКонтактнойИнформации(
			НоваяКонтактнаяИнформация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			РеквизитыКонтрагента.ЮридическийАдрес);
	Иначе
		ЗаполнитьЭлементКонтактнойИнформации(
			НоваяКонтактнаяИнформация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			Неопределено);
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(
		ЭтотОбъект,
		Объект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(
		НоваяКонтактнаяИнформация,
		ВидКонтактнойИнформации,
		СтруктураДанных)
	
	СтрокаКонтактнойИнформации = НоваяКонтактнаяИнформация.Добавить();
	
	Если СтруктураДанных = Неопределено Или Не ЗначениеЗаполнено(СтруктураДанных.Представление) Тогда
		
		СтрокаКонтактнойИнформации.Представление = "";
		СтрокаКонтактнойИнформации.Значение      = "";
		СтрокаКонтактнойИнформации.Вид           = ВидКонтактнойИнформации;
		
	Иначе
		
		СтрокаКонтактнойИнформации.Представление = СтруктураДанных.Представление;
		СтрокаКонтактнойИнформации.Значение      = СтруктураДанных.КонтактнаяИнформация;
		СтрокаКонтактнойИнформации.Вид           = ВидКонтактнойИнформации;
		
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(
		Объект,
		НоваяКонтактнаяИнформация);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИНН(СтрокаИНН)
	Возврат ЗначениеЗаполнено(СтрокаИНН)
		И ТипЗнч(СтрокаИНН) = Тип("Строка")
		И (СтрДлина(СтрокаИНН) = 10 ИЛИ СтрДлина(СтрокаИНН) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаИНН);
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВключитьАвтоЗаполнениеРеквизитов()

	ОтключитьАвтоЗаполнениеРеквизитов = Неопределено;	

КонецПроцедуры 

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

