
#Область Переменные

&НаКлиенте
Перем мЦветОбластиМестаХранения; // << цвет области для места хранения.

&НаКлиенте
Перем мЦветОбластиКарточкиНоменклатуры; // << цвет области для карточки номенклатуры.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ОчиститьСхему();
		Объект.ОтображатьСетку 		= Истина;
		Объект.ОтображатьЗаголовки 	= Ложь;
		Объект.Редактирование 		= Истина;
	Иначе
		Элементы.Редактирование.Пометка = Объект.Редактирование;
	КонецЕсли;
	
	ЗагрузитьСхемуИзБД();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Учесть возможность создания из взаимодействия
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект,Параметры,Ложь);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	// СтандартныеПодсистемы.КонтактнаяИнформация	
	ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	
	
	УстановитьВидимостьИДоступность();
	ОбновитьПредставление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновлениеПомещений", Объект.Ссылка, ЭтаФорма);
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Схема = Новый ХранилищеЗначения(ТабДокумент);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияПриАктивизацииСтроки(Элемент)
	
	Если Элементы.МестаХранения.ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	// Очищаем последнюю выделенную область.
	Для Каждого Строки Из Объект.МестаХранения Цикл
		
		Попытка
			НайденнаяОбласть = ТабДокумент.Область(Строки.ИмяОбласти);			
			ЦветФонаОбласти = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
			Если ЦветФонаОбласти = Неопределено Тогда
				ЦветФонаОбласти = WebЦвета.Белый;
			КонецЕсли;
			НайденнаяОбласть.ЦветФона = ЦветФонаОбласти;
			НайденнаяОбласть.Примечание.Текст = "";
			НайденнаяОбласть.Расшифровка = Неопределено;
		Исключение
		КонецПопытки;
		Попытка
			НайденнаяОбласть = ТабДокумент.Рисунки[Строки.ИмяОбласти];				
			ЦветФонаОбласти = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
			Если ЦветФонаОбласти = Неопределено Тогда
				ЦветФонаОбласти = WebЦвета.Белый;
			КонецЕсли;
			НайденнаяОбласть.ЦветФона = ЦветФонаОбласти;
			НайденнаяОбласть.Расшифровка = Неопределено;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	// Область еще не задана.
	Если ПустаяСтрока(Элементы.МестаХранения.ТекущиеДанные.ИмяОбласти) Тогда
		Возврат;		
	КонецЕсли;
		
	// Выделяем область если ячейки.
	Попытка
		НайденнаяОбласть = ТабДокумент.Область(Элементы.МестаХранения.ТекущиеДанные.ИмяОбласти);
		Если НайденнаяОбласть <> Неопределено Тогда
			НайденнаяОбласть.ЦветФона 			= мЦветОбластиМестаХранения;
			НайденнаяОбласть.Примечание.Текст 	= Элементы.МестаХранения.ТекущиеДанные.МестоХранения;
			НайденнаяОбласть.Расшифровка 		= Элементы.МестаХранения.ТекущиеДанные.МестоХранения;
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;		
	
	// Выделяем область если рисунки.
	Попытка
		НайденнаяОбласть = ТабДокумент.Рисунки[Элементы.МестаХранения.ТекущиеДанные.ИмяОбласти];	
		Если НайденнаяОбласть <> Неопределено Тогда
			НайденнаяОбласть.ЦветФона 			= мЦветОбластиМестаХранения;
			НайденнаяОбласть.Примечание.Текст 	=  Элементы.МестаХранения.ТекущиеДанные.МестоХранения;
			НайденнаяОбласть.Расшифровка 		= Элементы.МестаХранения.ТекущиеДанные.МестоХранения;
		КонецЕсли;
	Исключение		
	КонецПопытки; 

КонецПроцедуры

&НаКлиенте
Процедура КарточкиНоменклатурыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.КарточкиНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	// Очищаем последнюю выделенную область.
	Для Каждого Строки Из Объект.КарточкиНоменклатуры Цикл
		
		Попытка
			НайденнаяОбласть = ТабДокумент.Область(Строки.ИмяОбласти);			
			ЦветФонаОбласти = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
			Если ЦветФонаОбласти = Неопределено Тогда
				ЦветФонаОбласти = WebЦвета.Белый;
			КонецЕсли;
			НайденнаяОбласть.ЦветФона = ЦветФонаОбласти;
			НайденнаяОбласть.Примечание.Текст = "";
			НайденнаяОбласть.Расшифровка = Неопределено;
		Исключение
		КонецПопытки;
		Попытка
			НайденнаяОбласть = ТабДокумент.Рисунки[Строки.ИмяОбласти];				
			ЦветФонаОбласти = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
			Если ЦветФонаОбласти = Неопределено Тогда
				ЦветФонаОбласти = WebЦвета.Белый;
			КонецЕсли;
			НайденнаяОбласть.ЦветФона = ЦветФонаОбласти;
			НайденнаяОбласть.Расшифровка = Неопределено;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	// Область еще не задана.
	Если ПустаяСтрока(Элементы.КарточкиНоменклатуры.ТекущиеДанные.ИмяОбласти) Тогда
		Возврат;		
	КонецЕсли;
		
	// Выделяем область если ячейки.
	Попытка
		НайденнаяОбласть = ТабДокумент.Область(Элементы.КарточкиНоменклатуры.ТекущиеДанные.ИмяОбласти);
		Если НайденнаяОбласть <> Неопределено Тогда
			НайденнаяОбласть.ЦветФона 			= мЦветОбластиКарточкиНоменклатуры;
			НайденнаяОбласть.Примечание.Текст 	= Элементы.КарточкиНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры;
			НайденнаяОбласть.Расшифровка 		= Элементы.КарточкиНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры;
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;		
	
	// Выделяем область если рисунки.
	Попытка
		НайденнаяОбласть = ТабДокумент.Рисунки[Элементы.КарточкиНоменклатуры.ТекущиеДанные.ИмяОбласти];	
		Если НайденнаяОбласть <> Неопределено Тогда
			НайденнаяОбласть.ЦветФона 			= мЦветОбластиКарточкиНоменклатуры;
			НайденнаяОбласть.Примечание.Текст 	=  Элементы.КарточкиНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры;
			НайденнаяОбласть.Расшифровка 		= Элементы.КарточкиНоменклатуры.ТекущиеДанные.КарточкаНоменклатуры;
		КонецЕсли;
	Исключение		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМестоположенияПриИзменении(Элемент)	
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	// Конец СтандартныеПодсистемы.Свойства	
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияМестоХраненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокМестХранения = Новый Массив;
	Для Каждого Строка Из Объект.МестаХранения Цикл
		Если ЗначениеЗаполнено(Строка.МестоХранения) Тогда
			СписокМестХранения.Добавить(Строка.МестоХранения);
		КонецЕсли;
	КонецЦикла;
	
	Структура = Новый Структура();
	Структура.Вставить("ЗакрыватьПриВыборе",  Истина);
	Структура.Вставить("РежимВыбора",         Истина);
	Если СписокМестХранения.Количество() > 0 Тогда 
		Структура.Вставить("СписокМестХранения", СписокМестХранения);
	КонецЕсли;
		
	ОткрытьФорму("Справочник.МестаХранения.Форма.ФормаСписка", Структура, ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ВыбратьМестоХраненияИзСправочникаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияМестоХраненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	МассивСсылок = ЗаполнитьСписокМестХранения(Текст);
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияМестоХраненияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "" Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	МассивСсылок = ЗаполнитьСписокМестХранения(Текст);
	ЗаполнитьСписокМестХранения(Текст);
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивСсылок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиОтображатьСетку(Команда)
	Объект.ОтображатьСетку = НЕ Объект.ОтображатьСетку;	
	УстановитьВидимостьИДоступность();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтображатьЗаголовки(Команда)
	Объект.ОтображатьЗаголовки = НЕ Объект.ОтображатьЗаголовки;
	УстановитьВидимостьИДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРодительскоеМестоположение(Команда)
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		// Открываем родителя
		ОткрытьФорму("Справочник.Местоположения.ФормаОбъекта", Новый Структура("Ключ", Объект.Родитель));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗагрузитьСхему(Команда)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'Табличный документ'") + "(*.mxl)|*.mxl";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ТабДокумент.Прочитать(ДиалогОткрытияФайла.ПолноеИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСохранитьСхему(Команда)
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Текст = "ru = ""Табличный документ""; en = ""Table Document""";
	Фильтр = НСтр(Текст)+"(*.mxl)|*.mxl";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Сохранить файл'");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ТабДокумент.Записать(ДиалогОткрытияФайла.ПолноеИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОчиститьСхему(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Неопределено;
	ПоказатьВопрос(Новый ОписаниеОповещения("НастройкаОчиститьСхемуЗавершение", ЭтотОбъект), НСтр("ru = 'Хотите очистить схему?'"), Режим, 0);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбъединитьЯчейки(Команда)
	Если ТипЗнч(ТабДокумент.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ТекущаяОбласть = ТабДокумент.ТекущаяОбласть;
		ОбъединитьОбласть(ТекущаяОбласть.Имя);
		
	Иначе
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область'");
		Сообщение.Поле = "ТабДокумент";
		Сообщение.Сообщить();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРазъединитьЯчейки(Команда)
	Если ТипЗнч(ТабДокумент.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ТекущаяОбласть = ТабДокумент.ТекущаяОбласть;
		РазъединитьОбласть(ТекущаяОбласть.Имя);
		
	Иначе
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область'");
		Сообщение.Поле = "ТабДокумент";
		Сообщение.Сообщить();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзображение(Команда)
	Если ТипЗнч(ТабДокумент.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда		
		Результат = Неопределено;
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзображенияИзНабора", Новый Структура("ПрефиксКартинок", "схм"),,,,, Новый ОписаниеОповещения("ВставитьИзображениеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выделите область для вставки'");
		Сообщение.Поле = "ТабДокумент";
		Сообщение.Сообщить();		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьЛинию(Команда)
	Если ТипЗнч(ТабДокумент.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда		
		ТекущаяОбласть = ТабДокумент.ТекущаяОбласть;
		ВставитьФигуруНаСервере(ТекущаяОбласть.Имя, ТипРисункаТабличногоДокумента.Прямая);
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область'");
		Сообщение.Поле = "ТабДокумент";
		Сообщение.Сообщить();		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПрямоугольник(Команда)
	Если ТипЗнч(ТабДокумент.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда		
		ТекущаяОбласть = ТабДокумент.ТекущаяОбласть;
		ВставитьФигуруНаСервере(ТекущаяОбласть.Имя, ТипРисункаТабличногоДокумента.Прямоугольник);
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область'");
		Сообщение.Поле = "ТабДокумент";
		Сообщение.Сообщить();		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОвал(Команда)
	Если ТипЗнч(ТабДокумент.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда		
		ТекущаяОбласть = ТабДокумент.ТекущаяОбласть;
		ВставитьФигуруНаСервере(ТекущаяОбласть.Имя, ТипРисункаТабличногоДокумента.Эллипс);
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область'");
		Сообщение.Поле = "ТабДокумент";
		Сообщение.Сообщить();		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекст(Команда)
	Если ТипЗнч(ТабДокумент.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда		
		ТекущаяОбласть = ТабДокумент.ТекущаяОбласть;
		ВставитьФигуруНаСервере(ТекущаяОбласть.Имя, ТипРисункаТабличногоДокумента.Текст);
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область'");
		Сообщение.Поле = "ТабДокумент";
		Сообщение.Сообщить();		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРабочееМесто(Команда)
	
	Если Элементы.МестаХранения.ТекущиеДанные = Неопределено Тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выделите строку с местом хранения'");
		Сообщение.Поле = "Объект.МестаХранения";
		Сообщение.Сообщить();		
		Возврат;		
	КонецЕсли;
	
	Если ТипЗнч(ТабДокумент.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") ИЛИ ТипЗнч(ТабДокумент.ВыделенныеОбласти[0]) = Тип("РисунокТабличногоДокумента") Тогда		
		
		// Очищаем последнюю выделенную область.
		Для Каждого Строки Из Объект.МестаХранения Цикл
			Попытка
				НайденнаяОбласть = ТабДокумент.Область(Строки.ИмяОбласти);
				ЦветФонаОбласти = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
				Если ЦветФонаОбласти = Неопределено Тогда
					ЦветФонаОбласти = WebЦвета.Белый;
				КонецЕсли;
				НайденнаяОбласть.ЦветФона = ЦветФонаОбласти;
				НайденнаяОбласть.Примечание.Текст = "";
			Исключение
			КонецПопытки;
			Попытка
				НайденнаяОбласть = ТабДокумент.Рисунки[Строки.ИмяОбласти];				
				ЦветФонаОбласти = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
				Если ЦветФонаОбласти = Неопределено Тогда
					ЦветФонаОбласти = WebЦвета.Белый;
				КонецЕсли;
				НайденнаяОбласть.ЦветФона = ЦветФонаОбласти;
			Исключение
			КонецПопытки;
		КонецЦикла;
	
		ТекущаяОбласть = ТабДокумент.ТекущаяОбласть;
		Элементы.МестаХранения.ТекущиеДанные.ИмяОбласти = ТекущаяОбласть.Имя;		
		Элементы.МестаХранения.ТекущиеДанные.ЦветДоИзменения = ПолучитьЦветФонаОбластиСтрокой(ТекущаяОбласть.Имя);
		МестаХраненияПриАктивизацииСтроки(Неопределено);
		Модифицированность = Истина;
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область'");
		Сообщение.Поле = "ТабДокумент";
		Сообщение.Сообщить();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьКарточкуНоменклатуры(Команда)
	
	Если Элементы.КарточкиНоменклатуры.ТекущиеДанные = Неопределено Тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выделите строку с карточкой номенклатуры'");
		Сообщение.Поле = "Объект.КарточкиНоменклатуры";
		Сообщение.Сообщить();		
		Возврат;		
	КонецЕсли;
	
	Если ТипЗнч(ТабДокумент.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") ИЛИ ТипЗнч(ТабДокумент.ВыделенныеОбласти[0]) = Тип("РисунокТабличногоДокумента") Тогда
		
		// Очищаем последнюю выделенную область
		Для Каждого Строки Из Объект.КарточкиНоменклатуры Цикл
			Попытка
				НайденнаяОбласть = ТабДокумент.Область(Строки.ИмяОбласти);
				ЦветФонаОбласти = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
				Если ЦветФонаОбласти = Неопределено Тогда
					ЦветФонаОбласти = WebЦвета.Белый;
				КонецЕсли;
				НайденнаяОбласть.ЦветФона = ЦветФонаОбласти;
				НайденнаяОбласть.Примечание.Текст = "";
			Исключение
			КонецПопытки;
			Попытка
				НайденнаяОбласть = ТабДокумент.Рисунки[Строки.ИмяОбласти];				
				ЦветФонаОбласти = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
				Если ЦветФонаОбласти = Неопределено Тогда
					ЦветФонаОбласти = WebЦвета.Белый;
				КонецЕсли;
				НайденнаяОбласть.ЦветФона = ЦветФонаОбласти;
			Исключение
			КонецПопытки;
		КонецЦикла;
	
		ТекущаяОбласть = ТабДокумент.ТекущаяОбласть;
		Элементы.КарточкиНоменклатуры.ТекущиеДанные.ИмяОбласти = ТекущаяОбласть.Имя;		
		Элементы.КарточкиНоменклатуры.ТекущиеДанные.ЦветДоИзменения = ПолучитьЦветФонаОбластиСтрокой(ТекущаяОбласть.Имя);
		КарточкиНоменклатурыПриАктивизацииСтроки(Неопределено);
		Модифицированность = Истина;
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область'");
		Сообщение.Поле = "ТабДокумент";
		Сообщение.Сообщить();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактирование(Команда)
	Объект.Редактирование = Не Объект.Редактирование;
	Элементы.Редактирование.Пометка = Объект.Редактирование;
	Модифицированность = Истина;
	
	УстановитьВидимостьИДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРабочееМесто(Команда)
	
	Если Элементы.МестаХранения.ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;

	// Очищаем последнюю выделенную область
	Для Каждого Строки Из Объект.МестаХранения Цикл
		Попытка
			НайденнаяОбласть = ТабДокумент.Область(Строки.ИмяОбласти);
			НайденнаяОбласть.ЦветФона = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
			НайденнаяОбласть.Примечание.Текст = "";
		Исключение
		КонецПопытки;
		Попытка
			НайденнаяОбласть = ТабДокумент.Рисунки[Строки.ИмяОбласти];				
			НайденнаяОбласть.ЦветФона = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Элементы.МестаХранения.ТекущиеДанные.ИмяОбласти = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКарточкуНоменклатуры(Команда)
	
	Если Элементы.КарточкиНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;

	// Очищаем последнюю выделенную область.
	Для Каждого Строки Из Объект.КарточкиНоменклатуры Цикл
		Попытка
			НайденнаяОбласть = ТабДокумент.Область(Строки.ИмяОбласти);
			НайденнаяОбласть.ЦветФона = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
			НайденнаяОбласть.Примечание.Текст = "";
		Исключение
		КонецПопытки;
		Попытка
			НайденнаяОбласть = ТабДокумент.Рисунки[Строки.ИмяОбласти];				
			НайденнаяОбласть.ЦветФона = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Элементы.КарточкиНоменклатуры.ТекущиеДанные.ИмяОбласти = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзображениеИзФайла(Команда)
	Если ТипЗнч(ТабДокумент.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ТекущаяОбласть = ТабДокумент.ТекущаяОбласть;
		
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Текст = "ru = ""Изображения""; en = ""Images""";
		Фильтр = НСтр(Текст)+"(*.png; *.jpg; *.jpeg; *.gif)|*.png;*.jpg;*.jpeg;*.gif";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файлы'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
		    МояКартинка = Новый Картинка(ДиалогОткрытияФайла.ПолноеИмяФайла);
			Рисунок = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
			Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);			
			Индекс = ТабДокумент.Рисунки.Индекс(Рисунок);
			ТабДокумент.Рисунки[Индекс].Картинка = МояКартинка;
			ТабДокумент.Рисунки[Индекс].Расположить(ТекущаяОбласть);
			
			Модифицированность = Истина;
		КонецЕсли;		
	Иначе
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выделите область для вставки'");
		Сообщение.Поле = "ТабДокумент";
		Сообщение.Сообщить();		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМестаХраненияНаСервере()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестаХранения.Ссылка КАК МестоХранения
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.Местоположение = &Местоположение
		|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Местоположение", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("МестоХранения", Выборка.МестоХранения);
		Массив = Объект.МестаХранения.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество() = 0 Тогда
			НоваяСтрока = Объект.МестаХранения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМестаХранения(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	ЗаполнитьМестаХраненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКарточкиНоменклатурыНаСервере()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиОстатки.Номенклатура КАК КарточкаНоменклатуры
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(
		|			,
		|			МестоХранения В
		|					(ВЫБРАТЬ
		|						МестаХранения.Ссылка
		|					ИЗ
		|						Справочник.МестаХранения КАК МестаХранения
		|					ГДЕ
		|						МестаХранения.Местоположение = &Местоположение)
		|				И ТИПЗНАЧЕНИЯ(Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)) КАК ОстаткиОстатки
		|ГДЕ
		|	ОстаткиОстатки.КоличествоОстаток > 0
		|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Местоположение", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("КарточкаНоменклатуры", Выборка.КарточкаНоменклатуры);
		Массив = Объект.КарточкиНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество() = 0 Тогда
			НоваяСтрока = Объект.КарточкиНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКарточкиНоменклатуры(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	ЗаполнитьКарточкиНоменклатурыНаСервере();
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)	
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		Ожидание, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, 
		Ожидание, СтандартнаяОбработка);
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, 
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, 
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
    ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти 

&НаСервере
// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьИДоступность()
	
	Если НЕ Объект.Редактирование Тогда
		Элементы.НастройкиОтображатьЗаголовки.Пометка 	= Ложь;
		Элементы.НастройкиОтображатьСетку.Пометка 		= Ложь;
		
		Элементы.ТабДокумент.ОтображатьСетку 			= Ложь;
		Элементы.ТабДокумент.ОтображатьЗаголовки 		= Ложь;
	Иначе
		Элементы.НастройкиОтображатьЗаголовки.Пометка 	= Объект.ОтображатьЗаголовки;
		Элементы.НастройкиОтображатьСетку.Пометка 		= Объект.ОтображатьСетку;
		
		Элементы.ТабДокумент.ОтображатьСетку 			= Объект.ОтображатьСетку;
		Элементы.ТабДокумент.ОтображатьЗаголовки 		= Объект.ОтображатьЗаголовки;		
	КонецЕсли;
	
	Элементы.НазначитьРабочееМесто.Доступность 			= Объект.Редактирование;
	Элементы.ОчиститьРабочееМесто.Доступность 			= Объект.Редактирование;
	Элементы.МестаХранения.ТолькоПросмотр 				= НЕ Объект.Редактирование;
	Элементы.КарточкиНоменклатуры.ТолькоПросмотр 		= НЕ Объект.Редактирование;
	Элементы.ТабДокумент.ТолькоПросмотр 				= НЕ Объект.Редактирование;
	
	Элементы.ГруппаРедактирование.Доступность 			= Объект.Редактирование;
	Элементы.ГруппаВставить.Доступность 				= Объект.Редактирование;

	Элементы.ФормаОткрытьРодительскоеМестоположение.Видимость = ЗначениеЗаполнено(Объект.Родитель);
		
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура ОбновитьПредставление()
	
	Представление = Справочники.Местоположения.ПредставлениеМестоположения(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСхемуИзБД()
	ЗнОбъект = РеквизитФормыВЗначение("Объект");
	Результат = ЗнОбъект.Схема.Получить();
	Если Результат <> Неопределено Тогда
		ТабДокумент = Результат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьСхему()
	ТабДокумент.Очистить();
	Макет = Справочники.Местоположения.ПолучитьМакет("МакетПустойСхемы");
	ТабДокумент.Вывести(Макет);	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОчиститьСхемуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = Неопределено ИЛИ Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСхему();

КонецПроцедуры

&НаСервере
// Процедура объединяет ячейки области.
//
// Параметры
//  ИмяОбласти  - Строка - Имя области для объединения.
//
Процедура ОбъединитьОбласть(ИмяОбласти)
	
	Область = ТабДокумент.Область(ИмяОбласти);
	Область.Объединить();
	
КонецПроцедуры // ОбъединитьОбласть()

&НаСервере
// Процедура разъединяет ячейки области.
//
// Параметры
//  ИмяОбласти  - Строка - Имя области для объединения.
//
Процедура РазъединитьОбласть(ИмяОбласти)
	
	Область = ТабДокумент.Область(ИмяОбласти);
	Область.Разъединить();
	
КонецПроцедуры // ОбъединитьОбласть()

&НаСервере
Процедура ПоместитьФайлОбъекта(ИмяОбласти, АдресВременногоХранилища)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Рисунок = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рисунок.Картинка = ДвоичныеДанные;
	Рисунок.Расположить(ТабДокумент.Область(ИмяОбласти));
	Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
	Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	
	Модифицированность = Истина;
	УдалитьИзВременногоХранилища(АдресВременногоХранилища);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзображениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат <> Неопределено Тогда
        Адрес = ПоместитьВоВременноеХранилище(Результат);
        ТекущаяОбласть = ТабДокумент.ТекущаяОбласть;
        ПоместитьФайлОбъекта(ТекущаяОбласть.Имя, Адрес);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВставитьФигуруНаСервере(ИмяОбласти, ТипЛинии)
	Рисунок = ТабДокумент.Рисунки.Добавить(ТипЛинии);
	Рисунок.Расположить(ТабДокумент.Область(ИмяОбласти));
	Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьЦветФонаОбластиСтрокой(ИмяОбласти)
	Попытка
		Если ТипЗнч(ТабДокумент.Область(ИмяОбласти)) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Возврат ЗначениеВСтрокуВнутр(ТабДокумент.Область(ИмяОбласти).ЦветФона);
		КонецЕсли;		
	Исключение
	КонецПопытки;
	
	Попытка
		Если ТипЗнч(ТабДокумент.Рисунки[ИмяОбласти]) = Тип("РисунокТабличногоДокумента") Тогда
			Возврат ЗначениеВСтрокуВнутр(ТабДокумент.Рисунки[ИмяОбласти].ЦветФона);
		КонецЕсли;			
	Исключение
	КонецПопытки;
	
	Возврат "";
КонецФункции

&НаСервере
Функция ПолучитьЦветФонаОбластиИзСтроки(Стр)
	
	Попытка
		Возврат ЗначениеИзСтрокиВнутр(Стр);
	Исключение
		Возврат WebЦвета.Белый;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ВключатьИерархиюВПредставлениеПриИзменении(Элемент)
	
	ОбновитьПредставление();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМестоХраненияИзСправочникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.МестаХранения.ТекущиеДанные;
		
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Результат) Тогда
			ТекущиеДанные.МестоХранения	= Результат;
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокМестХранения(Текст)
	
	СписокМестХранения = Новый Массив;
	Для Каждого Строка Из Объект.МестаХранения Цикл
		Если ЗначениеЗаполнено(Строка.МестоХранения) Тогда
			СписокМестХранения.Добавить(Строка.МестоХранения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Справочники.МестаХранения.АвтоПодборМестоХранения(СписокМестХранения, Текст);
		
КонецФункции;

#КонецОбласти

мЦветОбластиМестаХранения 			= Новый Цвет(255, 209, 253);
мЦветОбластиКарточкиНоменклатуры 	= Новый Цвет(163, 255, 226);