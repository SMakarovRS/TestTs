
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	БиблиотекаКартинокДелаВРаботе 						= БиблиотекаКартинок.ДелаВРаботе;
	БиблиотекаКартинокДелаВРаботеИНедавноЗавершенные 	= БиблиотекаКартинок.ДелаВРаботеИНедавноЗавершенные;
	БиблиотекаКартинокДелаВРаботеИВсеЗавершенные 		= БиблиотекаКартинок.ДелаВРаботеИВсеЗавершенные;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
    БазовыеЦвета 		= ЗначениеИзСтрокиВнутр(ПолучитьОбщийМакет("БазовыеЦвета").ПолучитьТекст());
	Элементы.Дерево.Отображение = ОтображениеТаблицы.Дерево;
	АктивныйВид     	= Справочники.ВидыДел.ПустаяСсылка();
    Inbox           	= Справочники.Дела.Inbox();
    ДобавленноеДело 	= Справочники.Дела.ПустаяСсылка();
	
	ОбновитьСписокОбщихКонтекстов();	

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьВиды(Истина);
	ОбновитьДерево();
	ОбновитьКартинкуРежимаПросмотраДереваКлиент();
	
	Элементы.ФормаГруппаСоздать.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша._1, Ложь, Истина, Ложь);
	Элементы.ФормаНоваяПоддело.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша._2, Ложь, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеВидаДел" Тогда
		Если АктивныйВид = Источник Тогда
			ПереключитьАктивныйВид(АктивныйВид);
		КонецЕсли;
		ОбновитьВиды();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НапоминанияПользователя"
		ИЛИ ИмяСобытия = "Запись_БыстрогоВводаДел" Тогда
		ОбновитьДерево(,Истина);
		ОбновитьВиды();
    КонецЕсли;
    
    Если ИмяСобытия = "ИзменениеАвтоформатированиеДел" Тогда
		ОбновитьДерево();
		ОбновитьВиды();        
    КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Попытка
		ВидимостьПоиска 			= Настройки.ВидимостьПоиска;
        Элементы.ФормаПоиск.Пометка = ВидимостьПоиска;
	Исключение
		ВидимостьПоиска = Ложь;
        ПоискВТеме      = Истина;
        ПоискВОписании  = Истина;
		Элементы.ФормаПоиск.Пометка = Ложь;
    КонецПопытки;
    
    Если Параметры.Свойство("Сегодня") Тогда
        
        АктивныйВид = УправлениеДелами.НайтиВидДелаПоИдентификатору("Today");
        
    ИначеЕсли Параметры.Свойство("Просрочено") Тогда
        
        АктивныйВид = УправлениеДелами.НайтиВидДелаПоИдентификатору("Expired");
		
	Иначе
		                 
		Если Настройки.Получить("АктивныйВид") <> Неопределено Тогда
			АктивныйВид = Настройки.Получить("АктивныйВид");
			Если НЕ ЗначениеЗаполнено(АктивныйВид) Тогда
				АктивныйВид = УправлениеДелами.НайтиВидДелаПоИдентификатору("Inbox");
			КонецЕсли;
		Иначе
			АктивныйВид = УправлениеДелами.НайтиВидДелаПоИдентификатору("Inbox");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьВидимостьДоступность();
	
	Структура 				= СтруктураВидаНаСервере(АктивныйВид);
	РежимПросмотраДерева 	= Структура.РежимПросмотраДерева;
	ИерархическийВид		= Структура.ИерархическийВид;
	ИспользуетToDo			= Структура.ИспользуетToDo;
	ИспользуетГруппировки	= Структура.ИспользуетГруппировки;
	
	// Выводим столбцы
	УстановитьСтолбцы(Структура.СписокСтолбцов);
	ОбновитьСтрокуРезультатыПоиска();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Важность", Важность), Истина);
	ОбновитьВиды();
	ОбновитьУсловноеОформление(СписокВидимыхДел);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПриИзменении(Элемент)
	
	ПриИзмененииРеквизита(Новый Структура("Начало", Начало));
	ОбновитьСписокВыбораКрайнейДаты("Начало");
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПриИзменении(Элемент)
	
	ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
	ОбновитьСписокВыбораКрайнейДаты("Срок");
		
КонецПроцедуры

&НаКлиенте
Процедура СрочностьПриИзменении(Элемент)
	
	ПриИзмененииРеквизита(Новый Структура("Срочность", Срочность));
	
КонецПроцедуры

&НаКлиенте
Процедура УсилиеПриИзменении(Элемент)
	
	ПриИзмененииРеквизита(Новый Структура("Усилие", Усилие));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦелиПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("ВидЦели", ВидЦели), Истина);
	ОбновитьВиды();
	ОбновитьУсловноеОформление(СписокВидимыхДел, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВремяПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("ИспользоватьВремя", ИспользоватьВремя), Истина);
	ОбновитьРеквизитыДелаПринудительно();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ПриИзмененииРеквизита(Новый Структура("Описание", Описание));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыбратьКонтексты(Неопределено);
	СтандартнаяОбработка = Ложь;	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстыОчистка(Элемент, СтандартнаяОбработка)
	
	УбратьВсеКонтексты(Неопределено);
	Контексты = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоПапкаПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("ЭтоПапка", ЭтоПапка), Истина);
	ОбновитьВиды();
	ОбновитьУсловноеОформление(СписокВидимыхДел);
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьВToDoПриИзменении(Элемент)

	ПриИзмененииРеквизитаБезОбновления(Новый Структура("СпрятатьВToDo", СпрятатьВToDo), Истина);
	ОбновитьВиды();
	ОбновитьУсловноеОформление(СписокВидимыхДел);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНачалоПриИзменении(Элемент)
		
	Начало = ?(ИспользоватьНачало = Истина, ОбщегоНазначенияКлиент.ДатаСеанса(), Дата(1, 1, 1));
	ПриИзмененииРеквизита(Новый Структура("ИспользоватьНачало,Начало", ИспользоватьНачало, Начало));
	ОбновитьРеквизитыДелаПринудительно();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоПроектПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("ЭтоПроект", ЭтоПроект), Истина);
	Элементы.СтатусПроекта.Доступность	= ЭтоПроект;
	Элементы.ПроцентПроекта.Доступность	= ЭтоПроект;
	ОбновитьВиды();
	ОбновитьУсловноеОформление(СписокВидимыхДел, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПроектаПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("ПроцентПроекта", ПроцентПроекта), Истина);
	ОбновитьВиды();
	ОбновитьУсловноеОформление(СписокВидимыхДел, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПроектаПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("СтатусПроекта", СтатусПроекта), Истина);
	ОбновитьВиды();
	ОбновитьУсловноеОформление(СписокВидимыхДел, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОбновитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбзорПриИзменении(Элемент)
	
	ПриИзмененииРеквизита(Новый Структура("Обзор", Обзор));
	Если ДатаСледующегоОбзора = Дата(1, 1, 1) Тогда
		ДатаСледующегоОбзора = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСледующегоОбзораПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("ДатаСледующегоОбзора", ДатаСледующегоОбзора), Истина);
	ОбновитьВиды();
	ОбновитьУсловноеОформление(СписокВидимыхДел, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбзорКаждыеПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("ОбзорКаждые", ОбзорКаждые), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбзорПериодПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("ОбзорПериод", ОбзорПериод), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныйОбъектПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("СвязанныйОбъект", СвязанныйОбъект), Истина);
	ОбновитьВиды();
	ОбновитьУсловноеОформление(СписокВидимыхДел, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыПоиска

&НаКлиенте
Процедура ПоискВТемеПриИзменении(Элемент)
	
	ОбновитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискВОписанииПриИзменении(Элемент)
	
	ОбновитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискВКонтекстахПриИзменении(Элемент)
	
	ОбновитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискСтатусПриИзменении(Элемент)
	
	ОбновитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоискаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПерейтиИзТаблицыПоискаКДелу", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДерева

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьРеквизитыДела", 0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Возврат;
    КонецЕсли;
    
    Если ТекущиеДанные.ЭтоГруппировка = Истина Тогда
    	Возврат;
    КонецЕсли; 
	
	Структура = Новый Структура();
	Структура.Вставить("Тема", ТекущиеДанные.Тема);
	
	РодительСтрока = ТекущиеДанные.ПолучитьРодителя();
	Если РодительСтрока <> Неопределено Тогда
		Структура.Вставить("Родитель", РодительСтрока.Дело);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Дело = ОбновитьДело(Неопределено, Структура);
		ТекущиеДанные.Дело = Дело;		
	Иначе
		Дело = ОбновитьДело(ТекущиеДанные.Дело, Структура);
    КонецЕсли;    
	
	Если ЗначениеЗаполнено(ДобавленноеДело) Тогда
    	ДобавленноеДело = ПредопределенноеЗначение("Справочник.Дела.ПустаяСсылка");
        ОбновитьДерево();
	КонецЕсли;
	
	ОбновитьРеквизитыДелаНаСервере(ТекущиеДанные);
    ОбновитьВиды();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередУдалением(Элемент, Отказ)
    
    Отказ = Истина;
    
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
    Если ТекущиеДанные.ЭтоГруппировка = Истина Тогда
    	Возврат;
    КонецЕсли; 
    
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаПередУдалением", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Удалить выделенные дела?'"), РежимДиалогаВопрос.ДаНет, 60);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаПередУдалением(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИД = Неопределено;
	Для Каждого Строки Из Элементы.Дерево.ВыделенныеСтроки Цикл
		ТекСтрока 	= Дерево.НайтиПоИдентификатору(Строки);
		ИД 			= ТекСтрока.РеквизитДопУпорядочивания;
		УдалитьДелаНаСервере(ТекСтрока.Дело);
	КонецЦикла;
	
	// Ищем ближайшее дело, которое осталось видимым и делаем его активным.
	Если ИД <> Неопределено И СписокВидимыхДел.Количество() > 0 Тогда
		
		Дело = ПолучитьБлижайшееДелоПоРеквизитуДопУпорядочивания(ИД);
		Если Дело <> Неопределено Тогда
			ТекущееДело = Дело;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДерево();
	ОбновитьВиды();
	ТекущийЭлемент = Элементы.Дерево;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииЯчейки(Элемент)
	
	Попытка
		ИмяЭлемента 		= Элемент.ТекущийЭлемент.Имя;
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТекущаяЯчейкаДерева = ИмяЭлемента Тогда
		Возврат;
	КонецЕсли;
	ТекущаяЯчейкаДерева = ИмяЭлемента;
	
	КонтекстноеМеню 	= Элементы.Дерево.КонтекстноеМеню.ПодчиненныеЭлементы;
	КонтекстноеМеню.ДеревоКонтекстноеМенюТема.Видимость 		= Ложь;
	КонтекстноеМеню.ДеревоКонтекстноеМенюСрок.Видимость 		= Ложь;
	КонтекстноеМеню.ДеревоКонтекстноеМенюКонтексты.Видимость 	= Ложь;
	КонтекстноеМеню.ДеревоКонтекстноеМенюИзбранное.Видимость 	= Ложь;
	КонтекстноеМеню.ДеревоКонтекстноеМенюОтметки.Видимость 		= Ложь;
    
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;    
    
	Если ТекущиеДанные.ЭтоГруппировка = Истина Тогда
		Возврат;
	КонецЕсли;    
    	
	Если ИмяЭлемента = "ДеревоСрок" Тогда
		
		КонтекстноеМеню.ДеревоКонтекстноеМенюСрок.Видимость = Истина;
		
		ТекДата         = НачалоЧаса(ОбщегоНазначенияКлиент.ДатаСеанса()) + 3600;
		Элементы.ДеревоКонтекстноеМенюСегодня.Заголовок = СтрШаблон("%1 (%2)", Формат(ТекДата, "ДФ='ддд д МММ'"),
			НСтр("ru = 'Сегодня'"));
		ТекДата = ТекДата + 86400;
		Элементы.ДеревоКонтекстноеМенюЗавтра.Заголовок  = СтрШаблон("%1 (%2)", Формат(ТекДата, "ДФ='ддд д МММ'"), 
			НСтр("ru = 'Завтра'"));
		ТекДата = ТекДата + 86400;
		Элементы.ДеревоКонтекстноеМенюПлюс2.Заголовок   = СтрШаблон("%1 (%2)", Формат(ТекДата, "ДФ='ддд д МММ'"), 
			НСтр("ru = '+ 2 дн.'"));
		ТекДата = ТекДата + 86400;
		Элементы.ДеревоКонтекстноеМенюПлюс3.Заголовок   = СтрШаблон("%1 (%2)", Формат(ТекДата, "ДФ='ддд д МММ'"), 
			НСтр("ru = '+ 3 дн.'"));
		ТекДата = ТекДата + 86400;                     
		Элементы.ДеревоКонтекстноеМенюПлюс4.Заголовок   = СтрШаблон("%1 (%2)", Формат(ТекДата, "ДФ='ддд д МММ'"), 
			НСтр("ru = '+ 4 дн.'"));
		ТекДата = ТекДата + 86400;
		Элементы.ДеревоКонтекстноеМенюПлюс5.Заголовок   = СтрШаблон("%1 (%2)", Формат(ТекДата, "ДФ='ддд д МММ'"), 
			НСтр("ru = '+ 5 дн.'"));
		ТекДата = ТекДата + 86400;
		Элементы.ДеревоКонтекстноеМенюПлюс6.Заголовок   = СтрШаблон("%1 (%2)", Формат(ТекДата, "ДФ='ддд д МММ'"), 
			НСтр("ru = '+ 6 дн.'"));
		
	ИначеЕсли ИмяЭлемента = "ДеревоКонтексты" Тогда
		
		КонтекстноеМеню.ДеревоКонтекстноеМенюКонтексты.Видимость = Истина;
		
	ИначеЕсли ИмяЭлемента = "ДеревоИзбранное" Тогда
		
		КонтекстноеМеню.ДеревоКонтекстноеМенюИзбранное.Видимость = Истина;
		
	ИначеЕсли ИмяЭлемента = "ДеревоОтметка" Тогда
		
		КонтекстноеМеню.ДеревоКонтекстноеМенюОтметки.Видимость = Истина;
		
	Иначе
		
		КонтекстноеМеню.ДеревоКонтекстноеМенюТема.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыполненоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
    КонецЕсли;    
    Если ТекущиеДанные.ЭтоГруппировка ИЛИ ТекущиеДанные.ЭтоПапка Тогда
        ТекущиеДанные.Выполнено = Ложь;
    	Возврат;
    КонецЕсли;
	
	Массив = ПометитьВложенныеЭлементы(ТекущиеДанные.Дело, ТекущиеДанные.Выполнено);	
	
	МассивКлиент = Новый Массив;
	ПеречитатьДанныеВДереве(Дерево, Массив, МассивКлиент);
	
	Если РежимПросмотраДерева = 0 И ТекущиеДанные.Выполнено = Истина Тогда
		УдалитьСтрокиНаКлиенте(МассивКлиент);
	КонецЕсли;
	ОбновитьВиды();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбработкаЗапросаОбновления()
	
	ОбновитьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтекстыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьКонтексты(Неопределено);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
    СтандартнаяОбработка=Ложь;

    РеквизитДерево = ЭтаФорма["Дерево"];

    ИДПриемник = Строка;
	
    // Если ИДПриемник = Неопределено => Корень дерева.
    Приемник = ?(ИДПриемник = Неопределено, Неопределено, РеквизитДерево.НайтиПоИдентификатору(ИДПриемник));

    МассивИДИсточник = ПараметрыПеретаскивания.Значение;

	Для Каждого ИДИсточник Из МассивИДИсточник Цикл
		
        Источник = РеквизитДерево.НайтиПоИдентификатору(ИДИсточник);
		ИсточникРодитель = Источник.ПолучитьРодителя();
        НоваяСтрока = СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник);
        // Производится копирование в корень.
        // Для "красоты" развернем вновь созданную ветвь.
        Если Приемник = Неопределено И НоваяСтрока <> Неопределено Тогда
            Элементы["Дерево"].Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
		КонецЕсли;
		
		НовыйРодитель = ?(ИДПриемник = Неопределено, Неопределено, Дерево.НайтиПоИдентификатору(ИДПриемник));	
		ИзменитьРеквизитыДела(Источник.Дело, Новый Структура("Родитель", ?(НовыйРодитель = Неопределено,
			ПредопределенноеЗначение("Справочник.Дела.ПустаяСсылка"),НовыйРодитель.Дело)));
		
		// У новой строки меняем иконку.
		Если НовыйРодитель <> Неопределено И НовыйРодитель.ЭтоПапка Тогда
			НовыйРодитель.Картинка = 2;
		КонецЕсли;
		// У старого родителя, если нет дочерних и это папка, меняем Картинку.
		Если ИсточникРодитель <> Неопределено И ИсточникРодитель.ЭтоПапка = Истина Тогда
			Если ИсточникРодитель.ПолучитьЭлементы().Количество() = 0 Тогда
				ИсточникРодитель.Картинка = 1;
			КонецЕсли;
		КонецЕсли;
		
    КонецЦикла;

    // Для "красоты" развернем ветвь-родителя
    Если НЕ Приемник = Неопределено Тогда
        Элементы["Дерево"].Развернуть(ИДПриемник, Истина);
    КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
    // Узел нельзя переносить в узлы подчиненные ему самому
    // т.е. родительский узел нельзя переносить в дочерние.
    // Проверим это условие для всех выделенных элементов

    СтандартнаяОбработка = Ложь;
	Если ИерархическийВид = Ложь Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;

    РеквизитДерево = ЭтаФорма["Дерево"];

    ИДНовыйРодитель = Строка;
    // Если НовыйРодитель = Неопределено => Корень дерева
    НовыйРодитель = ?(ИДНовыйРодитель = Неопределено, Неопределено,
		РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель));

    МассивИДПереносимыхЭлементов = ПараметрыПеретаскивания.Значение;

    Для Каждого ИДПереносимыйЭлемент Из МассивИДПереносимыхЭлементов Цикл

        ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(ИДПереносимыйЭлемент);

        Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент, НовыйРодитель) Тогда
            ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
            Прервать;
		КонецЕсли;
		
    КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваВидов

&НаКлиенте
Процедура ВидыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Виды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мПараметры = Новый Структура("Ключ", ТекущиеДанные.Вид);
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ОткрытьФорму("Справочник.ВидыДел.ФормаГруппы", мПараметры, ЭтаФорма);
	Иначе
		ОткрытьФорму("Справочник.ВидыДел.ФормаОбъекта", мПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Виды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если АктивныйВид <> ТекущиеДанные.Вид И ТекущиеДанные.ЭтоГруппа = Ложь Тогда
		
		ПереключитьАктивныйВид(ТекущиеДанные.Вид);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НовоеДело(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущееДело = СоздатьДело(Неопределено, Ложь);
	Иначе
		ТекущееДело = СоздатьДело(ТекущиеДанные.Дело, Ложь);
    КонецЕсли;
    
    ДобавленноеДело = ТекущееДело;
	ОбновитьДерево();
	Элементы.Дерево.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяПоддело(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущееДело = СоздатьДело(Неопределено, Истина);
	Иначе
		ТекущееДело = СоздатьДело(ТекущиеДанные.Дело, Истина);
	КонецЕсли;
    
    ДобавленноеДело = ТекущееДело;
	ОбновитьДерево();
	Элементы.Дерево.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура Подсветить(Команда)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Подсвечено", Неопределено), Истина);
	ОбновитьДерево(,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеЗадачи(Команда)
	
	СвернутьРазвернутьДерево(Дерево.ПолучитьЭлементы(), Ложь); 
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеЗадачи(Команда)
	
	СвернутьРазвернутьДерево(Дерево.ПолучитьЭлементы(), Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура Завтра(Команда)
	
	Срок = НачалоЧаса(ОбщегоНазначенияКлиент.ДатаСеанса()) + 3600 + 86400;
	ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
	ОбновитьСписокВыбораКрайнейДаты("Срок");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДату(Команда)
	
	Срок = Дата(1, 1, 1);
	ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
	ОбновитьСписокВыбораКрайнейДаты("Срок");
	
КонецПроцедуры

&НаКлиенте
Процедура Плюс2(Команда)
	
	Срок = НачалоЧаса(ОбщегоНазначенияКлиент.ДатаСеанса()) + 3600 + 2 * 86400;
	ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
	ОбновитьСписокВыбораКрайнейДаты("Срок");
	
КонецПроцедуры

&НаКлиенте
Процедура Плюс3(Команда)
	
	Срок = НачалоЧаса(ОбщегоНазначенияКлиент.ДатаСеанса()) + 3600 + 3 * 86400;
	ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
	ОбновитьСписокВыбораКрайнейДаты("Срок");
	
КонецПроцедуры

&НаКлиенте
Процедура Плюс4(Команда)
	
	Срок = НачалоЧаса(ОбщегоНазначенияКлиент.ДатаСеанса()) + 3600 + 4 * 86400;
	ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
	ОбновитьСписокВыбораКрайнейДаты("Срок");
	
КонецПроцедуры

&НаКлиенте
Процедура Плюс5(Команда)
	
	Срок = НачалоЧаса(ОбщегоНазначенияКлиент.ДатаСеанса()) + 3600 + 5 * 86400;
	ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
	ОбновитьСписокВыбораКрайнейДаты("Срок");
	
КонецПроцедуры

&НаКлиенте
Процедура Плюс6(Команда)
	
	Срок = НачалоЧаса(ОбщегоНазначенияКлиент.ДатаСеанса()) + 3600 + 6 * 86400;
	ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
	ОбновитьСписокВыбораКрайнейДаты("Срок");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяНеделя(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
	
		ЗначенияРеквизитов = ЗначенияРеквизитовОбъекта(ТекущиеДанные.Дело);
		Срок = ?(ЗначенияРеквизитов.Срок = Дата(1, 1, 1), ОбщегоНазначенияКлиент.ДатаСеанса() - 7 * 86400,
			ЗначенияРеквизитов.Срок - 7 * 86400);
		ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
		ОбновитьСписокВыбораКрайнейДаты("Срок");
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийДень(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
	
		ЗначенияРеквизитов = ЗначенияРеквизитовОбъекта(ТекущиеДанные.Дело);
		Срок = ?(ЗначенияРеквизитов.Срок = Дата(1, 1, 1), ОбщегоНазначенияКлиент.ДатаСеанса() - 86400,
			ЗначенияРеквизитов.Срок - 86400);
		ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
		ОбновитьСписокВыбораКрайнейДаты("Срок");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийДень(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
	
		ЗначенияРеквизитов = ЗначенияРеквизитовОбъекта(ТекущиеДанные.Дело);
		Срок = ?(ЗначенияРеквизитов.Срок = Дата(1, 1, 1), ОбщегоНазначенияКлиент.ДатаСеанса() + 86400,
			ЗначенияРеквизитов.Срок + 86400);
		ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
		ОбновитьСписокВыбораКрайнейДаты("Срок");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяНеделя(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
	
		ЗначенияРеквизитов = ЗначенияРеквизитовОбъекта(ТекущиеДанные.Дело);
		Срок = ?(ЗначенияРеквизитов.Срок = Дата(1, 1, 1), ОбщегоНазначенияКлиент.ДатаСеанса() + 7 * 86400,
			ЗначенияРеквизитов.Срок + 7 * 86400);
		ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
		ОбновитьСписокВыбораКрайнейДаты("Срок");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сегодня(Команда)
	
	Срок = НачалоЧаса(ОбщегоНазначенияКлиент.ДатаСеанса()) + 3600;
	ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
	ОбновитьСписокВыбораКрайнейДаты("Срок");
	
КонецПроцедуры

&НаКлиенте
Процедура Календарь(Команда)
	
	ПоказатьВводДаты(Новый ОписаниеОповещения("КалендарьЗавершение", ЭтотОбъект,Новый Структура("Срок", Срок)),
		Срок, НСтр("ru = 'Введите дату'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьЗавершение(Дата, ДополнительныеПараметры) Экспорт
	
	Если Дата <> Неопределено Тогда
		Если ИспользоватьВремя Тогда
			Сек = Срок - НачалоДня(Срок);
			Срок = Дата + Сек;
		Иначе
			Срок = Дата;
		КонецЕсли;
		ПриИзмененииРеквизита(Новый Структура("Срок", Срок));
		ОбновитьСписокВыбораКрайнейДаты("Срок");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтильЖирный(Команда)
		
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.СтильЖирный.Пометка = НЕ Элементы.СтильЖирный.Пометка;
		Стиль = ОбработатьСтиль(ТекущиеДанные.Дело);
		МассивДел = ПриИзмененииРеквизитаБезОбновления(Новый Структура("Стиль", Стиль), Истина);		
		ОбновитьУсловноеОформление(СписокВидимыхДел);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтильКурсив(Команда)

	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.СтильКурсив.Пометка = НЕ Элементы.СтильКурсив.Пометка;
		Стиль = ОбработатьСтиль(ТекущиеДанные.Дело);
		МассивДел = ПриИзмененииРеквизитаБезОбновления(Новый Структура("Стиль", Стиль), Истина);		
		ОбновитьУсловноеОформление(СписокВидимыхДел);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтильПодчеркнутый(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.СтильПодчеркнутый.Пометка = НЕ Элементы.СтильПодчеркнутый.Пометка;
		Стиль = ОбработатьСтиль(ТекущиеДанные.Дело);
		МассивДел = ПриИзмененииРеквизитаБезОбновления(Новый Структура("Стиль", Стиль), Истина);		
		ОбновитьУсловноеОформление(СписокВидимыхДел);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтильЦветТекста(Команда)
	
    ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
    Если ТекущиеДанные <> Неопределено Тогда
        мПараметры = Новый Структура("РедактируемыйЦвет", ТекущиеДанные.ЦветТекста);
        Результат = Неопределено;
        ОткрытьФорму("ОбщаяФорма.ФормаВыбораЦвета", мПараметры, ЭтаФорма,,,,
			Новый ОписаниеОповещения("СтильЦветТекстаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);        
    КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтильЦветТекстаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
    Если ТекущиеДанные <> Неопределено И Результат <> Неопределено Тогда
		МассивДел = ПриИзмененииРеквизитаБезОбновления(Новый Структура("ЦветТекста",
			РаботаСЦветомКлиентСервер.ЦветВHex(Результат)), Истина);		
		ОбновитьУсловноеОформление(СписокВидимыхДел);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтильЦветФона(Команда)
    
    ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
    Если ТекущиеДанные <> Неопределено Тогда        
        мПараметры = Новый Структура("РедактируемыйЦвет", ТекущиеДанные.ЦветФона);
        Результат = Неопределено;
        ОткрытьФорму("ОбщаяФорма.ФормаВыбораЦвета", мПараметры, ЭтаФорма,,,,
			Новый ОписаниеОповещения("СтильЦветФонаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
    КонецЕсли;
    	
КонецПроцедуры

&НаКлиенте
Процедура СтильЦветФонаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
    ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
    Если ТекущиеДанные <> Неопределено И Результат <> Неопределено Тогда
		МассивДел = ПриИзмененииРеквизитаБезОбновления(Новый Структура("ЦветФона", РаботаСЦветомКлиентСервер.ЦветВHex(Результат)),
			Истина);		
		ОбновитьУсловноеОформление(СписокВидимыхДел);
    КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонтексты(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
    КонецЕсли;
    
    Если ТекущиеДанные.ЭтоГруппировка = Истина Тогда
    	Возврат;
    КонецЕсли; 
	
	мПараметры = Новый Структура;
	Массив = Новый Массив;
	Для Каждого Эл Из ТекущиеДанные.СписокКонтекстов Цикл
		Массив.Добавить(Эл.Значение);
	КонецЦикла;
	мПараметры.Вставить("Контексты", Массив);
	
	ОткрытьФорму("Справочник.Контексты.Форма.ДиаглогВыбора", мПараметры, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ВыбратьКонтекстыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонтекстыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Контексты", Результат), Истина);
	Контексты = "";
	Для Каждого Стр Из Результат Цикл
		Контексты = Контексты + ?(ПустаяСтрока(Контексты),"","; ") + Стр;
	КонецЦикла;
	ОбновитьВиды();

КонецПроцедуры

&НаКлиенте
Процедура УбратьВсеКонтексты(Команда)
	
	Массив = Новый Массив;
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Контексты", Массив), Истина);
	Контексты = "";
	ОбновитьВиды();
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоВверх(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущееДело = ТекущиеДанные.Дело;
	МассивДочерних = Новый Массив;
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		РодительДело = ПредопределенноеЗначение("Справочник.Дела.ПустаяСсылка");
		Для Каждого Строки Из Дерево.ПолучитьЭлементы() Цикл
			МассивДочерних.Добавить(Строки.Дело);
		КонецЦикла;
	Иначе			
		РодительДело = ТекущиеДанные.ПолучитьРодителя().Дело;
		Для Каждого Строки Из ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы() Цикл
			МассивДочерних.Добавить(Строки.Дело);
		КонецЦикла;
	КонецЕсли;	
	ПереместитьЭлемент(РодительДело, ТекущееДело, МассивДочерних, "Вверх");
	ОбновитьДерево(,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоВниз(Команда)
	
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущееДело = ТекущиеДанные.Дело;
	МассивДочерних = Новый Массив;
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		РодительДело = ПредопределенноеЗначение("Справочник.Дела.ПустаяСсылка");
		Для Каждого Строки Из Дерево.ПолучитьЭлементы() Цикл
			МассивДочерних.Добавить(Строки.Дело);
		КонецЦикла;
	Иначе			
		РодительДело = ТекущиеДанные.ПолучитьРодителя().Дело;
		Для Каждого Строки Из ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы() Цикл
			МассивДочерних.Добавить(Строки.Дело);
		КонецЦикла;
	КонецЕсли;	
	ПереместитьЭлемент(РодительДело, ТекущееДело, МассивДочерних, "Вниз");
	ОбновитьДерево(,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранное(Команда)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Избранное", Истина), Истина);
	ОбновитьВиды();
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьИзИзбранного(Команда)

	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Избранное", Ложь), Истина);
	ОбновитьВиды();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьИзбранное(Команда)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Избранное", Неопределено), Истина);
	ОбновитьВиды();
	
КонецПроцедуры

&НаКлиенте
Функция ПриИзмененииРеквизитаБезОбновления(Знач Структура, Знач ПерезаполнитьИзСтруктуры = Ложь)
	
	мТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	МассивДел = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Дерево.ВыделенныеСтроки;
	Индекс = ВыделенныеСтроки.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		Стр = ВыделенныеСтроки[Индекс];
		
		ТекущиеДанные = Дерево.НайтиПоИдентификатору(Стр);
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Тогда
				Индекс = Индекс - 1;
				Продолжить;
			КонецЕсли;
			
			МассивДел.Добавить(ТекущиеДанные.Дело);
			
			ИзменитьРеквизитыДела(ТекущиеДанные.Дело, Структура);
			
			Если ПерезаполнитьИзСтруктуры = Истина Тогда
				Для Каждого КЗ Из Структура Цикл
					
					ИмяРеквизита 	= КЗ.Ключ;
					Значение		= КЗ.Значение;
					
					Если (ИмяРеквизита = "Избранное" И Значение = Неопределено) 
						ИЛИ (ИмяРеквизита = "Подсвечено" И Значение = Неопределено) Тогда
						ТекущиеДанные[ИмяРеквизита] = НЕ ТекущиеДанные[ИмяРеквизита];
					ИначеЕсли ИмяРеквизита = "Контексты" Тогда
						ТекущиеДанные.СписокКонтекстов.Очистить();
						ТекущиеДанные.Контексты = "";
						Для Каждого Эл Из Значение Цикл
							ТекущиеДанные.СписокКонтекстов.Добавить(Эл);
							ТекущиеДанные.Контексты = ТекущиеДанные.Контексты 
							    + ?(ПустаяСтрока(ТекущиеДанные.Контексты),"","; ")
								+ Строка(Эл);
						КонецЦикла;
					ИначеЕсли ИмяРеквизита = "СпрятатьВToDo" Тогда
						ТекущиеДанные[ИмяРеквизита] = Значение;
						Если Значение = Истина И ИспользуетToDo = Истина Тогда
							Родитель = ТекущиеДанные.ПолучитьРодителя();
							Если Родитель = Неопределено Тогда
								Дерево.ПолучитьЭлементы().Удалить(Дерево.ПолучитьЭлементы().Индекс(ТекущиеДанные));
							Иначе
								Родитель.ПолучитьЭлементы().Удалить(Родитель.ПолучитьЭлементы().Индекс(ТекущиеДанные));
							КонецЕсли;
							Прервать;
						КонецЕсли;
					ИначеЕсли ИмяРеквизита = "ИспользоватьВремя" Тогда
						ТекущиеДанные[ИмяРеквизита] = Значение;
						ТекущиеДанные["СрокСтрока"] = ПредставлениеДаты(ТекущиеДанные["Срок"], Значение);
					ИначеЕсли ИмяРеквизита = "Срок" Тогда
						ТекущиеДанные[ИмяРеквизита] = Значение;
						ТекущиеДанные["СрокСтрока"] = ПредставлениеДаты(Значение, ТекущиеДанные["ИспользоватьВремя"]);
					ИначеЕсли ИмяРеквизита = "ЭтоПапка" Тогда
						ТекущиеДанные[ИмяРеквизита] = Значение;
						КоличествоДочерних = ТекущиеДанные.ПолучитьЭлементы().Количество();
						Если Значение = Ложь Тогда
							ТекущиеДанные["Картинка"] = -1;
						Иначе
							ТекущиеДанные["Картинка"] = ?(КоличествоДочерних = 0, 1, 2);							
						КонецЕсли;
					ИначеЕсли ИмяРеквизита = "Уровень" Тогда
						// Ничего не делаем.
					Иначе
						ТекущиеДанные[ИмяРеквизита] = Значение;
					КонецЕсли;
				КонецЦикла;
				
				ТекущиеДанные.Вес = РассчитатьВесКлиент(ТекущиеДанные, мТекущаяДата);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	Возврат МассивДел;
	
КонецФункции

&НаКлиенте
Процедура ОтметкаЖелтая(Команда)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Отметка", 5), Истина);
	ОбновитьВиды();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкаЗеленая(Команда)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Отметка", 3), Истина);
	ОбновитьВиды();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкаКрасная(Команда)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Отметка", 4), Истина);
	ОбновитьВиды();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкаСиняя(Команда)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Отметка", 2), Истина);
	ОбновитьВиды();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкаЧерная(Команда)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Отметка", 1), Истина);
	ОбновитьВиды();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкаОчистить(Команда)
	
	ПриИзмененииРеквизитаБезОбновления(Новый Структура("Отметка", 0), Истина);
	ОбновитьВиды();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбзорПроведен(Команда)
	
	мТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если Обзор = Ложь Тогда		
		Обзор = Истина;		
	КонецЕсли;
	ДатаПоследнегоОбзора = мТекущаяДата;
	Если ОбзорПериод = 0 Тогда
		мТекущаяДата = мТекущаяДата + 86400 * ОбзорКаждые;
	ИначеЕсли ОбзорПериод = 1 Тогда
		мТекущаяДата = мТекущаяДата + 7 * 86400 * ОбзорКаждые;
	ИначеЕсли ОбзорПериод = 2 Тогда
		мТекущаяДата = ДобавитьМесяц(мТекущаяДата, 1 * ОбзорКаждые);
	ИначеЕсли ОбзорПериод = 3 Тогда
		мТекущаяДата = ДобавитьМесяц(мТекущаяДата, 3 * ОбзорКаждые);
	Иначе
		мТекущаяДата = ДобавитьМесяц(мТекущаяДата, 12 * ОбзорКаждые);
	КонецЕсли;
	ДатаСледующегоОбзора = мТекущаяДата;
	ПриИзмененииРеквизита(Новый Структура("Обзор, ДатаСледующегоОбзора, ДатаПоследнегоОбзора",
		Обзор, ДатаСледующегоОбзора, ДатаПоследнегоОбзора));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадание(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		РеквизитыДела = ЗначенияРеквизитовОбъекта(ТекущиеДанные.Дело);
		
		ДанныеЗаписиКалендаря = Новый Структура;
		ДанныеЗаписиКалендаря.Вставить("Наименование", РеквизитыДела.Тема);
		ДанныеЗаписиКалендаря.Вставить("Описание", РеквизитыДела.Описание);
		ДанныеЗаписиКалендаря.Вставить("Начало",
			?(РеквизитыДела.Срок = Дата(1, 1, 1), ОбщегоНазначенияКлиент.ДатаСеанса(), РеквизитыДела.Срок));
		
		мПараметры = Новый Структура;
		мПараметры.Вставить("ЗначенияЗаполнения", Новый Структура("ДанныеЗаписиКалендаря", ДанныеЗаписиКалендаря));
		ОткрытьФорму("Документ.Задание.ФормаОбъекта", мПараметры, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ВидимостьПоиска = НЕ ВидимостьПоиска;
	Элементы.ФормаПоиск.Пометка = ВидимостьПоиска;
	ОбновитьВидимостьДоступность();
	ОбновитьСтрокуРезультатыПоиска();
	ТекущийЭлемент = ?(ВидимостьПоиска, Элементы.СтрокаПоиска, Элементы.Дерево);	
	
КонецПроцедуры

&НаКлиенте
Процедура Контексты(Команда)
	
	ОткрытьФорму("Справочник.Контексты.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура Напомнить(Команда)
	
	ПараметрыФормы = Новый Структура("Источник", ТекущееДело);	
	ОткрытьФорму("РегистрСведений.НапоминанияПользователя.Форма.Напоминание", ПараметрыФормы, ТекущееДело);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинку(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Результат = Неопределено;	
		ОткрытьФорму("Справочник.Дела.Форма.ВыборКартинки", 
			Новый Структура("Картинка", ТекущиеДанные.Картинка),,,,, 
			Новый ОписаниеОповещения("ВыбратьИзображениеИзНабораЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзображениеИзНабораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Если Результат <> Неопределено Тогда
		МассивДел = ПриИзмененииРеквизитаБезОбновления(Новый Структура("Картинка", Результат), Истина);		
		ОбновитьУсловноеОформление(СписокВидимыхДел);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКартинкуИСтили(Команда)
	
    ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
    Если ТекущиеДанные <> Неопределено Тогда
		МассивДел = ПриИзмененииРеквизитаБезОбновления(Новый Структура("Картинка,Стиль,ЦветФона,ЦветТекста", -1, "", "", ""),
			Истина);		
		ОбновитьУсловноеОформление(СписокВидимыхДел);
    КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДел(Команда)
	
	ОткрытьФорму("Справочник.ВидыДел.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура МассовыйВвод(Команда)
	
	ОткрытьФорму("Справочник.Дела.Форма.БыстрыйВводДел",,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Автоформатирование(Команда)
    
    ОткрытьФорму("Справочник.АвтоформатированиеДел.ФормаСписка");
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсе(Команда)
	
	ОбновитьВиды(Истина);
	ОбновитьДерево(,Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура НаУровеньВыше(Команда)
	
	ПриИзмененииРеквизита(Новый Структура("Уровень", 1));
	
КонецПроцедуры

&НаКлиенте
Процедура НаУровеньНиже(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда

		Для Каждого Строки Из Элементы.Дерево.ВыделенныеСтроки Цикл
			
			ТекСтрока 	= Дерево.НайтиПоИдентификатору(Строки);
			
			Массив = СоседниеЭлементы(Дерево, ТекСтрока.Дело, Истина);
			Индекс = Массив.Найти(ТекСтрока.Дело);
			Если Индекс <> Неопределено Тогда
				Если Индекс >= 1 Тогда
					ИзменитьРеквизитыДела(ТекСтрока.Дело, Новый Структура("Родитель", Массив[Индекс - 1]));
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьДерево(,Истина);
		ОбновитьВиды();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДело(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Результат = Неопределено;	
		ОткрытьФорму("Справочник.Дела.ФормаВыбора", 
			Новый Структура("Ключ", ТекущиеДанные.Дело),,,,, 
			Новый ОписаниеОповещения("ПеренестиДелоЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДелоЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Если Результат <> Неопределено Тогда
		ПриИзмененииРеквизита(Новый Структура("Родитель", Результат));
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокус(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДелоФокус) Тогда
		СнятьФокус(Команда);
	Иначе
		НадписьФокус = СтрШаблон(НСтр("ru = 'Фокус: ""%1"". Нажмите крестик в углу для возврата фокуса'"),
			ТекущиеДанные.Дело);
		ДелоФокус = ТекущиеДанные.Дело;
	КонецЕсли;
	
	ОбновитьВидимостьДоступность();
	ОбновитьДерево(,Истина);
	ОбновитьВиды();	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФокус(Команда)
	
	Если НЕ ЗначениеЗаполнено(ДелоФокус) Тогда
		Возврат;
	КонецЕсли;
	
	ДелоФокус = ПредопределенноеЗначение("Справочник.Дела.ПустаяСсылка");
	
	ОбновитьВидимостьДоступность();
	ОбновитьДерево(,Истина);
	ОбновитьВиды();		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьВидимостьДоступность()
	
	Элементы.ГруппаПоиска.Видимость = ВидимостьПоиска;
	Элементы.ГруппаФокус.Видимость = ЗначениеЗаполнено(ДелоФокус);
	Элементы.ФормаУстановитьФокус.Пометка = ЗначениеЗаполнено(ДелоФокус);
	
КонецПроцедуры

&НаСервере
Функция СоздатьДело(Знач ТекущееДело, Знач Внутри = Ложь)
	
	Если ЗначениеЗаполнено(ТекущееДело) Тогда
	
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущееДело, "Родитель, РеквизитДопУпорядочивания");
		
		Дело = Справочники.Дела.СоздатьЭлемент();
		Если Внутри = Истина Тогда
			Дело.Родитель = ТекущееДело;
		Иначе
			Дело.Родитель = Реквизиты.Родитель;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Дело.Родитель) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ДелаКонтексты.Контекст КАК Контекст
				|ИЗ
				|	Справочник.Дела.Контексты КАК ДелаКонтексты
				|ГДЕ
				|	ДелаКонтексты.Ссылка = &Родитель
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДелаКонтексты.НомерСтроки";
			Запрос.УстановитьПараметр("Родитель", Дело.Родитель);
			ВыборкаКонтексты = Запрос.Выполнить().Выбрать();
			Пока ВыборкаКонтексты.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Дело.Контексты.Добавить(), ВыборкаКонтексты);
			КонецЦикла;
		КонецЕсли;
		
		Дело.Записать();
		
	Иначе
		
		Дело = Справочники.Дела.СоздатьЭлемент();
        Если АктивныйВид.Идентификатор = "Inbox" Тогда
        	Дело.Родитель = Inbox;
        КонецЕсли; 
		Дело.Записать();
		
	КонецЕсли;
	СписокВидимыхДел.Добавить(Дело.Ссылка);
		
	Возврат Дело.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДерево(Знач МассивРазвернутыхДел = Неопределено, Знач ПринудительноеОбновление = Ложь)
    
	// Запомним развернутые строки
	Если МассивРазвернутыхДел = Неопределено Тогда
		Массив = Новый Массив;
		МассивРазвернутыхДел(Дерево, Массив);
	Иначе
		Массив = МассивРазвернутыхДел;
	КонецЕсли;
	
	ВывестиДерево(ПринудительноеОбновление);
		
	// Восстанавливаем развернутые строки
	ВыделеннаяСтрока = Неопределено;
	ВосстановитьРазвернутыеДела(Дерево, Массив, ТекущееДело, ВыделеннаяСтрока);
	Если ВыделеннаяСтрока <> Неопределено Тогда
		Элементы.Дерево.ТекущаяСтрока = ВыделеннаяСтрока;
	Иначе
		ЭлементыДерева = Дерево.ПолучитьЭлементы();
		Для Каждого Строки Из Дерево.ПолучитьЭлементы() Цикл
			Элементы.Дерево.ТекущаяСтрока = Строки.ПолучитьИдентификатор();
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МассивРазвернутыхДел(Эл, Массив)
	
	Для Каждого Строки Из Эл.ПолучитьЭлементы() Цикл
		
		ИдентификаторСтроки = Строки.ПолучитьИдентификатор();
		Если Элементы.Дерево.Развернут(ИдентификаторСтроки) Тогда
			Массив.Добавить(Строки.Дело);
		КонецЕсли;
		МассивРазвернутыхДел(Строки, Массив);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьРазвернутыеДела(Эл, Знач Массив, Знач ВыделенноеДело, ВыделеннаяСтрока)
	
	Для Каждого Строки Из Эл.ПолучитьЭлементы() Цикл
		
		ИдентификаторСтроки = Строки.ПолучитьИдентификатор();
		
		Если Массив.Найти(Строки.Дело) <> Неопределено Тогда
			Элементы.Дерево.Развернуть(ИдентификаторСтроки, Ложь);
		КонецЕсли;
		
		Если ВыделеннаяСтрока = Неопределено И ВыделенноеДело = Строки.Дело Тогда
			ВыделеннаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		
		ВосстановитьРазвернутыеДела(Строки, Массив, ВыделенноеДело, ВыделеннаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиНаКлиенте(Знач МассивКлиент)
	
	Индекс = МассивКлиент.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Структура = МассивКлиент[Индекс];
		Если Структура.ЭтоПапка = Ложь Тогда
			Родитель = Структура.Строка.ПолучитьРодителя();
			Если Родитель = Неопределено Тогда
				Родитель = Дерево;
			КонецЕсли;
			Родитель.ПолучитьЭлементы().Удалить(Структура.Строка); 		
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьДанныеВДереве(Знач Эл, Знач Массив, МассивКлиент);
	
	Если Массив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строки Из Эл.ПолучитьЭлементы() Цикл
		
		НайденыйЭлемент = Неопределено;
		Для Каждого Эл Из Массив Цикл
			Если Эл.Дело = Строки.Дело Тогда
				НайденыйЭлемент = Эл;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденыйЭлемент <> Неопределено Тогда
			Строки.ДатаВыполнения = НайденыйЭлемент.ДатаВыполнения;
			Строки.Срок = НайденыйЭлемент.Срок;
			МассивКлиент.Добавить(Новый Структура("Строка,ЭтоПапка",Строки, НайденыйЭлемент.ЭтоПапка));
		КонецЕсли;
		ПеречитатьДанныеВДереве(Строки, Массив, МассивКлиент);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкиВДереве(Знач Эл, Знач Соответствие)
	
	Для Каждого Строки Из Эл.ПолучитьЭлементы() Цикл
		
		Картинка = Соответствие.Получить(Строки.Дело);
		Если Картинка <> Неопределено Тогда
			Строки.Картинка = Картинка;
		КонецЕсли;
		УстановитьКартинкиВДереве(Строки, Соответствие);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРодителейДела(Знач Дело)
	
	Массив = Новый Массив;	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Дела.Родитель КАК Родитель,
		|	Дела.Родитель.Родитель КАК РодительРодитель,
		|	Дела.Родитель.Родитель.Родитель КАК РодительРодительРодитель,
		|	Дела.Родитель.Родитель.Родитель.Родитель КАК РодительРодительРодительРодитель,
		|	Дела.Родитель.Родитель.Родитель.Родитель.Родитель КАК РодительРодительРодительРодительРодитель
		|ИЗ
		|	Справочник.Дела КАК Дела
		|ГДЕ
		|	Дела.Ссылка = &Дело"; 

	ТекДело = Дело;
	Пока Истина Цикл 
	    Запрос.УстановитьПараметр("Дело", ТекДело); 
	    Результат = Запрос.Выполнить(); 
	    Если Результат.Пустой() Тогда 
	        Прервать; 
	    КонецЕсли; 
	    Выборка = Результат.Выбрать(); 
	    Выборка.Следующий(); 
	    Для НомерКолонки = 0 По Результат.Колонки.Количество() - 1 Цикл 
	        ТекДело = Выборка[НомерКолонки]; 
	        Если ТекДело = Справочники.Дела.ПустаяСсылка() Тогда 
	            Прервать; 
	        Иначе 
	            Массив.Добавить(ТекДело);
	        КонецЕсли; 
	    КонецЦикла; 

	    Если НЕ ЗначениеЗаполнено(ТекДело) Тогда 
	        Прервать; 
	    КонецЕсли; 
	КонецЦикла;	
	
	Возврат Массив;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивВидимыхДел(Знач РеквизитыАктивныйВид, Знач Inbox, Знач мПользователь,
		Знач мТекущаяДатаСеанса, Знач мСписокОбщихКонтекстов, Знач ДелоФокус)
	
	Массив 			= Новый Массив;
	МассивУсловий 	= Новый Массив;
	
	Запрос = Новый Запрос();
	ТекстЗапросаДел =
		"ВЫБРАТЬ
		|	Дела.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		Дела.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.Дела КАК Дела
		|	ГДЕ
		|		Дела.ПометкаУдаления = ЛОЖЬ
		|		И Дела.Пользователь = &Пользователь
		|		И &Условия
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДелаКонтексты.Ссылка
		|	ИЗ
		|		Справочник.Дела.Контексты КАК ДелаКонтексты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Дела КАК Дела
		|			ПО ДелаКонтексты.Ссылка = Дела.Ссылка
		|	ГДЕ
		|		Дела.ЕстьКонтексты = ИСТИНА
		|		И Дела.ПометкаУдаления = ЛОЖЬ
		|		И Дела.Пользователь <> &Пользователь
		|		И ДелаКонтексты.Контекст В(&СписокОбщихКонтекстов)
		|		И &Условия) КАК Дела";
	
	Запрос.УстановитьПараметр("ТекущаяДата",    		мТекущаяДатаСеанса);
    Запрос.УстановитьПараметр("Inbox",          		Inbox);
	Запрос.УстановитьПараметр("Пользователь",   		мПользователь);
	Запрос.УстановитьПараметр("СписокОбщихКонтекстов",  мСписокОбщихКонтекстов);
	
	// Режим просмотра.
	Если РеквизитыАктивныйВид.РежимПросмотраДерева = 0 Тогда
		// В работе
		МассивУсловий.Добавить("Дела.Выполнено = Ложь");
	ИначеЕсли РеквизитыАктивныйВид.РежимПросмотраДерева = 1 Тогда
		// В работе + недавно завершенные
		МассивУсловий.Добавить(
			"(Дела.Выполнено = Ложь ИЛИ (Дела.ДатаВыполнения МЕЖДУ &ТекущаяДатаМинусОдинДень И &ТекущаяДата))");
		Запрос.УстановитьПараметр("ТекущаяДатаМинусОдинДень", мТекущаяДатаСеанса - 86400);
	КонецЕсли;
	
	// Если включен отбор по фокусу.
	Если ЗначениеЗаполнено(ДелоФокус) Тогда
		МассивУсловий.Добавить("Дела.Ссылка В ИЕРАРХИИ(&ДелоФокус)");
		Запрос.УстановитьПараметр("ДелоФокус", ДелоФокус);
	КонецЕсли;
	
	Попытка
		Выполнить(РеквизитыАктивныйВид.Отборы);
	Исключение
	    ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка в отборе активного вида: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
	Если МассивУсловий.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("Условия", Истина);
	Иначе
		Условия = "";
		Для Каждого Строка Из МассивУсловий Цикл
			Условия = Условия + ?(ПустаяСтрока(Условия), "", " И ") + Строка;
		КонецЦикла;
		ТекстЗапросаДел = СтрЗаменить(ТекстЗапросаДел, "&Условия", Условия);
	КонецЕсли;
	
	Если РеквизитыАктивныйВид.ВключаяПодчиненныеДела = Истина Тогда
		ТекстЗапросаПодчиненных =
			"ВЫБРАТЬ
			|	Подчиненные.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Дела КАК Подчиненные
			|ГДЕ
			|	Подчиненные.Пользователь = &Пользователь
			|	И Подчиненные.ПометкаУдаления = ЛОЖЬ
			|" + ?(РеквизитыАктивныйВид.РежимПросмотраДерева = 0, " И Подчиненные.Выполнено = Ложь", "") + "
			|" + ?(РеквизитыАктивныйВид.РежимПросмотраДерева = 1, " И (Подчиненные.Выполнено = Ложь
				|ИЛИ (Подчиненные.ДатаВыполнения МЕЖДУ &ТекущаяДатаМинусОдинДень И &ТекущаяДата))", "") + "
			|	И НЕ Подчиненные.Ссылка В (&Список)
			|	И Подчиненные.Ссылка В ИЕРАРХИИ(&Список)";
		ТекстЗапросаПодчиненных = СтрЗаменить(ТекстЗапросаПодчиненных, "&Список", ТекстЗапросаДел); 
		Запрос.УстановитьПараметр("Пользователь",   мПользователь);		
	Иначе
		ТекстЗапросаПодчиненных = "ВЫБРАТЬ ЛОЖЬ"
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапросаДел + ";"
		+ ТекстЗапросаПодчиненных + ";";
		
	Пакет = Запрос.ВыполнитьПакет();
	
	МассивРодителей = Новый Массив();
	
	// Дела, которые подходят по отбору.
	Выборка = Пакет[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Массив.Добавить(Выборка.Ссылка);
		МассивРодителей.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	// Родительские дела.
	Если РеквизитыАктивныйВид.ИерархическийВид = Истина И РеквизитыАктивныйВид.ВключаяРодительскиеДела = Истина Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Дела.Родитель КАК Родитель,
			|	Дела.Родитель.Родитель КАК РодительРодитель,
			|	Дела.Родитель.Родитель.Родитель КАК РодительРодительРодитель,
			|	Дела.Родитель.Родитель.Родитель.Родитель КАК РодительРодительРодительРодитель,
			|	Дела.Родитель.Родитель.Родитель.Родитель.Родитель КАК РодительРодительРодительРодительРодитель
			|ИЗ
			|	Справочник.Дела КАК Дела
			|ГДЕ
			|	Дела.Пользователь = &Пользователь
			|	И Дела.ПометкаУдаления = ЛОЖЬ
			|	И Дела.Ссылка В(&МассивРодителей)"; 
		
		Пока Истина Цикл
			
		    Запрос.УстановитьПараметр("МассивРодителей", МассивРодителей); 			
		    Результат = Запрос.Выполнить(); 
		    Если Результат.Пустой() Тогда 
		        Прервать; 
			КонецЕсли; 
			МассивРодителей.Очистить();
		    Выборка = Результат.Выбрать(); 
			
			Пока Выборка.Следующий() Цикл
				
				ПолученыВсеРодители = Ложь;
				Для НомерКолонки = 0 По Результат.Колонки.Количество() - 1 Цикл 
			        ТекДело = Выборка[НомерКолонки]; 
					Если ТекДело = Справочники.Дела.ПустаяСсылка() Тогда 
						ПолученыВсеРодители = Истина;
			            Прервать; 
			        Иначе 
			            Массив.Добавить(ТекДело);
			        КонецЕсли; 
			    КонецЦикла; 

				Если ПолученыВсеРодители = Ложь Тогда
					МассивРодителей.Добавить(ТекДело);
				КонецЕсли;
				
			КонецЦикла;
			
			Если МассивРодителей.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;			

	КонецЕсли;	
	
	// Подчиненные дела.
	Если РеквизитыАктивныйВид.ИерархическийВид = Истина И РеквизитыАктивныйВид.ВключаяПодчиненныеДела = Истина Тогда
		Выборка = Пакет[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Массив.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
		
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ВывестиДерево(Знач ПринудительноеОбновление = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	    
	Если НЕ ЗначениеЗаполнено(АктивныйВид) ИЛИ СтрНайти(Строка(АктивныйВид), "<Объект не найден") > 0 Тогда
		АктивныйВид = ПолучитьАктивныйВидВсехДел();
	КонецЕсли;
	
	РеквизитыАктивныйВид 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АктивныйВид, 
		"РежимПросмотраДерева,Идентификатор,ЭтоГруппа,ИерархическийВид,Группировки,Сортировка,Отборы,
		|ВключаяПодчиненныеДела,ВключаяРодительскиеДела,ПоказыватьСчетчикГруппировки,ПоказыватьНазваниеГруппировки");
	
	мТекущаяДатаСеанса 		= ТекущаяДатаСеанса();
	мНачалоДня 				= НачалоДня(мТекущаяДатаСеанса);
	мПустаяДата 			= Дата(1, 1, 1);
	мПеречисленияСтатусыПроектовДелНеНачался = Перечисления.СтатусыПроектовДел.НеНачался;
	мПеречисленияВидЦелиДелаНет 			 = Перечисления.ВидЦелиДела.Нет;
	
	Если РеквизитыАктивныйВид.ЭтоГруппа = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Иерархия 						= РеквизитыАктивныйВид.ИерархическийВид;
	ПоказыватьСчетчикГруппировки 	= РеквизитыАктивныйВид.ПоказыватьСчетчикГруппировки;
	ПоказыватьНазваниеГруппировки 	= РеквизитыАктивныйВид.ПоказыватьНазваниеГруппировки;
	
	СписокВидимыхДел.Очистить();
	
	// Отбор по активному виду.	
	МассивВидимыхДел = ПолучитьМассивВидимыхДел(РеквизитыАктивныйВид, Inbox, ТекущийПользователь, мТекущаяДатаСеанса,
		СписокОбщихКонтекстов, ДелоФокус);
    Если ЗначениеЗаполнено(ДобавленноеДело) Тогда
        Если МассивВидимыхДел.Найти(ДобавленноеДело) = Неопределено Тогда
        	МассивВидимыхДел.Добавить(ДобавленноеДело);
        Иначе
            ДобавленноеДело = Справочники.Дела.ПустаяСсылка();
        КонецЕсли;
    КонецЕсли; 
	СписокВидимыхДел.ЗагрузитьЗначения(МассивВидимыхДел);
	
	#Область АнализОбновленияДереваИСортировки
	Если ПринудительноеОбновление = Истина Тогда
		
		ПерезаполнитьДерево = Истина;
		СортироватьДерево   = Истина;
		
	Иначе
		
		ПерезаполнитьДерево = Ложь;
		СортироватьДерево   = Ложь;
		
		// Анализ надо перерисовывать или нет?
		Если СписокПредыдущихВидимыхДел.Количество() = СписокВидимыхДел.Количество() Тогда
			
			Для Индекс = 0 По СписокПредыдущихВидимыхДел.Количество() - 1 Цикл
				Если СписокВидимыхДел.НайтиПоЗначению(СписокПредыдущихВидимыхДел[Индекс].Значение) = Неопределено Тогда
					ПерезаполнитьДерево = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПерезаполнитьДерево = Ложь Тогда
				Для Индекс = 0 По СписокВидимыхДел.Количество() - 1 Цикл
					Если СписокПредыдущихВидимыхДел.НайтиПоЗначению(СписокВидимыхДел[Индекс].Значение) = Неопределено Тогда
						ПерезаполнитьДерево = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;			
			КонецЕсли;
			
			Если ПерезаполнитьДерево = Ложь Тогда
				Для Индекс = 0 По СписокПредыдущихВидимыхДел.Количество() - 1 Цикл
					Если СписокВидимыхДел[Индекс].Значение <> СписокПредыдущихВидимыхДел[Индекс].Значение Тогда
						СортироватьДерево = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СортироватьДерево = Истина;
			КонецЕсли;
					
		Иначе
			
			ПерезаполнитьДерево = Истина;
			СортироватьДерево   = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	СписокПредыдущихВидимыхДел.ЗагрузитьЗначения(МассивВидимыхДел);
	
	#Область УсловноеОформление
	
	СоответствиеКартинок = ОбновитьУсловноеОформление(МассивВидимыхДел);

	#КонецОбласти

	#Область ЗаполнениеДерева
	
	Если ПерезаполнитьДерево ИЛИ СортироватьДерево Тогда
		                              
		//ДЗ = ДанныеФормыВЗначение(Дерево, Тип("ДеревоЗначений"));
		ДЗ = Новый ДеревоЗначений;
		ДЗ.Колонки.Добавить("Выполнено");
		ДЗ.Колонки.Добавить("Тема");
		ДЗ.Колонки.Добавить("Срок");
		ДЗ.Колонки.Добавить("Контексты");
		ДЗ.Колонки.Добавить("Отметка");
		ДЗ.Колонки.Добавить("Дело");
		ДЗ.Колонки.Добавить("ЦветСрока");
		ДЗ.Колонки.Добавить("Подсвечено");
		ДЗ.Колонки.Добавить("СрокЗначение");
		ДЗ.Колонки.Добавить("ИспользоватьВремя");
		ДЗ.Колонки.Добавить("СписокКонтекстов");
		ДЗ.Колонки.Добавить("Стиль");
		ДЗ.Колонки.Добавить("ДатаВыполнения");
		ДЗ.Колонки.Добавить("Описание");
		ДЗ.Колонки.Добавить("РеквизитДопУпорядочивания");
		ДЗ.Колонки.Добавить("Избранное");
		ДЗ.Колонки.Добавить("ИзбранноеЗначение");
		ДЗ.Колонки.Добавить("ПроцентПроекта");
		ДЗ.Колонки.Добавить("СтатусПроекта");
		ДЗ.Колонки.Добавить("ЭтоПроект");
		ДЗ.Колонки.Добавить("РодительскоеДело");
		ДЗ.Колонки.Добавить("ЭтоПапка");
		ДЗ.Колонки.Добавить("ДатаСледующегоОбзора");
		ДЗ.Колонки.Добавить("ОбзорКаждые");
		ДЗ.Колонки.Добавить("ОбзорПериод");
		ДЗ.Колонки.Добавить("Обзор");
		ДЗ.Колонки.Добавить("ДатаПоследнегоОбзора");
		ДЗ.Колонки.Добавить("Напоминание");
		ДЗ.Колонки.Добавить("Картинка");
		ДЗ.Колонки.Добавить("Важность");
		ДЗ.Колонки.Добавить("ВидЦели");
		ДЗ.Колонки.Добавить("ДатаКорректировки");
		ДЗ.Колонки.Добавить("ДатаСоздания");
		ДЗ.Колонки.Добавить("Начало");
		ДЗ.Колонки.Добавить("Срочность");
		ДЗ.Колонки.Добавить("Усилие");
		ДЗ.Колонки.Добавить("СрокСтрока");
		ДЗ.Колонки.Добавить("ОбзорКаждыеСтрокой");
		ДЗ.Колонки.Добавить("Идентификатор");
		ДЗ.Колонки.Добавить("ЦветФона");
		ДЗ.Колонки.Добавить("ЦветТекста");
		ДЗ.Колонки.Добавить("ЕстьОписание");
		ДЗ.Колонки.Добавить("ЭтоГруппировка");
		ДЗ.Колонки.Добавить("Пользователь");
		ДЗ.Колонки.Добавить("СвязанныйОбъект");
		ДЗ.Колонки.Добавить("ЕстьКонтексты");
		ДЗ.Колонки.Добавить("Вес");
		ДЗ.Колонки.Добавить("СпрятатьВToDo");
		ДЗ.Колонки.Добавить("Проект");
		ДЗ.Колонки.Добавить("ИспользоватьНачало");
		ДЗ.Колонки.Добавить("Номер");

		#Область ЗаполнениеДерева
		
		Если ПерезаполнитьДерево Тогда
			
			ДЗ.Строки.Очистить();
			
			#Область ЗапросВыборки
			
			Запрос = Новый Запрос();
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	НапоминанияПользователя.Источник КАК Дело
				|ИЗ
				|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
				|ГДЕ
				|	НапоминанияПользователя.Пользователь = &Пользователь
				|	И ТИПЗНАЧЕНИЯ(НапоминанияПользователя.Источник) = ТИП(Справочник.Дела)
				|	И НапоминанияПользователя.Источник В(&МассивВидимыхДел)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДелаКонтексты.Ссылка КАК Дело,
				|	ДелаКонтексты.Контекст КАК Контекст,
				|	ДелаКонтексты.Контекст.Наименование КАК КонтекстНаименование
				|ИЗ
				|	Справочник.Дела.Контексты КАК ДелаКонтексты
				|ГДЕ
				|	ДелаКонтексты.Ссылка В(&МассивВидимыхДел)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Дела.Ссылка КАК Ссылка,
				|	Дела.Родитель КАК Родитель,
				|	Дела.Родитель КАК РодительскоеДело,
				|	Дела.ДатаПоследнегоОбзора КАК ДатаПоследнегоОбзора,
				|	Дела.ДатаСледующегоОбзора КАК ДатаСледующегоОбзора,
				|	Дела.ДатаВыполнения КАК ДатаВыполнения,
				|	Дела.ДатаКорректировки КАК ДатаКорректировки,
				|	Дела.ДатаСоздания КАК ДатаСоздания,
				|	Дела.Срок КАК Срок,
				|	Дела.Важность КАК Важность,
				|	Дела.ВидЦели КАК ВидЦели,
				|	Дела.Выполнено КАК Выполнено,
				|	Дела.Избранное КАК ИзбранноеЗначение,
				|	Дела.ИспользоватьВремя КАК ИспользоватьВремя,
				|	Дела.Начало КАК Начало,
				|	Дела.Описание КАК Описание,
				|	Дела.Пользователь КАК Пользователь,
				|	Дела.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
				|	Дела.Срочность КАК Срочность,
				|	Дела.Тема КАК Тема,
				|	Дела.Усилие КАК Усилие,
				|	Дела.ЭтоПапка КАК ЭтоПапка,
				|	Дела.ЭтоПроект КАК ЭтоПроект,
				|	Дела.Подсвечено КАК Подсвечено,
				|	Дела.ИспользоватьНачало КАК ИспользоватьНачало,
				|	Дела.Стиль КАК Стиль,
				|	Дела.СтатусПроекта КАК СтатусПроекта,
				|	Дела.ПроцентПроекта КАК ПроцентПроекта,
				|	Дела.Отметка КАК Отметка,
				|	Дела.ОбзорКаждые КАК ОбзорКаждые,
				|	Дела.ОбзорПериод КАК ОбзорПериод,
				|	Дела.Обзор КАК Обзор,
				|	Дела.ОбзорКаждыеСтрокой КАК ОбзорКаждыеСтрокой,
				|	Дела.Картинка КАК Картинка,
				|	Дела.ЦветФона КАК ЦветФона,
				|	Дела.ЦветТекста КАК ЦветТекста,
				|	Дела.Идентификатор КАК Идентификатор,
				|	Дела.ЕстьОписание КАК ЕстьОписание,
				|	Дела.СпрятатьВToDo КАК СпрятатьВToDo,
				|	Дела.СвязанныйОбъект КАК СвязанныйОбъект,
		        |	Дела.Проект КАК Проект,
				|	ВЫБОР
				|		КОГДА Дела.Избранное = ИСТИНА
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК Избранное
				|ИЗ
				|	Справочник.Дела КАК Дела
				|ГДЕ
				|	Дела.Ссылка В(&МассивВидимыхДел)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Дела.Ссылка ИЕРАРХИЯ";
			
			Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
			Запрос.УстановитьПараметр("МассивВидимыхДел", МассивВидимыхДел);
			
			Пакет = Запрос.ВыполнитьПакет();
			
			ТаблицаНапоминания = Пакет[0].Выгрузить();
			ТаблицаНапоминания.Индексы.Добавить("Дело");
			
			ТаблицаКонтекстов = Пакет[1].Выгрузить();
			ТаблицаКонтекстов.Индексы.Добавить("Дело");
			
			ТаблицаРодителей = Новый ТаблицаЗначений;
			ТаблицаРодителей.Колонки.Добавить("Дело");
			ТаблицаРодителей.Колонки.Добавить("СтрокаДела");
			ТаблицаРодителей.Колонки.Добавить("Родитель");
				
			ТаблицаРодителей.Индексы.Добавить("Дело");
			
			Выборка = Пакет[2].Выбрать();
			
			#КонецОбласти
			
			#Область Группировка
			
			ЕстьГруппировки = НЕ РеквизитыАктивныйВид.Группировки.Пустой();
			
			// Выводим группировки.
			Если ЕстьГруппировки Тогда
				
				СтрокаГруппировок = "";
				ТаблицаГруппировок = Новый ТаблицаЗначений;
				ТаблицаГруппировок.Колонки.Добавить("Имя");
				ТаблицаГруппировок.Колонки.Добавить("Представление");
				ТаблицаГруппировок.Колонки.Добавить("Направление");	
				Если ЕстьГруппировки Тогда
					
					ВыборкаГруппировка = РеквизитыАктивныйВид.Группировки.Выбрать(); 
					Пока ВыборкаГруппировка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(ТаблицаГруппировок.Добавить(), ВыборкаГруппировка);
						СтрокаГруппировок = СтрокаГруппировок + ?(ПустаяСтрока(СтрокаГруппировок), "", ",") 
							+ ВыборкаГруппировка.Имя 
							+ ?(ВыборкаГруппировка.Направление = Перечисления.НаправлениеСортировки.Убывание, " Убыв", " Возр");
					КонецЦикла;
					
					Для Номер = 1 По ТаблицаГруппировок.Количество() Цикл
						ТаблицаРодителей.Колонки.Добавить("Группировка" + Формат(Номер, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="));
					КонецЦикла;
					
				КонецЕсли;		
				
				ТЗ = Новый ТаблицаЗначений;		
				СтрокаСверткиГруппировки = "";
				СтрокаИндекса = "";
				Для Номер = 1 По ТаблицаГруппировок.Количество() Цикл
					Строки = ТаблицаГруппировок[Номер - 1];
					ТЗ.Колонки.Добавить(Строки.Имя);
					СтрокаСверткиГруппировки = СтрокаСверткиГруппировки
						+ ?(ПустаяСтрока(СтрокаСверткиГруппировки),"",",")
						+ Строки.Имя;
					СтрокаИндекса = СтрокаИндекса
						+ ?(ПустаяСтрока(СтрокаИндекса),"",",")
						+ "Группировка" + Формат(Номер, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");			
				КонецЦикла;
				ТаблицаРодителей.Индексы.Добавить(СтрокаИндекса);
					
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = ТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Если ТЗ.Колонки.Найти("Срок") <> Неопределено Тогда
						НоваяСтрока.Срок = НачалоДня(НоваяСтрока.Срок);
					КонецЕсли;
					Если ТЗ.Колонки.Найти("ДатаСледующегоОбзора") <> Неопределено Тогда
						НоваяСтрока.ДатаСледующегоОбзора = НачалоДня(НоваяСтрока.ДатаСледующегоОбзора);
					КонецЕсли;
					Если ТЗ.Колонки.Найти("ДатаСоздания") <> Неопределено Тогда
						НоваяСтрока.ДатаСоздания = НачалоДня(НоваяСтрока.ДатаСоздания);
					КонецЕсли;			
					Если ТЗ.Колонки.Найти("ДатаПоследнегоОбзора") <> Неопределено Тогда
						НоваяСтрока.ДатаПоследнегоОбзора = НачалоДня(НоваяСтрока.ДатаПоследнегоОбзора);
					КонецЕсли;			
					Если ТЗ.Колонки.Найти("ДатаКорректировки") <> Неопределено Тогда
						НоваяСтрока.ДатаКорректировки = НачалоДня(НоваяСтрока.ДатаКорректировки);
					КонецЕсли;			
					Если ТЗ.Колонки.Найти("ДатаВыполнения") <> Неопределено Тогда
						НоваяСтрока.ДатаВыполнения = НачалоДня(НоваяСтрока.ДатаВыполнения);
					КонецЕсли;			
				КонецЦикла;
		        
		        ТЗ.Колонки.Добавить("Количество");
		        ТЗ.ЗаполнитьЗначения(1, "Количество");
		        ТЗ.Свернуть(СтрокаСверткиГруппировки, "Количество");
				
				ТЗ.Сортировать(СтрокаГруппировок);
		         
		        СтрГруппировки = "";
		        Для Номер = 1 По ТаблицаГруппировок.Количество() Цикл
		            СтрокаГруппировки = ТаблицаГруппировок.Получить(Номер - 1);
		            СтрГруппировки = СтрГруппировки + ?(ПустаяСтрока(СтрГруппировки),"",",") + СтрокаГруппировки.Имя;
		            ВремТЗ = ТЗ.Скопировать(,СтрГруппировки + "," + "Количество");
		            ВремТЗ.Свернуть(СтрГруппировки, "Количество");
		            ВремТЗ.Сортировать(СтрокаГруппировки.Имя);
		            
		            Для Каждого Строки Из ВремТЗ Цикл
		                ЗначениеГруппировки = Строки[СтрокаГруппировки.Имя];
		                Если СтрокаГруппировки.Имя = "Срок" ИЛИ СтрокаГруппировки.Имя = "ДатаСледующегоОбзора" 
		        			ИЛИ СтрокаГруппировки.Имя = "ДатаСоздания" ИЛИ СтрокаГруппировки.Имя = "ДатаКорректировки"
		        			ИЛИ СтрокаГруппировки.Имя = "ДатаВыполнения" ИЛИ СтрокаГруппировки.Имя = "ДатаПоследнегоОбзора" Тогда
		        			ЗначениеГруппировки = ПредставлениеДаты(НачалоДня(ЗначениеГруппировки), Ложь);
		                КонецЕсли;
		                
		                Если Номер = 1 Тогда
		        			ТекСтрока = ДЗ.Строки.Добавить();
		                Иначе
		                    Структура = Новый Структура();
		                    Для Индекс = 1 По Номер - 1 Цикл
		                    	Структура.Вставить("Группировка" 
									+ Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="), Строки[ТаблицаГруппировок.Получить(Индекс - 1).Имя]);
		                    КонецЦикла;                     
		                    НайденнаяСтрока = ТаблицаРодителей.НайтиСтроки(Структура);
		                    ТекСтрока = НайденнаяСтрока[0].СтрокаДела.Строки.Добавить();
		        		КонецЕсли;
		        		
		        		ТекСтрока.Тема = Строка(ЗначениеГруппировки);
		        		Если ПустаяСтрока(ТекСтрока.Тема) Тогда
		        			ТекСтрока.Тема = НСтр("ru = '(нет)'")
		        		КонецЕсли;
		        		Если ПоказыватьНазваниеГруппировки = Истина Тогда
		        			ТекСтрока.Тема 			= СтрокаГруппировки.Представление
		        				+ ": " + ТекСтрока.Тема;
		        		КонецЕсли;
		        		Если ПоказыватьСчетчикГруппировки = Истина Тогда
		        			ТекСтрока.Тема 			= ТекСтрока.Тема
		        				+ "   (" + Строка(Строки.Количество) + ")";					
		        		КонецЕсли;
		        		ТекСтрока.Картинка 			= -1;
		        		ТекСтрока.ЭтоГруппировка	= Истина;
		                
		                СтрокаТаблицыРодителей = ТаблицаРодителей.Добавить();
		                Для Индекс = 1 По Номер Цикл
		                    СтрокаГруппировки = ТаблицаГруппировок.Получить(Индекс - 1);
		                    ЗначениеГруппировки = Строки[СтрокаГруппировки.Имя];
		                    Если СтрокаГруппировки.Имя = "Срок" ИЛИ СтрокаГруппировки.Имя = "ДатаСледующегоОбзора" 
		            			ИЛИ СтрокаГруппировки.Имя = "ДатаСоздания" ИЛИ СтрокаГруппировки.Имя = "ДатаКорректировки"
		            			ИЛИ СтрокаГруппировки.Имя = "ДатаВыполнения" ИЛИ СтрокаГруппировки.Имя = "ДатаПоследнегоОбзора" Тогда
		            			ЗначениеГруппировки = НачалоДня(ЗначениеГруппировки);
		                    КонецЕсли;                    
		                    СтрокаТаблицыРодителей["Группировка" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=")] = ЗначениеГруппировки;
		                КонецЦикла;
		                СтрокаТаблицыРодителей.СтрокаДела 	= ТекСтрока;
		            КонецЦикла;
		        КонецЦикла;
				
				// Возвращаем выборку в начало.
				Выборка.Сбросить();
				
		    КонецЕсли;
		    
			#КонецОбласти
			
			#Область ВыводВДерево
			
			// Выводим дела.
			Пока Выборка.Следующий() Цикл
				
				Если Иерархия = Истина И ЕстьГруппировки = Ложь Тогда
					
					// Если выводим как дерево.
			        Если НЕ ЗначениеЗаполнено(Выборка.Родитель) Тогда
			            ТекСтрока           = ДЗ.Строки.Добавить();	            
					Иначе				
						// Ищем родительскую ветку, куда можно поместить текущую.
						НайденнаяСтрока = ТаблицаРодителей.Найти(Выборка.Родитель, "Дело");
						Если НайденнаяСтрока <> Неопределено Тогда
							ТекСтрока       = НайденнаяСтрока.СтрокаДела;
							Если ТекСтрока.ЭтоПапка = Истина И ТекСтрока.Картинка <> -1 Тогда
								ТекСтрока.Картинка = 2; // Полная папка (родительская)
							КонецЕсли;				
				            ТекСтрока       = ТекСтрока.Строки.Добавить();
						Иначе
							// Вводим в корень (нет родителя).
				            ТекСтрока       = ДЗ.Строки.Добавить();
						КонецЕсли;				
					КонецЕсли;
					
					ТекСтрока.Дело	    = Выборка.Ссылка;
					
				Иначе
					
					Если ЕстьГруппировки Тогда
						
						СтруктураПоиска = Новый Структура;
						Для Номер = 1 По ТаблицаГруппировок.Количество() Цикл
							Строки = ТаблицаГруппировок.Получить(Номер - 1);
		                    ЗначениеГруппировки = Выборка[Строки.Имя];
		                    Если Строки.Имя = "Срок" ИЛИ Строки.Имя = "ДатаСледующегоОбзора" 
		            			ИЛИ Строки.Имя = "ДатаСоздания" ИЛИ Строки.Имя = "ДатаКорректировки"
		            			ИЛИ Строки.Имя = "ДатаВыполнения" ИЛИ Строки.Имя = "ДатаПоследнегоОбзора" Тогда
		            			ЗначениеГруппировки = НачалоДня(ЗначениеГруппировки);
		                    КонецЕсли;                    
							СтруктураПоиска.Вставить("Группировка" + Формат(Номер, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="), ЗначениеГруппировки);
						КонецЦикла;
							
						НайденнаяСтрока = ТаблицаРодителей.НайтиСтроки(СтруктураПоиска);
		                Если НайденнаяСтрока.Количество() > 0 Тогда
		                	ТекСтрока = НайденнаяСтрока[0].СтрокаДела.Строки.Добавить();
		                Иначе
		                    ТекСтрока = ДЗ.Строки.Добавить();
		                КонецЕсли; 
						
					Иначе 
						
						// Вводим без дерева.
						ТекСтрока = ДЗ.Строки.Добавить(); // В корень
						
					КонецЕсли;
					

		            ТекСтрока.Дело	    = Выборка.Ссылка;
					
				КонецЕсли;
				
				СтрокаТаблицыРодителей 				= ТаблицаРодителей.Добавить();
				СтрокаТаблицыРодителей.Дело 		= Выборка.Ссылка;
				СтрокаТаблицыРодителей.Родитель 	= ТекСтрока.Родитель;
				СтрокаТаблицыРодителей.СтрокаДела 	= ТекСтрока;
				
				// Основные реквизиты
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, 
		            "ОбзорКаждые,ОбзорПериод,Обзор,ДатаПоследнегоОбзора,ДатаСледующегоОбзора,Выполнено,
					|Избранное,ИзбранноеЗначение,РодительскоеДело,Отметка,СтатусПроекта,ПроцентПроекта,
					|Тема,Подсвечено,ИспользоватьВремя,Стиль,ДатаВыполнения,Описание,РеквизитДопУпорядочивания,
					|Срок,ЭтоПапка,ЭтоПроект,ОбзорКаждыеСтрокой,Идентификатор,ЕстьОписание,Пользователь,Проект,
					|ВидЦели,ДатаКорректировки,ДатаСоздания,Начало,Усилие,Срочность,Важность,ЦветФона,ЦветТекста,
					|СпрятатьВToDo,ИспользоватьНачало");
				
				ТекСтрока.СрокСтрока = 
					?(Выборка.Срок = мПустаяДата, "", ПредставлениеДаты(Выборка.Срок, Выборка.ИспользоватьВремя));
				ТекСтрока.ЭтоГруппировка = Ложь;
				
				// Контексты
				ТекСтрока.Контексты = "";
				МассивКонтекстов 	= ТаблицаКонтекстов.НайтиСтроки(Новый Структура("Дело", ТекСтрока.Дело));
				Для Каждого ВыборкаКонтексты Из МассивКонтекстов Цикл
					Если НЕ ПустаяСтрока(ТекСтрока.Контексты ) Тогда
						ТекСтрока.Контексты = ТекСтрока.Контексты + "; ";
					КонецЕсли;
					ТекСтрока.Контексты = ТекСтрока.Контексты  + ВыборкаКонтексты.КонтекстНаименование; 
					ТекСтрока.СписокКонтекстов = Новый СписокЗначений;
					ТекСтрока.СписокКонтекстов.Добавить(ВыборкаКонтексты.Контекст);			
				КонецЦикла;
				
				// Индекс дела (картинка).
				Если Выборка.ЭтоПапка = Истина И ТекСтрока.Картинка <> -1 Тогда
					ТекСтрока.Картинка = 1; // Пустая папка
				Иначе
					Если Выборка.Картинка <> -1 Тогда
						Попытка
							ТекСтрока.Картинка = Выборка.Картинка;
						Исключение
						КонецПопытки;
					Иначе
						ТекСтрока.Картинка = -1;
					КонецЕсли;			
		        КонецЕсли;
		        
				Если ТекСтрока.Картинка = -1 Тогда
					ЗначениеКартинки = СоответствиеКартинок.Получить(ТекСтрока.Дело);
					Если ЗначениеКартинки <> Неопределено Тогда
						ТекСтрока.Картинка = ЗначениеКартинки;
					КонецЕсли;
		        КонецЕсли; 
				
				// Напоминания
				ТекСтрока.Напоминание = ?(ТаблицаНапоминания.Найти(ТекСтрока.Дело, "Дело") = Неопределено, 0, 1);
				
				// Вес дела.
				ТекСтрока.Вес = РассчитатьВес(Выборка, мТекущаяДатаСеанса, мПеречисленияСтатусыПроектовДелНеНачался, 
					мПеречисленияВидЦелиДелаНет);
				
			КонецЦикла;
			
			#КонецОбласти
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область СортировкаДерева
		
		Если СортироватьДерево Тогда
		
			// Сортируем дерево с дочерними элементами.
			СтрокаСортировки = "";
			
			Если НЕ РеквизитыАктивныйВид.Сортировка.Пустой() Тогда
				ВыборкаСортировка = РеквизитыАктивныйВид.Сортировка.Выбрать();
				Пока ВыборкаСортировка.Следующий() Цикл		
					ИмяСортировки = ВыборкаСортировка.Имя;
					СтрокаСортировки = СтрокаСортировки
						+ ?(ПустаяСтрока(СтрокаСортировки), "", ",")
						+ ИмяСортировки
						+ ?(ВыборкаСортировка.Направление = Перечисления.НаправлениеСортировки.Убывание, " Убыв", " Возр");
				КонецЦикла;
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаСортировки) Тогда
				СтрокаСортировки = "РеквизитДопУпорядочивания Возр, Тема Возр";
			Иначе
				СтрокаСортировки = СтрокаСортировки + ",РеквизитДопУпорядочивания Возр";
			КонецЕсли;
			ДЗ.Строки.Сортировать(СтрокаСортировки, Истина);
			
		КонецЕсли;
				
		#КонецОбласти
		
		Дерево.ПолучитьЭлементы().Очистить();
		СинхронизироватьДеревья(Дерево, ДЗ);
				
	КонецЕсли;
	
#КонецОбласти	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СинхронизироватьДеревья(Дерево, ДЗ)
	
	ПолученныеЭлементыДерева = Дерево.ПолучитьЭлементы();
	ДЗСтроки = ДЗ.Строки;
	Для Каждого Строки Из ДЗСтроки Цикл
		
		НоваяСтрока = ПолученныеЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
		                      
		Если Строки.Строки.Количество() > 0 Тогда
			СинхронизироватьДеревья(НоваяСтрока, Строки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьУсловноеОформление(Знач МассивВидимыхДел, Знач ОбновитьКартинки = Ложь)
	
    СоответствиеКартинок = Новый Соответствие;
    
	УО = УсловноеОформление.Элементы;
	УО.Очистить();
    
    #Область Группировки
	
	Если ИспользуетГруппировки = Истина Тогда
	    ЭлементУО 						= УО.Добавить();
	    ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(55, 104, 185));
	    ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина,,,,));
	    ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Дерево.ЭтоГруппировка");
	    ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	    ЭлементУсловия.ПравоеЗначение 	= Истина;
	    ПолеОформления 					= ЭлементУО.Поля.Элементы.Добавить();
	   	ПолеОформления.Поле 	    	= Новый ПолеКомпоновкиДанных("Дерево");
	    ПолеОформления.Использование 	= Истина;
	КонецЕсли;
	
    #КонецОбласти
	
	#Область ПодготовкаЗапроса
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АвтоформатированиеДел.Ссылка КАК Автоформат,
		|	АвтоформатированиеДел.ЦветТекста КАК ЦветТекста,
		|	АвтоформатированиеДел.ЦветФона КАК ЦветФона,
		|	АвтоформатированиеДел.Стиль КАК Стиль,
		|	АвтоформатированиеДел.Идентификатор КАК Идентификатор,
		|	АвтоформатированиеДел.ИспользоватьСтиль КАК ИспользоватьСтиль,
		|	АвтоформатированиеДел.Картинка КАК Картинка,
		|	АвтоформатированиеДел.Условие КАК Условие,
		|	АвтоформатированиеДел.Столбец КАК Столбец
		|ИЗ
		|	Справочник.АвтоформатированиеДел КАК АвтоформатированиеДел
		|ГДЕ
		|	АвтоформатированиеДел.Пользователь = &Пользователь
		|	И АвтоформатированиеДел.Использование = ИСТИНА
		|	И АвтоформатированиеДел.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	АвтоформатированиеДел.РеквизитДопУпорядочивания";

    Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	ВыборкаНастройкиАвтоформат = Запрос.Выполнить().Выбрать();
    
    ТекстЗапроса = "";
    
    Номер = 0;
    Пока ВыборкаНастройкиАвтоформат.Следующий() Цикл
        
        НомерСтрокой = Формат(Номер, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
        
        МассивУсловий = Новый Массив;
        Попытка
           Выполнить(ВыборкаНастройкиАвтоформат.Условие);
        Исключение
            Продолжить;
        КонецПопытки;
        
        Текст = "ВЫБРАТЬ
				|	" + НомерСтрокой + " КАК Номер,
				|	&Автоформат" + НомерСтрокой + " КАК Автоформат,
                |   Дела.Ссылка КАК Дело
                |ИЗ
                |   Справочник.Дела КАК Дела
                |ГДЕ
				|	Дела.Ссылка В (&МассивВидимыхДел)
                |   И &Условия";
        
    	Если МассивУсловий.Количество() = 0 Тогда
    		Запрос.УстановитьПараметр("Условия", Истина);
    	Иначе
    		Условия = "";
    		Для Каждого Строка Из МассивУсловий Цикл
    			Условия = Условия + ?(ПустаяСтрока(Условия), "", " И ") + Строка;
    		КонецЦикла;
    		Текст = СтрЗаменить(Текст, "&Условия", Условия);
    	КонецЕсли;
            
        //Запрос.УстановитьПараметр("ИспользоватьСтиль"   + НомерСтрокой, Выборка.ИспользоватьСтиль);
        Запрос.УстановитьПараметр("Стиль"       + НомерСтрокой, ВыборкаНастройкиАвтоформат.Стиль);
        Запрос.УстановитьПараметр("ЦветФона"    + НомерСтрокой, ВыборкаНастройкиАвтоформат.ЦветФона);
        Запрос.УстановитьПараметр("ЦветТекста"  + НомерСтрокой, ВыборкаНастройкиАвтоформат.ЦветТекста);
        Запрос.УстановитьПараметр("Картинка"    + НомерСтрокой, ВыборкаНастройкиАвтоформат.Картинка);
        Запрос.УстановитьПараметр("Столбец"    	+ НомерСтрокой, ВыборкаНастройкиАвтоформат.Столбец);
		Запрос.УстановитьПараметр("Автоформат" 	+ НомерСтрокой, ВыборкаНастройкиАвтоформат.Автоформат);
        
        ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса),"","
            |
        	|ОБЪЕДИНИТЬ ВСЕ
			|
			|") + Текст;
        Номер = Номер + 1;
        
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивВидимыхДел", МассивВидимыхДел);
    
    Запрос.Текст =	
		"ВЫБРАТЬ
		|	Дела.Ссылка КАК Дело,
		|	Дела.ИспользоватьСтиль КАК ИспользоватьСтиль,
		|	Дела.Стиль КАК Стиль,
		|	Дела.ЦветФона КАК ЦветФона,
		|	Дела.ЦветТекста КАК ЦветТекста,
		|	Дела.Картинка КАК Картинка,
		|	"""" КАК Столбец
		|ИЗ
		|	Справочник.Дела КАК Дела
		|ГДЕ
		|	Дела.Ссылка В(&МассивВидимыхДел)
		|	И (Дела.ИспользоватьСтиль = ИСТИНА
		|			ИЛИ Дела.ЦветФона <> """"
		|			ИЛИ Дела.ЦветТекста <> """"
		|			ИЛИ Дела.Картинка <> -1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номер КАК Номер,
		|	ВложенныйЗапрос.Автоформат КАК Автоформат,
		|	ВложенныйЗапрос.Дело КАК Дело
		|ИЗ
		|	(" + ТекстЗапроса + ") КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер
		|ИТОГИ ПО
		|	Автоформат";
    
    Если ПустаяСтрока(ТекстЗапроса) Тогда
    	Возврат СоответствиеКартинок;
    КонецЕсли; 
    
	Пакет = Запрос.ВыполнитьПакет();
	
	#КонецОбласти
	
	#Область СтилиАвтоформатирования 
	
	ВыборкаАвтоформат 				= Пакет[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Автоформат");	
	Пока ВыборкаАвтоформат.Следующий() Цикл
		
		Автоформат = ВыборкаАвтоформат.Автоформат;
		
		// Находим стиль.
		ИспользоватьСтиль 	= Ложь;
		Столбец 			= "";
		Картинка 			= -1;
		ЦветТекста 			= "";
		ЦветФона 			= "";
		Стиль 				= "";
		
		ВыборкаНастройкиАвтоформат.Сбросить();
		Пока ВыборкаНастройкиАвтоформат.Следующий() Цикл
			Если ВыборкаНастройкиАвтоформат.Автоформат = Автоформат Тогда
				
				ИспользоватьСтиль 	= ВыборкаНастройкиАвтоформат.ИспользоватьСтиль;
				ЦветФона 			= ВыборкаНастройкиАвтоформат.ЦветФона;
				ЦветТекста 			= ВыборкаНастройкиАвтоформат.ЦветТекста;
				Картинка 			= ВыборкаНастройкиАвтоформат.Картинка;
				Столбец 			= ВыборкаНастройкиАвтоформат.Столбец;
				Стиль 				= ВыборкаНастройкиАвтоформат.Стиль;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
		СписокДел = Новый СписокЗначений;		
		Выборка = ВыборкаАвтоформат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СписокДел.Добавить(Выборка.Дело);
			
			Если Картинка <> -1 Тогда			
				СоответствиеКартинок.Вставить(Выборка.Дело, Картинка);        	
			КонецЕсли;
			
		КонецЦикла;
		
	    ЭлементУО 						= УО.Добавить();
	    Если НЕ ПустаяСтрока(ЦветФона) Тогда
	    	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", РаботаСЦветомКлиентСервер.HexВЦвет(ЦветФона));
	    КонецЕсли; 
	    Если НЕ ПустаяСтрока(ЦветТекста) Тогда
	        ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", РаботаСЦветомКлиентСервер.HexВЦвет(ЦветТекста));
	    КонецЕсли;
	    Если ИспользоватьСтиль = Истина Тогда        
			Попытка
				Шрифт						= ЗначениеИзСтрокиВнутр(Стиль);
	            ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
			Исключение
			КонецПопытки;
	    КонецЕсли;
	    ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Дерево.Дело");
	    ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
	    ЭлементУсловия.ПравоеЗначение 	= СписокДел;
	    ПолеОформления 					= ЭлементУО.Поля.Элементы.Добавить();
	    Если ПустаяСтрока(Столбец) Тогда
	    	ПолеОформления.Поле 	    = Новый ПолеКомпоновкиДанных("Дерево");
	    Иначе
	        ПолеОформления.Поле 	    = Новый ПолеКомпоновкиДанных("Дерево" + Столбец);
	    КонецЕсли;            
	    ПолеОформления.Использование 	= Истина;		
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область СтилиДел
	
	ВыборкаНастройкиАвтоформатДел 	= Пакет[0].Выбрать();
	Пока ВыборкаНастройкиАвтоформатДел.Следующий() Цикл
		
		// Находим стиль.
		ИспользоватьСтиль 	= ВыборкаНастройкиАвтоформатДел.ИспользоватьСтиль;
		Столбец 			= ВыборкаНастройкиАвтоформатДел.Столбец;
		Картинка 			= ВыборкаНастройкиАвтоформатДел.Картинка;
		ЦветТекста 			= ВыборкаНастройкиАвтоформатДел.ЦветТекста;
		ЦветФона 			= ВыборкаНастройкиАвтоформатДел.ЦветФона;
		Стиль 				= ВыборкаНастройкиАвтоформатДел.Стиль;
		
	    ЭлементУО 						= УО.Добавить();
	    Если НЕ ПустаяСтрока(ЦветФона) Тогда
	    	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", РаботаСЦветомКлиентСервер.HexВЦвет(ЦветФона));
	    КонецЕсли; 
	    Если НЕ ПустаяСтрока(ЦветТекста) Тогда
	        ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", РаботаСЦветомКлиентСервер.HexВЦвет(ЦветТекста));
	    КонецЕсли;
	    Если ИспользоватьСтиль = Истина Тогда        
			Попытка
				Шрифт						= ЗначениеИзСтрокиВнутр(Стиль);
	            ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
			Исключение
			КонецПопытки;
	    КонецЕсли;
	    ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	    ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Дерево.Дело");
	    ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	    ЭлементУсловия.ПравоеЗначение 	= ВыборкаНастройкиАвтоформатДел.Дело;
	    ПолеОформления 					= ЭлементУО.Поля.Элементы.Добавить();
	    Если ПустаяСтрока(Столбец) Тогда
	    	ПолеОформления.Поле 	    = Новый ПолеКомпоновкиДанных("Дерево");
	    Иначе
	        ПолеОформления.Поле 	    = Новый ПолеКомпоновкиДанных("Дерево" + Столбец);
	    КонецЕсли;            
	    ПолеОформления.Использование 	= Истина;
		
		Если Картинка <> -1 Тогда			
			СоответствиеКартинок.Вставить(ВыборкаНастройкиАвтоформатДел.Дело, Картинка);        	
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ОбновлениеКартинок
	
	Если ОбновитьКартинки = Истина Тогда           
		                                            
		ОбновитьКартинкиВДереве(Дерево, СоответствиеКартинок, Inbox);
		                     
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат СоответствиеКартинок;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьКартинкиВДереве(Дерево, Знач СоответствиеКартинок, Знач Inbox)
	
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для Каждого Строки Из ЭлементыДерева Цикл
		
		Если Строки.Дело <> Inbox Тогда
			Если Строки.ЭтоПапка = Истина Тогда
				Строки.Картинка = ?(Строки.ПолучитьЭлементы().Количество() = 0, 1, 2);
			Иначе
				Строки.Картинка = -1;
			КонецЕсли;			
			
			Эл = СоответствиеКартинок.Получить(Строки.Дело);		
			Если Эл <> Неопределено Тогда
				Строки.Картинка = Эл;
			КонецЕсли;			
		КонецЕсли;
			
		ОбновитьКартинкиВДереве(Строки, СоответствиеКартинок, Inbox);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция РассчитатьВесКлиент(Знач Выборка,
	Знач мТекущаяДатаСеанса = Неопределено,
	Знач мПеречисленияСтатусыПроектовДелНеНачался = Неопределено,
	Знач мПеречисленияВидЦелиДелаНет = Неопределено)
	
	Если мТекущаяДатаСеанса = Неопределено Тогда
		мТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;	
	Если мПеречисленияСтатусыПроектовДелНеНачался = Неопределено Тогда
		мПеречисленияСтатусыПроектовДелНеНачался = ПредопределенноеЗначение("Перечисление.СтатусыПроектовДел.НеНачался");
	КонецЕсли;
	Если мПеречисленияВидЦелиДелаНет = Неопределено Тогда
		мПеречисленияВидЦелиДелаНет = ПредопределенноеЗначение("Перечисление.ВидЦелиДела.Нет");
	КонецЕсли;
	
	// Расчет веса		
	// Усилие
	// Проект - для проекта вес ниже
	// Статус проекта - чем выше тем больше
	// Цель недели + 0,05
	// Важность чем больше тем больше
	// Срочность чем больше тем больше
	// Начало
	// Срок

	Если Выборка.ЭтоПапка = ЛОЖЬ И Выборка.Выполнено = Ложь И Выборка.СпрятатьВToDo = Ложь Тогда
		
		Вес = 1;
		Если Выборка.Важность <> 100 Тогда
			Вес = Вес + Выборка.Важность / 2000;
		КонецЕсли;
		Если Выборка.Срочность <> 100 Тогда
			Вес = Вес + Выборка.Срочность / 2000;
		КонецЕсли;
		Если Выборка.Усилие <> 100 Тогда
			Вес = Вес + Выборка.Усилие / 2000;
		КонецЕсли;	
		Если Выборка.ЭтоПроект Тогда
			Вес = Вес - 0.001;
			Если Выборка.СтатусПроекта <> мПеречисленияСтатусыПроектовДелНеНачался Тогда
				Вес = Вес + ИндексПеречисления("СтатусыПроектовДел", Выборка.СтатусПроекта) * 0.0001;
			КонецЕсли;
		КонецЕсли;
		Если Выборка.ВидЦели <> мПеречисленияВидЦелиДелаНет Тогда
			Вес = Вес + (5 - ИндексПеречисления("ВидЦелиДела", Выборка.ВидЦели)) * 0.01;
		КонецЕсли;
		Если Выборка.Срок <> Дата(1, 1, 1) Тогда
			Вес = Вес + (мТекущаяДатаСеанса - Выборка.Срок) / 86400 * 0.001;
		КонецЕсли;
		Если Выборка.ИспользоватьНачало И Выборка.Начало <> Дата(1, 1, 1) Тогда
			Вес = Вес + (мТекущаяДатаСеанса - Выборка.Начало) / 86400 * 0.001;
		КонецЕсли;
		// Если дело с связанным объектом, оно чуть важнее.
		Если ЗначениеЗаполнено(Выборка.СвязанныйОбъект) Тогда
			Вес = Вес + 0.00001;
		КонецЕсли;
	Иначе
		Вес = 0;
	КонецЕсли;
	
	Возврат Вес;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИндексПеречисления(Знач ИмяПеречисления, Знач Значение)
	
	Возврат Перечисления[ИмяПеречисления].Индекс(Значение);
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьВес(Знач Выборка,
	Знач мТекущаяДатаСеанса = Неопределено,
	Знач мПеречисленияСтатусыПроектовДелНеНачался = Неопределено,
	Знач мПеречисленияВидЦелиДелаНет = Неопределено)
	
	Если мТекущаяДатаСеанса = Неопределено Тогда
		мТекущаяДатаСеанса = ТекущаяДатаСеанса();
	КонецЕсли;	
	Если мПеречисленияСтатусыПроектовДелНеНачался = Неопределено Тогда
		мПеречисленияСтатусыПроектовДелНеНачался = Перечисления.СтатусыПроектовДел.НеНачался;
	КонецЕсли;
	Если мПеречисленияВидЦелиДелаНет = Неопределено Тогда
		мПеречисленияВидЦелиДелаНет = Перечисления.ВидЦелиДела.Нет;
	КонецЕсли;
	
	// Расчет веса		
	// + Усилие
	// + Проект - для проекта вес ниже
	// + Статус проекта - чем выше тем больше
	// + Цель недели + 0,05
	// + Важность чем больше тем больше +
	// + Срочность чем больше тем больше +
	// + Начало
	// + Срок

	Если Выборка.ЭтоПапка = ЛОЖЬ И Выборка.Выполнено = Ложь И Выборка.СпрятатьВToDo = Ложь Тогда
		
		Вес = 1;
		Если Выборка.Важность <> 100 Тогда
			Вес = Вес + Выборка.Важность / 2000;
		КонецЕсли;
		Если Выборка.Срочность <> 100 Тогда
			Вес = Вес + Выборка.Срочность / 2000;
		КонецЕсли;
		Если Выборка.Усилие <> 100 Тогда
			Вес = Вес + Выборка.Усилие / 2000;
		КонецЕсли;	
		Если Выборка.ЭтоПроект Тогда
			Вес = Вес - 0.001;
			Если Выборка.СтатусПроекта <> мПеречисленияСтатусыПроектовДелНеНачался Тогда
				Вес = Вес + Перечисления.СтатусыПроектовДел.Индекс(Выборка.СтатусПроекта) * 0.0001;
			КонецЕсли;
		КонецЕсли;
		Если Выборка.ВидЦели <> мПеречисленияВидЦелиДелаНет Тогда
			Вес = Вес + (5 - Перечисления.ВидЦелиДела.Индекс(Выборка.ВидЦели)) * 0.01;
		КонецЕсли;
		Если Выборка.Срок <> Дата(1, 1, 1) Тогда
			Вес = Вес + (мТекущаяДатаСеанса - Выборка.Срок) / 86400 * 0.001;
		КонецЕсли;
		Если Выборка.ИспользоватьНачало И Выборка.Начало <> Дата(1, 1, 1) Тогда
			Вес = Вес + (мТекущаяДатаСеанса - Выборка.Начало) / 86400 * 0.001;
		КонецЕсли;
		// Если дело с связанным объектом, оно чуть важнее.
		Если ЗначениеЗаполнено(Выборка.СвязанныйОбъект) Тогда
			Вес = Вес + 0.00001;
		КонецЕсли;
	Иначе
		Вес = 0;
	КонецЕсли;
	
	Возврат Вес;
	
КонецФункции

&НаСервере
Процедура ОбновитьПоиск()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Дела.Ссылка КАК Дело,
		|	Дела.Тема КАК Тема,
		|	Дела.ДатаСоздания КАК ДатаСоздания,
		|	Дела.ДатаВыполнения КАК ДатаВыполнения,
		|	Дела.ДатаКорректировки КАК ДатаКорректировки
		|ИЗ
		|	Справочник.Дела КАК Дела
		|ГДЕ
		|	Дела.ПометкаУдаления = ЛОЖЬ
		|	И Дела.Пользователь = &Пользователь
		|	И &ИУсловия
		|	И &ИЛИУсловия
		|
		|УПОРЯДОЧИТЬ ПО
		|	Тема";
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	МассивУсловийИ = Новый Массив;
	МассивУсловийИЛИ = Новый Массив;
	
	Если ПоискСтатус = 0 Тогда
		МассивУсловийИ.Добавить("Дела.Выполнено = Ложь");
	КонецЕсли;	
	Если ПоискВТеме Тогда
		МассивУсловийИЛИ.Добавить("Дела.Тема ПОДОБНО &СтрокаПоиска");
	КонецЕсли;
	Если ПоискВОписании Тогда
		МассивУсловийИЛИ.Добавить("ПОДСТРОКА(Дела.Описание, 1, 1024) ПОДОБНО &СтрокаПоиска");
	КонецЕсли;	
	Если ПоискВКонтекстах Тогда
		МассивУсловийИЛИ.Добавить("Дела.Ссылка В (ВЫБРАТЬ Д.Ссылка 
			|КАК Ссылка ИЗ Справочник.Дела.Контексты КАК Д
			|ГДЕ Д.Контекст.Наименование ПОДОБНО &СтрокаПоиска)");
	КонецЕсли;
				
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтрокаПоиска + "%");
	
	// Условия И.
	Если МассивУсловийИ.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("ИУсловия", Истина);
	Иначе
		ИУсловия = "";
		Для Каждого Строка Из МассивУсловийИ Цикл
			ИУсловия = ИУсловия + ?(ПустаяСтрока(ИУсловия), "", " И ") + Строка;
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИУсловия", "(" + ИУсловия + ")");
	КонецЕсли;
	
	// Условия ИЛИ.
	Если МассивУсловийИЛИ.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("ИЛИУсловия", Истина);
	Иначе
		ИЛИУсловия = "";
		Для Каждого Строка Из МассивУсловийИЛИ Цикл
			ИЛИУсловия = ИЛИУсловия + ?(ПустаяСтрока(ИЛИУсловия), "", " ИЛИ ") + Строка;
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИЛИУсловия", "(" + ИЛИУсловия + ")");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТаблицаПоиска.Очистить();
    МассивДел = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПоиска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
        МассивДел.Добавить(НоваяСтрока.Дело);
    КонецЦикла;
    
    Соответствие = УправлениеДелами.ПолучитьПути(МассивДел);
    Для Каждого Строки Из ТаблицаПоиска Цикл
    	Строки.Путь = Соответствие.Получить(Строки.Дело);
    КонецЦикла;
    
	ОбновитьСтрокуРезультатыПоиска();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуРезультатыПоиска()
	
	Элементы.ДекорацияРезультатыПоиска.Заголовок = НСтр("ru = 'Результаты поиска'")
		+ ?(ТаблицаПоиска.Количество() = 0, "", СтрШаблон(НСтр("ru = ' - найденные дела: %1'"), ТаблицаПоиска.Количество()));

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыДела()
	
	ЕстьДоступ = Истина;
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ЕстьДоступ = Ложь;
	Иначе
		Если ТекущиеДанные.ЭтоГруппировка Тогда
			ЕстьДоступ = Ложь;
		КонецЕсли;
	КонецЕсли;
    
    Элементы.ДеревоТемаТекст.РедактированиеТекста = ЕстьДоступ;
    Элементы.ГруппаСвойства.Доступность = ЕстьДоступ;
    
    Если ЕстьДоступ = Ложь Тогда
		Возврат;
	КонецЕсли;

	Если ПредыдущееДело <> ТекущиеДанные.Дело Тогда
		ТекущееДело = ТекущиеДанные.Дело;
		ОбновитьРеквизитыДелаНаСервере(ТекущиеДанные);
		ПредыдущееДело = ТекущееДело;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыДелаПринудительно()
	
	ПредыдущееДело = ПредопределенноеЗначение("Справочник.Дела.ПустаяСсылка");
	ОбновитьРеквизитыДела();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыДелаНаСервере(Знач Выборка = Неопределено)
	
	Если ТипЗнч(Выборка) = Тип("СправочникСсылка.Дела") Тогда
		Выборка = ЗначенияРеквизитовОбъекта(Выборка);
		Вес					= РассчитатьВес(Выборка);
	Иначе
		Вес					= Выборка.Вес;
	КонецЕсли;
	
	Срочность			= Выборка.Срочность;
	Усилие				= Выборка.Усилие;
	Важность 			= Выборка.Важность;
	ВидЦели 			= Выборка.ВидЦели;
	Начало				= Выборка.Начало;
	Срок				= Выборка.Срок;
	ИспользоватьВремя	= Выборка.ИспользоватьВремя;
	ИспользоватьНачало	= Выборка.ИспользоватьНачало;
	Описание			= Выборка.Описание;
	ЭтоПроект			= Выборка.ЭтоПроект;
	ЭтоПапка			= Выборка.ЭтоПапка;
	СтатусПроекта		= Выборка.СтатусПроекта;
	ПроцентПроекта		= Выборка.ПроцентПроекта;
	
	ДатаСледующегоОбзора = Выборка.ДатаСледующегоОбзора;
	Обзор				= Выборка.Обзор;
	ОбзорКаждые			= Выборка.ОбзорКаждые;
	ОбзорПериод			= Выборка.ОбзорПериод;	
	Контексты			= Выборка.Контексты;
    СпрятатьВToDo       = Выборка.СпрятатьВToDo;
	СвязанныйОбъект		= Выборка.СвязанныйОбъект;	
	
	Если ИспользоватьВремя Тогда
		Элементы.Срок.ФорматРедактирования 	= "ДФ='dd.MM.yy HH:mm'";
		Элементы.ДеревоНачало.Формат 		= "ДФ='dd.MM.yy HH:mm'";
		Элементы.Срок.КнопкаВыпадающегоСписка = Истина;
		Элементы.Начало.КнопкаВыпадающегоСписка = Истина;
		ОбновитьСписокВыбораКрайнейДаты();
	Иначе
		Элементы.Срок.ФорматРедактирования 	= "ДФ='dd.MM.yy'";
		Элементы.ДеревоНачало.Формат 		= "ДФ='dd.MM.yy'";
		Элементы.Срок.КнопкаВыпадающегоСписка = Ложь;
		Элементы.Начало.КнопкаВыпадающегоСписка = Ложь;
	КонецЕсли;
	Элементы.Начало.ФорматРедактирования 	= Элементы.Срок.ФорматРедактирования;
	Элементы.Начало.Доступность 			= ИспользоватьНачало;
	
	Если НЕ ПустаяСтрока(Выборка.Стиль) Тогда
		Попытка
			ШрифтСтиля = ШрифтПоСтилю(Выборка.Стиль);
			Элементы.СтильЖирный.Пометка 		= ШрифтСтиля.Полужирный;
			Элементы.СтильКурсив.Пометка 		= ШрифтСтиля.Наклонный;
			Элементы.СтильПодчеркнутый.Пометка 	= ШрифтСтиля.Подчеркивание;
		Исключение
			Элементы.СтильЖирный.Пометка 		= Ложь;
			Элементы.СтильКурсив.Пометка 		= Ложь;
			Элементы.СтильПодчеркнутый.Пометка 	= Ложь;		
		КонецПопытки;
	Иначе
		Элементы.СтильЖирный.Пометка 		= Ложь;
		Элементы.СтильКурсив.Пометка 		= Ложь;
		Элементы.СтильПодчеркнутый.Пометка 	= Ложь;		
	КонецЕсли;	
	
	Элементы.СтатусПроекта.Доступность	= ЭтоПроект;
	Элементы.ПроцентПроекта.Доступность	= ЭтоПроект;
    	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШрифтПоСтилю(Знач Стиль)
	
	Возврат ЗначениеИзСтрокиВнутр(Стиль)
	
КонецФункции

&НаСервере
Функция ОбновитьДело(Знач Дело, Знач СтруктураРеквизитыДерева)
	
	Если НЕ ЗначениеЗаполнено(Дело) Тогда
		ДелоОбъект 				= Справочники.Дела.СоздатьЭлемент();
		ДелоОбъект.Пользователь = ТекущийПользователь;
		ДелоОбъект.ВидЦели		= Перечисления.ВидЦелиДела.Нет;
		ДелоОбъект.Важность 	= 100;
		ДелоОбъект.Срочность 	= 100;
		ДелоОбъект.Усилие 		= 100;
	Иначе
		ДелоОбъект 				= Дело.ПолучитьОбъект();
		ДелоОбъект.ВидЦели 		= ВидЦели;
		ДелоОбъект.Важность 	= Важность;
		ДелоОбъект.Срочность	= Срочность;
		ДелоОбъект.Начало 		= Начало;
		ДелоОбъект.Срок			= Срок;
	КонецЕсли;
			
	Если СтруктураРеквизитыДерева.Свойство("Тема") Тогда
		ДелоОбъект.Тема		= СтруктураРеквизитыДерева.Тема;
	КонецЕсли;
	Если СтруктураРеквизитыДерева.Свойство("Выполнено") Тогда
		// Если папка не сохраняем.
		Если ДелоОбъект.ЭтоПапка = Истина Тогда
			Возврат ДелоОбъект.Ссылка;
		КонецЕсли;
		ДелоОбъект.Выполнено= СтруктураРеквизитыДерева.Выполнено;		
	КонецЕсли;
	Если СтруктураРеквизитыДерева.Свойство("Родитель") Тогда
		ДелоОбъект.Родитель	= СтруктураРеквизитыДерева.Родитель;
	КонецЕсли;
	
	// Если Inbox не сохраняем.
	Если ДелоОбъект.Предопределенный = Истина Тогда
		Возврат ДелоОбъект.Ссылка;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ДелоОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
	    ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат ДелоОбъект.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(Знач Дело)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Дела.Отметка КАК Отметка,
		|	Дела.Срок КАК Срок,
		|	Дела.Подсвечено КАК Подсвечено,
		|	Дела.ИспользоватьВремя КАК ИспользоватьВремя,
		|	Дела.Описание КАК Описание,
		|	Дела.Контексты.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Контекст КАК Контекст,
		|		Контекст.Наименование КАК КонтекстНаименование
		|	) КАК Контексты,
		|	Дела.Избранное КАК Избранное,
		|	Дела.ЭтоПроект КАК ЭтоПроект,
		|	Дела.СтатусПроекта КАК СтатусПроекта,
		|	Дела.ПроцентПроекта КАК ПроцентПроекта,
		|	Дела.Родитель КАК Родитель,
		|	Дела.ЭтоПапка КАК ЭтоПапка,
		|	Дела.Тема КАК Тема,
		|	Дела.Картинка КАК Картинка,
		|	Дела.ДатаПоследнегоОбзора КАК ДатаПоследнегоОбзора,
		|	Дела.Обзор КАК Обзор,
		|	Дела.ОбзорПериод КАК ОбзорПериод,
		|	Дела.ОбзорКаждые КАК ОбзорКаждые,
		|	Дела.ДатаСледующегоОбзора КАК ДатаСледующегоОбзора,
		|	Дела.Важность КАК Важность,
		|	Дела.ВидЦели КАК ВидЦели,
		|	Дела.ДатаКорректировки КАК ДатаКорректировки,
		|	Дела.ДатаСоздания КАК ДатаСоздания,
		|	Дела.Начало КАК Начало,
		|	Дела.Усилие КАК Усилие,
		|	Дела.Срочность КАК Срочность,
		|	Дела.ОбзорКаждыеСтрокой КАК ОбзорКаждыеСтрокой,
		|	Дела.ЦветФона КАК ЦветФона,
		|	Дела.ЦветТекста КАК ЦветТекста,
		|	Дела.ЕстьОписание КАК ЕстьОписание,
		|	Дела.ИспользоватьНачало КАК ИспользоватьНачало,
		|	Дела.Стиль КАК Стиль,
        |	Дела.СвязанныйОбъект КАК СвязанныйОбъект,
        |	Дела.СпрятатьВToDo КАК СпрятатьВToDo,
		|	Дела.Выполнено КАК Выполнено
		|ИЗ
		|	Справочник.Дела КАК Дела
		|ГДЕ
		|	Дела.Ссылка = &Дело";
	Запрос.УстановитьПараметр("Дело", Дело);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Реквизиты = Новый Структура("Стиль,Отметка,Срок,Подсвечено,ИспользоватьВремя,Описание,
		|Избранное,ЭтоПроект,СтатусПроекта,ПроцентПроекта,Родитель,ЭтоПапка,Тема,Картинка,
		|ДатаПоследнегоОбзора,Обзор,ОбзорПериод,ОбзорКаждые,ДатаСледующегоОбзора,СпрятатьВToDo,
		|Важность,ВидЦели,ДатаКорректировки,ДатаСоздания,Начало,Усилие,Срочность,Выполнено,
		|ОбзорКаждыеСтрокой,ЦветФона,ЦветТекста,ЕстьОписание,ИспользоватьНачало,СвязанныйОбъект");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		Контексты = Новый Массив;
		КонтекстыВыборка = Выборка.Контексты.Выбрать();
		КонтекстыСтрокой = "";
		Пока КонтекстыВыборка.Следующий() Цикл
			Контексты.Добавить(КонтекстыВыборка.Контекст);
			КонтекстыСтрокой = КонтекстыСтрокой 
				+ ?(ПустаяСтрока(КонтекстыСтрокой),"","; ")
				+ КонтекстыВыборка.КонтекстНаименование;
		КонецЦикла;
		Реквизиты.Вставить("Контексты", Контексты);
		Реквизиты.Вставить("КонтекстыСтрокой", КонтекстыСтрокой);
		
		Если НЕ ПустаяСтрока(Выборка.Стиль) Тогда
			мПолужирный 	= Ложь;
			мНаклонный 		= Ложь;
			мПодчеркнутый 	= Ложь;		
			Попытка
				ШрифтСтиля 			= ЗначениеИзСтрокиВнутр(Выборка.Стиль);
				мПолужирный 		= ШрифтСтиля.Полужирный;
				мНаклонный 			= ШрифтСтиля.Наклонный;
				мПодчеркнутый 		= ШрифтСтиля.Подчеркнутый;
				Реквизиты.Вставить("ШрифтСтиля", ШрифтСтиля);
			Исключение
			КонецПопытки;			
			Реквизиты.Вставить("Полужирный", мПолужирный);
			Реквизиты.Вставить("Наклонный", мНаклонный);
			Реквизиты.Вставить("Подчеркнутый", мПодчеркнутый);		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииРеквизита(Знач Структура)
	
	ВыделенныеСтроки = Элементы.Дерево.ВыделенныеСтроки;
	Для Каждого Стр Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Дерево.НайтиПоИдентификатору(Стр);
		Если ТекущиеДанные <> Неопределено Тогда		
			ИзменитьРеквизитыДела(ТекущиеДанные.Дело, Структура);
		КонецЕсли;
		
	КонецЦикла;
	
	ПринудительноеОбновление = Истина;
	
	ОбновитьДерево(,ПринудительноеОбновление);
	ОбновитьВиды();
	
	Если Элементы.Дерево.ТекущиеДанные <> Неопределено Тогда
		ОбновитьРеквизитыДелаНаСервере(Элементы.Дерево.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьРеквизитыДела(Знач Дело, Знач Структура)
		
	Если НЕ ЗначениеЗаполнено(Дело) Тогда
		ДелоОбъект 				= Справочники.Дела.СоздатьЭлемент();
		ДелоОбъект.Пользователь = Пользователи.ТекущийПользователь();
	Иначе
		ДелоОбъект 				= Дело.ПолучитьОбъект();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дело.Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из Структура Цикл
		
		ИмяРеквизита 	= КлючЗначение.Ключ;
		Значение		= КлючЗначение.Значение;
		
		Если ИмяРеквизита = "Подсвечено" 
			ИЛИ (ИмяРеквизита = "Избранное" И Значение = Неопределено) Тогда
			ДелоОбъект[ИмяРеквизита] = НЕ ДелоОбъект[ИмяРеквизита];
		ИначеЕсли ИмяРеквизита = "Контексты" Тогда
			ДелоОбъект.Контексты.Очистить();
			Для Каждого Эл Из Значение Цикл
				НоваяСтрока = ДелоОбъект.Контексты.Добавить();
				НоваяСтрока.Контекст = Эл;
			КонецЦикла;
		ИначеЕсли ИмяРеквизита = "Уровень" Тогда
			Если Значение = 1 Тогда
				Родитель = ДелоОбъект.Родитель;
				Если ЗначениеЗаполнено(Родитель) Тогда
					ДелоОбъект.Родитель = Родитель.Родитель;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДелоОбъект[ИмяРеквизита] 	= Значение;
		КонецЕсли;
	
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		ДелоОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
	    ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитаВида(Знач Вид, Знач Реквизиты)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Вид, Реквизиты);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьРеквизитыВида(Знач Вид, Знач Структура)
	
	Если НЕ ЗначениеЗаполнено(Вид) Тогда
		ВидОбъект 				= Справочники.ВидыДел.СоздатьЭлемент();
		ВидОбъект.Пользователь 	= Пользователи.ТекущийПользователь();
	Иначе
		ВидОбъект 				= Вид.ПолучитьОбъект();
	КонецЕсли;
	
	Для Каждого Зн Из Структура Цикл
		ВидОбъект[Зн.Ключ] 	= Зн.Значение;
	КонецЦикла;
	
	ВидОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДелаНаСервере(Знач ДелоСсылка)
	
	Если ЗначениеЗаполнено(ДелоСсылка) Тогда
		
		Зн 	= СписокВидимыхДел.НайтиПоЗначению(ДелоСсылка);
		Если Зн <> Неопределено Тогда
			СписокВидимыхДел.Удалить(Зн);
		КонецЕсли;
		
		Дело = ДелоСсылка.ПолучитьОбъект();
		Дело.УстановитьПометкуУдаления(Истина, Истина);		
	КонецЕсли;

КонецПроцедуры

// Сворачивает или разворачивает дерево на форме (включая все дочерние элементы).
//
// Параметры:
//	Дерево - ДеревоЗначений - исходное дерево на форме.
//	Развернуть - Булево - развернуть (истина) или свернуть (ложь).
//
&НаКлиенте
Процедура СвернутьРазвернутьДерево(Дерево, Знач Развернуть) Экспорт 
	
    Для Каждого ЭлементКоллекции Из Дерево Цикл
        ВложенныеЭлементыКоллекции = ЭлементКоллекции.ПолучитьЭлементы();
        Если ВложенныеЭлементыКоллекции.Количество() > 0 Тогда
            СвернутьРазвернутьДерево(ВложенныеЭлементыКоллекции, Развернуть);

			Если Развернуть = Истина Тогда
	        	Элементы.Дерево.Развернуть(ЭлементКоллекции.ПолучитьИдентификатор());
			Иначе
				Элементы.Дерево.Свернуть(ЭлементКоллекции.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраДерева(Команда)
		
	РежимПросмотраДерева = (РежимПросмотраДерева + 1) % 3;
	ОбновитьКартинкуРежимаПросмотраДереваКлиент();
	ИзменитьРеквизитыВида(АктивныйВид, Новый Структура("РежимПросмотраДерева", РежимПросмотраДерева));
	
	ОбновитьДерево();
	ОбновитьВиды();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКартинкуРежимаПросмотраДереваКлиент()
	
	Если ПредыдущийРежимПросмотраДерева = РежимПросмотраДерева Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимПросмотраДерева = 0 Тогда
		Элементы.ФормаРежимПросмотраДерева.Картинка = БиблиотекаКартинокДелаВРаботе;
	ИначеЕсли РежимПросмотраДерева = 1 Тогда
		Элементы.ФормаРежимПросмотраДерева.Картинка = БиблиотекаКартинокДелаВРаботеИНедавноЗавершенные;
	Иначе
		Элементы.ФормаРежимПросмотраДерева.Картинка = БиблиотекаКартинокДелаВРаботеИВсеЗавершенные;
	КонецЕсли;
	ПредыдущийРежимПросмотраДерева = РежимПросмотраДерева;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПометитьВложенныеЭлементы(Знач Дело, Знач Выполнено) Экспорт

	Массив = Новый Массив;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Дела.Ссылка КАК Ссылка,
		|	Дела.ЭтоПапка КАК ЭтоПапка,
		|	Дела.Срок КАК Срок
		|ИЗ
		|	Справочник.Дела КАК Дела
		|ГДЕ
		|	Дела.ПометкаУдаления = ЛОЖЬ
		|	И Дела.Ссылка В ИЕРАРХИИ(&Дело)";
	
	Запрос.УстановитьПараметр("Дело", Дело);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоПапка Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			ДелоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДелоОбъект.Выполнено = Выполнено;
			ДелоОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		КонецПопытки;
		
		Массив.Добавить(Новый Структура("Дело,Срок,ЭтоПапка,ДатаВыполнения", Выборка.Ссылка, Выборка.Срок, Выборка.ЭтоПапка,
			ДелоОбъект.ДатаВыполнения));
			
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция ПроверитьУпорядочиваниеЭлементов(МетаданныеТаблицы)
	Если Не ПравоДоступа("Изменение", МетаданныеТаблицы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Владелец КАК Владелец,
	|	&Родитель КАК Родитель,
	|	Таблица.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	1 КАК Количество,
	|	Таблица.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВсеЭлементы
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеЭлементы.Владелец,
	|	ВсеЭлементы.Родитель,
	|	ВсеЭлементы.РеквизитДопУпорядочивания,
	|	СУММА(ВсеЭлементы.Количество) КАК Количество
	|ПОМЕСТИТЬ СтатистикаИндексов
	|ИЗ
	|	ВсеЭлементы КАК ВсеЭлементы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеЭлементы.РеквизитДопУпорядочивания,
	|	ВсеЭлементы.Родитель,
	|	ВсеЭлементы.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатистикаИндексов.Владелец,
	|	СтатистикаИндексов.Родитель,
	|	СтатистикаИндексов.РеквизитДопУпорядочивания
	|ПОМЕСТИТЬ Дубли
	|ИЗ
	|	СтатистикаИндексов КАК СтатистикаИндексов
	|ГДЕ
	|	СтатистикаИндексов.Количество > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеЭлементы.Ссылка КАК Ссылка
	|ИЗ
	|	ВсеЭлементы КАК ВсеЭлементы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Дубли КАК Дубли
	|		ПО ВсеЭлементы.РеквизитДопУпорядочивания = Дубли.РеквизитДопУпорядочивания
	|			И ВсеЭлементы.Родитель = Дубли.Родитель
	|			И ВсеЭлементы.Владелец = Дубли.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеЭлементы.Ссылка
	|ИЗ
	|	ВсеЭлементы КАК ВсеЭлементы
	|ГДЕ
	|	ВсеЭлементы.РеквизитДопУпорядочивания = 0";
	
	Информация = НастройкаПорядкаЭлементов.ПолучитьИнформациюДляПеремещения(МетаданныеТаблицы);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", Информация.ПолноеИмя);
	
	ПолеРодителя = "Родитель";
	Если Не Информация.ЕстьРодитель Тогда
		ПолеРодителя = "1";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Родитель", ПолеРодителя);
	
	ПолеВладельца = "Владелец";
	Если Не Информация.ЕстьВладелец Тогда
		ПолеВладельца = "1";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Владелец", ПолеВладельца);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.РеквизитДопУпорядочивания = 0;
		Объект.ДополнительныеСвойства.Вставить("ИгнорированиеПроверок", Истина);
		НачатьТранзакцию();
		Попытка
			Объект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПоменятьЭлементыМестами(ПервыйЭлементСсылка, ВторойЭлементСсылка)
	
	НачатьТранзакцию();
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ПервыйЭлементСсылка);
		ЗаблокироватьДанныеДляРедактирования(ВторойЭлементСсылка);
		
		ПервыйЭлементОбъект = ПервыйЭлементСсылка.ПолучитьОбъект();
		ВторойЭлементОбъект = ВторойЭлементСсылка.ПолучитьОбъект();
		
		ИндексПервого = ПервыйЭлементОбъект.РеквизитДопУпорядочивания;
		ИндексВторого = ВторойЭлементОбъект.РеквизитДопУпорядочивания;
		
		ПервыйЭлементОбъект.РеквизитДопУпорядочивания = ИндексВторого;
		ВторойЭлементОбъект.РеквизитДопУпорядочивания = ИндексПервого;
	
		ПервыйЭлементОбъект.Записать();
		ВторойЭлементОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьЭлемент(Родитель, ДелоТекущее, Знач МассивДочерних, Знач Направление = "Вверх")
		
	ПроверитьУпорядочиваниеЭлементов(ДелоТекущее.Метаданные());
	
	СоседнийЭлементСсылка = Неопределено;
	Индекс = МассивДочерних.Найти(ДелоТекущее);
	Пока Индекс >= 0 И Индекс < МассивДочерних.Количество() Цикл
		Если Направление = "Вверх" Тогда
			Индекс = Индекс - 1;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
		Если Индекс >= 0 И Индекс < МассивДочерних.Количество() Тогда
			СоседнийЭлементСсылка = МассивДочерних[Индекс];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СоседнийЭлементСсылка <> Неопределено Тогда
		ПоменятьЭлементыМестами(ДелоТекущее, СоседнийЭлементСсылка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбработатьСтиль(Знач Дело)
	
	Если Элементы.СтильЖирный.Пометка 
		ИЛИ Элементы.СтильКурсив.Пометка
		ИЛИ Элементы.СтильПодчеркнутый.Пометка Тогда
		                            
		ШрифтСтиля 	= Новый Шрифт(,,Элементы.СтильЖирный.Пометка,Элементы.СтильКурсив.Пометка,
			Элементы.СтильПодчеркнутый.Пометка,,);
		Значение 	= ЗначениеВСтрокуВнутр(ШрифтСтиля);
		
	Иначе
		
		Значение = "";
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВиды(Знач ПервыйЗапуск = Ложь)
	
	Разворачивать = Истина;
	
	// Запомним развернутые строки
	Если Разворачивать Тогда
		// Запоминаем развернутые строки
		СписокРазвернутыхВидов.Очистить();
		СписокРазвернутыхВидов(Виды, СписокРазвернутыхВидов);
	КонецЕсли;
	
	Если ПервыйЗапуск = Истина Тогда
		ВыделенныйВид = АктивныйВид;
	КонецЕсли;
	
	ЗаполнитьВидыДелНаСервере();
	
	Если Разворачивать Тогда
		// Восстанавливаем развернутые строки
		ВыделенныйВид = Неопределено;
		ВосстановитьРазвернутыеВиды(Виды, СписокРазвернутыхВидов, АктивныйВид, ВыделенныйВид);
		Если ВыделенныйВид <> Неопределено Тогда
			Элементы.Виды.ТекущаяСтрока = ВыделенныйВид;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРазвернутыхВидов(Эл, Список)
	
	Для Каждого Строки Из Эл.ПолучитьЭлементы() Цикл
		
		ИдентификаторСтроки = Строки.ПолучитьИдентификатор();
		Если Элементы.Виды.Развернут(ИдентификаторСтроки) Тогда
			Список.Добавить(Строки.Вид);
		КонецЕсли;
		СписокРазвернутыхВидов(Строки, Список);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьРазвернутыеВиды(Эл, Знач Список, Знач ВыделенныйВид, ВыделеннаяСтрока)
	
	Для Каждого Строки Из Эл.ПолучитьЭлементы() Цикл
		
		ИдентификаторСтроки = Строки.ПолучитьИдентификатор();
		
		Если Список.НайтиПоЗначению(Строки.Вид) <> Неопределено Тогда
			Элементы.Виды.Развернуть(ИдентификаторСтроки, Ложь);
		КонецЕсли;
		
		Если ВыделеннаяСтрока = Неопределено И ВыделенныйВид = Строки.Вид Тогда
			ВыделеннаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		
		ВосстановитьРазвернутыеВиды(Строки, Список, ВыделенныйВид, ВыделеннаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыДелНаСервере()
	
	мТекущаяДата    = ТекущаяДатаСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДел.Ссылка КАК Ссылка,
		|	ВидыДел.Родитель КАК Родитель,
		|	ВидыДел.ЭтоГруппа КАК ЭтоГруппа,
		|	ВидыДел.Наименование КАК Наименование,
		|	ВидыДел.Идентификатор КАК Идентификатор,
		|	ВидыДел.ИерархическийВид КАК ИерархическийВид,
		|	ВидыДел.ОткрытыеВеткиДел КАК ОткрытыеВеткиДел,
		|	ВидыДел.ТекущееДело КАК ТекущееДело,
		|	ВидыДел.Отборы КАК Отборы,
		|	ВидыДел.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	ВидыДел.ПоказатьСчетчик КАК ПоказатьСчетчик,
		|	ВидыДел.ВключаяПодчиненныеДела КАК ВключаяПодчиненныеДела,
		|	ВидыДел.ВключаяРодительскиеДела КАК ВключаяРодительскиеДела,
		|	ВидыДел.РежимПросмотраДерева КАК РежимПросмотраДерева,
		|	ВидыДел.НавСсылка КАК НавСсылка
		|ИЗ
		|	Справочник.ВидыДел КАК ВидыДел
		|ГДЕ
		|	ВидыДел.Видимость = ИСТИНА
		|	И ВидыДел.ПометкаУдаления = ЛОЖЬ
		|	И ВидыДел.Автор = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыДел.Ссылка ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	РезультатВыборки = Запрос.Выполнить();
	Если РезультатВыборки.Пустой() Тогда
		// Создаем виды по умолчанию для пользователя.
		Справочники.ВидыДел.ЗаполнитьВидыДелПоУмолчанию(ТекущийПользователь);
		Справочники.АвтоформатированиеДел.ЗаполнитьАвтоформатированиеДелУмолчанию(ТекущийПользователь);		
		Выборка = Запрос.Выполнить().Выбрать();
	Иначе
		Выборка = РезультатВыборки.Выбрать();
		Если Выборка.Количество() <= 1 Тогда
			
		КонецЕсли;
	КонецЕсли;
	
	ДЗ = ДанныеФормыВЗначение(Виды, Тип("ДеревоЗначений"));
	ДЗ.Строки.Очистить();

	ТаблицаРодителей = Новый ТаблицаЗначений;
	ТаблицаРодителей.Колонки.Добавить("Вид");
	ТаблицаРодителей.Колонки.Добавить("СтрокаВида");
	ТаблицаРодителей.Колонки.Добавить("Родитель");
	ТаблицаРодителей.Колонки.Добавить("Отборы");
	ТаблицаРодителей.Колонки.Добавить("ПоказатьСчетчик");
	ТаблицаРодителей.Колонки.Добавить("РежимПросмотраДерева");
	ТаблицаРодителей.Колонки.Добавить("ВключаяПодчиненныеДела");
	ТаблицаРодителей.Колонки.Добавить("ВключаяРодительскиеДела");
	ТаблицаРодителей.Колонки.Добавить("ИерархическийВид");
	ТаблицаРодителей.Колонки.Добавить("НавСсылка");
	
	ТаблицаРодителей.Индексы.Добавить("Вид");
	
	Пока Выборка.Следующий() Цикл
		
        Если НЕ ЗначениеЗаполнено(Выборка.Родитель) Тогда
            ТекСтрока           = ДЗ.Строки.Добавить();
            ТекСтрока.Вид	    = Выборка.Ссылка;
		Иначе
			// Ищем родительскую ветку, куда можно поместить текущую.
			НайденнаяСтрока = ТаблицаРодителей.Найти(Выборка.Родитель, "Вид");
			Если НайденнаяСтрока <> Неопределено Тогда
				ТекСтрока       = НайденнаяСтрока.СтрокаВида;
			Иначе
				Продолжить;
			КонецЕсли;
			
            ТекСтрока           = ТекСтрока.Строки.Добавить();
            ТекСтрока.Вид	    = Выборка.Ссылка;
		КонецЕсли;
		
		СтрокаТаблицыРодителей 				            = ТаблицаРодителей.Добавить();
		СтрокаТаблицыРодителей.Вид 			            = Выборка.Ссылка;
		СтрокаТаблицыРодителей.Родитель 	            = ТекСтрока.Родитель;
		СтрокаТаблицыРодителей.СтрокаВида 	            = ТекСтрока;
		СтрокаТаблицыРодителей.ПоказатьСчетчик			= Выборка.ПоказатьСчетчик;
		СтрокаТаблицыРодителей.РежимПросмотраДерева		= Выборка.РежимПросмотраДерева;
		СтрокаТаблицыРодителей.ВключаяПодчиненныеДела	= Выборка.ВключаяПодчиненныеДела;
		СтрокаТаблицыРодителей.ВключаяРодительскиеДела	= Выборка.ВключаяРодительскиеДела;
		СтрокаТаблицыРодителей.Отборы					= Выборка.Отборы;
		СтрокаТаблицыРодителей.ИерархическийВид			= Выборка.ИерархическийВид;
		СтрокаТаблицыРодителей.НавСсылка				= Выборка.НавСсылка;
		
		ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, 
			"Наименование, Идентификатор, РеквизитДопУпорядочивания, ЭтоГруппа, НавСсылка");

	КонецЦикла;
	
	// Сортировка дерева.
	ДЗ.Строки.Сортировать("РеквизитДопУпорядочивания Возр, Наименование Возр", Истина);
	
	// Вывод счетчиков
	Для Каждого Строки Из ТаблицаРодителей Цикл
		Если Строки.ПоказатьСчетчик = Истина Тогда			
			Массив = ПолучитьМассивВидимыхДел(Строки, Inbox, ТекущийПользователь, мТекущаяДата, СписокОбщихКонтекстов,
				ДелоФокус);
			Если Массив.Количество() > 0 Тогда
                Строки.СтрокаВида.Счетчик = Строка(Массив.Количество());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДЗ, Виды);
	
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторСтрокиВида(Эл, АктивныйВид)
	
	Для Каждого Строки Из Эл.ПолучитьЭлементы() Цикл
		
		ИдентификаторСтроки = Строки.ПолучитьИдентификатор();
		Если Строки.Вид = АктивныйВид Тогда
			Возврат ИдентификаторСтроки;
		КонецЕсли;
		СписокРазвернутыхВидов(Строки, АктивныйВид);
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьАктивныйВид(Знач Вид)
	
	// Сохраняем старый вид
	Попытка
		Массив = Новый Массив;
		МассивРазвернутыхДел(Дерево, Массив);
		Структура = Новый Структура;
		Структура.Вставить("ОткрытыеВеткиДел", ЗначениеВСтроку(Массив));
		Структура.Вставить("ТекущееДело", ЗначениеВСтроку(ТекущееДело));
		ИзменитьРеквизитыВида(АктивныйВид, Структура);
	Исключение
	КонецПопытки;
	
	АктивныйВид 			= Вид;
	
	// Находим в дереве активный вид и если он не совпадает ставим его.
	Если Элементы.Виды.ТекущиеДанные <> Неопределено Тогда
		
		Если Элементы.Виды.ТекущиеДанные.Вид <> АктивныйВид Тогда
			Элементы.Виды.ТекущаяСтрока = ИдентификаторСтрокиВида(Виды, АктивныйВид);
		КонецЕсли;
		
	КонецЕсли;
	
	Структура 				= СтруктураВидаНаСервере(АктивныйВид);
	ИерархическийВид		= Структура.ИерархическийВид;
	ИспользуетToDo			= Структура.ИспользуетToDo;
	ИспользуетГруппировки	= Структура.ИспользуетГруппировки;
	ТекущееДело				= Структура.ТекущееДело;
	Если РежимПросмотраДерева <> Структура.РежимПросмотраДерева Тогда
		РежимПросмотраДерева 	= Структура.РежимПросмотраДерева;
		ОбновитьКартинкуРежимаПросмотраДереваКлиент();
	КонецЕсли;
	
	// Выводим столбцы
	УстановитьСтолбцы(Структура.СписокСтолбцов);
	
	// Открытые ветки.
	Массив = Структура.МассивОткрытыхВетокДел;
	ОбновитьДерево(Массив);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтолбцы(Знач СписокСтолбцов)
	
	Стр = "";
	Для Каждого Столбец Из СписокСтолбцов Цикл
		Если Столбец.Пометка Тогда
			Стр = Стр + ?(ПустаяСтрока(Стр),"",",") + Столбец.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Стр <> СтрокаСпискаСтолбцов Тогда
		Индекс = СписокСтолбцов.Количество() - 1;
		Пока Индекс >= 0 Цикл
			Столбец = СписокСтолбцов.Получить(Индекс);
			ИмяСтолбца = "Дерево" + Столбец.Значение;
			Если Элементы[ИмяСтолбца].Видимость <> Столбец.Пометка Тогда
				Элементы[ИмяСтолбца].Видимость = Столбец.Пометка;
			КонецЕсли;
			Если Столбец.Пометка Тогда
				Элементы.Переместить(Элементы[ИмяСтолбца], Элементы.Дерево, ); 
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		СтрокаСпискаСтолбцов = Стр;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтруктураВидаНаСервере(Знач АктивныйВид)
	
	Если СтрНайти(Строка(АктивныйВид), "<Объект не найден") > 0 Тогда
		Справочники.ВидыДел.ЗаполнитьВидыДелПоУмолчанию(ТекущийПользователь);
		Справочники.АвтоформатированиеДел.ЗаполнитьАвтоформатированиеДелУмолчанию(ТекущийПользователь);
		АктивныйВид = УправлениеДелами.НайтиВидДелаПоИдентификатору("Inbox", ТекущийПользователь);
	КонецЕсли;
	
	АктивныйВидРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АктивныйВид, 
		"РежимПросмотраДерева,ИерархическийВид,ТекущееДело,ОткрытыеВеткиДел,Столбцы,Группировки,ИспользуетToDo,
		|ИспользуетГруппировки");
	
	Структура = Новый Структура;
	Структура.Вставить("РежимПросмотраДерева", 	АктивныйВидРеквизиты.РежимПросмотраДерева);
	Структура.Вставить("ИерархическийВид", 		АктивныйВидРеквизиты.ИерархическийВид);
	Структура.Вставить("ИспользуетToDo", 		АктивныйВидРеквизиты.ИспользуетToDo);
	Структура.Вставить("ИспользуетГруппировки", АктивныйВидРеквизиты.ИспользуетГруппировки);
	Попытка
		ТекДело = ЗначениеИзСтрокиВнутр(АктивныйВидРеквизиты.ТекущееДело);
	Исключение
		ТекДело = Справочники.Дела.ПустаяСсылка();
	КонецПопытки;
	Структура.Вставить("ТекущееДело", ТекДело);
	
	ОткрытыеВеткиДел = АктивныйВидРеквизиты.ОткрытыеВеткиДел;
	Попытка
		Массив = ЗначениеИзСтрокиВнутр(ОткрытыеВеткиДел);	
		Если ТипЗнч(Массив) <> Тип("Массив") Тогда
			Массив = Новый Массив;
		КонецЕсли;
	Исключение
		Массив = Новый Массив;
	КонецПопытки;
	Структура.Вставить("МассивОткрытыхВетокДел", Массив);
	
	СписокСтолбцов = УправлениеДелами.СписокСтолбцов();
	Позиция = 0;
	ВыборкаСтолбцы = АктивныйВидРеквизиты.Столбцы.Выбрать();
	Пока ВыборкаСтолбцы.Следующий() Цикл
		Эл = СписокСтолбцов.НайтиПоЗначению(ВыборкаСтолбцы.Имя);
		Если Эл <> Неопределено Тогда
			Значение 		= Эл.Значение;
			Представление 	= Эл.Представление;
			Картинка		= Эл.Картинка;
			СписокСтолбцов.Удалить(Эл);
			СписокСтолбцов.Вставить(0, Значение, Представление, Истина, Картинка);
		КонецЕсли;
	КонецЦикла;
	Структура.Вставить("СписокСтолбцов", СписокСтолбцов);
	
	Возврат Структура;

КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеВСтроку(Знач Значение)
	
	Возврат ЗначениеВСтрокуВнутр(Значение);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАктивныйВидВсехДел()
	
	Возврат УправлениеДелами.НайтиВидДелаПоИдентификатору("All", Пользователи.ТекущийПользователь()); 
	
КонецФункции

&НаКлиенте
Процедура ПерейтиИзТаблицыПоискаКДелу()
	
	ТекущиеДанные = Элементы.ТаблицаПоиска.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееДело = ТекущиеДанные.Дело;
	
	// Ищем в текущем виде, есть ли такое дело
	Массив = ПолучитьМассивВидимыхДел(АктивныйВид, Inbox, ТекущийПользователь, ОбщегоНазначенияКлиент.ДатаСеанса(),
		СписокОбщихКонтекстов, ДелоФокус);
	
	Если Массив.Найти(ТекущиеДанные.Дело) = Неопределено Тогда
		Вид = ПолучитьАктивныйВидВсехДел();
		Если Вид <> Неопределено Тогда
			ПереключитьАктивныйВид(Вид);
		КонецЕсли;
	КонецЕсли;
		
	// Получаем развернутых родителей
	МассивРазвернутых = ПолучитьРодителейДела(ТекущееДело);
	
	ОбновитьДерево(МассивРазвернутых);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБлижайшееДелоПоРеквизитуДопУпорядочивания(Знач ИД)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Дела.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Дела.РеквизитДопУпорядочивания - &ИД >= 0
		|			ТОГДА Дела.РеквизитДопУпорядочивания - &ИД
		|		ИНАЧЕ &ИД - Дела.РеквизитДопУпорядочивания
		|	КОНЕЦ КАК Разность
		|ИЗ
		|	Справочник.Дела КАК Дела
		|ГДЕ
		|	Дела.Ссылка В(&СписокВидимыхДел)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Разность";
	Запрос.УстановитьПараметр("СписокВидимыхДел", СписокВидимыхДел);
	Запрос.УстановитьПараметр("ИД", ИД);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокОбщихКонтекстов()
	
	СписокОбщихКонтекстов.Очистить();
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтекстыВидимость.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контексты.Видимость КАК КонтекстыВидимость
		|ГДЕ
		|	КонтекстыВидимость.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОбщихКонтекстов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораКрайнейДаты(Знач Имя = "")
	
	Если ИспользоватьВремя Тогда
		
		ТекДата			= ОбщегоНазначенияКлиент.ДатаСеанса();
		НачалоДняТекДата = НачалоДня(ТекДата);	
		
		Если ИспользоватьНачало И Имя = "Начало" ИЛИ Имя = "" Тогда
			Элементы.Начало.СписокВыбора.Очистить();
			             
			Если Начало <> Дата(1, 1, 1) Тогда
				мДата = НачалоДня(Начало);
			Иначе
				мДата = НачалоДняТекДата;
			КонецЕсли;
			НачалоДняМДата 	= НачалоДня(мДата);
			НачалоПериода 	= 6 * 3600;
			КонецПериода 	= 86400;
			Сек 			= НачалоПериода;
			СП				= Элементы.Начало.СписокВыбора;
			Пока Сек < КонецПериода Цикл
				ДатаШага = мДата + Сек;
				Если НачалоДняМДата = НачалоДняТекДата И ДатаШага < ТекДата Тогда
					Сек = Сек + 1800;
					Продолжить;
				КонецЕсли;
				СП.Добавить(ДатаШага);
				Сек = Сек + 1800;
			КонецЦикла;
		КонецЕсли;
		
		Если Имя = "Срок" ИЛИ Имя = "" Тогда
			Элементы.Срок.СписокВыбора.Очистить();
			             
			Если Срок <> Дата(1, 1, 1) Тогда
				мДата = НачалоДня(Срок);
			Иначе
				мДата = НачалоДняТекДата;
			КонецЕсли;
			НачалоДняМДата 	= НачалоДня(мДата);
			НачалоПериода 	= 6 * 3600;
			КонецПериода 	= 86400;
			Сек 			= НачалоПериода;
			СП 				= Элементы.Срок.СписокВыбора;
			Пока Сек < КонецПериода Цикл
				ДатаШага = мДата + Сек;
				Если НачалоДняМДата = НачалоДняТекДата И ДатаШага < ТекДата Тогда
					Сек = Сек + 1800;
					Продолжить;
				КонецЕсли;				
				СП.Добавить(ДатаШага);
				Сек = Сек + 1800;
			КонецЦикла;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоседниеЭлементы(Знач Эл, Знач Дело, Знач ВключаяТекущее = Ложь)
	
	Массив = Новый Массив;
	
	Родитель = Дело.Родитель;
	
	Для Каждого Строки Из Эл.ПолучитьЭлементы() Цикл
		
		Если Родитель = Строки.РодительскоеДело Тогда
			Если ВключаяТекущее = Истина ИЛИ (ВключаяТекущее = Ложь И Дело <> Строки.Дело) Тогда
				Массив.Добавить(Строки.Дело);
			КонецЕсли;
		КонецЕсли;
		
		МассивСосдених = СоседниеЭлементы(Строки, Дело, ВключаяТекущее);
		Для Каждого Д Из МассивСосдених Цикл
			Массив.Добавить(Д);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)

    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Если ПереносимыйЭлемент.Идентификатор = "Inbox" Тогда
		Возврат Ложь;
	КонецЕсли;
	
    Возврат Истина;

КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен.
    // Это произходит если выделены несколько элементов.
    // одной и той же ветви дерева на разных уровнях иерархии.
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Если Источник.ПолучитьРодителя() = Неопределено Тогда
        РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
    Иначе
        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеДаты(Знач Срок, Знач ИспользоватьВремя)
	
	Возврат УправлениеДелами.ПредставлениеДаты(Срок, ИспользоватьВремя);
	
КонецФункции

#КонецОбласти
