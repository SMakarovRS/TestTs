
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем Картинка, Надпись;
		
	Параметры.Свойство("КомментарийПриПереходеНаЭтап", КомментарийПриПереходеНаЭтап); 
	Элементы.ФормаДобавитьКомментарийИЗакрыть.Видимость = Ложь;
	ЭтоВебКлиент        	= УправлениеITОтделом8УФ.ПриложениеЯвляетсяВебКлиентом();
	ТекущийПользователь 	= Пользователи.ТекущийПользователь();	
	
	Если КомментарийПриПереходеНаЭтап = Истина Тогда // Форма открыта из Задания при переходе на этап.
		
		ЭтотОбъект.Родитель             = Справочники.Комментарии.ПустаяСсылка();
		Элементы.ГруппаВОтветНаСообщение.Видимость = Ложь;
		Объект.Период                   = ТекущаяДатаСеанса();
		Элементы.Автор.ТолькоПросмотр   = Истина;		
		СтруктураПриПереходе   			= ПолучитьПараметр("СтруктураПриПереходе", "Структура", Новый Структура);
		РазрешенПустойКомментарий		= НЕ ПолучитьПараметр("ОбязательноеЗаполнениеКомментария", "Булево", Ложь);
		ЭлементКнопка                   = Элементы.ФормаДобавитьКомментарийИЗакрыть;
		Элементы.ФормаДобавитьКомментарийИЗакрыть.Видимость = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость			= Ложь;
		Элементы.ФормаДобавитьКомментарийИЗакрыть.КнопкаПоУмолчанию = Истина;
				
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
			Объект.Автор = ТекущийПользователь;
		КонецЕсли;		
		
		Если СтруктураПриПереходе.Количество() > 0 Тогда
			Картинка = СтруктураПриПереходе.КартинкаЭтапа;
			Надпись  = СтруктураПриПереходе.НаименованиеЭтапа;
		КонецЕсли;
		
		Если Картинка <> Неопределено Тогда
			ЭлементКнопка.Картинка = Картинка;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Надпись) Тогда
			ЭлементКнопка.Заголовок   = Надпись;
			ЭлементКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		
		Элементы.Приватный.Видимость = ПолучитьПараметр("РазрешеныПриватныеКомментарии", "Булево", Ложь);
		
		Если Элементы.Приватный.Видимость Тогда
			//@skip-warning
			Приватный = ПолучитьПараметр("ПриватныйКомментарий", "Булево", Ложь);
		Иначе
			Приватный = Ложь;
		КонецЕсли;
		
		//@skip-warning
		ДополнительныйТекст = ПолучитьПараметр("ДополнительныйТекст", "Строка", "");		
		Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
			Объект.Заголовок = ДополнительныйТекст;
		КонецЕсли;	
		
		//@skip-warning
		ЗаписыватьДокументОснование = ПолучитьПараметр("ЗаписыватьДокументОснование", "Булево", Ложь);
		
		//@skip-warning
		ПеревестиНаЭтапПослеДобавленияКомментария = 
			ПолучитьПараметр("ПеревестиНаЭтапПослеДобавленияКомментария", "Булево", Ложь);
			
		//@skip-warning
		Источник = ПолучитьПараметр("Источник", "УникальныйИдентификатор", Новый УникальныйИдентификатор);
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
			Объект.Автор = ТекущийПользователь;
		КонецЕсли;
		Если Объект.Период = Дата(1, 1, 1) Тогда
			Объект.Период = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Элементы.Автор.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Автор);
		
		Если ЗначениеЗаполнено(Параметры.Родитель) Тогда
			ЭтотОбъект.Родитель = Параметры.Родитель;
		Иначе 
			ЭтотОбъект.Родитель = Справочники.Комментарии.ПолучитьЗначениеРодитель(Объект.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Родитель) Тогда
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотОбъект.Родитель, 
				"Автор, Период, Текст");
			
			МассивКомментариев = Новый Массив;
			МассивКомментариев.Добавить(ЭтотОбъект.Родитель);
			ВОтветТекстHTML =  Комментарии.ПолучитьHTML(
				Объект.ВладелецКомментария,
				УникальныйИдентификатор,
				Истина,
				Истина,
				Ложь,
				МассивКомментариев);
			
			ЭтотОбъект.АвторСообщения	= СтруктураРеквизитов.Автор;
			ЭтотОбъект.ТекстСообщения	= СтруктураРеквизитов.Текст;
			ЭтотОбъект.ПериодСообщения	= СтруктураРеквизитов.Период;
			АдресатыРодителя			= ЭтотОбъект.Родитель.Адресаты;
			Если АдресатыРодителя.Количество() > 0 Тогда
				Для Каждого СтрокаАдресаты Из АдресатыРодителя Цикл
					НоваяСтрока = Объект.Адресаты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАдресаты);
				КонецЦикла;	
			КонецЕсли;
			ОбновитьСписокАдресатов();
		КонецЕсли;
		
		Элементы.ГруппаВОтветНаСообщение.Видимость = ЗначениеЗаполнено(ЭтотОбъект.Родитель);
		
		ЭтоОтвет = ЗначениеЗаполнено(ЭтотОбъект.Родитель);
		
		Если ПустаяСтрока(Объект.ТекстHTML) Тогда
			Если ЭтоОтвет И Не ЭтоВебКлиент Тогда				
				Начало  = 0;
				Конец   = 0;			
				Вставка = Новый Массив;
				Вставка.Добавить(Новый ФорматированнаяСтрока(Строка(ЭтотОбъект.Родитель.Автор), Новый Шрифт(,,Истина)));
				Вставка.Добавить(", ");			
				ВставкаФС = Новый ФорматированнаяСтрока(Вставка);			           
				// Получаем в переменные Начало и Конец границы выделения.
				Элементы.ФорматированныйДокумент.ПолучитьГраницыВыделения(Начало, Конец);		    
				// Вставляем текст в начало границы выделения.
				ВставленныйТекст = ФорматированныйДокумент.Вставить(Начало, ВставкаФС);		    		    
				// Возвращаем фокус на редактор.
				ТекущийЭлемент = Элементы.ФорматированныйДокумент;
				// Устанавливаем курсор в конец вставленного текста.
				Элементы.ФорматированныйДокумент.УстановитьГраницыВыделения(ВставленныйТекст.ЗакладкаКонца,
					ВставленныйТекст.ЗакладкаКонца);
			КонецЕсли;
		Иначе
			ФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, Новый Структура);
		КонецЕсли;
		
		// Видимость "Приватный".
		Если ТипЗнч(Объект.ВладелецКомментария) = Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда
			Элементы.ГруппаПриватное.Видимость = Ложь;
			Элементы.Владелец.Заголовок = НСтр("ru = 'Статья базы знаний'");
		КонецЕсли;
		
		Если ЭтоОтвет Тогда
			Объект.УчетнаяЗаписьЭлектроннойПочты = ЭтотОбъект.Родитель.УчетнаяЗаписьЭлектроннойПочты;
			Если ЭтотОбъект.Родитель.Приватный Тогда
				Объект.Приватный               	  = Истина;
				Элементы.Приватный.Доступность 	  = Ложь;
				Элементы.ГруппаАдресаты.Видимость = Ложь;
				Элементы.Приватный.ЦветТекстаЗаголовка = WebЦвета.Красный;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
		
	Элементы.ГруппаАдресаты.Видимость 	= Элементы.Приватный.Видимость;
	Элементы.ГруппаАдресаты.Доступность = Ложь;
	
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;	
	Элементы.Комментарий.Видимость			   = Истина;
	Элементы.ГруппаФайлы.Видимость		       = Ложь;	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем заголовок добавленного комментария.
	Если ТипЗнч(Объект.ВладелецКомментария) = Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда
		Заголовок = НСтр("ru = 'Добавление комментария'");
	Иначе
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВладелецКомментария, "Номер, Дата, ТипПроцесса");
		Если ЗначениеЗаполнено(Данные.ТипПроцесса) Тогда
			ТипПроцессаСтрокой = Строка(Данные.ТипПроцесса);
		Иначе
			ТипПроцессаСтрокой = НСтр("ru = 'Задание'");
		КонецЕсли;
		НомерДок 			= СокрЛП(Данные.Номер);
		Сч 					= 1; 
		Дл 					= СтрДлина(НомерДок);
		Пока Сч < Дл И Сред(НомерДок, Сч, 1) = "0" Цикл 
			Сч = Сч + 1; 
		КонецЦикла;
		НомерДок 			= Сред(НомерДок, Сч);		
		Заголовок = СтрШаблон(НСтр("ru = 'Добавление комментария в %1 № %2 от %3'"), 		
			ТипПроцессаСтрокой, НомерДок, Формат(Данные.Дата, "ДФ=dd.MM.yy"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоОтвет = Истина Тогда 	
		ПодключитьОбработчикОжидания("ОбработчикУстановитьКурсорВШаблонеТекста", 0.5, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ВыполнитьПередЗаписьюНаСервере(ТекущийОбъект);
	
	// Актуализируем дату комментария.
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Период = ТекущаяДатаСеанса();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если КомментарийПриПереходеНаЭтап = Истина Тогда
		#Если ВебКлиент Тогда
			СтруктураСообщения = ПолучитьВложенияИТекстСообщенияНаСервере();
			ВложенияСообщения  = СтруктураСообщения.ВложенияСообщения;
			ТекстСообщения     = СтруктураСообщения.ТекстСообщения;
		#Иначе	
			ВложенияСообщения = Новый Структура;
			ФорматированныйДокумент.ПолучитьHTML(ТекстСообщения, ВложенияСообщения);
		#КонецЕсли
		
		ПустойКомментарий = Ложь;
		Если ПустаяСтрока(ФорматированныйДокумент.ПолучитьТекст())
			И ВложенияСообщения.Количество() = 0 
			И Вложения.Количество() = 0
			И (НЕ ЗначениеЗаполнено(СтатьяБазыЗнаний)) Тогда
			Если РазрешенПустойКомментарий Тогда
				ПустойКомментарий = Истина;
			Иначе	
				ПоказатьПредупреждение(, НСтр("ru = 'При переходе на этап требуется заполнить комментарий.'"));
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Объект.Приватный Тогда
		Если Объект.Адресаты.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для приватного комментария требуется указать адресатов.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Автор) Тогда
			ОтборСтруктура = Новый Структура;
			ОтборСтруктура.Вставить("Адресат", Объект.Автор);
			МассивСтрок    = Объект.Адресаты.НайтиСтроки(ОтборСтруктура);
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока = Объект.Адресаты.Добавить();
				НоваяСтрока.Адресат = Объект.Автор;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	ВыполнитьПередЗаписьюНаКлиенте(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если КомментарийПриПереходеНаЭтап = Истина Тогда
		Результат = Новый Структура;
		Результат.Вставить("СсылкаНаОбъект", 			 Объект.ВладелецКомментария);
		Результат.Вставить("Автор", 					 Объект.Автор);
		Результат.Вставить("ПриватныйКомментарий", 		 Объект.Приватный);		
		Результат.Вставить("ИдентификаторСообщения", 	 "");
		Результат.Вставить("ЗаголовокСообщения", 		 ДополнительныйТекст);
		Результат.Вставить("Источник", 					 Источник);
		Результат.Вставить("ЗаписыватьДокументОснование",ЗаписыватьДокументОснование);
		Результат.Вставить("СтруктураПриПереходе",		 СтруктураПриПереходе);
		Результат.Вставить("ПустойКомментарий",		 	 ПустойКомментарий);
		
		Оповестить("Задание_ДобавитьКомментарийИПеревестиНаЭтап", Результат, Источник);		
	Иначе
		Оповестить("Запись_Комментарий", Новый Структура("ВладелецКомментария", Объект.ВладелецКомментария)); 
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияДобавитьАдресатаНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыДобавленияАдресатов", ЭтотОбъект);
	
	ПараметрыФормы  = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецКомментария", Объект.ВладелецКомментария);
	МассивАдресатов = Новый Массив;
	Если Объект.Адресаты.Количество() > 0 Тогда
		Для Каждого СтрокаАдресаты Из Объект.Адресаты Цикл
			МассивАдресатов.Добавить(СтрокаАдресаты.Адресат);
		КонецЦикла;	
	КонецЕсли;
	ПараметрыФормы.Вставить("МассивАдресатов", МассивАдресатов);
	ОткрытьФорму("Справочник.Комментарии.Форма.ФормаВыбораАдресатов", ПараметрыФормы, ЭтотОбъект,,,, 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеЗакрытияФормыДобавленияАдресатов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Адресаты.Очистить();
	
	РезультатСписок = Новый СписокЗначений;
	РезультатСписок.ЗагрузитьЗначения(Результат);
	РезультатСписок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Результат = РезультатСписок.ВыгрузитьЗначения();
	
	Для Каждого СтрокаМассива Из Результат Цикл
		СтрокаАдресат = Объект.Адресаты.Добавить();
		СтрокаАдресат.Адресат = СтрокаМассива;
	КонецЦикла;
		
	ОбновитьСписокАдресатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриватныйПриИзменении(Элемент)
	
	Если Объект.Приватный Тогда
		Если ЗначениеЗаполнено(Родитель) Тогда			
			Элементы.ГруппаАдресаты.Доступность = Ложь;
			АвторКомментария = ЗначениеРеквизитаОбъекта(Родитель, "Автор");
			МассивСтрок      = Объект.Адресаты.НайтиСтроки(Новый Структура("Адресат", АвторКомментария));
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока = Объект.Адресаты.Добавить();
				НоваяСтрока.Адресат = АвторКомментария;
			КонецЕсли;	
		Иначе
			Элементы.ГруппаАдресаты.Доступность = Истина;
		КонецЕсли;
	Иначе
		Элементы.ГруппаАдресаты.Доступность = Ложь;
		Объект.Адресаты.Очистить();
	КонецЕсли;	
	
	ОбновитьСписокАдресатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматированныйДокументПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВОтветТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Если ДанныеСобытия.Anchor = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыФормы  = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаЗаписатьЗаданиеДобавлениеКомментария", ЭтотОбъект);
	КомментарииКлиент.КомментарииПолеHTMLПриНажатии(
		ДанныеСобытия, 
		ОписаниеОповещения, 
		ЭтаФорма, 
		ДополнительныеПараметрыФормы);	
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПослеВопросаЗаписатьЗаданиеДобавлениеКомментария(Результат, ДополнительныеПараметры) Экспорт
	// Ничего не делаем	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВставитьИзображениеИзФайла(Команда)
	
	ВыбратьКартинкуИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзФайла()
	
	АдресВременногоХранилища = "";
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ВыбратьКартинкуИзФайлаЗавершение2", ЭтотОбъект, 
		Новый Структура("АдресВременногоХранилища", АдресВременногоХранилища)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзФайлаЗавершение2(Подключено, ДополнительныеПараметры) Экспорт
	
	АдресВременногоХранилища = ДополнительныеПараметры.АдресВременногоХранилища;
	
	Если Подключено Тогда
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Фильтр = УправлениеITОтделом8УФКлиентСервер.ПолучитьФильтрИзображений();
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите изображение'");
		ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ВыбратьКартинкуИзФайлаЗавершение1", ЭтотОбъект,
			Новый Структура("АдресВременногоХранилища, ДиалогОткрытияФайла", АдресВременногоХранилища, ДиалогОткрытияФайла)));
	Иначе		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Данная возможность недоступна, так как не подключено расширение работы с файлами.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзФайлаЗавершение1(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	АдресВременногоХранилища = ДополнительныеПараметры.АдресВременногоХранилища;
	ДиалогОткрытияФайла = ДополнительныеПараметры.ДиалогОткрытияФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ВыбранноеИмя = ДиалогОткрытияФайла.ПолноеИмяФайла;
		НачатьПомещениеФайла(Новый ОписаниеОповещения("ВыбратьКартинкуИзФайлаЗавершение", ЭтотОбъект, 
			Новый Структура("АдресВременногоХранилища", АдресВременногоХранилища)), 
			АдресВременногоХранилища, ВыбранноеИмя, Ложь,);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзФайлаЗавершение(Результат, Адрес, ВыбранноеИмя, ДополнительныеПараметры) Экспорт
    
	Если Результат Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
        ВставитьКартинкуИзДвоичныхДанных(ДвоичныеДанные);		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВставитьСмайликУлыбка(Команда)
	
	ВставитьТекстВТекущееПоложение(":–)");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСмайликШирокаяУлыбка(Команда)
	
	ВставитьТекстВТекущееПоложение(":–D");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСмайликПечально(Команда)
	
	ВставитьТекстВТекущееПоложение(":–(");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСмайликШутливо(Команда)
	
	ВставитьТекстВТекущееПоложение(";–)");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСмайликЗдорово(Команда)
	
	ВставитьТекстВТекущееПоложение("8–)");
	Модифицированность = Истина;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВставитьСмайликШок(Команда)
	
	ВставитьТекстВТекущееПоложение("о_О");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСмайликСкептически(Команда)
	
	ВставитьТекстВТекущееПоложение(":–|");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСмайликВосклицание(Команда)
	
	ВставитьТекстВТекущееПоложение("(!)");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьФрагментКода(Команда)
	
	Если Элементы.ФорматированныйДокумент.ВыделенныйТекст = "" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите фрагмент для раскраски как кода встроенного языка 1С...'"));
	Иначе
		мТекст = Элементы.ФорматированныйДокумент.ВыделенныйТекст;
		Элементы.ФорматированныйДокумент.ВыделенныйТекст = ЗаданияКлиент.РаскраситьКод1С8(мТекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьШаблонОтвета(Команда)
	
	ОткрытьФорму("Справочник.ШаблоныОтветовКомментариевВЗаданиях.ФормаВыбора",,,,,,
		Новый ОписаниеОповещения("ШаблоныОтветовКомментариевВЗаданияхЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры
		
&НаКлиенте
Процедура ШаблоныОтветовКомментариевВЗаданияхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Структура = ПолучитьШаблонКомментария(Результат);
		Если Структура <> Неопределено Тогда
			//ВставляемыйФорматированныйДокумент = ПолучитьШаблонКомментария(Результат);
			СоединитьФорматированныеДокументы(Результат, ФорматированныйДокумент); 			
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось вставить шаблон для оповещения.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Добавляет один форматированный документ в другой 
// 
// Параметры:
// 	ИсходныйДокумент - Неопределено - Описание
// 	ДокументПолучатель - ФорматированныйДокумент - Описание
&НаСервере
Процедура СоединитьФорматированныеДокументы(Шаблон, ДокументПолучатель)    
    
    ТекМаркСписок 	= Неопределено;
    ТекНумСписок 	= Неопределено;
    
    ИсходныйДокумент = ПолучитьШаблонКомментария(Шаблон);
        
    Для Каждого Параграф Из ИсходныйДокумент.Элементы Цикл
        
        ЭтоМаркСписок 	= Параграф.ТипПараграфа = ТипПараграфа.МаркированныйСписок;
        ЭтоНумСписок 	= Параграф.ТипПараграфа = ТипПараграфа.НумерованныйСписок;

        Если ЭтоМаркСписок И ТекМаркСписок <> Неопределено Тогда 
            НовыйПараграф 	= ТекМаркСписок;
        ИначеЕсли ЭтоНумСписок И ТекНумСписок <> Неопределено Тогда 
            НовыйПараграф 	= ТекНумСписок;
        Иначе 
            НовыйПараграф 	= ДокументПолучатель.Элементы.Добавить();
            ЗаполнитьЗначенияСвойств(НовыйПараграф, Параграф);
            ТекМаркСписок 	= ?(ЭтоМаркСписок, НовыйПараграф, Неопределено);
            ТекНумСписок 	= ?(ЭтоНумСписок, НовыйПараграф, Неопределено);
		КонецЕсли;
		
        Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл
            Если Тип(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") Тогда
                НовыйТекст 						= НовыйПараграф.Элементы.Добавить(ЭлементПараграфа.Текст);
                НовыйТекст.НавигационнаяСсылка 	= ЭлементПараграфа.НавигационнаяСсылка;
                НовыйТекст.ЦветТекста 			= ЭлементПараграфа.ЦветТекста;
                НовыйТекст.ЦветФона 			= ЭлементПараграфа.ЦветФона;
                НовыйТекст.Шрифт 				= Новый Шрифт(ЭлементПараграфа.Шрифт);
            ИначеЕсли Тип(ЭлементПараграфа) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
                НовыйПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
            ИначеЕсли Тип(ЭлементПараграфа) = Тип("КартинкаФорматированногоДокумента") Тогда            	
            	НоваяКартинка = НовыйПараграф.Элементы.Добавить(
            		РаботаСHTML.КартинкаImgBase64(ЭлементПараграфа.Картинка), 
            		Тип("КартинкаФорматированногоДокумента"));
			    НоваяКартинка.Ширина 			= ЭлементПараграфа.Ширина;
			    НоваяКартинка.Высота 			= ЭлементПараграфа.Высота;
			КонецЕсли;
        КонецЦикла;
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОтветИзБазыЗнаний(Команда)
	
	Если Не ПустаяСтрока(СтатьяБазыЗнанийHTML) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаВыбратьСтатью", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Текущая статья базы знаний будет заменена. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		ВыбратьСтатьюБазыЗнанийФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСсылкуНаСтатьюБазыЗнаний(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.ФормаСписка", ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("ВставитьСсылкуИзБазыЗнанийЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Оп = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);
	ЗаданияКлиент.ПолучитьКартинкуИзБуфераОбмена(Оп);
		
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Подключено, ДвоичныеДанные) Экспорт
	
	Если Подключено = Истина Тогда
		ВставитьКартинкуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтатьюБазыЗнаний(Команда)
	
	Если Не ПустаяСтрока(СтатьяБазыЗнанийHTML) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаВыбратьСтатью", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Текущая статья базы знаний будет заменена. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		ВыбратьСтатьюБазыЗнанийФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтатьюБазыЗнаний(Команда)
	
	Если Не ПустаяСтрока(СтатьяБазыЗнанийHTML) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОчиститьСтатью", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Текущая статья базы знаний будет очищена. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		ОчиститьСтатьюБазыЗнанийФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложение(Команда)
	
	#Если Не ВебКлиент Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.МножественныйВыбор = Истина;
		ОписаниеОповещение        = Новый ОписаниеОповещения("ДиалогВыбораФайловПослеВыбора", ЭтотОбъект);
		Диалог.Показать(ОписаниеОповещение);
		
	#Иначе

		Адрес         = "";
		ВыбранныйФайл = "";
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ПомещениеФайлаПриОкончании", ЭтотОбъект);
		НачатьПомещениеФайла(ОбработчикОповещенияОЗакрытии, Адрес, ВыбранныйФайл, Истина, УникальныйИдентификатор);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда		
		
		Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда			
			ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Ссылка, ПараметрыВложения(), ЭтотОбъект);			
		Иначе			
			УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка, ЭтотОбъект);			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
		ПутьКФайлу = ТекущиеДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			
			Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
				
				Попытка					
					Данные = Новый ДвоичныеДанные(ТекущиеДанные.ИмяФайлаНаКомпьютере);					
					ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ПоместитьВоВременноеХранилище(
						Данные,
						УникальныйИдентификатор), 
						ПараметрыВложения(),
						ЭтотОбъект);					
				Исключение
					ЗапуститьПриложение("""" + ПутьКФайлу + """");
				КонецПопытки;
			Иначе
				ЗапуститьПриложение("""" + ПутьКФайлу + """");
			КонецЕсли;
			
		#Иначе
			ПолучитьФайл(ПутьКФайлу, ТекущиеДанные.ИмяФайла, Истина);
		#КонецЕсли
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		
		ПутьКФайлу = ТекущиеДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ИмяФайлаНаКомпьютере) Тогда
				ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
				СоздатьКаталог(ИмяВременнойПапки);
				ПутьКФайлу = ИмяВременнойПапки + "\" + ТекущиеДанные.ИмяФайла;
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ТекущиеДанные.ИмяФайлаНаКомпьютере);
				ДвоичныеДанные.Записать(ПутьКФайлу);
			КонецЕсли;
			ЗапуститьПриложение("""" + ПутьКФайлу + """");
		#Иначе
			ПолучитьФайл(ПутьКФайлу, ТекущиеДанные.ИмяФайла, Истина);
		#КонецЕсли
		
	КонецЕсли;
											   
КонецПроцедуры

&НаКлиенте
Процедура Файлы(Команда)
	
	Элементы.ГруппаФайлы.Видимость = НЕ Элементы.ГруппаФайлы.Видимость;
	Элементы.ФормаФайлы.Пометка    = Элементы.ГруппаФайлы.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарийИЗакрыть(Команда)
	
	#Если ВебКлиент Тогда
		СтруктураСообщения = ПолучитьВложенияИТекстСообщенияНаСервере();
		ВложенияСообщения  = СтруктураСообщения.ВложенияСообщения;
		ТекстСообщения     = СтруктураСообщения.ТекстСообщения;
	#Иначе	
		ВложенияСообщения = Новый Структура;
		ФорматированныйДокумент.ПолучитьHTML(ТекстСообщения, ВложенияСообщения);
	#КонецЕсли
	
	ПустойКомментарий = Ложь;
	Если ПустаяСтрока(ФорматированныйДокумент.ПолучитьТекст())
		И ВложенияСообщения.Количество() = 0 
		И Вложения.Количество() = 0
		И (НЕ ЗначениеЗаполнено(СтатьяБазыЗнаний)) Тогда
		Если РазрешенПустойКомментарий = Истина Тогда
			ПустойКомментарий = Истина;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'При переходе на этап требуется заполнить комментарий.'"));
			Возврат;
		КонецЕсли;	
	КонецЕсли;
		
	Если Не ПустойКомментарий Тогда		
		Отказ = Ложь;		
		ВыполнитьПередЗаписьюНаКлиенте(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ВыполнитьЗаписьНаСервере();
		Модифицированность = Ложь;
	КонецЕсли;
	
	Результат = Новый Структура;	
	Результат.Вставить("СсылкаНаОбъект", 			 Объект.ВладелецКомментария);
	Результат.Вставить("Автор", 					 Объект.Автор);
	Результат.Вставить("ПриватныйКомментарий", 		 Объект.Приватный);		
	Результат.Вставить("ИдентификаторСообщения", 	 "");
	Результат.Вставить("ЗаголовокСообщения", 		 ДополнительныйТекст);
	Результат.Вставить("Источник", 					 Источник);
	Результат.Вставить("ЗаписыватьДокументОснование",ЗаписыватьДокументОснование);
	Результат.Вставить("СтруктураПриПереходе",		 СтруктураПриПереходе);
	Результат.Вставить("ПустойКомментарий",		 	 ПустойКомментарий);
	
	Если ЗаписыватьДокументОснование Тогда
		Закрыть(Результат);
	Иначе	
		Оповестить("Задание_ДобавитьКомментарийИПеревестиНаЭтап", Результат, Источник);		
		Если Открыта() Тогда
			Закрыть(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЦитирование(Команда)
	
	Перем Начало, Конец;
	
	ТекстЦитаты = "";
	Если Элементы.ГруппаВОтветНаСообщение.Видимость = Истина И ТекущийЭлемент = Элементы.ВОтветТекстHTML Тогда
		Попытка
			ТекстЦитаты = Элементы.ВОтветТекстHTML.Документ.getSelection().getRangeAt(0).toString();
		Исключение
		КонецПопытки;
		
		ТекстЦитаты = СокрЛП(ТекстЦитаты);		
		ТекстЦитаты = "[QUOTE]" + ТекстЦитаты + "[/QUOTE]" + Символы.ПС;
		
		Элементы.ФорматированныйДокумент.ПолучитьГраницыВыделения(Начало, Конец);
		ВставленныйТекст = ФорматированныйДокумент.Вставить(Начало, ТекстЦитаты);		    		    
		ТекущийЭлемент = Элементы.ФорматированныйДокумент;
		Элементы.ФорматированныйДокумент.УстановитьГраницыВыделения(ВставленныйТекст.ЗакладкаКонца,
			ВставленныйТекст.ЗакладкаКонца);
		
	ИначеЕсли ЭтаФорма.ТекущийЭлемент = Элементы.ФорматированныйДокумент Тогда
		Элементы.ФорматированныйДокумент.ПолучитьГраницыВыделения(Начало, Конец);
		
		ВыделенныйТекст = СокрЛП(ТекстЦитаты);
		ТекстЦитаты = ФорматированныйДокумент.ПолучитьТекст(Начало, Конец);
		ТекстЦитаты = "[QUOTE]" + ВыделенныйТекст + "[/QUOTE]";
		
		Позиция = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(Начало);
		ФорматированныйДокумент.Удалить(Начало, Конец);
		Начало = ФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(Позиция);
		ВставленныйТекст = ФорматированныйДокумент.Вставить(Начало, ТекстЦитаты);
		ТекущийЭлемент = Элементы.ФорматированныйДокумент;
		
		Если ПустаяСтрока(ВыделенныйТекст) Тогда
			Позиция = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ВставленныйТекст.ЗакладкаКонца);
			Позиция = Позиция - 8;
			Закладка = ФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(Позиция);
			Элементы.ФорматированныйДокумент.УстановитьГраницыВыделения(Закладка,	
				Закладка);
		Иначе
			Элементы.ФорматированныйДокумент.УстановитьГраницыВыделения(ВставленныйТекст.ЗакладкаКонца,
				ВставленныйТекст.ЗакладкаКонца);
		КонецЕсли;
	КонецЕсли;
		
	ТекущийЭлемент = Элементы.ФорматированныйДокумент;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьПередЗаписьюНаКлиенте(Отказ)
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),, "Вложения",, 
						Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Если НЕ Объект.Приватный Тогда
		Объект.Адресаты.Очистить();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПередЗаписьюНаСервере(ТекущийОбъект)
	
	СтруктураВложений 				= Новый Структура;
	ФорматированныйДокумент.ПолучитьHTML(Объект.ТекстHTML, СтруктураВложений);
	ТекущийОбъект.Текст 		 	= ФорматированныйДокумент.ПолучитьТекст();
	ТекущийОбъект.ТекстHTML 	 	= Объект.ТекстHTML;
	ТекущийОбъект.РодительСсылка 	= ЭтотОбъект.Родитель;
	
	ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();	
	
	Для Каждого Вложение Из СтруктураВложений Цикл		
		НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
		НоваяСтрока.ИмяФайла = Вложение.Ключ;
		НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
		НоваяСтрока.Картинка = Вложение.Значение;		
	КонецЦикла;
	Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда		
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстHTML);
		Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
			ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
		ТекущийОбъект.ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);	
	КонецЕсли;
	
	// Заменяем теги из BBCode.
	ТекущийОбъект.ТекстHTML = СтрЗаменить(ТекущийОбъект.ТекстHTML, "[QUOTE]", "<BLOCKQUOTE>");
	ТекущийОбъект.ТекстHTML = СтрЗаменить(ТекущийОбъект.ТекстHTML, "[/QUOTE]", "</BLOCKQUOTE>");
	
	// Статья базы знаний.
	Если ЗначениеЗаполнено(СтатьяБазыЗнаний) Тогда
		БазаЗнанийHTMLВызовСервера.ЭлектронноеПисьмоИсходящееПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект.ТекстHTML);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Попытка
			ТекущийКомментарий = Справочники.Комментарии.ПолучитьСсылку(Новый УникальныйИдентификатор());			
			ТекущийОбъект.УстановитьСсылкуНового(ТекущийКомментарий);
		Исключение
			ОписаниеОш = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОш);
			Возврат;
		КонецПопытки;
	КонецЕсли;	
	
	// Записываем новые вложения - картинки из форматированного документа в присоединенные файлы.
	Для Каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
		
		АдресХранилище 		  	= ПоместитьВоВременноеХранилище(Вложение.Картинка.ПолучитьДвоичныеДанные(), 
			УникальныйИдентификатор);
		ДополнительныеРеквизиты = Новый Структура("ИДФайлаЭлектронногоПисьма", Вложение.ИдентификаторФайлаДляHTML);
		ПараметрыФайла 			= РаботаСФайлами.ПараметрыДобавленияФайла(ДополнительныеРеквизиты);
		ПараметрыФайла.ВладелецФайлов = ТекущийКомментарий; 
		ПараметрыФайла.Вставить("ИмяБезРасширения",   Вложение.ИмяФайла);
		ПараметрыФайла.Вставить("РасширениеБезТочки", "png");
		ПараметрыФайла.ВремяИзмененияУниверсальное = Неопределено;
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилище);
		
	КонецЦикла;
	
	// Вложения, которые были прикреплены в файлах.
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл		
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			
			РазложенноеИмяФайла = УправлениеITОтделом8УФ.РазложитьИмяФайла(СтрокаТаблицыВложений.ИмяФайла);
			ПараметрыФайла 		= РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.ВладелецФайлов = ТекущийКомментарий; 
			ПараметрыФайла.ВремяИзмененияУниверсальное = Неопределено;
			ЗаполнитьЗначенияСвойств(ПараметрыФайла, РазложенноеИмяФайла);			
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
				
		КонецЕсли;		
		СтрокаТаблицыВложений.Расположение = 0;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеВопросаОчиститьСтатью(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСтатьюБазыЗнанийФрагмент();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтатьюБазыЗнанийФрагмент()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСтатьиБазыЗнаний", ЭтотОбъект);
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.ФормаСписка", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтатьиБазыЗнаний(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда
		Возврат;
	КонецЕсли;	
	
	ОчиститьСтатьюБазыЗнанийФрагмент();		
	СтатьяБазыЗнаний = Результат;
	ЗаполнитьТекстHTMLСтатьиНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтатьюБазыЗнанийФрагмент()
	
	СтатьяБазыЗнаний     = ПредопределенноеЗначение("Справочник.СтатьиБазыЗнаний.ПустаяСсылка");	
	СтатьяБазыЗнанийHTML = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстHTMLСтатьиНаСервере()
	
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;	
	Элементы.СтатьяБазыЗнаний.Видимость		   = Истина;
	
	Если СтатьяБазыЗнаний.РазделИмпортирован Тогда
		СтатьяБазыЗнанийHTML = БазаЗнанийHTMLВызовСервера.ПолучитьТекстСтатьиИмпортированнойИзФайла(СтатьяБазыЗнаний);
	Иначе
		СтатьяБазыЗнанийHTML = БазаЗнанийHTMLВызовСервера.ПолучитьТекстСтатьиБазыЗнаний(СтатьяБазыЗнаний);
	КонецЕсли;
	
	Если СтатьяБазыЗнаний.Файлы.Количество() > 0 Тогда		
		Для Каждого СтрокаФайл Из СтатьяБазыЗнаний.Файлы Цикл			
			Попытка
				ДанныеФайла                      = РаботаСФайлами.ДанныеФайла(СтрокаФайл.Файл, 
					Новый Структура("ИдентификаторФормы", УникальныйИдентификатор));
				НоваяСтрока                      = Вложения.Добавить();
				НоваяСтрока.Расположение         = 4;
				НоваяСтрока.ИмяФайлаНаКомпьютере = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
				НоваяСтрока.ИмяФайла             = ДанныеФайла.ИмяФайла;				
				Расширение 						 = ДанныеФайла.Расширение;
				НоваяСтрока.ИндексКартинки       = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
				НоваяСтрока.Размер 	 			 = ДанныеФайла.Размер;
				НоваяСтрока.РазмерПредставление  = 
					ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(НоваяСтрока.Размер);
			Исключение
				Продолжить;
			КонецПопытки;	
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаВыбратьСтатью(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьСтатьюБазыЗнанийФрагмент();
		
КонецПроцедуры

&НаСервере
Функция ПолучитьШаблонКомментария(Знач ШаблонОтвета)
	
	Попытка
		Возврат ШаблонОтвета.ШаблонОповещения.Получить();		
	Исключение		
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ВставитьКартинкуИзДвоичныхДанных(Знач ДвоичныеДанные)
	
	Элементы.ФорматированныйДокумент.ВыделенныйТекст = "";	
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ВставитьКартинкуВОписаниеНаСервере(Адрес);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьКартинкуВОписаниеНаСервере(Адрес)
	
	НП = Неопределено;
	КП = Неопределено;
	Элементы.ФорматированныйДокумент.ПолучитьГраницыВыделения(НП, КП);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	Картинка = Новый Картинка(ДвоичныеДанные);
	ФорматированныйДокумент.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	ФорматированныйДокумент.Вставить(НП, Картинка, ТипЭлементаФорматированногоДокумента.Картинка); 
	ФорматированныйДокумент.Вставить(НП, Символы.ПС, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	УдалитьИзВременногоХранилища(Адрес);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСсылкуИзБазыЗнанийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗакладкаНачало	= Неопределено;
	ЗакладкаКонец 	= Неопределено;
	Элементы.ФорматированныйДокумент.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);
	МассивЭлементов	= ФорматированныйДокумент.ПолучитьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
	
	Если МассивЭлементов.Количество() > 0 И ТипЗнч(МассивЭлементов[0]) = Тип("ТекстФорматированногоДокумента") Тогда
		ЭлементФорматированногоДокумента = МассивЭлементов[0];
		ЗакладкаНачало	= ЭлементФорматированногоДокумента.ЗакладкаНачала;
		ЗакладкаКонец	= ЭлементФорматированногоДокумента.ЗакладкаКонца;
	КонецЕсли;
	
	РезультатНавСсылка 	= ПолучитьНавигационнуюСсылку(Результат);
	ТекстHTML		   	= Результат;
	РезультатВставки 	= ФорматированныйДокумент.Вставить(ЗакладкаНачало, ТекстHTML);
	РезультатВставки.НавигационнаяСсылка = РезультатНавСсылка;
	НачалоВыделения	 	= РезультатВставки.ЗакладкаНачала;
	РезультатВставки 	= ФорматированныйДокумент.Вставить(РезультатВставки.ЗакладкаКонца, " ");
	Элементы.ФорматированныйДокумент.УстановитьГраницыВыделения(НачалоВыделения, РезультатВставки.ЗакладкаКонца);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайловПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Расположение = 2;
		НоваяСтрока.ИмяФайлаНаКомпьютере = ВыбранныйФайл;
		
		ИмяФайла = ИмяФайлаБезКаталога(ВыбранныйФайл);
		НоваяСтрока.ИмяФайла = ИмяФайла;
		
		Расширение                      = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
		НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
		ДополнительныеПараметры = Новый Структура("СтрокаТаблицыВложений", НоваяСтрока);
		
		Файл = Новый Файл(ВыбранныйФайл);
		Файл.НачатьПолучениеРазмера(
			Новый ОписаниеОповещения("ПолучениеРазмераЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
	КонецЦикла;
	
	Если ВыбранныеФайлы.Количество() > 0 Тогда
		Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяФайлаБезКаталога(Знач ПолноеИмяФайла)
	
	ИмяФайла = ПолноеИмяФайла;
	Пока Истина Цикл
		
		Позиция = Макс(СтрНайти(ИмяФайла, "\"), СтрНайти(ИмяФайла, "/"));
		Если Позиция = 0 Тогда
			Возврат ИмяФайла;
		КонецЕсли;
		
		ИмяФайла = Сред(ИмяФайла, Позиция + 1);
		
	КонецЦикла;
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура ПомещениеФайлаПриОкончании(РезультатПомещения, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если РезультатПомещения = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение         = 4;
	НоваяСтрока.ИмяФайлаНаКомпьютере = Адрес;
	НоваяСтрока.ИмяФайла             = ВыбранноеИмяФайла;
	
	Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ВыбранноеИмяФайла);
	НоваяСтрока.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	
	Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ОбновитьЗаголовокФайлы();
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаКлиенте
Функция ПараметрыВложения()
	
	ПараметрыВложения = ВзаимодействияКлиент.ПустаяСтруктураПараметровПисьмаВложения();
	ПараметрыВложения.ДатаПисьмаОснования = Объект.Дата;
	ПараметрыВложения.ПисьмоОснование     = Объект.Ссылка;
	ПараметрыВложения.ТемаПисьмаОснования = Объект.Заголовок;
	
	Возврат ПараметрыВложения;
	
КонецФункции

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложение(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьВложение(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка             = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ТипЗнч(ФайлПринятый) = Тип("Файл") Тогда
					МассивФайлов.Добавить(ФайлПринятый);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		ДополнительныеПараметры = Новый Структура("ВыбранныйФайл", ВыбранныйФайл);
		ОписаниеОповещение = Новый ОписаниеОповещения("ПроверкаЭтоФайлПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры);
		ВыбранныйФайл.НачатьПроверкуЭтоФайл(ОписаниеОповещение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЭтоФайлПослеЗавершения(ЭтоФайл, ДополнительныеПараметры) Экспорт

	Если НЕ ЭтоФайл Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = ДополнительныеПараметры.ВыбранныйФайл.ПолноеИмя;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение = 2;
	НоваяСтрока.ИмяФайлаНаКомпьютере = ПолноеИмя;
	
	ИмяФайла = ИмяФайлаБезКаталога(ПолноеИмя);
	НоваяСтрока.ИмяФайла = ИмяФайла;
	
	Расширение                      = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
	НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	ДополнительныеПараметры         = Новый Структура("СтрокаТаблицыВложений", НоваяСтрока);
	//@skip-warning
	ОписаниеОповещение              = Новый ОписаниеОповещения("НовыйФайлПослеИнициализации", ЭтотОбъект, 
		ДополнительныеПараметры);
		
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещение, ПолноеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеРазмераЗавершение(Размер, ДополнительныеПараметры) Экспорт

	СтрокаТаблицыВложений  = ДополнительныеПараметры.СтрокаТаблицыВложений;
	СтрокаТаблицыВложений.Размер = Размер;
	СтрокаТаблицыВложений.РазмерПредставление = 
		ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 
		
	ОбновитьЗаголовокФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтатьюБазыЗнаний()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеДобавленияСтатьиБазыЗнаний", ЭтотОбъект);
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.ФормаСписка", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеДобавленияСтатьиБазыЗнаний(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока                  = СтатьиБазыЗнаний.Добавить();
	НоваяСтрока.СтатьяБазыЗнаний = Результат;
	НоваяСтрока.ИндексКартинки   = ПолучитьИндексКартинкиСтатьиНаСервере(Результат);	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИндексКартинкиСтатьиНаСервере(СтатьяСсылка)
	
	Если СтатьяСсылка.ПометкаУдаления Тогда
		Возврат 2;
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ДобавитьСтатьюБазыЗнанийВыполнить(Команда)
	
	ДобавитьСтатьюБазыЗнаний();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатьюБазыЗнаний(Команда)
	
	ТекущиеДанные = Элементы.СтатьиБазыЗнаний.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.СтатьяБазыЗнаний);
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, , , , , );
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФайлы()
	
	Если Вложения.Количество() > 0 Тогда
		Элементы.ФормаФайлы.Заголовок = СтрШаблон(НСтр("ru = 'Файлы (%1)'"), Вложения.Количество());
	Иначе
		Элементы.ФормаФайлы.Заголовок = НСтр("ru = 'Файлы'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПослеУдаления(Элемент)
	
	ОбновитьЗаголовокФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикУстановитьКурсорВШаблонеТекста()
	
	ТекущийЭлемент = Элементы.ФорматированныйДокумент;	
	Закладка       = ФорматированныйДокумент.ПолучитьЗакладкуКонца();
	Элементы.ФорматированныйДокумент.УстановитьГраницыВыделения(Закладка, Закладка);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметр(Имя, тТип, ЗначениеПоУмолчанию)
	
	Перем Ответ;
	
	Если Параметры.Свойство(Имя, Ответ) Тогда
		Если ТипЗнч(Ответ) = Тип(тТип) Тогда
			Возврат Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ВыполнитьЗаписьНаСервере()
	
	ОбъектФормы = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.Комментарии")); 
	ВыполнитьПередЗаписьюНаСервере(ОбъектФормы);
	ОбъектФормы.Записать();
	ЗначениеВДанныеФормы(ОбъектФормы, Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВложенияИТекстСообщенияНаСервере()
	
	ТекстСообщения 	  = "";	
	ВложенияСообщения = Новый Структура;
	ФорматированныйДокумент.ПолучитьHTML(ТекстСообщения, ВложенияСообщения);
	Результат         = Новый Структура("ВложенияСообщения, ТекстСообщения", ВложенияСообщения, ТекстСообщения); 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВставитьТекстВТекущееПоложение(Текст)
	
	// Инициализация
    Начало = 0; Конец = 0;
    
    // Получаем в переменные Начало и Конец границы выделения
    //@skip-warning
    Элементы.ФорматированныйДокумент.ПолучитьГраницыВыделения(Начало, Конец);
    
    // Вставляем текст в начало границы выделения
    //@skip-warning
    ВставленныйТекст = ФорматированныйДокумент.Вставить(Начало, Текст);	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокАдресатов()
	
	// Очистим старых адресатов.
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого СтрокаАдресат Из Элементы.ВыбранныеАдресаты.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(СтрокаАдресат);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
		
	ГруппаРодитель 	 = Неопределено;
	НомерСтрокиГрупп = 0;
	ТекущаяШирина	 = 0;
	ШрифтПоУмолчанию = Новый Шрифт("ANSI моноширинный шрифт");
	
	Для Каждого Строки Из Объект.Адресаты Цикл
		
		Если ГруппаРодитель = Неопределено ИЛИ ТекущаяШирина + СтрДлина(Строка(Строки.Адресат)) + 3 > 100 Тогда
			
			ГруппаРодитель 						= Элементы.Добавить("ГруппаАдресатовФормы" + НомерСтрокиГрупп,
				Тип("ГруппаФормы"), Элементы.ВыбранныеАдресаты);
				
			ГруппаРодитель.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаРодитель.Отображение 			= ОтображениеОбычнойГруппы.Нет;
			ГруппаРодитель.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаРодитель.ОтображатьЗаголовок 	= Ложь;
			НомерСтрокиГрупп 					= НомерСтрокиГрупп + 3;
			ТекущаяШирина 						= 0;
			
		КонецЕсли;
		
		ПолеУдалениеАдресата = Элементы.Добавить("АдресатФормы" + Формат(Строки.НомерСтроки, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="),
			Тип("ДекорацияФормы"), ГруппаРодитель);
		МассивСтрок      = Новый Массив;                                                       
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.УдалитьТег, , , ,
			"АдресатФормы" + Формат(Строки.НомерСтроки, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=")));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" " + Строка(Строки.Адресат), ШрифтПоУмолчанию));		
		ПолеУдалениеАдресата.Заголовок   = Новый ФорматированнаяСтрока(МассивСтрок, ,ЦветаСтиля.ЦветТекстаТега);
		ПолеУдалениеАдресата.РастягиватьПоГоризонтали = Ложь;
		ПолеУдалениеАдресата.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_УдалениеАдресата");
		ПолеУдалениеАдресата.Доступность = Не ТолькоПросмотр;		
		ТекущаяШирина    = ТекущаяШирина + СтрДлина(Строка(Строки.Адресат)) + 3;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалениеАдресата(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
		
	ИндексСтроки = Сред(НавигационнаяСсылка, СтрДлина("АдресатФормы") + 1);
	Объект.Адресаты.Удалить(ИндексСтроки - 1);
	
	Если Элементы.Приватный.Видимость = Истина Тогда
		Если Объект.Адресаты.Количество() > 0 Тогда
			Элементы.Приватный.Доступность = Ложь;
		Иначе
			Элементы.Приватный.Доступность = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	ОбновитьСписокАдресатов();		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеРеквизитаОбъекта(Знач ОбъектСсылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, ИмяРеквизита);
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

