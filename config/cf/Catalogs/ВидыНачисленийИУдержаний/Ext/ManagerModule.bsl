
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Тип");
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

#Область ПрограммныйИнтерфейс

// Функция заполняет виды начислений и удержаний.
//
Процедура ЗаполнитьВидыНачисленийИУдержаний() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовоеНачисление     			= НайтиСоздатьГруппуПравила("Начисления", НСтр("ru = 'Начисления'"));
	ГруппаНачисление				= НовоеНачисление.Ссылка;
	
	НовоеНачисление     			= НайтиСоздатьГруппуПравила("Удержания", НСтр("ru = 'Удержания'"));
	ГруппаУдержание					= НовоеНачисление.Ссылка;
	
	// Оклад по дням
	Идентификатор							= НСтр("ru = 'Оклад по дням (производственный календарь)'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда			
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.Формула				= "[ТарифнаяСтавка] * [ОтработаноДней] / [НормаДней]";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоРеквизиту("Идентификатор", Идентификатор);
			Объект 							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель 				= ГруппаНачисление;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Начисление;
			НовоеНачисление.Формула			= "[ТарифнаяСтавка] * [ОтработаноДней] / [НормаДней]";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Оклад по часам
	Идентификатор							=  НСтр("ru = 'Оклад по часам (производственный календарь)'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда 
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.Формула 			= "[ТарифнаяСтавка] * [ОтработаноЧасов] / [НормаЧасов]";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоРеквизиту("Идентификатор", Идентификатор);
			Объект 							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель 				= ГруппаНачисление;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Начисление;
			НовоеНачисление.Формула 		= "[ТарифнаяСтавка] * [ОтработаноЧасов] / [НормаЧасов]";
			Объект.Записать();		
		Исключение
		КонецПопытки;		
	КонецЕсли;
	
	// Оклад по дням Графики
	Идентификатор							= НСтр("ru = 'Оклад по дням (график работы сотрудника)'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда 
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.Формула				= "[ТарифнаяСтавка] * [ОтработаноДней] / [НормаДнейГрафикСотрудника]";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель 				= ГруппаНачисление;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Начисление;
			НовоеНачисление.Формула			= "[ТарифнаяСтавка] * [ОтработаноДней] / [НормаДнейГрафикСотрудника]";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Оклад по часам Графики
	Идентификатор							= НСтр("ru = 'Оклад по часам (график работы сотрудника)'"); 
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда 
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.Формула 			= "[ТарифнаяСтавка] * [ОтработаноЧасов] / [НормаЧасовГрафикСотрудника]";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель 				= ГруппаНачисление;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Начисление;
			НовоеНачисление.Формула 		= "[ТарифнаяСтавка] * [ОтработаноЧасов] / [НормаЧасовГрафикСотрудника]";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Отпускные
	Идентификатор							= НСтр("ru = 'Отпускные'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаНачисление;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Начисление;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Погашение займа из зарплаты
	Идентификатор							= НСтр("ru = 'Погашение займа из зарплаты'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаУдержание;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Удержание;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект 							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаУдержание;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Удержание;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Проценты по займу
	Идентификатор							= НСтр("ru = 'Проценты по займу'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаУдержание;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Удержание;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаУдержание;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Удержание;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Оплата по сдельным нарядам
	Идентификатор							= НСтр("ru = 'Сдельная оплата (тариф)'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаНачисление;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Начисление;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Сдельная оплата процентом
	Идентификатор							= НСтр("ru = 'Сдельная оплата (% от суммы)'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаНачисление;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Начисление;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
		
	// Фиксированная сумма
	Идентификатор							= НСтр("ru = 'Сдельная оплата (фиксированная сумма)'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаНачисление;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Начисление;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Премия
	Идентификатор							= НСтр("ru = 'Премия'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаНачисление;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Начисление;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Налог на доходы
	Идентификатор							= НСтр("ru = 'Налог на доходы'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаУдержание;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаУдержание;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Налог;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
		
	// ПФР по суммарному тарифу
	Идентификатор							= НСтр("ru = 'Взносы в ПФР  с 1 января 2014 года'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаУдержание;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаУдержание;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Налог;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
		
	// ПФР накопительная
	Идентификатор							= НСтр("ru = 'Взносы в ПФР- накопительная часть(до 2014 года)'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаУдержание;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаУдержание;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Налог;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
		
	// ПФР страховая
	Идентификатор							= НСтр("ru = 'Взносы в ПФР- страховая часть(до 2014 года)'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаУдержание;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаУдержание;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Налог;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// ФСС
	Идентификатор							= НСтр("ru = 'Взносы в ФСС (временная нетрудоспособность)'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаУдержание;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаУдержание;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Налог;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// ФСС несчастные случаи
	Идентификатор							= НСтр("ru = 'Взносы в ФСС (несчастные случаи)'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаУдержание;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаУдержание;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Налог;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// ФФОМС
	Идентификатор							= НСтр("ru = 'Взносы в ФФОМС'");
	Если Не ЗаработнаяПлатаСервер.ВидНачисленияУдержанияСуществует(Идентификатор) Тогда
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаУдержание;
		НовоеНачисление.Наименование 		= Идентификатор;
		НовоеНачисление.Идентификатор		= Идентификатор;
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.Записать();
	Иначе
		Попытка
			СсылкаНаОбъект	= 
			Справочники.ВидыНачисленийИУдержаний.НайтиПоНаименованию(Идентификатор);
			Объект							= СсылкаНаОбъект.ПолучитьОбъект();
			Объект.Родитель					= ГруппаУдержание;
			Объект.Тип						= Перечисления.ТипыНачисленийИУдержаний.Налог;
			Объект.Формула					= "";
			Объект.Записать();		
		Исключение
		КонецПопытки;
	КонецЕсли;
				
КонецПроцедуры

// Функция возвращает группу правила.
//
Функция НайтиСоздатьГруппуПравила(Знач ИмяИдентификатора, Знач ИмяГруппы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыНачисленийИУдержаний.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНачисленийИУдержаний КАК ВидыНачисленийИУдержаний
		|ГДЕ
		|	ВидыНачисленийИУдержаний.ЭтоГруппа = ИСТИНА
		|	И ВидыНачисленийИУдержаний.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ИмяИдентификатора);	
	РезультатЗапроса       = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	Иначе
		
		Спр = Справочники.ВидыНачисленийИУдержаний.СоздатьГруппу();
		Спр.Идентификатор	= ИмяИдентификатора;
		Спр.Наименование	= ИмяГруппы;
		Спр.Записать();
		
		Возврат Спр.Ссылка;
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает вид начисления.
//
Функция ПредопределенноеЗначениеПоИдентификатору(Знач ИмяИдентификатора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос        = Новый Запрос();
	Запрос.Текст  =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыНачисленийИУдержаний.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНачисленийИУдержаний КАК ВидыНачисленийИУдержаний
		|ГДЕ
		|	ВидыНачисленийИУдержаний.Идентификатор = &ИмяИдентификатора";
	
	Запрос.УстановитьПараметр("ИмяИдентификатора", ИмяИдентификатора);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		Спр 				= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		Спр.Идентификатор 	= ИмяИдентификатора;
		Спр.Наименование  	= ИмяИдентификатора;
		Спр.Записать();
		
		Возврат Спр.Ссылка;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли