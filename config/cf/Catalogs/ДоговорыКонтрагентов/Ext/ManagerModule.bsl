#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает список имен "ключевых" реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	Результат.Добавить("ВалютаРасчетов");
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Получает договор контрагента по умолчанию с учетом условий отбора.
// Возвращается основной договор или единственный или пустую ссылку.
//
// Параметры
//  Контрагент	-	<СправочникСсылка.Контрагенты>.
//							Контрагент, договор которого нужно получить.
//  Организация	-	<СправочникСсылка.Организации>.
//							Организация, договор которой нужно получить.
//  СписокВидовДоговора	-	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоров>.
//							Нужные виды договора.
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> - найденный договор или пустая ссылка.
//
Функция ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, 
		Организация, СписокВидовДоговора = Неопределено) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
		+?(СписокВидовДоговора <> Неопределено,"
		|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции // ПолучитьДоговорКонтрагента()

// Проверяет договор контрагента на соответствие переданным параметрам.
//
// Параметры
//	ТекстСообщения - <Строка> - текст сообщения об ошибках.
//	Договор	-	<СправочникСсылка.ДоговорыКонтрагентов> - проверяемый договор.
//	Организация	-	<СправочникСсылка.Организации> - организация документа.
//	Контрагент	-	<СправочникСсылка.Контрагенты> - контрагент документа.
//	СписокВидовДоговора	-	<СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоров>.
//							Нужные виды договора.
//
// Возвращаемое значение:
//	<Булево> - Истина, если проверка пройдена успешно.
//
Функция ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, Договор, 
		Организация, Контрагент, СписокВидовДоговора) Экспорт
	
	ТекстСообщения = "";
		
	НеСоответствуетОрганизация = Ложь;
	НеСоответствуетВидДоговора = Ложь;
	
	Если Договор.Организация <> Организация Тогда
		НеСоответствуетОрганизация = Истина;
	КонецЕсли;
			
	Если (НеСоответствуетОрганизация ИЛИ НеСоответствуетВидДоговора) = Ложь Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Реквизиты договора не соответствуют условиям документа:'");
	
	Если НеСоответствуетОрганизация Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = '- Не совпадает организация'");
	КонецЕсли;
	
	Если НеСоответствуетВидДоговора Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = '- Не совпадает вид договора'");
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ДоговорСоответствуетУсловиямДокумента()

// Возвращает список доступных видов договора для документа.
//
// Параметры
//	Документ  - любой документ, предусматривающий договор контрагента.
//	ВидОперации  - вид операции документа.
//
// Возвращаемое значение:
//	<СписокЗначений>   - список видов договора, доступных для документа.
//
Функция ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации = Неопределено, ИмяТабличнойЧасти = "") Экспорт
	
	СписокВидовДоговора = Новый СписокЗначений;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.Доверенность") Тогда		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);			
	КонецЕсли;
	
	Возврат СписокВидовДоговора;
	
КонецФункции // ПолучитьСписокВидовДоговораДляДокумента()

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
//@skip-warning
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Устанавливает статус договоров.
//
// Параметры:
//	Договоры - Массив - Массив ссылок на договоры;
//	Статус - ПеречислениеСсылка.СтатусыДоговоровКонтрагентов - Статус, который будет установлен у договоров.
//
// Возвращаемое значение:
//	Число - Количество обработанных объектов.
//
Функция УстановитьСтатус(Договоры, Статус) Экспорт
	
	МассивСсылок = Новый Массив();
	КоличествоОбработанных = 0;
	
	Для Каждого Договор Из Договоры Цикл
		
		Если ТипЗнч(Договор) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(Договор);
		
	КонецЦикла;
	
	Если МассивСсылок = 0 Тогда
		Возврат КоличествоОбработанных;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("Статус", Статус);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			
			ТекстОшибки = НСтр("ru='Договор %Договор% помечен на удаление. Невозможно изменить статус'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Договор%", Выборка.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Если Выборка.СтатусСовпадает Тогда
			
			ТекстОшибки = НСтр("ru='Договору %Договор% уже присвоен статус ""%Статус%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Договор%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Статус);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось заблокировать %Договор%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Договор%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			
		КонецПопытки;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Статус = Статус;	
		
		Если Не Объект.ПроверитьЗаполнение() Тогда
			Продолжить;
		КонецЕсли;
			
		Попытка
			
			Объект.Записать();
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось записать %Договор%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Договор%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", 
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			
		КонецПопытки
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;
	
КонецФункции

// СтандартныеПодсистемы.ВариантыОтчетов
// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
		
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();		
		КомандаОтчет.Менеджер      = Метаданные.Отчеты.ВзаиморасчетыСКонтрагентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Ведомость по взаиморасчетам'");
		КомандаОтчет.МножественныйВыбор = Ложь;
		КомандаОтчет.Важность      = "Обычное";
		КомандаОтчет.КлючВарианта  = "Основной";		
		
	КонецЕсли;
			
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВариантыОтчетов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//@skip-warning
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	

КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#Область Взаимодействия
////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Взаимодействия.

// Возвращает контакты.
// 
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПоКонтактам(ТекстВременнаяТаблица = "", Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить,"ВЫБРАТЬ РАЗЛИЧНЫЕ","ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ");
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	ДоговорыКонтрагентов.Владелец КАК Контакт " + ТекстВременнаяТаблица + "
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Предмет
	|	И (НЕ ДоговорыКонтрагентов.Владелец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", 
//         		mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "Контрагент_Наименование";
	НовыйРеквизит.Представление = НСтр("ru = 'Наименование контрагента'");
	НовыйРеквизит.Тип = Новый ОписаниеТипов("Строка");	
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "Контрагент_НаименованиеПолное";
	НовыйРеквизит.Представление = НСтр("ru = 'Полное наименование контрагента'");
	НовыйРеквизит.Тип = Новый ОписаниеТипов("Строка");	

КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Попытка	
		Сообщение.ЗначенияРеквизитов["Контрагент_Наименование"]			= ПредметСообщения.Владелец.Наименование;
		Сообщение.ЗначенияРеквизитов["Контрагент_НаименованиеПолное"]	= ПредметСообщения.Владелец.НаименованиеПолное;
	Исключение
		Сообщение.ЗначенияРеквизитов["Контрагент_Наименование"]			= "";
		Сообщение.ЗначенияРеквизитов["Контрагент_НаименованиеПолное"]	= "";
	КонецПопытки;	
	
	Сообщение.Вставить("Предмет", ПредметСообщения);	
	
	// Внешняя ссылка. 
	Если Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект") <> Неопределено Тогда
		ЗначениеВнешнейСсылки = Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект");
		ТекстЗаголовка = ?(ПустаяСтрока(ПредметСообщения.Наименование), 
		    "Договор "
			+ Строка(ПредметСообщения.НомерДоговора)
			+ " от "
			+ Строка(Формат(ПредметСообщения.ДатаДоговора, "ДФ=dd.MM.yy")),
			ПредметСообщения.Наименование);			
		Сообщение.ЗначенияРеквизитов["ВнешняяСсылкаНаОбъект"] = 
			"<a href=" + Строка(ЗначениеВнешнейСсылки) + ">" + ТекстЗаголовка + "</a></p>";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
//@skip-warning
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
//@skip-warning
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта     = Новый Соответствие;	
	СоответствиеИзменениеОбъекта.Вставить("ДоговорыКонтрагентовИзменениеОбъектаЗаписьЭлемента", 
		НСтр("ru = 'Запись элемента'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ДоговорыКонтрагентовИзменениеОбъектаДействует", 
		НСтр("ru = 'Установлен статус ""Действует""'"));	
		
	СоответствиеИзменениеОбъекта.Вставить("ДоговорыКонтрагентовИзменениеОбъектаЗакрыт", 
		НСтр("ru = 'Установлен статус ""Закрыт""'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ДоговорыКонтрагентовИзменениеОбъектаНеСогласован", 
		НСтр("ru = 'Установлен статус ""Не согласован""'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ДоговорыКонтрагентовИзменениеОбъектаСогласование", 
		НСтр("ru = 'Установлен статус ""Согласование""'"));	
		
	СоответствиеИзменениеОбъекта.Вставить("ДоговорыКонтрагентовИзменениеОбъектаИзменениеСтатуса", 
		НСтр("ru = 'Изменение статуса'"));	
	
		
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("ДоговорыКонтрагентовРасчетМетрикЗаписьЭлемента", НСтр("ru = 'Запись элемента'"));

	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура = Неопределено, 
		Знач Источник = Неопределено) Экспорт
	
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ПравилоСобытия.ТипПравила = Перечисления.ТипыПравилСобытий.ИзменениеОбъекта Тогда 
		Результат = Ложь;		
		
		Если Структура.ЭтоНовый Тогда
			Если ИмяСобытия = "ДоговорыКонтрагентовИзменениеОбъектаЗаписьЭлемента" Тогда				
				Результат = Истина;				
			КонецЕсли;
			
		Иначе
			
			ИсточникПередЗаписью 	= Структура.ИсточникПередЗаписью;
			
			Если ИмяСобытия = "ДоговорыКонтрагентовИзменениеОбъектаЗаписьЭлемента" Тогда
				Результат = Истина;
				
			ИначеЕсли ИмяСобытия = "ДоговорыКонтрагентовИзменениеОбъектаЗакрыт" Тогда
				
				Если Источник.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт
					И Источник.Статус <> ИсточникПередЗаписью.Статус Тогда
				    Результат = Истина;
				КонецЕсли;				
				
			ИначеЕсли ИмяСобытия = "ДоговорыКонтрагентовИзменениеОбъектаДействует" Тогда
				
				Если Источник.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует
					И Источник.Статус <> ИсточникПередЗаписью.Статус Тогда
				    Результат = Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ДоговорыКонтрагентовИзменениеОбъектаНеСогласован" Тогда
				
				Если Источник.Статус = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован
					И Источник.Статус <> ИсточникПередЗаписью.Статус Тогда
				    Результат = Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ДоговорыКонтрагентовИзменениеОбъектаСогласование" Тогда
				
				Если Источник.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Согласование
					И Источник.Статус <> ИсточникПередЗаписью.Статус Тогда
				    Результат = Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ДоговорыКонтрагентовИзменениеОбъектаИзменениеСтатуса" Тогда
				
				Если Источник.Статус <> ИсточникПередЗаписью.Статус Тогда
				    Результат = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли