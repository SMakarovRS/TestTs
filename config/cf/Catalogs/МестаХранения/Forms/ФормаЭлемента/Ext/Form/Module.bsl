
#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// СтандартныеПодсистемы.КонтактнаяИнформация	
	ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация		
	
	УстановитьВидимостьИДоступность();
		
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
		
	ЭлементМодифицирован = Ложь;
		
	ЗаполнитьОтветственныхЛиц();
	ОтветственныеЛицаIT.Параметры.УстановитьЗначениеПараметра("МестоХранения", Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) 
		И ТипЗнч(Параметры.ЗначениеКопирования) = Тип("СправочникСсылка.МестаХранения") Тогда
		
		Картинка = Параметры.ЗначениеКопирования.Картинка.Получить();
		АдресКартинки = Параметры.ЗначениеКопирования.НавСсылка;
		
	ИначеЕсли Объект.Ссылка.Пустая() Тогда
		
		Картинка = БиблиотекаКартинок.вмхКартинкаНеВыбранногоВидаСклада;
		Если ЗначениеЗаполнено(Объект.ВидМестаХранения) Тогда		
			ПриИзмененииВидаМестаХранения();		
		КонецЕсли;
		
	КонецЕсли;
	ОбновитьИзображение();
		
	// Учет остатков контрагентов.
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Организация");
	УправлениеITОтделом8УФ.УстановитьОграничениеТипаДляЭлементовФормы(ЭтаФорма, МассивЭлементов, 
		ЗначениеЗаполнено(Объект.Организация));	
	
	ЗаданияСервер.УстановитьШагКорректировкиВеса(ШагКорректировкиВеса);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Картинка = ТекущийОбъект.Картинка.Получить();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
    УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
// Процедура обработчик события ОбработкаОповещения.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если СтрНайти(ИмяСобытия, "Запись_") > 0 И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		Если Параметр.Свойство("МассивМестХранения") Тогда
			Массив = Параметр.МассивМестХранения;
			Если Массив.Найти(Объект.Ссылка) <> Неопределено Тогда
				ЗаполнитьОтветственныхЛиц();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
// Процедура обработчик события ПередЗаписьюНаСервере.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Картинка = Новый ХранилищеЗначения(Картинка);
	
	// СтандартныеПодсистемы.Свойства 
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если Модифицированность Тогда
		ЭлементМодифицирован = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
// Процедура обработчик события ПослеЗаписиНаСервере.
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УстановитьВидимостьИДоступность();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Если ЭлементМодифицирован Тогда
		ЭлементМодифицирован = Ложь;
	КонецЕсли;
	
	ЗаполнитьОтветственныхЛиц();
	ОтветственныеЛицаIT.Параметры.УстановитьЗначениеПараметра("МестоХранения", Объект.Ссылка);
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	//@skip-warning
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВыбораОрганизацииКонтрагента"
		И ИсточникВыбора.ВладелецФормы = ЭтаФорма Тогда
		УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбораФормы(ЭтаФорма, 
		 				"Организация",
						Объект.Организация,
						ВыбранноеЗначение,
						Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект));	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ПриИзмененииВидаМестаХранения()
	
	ВидОбъект = Объект.ВидМестаХранения.ПолучитьОбъект();
	
	Хранилище = ВидОбъект.Картинка.Получить();
	Если ТипЗнч(Хранилище) = Тип("Картинка") Тогда
		Картинка = Хранилище;
	Иначе
		Картинка = Новый Картинка(Хранилище);
	КонецЕсли;
	ОбновитьИзображение();
		
КонецПроцедуры

&НаКлиенте
Процедура ВидМестаХраненияПриИзменении(Элемент)
	
	ПриИзмененииВидаМестаХранения();
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗакреплениеСотрудникаНаСевере()
	НовыйДок					= Документы.ЗакреплениеСотрудников.СоздатьДокумент();
	НовыйДок.Заполнить(Объект);
	НовыйДок.Организация		= Объект.Организация;
	НовыйДок.Дата				= ТекущаяДатаСеанса();
	НоваяСтрока 				= НовыйДок.Сотрудники.Добавить();
	НоваяСтрока.МестоХранения 	= Объект.Ссылка;
	
	Структура = Новый Структура;
	Структура.Вставить("Документ", НовыйДок);
	
	Возврат ПоместитьВоВременноеХранилище(Структура, Новый УникальныйИдентификатор());	
КонецФункции

&НаСервере
Функция СнятиеЗакрепленияСотрудникаНаСевере()
	
	НовыйДок					= Документы.СнятиеЗакрепленияСотрудников.СоздатьДокумент();
	НовыйДок.Заполнить(Объект);
	НовыйДок.Организация		= Объект.Организация;
	НовыйДок.Дата				= ТекущаяДатаСеанса();
	НоваяСтрока 				= НовыйДок.Сотрудники.Добавить();
	// Получаем текущего сотрудника
	Отбор						= Новый Структура;
	Отбор.Вставить("МестоХранения", Объект.Ссылка);
	Результат					= РегистрыСведений.ОтветственныеСотрудники.ПолучитьПоследнее(ТекущаяДатаСеанса(),
		Отбор);
	
	Если СтрНайти(Строка(Результат.Сотрудник), НСтр("ru = 'Объект не найден'")) = 0 Тогда
		Попытка
			НоваяСтрока.Сотрудник	= Результат.Сотрудник;
		Исключение
		КонецПопытки;
	КонецЕсли;

	НоваяСтрока.МестоХранения 	= Объект.Ссылка;	
	Структура = Новый Структура;
	Структура.Вставить("Документ", НовыйДок);
	
	Возврат ПоместитьВоВременноеХранилище(Структура, Новый УникальныйИдентификатор());	
КонецФункции

&НаСервере
Функция СоздатьПеремещениеСотрудникаНаСевере()
	
	НовыйДок					= Документы.ПеремещениеСотрудников.СоздатьДокумент();
	НовыйДок.Заполнить(Объект);
	НовыйДок.Организация		= Объект.Организация;
	НовыйДок.Дата				= ТекущаяДатаСеанса();
	НоваяСтрока 				= НовыйДок.Сотрудники.Добавить();
	НоваяСтрока.СтароеМестоХранения= Объект.Ссылка;
	Отбор						= Новый Структура;
	Отбор.Вставить("МестоХранения", Объект.Ссылка);
	Результат					= РегистрыСведений.ОтветственныеСотрудники.ПолучитьПоследнее(ТекущаяДатаСеанса(), 
		Отбор);
	
	Если СтрНайти(Строка(Результат.Сотрудник), НСтр("ru = 'Объект не найден'")) = 0 Тогда
		Попытка
			НоваяСтрока.Сотрудник	= Результат.Сотрудник;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("Документ", НовыйДок);	
	
	Возврат ПоместитьВоВременноеХранилище(Структура, Новый УникальныйИдентификатор());
	
КонецФункции

&НаКлиенте
Процедура ЗакреплениеСотрудника(Команда)	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать элемент. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакреплениеСотрудникаЗавершение",ЭтаФорма);
		Режим = РежимДиалогаВопрос.ОКОтмена;
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,Режим);
		Возврат;
	КонецЕсли;
	
	ЗакреплениеСотрудникаЗавершениеФрагмент();	
КонецПроцедуры

&НаКлиенте
Процедура ЗакреплениеСотрудникаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	ЗакреплениеСотрудникаЗавершениеФрагмент();	
КонецПроцедуры

&НаКлиенте
Процедура ЗакреплениеСотрудникаЗавершениеФрагмент()	
	Адрес = СоздатьЗакреплениеСотрудникаНаСевере();
	// Форму надо открыть
	Если НЕ ПустаяСтрока(Адрес) Тогда
		ПолучитьФорму("Документ.ЗакреплениеСотрудников.Форма.ФормаДокумента", 
			Новый Структура("ОткрываетсяИзВне, Объект", Истина, Адрес),,Новый УникальныйИдентификатор(),).Открыть();   
		ТолькоПросмотр = Истина;
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура ПеремещениеСотрудника(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать элемент. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеремещениеСотрудникаЗавершение",ЭтаФорма);
		Режим = РежимДиалогаВопрос.ОКОтмена;
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,Режим);
		Возврат;
	КонецЕсли;	
	ПеремещениеСотрудникаЗавершениеФрагмент();	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеСотрудникаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;	
	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Создание:'"),
	ПолучитьНавигационнуюСсылку(Объект.Ссылка),
	Строка(Объект.Ссылка),
	БиблиотекаКартинок.Информация32);
	ПеремещениеСотрудникаЗавершениеФрагмент();	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеСотрудникаЗавершениеФрагмент()	
	Адрес = СоздатьПеремещениеСотрудникаНаСевере();
	// Форму надо открыть
	Если НЕ ПустаяСтрока(Адрес) Тогда
		ПолучитьФорму("Документ.ПеремещениеСотрудников.Форма.ФормаДокумента", 
			Новый Структура("ОткрываетсяИзВне, Объект", Истина, Адрес),,Новый УникальныйИдентификатор(),).Открыть();   
		ТолькоПросмотр = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СнятиеЗакрепленияСотрудника(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать элемент. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СнятиеЗакрепленияСотрудникаЗавершение",ЭтаФорма);
		Режим = РежимДиалогаВопрос.ОКОтмена;
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,Режим);
		Возврат;
	КонецЕсли;
	
	СнятиеЗакрепленияСотрудникаЗавершениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятиеЗакрепленияСотрудникаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Создание:'"), ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка), БиблиотекаКартинок.Информация32);
	СнятиеЗакрепленияСотрудникаЗавершениеФрагмент();	
КонецПроцедуры

&НаКлиенте
Процедура СнятиеЗакрепленияСотрудникаЗавершениеФрагмент()	
	
	Адрес = СнятиеЗакрепленияСотрудникаНаСевере();
	// Форму надо открыть
	Если НЕ ПустаяСтрока(Адрес) Тогда
		ПолучитьФорму("Документ.СнятиеЗакрепленияСотрудников.Форма.ФормаДокумента", 
			Новый Структура("ОткрываетсяИзВне, Объект", Истина, Адрес),, Новый УникальныйИдентификатор(),).Открыть();
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзображениеИзФайла(Команда)
	ВыбратьКартинкуИзФайла(Новый ОписаниеОповещения("ВыбратьИзображениеИзФайлаЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзображениеИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьИзображение();
    ОбновитьИнтерфейс();

КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьКартинкуИзФайла(Новый ОписаниеОповещения("ВыбратьИзображениеИзФайлаЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзображениеИзНабора(Команда)
	Структура = Новый Структура();
	Структура.Вставить("ПрефиксКартинок", "вмх");

	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзображенияИзНабора", Структура,,,,, 
		Новый ОписаниеОповещения("ВыбратьИзображениеИзНабораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзображениеИзНабораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Если Результат <> Неопределено Тогда
		Картинка = Результат;
        Адрес = ПоместитьВоВременноеХранилище(Результат);
        ПоместитьФайлОбъекта(Адрес);
        Элементы.АдресКартинки.Обновить();
		ОбновитьИзображение();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	УстановитьВидимостьИДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	
	ТекущиеДанные = Элементы.ОтветственныеЛица.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Документ) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе 
		ПоказатьЗначение(,ТекущиеДанные.Документ); 	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВесРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ШагКорректировкиВеса > 1 Тогда		
		
		СтандартнаяОбработка = Ложь;
		Если Направление = 1 Тогда
			Объект.Вес = Объект.Вес + ШагКорректировкиВеса;
		Иначе
			Объект.Вес = Объект.Вес - ШагКорректировкиВеса;
		КонецЕсли;	
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства

//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, 
	СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВнешнийВидФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаСервере
// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьИДоступность()
	
	Элементы.СетевыеИнтерфейсы.Видимость = ЗначениеЗаполнено(Объект.ВидМестаХранения) 
		И Объект.ВидМестаХранения.ИмеетСетевыеНастройки;	
	Элементы.РасшифровкаМестоположения.Заголовок = ПолучитьТекстРасшифровкиМестоположения(Объект.Местоположение);
	Элементы.Местоположение.Подсказка = Элементы.РасшифровкаМестоположения.Заголовок;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервереБезКонтекста
Функция ПолучитьТекстРасшифровкиМестоположения(Помещение)
	
	Если НЕ ЗначениеЗаполнено(Помещение) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	Пар = Помещение.Родитель;
	Пока ЗначениеЗаполнено(Пар) Цикл
		Если НЕ ПустаяСтрока(Результат) Тогда
			Результат = " > " + Результат;
		КонецЕсли;
		Результат = Пар.Наименование + Результат;
		Пар = Пар.Родитель;
	КонецЦикла;
	
	Возврат "Местонахождение: " + Результат;
	
КонецФункции // ПолучитьТекстРасшифровкиМестоположения

&НаСервере
Процедура ОчиститьИзображениеНаСервере()
	ЭлементСправочника = РеквизитФормыВЗначение("Объект");
	ЭлементСправочника.Картинка = Неопределено;
	ЭлементСправочника.Записать();
	Модифицированность = Ложь;
	ЗначениеВРеквизитФормы(ЭлементСправочника, "Объект"); 	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Картинка = БиблиотекаКартинок.вмхКартинкаНеВыбранногоВидаСклада;
	ОчиститьИзображениеНаСервере();	
	ОбновитьИзображение();
	Элементы.АдресКартинки.Обновить();
	
	Оповестить("ОбновлениеИзображенийМестХранения", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИзображение()
	                        
	АдресКартинки = ПоместитьВоВременноеХранилище(Картинка, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзФайла(Знач Оповещение)
	Перем ВыбранноеИмя;
	Перем АдресВременногоХранилища;
	АдресВременногоХранилища = "";

	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Фильтр = УправлениеITОтделом8УФКлиентСервер.ПолучитьФильтрИзображений();
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите изображение'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ВыбранноеИмя = ДиалогОткрытияФайла.ПолноеИмяФайла;
			НачатьПомещениеФайла(Новый ОписаниеОповещения("ВыбратьКартинкуИзФайлаЗавершение", ЭтотОбъект, 
				Новый Структура("АдресВременногоХранилища, Оповещение", АдресВременногоХранилища, Оповещение)), 
					АдресВременногоХранилища, ВыбранноеИмя, Ложь,);
            Возврат;	
		КонецЕсли;
	Иначе		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Данная возможность недоступна, так как не подключено расширение работы с файлами.'", "ru"));
	КонецЕсли;			
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзФайлаЗавершение(Результат, Адрес, ВыбранноеИмя, ДополнительныеПараметры) Экспорт
        
	Если Результат = Истина Тогда
		Картинка = Новый Картинка(ПолучитьИзВременногоХранилища(Адрес));
		ОбновитьИзображение();
        ПоместитьФайлОбъекта(Адрес);
        Элементы.АдресКартинки.Обновить();
        Оповестить("ОбновлениеИзображенийМестХранения", Объект.Ссылка, ЭтаФорма);
    КонецЕсли;	
    
КонецПроцедуры

// Процедура извлекает данные объекта из временного хранилища, 
// производит модификацию элемента справочника и записывает его.
// 
// Параметры: 
//  АдресВременногоХранилища - Строка - адрес временного хранилища. 
// 
// Возвращаемое значение: 
//  Нет.
&НаСервере
Процедура ПоместитьФайлОбъекта(АдресВременногоХранилища)
	ЭлементСправочника = РеквизитФормыВЗначение("Объект");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ЭлементСправочника.Картинка = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных());
	ЭлементСправочника.Записать();
	Модифицированность = Ложь;
	УдалитьИзВременногоХранилища(АдресВременногоХранилища);
	ЗначениеВРеквизитФормы(ЭлементСправочника, "Объект");     
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.КонтактнаяИнформация
//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)	
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);	
КонецПроцедуры
	
//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		Ожидание, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, 
		Ожидание, СтандартнаяОбработка);
КонецПроцедуры
	
//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, 
		СтандартнаяОбработка);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, 
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
    ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервере
Процедура ЗаполнитьОтветственныхЛиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеСотрудники.Период КАК Дата,
		|	ОтветственныеСотрудники.Регистратор КАК Документ,
		|	ОтветственныеСотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
		|ГДЕ
		|	ОтветственныеСотрудники.МестоХранения = &МестоХранения
		|	И (ОтветственныеСотрудники.Сотрудник В
		|				(ВЫБРАТЬ
		|					Сотрудники.Ссылка КАК Ссылка
		|				ИЗ
		|					Справочник.Сотрудники КАК Сотрудники
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					КонтактныеЛица.Ссылка
		|				ИЗ
		|					Справочник.КонтактныеЛица КАК КонтактныеЛица)
		|			ИЛИ ОтветственныеСотрудники.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("МестоХранения", Объект.Ссылка);	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	ОтветственныеЛица.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		НоваяСтрока = ОтветственныеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);		
		
		//@skip-warning
		ВерсияДанных = "";		
		Попытка
			ВерсияДанных 		 = ВыборкаДетальныеЗаписи.Документ.ВерсияДанных;						
		Исключение			
			НоваяСтрока.Документ = Строка(ТипЗНЧ(ВыборкаДетальныеЗаписи.Документ)) + НСтр("ru = ' < доступ закрыт >'");
		КонецПопытки;		
		
		УстановитьПривилегированныйРежим(Истина);		
		Если ВыборкаДетальныеЗаписи.Документ.Проведен	Тогда
			НоваяСтрока.ИндексКартинки = 14;
		ИначеЕсли ВыборкаДетальныеЗаписи.Документ.ПометкаУдаления Тогда			
			НоваяСтрока.ИндексКартинки = 13;
		Иначе НоваяСтрока.ИндексКартинки = 12;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
	Если ОтветственныеЛица.Количество() > 0 Тогда
		ОтветственныеЛица.Сортировать("Дата Возр");
	КонецЕсли;
	
КонецПроцедуры

#Область УчетОстатковКонтрагентов

//@skip-warning
&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
			
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикНачалоВыбора(ЭтаФорма, Объект.Организация, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, 
	СтандартнаяОбработка)
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикАвтоПодбор(ЭтаФорма, "Организация", Текст, ДанныеВыбора,
		Ожидание, СтандартнаяОбработка);
				
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_Очистка(Элемент, СтандартнаяОбработка)	
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
		
	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбора(ЭтаФорма, 
				"Организация", 
				Объект.Организация,
				Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект),
				ВыбранноеЗначение,
				СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПослеОбработкиВыбора(Результат, ДополнительныеПараметры) Экспорт
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

