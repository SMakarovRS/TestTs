#Область ОписаниеПеременных

&НаКлиенте
Перем пТекущееМестоХранения; // << Место хранения, которое запоминаем.
&НаКлиенте
Перем пПредыдущееМестоХраненияУдаленноеУправление; // << Место хранения, которое запоминаем.

#КонецОбласти

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ДатаАктуальности = ТекущаяДатаСеанса();

	Если Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
		ЗакрыватьПриВыборе = Истина;
		Элементы.Список.РежимВыбора = Истина;
		Элементы.Список.ТекущаяСтрока = Параметры.ВыбранноеЗначение;
	КонецЕсли;
	
	// Если хотим просмотра сразу всего одним списком.
	Если Параметры.Свойство("ПросмотрСписком") И Параметры.ПросмотрСписком Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;

	Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
		СотрудникОтбора = Параметры.Сотрудник;
	КонецЕсли;

	Если Параметры.Свойство("Отбор") Тогда

		Если Параметры.Отбор.Свойство("Местоположение") Тогда
			МестоположениеОтбора = Параметры.Отбор.Местоположение;
		КонецЕсли;

	КонецЕсли;
	
	Если Параметры.Свойство("СписокМестХранения") Тогда 
		Список.Параметры.УстановитьЗначениеПараметра("СписокМестХранения", Параметры.СписокМестХранения);
	КонецЕсли;

	ОбновитьОтбор();

	Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = 
		УправлениеITОтделом8УФ.ОтображатьИнвентарныеСерийныеНомера();
	Если Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = Истина Тогда
		ОбновитьИнвентарныеИСерийныеНомераНаСервере();
	КонецЕсли;
	УстановитьВидимостьИДоступность();
	
	// Оформление дерева номенклатуры.
	ЭлементУО 						=   УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.УчетПоКарточкам");
	ЭлементУсловия.ВидСравнения  	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение  	= Ложь;
	ОформляемоеПоле 				= ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ДеревоЗначенийКарточкаНоменклатуры");	
	
	// Учет остатков контрагентов.
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ОрганизацияОтбора");
	УправлениеITОтделом8УФ.УстановитьОграничениеТипаДляЭлементовФормы(ЭтаФорма, МассивЭлементов);

#Область БСП_ПриСозданииНаСервере
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
#КонецОбласти

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	Элементы.ОрганизацияОтбора.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(200));

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Элементы.ФормаОтображатьОстаткиВключаяДочерниеМестаХранения.Пометка = ОстаткиВключаяДочерниеМестаХранения;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновлениеИзображенийМестХранения" Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "ОбновлениеПомещений" Тогда
		СписокПриАктивизацииСтроки(Неопределено);
	ИначеЕсли ИмяСобытия = "ОбновитьСтатусыКарточкеНоменклатуры" Тогда
		ОбработатьСобытиеОбновитьСтатусыКарточке(Параметр.КарточкаНоменклатуры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	//@skip-warning
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВыбораОрганизацииКонтрагента"
		И ИсточникВыбора.ВладелецФормы = ЭтаФорма Тогда
		УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбораФормы(ЭтаФорма, "ОрганизацияОтбора",
			ОрганизацияОтбора, ВыбранноеЗначение, Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтображатьОстаткиВключаяДочерниеМестаХранения(Команда)

	ОстаткиВключаяДочерниеМестаХранения = Не ОстаткиВключаяДочерниеМестаХранения;
	Элементы.ФормаОтображатьОстаткиВключаяДочерниеМестаХранения.Пометка = ОстаткиВключаяДочерниеМестаХранения;
	СписокПриАктивизацииСтроки(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеНаМестоХранения(Команда)
	
	// Формируем поступление
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МестоХранения = Элементы.Список.ТекущаяСтрока;

	Структура = Новый Структура;
	Если ТипЗнч(МестоХранения) = Тип("СправочникСсылка.МестаХранения") Тогда
		Структура.Вставить("МестоХранения", МестоХранения);
		Структура.Вставить("Организация", РеквизитСправочникаНаСервере(МестоХранения, "Организация"));
	КонецЕсли;
	Форма = ПолучитьФорму("Документ.Поступление.Форма.ФормаДокумента", Структура);
	Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеСМестаХранения(Команда)
	
	// Формируем перемещение
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МестоХранения = Элементы.Список.ТекущаяСтрока;
	Структура 			  = Новый Структура;
	Если ТипЗнч(МестоХранения) = Тип("СправочникСсылка.МестаХранения") Тогда
		Структура.Вставить("МестоХраненияРасхода", МестоХранения);
		Структура.Вставить("ОрганизацияРасхода", РеквизитСправочникаНаСервере(МестоХранения, "Организация"));
		Структура.Вставить("АдресНоменклатуры", ПолучитьВыделеннуюНоменклатуруМестаХранения(МестоХранения));
	КонецЕсли;

	Форма 				= ПолучитьФорму("Документ.Перемещение.Форма.ФормаДокумента", Структура);
	Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура СписаниеСМестаХранения(Команда)
	
	// Формируем перемещение
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МестоХранения = Элементы.Список.ТекущаяСтрока;
	Структура = Новый Структура;
	Если ТипЗнч(МестоХранения) = Тип("СправочникСсылка.МестаХранения") Тогда
		Структура.Вставить("МестоХранения", МестоХранения);
		Структура.Вставить("Организация", РеквизитСправочникаНаСервере(МестоХранения, "Организация"));
		Структура.Вставить("АдресНоменклатуры", ПолучитьВыделеннуюНоменклатуруМестаХранения(МестоХранения));
	КонецЕсли;
	Форма = ПолучитьФорму("Документ.Списание.Форма.ФормаДокумента", Структура);
	Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияМестаХранения(Команда)
	
	// Формируем поступление
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МестоХранения = Элементы.Список.ТекущаяСтрока;
	Структура = Новый Структура;
	Если ТипЗнч(МестоХранения) = Тип("СправочникСсылка.МестаХранения") Тогда
		Структура.Вставить("МестоХранения", Элементы.Список.ТекущаяСтрока);
		Структура.Вставить("Организация", РеквизитСправочникаНаСервере(МестоХранения, "Организация"));
	КонецЕсли;
	Форма = ПолучитьФорму("Документ.Инвентаризация.Форма.ФормаДокумента", Структура);
	Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоИнвентарномуНомеру(Команда)
	СортироватьДеревоНоменклатуры("ИнвентарныйНомер");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоСерийномуНомеру(Команда)
	СортироватьДеревоНоменклатуры("СерийныйНомер");
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьИнвентарныеИСерийныеНомера(Команда)
	Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка = 
		Не Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
	УправлениеITОтделом8УФ.СохранитьНастройкуОтображатьИнвентарныеСерийныеНомера(
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка);
	УстановитьВидимостьИДоступность();
	ОбновитьИнвентарныеИСерийныеНомераНаСервере();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбслуживание(Команда)

	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МестоХранения = Элементы.Список.ТекущаяСтрока;
	Структура 					= Новый Структура;
	Если ТипЗнч(МестоХранения) = Тип("СправочникСсылка.МестаХранения") Тогда
		Структура.Вставить("МестоХранения", МестоХранения);
		Структура.Вставить("Организация", РеквизитСправочникаНаСервере(МестоХранения, "Организация"));
		Структура.Вставить("АдресНоменклатуры", ПолучитьВыделеннуюНоменклатуруМестаХранения(МестоХранения));
	КонецЕсли;
	Форма 				= ПолучитьФорму("Документ.НачалоОбслуживания.Форма.ФормаДокумента", Структура);
	Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОбслуживание(Команда)

	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаНоменклатурыТекущиеДанные 				= Элементы.ДеревоНоменклатуры.ТекущиеДанные;

	Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаНоменклатурыТекущиеДанные.Номенклатура) Тогда
		мНоменклатура = СтрокаНоменклатурыТекущиеДанные.КарточкаНоменклатуры;
	Иначе
		мНоменклатура = СтрокаНоменклатурыТекущиеДанные.Номенклатура;
	КонецЕсли;

	МестоХранения = Элементы.Список.ТекущаяСтрока;
	Структура 					= Новый Структура;
	Если ТипЗнч(МестоХранения) = Тип("СправочникСсылка.МестаХранения") Тогда
		Структура.Вставить("МестоХранения", МестоХранения);
		Структура.Вставить("Организация", РеквизитСправочникаНаСервере(МестоХранения, "Организация"));
		СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(мНоменклатура,
			МестоХранения, СтрокаНоменклатурыТекущиеДанные.Партия);
		Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);
	КонецЕсли;
	Форма 				= ПолучитьФорму("Документ.ОкончаниеОбслуживания.Форма.ФормаДокумента", Структура);
	Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналДокументов(Команда)

	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Структура = Новый Структура;
	МестоХранения = Элементы.Список.ТекущаяСтрока;
	Если ТипЗнч(МестоХранения) = Тип("СправочникСсылка.МестаХранения") Тогда
		Структура.Вставить("ОтборПоМестуХранения", МестоХранения);
	КонецЕсли;
	Форма = ПолучитьФорму("ЖурналДокументов.СкладскиеДокументы.ФормаСписка", Структура);
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатус(Команда)

	Если Элементы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаНоменклатурыТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;

	Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаНоменклатурыТекущиеДанные.Номенклатура) Тогда
		мКарточкаНоменклатура = СтрокаНоменклатурыТекущиеДанные.КарточкаНоменклатуры;
	Иначе
		ПоказатьПредупреждение( , СтрШаблон(Нстр(
			"ru = 'Для номенклатуры ""%1"" не ведется учет по карточкам. Установить статус можно только карточке номенклатуры'"),
			СтрокаНоменклатурыТекущиеДанные.Номенклатура));
		Возврат;
	КонецЕсли;

	Если УправлениеITОтделом8УФПовтИсп.ДляКарточкиНоменклатурыИспользуютсяСтатусы(
		СтрокаНоменклатурыТекущиеДанные.Номенклатура) Тогда
		Если УправлениеITОтделом8УФПовтИсп.ДляКарточкиНоменклатурыВедетсяИсторияИзмененияСтатусов(
			СтрокаНоменклатурыТекущиеДанные.Номенклатура) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеУстановкиСтатусаКарточкеНоменклатуры", ЭтотОбъект,
				Новый Структура("КарточкаНоменклатуры", мКарточкаНоменклатура));
			ОткрытьФорму("РегистрСведений.СтатусыКарточекНоменклатуры.ФормаЗаписи",
				Новый Структура("КарточкаНоменклатуры", мКарточкаНоменклатура), ЭтаФорма, , , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСтатусаКарточкиНоменклатуры", ЭтотОбъект,
				Новый Структура("КарточкаНоменклатуры", мКарточкаНоменклатура));
			ОткрытьФорму("Справочник.СтатусыКарточекНоменклатуры.ФормаВыбора", Новый Структура("КарточкаНоменклатуры",
				мКарточкаНоменклатура), ЭтаФорма, , , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение( , СтрШаблон(Нстр(
			"ru = 'Для номенклатуры ""%1"" статусы не используются. Установить использование статусов можно в виде номенклатуры'"),
			СтрокаНоменклатурыТекущиеДанные.Номенклатура));
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиСтатусаКарточкеНоменклатуры(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьДеревоНоменклатуры();
	Если ДополнительныеПараметры.Свойство("КарточкаНоменклатуры") Тогда
		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
			ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), ДополнительныеПараметры.КарточкаНоменклатуры,
			Ложь);
		Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтатусаКарточкиНоменклатуры(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтатусУстановлен = Ложь;

	Если ДополнительныеПараметры.Свойство("КарточкаНоменклатуры") Тогда
		ПараметрыЗаписи  = ДополнительныеПараметры;
		ПараметрыЗаписи.Вставить("Статус", Результат);
		СтатусУстановлен = УстановитьСтатусКарточкеНоменклатуры(ПараметрыЗаписи);
	КонецЕсли;

	Если СтатусУстановлен Тогда
		ОбновитьДеревоНоменклатуры();
		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
			ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), ДополнительныеПараметры.КарточкаНоменклатуры,
			Ложь);
		Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция УстановитьСтатусКарточкеНоменклатуры(ПараметрыЗаписи)

	Возврат РегистрыСведений.СтатусыКарточекНоменклатуры.УстановитьСтатусКарточкеНоменклатуры(ПараметрыЗаписи);

КонецФункции

&НаКлиенте
Процедура УдаленноеУправление_ВыполнитьПодключение(Команда)

	Идентификатор = Сред(Команда.Имя, СтрДлина("УдаленноеУправление_") + 1);
	Идентификатор = СтрЗаменить(Идентификатор, "_", "-");
	ЭлементСправочникаУдаленноеУправление = ПолучитьУдаленноеУправлениеПоИдентификатору(Идентификатор);

	Настройка = Новый Структура;
	Настройка.Вставить("Объект", УдаленноеУправлениеВызовСервера.НастройкаУдаленногоУправления(
		ЭлементСправочникаУдаленноеУправление));

	ПараметрыЗапуска = Новый Структура;
	ОписаниеОповоещения = Новый ОписаниеОповещения("УдаленноеУправление_ВыполнитьПослеЗапуска", ЭтотОбъект,
		ПараметрыЗапуска);
	УдаленноеУправлениеКлиент.ЗапуститьУдаленноеУправление(ОписаниеОповоещения, Настройка);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУдаленноеУправлениеПоИдентификатору(Знач Идентификатор)

	Возврат Справочники.УдаленноеУправление.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));

КонецФункции

//@skip-warning
&НаКлиенте
Процедура УдаленноеУправление_ВыполнитьПослеЗапуска(П1, П2) Экспорт
	
	// ТУТ НИЧЕГО.

КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)

	СвернутьРазвернутьДерево(Истина);

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)

	СвернутьРазвернутьДерево(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)

	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	пТекущееМестоХранения = Элементы.Список.ТекущаяСтрока;
	Если Элементы.ГруппаСтраницыПросмотра.ТекущаяСтраница = Элементы.СхемаМестоположения Тогда
		ПодключитьОбработчикОжидания("ПоказатьСхемуНаКлиенте", 0.1, Истина);
	ИначеЕсли Элементы.ГруппаСтраницыПросмотра.ТекущаяСтраница = Элементы.ОборудованиеИПО Тогда
		ПодключитьОбработчикОжидания("ОбновитьДеревоНоменклатуры", 0.1, Истина);
	КонецЕсли;

	ПодключитьОбработчикОжидания("УстановитьВидимостьИДоступностьКлиент", 0.1, Истина);
	ПодключитьОбработчикОжидания("ЗаполнитьПодменюУдаленногоУправления", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодменюУдаленногоУправления()

	Если Не УдаленноеУправлениеВызовСервера.ИспользуетсяУдаленноеУправление() Тогда
		Возврат;
	КонецЕсли;

	Если Элементы.Список.ТекущиеДанные = Неопределено Или пТекущееМестоХранения
		= пПредыдущееМестоХраненияУдаленноеУправление Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьУдаленноеУправлениеНаСервере(пТекущееМестоХранения);

	пПредыдущееМестоХраненияУдаленноеУправление = пТекущееМестоХранения;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУдаленноеУправлениеНаСервере(Знач Ссылка)

	Подменю = Элементы["УдаленноеУправление"];
	
	// Очищаем подменю.
	Для Каждого Эл Из Подменю.ПодчиненныеЭлементы Цикл
		Если СтрНайти(Эл.Имя, "УдаленноеУправление_") > 0 Тогда
			Элементы.Удалить(Эл);
		КонецЕсли;
	КонецЦикла;
	
	// Заполняем подменю.
	Массив = УдаленноеУправлениеВызовСервера.МассивПрограммУдаленногоУправленияОбъекта(Ссылка);
	Элементы.НастройкиУдаленногоУправления.Видимость = Массив.Количество() = 0;

	Для Каждого Структура Из Массив Цикл

		ИмяКоманды 				= "УдаленноеУправление_" + СтрЗаменить(Структура.Ссылка.УникальныйИдентификатор(),
			"-", "_");
		НоваяКнопка				= Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Подменю);

		КомандаЭтапа 			= Команды.Найти(ИмяКоманды);

		Если КомандаЭтапа = Неопределено Тогда

			КомандаЭтапа				= Команды.Добавить(ИмяКоманды);
			КомандаЭтапа.Действие		= "УдаленноеУправление_ВыполнитьПодключение";
			КомандаЭтапа.Заголовок		= Структура.Наименование;
			КомандаЭтапа.Картинка		= БиблиотекаКартинок[Структура.ИмяКартинки];
			КомандаЭтапа.Отображение 	= ОтображениеКнопки.КартинкаИТекст;

		КонецЕсли;

		НоваяКнопка.ИмяКоманды  = ИмяКоманды;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПросмотраПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.ГруппаСтраницыПросмотра.ТекущаяСтраница = Элементы.СхемаМестоположения Тогда
		Если Элементы.ГруппаВидПросмотра.ТекущаяСтраница = Элементы.ГруппаПоМестамХранения
			И Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
			ПоказатьСхему(Элементы.Список.ТекущаяСтрока);
		КонецЕсли;
	Иначе
		ОбновитьДеревоНоменклатуры();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВидПросмотраПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.ГруппаСтраницыПросмотра.ТекущаяСтраница = Элементы.СхемаМестоположения Тогда
		Если ТекущаяСтраница = Элементы.ГруппаПоМестамХранения И Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
			ПоказатьСхему(Элементы.Список.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтбораПриИзменении(Элемент)

	ОбновитьОтбор();

КонецПроцедуры

&НаКлиенте
Процедура МестоположениеОтбораПриИзменении(Элемент)

	ОбновитьОтбор();

КонецПроцедуры

&НаКлиенте
Процедура СотрудникОтбораПриИзменении(Элемент)
	ОбновитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ДатаАктуальностиПриИзменении(Элемент)

	ОбновитьОтбор();
	СписокПриАктивизацииСтроки(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ПоказатьЗначение( , ТД.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомплектацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомплектацииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомплектацииКарточкаНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомплектацииКарточкаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомплектацииНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомплектацииНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийКарточкаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийКарточкаНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКарточкаНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные 		 = Элементы.ДокументыКарточкаНоменклатуры.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПоказатьЗначение( , ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные 		 = Элементы.ДокументыНоменклатура.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПоказатьЗначение( , ТекущиеДанные.Ссылка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНоменклатуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриАктивизацииСтроки(Элемент)

	ПодключитьОбработчикОжидания("ОбновитьСвойстваВыбраннойНоменклатуры", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СтатусыКарточкиНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанныеСтатус	 = Элементы.СтатусыКарточкиНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанныеСтатус = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Период", ТекущиеДанныеСтатус.Дата);
	СтруктураЗаписи.Вставить("Статус", ТекущиеДанныеСтатус.Статус);
	СтруктураЗаписи.Вставить("Пользователь", ТекущиеДанныеСтатус.Пользователь);
	СтруктураЗаписи.Вставить("Комментарий", ТекущиеДанныеСтатус.Комментарий);
	СтруктураЗаписи.Вставить("КарточкаНоменклатуры", ТекущиеДанныеСтатус.КарточкаНоменклатуры);

	ПараметрыФормыЗаписи = Новый Структура;
	ПараметрыФормыЗаписи.Вставить("ФормаТолькоПросмотр", Истина);
	ПараметрыФормыЗаписи.Вставить("СтруктураЗаписи", СтруктураЗаписи);
	ОткрытьФорму("РегистрСведений.СтатусыКарточекНоменклатуры.ФормаЗаписи", ПараметрыФормыЗаписи, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВнешнийВид

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаСервере
// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьИДоступность()

	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.Остатки) Тогда
		Элементы.ПраваяКолонка.Видимость 				= Ложь;
		Элементы.ГруппаОтборыДерева.Видимость 			= Ложь;
		Возврат;
	КонецЕсли;

	Элементы.ДеревоЗначенийИнвентарныйНомер.Видимость = 
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;
	Элементы.ДеревоЗначенийСерийныйНомер.Видимость	  = 
		Элементы.ДеревоНоменклатурыОтображатьИнвентарныеИСерийныеНомера.Пометка;

КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура ОбновитьДеревоНоменклатурыНаСервере(Знач МестоХранения)

	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.Остатки) Тогда
		Возврат;
	КонецЕсли;

	ДокументыНоменклатура.Очистить();
	ДокументыКарточкаНоменклатуры.Очистить();
	СтатусыКарточкиНоменклатуры.Очистить();

	ДЗ = ДанныеФормыВЗначение(ДеревоНоменклатуры, Тип("ДеревоЗначений"));
	ДЗ.Строки.Очистить();

	Если МестоХранения = Неопределено Тогда
		ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
		Возврат;
	КонецЕсли;

	МассивМестХранения = Новый Массив;
	Если ТипЗнч(МестоХранения) = Тип("СправочникСсылка.МестаХранения") Тогда
		МассивМестХранения.Добавить(МестоХранения);

		Если ОстаткиВключаяДочерниеМестаХранения = Истина Тогда

			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МестаХранения.Ссылка КАК МестоХранения
			|ИЗ
			|	Справочник.МестаХранения КАК МестаХранения
			|ГДЕ
			|	МестаХранения.Ссылка В ИЕРАРХИИ(&СсылкаРодитель)";
			Запрос.УстановитьПараметр("СсылкаРодитель", МестоХранения);

			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивМестХранения.Добавить(Выборка.МестоХранения);
			КонецЦикла;

		КонецЕсли;

	ИначеЕсли ТипЗнч(МестоХранения) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда

		Попытка
			СтрокаГруппировкиСписка = МестоХранения;

			Запрос = Новый Запрос;
			СтрокаГруппировок = "";
			Индекс = 1;
			Пока СтрокаГруппировкиСписка <> Неопределено Цикл
				СтрокаГруппировок = СтрокаГруппировок + " И МестаХранения." + СтрокаГруппировкиСписка.ИмяГруппировки
					+ " = &ЗначениеКлюча" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
				Запрос.УстановитьПараметр("ЗначениеКлюча" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="),
					СтрокаГруппировкиСписка.Ключ);
				Индекс = Индекс + 1;
				СтрокаГруппировкиСписка = СтрокаГруппировкиСписка.РодительскаяГруппировка;
			КонецЦикла;

			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						   |	МестаХранения.Ссылка КАК МестоХранения
						   |ИЗ
						   |	Справочник.МестаХранения КАК МестаХранения
						   |ГДЕ
						   |	&Заглушка " + СтрокаГруппировок;
			Запрос.УстановитьПараметр("Заглушка", Истина);

			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивМестХранения.Добавить(Выборка.МестоХранения);
			КонецЦикла;

		Исключение
		КонецПопытки;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиОстатки.Организация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ОстаткиОстатки.Номенклатура
	|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец
	|	КОНЕЦ КАК Номенклатура,
	|	ОстаткиОстатки.Партия,
	|	ОстаткиОстатки.Номенклатура КАК КарточкаНоменклатуры,
	|	ОстаткиОстатки.КоличествоОстаток КАК Количество,
	|	ОстаткиОстатки.СуммаОстаток КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ОстаткиОстатки.Номенклатура.ВидНоменклатуры.НавСсылка
	|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ВидНоменклатуры.НавСсылка
	|	КОНЕЦ КАК НавСсылка,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ОстаткиОстатки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
	|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
	|	КОНЕЦ КАК УчетПоКарточкам,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ОстаткиОстатки.Номенклатура.ВидНоменклатуры.МожетИметьСтатус
	|		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ВидНоменклатуры.МожетИметьСтатус
	|	КОНЕЦ КАК ОтображатьСтатус,
	|	СтатусыКарточекНоменклатурыСрезПоследних.Статус.Картинка КАК Картинка
	|ИЗ
	|	РегистрНакопления.Остатки.Остатки(
	|			&ДатаКон,
	|			МестоХранения В (&МассивМестХранения)
	|				И Организация = &ОрганизацияОтбора) КАК ОстаткиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыКарточекНоменклатуры.СрезПоследних(&ДатаКон, ) КАК СтатусыКарточекНоменклатурыСрезПоследних
	|		ПО ОстаткиОстатки.Номенклатура = СтатусыКарточекНоменклатурыСрезПоследних.КарточкаНоменклатуры";

	Если ЗначениеЗаполнено(ОрганизацияОтбора) Тогда
		Запрос.УстановитьПараметр("ОрганизацияОтбора", ОрганизацияОтбора);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Организация = &ОрганизацияОтбора", "");
	КонецЕсли;
	Если МассивМестХранения.Количество() = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МестоХранения В (&МассивМестХранения)",
			"МестоХранения = &МассивМестХранения");
		Запрос.УстановитьПараметр("МассивМестХранения", МассивМестХранения[0]);
	Иначе
		Запрос.УстановитьПараметр("МассивМестХранения", МассивМестХранения);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаАктуальности));

	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Колонки.Добавить("КартинкаСтатусаКарточкиНоменклатуры");

	Для Каждого Строки Из ТЗ Цикл
		Если Строки.УчетПоКарточкам = Ложь Тогда
			Строки.КарточкаНоменклатуры = 
				УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Строки.Номенклатура);
		Иначе
			Если Строки.ОтображатьСтатус = Истина И ТипЗнч(Строки.Картинка) = Тип("ХранилищеЗначения") Тогда
				Попытка
					Строки.КартинкаСтатусаКарточкиНоменклатуры = Строки.Картинка.Получить();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	УправлениеITОтделом8УФ.ВывестиДеревоНоменклатуры(ДЗ, ТЗ);
	
	// Сортировка ДЗ
	ДЗ.Строки.Сортировать("Номенклатура,КарточкаНоменклатуры", Истина);
	УправлениеITОтделом8УФ.ОбновитьКлючиСтрокВДеревеЗначений(ДЗ);

	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоНоменклатуры()

	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		ОбновитьДеревоНоменклатурыНаСервере(Неопределено);
	Иначе
		ОбновитьДеревоНоменклатурыНаСервере(Элементы.Список.ТекущаяСтрока);
	КонецЕсли;
	
	// Разворачиваем дерево.
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтбор()

	ЕстьОтборДляИзмененияПросмотраВВидеДерева = Ложь;

	Список.Отбор.Элементы.Очистить();

	Если ЗначениеЗаполнено(ОрганизацияОтбора) Тогда
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Организация", ОрганизацияОтбора);
		ЕстьОтборДляИзмененияПросмотраВВидеДерева = Истина;

	Иначе
		РаботаСОтборамиКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Организация");

	КонецЕсли;

	Если ЗначениеЗаполнено(МестоположениеОтбора) Тогда
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Местоположение", МестоположениеОтбора, ,
			ВидСравненияКомпоновкиДанных.ВИерархии);

		ЕстьОтборДляИзмененияПросмотраВВидеДерева = Истина;

	Иначе
		РаботаСОтборамиКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Местоположение");

	КонецЕсли;

	Если ЗначениеЗаполнено(СотрудникОтбора) Тогда
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Сотрудник", СотрудникОтбора);
		ЕстьОтборДляИзмененияПросмотраВВидеДерева = Истина;

	Иначе
		РаботаСОтборамиКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Сотрудник");

	КонецЕсли;

	Если ЕстьОтборДляИзмененияПросмотраВВидеДерева Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;

	Иначе
		Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;

	КонецЕсли;

	Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", ?(ДатаАктуальности = Дата(1, 1, 1),
		Новый Граница(КонецДня(ТекущаяДатаСеанса()), ВидГраницы.Включая), Новый Граница(КонецДня(ДатаАктуальности),
		ВидГраницы.Включая)));

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДерево(Команда)

	ОбновитьДеревоНоменклатуры();

КонецПроцедуры

&НаСервере
Функция ПолучитьЦветФонаОбластиИзСтроки(Стр)

	Попытка
		Возврат ЗначениеИзСтрокиВнутр(Стр);
	Исключение
		Возврат WebЦвета.Белый;
	КонецПопытки;

КонецФункции

&НаСервере
Процедура ЗагрузитьСхемуИзБД(Знач Местоположение)

	Если Местоположение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	мЦветОбластиМестаХранения = УправлениеITОтделом8УФКлиентСервер.ЦветОбластиМестаХраненияВМестоположениях();
	мЦветОбластиКарточкиНоменклатуры = 
		УправлениеITОтделом8УФКлиентСервер.ЦветОбластиКарточкиНоменклатурыВМестоположениях();

	Результат = Местоположение.Схема.Получить();
	Если Результат <> Неопределено Тогда

		ТабДокумент = Результат;
		
		// Выводим для текущего места хранения выделение.
		Для Каждого Строки Из Местоположение.МестаХранения Цикл
			Если Строки.МестоХранения = Элементы.Список.ТекущаяСтрока Тогда				
				// Выделяем область если ячейки.
				Попытка
					НайденнаяОбласть = ТабДокумент.Область(Строки.ИмяОбласти);
					Если НайденнаяОбласть <> Неопределено Тогда
						НайденнаяОбласть.ЦветФона = мЦветОбластиМестаХранения;
						НайденнаяОбласть.Примечание.Текст = Строки.МестоХранения;
						НайденнаяОбласть.Расшифровка = Строки.МестоХранения;
						Продолжить;
					КонецЕсли;
				Исключение
				КонецПопытки;		
				
				// Выделяем область если рисунки.
				Попытка
					НайденнаяОбласть = ТабДокумент.Рисунки[Строки.ИмяОбласти];
					Если НайденнаяОбласть <> Неопределено Тогда
						НайденнаяОбласть.ЦветФона = мЦветОбластиМестаХранения;
						НайденнаяОбласть.Расшифровка = Строки.МестоХранения;
					КонецЕсли;
				Исключение
				КонецПопытки;

			Иначе
				// Очистка.
				Попытка
					НайденнаяОбласть = ТабДокумент.Область(Строки.ИмяОбласти);
					ЦветФонаОбласти = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
					Если ЦветФонаОбласти = Неопределено Тогда
						ЦветФонаОбласти = WebЦвета.Белый;
					КонецЕсли;
					НайденнаяОбласть.ЦветФона = ЦветФонаОбласти;
					НайденнаяОбласть.Примечание.Текст = "";
					НайденнаяОбласть.Расшифровка = Неопределено;
				Исключение
				КонецПопытки;
				Попытка
					НайденнаяОбласть = ТабДокумент.Рисунки[Строки.ИмяОбласти];
					ЦветФонаОбласти = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
					Если ЦветФонаОбласти = Неопределено Тогда
						ЦветФонаОбласти = WebЦвета.Белый;
					КонецЕсли;
					НайденнаяОбласть.ЦветФона = ЦветФонаОбласти;
					НайденнаяОбласть.Расшифровка = Неопределено;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиОстатки.Номенклатура
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(
		|			&ДатаАктуальности,
		|			МестоХранения = &МестоХранения
		|				И Организация = &Организация) КАК ОстаткиОстатки
		|ГДЕ
		|	ОстаткиОстатки.КоличествоОстаток > 0
		|	И ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)";

		Если ЗначениеЗаполнено(ОрганизацияОтбора) Тогда
			Запрос.УстановитьПараметр("Организация", ОрганизацияОтбора);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "Истина");
		КонецЕсли;
		Запрос.УстановитьПараметр("ДатаАктуальности", ?(ДатаАктуальности <> Дата(1, 1, 1), ДатаАктуальности, Дата(2099,
			1, 1)));
		Запрос.УстановитьПараметр("МестоХранения", Элементы.Список.ТекущаяСтрока);

		МассивКарточекНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
		
		// Выводим для текущего места хранения выделение.
		Для Каждого Строки Из Местоположение.КарточкиНоменклатуры Цикл
			Если МассивКарточекНоменклатуры.Найти(Строки.КарточкаНоменклатуры) <> Неопределено Тогда
				// Выделяем область если ячейки.
				Попытка
					НайденнаяОбласть = ТабДокумент.Область(Строки.ИмяОбласти);
					Если НайденнаяОбласть <> Неопределено Тогда
						НайденнаяОбласть.ЦветФона = мЦветОбластиКарточкиНоменклатуры;
						НайденнаяОбласть.Примечание.Текст = Строки.КарточкаНоменклатуры;
						НайденнаяОбласть.Расшифровка = Строки.КарточкаНоменклатуры;
						Продолжить;
					КонецЕсли;
				Исключение
				КонецПопытки;		
				
				// Выделяем область если рисунки.
				Попытка
					НайденнаяОбласть = ТабДокумент.Рисунки[Строки.ИмяОбласти];
					Если НайденнаяОбласть <> Неопределено Тогда
						НайденнаяОбласть.ЦветФона = мЦветОбластиКарточкиНоменклатуры;
						НайденнаяОбласть.Расшифровка = Строки.КарточкаНоменклатуры;
					КонецЕсли;
				Исключение
				КонецПопытки;

			Иначе
				// Очистка.
				Попытка
					НайденнаяОбласть = ТабДокумент.Область(Строки.ИмяОбласти);
					ЦветФонаОбласти = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
					Если ЦветФонаОбласти = Неопределено Тогда
						ЦветФонаОбласти = WebЦвета.Белый;
					КонецЕсли;
					НайденнаяОбласть.ЦветФона = ЦветФонаОбласти;
					НайденнаяОбласть.Примечание.Текст = "";
					НайденнаяОбласть.Расшифровка = Неопределено;
				Исключение
				КонецПопытки;
				Попытка
					НайденнаяОбласть = ТабДокумент.Рисунки[Строки.ИмяОбласти];
					ЦветФонаОбласти = ПолучитьЦветФонаОбластиИзСтроки(Строки.ЦветДоИзменения);
					Если ЦветФонаОбласти = Неопределено Тогда
						ЦветФонаОбласти = WebЦвета.Белый;
					КонецЕсли;
					НайденнаяОбласть.ЦветФона = ЦветФонаОбласти;
					НайденнаяОбласть.Расшифровка = Неопределено;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;

	Иначе
		ТабДокумент.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнвентарныеИСерийныеНомераНаСервере()

	ДЗ = ДанныеФормыВЗначение(ДеревоНоменклатуры, Тип("ДеревоЗначений"));
	УправлениеITОтделом8УФ.ОбновитьИнвентарныеИСерийныеНомера(ДЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);

КонецПроцедуры

&НаСервере
Процедура ОбновитьКомплектациюНаСервере(Комплект)

	ДЗ = ДанныеФормыВЗначение(ДеревоКомплектации, Тип("ДеревоЗначений"));
	ДЗ.Строки.Очистить();

	Если Комплект = Неопределено Тогда
		ЗначениеВДанныеФормы(ДЗ, ДеревоКомплектации);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   ВЫБОР
	|       КОГДА ТИПЗНАЧЕНИЯ(КомплектацияОстатки.Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
	|           ТОГДА КомплектацияОстатки.Номенклатура.Владелец
	|       ИНАЧЕ КомплектацияОстатки.Номенклатура
	|   КОНЕЦ КАК Номенклатура,
	|   ВЫБОР
	|       КОГДА ТИПЗНАЧЕНИЯ(КомплектацияОстатки.Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
	|           ТОГДА КомплектацияОстатки.Номенклатура
	|       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КарточкиНоменклатуры.ПустаяСсылка)
	|   КОНЕЦ КАК КарточкаНоменклатуры,
	|   ВЫБОР
	|       КОГДА КомплектацияОстатки.Партия = &Комплект
	|           ТОГДА ЗНАЧЕНИЕ(Справочник.КарточкиНоменклатуры.ПустаяСсылка)
	|       ИНАЧЕ КомплектацияОстатки.Партия
	|   КОНЕЦ КАК Партия,
	|   КомплектацияОстатки.КоличествоОстаток КАК Количество,
	|   КомплектацияОстатки.СуммаОстаток КАК Сумма,
	|   КомплектацияОстатки.Номенклатура.ВидНоменклатуры.НавСсылка КАК НавСсылка,
	|   КомплектацияОстатки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры КАК УчетПоКарточкам
	|ИЗ
	|   РегистрНакопления.Комплектация.Остатки(&ДатаКон, Комплект = &Комплект) КАК КомплектацияОстатки";

	Запрос.УстановитьПараметр("Комплект", Комплект);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаАктуальности));

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТЗ = РезультатЗапроса.Выгрузить();

		Для Каждого Строки Из ТЗ Цикл
			Если Не ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
				Строки.КарточкаНоменклатуры = 
					УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(
						Строки.Номенклатура);
			КонецЕсли;
		КонецЦикла;

		УправлениеITОтделом8УФ.ВывестиДеревоНоменклатуры(ДЗ, ТЗ);
		
		// Сортировка ДЗ
		ДЗ.Строки.Сортировать("Номенклатура,КарточкаНоменклатуры", Истина);
		УправлениеITОтделом8УФ.ОбновитьКлючиСтрокВДеревеЗначений(ДЗ);

	КонецЕсли;

	ЗначениеВДанныеФормы(ДЗ, ДеревоКомплектации);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойстваВыбраннойНоменклатуры()

	Характеристики.Отбор.Элементы.Очистить();

	ТД = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Характеристики, "Объект", 
			ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));

		ОбновитьКомплектациюНаСервере(Неопределено);
		АдресКартинки = "";
		ДокументыКарточкаНоменклатуры.Очистить();
		СтатусыКарточкиНоменклатуры.Очистить();

	Иначе
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Характеристики, "Объект", 
			?(ТД.УчетПоКарточкам, ТД.КарточкаНоменклатуры, ТД.Номенклатура));

		АдресКартинки = НавигационнаяСсылкаКартинкиНоменклатуры(ТД.Номенклатура, 
			ЭтотОбъект.УникальныйИдентификатор);

		Если ТД.УчетПоКарточкам Тогда
			ЗаполнитьСтатусыКарточкиНоменклатуры(ТД.КарточкаНоменклатуры);
			ЗаполнитьДокументыПоКарточкеНоменклатуры(ТД.КарточкаНоменклатуры);
			Элементы.ГруппаВидыДокументов.ТекущаяСтраница = Элементы.ГруппаКарточка;
			ОбновитьКомплектациюНаСервере(ТД.КарточкаНоменклатуры);

		Иначе
			ЗаполнитьДокументыПоНоменклатуре(ТД.Номенклатура);
			Элементы.ГруппаВидыДокументов.ТекущаяСтраница = Элементы.ГруппаНоменклатура;
			ОбновитьКомплектациюНаСервере(Неопределено);

		КонецЕсли;
		
		// Разворачиваем дерево.
		КоллекцияЭлементовДерева = ДеревоКомплектации.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоКомплектации.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДокументыПоКарточкеНоменклатуры(КарточкаНоменклатуры)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КарточкаНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	КритерийОтбора.КарточкаНоменклатуры(&КарточкаНоменклатуры) КАК КарточкаНоменклатуры";

	Запрос.УстановитьПараметр("КарточкаНоменклатуры", КарточкаНоменклатуры);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаДокументов.Колонки.Добавить("Состояние");

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостояниеКарточекНоменклатуры.Регистратор,
	|	СостояниеКарточекНоменклатуры.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостояниеКарточекНоменклатуры КАК СостояниеКарточекНоменклатуры
	|ГДЕ
	|	СостояниеКарточекНоменклатуры.КарточкаНоменклатуры = &КарточкаНоменклатуры";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НайденныеСтроки = ТаблицаДокументов.Найти(Выборка.Регистратор, "Ссылка");
		Если НайденныеСтроки <> Неопределено Тогда
			НайденныеСтроки.Состояние = Выборка.Состояние;
		КонецЕсли;

	КонецЦикла;

	ДокументыКарточкаНоменклатуры.Очистить();

	Для Каждого Строки Из ТаблицаДокументов Цикл
		НоваяСтрока = ДокументыКарточкаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
		НоваяСтрока.Дата = Строки.Ссылка.Дата;
		Если Строки.Ссылка.Проведен Тогда
			НоваяСтрока.ИндексКартинки = 14;
		ИначеЕсли Строки.Ссылка.ПометкаУдаления Тогда
			НоваяСтрока.ИндексКартинки = 13;
		Иначе
			НоваяСтрока.ИндексКартинки = 12;
		КонецЕсли;
		Если Строки.Состояние = Справочники.СостояниеКарточекНоменклатуры.ВРабочемСостоянии Тогда
			НоваяСтрока.КартинкаСостояния = БиблиотекаКартинок.сстВРабочемСостоянии;
		ИначеЕсли Строки.Состояние = Справочники.СостояниеКарточекНоменклатуры.ВНеРабочемСостоянии Тогда
			НоваяСтрока.КартинкаСостояния = БиблиотекаКартинок.сстВНеРабочемСостоянии;
		ИначеЕсли Строки.Состояние = Справочники.СостояниеКарточекНоменклатуры.Отремонтировано Тогда
			НоваяСтрока.КартинкаСостояния = БиблиотекаКартинок.сстОтремонтировано;
		ИначеЕсли Строки.Состояние = Справочники.СостояниеКарточекНоменклатуры.Продано Тогда
			НоваяСтрока.КартинкаСостояния = БиблиотекаКартинок.сстПродано;
		ИначеЕсли Строки.Состояние = Справочники.СостояниеКарточекНоменклатуры.Списано Тогда
			НоваяСтрока.КартинкаСостояния = БиблиотекаКартинок.сстСписано;
		КонецЕсли;
	КонецЦикла;

	Если ДокументыКарточкаНоменклатуры.Количество() > 0 Тогда
		ДокументыКарточкаНоменклатуры.Сортировать("Дата Возр");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыПоНоменклатуре(Номенклатура)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка
	|ИЗ
	|	КритерийОтбора.Номенклатура(&Номенклатура) КАК Номенклатура";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	РезультатЗапроса 	   = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	ДокументыНоменклатура.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		НоваяСтрока = ДокументыНоменклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи.Ссылка);

		Если ВыборкаДетальныеЗаписи.Ссылка.Проведен Тогда
			НоваяСтрока.ИндексКартинки = 14;
		ИначеЕсли ВыборкаДетальныеЗаписи.Ссылка.ПометкаУдаления Тогда
			НоваяСтрока.ИндексКартинки = 13;
		Иначе
			НоваяСтрока.ИндексКартинки = 12;
		КонецЕсли;

	КонецЦикла;

	Если ДокументыНоменклатура.Количество() > 0 Тогда
		ДокументыНоменклатура.Сортировать("Дата Возр");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыКарточкиНоменклатуры(КарточкаНоменклатуры)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыКарточекНоменклатуры.Период КАК Дата,
	|	СтатусыКарточекНоменклатуры.КарточкаНоменклатуры,
	|	СтатусыКарточекНоменклатуры.Статус,
	|	СтатусыКарточекНоменклатуры.Пользователь,
	|	СтатусыКарточекНоменклатуры.Комментарий
	|ИЗ
	|	РегистрСведений.СтатусыКарточекНоменклатуры КАК СтатусыКарточекНоменклатуры
	|ГДЕ
	|	СтатусыКарточекНоменклатуры.КарточкаНоменклатуры = &КарточкаНоменклатуры
	|	И СтатусыКарточекНоменклатуры.Период <= &Период
	|	И СтатусыКарточекНоменклатуры.КарточкаНоменклатуры.Владелец.ВидНоменклатуры.МожетИметьСтатус = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";

	Запрос.УстановитьПараметр("КарточкаНоменклатуры", КарточкаНоменклатуры);
	Запрос.УстановитьПараметр("Период", ?(ДатаАктуальности = Дата(1, 1, 1), КонецДня(ТекущаяДатаСеанса()), 
		КонецДня(ДатаАктуальности)));

	РезультатЗапроса 	   = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	СтатусыКарточкиНоменклатуры.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = СтатусыКарточкиНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		Попытка
			НоваяСтрока.КартинкаСтатуса = ВыборкаДетальныеЗаписи.Статус.Картинка.Получить();
		Исключение
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция РеквизитСправочникаНаСервере(Элемент, Реквизит)

	Возврат Элемент[Реквизит];

КонецФункции

&НаСервере
Процедура СортироватьДеревоНоменклатурыНаСервере(ИмяСтолбцов)

	ДЗ = ДанныеФормыВЗначение(ДеревоНоменклатуры, Тип("ДеревоЗначений"));
	ДЗ.Строки.Сортировать(ИмяСтолбцов, Истина);
	УправлениеITОтделом8УФ.ОбновитьКлючиСтрокВДеревеЗначений(ДЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);

КонецПроцедуры

&НаКлиенте
Процедура СортироватьДеревоНоменклатуры(ИмяСтолбцов)

	СортироватьДеревоНоменклатурыНаСервере(ИмяСтолбцов);
	
	// Разворачиваем дерево
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьКлиент()

	УстановитьВидимостьИДоступность();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСхемуНаКлиенте()

	Если ЗначениеЗаполнено(пТекущееМестоХранения) Тогда
		ПоказатьСхему(пТекущееМестоХранения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьВыделеннуюНоменклатуруМестаХранения(МестоХранения)

	ДЗ = ДанныеФормыВЗначение(ДеревоНоменклатуры, Тип("ДеревоЗначений"));
	ДЗ.Строки.Очистить();
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("КарточкаНоменклатуры");
	ТЗ.Колонки.Добавить("ВидНоменклатуры");
	ТЗ.Колонки.Добавить("Партия");
	ТЗ.Колонки.Добавить("Комплект");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Сумма");

	МассивВыделенного = Новый Массив;
	Для Каждого Элемент Из Элементы.ДеревоНоменклатуры.ВыделенныеСтроки Цикл
		
		// Родительская
		ЭлементДерева = ДеревоНоменклатуры.НайтиПоИдентификатору(Элемент);
		Пока ЭлементДерева.ПолучитьРодителя() <> Неопределено Цикл
			ЭлементДерева = ЭлементДерева.ПолучитьРодителя();
		КонецЦикла;
		
		// С родительского спускаемся вниз
		ОткрытыйСписок = Новый Массив;
		Если МассивВыделенного.Найти(ЭлементДерева.ПолучитьИдентификатор()) = Неопределено Тогда
			МассивВыделенного.Добавить(ЭлементДерева.ПолучитьИдентификатор());
		КонецЕсли;
		ОткрытыйСписок.Добавить(ЭлементДерева.ПолучитьИдентификатор());
		Пока ОткрытыйСписок.Количество() > 0 Цикл

			ЭлементДерева = ДеревоНоменклатуры.НайтиПоИдентификатору(ОткрытыйСписок.Получить(0));
			Если МассивВыделенного.Найти(ЭлементДерева.ПолучитьИдентификатор()) = Неопределено Тогда
				МассивВыделенного.Добавить(ЭлементДерева.ПолучитьИдентификатор());
			КонецЕсли;
			Для Каждого Строки Из ЭлементДерева.ПолучитьЭлементы() Цикл
				Если МассивВыделенного.Найти(Строки.ПолучитьИдентификатор()) = Неопределено Тогда
					МассивВыделенного.Добавить(Строки.ПолучитьИдентификатор());
				КонецЕсли;
				ОткрытыйСписок.Добавить(Строки.ПолучитьИдентификатор());
			КонецЦикла;
			ОткрытыйСписок.Удалить(0);

		КонецЦикла;

	КонецЦикла;

	Для Каждого Элемент Из МассивВыделенного Цикл
		НоваяСтрока 	= ТЗ.Добавить();
		ЭлементДерева 	= ДеревоНоменклатуры.НайтиПоИдентификатору(Элемент);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементДерева);
	КонецЦикла;

	ТЗ.Сортировать("Партия,Номенклатура");

	Для Каждого Строки Из ТЗ Цикл
		Строки.ЕдиницаИзмерения = Строки.Номенклатура.ЕдиницаИзмерения;
	КонецЦикла;

	Возврат ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ПоказатьСхему(МестоХраненияИлиМестоположение)

	Если ТипЗнч(МестоХраненияИлиМестоположение) = Тип("СправочникСсылка.МестаХранения") Тогда
		ЗагрузитьСхемуИзБД(МестоХраненияИлиМестоположение.Местоположение);
	ИначеЕсли
	ТипЗнч(МестоХраненияИлиМестоположение) = Тип("СправочникСсылка.Местоположения") Тогда
		ЗагрузитьСхемуИзБД(МестоХраненияИлиМестоположение);
	КонецЕсли
	;

КонецПроцедуры

#Область УчетОстатковКонтрагентов

//@skip-warning
&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикНачалоВыбора(ЭтаФорма, ОрганизацияОтбора, СтандартнаяОбработка);

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_Очистка(Элемент, СтандартнаяОбработка)

	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОчистка(ЭтаФорма, "ОрганизацияОтбора");

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикАвтоПодбор(ЭтаФорма, "ОрганизацияОтбора", Текст, ДанныеВыбора,
		Ожидание, СтандартнаяОбработка);

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УправлениеITОтделом8УФКлиент.ВыполнитьОбработчикОбработкаВыбора(ЭтаФорма, "ОрганизацияОтбора", ОрганизацияОтбора,
		Новый ОписаниеОповещения("ПослеОбработкиВыбора", ЭтотОбъект), ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиВыбора(Результат, ДополнительныеПараметры) Экспорт

	ОрганизацияОтбораПриИзменении(Неопределено);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработатьСобытиеОбновитьСтатусыКарточке(КарточкаНоменклатуры)

	ОбновитьДеревоНоменклатуры();
	Если ЗначениеЗаполнено(КарточкаНоменклатуры) Тогда
		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
			ИдентификаторСтроки, ДеревоНоменклатуры.ПолучитьЭлементы(), КарточкаНоменклатуры, Ложь);
		Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьДерево(Знач Свернуть)
	
	// Разворачиваем дерево.
	КоллекцияЭлементовДерева = ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Если Свернуть = Истина Тогда
			Элементы.ДеревоНоменклатуры.Свернуть(ИдентификаторСтроки);
		Иначе
			Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинкиНоменклатуры(Знач Номенклатура, Знач ИдентификаторФормы)
		
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(Номенклатура.ФайлКартинки) Тогда
		СсылкаНаДвоичныеДанныеФайла = РаботаСФайлами.ДанныеФайла(Номенклатура.ФайлКартинки, 
			ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Иначе
		СсылкаНаДвоичныеДанныеФайла = "";			
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);	
	Возврат СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

#КонецОбласти