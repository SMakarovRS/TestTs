#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает список имен "ключевых" реквизитов.
//
// Параметры:
//   Без параметров.
//
// Возвращаемое значение:
//   Массив, массив возвращаемых блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать с помощью обработки группового изменения объектов.
//
// Параметры:
//   Без параметров.
//
// Возвращаемое значение:
//   Массив, массив возвращаемых реквизитов редактируемых в групповой обработке.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//@skip-warning
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	

КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта     = Новый Соответствие;	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("МестаХраненияРасчетМетрикЗаписьЭлемента", НСтр("ru = 'Запись элемента'"));

	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Объект, Представление, СтандартнаяОбработка)
	
	Выражение = УправлениеITОтделом8УФПовтИсп.ВыражениеПредставленияМестаХранения();
	Если НЕ ПустаяСтрока(Выражение) Тогда
		
		Если СтрНайти(Выражение, "Объект.ПоследнийОтветственный") > 0 Тогда
			Выражение = ПроверитьВыражениеПредставления(Выражение, "Объект.ПоследнийОтветственный", Объект);			
		КонецЕсли;
		
		Попытка
			Представление 		 = Вычислить(Выражение);
			СтандартнаяОбработка = Ложь;
		Исключение
		КонецПопытки;                  

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(УправлениеITОтделом8УФПовтИсп.ВыражениеПредставленияМестаХранения()) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Поля.Добавить("Ссылка");
		Поля.Добавить("Наименование");
		Поля.Добавить("ПоследнийОтветственный");		
		Поля.Добавить("Организация");
		Поля.Добавить("Подразделение");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВыражениеПредставления(Выражение, РеквизитОбъекта, Объект)
	
	Если СтрНайти(Строка(Объект[Сред(РеквизитОбъекта, 8)]), "<Объект не найден>") > 0 Тогда
		Выражение = СтрЗаменить(Выражение, РеквизитОбъекта, ""); 
	КонецЕсли;
	
	Возврат Выражение;
	
КонецФункции

Функция АвтоПодборМестоХранения(СписокМестХранения, Текст) Экспорт

	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникМестаХранения.Ссылка КАК МестоХранения
		|ИЗ
		|	Справочник.МестаХранения КАК СправочникМестаХранения
		|ГДЕ
		|	НЕ СправочникМестаХранения.Ссылка В (&СписокМестХранения)
		|И СправочникМестаХранения.Наименование ПОДОБНО ""%" + Текст + "%""";
	
	
	Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МестоХранения");

КонецФункции	

// СтандартныеПодсистемы.ВариантыОтчетов
// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
		
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиНаСкладах) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();		
		КомандаОтчет.Менеджер      = Метаданные.Отчеты.ОстаткиНаСкладах.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Остатки на складах'");
		КомандаОтчет.МножественныйВыбор = Ложь;
		КомандаОтчет.Важность      = "Обычное";
		КомандаОтчет.КлючВарианта  = "Основной";		
		
	КонецЕсли;
			
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция печати документа
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	СтруктураЗаполнения = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_МестаХранения";
	
	ПервыйСправочник = Истина;
	
	Для Каждого ТекущийОбъект Из МассивОбъектов Цикл
	
		Если НЕ ПервыйСправочник Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйСправочник = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СтруктураЗаполнения = УправлениеITОтделом8УФ.СтруктураЗаполненияПечатнойФормыСправочника(ТекущийОбъект);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийОбъект", ТекущийОбъект);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МестаХранения.Ссылка КАК Ссылка,
			|	МестаХранения.Наименование КАК Наименование,
			|	МестаХранения.ВидМестаХранения КАК ВидМестаХранения,
			|	МестаХранения.Подразделение КАК Подразделение,
			|	МестаХранения.Комментарий КАК Комментарий,
			|	МестаХранения.СетевоеИмя КАК СетевоеИмя,
			|	МестаХранения.СетевойПользователь КАК СетевойПользователь,
			|	МестаХранения.Местоположение КАК Местоположение,
			|	МестаХранения.ПоследнийОтветственный КАК ПоследнийОтветственный,
			|	МестаХранения.ГруппаДоступа КАК ГруппаДоступа,
			|	МестаХранения.Организация КАК Организация,
			|	МестаХранения.СетевыеИнтерфейсы.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		IPАдрес КАК IPАдрес,
			|		МаскаПодсети КАК МаскаПодсети,
			|		DNS1 КАК DNS1,
			|		DNS2 КАК DNS2,
			|		WINS КАК WINS,
			|		DHCP КАК DHCP,
			|		Шлюз КАК Шлюз,
			|		ПортRadmin КАК ПортRadmin,
			|		MACАдрес КАК MACАдрес
			|	) КАК СетевыеИнтерфейсы,
			|	МестаХранения.ДополнительныеРеквизиты.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Свойство КАК Свойство,
			|		Значение КАК Значение,
			|		ТекстоваяСтрока КАК ТекстоваяСтрока
			|	) КАК ДополнительныеРеквизиты
			|ИЗ
			|	Справочник.МестаХранения КАК МестаХранения
			|ГДЕ
			|	МестаХранения.Ссылка = &ТекущийОбъект";
			
		Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
				
		Если ИмяМакета = "Информация" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.МестаХранения.ПФ_MXL_МакетИнформация");
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МестаХранения_ИнформацияПоМестуХранения";
			
			// ШАПКА.
			
			ОбластьМакета                             = Макет.ПолучитьОбласть("Шапка");
			СтруктураЗаполнения.Вставить("ДатаИВремяПечати", ТекущаяДатаСеанса());
			СтруктураЗаполнения.Вставить("ТекстЗаголовка", "Информация по месту хранения " + Шапка.Ссылка);
			СтруктураЗаполнения.Вставить("ТекущийПользователь", 
				ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Основные данные.
			
			ОбластьМакета 	= Макет.ПолучитьОбласть("ОсновныеДанные");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Шапка);
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьМакета);
						
			// Остатки.
			
			ЗапросНоменклатура = Новый Запрос;
			ЗапросНоменклатура.Текст = 
			  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			  |	ОстаткиОстатки.Организация,
			  |	ВЫБОР
			  |		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			  |			ТОГДА ОстаткиОстатки.Номенклатура
			  |		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец
			  |	КОНЕЦ КАК Номенклатура,
			  |	ОстаткиОстатки.Партия,
			  |	ОстаткиОстатки.Номенклатура КАК КарточкаНоменклатуры,
			  |	ОстаткиОстатки.КоличествоОстаток КАК Количество,
			  |	ОстаткиОстатки.СуммаОстаток КАК Сумма,
			  |	ВЫБОР
			  |		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			  |			ТОГДА ОстаткиОстатки.Номенклатура.ВидНоменклатуры.НавСсылка
			  |		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ВидНоменклатуры.НавСсылка
			  |	КОНЕЦ КАК НавСсылка,
			  |	ВЫБОР
			  |		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
			  |			ТОГДА ОстаткиОстатки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
			  |		ИНАЧЕ ОстаткиОстатки.Номенклатура.Владелец.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры
			  |	КОНЕЦ КАК УчетПоКарточкам,
			  |	ОстаткиОстатки.Номенклатура.ИнвентарныйНомер КАК ИнвентарныйНомер,
			  |	ОстаткиОстатки.Номенклатура.СерийныйНомер КАК СерийныйНомер
			  |ИЗ
			  |	РегистрНакопления.Остатки.Остатки(&ДатаКон, МестоХранения = &МестаХранения) КАК ОстаткиОстатки";
			
			ЗапросНоменклатура.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
			ЗапросНоменклатура.УстановитьПараметр("МестаХранения", ТекущийОбъект.Ссылка);
			
			РезультатВыборка = ЗапросНоменклатура.Выполнить();
			
			Если НЕ РезультатВыборка.Пустой() Тогда
			
				ВыборкаНоменклатура = РезультатВыборка.Выбрать();
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаСписокНоменклатуры");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				НомерСтроки = 1;
				ОбластьМакета = Макет.ПолучитьОбласть("ТелоСписокНоменклатуры");
				Пока ВыборкаНоменклатура.Следующий() Цикл
					Если ВыборкаНоменклатура.УчетПоКарточкам = Истина Тогда
						ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаНоменклатура);
					Иначе
						ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаНоменклатура);
						ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Новый Структура("КарточкаНоменклатуры", "<" + НСтр("ru = 'Не ведется учет по карточкам'") + ">"));
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Новый Структура("НомерСтроки", НомерСтроки));
					ТабличныйДокумент.Вывести(ОбластьМакета);
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСписокНоменклатуры");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			// Задания.
			
			Запрос = Новый Запрос();
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Задание.Ссылка КАК Задание,
				|	Задание.Дата КАК Дата,
				|	Задание.Выполнено,
				|	Задание.Завершено,
				|	Задание.Тема,
				|	Задание.ТекущийИсполнитель,
				|	Задание.Инициатор
				|ИЗ
				|	Документ.Задание КАК Задание
				|ГДЕ
				|	Задание.МестоХранения = &МестоХранения
				|	И Задание.Проведен = ИСТИНА
				|
				|УПОРЯДОЧИТЬ ПО
				|	Дата";
			Запрос.УстановитьПараметр("МестоХранения", ТекущийОбъект.Ссылка);
			
			РезультатВыборка = Запрос.Выполнить();
			
			Если НЕ РезультатВыборка.Пустой() Тогда
			
				Выборка = РезультатВыборка.Выбрать();
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаЗадания");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				НомерСтроки = 1;
				ОбластьМакета = Макет.ПолучитьОбласть("ТелоЗадания");
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Выборка);
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Новый Структура("НомерСтроки,Выполнено,Завершено", НомерСтроки,?(Выборка.Выполнено, "✔", ""),?(Выборка.Завершено, "✔", "")));
					ТабличныйДокумент.Вывести(ОбластьМакета);
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗадания");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			// Сетевые интерфейсы.
			
			ВыборкаСетевыеИнтерфейсы = Шапка.СетевыеИнтерфейсы.Выбрать();
			Если ВыборкаСетевыеИнтерфейсы.Количество() > 0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаСетевыеИнтерфейсы");
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СтруктураЗаполнения);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("ТелоСетевыеИнтерфейсы");				
				Пока ВыборкаСетевыеИнтерфейсы.Следующий() Цикл
					ОбластьМакета.Параметры.Заполнить(ВыборкаСетевыеИнтерфейсы);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСетевыеИнтерфейсы");
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			// Ответственные.
			
			ЗапросОтветственные = Новый Запрос;
			ЗапросОтветственные.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОтветственныеСотрудники.Период КАК Дата,
				|	ОтветственныеСотрудники.МестоХранения,
				|	ОтветственныеСотрудники.Сотрудник,
				|	ОтветственныеСотрудники.Регистратор КАК Документ
				|ИЗ
				|	РегистрСведений.ОтветственныеСотрудники КАК ОтветственныеСотрудники
				|ГДЕ
				|	ОтветственныеСотрудники.МестоХранения.Ссылка = &Ссылка";
			
			ЗапросОтветственные.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
			РезультатВыборка = ЗапросОтветственные.Выполнить();
			
			Если НЕ РезультатВыборка.Пустой() Тогда
				
				ВыборкаОтветственных = РезультатВыборка.Выбрать();
			
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОтветственные");
				ТабличныйДокумент.Вывести(ОбластьМакета);
							
				ОбластьМакета = Макет.ПолучитьОбласть("ТелоОтветственные");
				Пока ВыборкаОтветственных.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаОтветственных);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОтветственные");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			// Ответственные ИТ.
			
			ЗапросОтветственныеIT = Новый Запрос;
			ЗапросОтветственныеIT.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОтветственныеСотрудникиИТОтдела.Период КАК Дата,
				|	ОтветственныеСотрудникиИТОтдела.МестоХранения,
				|	ОтветственныеСотрудникиИТОтдела.Сотрудник
				|ИЗ
				|	РегистрСведений.ОтветственныеСотрудникиИТОтдела КАК ОтветственныеСотрудникиИТОтдела
				|ГДЕ
				|	ОтветственныеСотрудникиИТОтдела.МестоХранения.Ссылка = &Ссылка";
			
			ЗапросОтветственныеIT.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
			РезультатВыборка = ЗапросОтветственныеIT.Выполнить();
			
			Если НЕ РезультатВыборка.Пустой() Тогда
				
				ВыборкаОтветственныхIT = РезультатВыборка.Выбрать();
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОтветственныеIT");
				ТабличныйДокумент.Вывести(ОбластьМакета);
							
				ОбластьМакета = Макет.ПолучитьОбласть("ТелоОтветственныеIT");
				Пока ВыборкаОтветственныхIT.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаОтветственныхIT);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОтветственныеIT");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			ВидимостьПаролей = УправлениеITОтделом8УФПовтИсп.Право("ЧтениеПаролей") 
				ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") 
				ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ДобавлениеИзменениеПаролей");
			
			Если ВидимостьПаролей = Истина Тогда 
				
				ЗапросЛогиныИПароли = Новый Запрос;								
				ЗапросЛогиныИПароли.Текст = 		
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	СправочникЛогиныИПароли.ТипПароля КАК ТипПароля,
					|	СправочникЛогиныИПароли.Объект КАК Объект,
					|	СправочникЛогиныИПароли.Программа КАК Программа,
					|	СправочникЛогиныИПароли.Категория КАК Категория,
					|	СправочникЛогиныИПароли.Комментарий КАК Комментарий,
					|	СправочникЛогиныИПароли.Автор КАК Автор,
					|	0 КАК КартинкаСтроки,
					|	СправочникЛогиныИПароли.Ссылка КАК Ссылка,
					|	ЛогиныИПаролиСрезПоследних.Логин КАК Логин,
					|	ЛогиныИПаролиСрезПоследних.Период КАК Дата
					|ИЗ
					|	Справочник.ЛогиныИПароли КАК СправочникЛогиныИПароли
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛогиныИПаролиХранилище.СрезПоследних КАК ЛогиныИПаролиСрезПоследних
					|		ПО СправочникЛогиныИПароли.Ссылка = ЛогиныИПаролиСрезПоследних.Владелец
					|ГДЕ
					|	ВЫБОР
					|			КОГДА СправочникЛогиныИПароли.ТипПароля = ЗНАЧЕНИЕ(Перечисление.ТипыПаролей.ПустаяСсылка)
					|				ТОГДА ИСТИНА
					|			КОГДА СправочникЛогиныИПароли.ТипПароля = ЗНАЧЕНИЕ(Перечисление.ТипыПаролей.Общий)
					|				ТОГДА ИСТИНА
					|			КОГДА СправочникЛогиныИПароли.ТипПароля = ЗНАЧЕНИЕ(Перечисление.ТипыПаролей.ГруппыПользователей)
					|				ТОГДА СправочникЛогиныИПароли.ГруппаПользователей В (&СписокГруппТекущегоПользователя)
					|			КОГДА СправочникЛогиныИПароли.ТипПароля = ЗНАЧЕНИЕ(Перечисление.ТипыПаролей.Личный)
					|					И СправочникЛогиныИПароли.Автор = &ТекущийПользователь
					|					И СправочникЛогиныИПароли.Автор <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
					|					И &ТекущийПользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ ЛОЖЬ
					|		КОНЕЦ
					|	И СправочникЛогиныИПароли.Объект = &Объект";
				
				ТекущийПользователь = Пользователи.ТекущийПользователь();
				ЗапросЛогиныИПароли.УстановитьПараметр("Объект", ТекущийОбъект.Ссылка);
				ЗапросЛогиныИПароли.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
				ЗапросЛогиныИПароли.УстановитьПараметр("СписокГруппТекущегоПользователя",
					УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекущийПользователь));
					
				РезультатВыборка = ЗапросЛогиныИПароли.Выполнить();
				
				Если НЕ РезультатВыборка.Пустой() Тогда
					
					ВыборкаЛогиныИПароли = РезультатВыборка.Выбрать();

					ОбластьМакета = Макет.ПолучитьОбласть("ШапкаЛогиныИПароли");
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть("ТелоЛогиныИПароли");
					Пока ВыборкаЛогиныИПароли.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ВыборкаЛогиныИПароли);
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
					
					ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЛогиныИПароли");
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
				КонецЕсли;
					
			КонецЕсли;		

		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, 
			Шапка.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Информация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Информация", 
			НСтр("ru = 'Информация'"), ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "Информация"));
	КонецЕсли;
		
КонецПроцедуры

// Функция получает данные для печати.
//
Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам  = Новый Соответствие;
	ОписаниеОбластей 	  = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов           = Новый Соответствие;
	МакетыСтруктура		  = Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов", ОписаниеОбластей, 
		ТипыМакетов, ДвоичныеДанныеМакетов);	
	
	Возврат Новый Структура("Данные, Макеты", ДанныеПоВсемОбъектам, МакетыСтруктура);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Информация
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Информация";
	КомандаПечати.Представление = НСтр("ru = 'Информация'");
	КомандаПечати.СписокФорм 	= "ФормаЭлемента,ФормаСписка";
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли