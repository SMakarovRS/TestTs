#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Заполняет предопределенные этапы процессов.
//
Процедура ЗаполнитьСтраницыЛичногоКабинетаПриПервоначальномЗаполнении(Знач ПараметрыПроверки = Неопределено,
	АдресХранилища = Неопределено) Экспорт
	
	ОчиститьСтраницыИНастройки();
	ЗагрузитьСтраницы();
	
КонецПроцедуры

// Возвращает адрес во временном хранилище с двоичными данными всех выгруженных страниц.
// и настроек личного кабинета.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка - адрес  во временном хранилище с двоичными данными всех выгруженных страниц.
//
Функция ВыгрузитьСтраницы() Экспорт
	
	КоличествоЗаписейВXML 	= 100;
	НомерТекущийЗаписиXML 	= 0;
	НомерПорции 			= 0;
	КаталогXML 				= КаталогВременныхФайлов() + "lk\";
	УдалитьФайлы(КаталогXML, "*");
	СоздатьКаталог(КаталогXML);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛичныйКабинет.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЛичныйКабинет КАК ЛичныйКабинет
		|ГДЕ
		|	НЕ ЛичныйКабинет.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		Если НомерТекущийЗаписиXML = 0 Тогда
		    Запись = Новый ЗаписьXML;
		    Запись.УстановитьСтроку();
		    
		    // записываем объявление xml файла: <?xml version="1.0"?>
		    Запись.ЗаписатьОбъявлениеXML();
		    
		    // Записываем корневой элемент, по спецификации xml он может быть только один, назовем его "Данные".
		    Запись.ЗаписатьНачалоЭлемента("Настройки");
			
			Запись.ЗаписатьНачалоЭлемента("Страницы");
		    // Для того чтобы пространства имен не объявлялись сериализатором в кажом элементе, пишем их в корневой элемент.
		    // они будут работать на все вложеные элементы
		    // пространство имен по-умолчанию
		    Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.1/data/enterprise/current-config");
		    
		    // пространства имен остальные префиксы
		    Запись.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
		    Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
			
		ИначеЕсли НомерТекущийЗаписиXML = 0 ИЛИ НомерТекущийЗаписиXML = КоличествоЗаписейВXML Тогда
			
			Если НомерТекущийЗаписиXML = КоличествоЗаписейВXML Тогда
		    	// записываем конец элемента Страницы
		    	Запись.ЗаписатьКонецЭлемента();	
		    	// записываем конец корневого элемента
		    	Запись.ЗаписатьКонецЭлемента();
				
				// Записать все в файл НомерПорции.xml.
				// покажем что получилось
				Текст = Запись.Закрыть();	

				XMLФайл = КаталогXML + "0_sprlk_" + Формат(НомерПорции, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + ".xml";
				МойXML 	= Новый ТекстовыйДокумент; 
				МойXML.ДобавитьСтроку(Текст);
				МойXML.Записать(XMLФайл);
				
				НомерПорции = НомерПорции + 1;
			КонецЕсли;
			
			НомерТекущийЗаписиXML = 0;
			
		    Запись = Новый ЗаписьXML;
		    Запись.УстановитьСтроку();
		    
		    // записываем объявление xml файла: <?xml version="1.0"?>
		    Запись.ЗаписатьОбъявлениеXML();
		    
		    // записываем корневой элемент, по спецификации xml он может быть только один, назовем его "Данные"
		    Запись.ЗаписатьНачалоЭлемента("Настройки");
			
			Запись.ЗаписатьНачалоЭлемента("Страницы");
		    // для того чтобы пространства имен не объявлялись сериализатором в кажом элементе, пишем их в корневой элемент
		    // они будут работать на все вложеные элементы
		    // пространство имен по-умолчанию
		    Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.1/data/enterprise/current-config");
		    
		    // пространства имен остальные префиксы
		    Запись.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
		    Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
			
		КонецЕсли;
		
	    // вместо этого кода в боевой реализации выгрузки будет создание ОбъектаXDTO и его сериализация
	    // через ФабрикуXDTO и загруженные в нее схемы конфигурации приемника
	    СериализаторXDTO.ЗаписатьXML(Запись, Выборка.Ссылка.ПолучитьОбъект());
		
		НомерТекущийЗаписиXML = НомерТекущийЗаписиXML + 1;
				
	КонецЦикла;
	
	// записываем конец элемента Страницы
	Запись.ЗаписатьКонецЭлемента();	
	// записываем конец корневого элемента
	Запись.ЗаписатьКонецЭлемента();
	
	// Записать все в файл НомерПорции.xml.
	// покажем что получилось
	Текст = Запись.Закрыть();	

	XMLФайл = КаталогXML + "0_sprlk_" + Формат(НомерПорции, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + ".xml";
	МойXML 	= Новый ТекстовыйДокумент; 
	МойXML.ДобавитьСтроку(Текст);
	МойXML.Записать(XMLФайл);
	
	НомерПорции = НомерПорции + 1;
	
	// Пишем константы
	
    Запись = Новый ЗаписьXML;
    Запись.УстановитьСтроку();
    
    // записываем объявление xml файла: <?xml version="1.0"?>
    Запись.ЗаписатьОбъявлениеXML();
    
    // записываем корневой элемент, по спецификации xml он может быть только один, назовем его "Данные"
    Запись.ЗаписатьНачалоЭлемента("Настройки");
	
	Запись.ЗаписатьНачалоЭлемента("Константы");
    // для того чтобы пространства имен не объявлялись сериализатором в кажом элементе, пишем их в корневой элемент
    // они будут работать на все вложеные элементы
    // пространство имен по-умолчанию
    Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.1/data/enterprise/current-config");
    
    // пространства имен остальные префиксы
    Запись.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
    Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
		
	Запись.ЗаписатьНачалоЭлемента("ЛичныйКабинетЛокализация");
	ХранилищеЗначений = Константы.ЛичныйКабинетЛокализация.Получить();	
	Поток = Новый ПотокВПамяти;
	Текст = Новый ЗаписьТекста(Поток, КодировкаТекста.UTF8);
	Текст.Записать(ХранилищеЗначений.Получить());
	Текст.Закрыть();	
	ДанныеСтрокой = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	Строка64 = Base64Строка(ДанныеСтрокой);
	Запись.ЗаписатьТекст(Строка64);
	Запись.ЗаписатьКонецЭлемента();	
	
	ЛичныйКабинетСтраница404 = Константы.ЛичныйКабинетСтраница404.Получить();
	Запись.ЗаписатьНачалоЭлемента("ЛичныйКабинетСтраница404");	
	Запись.ЗаписатьТекст(Строка(ЛичныйКабинетСтраница404.УникальныйИдентификатор()));
	Запись.ЗаписатьКонецЭлемента();	
	
	ЛичныйКабинетСтраницаУстановкиОценокПоЗаданию = Константы.ЛичныйКабинетСтраницаУстановкиОценокПоЗаданию.Получить();
	Запись.ЗаписатьНачалоЭлемента("ЛичныйКабинетСтраницаУстановкиОценокПоЗаданию");	
	Запись.ЗаписатьТекст(Строка(ЛичныйКабинетСтраницаУстановкиОценокПоЗаданию.УникальныйИдентификатор()));
	Запись.ЗаписатьКонецЭлемента();
	
	ЛичныйКабинетСтраницаЗадания = Константы.ЛичныйКабинетСтраницаЗадания.Получить();
	Запись.ЗаписатьНачалоЭлемента("ЛичныйКабинетСтраницаЗадания");	
	Запись.ЗаписатьТекст(Строка(ЛичныйКабинетСтраницаЗадания.УникальныйИдентификатор()));
	Запись.ЗаписатьКонецЭлемента();
	
	ЛичныйКабинетДобавлениеКомментария = Константы.ЛичныйКабинетДобавлениеКомментария.Получить();
	Запись.ЗаписатьНачалоЭлемента("ЛичныйКабинетДобавлениеКомментария");	
	Запись.ЗаписатьТекст(Строка(ЛичныйКабинетДобавлениеКомментария.УникальныйИдентификатор()));
	Запись.ЗаписатьКонецЭлемента();

	ЛичныйКабинетСтраницаАвторизации = Константы.ЛичныйКабинетСтраницаАвторизации.Получить();
	Запись.ЗаписатьНачалоЭлемента("ЛичныйКабинетСтраницаАвторизации");	
	Запись.ЗаписатьТекст(Строка(ЛичныйКабинетСтраницаАвторизации.УникальныйИдентификатор()));
	Запись.ЗаписатьКонецЭлемента();
	
	ЛичныйКабинетИспользоватьСобственнуюАвторизацию = 
		Константы.ЛичныйКабинетИспользоватьСобственнуюАвторизацию.Получить();
	Запись.ЗаписатьНачалоЭлемента("ЛичныйКабинетИспользоватьСобственнуюАвторизацию");	
	Запись.ЗаписатьТекст(?(ЛичныйКабинетИспользоватьСобственнуюАвторизацию = Истина, "Y", "N"));
	Запись.ЗаписатьКонецЭлемента();	

	// записываем конец элемента Страницы
	Запись.ЗаписатьКонецЭлемента();	
	// записываем конец корневого элемента
	Запись.ЗаписатьКонецЭлемента();
	
	// Записать все в файл НомерПорции.xml.
	// покажем что получилось
	Текст = Запись.Закрыть();	

	XMLФайл = КаталогXML +"9_consts.xml";
	МойXML 	= Новый ТекстовыйДокумент; 
	МойXML.ДобавитьСтроку(Текст);
	МойXML.Записать(XMLФайл);
	
	// Делаем архив
	ИмяАрхива 	= ПолучитьИмяВременногоФайла();
	Файлы = НайтиФайлы(КаталогXML, "*", Ложь);
	
	НовыйАрхив 	= Новый ЗаписьZipФайла(ИмяАрхива);
	Для Каждого Файл Из Файлы Цикл	
		НовыйАрхив.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	НовыйАрхив.Записать();
	
	ДД 		= Новый ДвоичныеДанные(ИмяАрхива);
	Адрес 	= ПоместитьВоВременноеХранилище(ДД);
	
	УдалитьФайлы(КаталогXML);
	УдалитьФайлы(ИмяАрхива);
	
	Возврат Адрес;
	
КонецФункции

// Загружает все страницы личного кабинета и настройки из адреса
//
// Параметры:
//	Адрес - Строка - адрес во временном хранилище с двоичными данными всех выгруженных 
//					 страниц в виде архива и файдла data.xml в нем.
//
Процедура ЗагрузитьСтраницы(Знач Адрес = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Адрес <> Неопределено Тогда
		ДД 	= ПолучитьИзВременногоХранилища(Адрес);	
		УдалитьИзВременногоХранилища(Адрес);
	Иначе
		ДД 	= ПолучитьОбщийМакет("ШаблонЛичногоКабинета");
	КонецЕсли;	
	
	УИД = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	ПапкаНазначения = КаталогВременныхФайлов() + "lk" + УИД + "\";
	
	Попытка
		Поток = ДД.ОткрытьПотокДляЧтения();
		ЧтениеАрхива = Новый ЧтениеZipФайла(Поток);
	Исключение
		ТекстОшибки = НСтр("ru = 'В файле отсутствует информация о данных личного кабинета.'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Для Каждого ЭлементАрхива Из ЧтениеАрхива.Элементы Цикл
		
		ЭтоЗаписьСправочника 	= Ложь;
		ЭтоКонстанты			= Ложь;
		ИсходноеПолноеИмя		= НРег(ЭлементАрхива.ИсходноеПолноеИмя);
		
		Если СтрНайти(ИсходноеПолноеИмя, "sprlk") > 0 И СтрНайти(ИсходноеПолноеИмя, ".xml") > 0 Тогда
			ЭтоЗаписьСправочника = Истина;
		ИначеЕсли СтрНайти(ИсходноеПолноеИмя, "consts") > 0 И СтрНайти(ИсходноеПолноеИмя, ".xml") > 0 Тогда
			ЭтоКонстанты = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЧтениеАрхива.Извлечь(ЭлементАрхива, ПапкаНазначения);
		ВременныйФайлXML = ПапкаНазначения + ЭлементАрхива.ПолноеИмя;
		ЧтениеXML 		 = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ВременныйФайлXML);
		// Прочитаем начало xml файла.
		ЧтениеXML.ПерейтиКСодержимому();
		
		// прочитаем начало корневого элемента.
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		
		// Читаем содержимое пока текущим не станет конец корневого элемента, 
		// т.к. мы писали туда только целые элементы справочника,
		// а сериализатор читает каждый из их полностью, то мы упремся именно в конец корневого.
		Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл			
			Если ЭтоЗаписьСправочника Тогда					
				
				// читаем очередной элемент справочника.
				ОбъектСправочника = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);						
				ОбъектСправочника.ОбменДанными.Загрузка = Истина;
				ОбъектСправочника.Записать();
				
			ИначеЕсли ЭтоКонстанты Тогда
				
				Если ЧтениеXML.ЛокальноеИмя = "ЛичныйКабинетЛокализация" Тогда
					ДД = Base64Значение(СериализаторXDTO.ПрочитатьXML(ЧтениеXML));
					Строка = ПолучитьСтрокуИзДвоичныхДанных(ДД, КодировкаТекста.UTF8);
					Константы.ЛичныйКабинетЛокализация.Установить(
						Новый ХранилищеЗначения(Строка,	Новый СжатиеДанных(0)));
						
				ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ЛичныйКабинетСтраница404" Тогда
					УИД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
					Если НЕ ПустаяСтрока(УИД) Тогда
						Ссылка = Справочники.ЛичныйКабинет.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
						Константы.ЛичныйКабинетСтраница404.Установить(Ссылка);
					КонецЕсли;
					
				ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ЛичныйКабинетСтраницаУстановкиОценокПоЗаданию" Тогда
					УИД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
					Если НЕ ПустаяСтрока(УИД) Тогда
						Ссылка = Справочники.ЛичныйКабинет.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
						Константы.ЛичныйКабинетСтраницаУстановкиОценокПоЗаданию.Установить(Ссылка);
					КонецЕсли;
					
				ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ЛичныйКабинетСтраницаЗадания" Тогда
					УИД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
					Если НЕ ПустаяСтрока(УИД) Тогда
						Ссылка = Справочники.ЛичныйКабинет.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
						Константы.ЛичныйКабинетСтраницаЗадания.Установить(Ссылка);
					КонецЕсли;
					
				ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ЛичныйКабинетДобавлениеКомментария" Тогда
					УИД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
					Если НЕ ПустаяСтрока(УИД) Тогда
						Ссылка = Справочники.ЛичныйКабинет.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
						Константы.ЛичныйКабинетДобавлениеКомментария.Установить(Ссылка);
					КонецЕсли;
					
				ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ЛичныйКабинетСтраницаАвторизации" Тогда
					УИД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
					Если НЕ ПустаяСтрока(УИД) Тогда
						Ссылка = Справочники.ЛичныйКабинет.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
						Константы.ЛичныйКабинетСтраницаАвторизации.Установить(Ссылка);
					КонецЕсли;

				ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ЛичныйКабинетИспользоватьСобственнуюАвторизацию" Тогда
					Текст = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
					Если НЕ ПустаяСтрока(Текст) Тогда						
						Константы.ЛичныйКабинетИспользоватьСобственнуюАвторизацию.Установить(Текст = "Y");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
		КонецЦикла;							
		ЧтениеXML.Прочитать();

	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЧтениеАрхива.Закрыть();
	Поток.Закрыть();
	
	ЧтениеXML	 = Неопределено;
	ЧтениеАрхива = Неопределено;
	Поток 		 = Неопределено;	
	
	// Очищаем временные файлы и освобождаем память.
	ФайловаяСистема.УдалитьВременныйКаталог(ПапкаНазначения);
	
КонецПроцедуры

// Очистка всех данных личного кабиента.
//
// Параметры:
//	Нет.
//
Процедура ОчиститьСтраницыИНастройки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Выборка = Справочники.ЛичныйКабинет.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		ОбъектСправочника = Выборка.ПолучитьОбъект();
		ОбъектСправочника.ОбменДанными.Загрузка = Истина;
		ОбъектСправочника.Удалить();
	КонецЦикла;
	
	Стр = "";
	ХранилищеЗначения = Новый ХранилищеЗначения(Стр, Новый СжатиеДанных(0));
	Константы.ЛичныйКабинетЛокализация.Установить(ХранилищеЗначения);
	Константы.ЛичныйКабинетСтраница404.Установить(Справочники.ЛичныйКабинет.ПустаяСсылка());
	Константы.ЛичныйКабинетСтраницаУстановкиОценокПоЗаданию.Установить(Справочники.ЛичныйКабинет.ПустаяСсылка());
	Константы.ЛичныйКабинетСтраницаЗадания.Установить(Справочники.ЛичныйКабинет.ПустаяСсылка());
	Константы.ЛичныйКабинетДобавлениеКомментария.Установить(Справочники.ЛичныйКабинет.ПустаяСсылка());
	Константы.ЛичныйКабинетСтраницаАвторизации.Установить(Справочники.ЛичныйКабинет.ПустаяСсылка());
	Константы.ЛичныйКабинетИспользоватьСобственнуюАвторизацию.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли