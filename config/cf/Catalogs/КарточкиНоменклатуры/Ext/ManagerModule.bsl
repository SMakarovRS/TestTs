#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	
	Возврат Результат;
	
КонецФункции

// Проверка уникальности реквизита.
// Для Серийного и инвентарного номера.
//
// Параметры:
//	Объект - СправочникСсылка.КарточкиНоменклатуры - объект у которого проверяем реквизит.
//  ИмяРеквизита - Строка - имя реквизита проверки.
//	ПроверятьЕслиПустой - Булево - проверять реквизит, если он пустой.
//
// Возвращаемое значение:
//  Массив - массив реквизитов, редактируемых при групповой обработке.
//
Функция РеквизитУникален(Знач Объект, Знач ИмяРеквизита, Знач ПроверятьЕслиПустой = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ПроверятьЕслиПустой Тогда
		Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
			Возврат Новый ТаблицаЗначений;
		КонецЕсли;
	КонецЕсли;
	
	Если ВРег(ИмяРеквизита) = ВРег("ИнвентарныйНомер") Тогда
		Уникальность = Объект.ВидНоменклатуры.УникальностьИнвентарногоНомера; 
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("СерийныйНомер") Тогда
		Уникальность = Объект.ВидНоменклатуры.УникальностьСерийногоНомера; 
	КонецЕсли;
	
	// В виде номенклатуры нет контроля уникальности.
	Если Уникальность = Перечисления.МеханизмКонтроляУникальностиНоменклатуры.НеКонтролировать Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КарточкиНоменклатуры.Ссылка КАК КарточкаНоменклатуры
		|ИЗ
		|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
		|ГДЕ
		|	КарточкиНоменклатуры.Ссылка <> &Ссылка
		|	И КарточкиНоменклатуры.ПометкаУдаления = ЛОЖЬ
		|	И &ДопУсловия";
	
	
	ДопУсловия = "КарточкиНоменклатуры." + ИмяРеквизита + " = &Номер";
	
	Если Уникальность = Перечисления.МеханизмКонтроляУникальностиНоменклатуры.ВПределахВидаНоменклатуры Тогда
		ДопУсловия = ДопУсловия + "
		| И КарточкиНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры";
		Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия", ДопУсловия);	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Номер", Объект[ИмяРеквизита]);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает следующий номер, следующий за последним найденным.
// Вычленяет из номера все цифры, буквы оставляет.
//
// Параметры:
//   Объект - СправочникСсылка.КарточкиНоменклатуры - карточка номенклатуры для получения номера.
//
// Возвращаемое значение:
//	Строка - последний инвентарный номер.
//   
Функция ПолучитьАвтоинкрементИнвентарногоНомера(Знач Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КарточкиНоменклатуры.ИнвентарныйНомер КАК Номер
		|ИЗ
		|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
		|ГДЕ
		|	КарточкиНоменклатуры.ИнвентарныйНомер <> """"
		|	И КарточкиНоменклатуры.Ссылка <> &Ссылка
		|	И КарточкиНоменклатуры.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат 									= Запрос.Выполнить();
	
	ПрефиксИнвентарныхНомеров					= Константы.ПрефиксИнвентарныхНомеров.Получить();
	ДлинаПрефикса 								= СтрДлина(ПрефиксИнвентарныхНомеров);	
	ДлинаИнвентарногоНомера						= Константы.ДлинаИнвентарногоНомера.Получить();
	ДобавлятьЛидирующиеНулиВИнвентарномНомере	= Константы.ДобавлятьЛидирующиеНулиВИнвентарномНомере.Получить();
		
	Если Результат.Пустой() Тогда
		Если ДлинаИнвентарногоНомера = 0 Тогда
			Возврат "00000000001";
		КонецЕсли;		
		Результат = "1";
		Если ДобавлятьЛидирующиеНулиВИнвентарномНомере Тогда
			Пока СтрДлина(Результат) < ДлинаИнвентарногоНомера - ДлинаПрефикса Цикл
				Результат = "0" + Результат;
			КонецЦикла;
		КонецЕсли;
		
		Возврат ПрефиксИнвентарныхНомеров + Результат;
		
	Иначе
		
		Выборка			= Результат.Выбрать();
		Выборка.Следующий();		
		Номер 			= Выборка.Номер;
		ШаблонНомера	= Номер;
		Префикс 		= "";
		СтрокаЦифр		= "";
		ИнвентарныйНомер= "";
		
		Для Индекс = 1 По СтрДлина(Номер) Цикл
			СимволСтроки = Сред(Номер, Индекс, 1);
			Если СимволСтроки = "0" 
				ИЛИ СимволСтроки = "1" 
				ИЛИ СимволСтроки = "2" 
				ИЛИ СимволСтроки = "3" 
				ИЛИ СимволСтроки = "4" 
				ИЛИ СимволСтроки = "5" 
				ИЛИ СимволСтроки = "6" 
				ИЛИ СимволСтроки = "7" 
				ИЛИ СимволСтроки = "8" 
				ИЛИ СимволСтроки = "9" Тогда
				
				ШаблонНомера 	= СтрЗаменить(ШаблонНомера, СимволСтроки, "*");
				СтрокаЦифр 		= СтрокаЦифр + Строка(СимволСтроки);
				
			КонецЕсли;			
		КонецЦикла;
		
		Если СтрДлина(СтрокаЦифр)= 0 Тогда // только символы.
			ИнвентарныйНомер = Номер + "1";
			
			Возврат ИнвентарныйНомер;
			
		КонецЕсли; 		
		
		Попытка
			РезультатЧисло	= Число(СтрокаЦифр) + 1;			
		Исключение
			ИнвентарныйНомер= Номер + "1";
			
			Возврат ИнвентарныйНомер;
			
		КонецПопытки;	
		
		СтрокаРезультат	= Формат(РезультатЧисло, "ЧН=0; ЧГ=");
		
		Если СтрДлина(СтрокаРезультат) = СтрДлина(Номер) Тогда // номер из цифр.
			
			Возврат СтрокаРезультат;					
			
		КонецЕсли;
		
		Пока СтрДлина(СтрокаРезультат) < СтрДлина(СтрокаЦифр) Цикл
			СтрокаРезультат = "0" + СтрокаРезультат;
		КонецЦикла;			
		
		Если СтрДлина(СтрокаРезультат) > СтрДлина(СтрокаЦифр) Тогда
			ДобавляемаяСтрока = "";
			
			ПозицияЗвездочки = СтрДлина(ШаблонНомера);
			Пока Сред(ШаблонНомера, ПозицияЗвездочки, 1)  <> "*" И ПозицияЗвездочки > 0  Цикл
				ПозицияЗвездочки = ПозицияЗвездочки - 1;
			КонецЦикла;
			
			Разница = СтрДлина(СтрокаРезультат) - СтрДлина(СтрокаЦифр);
			Для Сч = 1 По Разница Цикл
				ДобавляемаяСтрока = ДобавляемаяСтрока + "*";
			КонецЦикла;	
			ШаблонНомера = Сред(ШаблонНомера,1,ПозицияЗвездочки) + ДобавляемаяСтрока + Сред(ШаблонНомера,ПозицияЗвездочки+1); 			
		КонецЕсли;			
		
		Для Индекс = 1 По СтрДлина(ШаблонНомера) Цикл
			СимволСтроки = Сред(ШаблонНомера, Индекс, 1);
			Если СимволСтроки = "*" Тогда 				
				ИнвентарныйНомер= ИнвентарныйНомер + Сред(СтрокаРезультат, 1, 1);
				СтрокаРезультат	= Прав(СтрокаРезультат, СтрДлина(СтрокаРезультат) - 1);
			Иначе
				ИнвентарныйНомер= ИнвентарныйНомер + СимволСтроки;
			КонецЕсли;	
		КонецЦикла;	
		
		Возврат ИнвентарныйНомер;
		
	КонецЕсли;
	
КонецФункции

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
		
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта = Новый Соответствие;	
	
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	СоответствиеПериодическоеСобытие.Вставить("КарточкиНоменклатурыПериодическоеСобытиеОкончаниеСрокаДействияЛицензии", 	  НСтр("ru = 'Окончание срока действия лицензии'"));
	СоответствиеПериодическоеСобытие.Вставить("КарточкиНоменклатурыПериодическоеСобытиеОкончаниеСрокаДействияПодпискиНаОбновление", НСтр("ru = 'Окончание срока действия подписки на обновление'"));
	СоответствиеПериодическоеСобытие.Вставить("КарточкиНоменклатурыПериодическоеСобытиеОкончаниеСрокаДействияГарантии", 	  НСтр("ru = 'Окончание срока действия гарантии'"));
	СоответствиеПериодическоеСобытие.Вставить("КарточкиНоменклатурыПериодическоеСобытиеОкончаниеСрокаПолезногоИспользования", НСтр("ru = 'Окончание срока действия полезного использования'"));
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("КарточкиНоменклатурыРасчетМетрикЗаписьЭлемента", НСтр("ru = 'Запись элемента'"));
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура	 - источник события и другая информация.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура = Неопределено, Знач Источник = Неопределено) Экспорт
	
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ПравилоСобытия.ТипПравила = Перечисления.ТипыПравилСобытий.ПериодическоеСобытие Тогда 
		
		ДатаНачалаПроверки   = Структура.ДатаНачалаПроверки;
		ДатаОкончанияПроверки= Структура.ДатаОкончанияПроверки;			
		Запрос 		 		 = Новый Запрос;
		
		Если ИмяСобытия = "КарточкиНоменклатурыПериодическоеСобытиеОкончаниеСрокаДействияЛицензии" Тогда			
			
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СостояниеКарточекНоменклатурыСрезПоследних.КарточкаНоменклатуры КАК Ссылка
				|ИЗ
				|	РегистрСведений.СостояниеКарточекНоменклатуры.СрезПоследних(
				|			&ДатаОкончания,
				|			Состояние <> ЗНАЧЕНИЕ(Справочник.СостояниеКарточекНоменклатуры.Продано)
				|				И Состояние <> ЗНАЧЕНИЕ(Справочник.СостояниеКарточекНоменклатуры.Списано)) КАК СостояниеКарточекНоменклатурыСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
				|		ПО СостояниеКарточекНоменклатурыСрезПоследних.КарточкаНоменклатуры = КарточкиНоменклатуры.Ссылка
				|ГДЕ
				|	КарточкиНоменклатуры.ЕстьОграниченияПоСрокуДействияЛицензии
				|	И КарточкиНоменклатуры.ДатаОкончанияЛицензии <> ДАТАВРЕМЯ(1, 1, 1)
				|	И НЕ КарточкиНоменклатуры.ПометкаУдаления
				|	И &ДатаНачала <= ДОБАВИТЬКДАТЕ(КарточкиНоменклатуры.ДатаОкончанияЛицензии, ЧАС, -&ВремяДоОповещения)
				|	И ДОБАВИТЬКДАТЕ(КарточкиНоменклатуры.ДатаОкончанияЛицензии, ЧАС, -&ВремяДоОповещения) < &ДатаОкончания";
				
		ИначеЕсли ИмяСобытия = "КарточкиНоменклатурыПериодическоеСобытиеОкончаниеСрокаДействияПодпискиНаОбновление" Тогда			
			
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СостояниеКарточекНоменклатурыСрезПоследних.КарточкаНоменклатуры КАК Ссылка
				|ИЗ
				|	РегистрСведений.СостояниеКарточекНоменклатуры.СрезПоследних(
				|			&ДатаОкончания,
				|			Состояние <> ЗНАЧЕНИЕ(Справочник.СостояниеКарточекНоменклатуры.Продано)
				|				И Состояние <> ЗНАЧЕНИЕ(Справочник.СостояниеКарточекНоменклатуры.Списано)) КАК СостояниеКарточекНоменклатурыСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
				|		ПО СостояниеКарточекНоменклатурыСрезПоследних.КарточкаНоменклатуры = КарточкиНоменклатуры.Ссылка
				|ГДЕ
				|	КарточкиНоменклатуры.ЕстьОграниченияПоСрокуДействияОбновлений
				|	И КарточкиНоменклатуры.ДатаОкончанияПодпискиОбновлений <> ДАТАВРЕМЯ(1, 1, 1)
				|	И НЕ КарточкиНоменклатуры.ПометкаУдаления
				|	И &ДатаНачала <= ДОБАВИТЬКДАТЕ(КарточкиНоменклатуры.ДатаОкончанияПодпискиОбновлений, ЧАС, -&ВремяДоОповещения)
				|	И ДОБАВИТЬКДАТЕ(КарточкиНоменклатуры.ДатаОкончанияПодпискиОбновлений, ЧАС, -&ВремяДоОповещения) < &ДатаОкончания";				
				
		ИначеЕсли ИмяСобытия = "КарточкиНоменклатурыПериодическоеСобытиеОкончаниеСрокаДействияГарантии" Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СостояниеКарточекНоменклатурыСрезПоследних.КарточкаНоменклатуры КАК Ссылка
				|ИЗ
				|	РегистрСведений.СостояниеКарточекНоменклатуры.СрезПоследних(
				|			&ДатаОкончания,
				|			Состояние <> ЗНАЧЕНИЕ(Справочник.СостояниеКарточекНоменклатуры.Продано)
				|				И Состояние <> ЗНАЧЕНИЕ(Справочник.СостояниеКарточекНоменклатуры.Списано)) КАК СостояниеКарточекНоменклатурыСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
				|		ПО СостояниеКарточекНоменклатурыСрезПоследних.КарточкаНоменклатуры = КарточкиНоменклатуры.Ссылка
				|ГДЕ
				|	КарточкиНоменклатуры.ЕстьГарантия
				|	И КарточкиНоменклатуры.ДатаОкончанияГарантии <> ДАТАВРЕМЯ(1, 1, 1)
				|	И НЕ КарточкиНоменклатуры.ПометкаУдаления
				|	И &ДатаНачала <= ДОБАВИТЬКДАТЕ(КарточкиНоменклатуры.ДатаОкончанияГарантии, ЧАС, -&ВремяДоОповещения)
				|	И ДОБАВИТЬКДАТЕ(КарточкиНоменклатуры.ДатаОкончанияГарантии, ЧАС, -&ВремяДоОповещения) < &ДатаОкончания";			
			
		ИначеЕсли ИмяСобытия = "КарточкиНоменклатурыПериодическоеСобытиеОкончаниеСрокаПолезногоИспользования" Тогда
				
			Запрос.Текст = 				
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СостояниеКарточекНоменклатурыСрезПоследних.КарточкаНоменклатуры КАК Ссылка
				|ИЗ
				|	РегистрСведений.СостояниеКарточекНоменклатуры.СрезПоследних(
				|			&ДатаОкончания,
				|			Состояние <> ЗНАЧЕНИЕ(Справочник.СостояниеКарточекНоменклатуры.Продано)
				|				И Состояние <> ЗНАЧЕНИЕ(Справочник.СостояниеКарточекНоменклатуры.Списано)) КАК СостояниеКарточекНоменклатурыСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
				|		ПО СостояниеКарточекНоменклатурыСрезПоследних.КарточкаНоменклатуры = КарточкиНоменклатуры.Ссылка
				|ГДЕ
				|	КарточкиНоменклатуры.ДатаВводаВЭксплуатацию <> ДАТАВРЕМЯ(1, 1, 1)
				|	И НЕ КарточкиНоменклатуры.ПометкаУдаления
				|	И КарточкиНоменклатуры.СрокПолезногоИспользования <> 0
				|	И &ДатаНачала <= ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(КарточкиНоменклатуры.ДатаВводаВЭксплуатацию, МЕСЯЦ, КарточкиНоменклатуры.СрокПолезногоИспользования), ЧАС, -&ВремяДоОповещения)
				|	И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(КарточкиНоменклатуры.ДатаВводаВЭксплуатацию, МЕСЯЦ, КарточкиНоменклатуры.СрокПолезногоИспользования), ЧАС, -&ВремяДоОповещения) < &ДатаОкончания";
				
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВремяДоОповещения", ПравилоСобытия.ЧасовДоУсловия);	
		Запрос.УстановитьПараметр("ДатаНачала",        ДатаНачалаПроверки);
		Запрос.УстановитьПараметр("ДатаОкончания",     ДатаОкончанияПроверки);			
		
		РезультатЗапроса 	   = Запрос.Выполнить();			
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Новый Массив;
		Иначе	
			ТЗКарточкиНоменклатуры = РезультатЗапроса.Выгрузить();
		КонецЕсли;				
		
		НастройкиСКД = ПравилоСобытия.ПроверкаРеквизитовОбъектаУсловия.Получить();
		Если НастройкиСКД <> Неопределено Тогда
			
			СКД = Справочники.ПравилаСобытий.ПолучитьПравилаОтбораСобытий(ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяОбъекта);
			ТекстЗапроса = СКД.НаборыДанных.НаборДанных1.Запрос;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КарточкиНоменклатуры.Ссылка = &Основание", "КарточкиНоменклатуры.Ссылка В (&Основание)");
			СКД.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;

			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
			КомпоновщикНастроек.Восстановить();
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Основание", ТЗКарточкиНоменклатуры);
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки   = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Ложь);
			
			РезультатСКД    = Новый ТаблицаЗначений;
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(РезультатСКД);
			ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
			Если РезультатСКД.Количество() > 0 Тогда
				Возврат РезультатСКД.ВыгрузитьКолонку("Ссылка");			
			Иначе
				Возврат Новый Массив;
			КонецЕсли;
		Иначе 
			Возврат Новый Массив;	
		КонецЕсли;			
		
	КонецЕсли;
	
КонецФункции

Функция ЗначенияРеквизитовОбъектаПравилаСобытий(СтруктураРеквизитов, Источник, СтруктураПередЗаписью) Экспорт
	
	ЗначенияВычисляемыхРеквизитов = Новый Соответствие;
	Возврат ЗначенияВычисляемыхРеквизитов;
	
КонецФункции

Процедура ЗаполнитьСписокРеквизитовДляПравилаСобытия(ТаблицаРеквизитов, ТипДействия) Экспорт
				
	НовыйРеквизит 			  			= ТаблицаРеквизитов.Добавить();
	НовыйРеквизит.РеквизитИмя 			= "Получатель";
	НовыйРеквизит.РеквизитЗаголовок 	= "Получатель";
	НовыйРеквизит.ТипЗначения			= ПравилаСобытийСервер.ТипыРеквизитовСКонтактнойИнформациейДляПравилСобытий();
	НовыйРеквизит.ОбязательноеЗаполнение= Истина;
	НовыйРеквизит.ВидЗаполнения			= "Реквизит основания";
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыШаблонаПоПравиламЗаполнения(ПараметрыШаблона, Знач Источник, Знач СтруктураПравилаСобытия) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтерфейсПечати
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция получает данные для печати этикеток
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивЭлементов) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеСотрудникиСрезПоследних.Сотрудник КАК ОтветственныйСотрудник,
		|	ОтветственныеСотрудникиИТОтделаСрезПоследних.Сотрудник КАК ОтветственныйСотрудникITОтдела,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КарточкиНоменклатуры.Ссылка) = ТИП(Справочник.Номенклатура)
		|			ТОГДА КарточкиНоменклатуры.Ссылка
		|		ИНАЧЕ КарточкиНоменклатуры.Ссылка.Владелец
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КарточкиНоменклатуры.Ссылка) = ТИП(Справочник.Номенклатура)
		|			ТОГДА NULL
		|		ИНАЧЕ КарточкиНоменклатуры.Ссылка
		|	КОНЕЦ КАК КарточкаНоменклатуры,
		|	ШтрихкодыНоменклатуры.Штрихкод,
		|	ОстаткиОстатки.Организация КАК Организация,
		|	ОстаткиОстатки.МестоХранения КАК МестоХранения,
		|	ОстаткиОстатки.КоличествоОстаток КАК КоличествоЭтикеток,
		|	ОстаткиОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО (ШтрихкодыНоменклатуры.Номенклатура = КарточкиНоменклатуры.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Остатки.Остатки(, Номенклатура В (&МассивЭлементов)) КАК ОстаткиОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудники.СрезПоследних КАК ОтветственныеСотрудникиСрезПоследних
		|			ПО ОстаткиОстатки.МестоХранения = ОтветственныеСотрудникиСрезПоследних.МестоХранения
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудникиИТОтдела.СрезПоследних КАК ОтветственныеСотрудникиИТОтделаСрезПоследних
		|			ПО ОстаткиОстатки.МестоХранения = ОтветственныеСотрудникиИТОтделаСрезПоследних.МестоХранения
		|		ПО КарточкиНоменклатуры.Ссылка = ОстаткиОстатки.Номенклатура
		|ГДЕ
		|	КарточкиНоменклатуры.Ссылка В(&МассивЭлементов)";
		
	Запрос.УстановитьПараметр("МассивЭлементов", МассивЭлементов);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из ТЗ Цикл
		Если НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Стр.Номенклатура) Тогда
			Стр.КарточкаНоменклатуры = УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Стр.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	// Подготовка структуры действий для обработки печати ценников и этикеток.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Штрихкоды", ТЗ);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецЕсли