
#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Параметры.Свойство("Владелец") Тогда
			Номенклатура 			= Параметры.Владелец;
			Объект.Наименование		= Номенклатура.Наименование;
			Объект.ВидНоменклатуры	= Номенклатура.ВидНоменклатуры;
			Объект.Владелец 		= Номенклатура;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Владелец) Тогда
			
			Объект.ВидНоменклатуры = Объект.Владелец.ВидНоменклатуры;
			Объект.ГарантияМесяцев = Объект.Владелец.ГарантияМесяцев;
			Объект.СрокПолезногоИспользования = 
				УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("СрокПолезногоИспользованияКомплектующих");
			
			Если ЗначениеЗаполнено(Объект.Владелец.ВидНоменклатуры) Тогда				
				Объект.КодПоОКОФ 			= Объект.Владелец.КодПоОКОФ;
				Объект.АмортизационнаяГруппа= Объект.Владелец.АмортизационнаяГруппа;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьНаименованиеКарточки();
		
	КонецЕсли;
	
	ИдентификаторСтрокиНоменклатурыВладельца = -1;
	Если Параметры.Свойство("ИдентификаторСтрокиНоменклатурыВладельца") Тогда
		ИдентификаторСтрокиНоменклатурыВладельца = Параметры.ИдентификаторСтрокиНоменклатурыВладельца;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) И НЕ Объект.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	#Область БСП
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	#КонецОбласти
	
	СЛС.ВывестиХарактеристики(Объект, ЭтаФорма);	
	
	// Установка значения реквизита АдресКартинки.
	ОбновитьИзображение();

	УстановитьВидимостьИДоступность();
		
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
		
	ЭлементМодифицирован = Ложь;
		
	ИзменитьЭлементОтбораСписка(Штрихкоды, "Номенклатура", Объект.Ссылка, Истина);	
	
	ОбновитьКомплектациюНаСервере(Объект.Ссылка);
	
	ОбновитьБухгалтерскиеПоказатели();
	
	ЗаполнитьДокументы();
	ЗаполнитьСтатусыКарточки();
	ЗаполнитьТекущиеСведения();
	
	ЗаданияСервер.УстановитьШагКорректировкиВеса(ШагКорректировкиВеса);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Элементы.ГруппаКомплектующие.Видимость Тогда
		// Разворачиваем дерево.
		КоллекцияЭлементовДерева = ДеревоКомплектации.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоКомплектации.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;			
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события ОбработкаОповещения.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства".
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Обновить_Изображение" И Источник.Ссылка = Объект.Владелец Тогда
		ОбновитьИзображение();
		Элементы.АдресКартинки.Обновить();
	КонецЕсли;
	
	// Поменяли настройки в виде номенклатуры.
	Если ИмяСобытия = "ЗаписьВидаНоменклатуры" Тогда
		Если Источник = Объект.ВидНоменклатуры Тогда
			УстановитьВидимостьИДоступность();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
// Процедура обработчик события ПередЗаписьюНаСервере.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаписатьХарактеристики();
	
	Если Модифицированность Тогда
		ЭлементМодифицирован = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
// Процедура обработчик события ПослеЗаписиНаСервере.
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьВидимостьИДоступность();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);		
	
	ИзменитьЭлементОтбораСписка(Штрихкоды, "Номенклатура", Объект.Ссылка, Истина);
	
	Если ЭлементМодифицирован Тогда
		ЭлементМодифицирован = Ложь;
	КонецЕсли;
	
	ЗаполнитьДокументы();
	ЗаполнитьСтатусыКарточки();
	ЗаполнитьТекущиеСведения();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ИдентификаторСтрокиНоменклатурыВладельца <> -1 Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("ИдентификаторСтрокиНоменклатурыВладельца", ИдентификаторСтрокиНоменклатурыВладельца);
		Структура.Вставить("ВладелецФормы", ЭтаФорма.ВладелецФормы);
		Оповестить("ВыборКарточкиНоменклатуры", Структура, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСтатус(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаУстановитьСтатус", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, 
			Нстр("ru = 'Данные еще не записаны. Установить статус возможно только после записи данных. Записать данные?'"), 
				РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;	
	
	ПослеВопросаУстановитьСтатусФрагмент();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаУстановитьСтатус(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Записать();	
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПослеВопросаУстановитьСтатусФрагмент();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеВопросаУстановитьСтатусФрагмент()
		
	Если УправлениеITОтделом8УФПовтИсп.ДляКарточкиНоменклатурыВедетсяИсторияИзмененияСтатусов(Объект.Владелец) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеУстановкиСтатусаКарточкеНоменклатуры", ЭтотОбъект, 
			Новый Структура("КарточкаНоменклатуры", Объект.Ссылка));
		ОткрытьФорму("РегистрСведений.СтатусыКарточекНоменклатуры.ФормаЗаписи", 
			Новый Структура("КарточкаНоменклатуры", Объект.Ссылка), ЭтаФорма, , , , ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСтатусаКарточкиНоменклатуры", ЭтотОбъект, 
			Новый Структура("КарточкаНоменклатуры", Объект.Ссылка));
		ОткрытьФорму("Справочник.СтатусыКарточекНоменклатуры.ФормаВыбора", 
			Новый Структура("КарточкаНоменклатуры", Объект.Ссылка) , ЭтаФорма, , , , ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеУстановкиСтатусаКарточкеНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьСтатусыКарточки();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтатусаКарточкиНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтатусУстановлен = Ложь;
	
	Если ДополнительныеПараметры.Свойство("КарточкаНоменклатуры") Тогда
		ПараметрыЗаписи  = ДополнительныеПараметры;
		ПараметрыЗаписи.Вставить("Статус", Результат);
		СтатусУстановлен = УстановитьСтатусКарточкеНоменклатуры(ПараметрыЗаписи);		
	КонецЕсли;
	
	Если СтатусУстановлен Тогда
		ЗаполнитьСтатусыКарточки();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция УстановитьСтатусКарточкеНоменклатуры(ПараметрыЗаписи)
	
	Возврат РегистрыСведений.СтатусыКарточекНоменклатуры.УстановитьСтатусКарточкеНоменклатуры(ПараметрыЗаписи);
	
КонецФункции

&НаКлиенте
Процедура ОчиститьИсторию(Команда)
	
	Если СтатусыКарточкиНоменклатуры.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОчиститьИсториюСтатусов", ЭтотОбъект);
		ТекстВопроса = ?(Элементы.ОчиститьИсторию.Заголовок = НСтр("ru = 'Очистить статус'"),
		    Нстр("ru = 'Текущий статус будет очищен. Продолжить?'"),
			Нстр("ru = 'История изменения статусов будет очищена. Продолжить?'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОчиститьИсториюСтатусов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьИсториюСтатусовНаСервере();
	Оповестить("ОбновитьСтатусыКарточкеНоменклатуры", Новый Структура("КарточкаНоменклатуры", Объект.Ссылка), 
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьХарактеристикиПоНоменклатуре(Команда)
	
	ПараметрыХарактеристик = Новый Структура;
	ПараметрыХарактеристик.Вставить("ИсточникХарактеристик", НСтр("ru = 'по номенклатуре'"));
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьХарактеристикиПоВидуНоменклатурыЗавершение", ЭтотОбъект, 
			ПараметрыХарактеристик), НСтр("ru = 'Элемент еще не записан. Для продолжения необходимо его записать. Записать элемент?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Если Характеристики.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьХарактеристикиЗавершение", ЭтотОбъект,ПараметрыХарактеристик),
			НСтр("ru = 'Внимание. Текущие характеристики будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьХарактеристикиПоВидуНоменклатурыНаСервере(НСтр("ru = 'по номенклатуре'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьХарактеристикиПоВидуНоменклатуры(Команда)
	
	ПараметрыХарактеристик = Новый Структура;
	ПараметрыХарактеристик.Вставить("ИсточникХарактеристик", НСтр("ru = 'по виду номенклатуры'"));
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьХарактеристикиПоВидуНоменклатурыЗавершение", ЭтотОбъект,
			ПараметрыХарактеристик), 
			НСтр("ru = 'Элемент еще не записан. Для продолжения необходимо его записать. Записать элемент?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Если Характеристики.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьХарактеристикиЗавершение", ЭтотОбъект, ПараметрыХарактеристик),
			НСтр("ru = 'Внимание. Текущие характеристики будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьХарактеристикиПоВидуНоменклатурыНаСервере(НСтр("ru = 'по виду номенклатуры'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнвентарныйНомерПриИзменении(Элемент)
	ОбновитьНаименованиеКарточки();
КонецПроцедуры

&НаКлиенте
Процедура СерийныйНомерПриИзменении(Элемент)
	
	ОбновитьНаименованиеКарточки();
	
КонецПроцедуры

&НаКлиенте
Процедура БухНомерПриИзменении(Элемент)
	ОбновитьНаименованиеКарточки();
КонецПроцедуры

&НаКлиенте
Процедура СрокаДействияРегистрацииПриИзменении(Элемент)
	УстановитьВидимостьИДоступность();
	ОбновитьНаименованиеКарточки();
КонецПроцедуры

&НаКлиенте
Процедура ЕстьОграниченияПоКоличествуПользователейЛицензииПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	ОбновитьНаименованиеКарточки();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияОбновленийПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	ОбновитьНаименованиеКарточки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриобретенияПриИзменении(Элемент)
	ОбновитьНаименованиеКарточки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаметкиПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ХАРАКТЕРИСТИКАМИ

&НаКлиенте
Процедура ДобавитьХарактеристику(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьХарактеристикуФрагмент", ЭтаФорма);
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Элемент не записан. Для продолжения необходима его запись. Продолжить?'"), Режим);		
		Возврат;		
	КонецЕсли;	
	
	ДобавитьХарактеристикуФрагментОкончание();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьХарактеристикуФрагмент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтаФорма.Записать();	
	
	ДобавитьХарактеристикуФрагментОкончание();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьХарактеристикуФрагментОкончание()
	
	ОткрытьФорму("ПланВидовХарактеристик.ВидыХарактеристик.ФормаВыбора",,,,,,
		Новый ОписаниеОповещения("ДобавитьХарактеристикуЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьХарактеристикуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    // Выберем вид характеристики.
    ВидХарактеристики = Результат;
    Если ВидХарактеристики = Неопределено Тогда
        Возврат;
    КонецЕсли;	 
    
    // Проверим наличие.
    Если Характеристики.НайтиСтроки(Новый Структура("ВидХарактеристики", ВидХарактеристики)).Количество() > 0 Тогда
        ПоказатьПредупреждение(,НСтр("ru = 'Характеристика уже существует.'", "ru"));
        Возврат;
    КонецЕсли;	 
    
    // Добавим вид характеристики на форму.
    ДобавитьХарактеристикуНаСервере(ВидХарактеристики);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьХарактеристику(Команда)
	
	// Выберем удаляемый вид.
	СписокВидов = Новый СписокЗначений;
	Для каждого ОписаниеХарактеристики Из Характеристики Цикл
		
		ЭлементСпискаВидов               = СписокВидов.Добавить();
		ЭлементСпискаВидов.Значение      = ОписаниеХарактеристики.ПолучитьИдентификатор();
		ЭлементСпискаВидов.Представление = Строка(ОписаниеХарактеристики.ВидХарактеристики);
		
	КонецЦикла;
	СписокВидов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("УдалитьХарактеристикуЗавершение", ЭтотОбъект), 
		НСтр("ru = 'Удалить характеристику'") + ":");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьХарактеристикуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыбранныйЭлемент = Результат;
    
    // Проверим выбор.
    Если ВыбранныйЭлемент = Неопределено Тогда
        Возврат;
    КонецЕсли;	
    
    // Выполним удаление.
    УдалитьХарактеристикуНаСервере(ВыбранныйЭлемент.Значение);

КонецПроцедуры

&НаСервере
Процедура ДобавитьХарактеристикуНаСервере(ВидХарактеристики)
	
	СЛС.ДобавитьХарактеристику(ВидХарактеристики, ЭтаФорма);
	
	УстановитьВидимостьИДоступность();	
	ОбновитьНаименованиеКарточки();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьХарактеристикуНаСервере(Идентификатор)
	
	СЛС.УдалитьХарактеристику(Идентификатор, ЭтаФорма);
	
	УстановитьВидимостьИДоступность();	
	ОбновитьНаименованиеКарточки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьХарактеристики()
	
	СЛС.ЗаписатьХарактеристики(Объект, ЭтаФорма);	
	
	УстановитьВидимостьИДоступность();
	ОбновитьНаименованиеКарточки();
	
КонецПроцедуры

&НаКлиенте
Процедура Подсказка(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", "Характеристики");
	ПараметрыОткрытия.Вставить("КлючПодсказки", "Справочники_Характеристики");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьХарактеристикиПоВидуНоменклатурыНаСервере(ИсточникХарактеристик)
	
	Если ИсточникХарактеристик = НСтр("ru = 'по виду номенклатуры'") Тогда
		СЛС.ЗаполнитьХарактеристикиПоВидуНоменклатуры(Объект);
	Иначе 
		СЛС.ЗаполнитьХарактеристикиПоНоменклатуре(Объект);
	КонецЕсли;
	
	СЛС.ВывестиХарактеристики(Объект, ЭтаФорма);	
	УстановитьВидимостьИДоступность();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьХарактеристикиПоВидуНоменклатурыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатВопроса;
    Если Результат <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
	
	ЭтаФорма.Записать();
	
    Если ДополнительныеПараметры.Свойство("ИсточникХарактеристик") Тогда		
		ЗаполнитьХарактеристикиПоВидуНоменклатурыНаСервере(ДополнительныеПараметры.ИсточникХарактеристик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьХарактеристикиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатВопроса;
    Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	
	ОчиститьХарактеристикиНаСервере();
	
	Если ДополнительныеПараметры.Свойство("ИсточникХарактеристик") Тогда		
		ЗаполнитьХарактеристикиПоВидуНоменклатурыНаСервере(ДополнительныеПараметры.ИсточникХарактеристик);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьХарактеристикиНаСервере()
	
	СЛС.ОчиститьХарактеристики(Объект, ЭтаФорма);	
	
КонецПроцедуры	

&НаСервере
Функция ВычислитьНаСервере(Код)
	
	Возврат Вычислить(Код);
	
КонецФункции

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Объект.ВидНоменклатуры = ВычислитьНаСервере("Объект.Владелец.ВидНоменклатуры");
	УстановитьВидимостьИДоступность();
	ОбновитьНаименованиеКарточки();
	
	// СтандартныеПодсистемы.Свойства.
    ОбновитьЭлементыДополнительныхРеквизитов();
    // Конец СтандартныеПодсистемы.Свойства.
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоинкрементИнвентарногоНомера(Команда)
	
	Если ПустаяСтрока(Объект.ИнвентарныйНомер) Тогда
		Объект.ИнвентарныйНомер = 
			ВычислитьНаСервере("Справочники.КарточкиНоменклатуры.ПолучитьАвтоинкрементИнвентарногоНомера(Объект)");
		ОбновитьНаименованиеКарточки();
		Модифицированность 		= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГарантияМесяцевПриИзменении(Элемент)
	
	ОбновитьНаименованиеКарточки();
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

// Удаляет элемент отбора динамического списка.
//
// Параметры:
//	Список  - обрабатываемый динамический список.
//	ИмяПоля - имя поля компоновки, отбор по которому нужно удалить.
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля)
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементыОтбора.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Устанавливает элемент отбор динамического списка.
//
// Параметры:
//	Список			- обрабатываемый динамический список.
//	ИмяПоля			- имя поля компоновки, отбор по которому нужно установить.
//	ВидСравнения	- вид сравнения отбора, по умолчанию - Равно.
//	ПравоеЗначение 	- значение отбора.
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Изменяет элемент отбора динамического списка.
//
// Параметры:
//	Список         - обрабатываемый динамический список.
//	ИмяПоля        - имя поля компоновки, отбор по которому нужно установить.
//	ВидСравнения   - вид сравнения отбора, по умолчанию - Равно.
//	ПравоеЗначение - значение отбора.
//	Установить     - признак необходимости установить отбор.
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, 
	ВидСравнения = Неопределено)
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Владелец);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомплектацииНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомплектацииНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомплектацииКарточкаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомплектацииКарточкаНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДанныхВлияющихНаНаименование(Элемент)
	
	ОбновитьНаименованиеКарточки();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоНаименованиеПриИзменении(Элемент)
	
	ОбновитьНаименованиеКарточки();
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияПриИзменении(Элемент)
	
	ОбновитьБухгалтерскиеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВводаВЭксплуатациюПриИзменении(Элемент)
	
	ОбновитьБухгалтерскиеПоказатели();
	Если Объект.ДатаВводаВЭксплуатацию <> Дата(1,1,1) И Объект.ГарантияМесяцев <> 0 Тогда
		Объект.ДатаОкончанияГарантии = ДобавитьМесяц(Объект.ДатаВводаВЭксплуатацию, Объект.ГарантияМесяцев);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьПриИзменении(Элемент)
	
	ОбновитьБухгалтерскиеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещение(Команда)
	
	// Формируем перемещение.
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса =
			НСтр("ru = 'Карточка еще не записана.
				|Создать документ ""Перемещение"" возможно только после записи карточки.
				|Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьПеремещениеЗавершение", ЭтотОбъект), ТекстВопроса, 
			РежимДиалогаВопрос.ДаНет);
		Возврат;		
	КонецЕсли;	
	СоздатьПеремещениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещениеЗавершение(Результат,ДополнительныеПараметры)Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;	
	Попытка
		Записать();
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось записать карточку номенклатуры.
                                                                          |%1'"), ОписаниеОшибки()));
		Возврат;
	КонецПопытки;	
	СоздатьПеремещениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещениеФрагмент()	
	
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(Объект.Ссылка,Неопределено);		
	Структура = Новый Структура();	
	Структура.Вставить("МестоХраненияРасхода", СтруктураПараметров.МестоХранения);
	Структура.Вставить("ОрганизацияРасхода", СтруктураПараметров.Организация);
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.Перемещение.Форма.ФормаДокумента", Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписание(Команда)
	
	// Формируем списание.
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса =
			НСтр("ru = 'Карточка еще не записана.
				|Создать документ ""Списание"" возможно только после записи карточки.
				|Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьСписаниеЗавершение", ЭтотОбъект), ТекстВопроса, 
			РежимДиалогаВопрос.ДаНет);
		Возврат;		
	КонецЕсли;	
	СоздатьСписаниеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеФрагмент()	
	
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(Объект.Ссылка,
		Неопределено);
	Структура = Новый Структура();	
	Структура.Вставить("МестоХранения", СтруктураПараметров.МестоХранения);
	Структура.Вставить("Организация", СтруктураПараметров.Организация);
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.Списание.Форма.ФормаДокумента", Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеЗавершение(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;	
	Попытка
		Записать();
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось записать карточку номенклатуры.
                                                                          |%1'"), ОписаниеОшибки()));
		Возврат;
	КонецПопытки;	
	СоздатьСписаниеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступление(Команда)
	
	// Формируем списание.
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса =
			НСтр("ru = 'Карточка еще не записана.
				|Создать документ ""Поступление"" возможно только после записи карточки.
				|Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьПоступлениеЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		Возврат;		
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда			
		ПоказатьПредупреждение(, НСтр("ru = 'Документ ""Поступление"" уже был создан ранее.'"));
		Возврат;
	КонецЕсли;	
	СоздатьПоступлениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеФрагмент()
	
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(Объект.Ссылка);
	Структура = Новый Структура();		
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.Поступление.Форма.ФормаДокумента", Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеЗавершение(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;	
	Попытка
		Записать();
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось записать карточку номенклатуры.
                                                                          |%1'"), ОписаниеОшибки()));
		Возврат;
	КонецПопытки;	
	СоздатьПоступлениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнвентаризацию(Команда)
	
	// Формируем списание.
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса =
			НСтр("ru = 'Карточка еще не записана.
				|Создать документ ""Инвентаризация"" возможно только после записи карточки.
				|Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьИнвентаризациюЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		Возврат;		
	КонецЕсли;	
	СоздатьИнвентаризациюФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнвентаризациюФрагмент()
	
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(Объект.Ссылка);
	Структура = Новый Структура();	
	Структура.Вставить("МестоХранения", СтруктураПараметров.МестоХранения);
	Структура.Вставить("Организация", СтруктураПараметров.Организация);
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.Инвентаризация.Форма.ФормаДокумента", Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнвентаризациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;	
	Попытка
		Записать();
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось записать карточку номенклатуры.
                                                                          |%1'"), ОписаниеОшибки()));
		Возврат;
	КонецПопытки;	
	СоздатьИнвентаризациюФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбслуживание(Команда)
	
	// Формируем списание.
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса =
			НСтр("ru = 'Карточка еще не записана.
				|Создать документ ""Начало обслуживания"" возможно только после записи карточки.
				|Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("НачатьОбслуживаниеЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		Возврат;		
	КонецЕсли;	
	НачатьОбслуживаниеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбслуживаниеФрагмент()
	
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(Объект.Ссылка);
	Структура = Новый Структура();	
	Структура.Вставить("МестоХранения", СтруктураПараметров.МестоХранения);
	Структура.Вставить("Организация", СтруктураПараметров.Организация);
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.НачалоОбслуживания.Форма.ФормаДокумента", Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбслуживаниеЗавершение(Результат,ДополнительныеПараметры)Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;	
	Попытка
		Записать();
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось записать карточку номенклатуры.
                                                                          |%1'"), ОписаниеОшибки()));
		Возврат;
	КонецПопытки;	
	НачатьОбслуживаниеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОбслуживание(Команда)
	
	// Формируем.
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса =
			НСтр("ru = 'Карточка еще не записана.
				|Создать документ ""Окончание обслуживания"" возможно только после записи карточки.
				|Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакончитьОбслуживаниеЗавершение", ЭтотОбъект), ТекстВопроса, 
			РежимДиалогаВопрос.ДаНет);
		Возврат;		
	КонецЕсли;	
	ЗакончитьОбслуживаниеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОбслуживаниеФрагмент()
	
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(Объект.Ссылка);
	Структура = Новый Структура();	
	Структура.Вставить("МестоХранения", СтруктураПараметров.МестоХранения);
	Структура.Вставить("Организация", СтруктураПараметров.Организация);
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.ОкончаниеОбслуживания.Форма.ФормаДокумента", Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОбслуживаниеЗавершение(Результат,ДополнительныеПараметры)Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;	
	Попытка
		Записать();
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось записать карточку номенклатуры.
                                                                          |%1'"), ОписаниеОшибки()));
		Возврат;
	КонецПопытки;	
	ЗакончитьОбслуживаниеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПриИзменении(Элемент)
	
	ОбновитьНаименованиеКарточки();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеКарточекНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СостояниеКарточекНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.Свойство("Регистратор") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусыКарточкиНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанныеСтатус	 = Элементы.СтатусыКарточкиНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанныеСтатус = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Период", 				 ТекущиеДанныеСтатус.Дата);
	СтруктураЗаписи.Вставить("Статус", 				 ТекущиеДанныеСтатус.Статус);
	СтруктураЗаписи.Вставить("Пользователь", 		 ТекущиеДанныеСтатус.Пользователь);
	СтруктураЗаписи.Вставить("Комментарий", 		 ТекущиеДанныеСтатус.Комментарий);
	СтруктураЗаписи.Вставить("КарточкаНоменклатуры", ТекущиеДанныеСтатус.КарточкаНоменклатуры);	
	
	ПараметрыФормыЗаписи = Новый Структура;
	ПараметрыФормыЗаписи.Вставить("ФормаТолькоПросмотр",  Истина);
	ПараметрыФормыЗаписи.Вставить("СтруктураЗаписи",      СтруктураЗаписи);	
	ОткрытьФорму("РегистрСведений.СтатусыКарточекНоменклатуры.ФормаЗаписи", ПараметрыФормыЗаписи, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ШагКорректировкиВеса > 1 Тогда		
		
		СтандартнаяОбработка = Ложь;
		Если Направление = 1 Тогда
			Объект.Вес = Объект.Вес + ШагКорректировкиВеса;
		Иначе
			Объект.Вес = Объект.Вес - ШагКорректировкиВеса;
		КонецЕсли;	
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ВнешнийВидФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаСервере
// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьИДоступность()
	
	Элементы.ГруппаЛицензияИОбновления.Видимость = ЗначениеЗаполнено(Объект.Владелец.ВидНоменклатуры)
		И (Объект.Владелец.ВидНоменклатуры.ТипВидаНоменклатуры = Перечисления.ТипыВидовНоменклатуры.ПрограммноеОбеспечение);
		
	Если Элементы.ГруппаЛицензияИОбновления.Видимость Тогда
		
		Элементы.ДатаОкончанияЛицензии.Доступность				= Объект.ЕстьОграниченияПоСрокуДействияЛицензии;
		Элементы.ДатаНачалаПодпискиОбновлений.Доступность		= Объект.ЕстьОграниченияПоСрокуДействияОбновлений;
		Элементы.ДатаОкончанияПодпискиОбновлений.Доступность	= Объект.ЕстьОграниченияПоСрокуДействияОбновлений;
		Элементы.КоличествоПользователейЛицензии.Доступность	= Объект.ЕстьОграниченияПоКоличествуПользователейЛицензии;
		Элементы.ПорядковыйНомер.Заголовок						= НСтр("ru = 'Порядковый номер лицензии'");
		Элементы.ПорядковыйНомер.Подсказка						= НСтр("ru = 'Порядковый номер лицензии'");
		
	КонецЕсли;
	
	Элементы.ДатаОкончанияГарантии.Видимость = ЗначениеЗаполнено(Объект.ДокументПоступления) 
		И (Объект.ГарантияМесяцев <> 0);
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Характеристики.ВидХарактеристики) КАК КоличествоХарактеристик
		|ИЗ
		|	РегистрСведений.Характеристики КАК Характеристики
		|ГДЕ
		|	Характеристики.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Элементы.ГруппаХарактеристики.Заголовок = "Характеристики";
	Если Выборка.Следующий() Тогда
		Если Выборка.КоличествоХарактеристик > 0 Тогда
			Элементы.ГруппаХарактеристики.Заголовок = Элементы.ГруппаХарактеристики.Заголовок 
				+ " (" + Выборка.КоличествоХарактеристик + ")";
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Владелец.ВидНоменклатуры) Тогда
		Элементы.ГруппаШтрихкоды.Видимость = Объект.Владелец.ВидНоменклатуры.МожетИметьШтрихкод;		
	Иначе
		Элементы.ГруппаШтрихкоды.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.ГруппаШтрихкоды.Видимость Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ШтрихкодыНоменклатуры.Штрихкод) КАК КоличествоШтрихкодов
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Номенклатура = &Объект";
		
		Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Элементы.ГруппаШтрихкоды.Заголовок = НСтр("ru = 'Штрихкоды'");
		Если Выборка.Следующий() Тогда
			Если Выборка.КоличествоШтрихкодов > 0 Тогда
				Элементы.ГруппаШтрихкоды.Заголовок = Элементы.ГруппаШтрихкоды.Заголовок 
					+ " (" + Выборка.КоличествоШтрихкодов + ")";
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
	
	// Видимость инвентарного номера.
	Если ЗначениеЗаполнено(Объект.Владелец.ВидНоменклатуры) Тогда
		Элементы.ИнвентарныйНомер.Видимость = Объект.Владелец.ВидНоменклатуры.МожетИметьИнвентарныйНомер;
		Элементы.СерийныйНомер.Видимость 	= Объект.Владелец.ВидНоменклатуры.МожетИметьСерийныйНомер;
		Элементы.СетевыеИнтерфейсы.Видимость= Объект.Владелец.ВидНоменклатуры.МожетИметьIPАдрес;
		Элементы.ГруппаОКОФ.Видимость 	    = Объект.Владелец.ВидНоменклатуры.МожетИметьКодОКОФ;
	Иначе
		Элементы.ИнвентарныйНомер.Видимость = Ложь;
		Элементы.СерийныйНомер.Видимость 	= Ложь;
		Элементы.СетевыеИнтерфейсы.Видимость= Ложь;
		Элементы.ГруппаОКОФ.Видимость	    = Ложь;
	КонецЕсли;
	
	Элементы.АвтоинкрементИнвентарногоНомера.Видимость = Элементы.ИнвентарныйНомер.Видимость;	
	Элементы.Наименование.ТолькоПросмотр 			= Объект.АвтоНаименование;
	Элементы.КомандыХарактеристик.Доступность		= НЕ Объект.Ссылка.Пустая();
	Элементы.ДекорацияХарактеристик.Видимость		= НЕ Элементы.КомандыХарактеристик.Доступность;
	
	Если ЗначениеЗаполнено(Объект.Владелец.ВидНоменклатуры) Тогда
		Элементы.ГруппаСостояниеКарточки.Видимость = Объект.Владелец.ВидНоменклатуры.МожетИметьСтатус;
		Если НЕ Объект.Владелец.ВидНоменклатуры.ВестиИсториюИзмененияСтатусов Тогда
			Элементы.ОчиститьИсторию.Заголовок = НСтр("ru = 'Очистить статус'");			
		КонецЕсли;	
	Иначе
		Элементы.ГруппаСостояниеКарточки.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СтраницаЗаметки.Картинка = ?(ПустаяСтрока(Объект.Заметки), Новый Картинка, БиблиотекаКартинок.Комментарий);
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура ОбновитьИзображение()
	
	АдресКартинки = ПолучитьНавигационнуюСсылку(Объект.Владелец.Ссылка, "Картинка");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКарточки()
	
	УправлениеITОтделом8УФ.ЗаполнитьНаименованиеКарточкиПоВыражению(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомплектациюНаСервере(Комплект)
	
	ДЗ = ДанныеФормыВЗначение(ДеревоКомплектации, Тип("ДеревоЗначений"));
	ДЗ.Строки.Очистить();
	
	Если Комплект = Неопределено ИЛИ Комплект.Пустая() 
		ИЛИ НЕ Комплект.Владелец.ВидНоменклатуры.МожетИметьКомплектующие Тогда
		ЗначениеВДанныеФормы(ДЗ, ДеревоКомплектации);			
		Элементы.ГруппаКомплектующие.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КомплектацияОстатки.Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|			ТОГДА КомплектацияОстатки.Номенклатура.Владелец
		|		ИНАЧЕ КомплектацияОстатки.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КомплектацияОстатки.Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|			ТОГДА КомплектацияОстатки.Номенклатура
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КарточкиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК КарточкаНоменклатуры,
		|	ВЫБОР
		|		КОГДА КомплектацияОстатки.Партия = &Комплект
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КарточкиНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ КомплектацияОстатки.Партия
		|	КОНЕЦ КАК Партия,
		|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
		|	КомплектацияОстатки.СуммаОстаток КАК Сумма,
		|	КомплектацияОстатки.Номенклатура.ВидНоменклатуры.НавСсылка КАК НавСсылка
		|ИЗ
		|	РегистрНакопления.Комплектация.Остатки(&ДатаКон, Комплект = &Комплект) КАК КомплектацияОстатки";
	
	Запрос.УстановитьПараметр("Комплект", Комплект);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТЗ = РезультатЗапроса.Выгрузить();
		
		Для каждого Строки Из ТЗ Цикл
			Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
				Строки.КарточкаНоменклатуры = 
					УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Строки.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
		УправлениеITОтделом8УФ.ВывестиДеревоНоменклатуры(ДЗ, ТЗ);
		
		// Сортировка ДЗ.
		ДЗ.Строки.Сортировать("Номенклатура,КарточкаНоменклатуры", Истина);
		УправлениеITОтделом8УФ.ОбновитьКлючиСтрокВДеревеЗначений(ДЗ);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ДЗ, ДеревоКомплектации);	
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьБухгалтерскиеПоказатели()
	
	Если ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		
		ДокументПоступленияВидимость 			 			= НЕ СтрНайти(Строка(Объект.ДокументПоступления), 
			"Объект не найден") > 0;
		Элементы.ДокументПоступления.Видимость   			= ДокументПоступленияВидимость;
		Элементы.ДокументПоступленияДоступЗакрыт.Видимость 	= Не ДокументПоступленияВидимость;
		
		УстановитьПривилегированныйРежим(Истина);		
		
		ДатаНачала    = ?(Объект.ДатаВводаВЭксплуатацию = Дата(1, 1, 1), Объект.ДокументПоступления.Дата, Объект.ДатаВводаВЭксплуатацию); 
		ДатаОкончания = ТекущаяДатаСеанса();
		
		// Если было списание.
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СостояниеКарточекНоменклатурыСрезПоследних.Состояние,
			|	СостояниеКарточекНоменклатурыСрезПоследних.Регистратор
			|ИЗ
			|	РегистрСведений.СостояниеКарточекНоменклатуры.СрезПоследних(, КарточкаНоменклатуры = &КарточкаНоменклатуры) КАК СостояниеКарточекНоменклатурыСрезПоследних";
			
		Запрос.УстановитьПараметр("КарточкаНоменклатуры", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Состояние = Справочники.СостояниеКарточекНоменклатуры.Списано Тогда
				ДатаОкончания = Выборка.Регистратор.Дата;
			КонецЕсли;
		КонецЕсли;
		
		СрокЭксплуатации = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / 86400;
		Если Объект.СрокПолезногоИспользования <> 0 Тогда
			ФактическийИзносПроцентов	= СрокЭксплуатации / (Объект.СрокПолезногоИспользования / 12) / 365 * 100;
			ФактическийИзносСумма		= ?(Объект.ПервоначальнаяСтоимость * ФактическийИзносПроцентов / 100 >= Объект.ПервоначальнаяСтоимость, Объект.ПервоначальнаяСтоимость, Объект.ПервоначальнаяСтоимость * ФактическийИзносПроцентов / 100);
			Если ФактическийИзносПроцентов < 50 Тогда
				Элементы.ФактическийИзносПроцентов.ЦветТекста = WebЦвета.Зеленый;
			ИначеЕсли ФактическийИзносПроцентов >= 50 И ФактическийИзносПроцентов < 80 Тогда
				Элементы.ФактическийИзносПроцентов.ЦветТекста = WebЦвета.Синий;
			ИначеЕсли ФактическийИзносПроцентов >= 80 И ФактическийИзносПроцентов < 100 Тогда
				Элементы.ФактическийИзносПроцентов.ЦветТекста = WebЦвета.ТемноКрасный;
			Иначе
				Элементы.ФактическийИзносПроцентов.ЦветТекста = WebЦвета.Красный;
			КонецЕсли;
			ОстаточнаяСтоимость = ?(Объект.ПервоначальнаяСтоимость - ФактическийИзносСумма <= 0, 0, 
				Объект.ПервоначальнаяСтоимость - ФактическийИзносСумма);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДокументы()
	
	Документы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КарточкаНоменклатуры.Ссылка
		|ИЗ
		|	КритерийОтбора.КарточкаНоменклатуры(&КарточкаНоменклатуры) КАК КарточкаНоменклатуры
		|ГДЕ
		|	&ЭтоНовыйОбъект = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("КарточкаНоменклатуры", Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоНовыйОбъект", Объект.Ссылка.Пустая());
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
		ТаблицаДокументов.Колонки.Добавить("Состояние");
		
		Запрос.Текст =		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостояниеКарточекНоменклатуры.Регистратор,
		|	СостояниеКарточекНоменклатуры.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостояниеКарточекНоменклатуры КАК СостояниеКарточекНоменклатуры
		|ГДЕ
		|	СостояниеКарточекНоменклатуры.КарточкаНоменклатуры = &КарточкаНоменклатуры";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НайденныеСтроки = ТаблицаДокументов.Найти(Выборка.Регистратор, "Ссылка");
			Если НайденныеСтроки <> Неопределено Тогда
				НайденныеСтроки.Состояние = Выборка.Состояние;			
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого Строки Из ТаблицаДокументов Цикл
			НоваяСтрока = Документы.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
			НоваяСтрока.Дата = Строки.Ссылка.Дата;
			Если Строки.Ссылка.Проведен	Тогда
				НоваяСтрока.ИндексКартинки = 14;
			ИначеЕсли Строки.Ссылка.ПометкаУдаления Тогда			
				НоваяСтрока.ИндексКартинки = 13;
			Иначе НоваяСтрока.ИндексКартинки = 12;
			КонецЕсли;
			Если Строки.Состояние = Справочники.СостояниеКарточекНоменклатуры.ВРабочемСостоянии Тогда
				НоваяСтрока.КартинкаСостояния = БиблиотекаКартинок.сстВРабочемСостоянии;			
			ИначеЕсли Строки.Состояние = Справочники.СостояниеКарточекНоменклатуры.ВНеРабочемСостоянии Тогда
				НоваяСтрока.КартинкаСостояния = БиблиотекаКартинок.сстВНеРабочемСостоянии;
			ИначеЕсли Строки.Состояние = Справочники.СостояниеКарточекНоменклатуры.Отремонтировано Тогда
				НоваяСтрока.КартинкаСостояния = БиблиотекаКартинок.сстОтремонтировано;
			ИначеЕсли Строки.Состояние = Справочники.СостояниеКарточекНоменклатуры.Продано Тогда
				НоваяСтрока.КартинкаСостояния = БиблиотекаКартинок.сстПродано;
			ИначеЕсли Строки.Состояние = Справочники.СостояниеКарточекНоменклатуры.Списано Тогда
				НоваяСтрока.КартинкаСостояния = БиблиотекаКартинок.сстСписано;	
			КонецЕсли;
		КонецЦикла;
		
		Документы.Сортировать("Дата Возр");
		
	КонецЕсли;			
	
КонецПроцедуры	

&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные 		 = Элементы.Документы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыКарточки()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыКарточекНоменклатуры.Период КАК Дата,
		|	СтатусыКарточекНоменклатуры.КарточкаНоменклатуры,
		|	СтатусыКарточекНоменклатуры.Статус,
		|	СтатусыКарточекНоменклатуры.Пользователь,
		|	СтатусыКарточекНоменклатуры.Комментарий
		|ИЗ
		|	РегистрСведений.СтатусыКарточекНоменклатуры КАК СтатусыКарточекНоменклатуры
		|ГДЕ
		|	СтатусыКарточекНоменклатуры.КарточкаНоменклатуры = &КарточкаНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Запрос.УстановитьПараметр("КарточкаНоменклатуры", Объект.Ссылка);
	
	
	РезультатЗапроса 	   = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтатусыКарточкиНоменклатуры.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = СтатусыКарточкиНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		Попытка
			НоваяСтрока.КартинкаСтатуса = ВыборкаДетальныеЗаписи.Статус.Картинка.Получить();
		Исключение
		КонецПопытки;	
	КонецЦикла;

КонецПроцедуры	

&НаСервере
Процедура ОчиститьИсториюСтатусовНаСервере()
	
	НаборЗаписей = РегистрыСведений.СтатусыКарточекНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КарточкаНоменклатуры.Установить(Объект.Ссылка);	
	НаборЗаписей.Записать(Истина);	
	ЗаполнитьСтатусыКарточки();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТекущиеСведения()
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Элементы.ГруппаТекущиеСведения.Видимость = Ложь;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДатаАктуальности = ТекущаяДатаСеанса();
		
		Запрос = Новый Запрос();
		
		// Смотрим есть ли в комплектах и получем комплект.
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КомплектацияОстатки.Комплект КАК Комплект
			|ИЗ
			|	РегистрНакопления.Комплектация.Остатки(&ДатаАктуальности, Номенклатура = &КарточкаНоменклатуры) КАК КомплектацияОстатки";
		
		Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);		
		Запрос.УстановитьПараметр("КарточкаНоменклатуры", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		ПараметрКарточка = Объект.Ссылка;
		Если Выборка.Следующий() Тогда
			ПараметрКарточка = Выборка.Комплект;
		КонецЕсли;
		
		// Смотрим где находится.
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОстаткиОстатки.Организация КАК Организация,
			|	ОстаткиОстатки.МестоХранения КАК МестоХранения
			|ИЗ
			|	РегистрНакопления.Остатки.Остатки(&ДатаАктуальности, Номенклатура = &КарточкаНоменклатуры) КАК ОстаткиОстатки";
		
		Запрос.УстановитьПараметр("КарточкаНоменклатуры", ПараметрКарточка);
		
		ТекущаяОрганизация 			= Справочники.Организации.ПустаяСсылка();
		ТекущееМестоХранения 		= Справочники.МестаХранения.ПустаяСсылка();
		ТекущийОтветственный 		= Справочники.Сотрудники.ПустаяСсылка();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекущаяОрганизация 		= Выборка.Организация;
			ТекущееМестоХранения 	= Выборка.МестоХранения;
			ТекущийОтветственный 	= УправлениеITОтделом8УФ.ПолучитьОтветственногоСотрудникаМестаХранения(ДатаАктуальности, 
				ТекущееМестоХранения);
		КонецЕсли;
		
		Элементы.ГруппаТекущиеСведения.Видимость = ЗначениеЗаполнено(ТекущееМестоХранения);
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
