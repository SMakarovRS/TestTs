
#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВестиУчетПоКарточкамНоменклатуры = Истина;
		Объект.ТипВидаНоменклатуры = Перечисления.ТипыВидовНоменклатуры.Комплектующая;
	КонецЕсли;	
	
	ОбновитьИзображение();
	СЛС.ВывестиХарактеристики(Объект, ЭтаФорма);	
	УстановитьВидимостьИДоступность();
	ВестиУчетПоКарточкамНоменклатурыДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	ЗаписатьХарактеристики();	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписьВидаНоменклатуры", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьКартинкуИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзображениеИзНабораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат <> Неопределено Тогда
        Адрес = ПоместитьВоВременноеХранилище(Результат);
        ПоместитьФайлОбъекта(Адрес);
        Элементы.АдресКартинки.Обновить();
		ОбновитьИзображение();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоКарточкамНоменклатурыПриИзменении(Элемент)
	
	Если Объект.ВестиУчетПоКарточкамНоменклатуры И Объект.СписыватьПриПоступлении Тогда 
		Объект.СписыватьПриПоступлении = Ложь;
	КонецЕсли;
	
	Если Не Объект.ВестиУчетПоКарточкамНоменклатуры Тогда
		Объект.МожетИметьИнвентарныйНомер 		= Ложь;
		Объект.МожетИметьСерийныйНомер 			= Ложь;
		Объект.МожетИметьКомплектующие			= Ложь;
		Объект.МожетИметьСтатус					= Ложь;
		Объект.ВестиИсториюИзмененияСтатусов    = Ложь;
	КонецЕсли;	
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СписыватьПриПоступленииПриИзменении(Элемент)
	
	Если Объект.СписыватьПриПоступлении Тогда
		Объект.ВестиУчетПоКарточкамНоменклатуры 				= Ложь;
		Элементы.ВестиУчетПоКарточкамНоменклатуры.Доступность 	= Ложь;
	Иначе
		Элементы.ВестиУчетПоКарточкамНоменклатуры.Доступность 	= Истина;
	КонецЕсли;	
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура МожетИметьСтатусПриИзменении(Элемент)
	
	Если Объект.МожетИметьСтатус Тогда
		Элементы.ВестиИсториюИзмененияСтатусов.Доступность = Истина;
	Иначе
		Если ЕстьЗаписиВРегистреСтатусыКарточек() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОтключитьМожетИметьСтатус", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'По данному виду номенклатуры есть записи о статусах карточек номенклатуры. 
														  |После снятия флага все записи о статусах по этим карточкам будут удалены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;	
		Объект.ВестиИсториюИзмененияСтатусов 			   = Ложь;
		Элементы.ВестиИсториюИзмененияСтатусов.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОтключитьМожетИметьСтатус(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Объект.МожетИметьСтатус = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ВидНоменклатуры", Объект.Ссылка);
	ОчиститьИсториюПоВидуНоменклатурыНаСервере(СтруктураПараметров);
	Объект.ВестиИсториюИзмененияСтатусов 			   = Ложь;
	Элементы.ВестиИсториюИзмененияСтатусов.Доступность = Ложь;
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиИсториюИзмененияСтатусовПриИзменении(Элемент)
	
	Если НЕ Объект.ВестиИсториюИзмененияСтатусов Тогда
		Если ЕстьЗаписиВРегистреСтатусыКарточек() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОтключитьИсториюИзмененияСтатусов", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'По данному виду номенклатуры есть записи истории изменения статусов карточек номенклатуры. 
														   |После снятия флага вся история по этим карточкам будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОтключитьИсториюИзмененияСтатусов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Объект.ВестиИсториюИзмененияСтатусов = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ВидНоменклатуры, ТолькоИстория", Объект.Ссылка, Истина);
	ОчиститьИсториюПоВидуНоменклатурыНаСервере(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ОчиститьИсториюПоВидуНоменклатурыНаСервере(СтруктураПараметров)	
	
	Возврат РегистрыСведений.СтатусыКарточекНоменклатуры.ОчиститьИсториюПоВидуНоменклатуры(СтруктураПараметров);
	
КонецФункции

&НаСервере
Функция ЕстьЗаписиВРегистреСтатусыКарточек()
	
	Результат = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусыКарточекНоменклатуры.КарточкаНоменклатуры
		|ИЗ
		|	РегистрСведений.СтатусыКарточекНоменклатуры КАК СтатусыКарточекНоменклатуры
		|ГДЕ
		|	СтатусыКарточекНоменклатуры.КарточкаНоменклатуры.Владелец.ВидНоменклатуры = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.Ссылка);	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();	
	Результат 			   = ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура МожетИметьИнвентарныйНомерПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура МожетИметьСерийныйНомерПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРодительскиеВиды

&НаКлиенте
Процедура РодительскиеВидыПослеУдаления(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РодительскиеВидыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтатусы

&НаКлиенте
Процедура СтатусыКарточкиНоменклатурыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанныеСтрока = Элементы.СтатусыКарточкиНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанныеСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийСтатус = ТекущиеДанныеСтрока.Статус;
	ОтборСтатус   = Новый Структура;
	ОтборСтатус.Вставить("Статус", ТекущийСтатус);
	МассивСтрок   = Объект.СтатусыКарточкиНоменклатуры.НайтиСтроки(ОтборСтатус);
	Если МассивСтрок.Количество() > 1 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Выбранный статус ""%1"" уже есть в списке'"), ТекущийСтатус));
		ТекущиеДанныеСтрока.Статус = ПредопределенноеЗначение("Справочник.СтатусыКарточекНоменклатуры.ПустаяСсылка");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	ОчиститьИзображениеНаСервере();	
	ОбновитьИзображение();
	Элементы.АдресКартинки.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзображениеИзФайла(Команда)
	
	ВыбратьКартинкуИзФайла();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ХАРАКТЕРИСТИКАМИ

&НаКлиенте
Процедура ДобавитьХарактеристику(Команда)
	
	ВидХарактеристики = Неопределено;
	
	ОткрытьФорму("ПланВидовХарактеристик.ВидыХарактеристик.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ДобавитьХарактеристикуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьХарактеристикуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    // Выберем вид характеристики.
    ВидХарактеристики = Результат;
    Если ВидХарактеристики = Неопределено Тогда
        Возврат;
    КонецЕсли;	 
    
    // Проверим наличие.
    Если Характеристики.НайтиСтроки(
        Новый Структура("ВидХарактеристики", ВидХарактеристики)).Количество() > 0 Тогда
        ПоказатьПредупреждение( ,НСтр("ru = 'Характеристика уже существует'", "ru"));
        Возврат;    
    КонецЕсли;	 
    
    // Добавим вид характеристики на форму.	
    ДобавитьХарактеристикуНаСервере(ВидХарактеристики);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьХарактеристику(Команда)
	
	// Выберем удаляемый вид.
	СписокВидов = Новый СписокЗначений;
	Для каждого ОписаниеХарактеристики Из Характеристики Цикл
		
		ЭлементСпискаВидов               = СписокВидов.Добавить();
		ЭлементСпискаВидов.Значение      = ОписаниеХарактеристики.ПолучитьИдентификатор();
		ЭлементСпискаВидов.Представление = Строка(ОписаниеХарактеристики.ВидХарактеристики);
		
	КонецЦикла;
	ВыбранныйЭлемент = Неопределено;

	СписокВидов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("УдалитьХарактеристикуЗавершение", ЭтотОбъект), НСтр("ru = 'Удалить характеристику'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьХарактеристикуЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    // Проверим выбор.
    Если ВыбранныйЭлемент = Неопределено Тогда
        Возврат;
    КонецЕсли;	
    
    // Выполним удаление.
    УдалитьХарактеристикуНаСервере(ВыбранныйЭлемент.Значение);

КонецПроцедуры

&НаКлиенте
Процедура Подсказка(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", "Характеристики");
	ПараметрыОткрытия.Вставить("КлючПодсказки", "Справочники_Характеристики");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзображениеИзНабора(Команда)
	
	Результат = Неопределено;	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзображенияИзНабора", Новый Структура("ПрефиксКартинок", "нн"),,,,, Новый ОписаниеОповещения("ВыбратьИзображениеИзНабораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьИДоступность(Знач ИсточникОбновления = "Все")
	
	Если ИсточникОбновления = "Характеристики" Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(Характеристики.ВидХарактеристики) КАК КоличествоХарактеристик
			|ИЗ
			|	РегистрСведений.Характеристики КАК Характеристики
			|ГДЕ
			|	Характеристики.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Элементы.ГруппаХарактеристики.Заголовок = НСтр("ru = 'Характеристики'");
		Если Выборка.Следующий() Тогда
			Если Выборка.КоличествоХарактеристик > 0 Тогда
				Элементы.ГруппаХарактеристики.Заголовок = Элементы.ГруппаХарактеристики.Заголовок + " (" + Выборка.КоличествоХарактеристик + ")";
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаРодительскиеВиды.Заголовок = НСтр("ru = 'Родительские виды'");
	Если Объект.РодительскиеВиды.Количество() > 0 Тогда
		Элементы.ГруппаРодительскиеВиды.Заголовок = Элементы.ГруппаРодительскиеВиды.Заголовок + " (" + Объект.РодительскиеВиды.Количество() + ")";
	КонецЕсли;
	
	Элементы.ГруппаСтатусыКарточкиНоменклатуры.Заголовок = НСтр("ru = 'Статусы'");
	Если Объект.СтатусыКарточкиНоменклатуры.Количество() > 0 Тогда
		Элементы.ГруппаСтатусыКарточкиНоменклатуры.Заголовок = Элементы.ГруппаСтатусыКарточкиНоменклатуры.Заголовок + " (" + Объект.СтатусыКарточкиНоменклатуры.Количество() + ")";
	КонецЕсли;
	
	мВестиУчетПоКарточкамНоменклатуры								= Объект.ВестиУчетПоКарточкамНоменклатуры;
	Элементы.МожетИметьСерийныйНомер.Доступность 					= мВестиУчетПоКарточкамНоменклатуры;
	Элементы.МожетИметьИнвентарныйНомер.Доступность 				= мВестиУчетПоКарточкамНоменклатуры;
	Элементы.МожетИметьКомплектующие.Доступность 					= мВестиУчетПоКарточкамНоменклатуры;
	Элементы.СписыватьПриПоступлении.Доступность 					= Не мВестиУчетПоКарточкамНоменклатуры;	
	Элементы.МожетИметьIPАдрес.Доступность 							= мВестиУчетПоКарточкамНоменклатуры;
	Элементы.МожетИметьСтатус.Доступность 							= мВестиУчетПоКарточкамНоменклатуры;
    Элементы.ВестиИсториюИзмененияСтатусов.Доступность 				= Объект.МожетИметьСтатус;
	Элементы.КомандыХарактеристик.Доступность						= НЕ Объект.Ссылка.Пустая();
	Элементы.ДекорацияХарактеристик.Видимость						= НЕ Элементы.КомандыХарактеристик.Доступность;
	Элементы.ГруппаСтатусыКарточкиНоменклатуры.Видимость  			= Объект.МожетИметьСтатус;
	
	Элементы.УникальностьИнвентарногоНомера.Доступность 			= Объект.МожетИметьИнвентарныйНомер;
	Элементы.УникальностьСерийногоНомера.Доступность 				= Объект.МожетИметьСерийныйНомер;

КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
// Процедура устанавливает возможность менять параметр Вести учет по карточкам номенклатуры.
// В зависимости от того используется ли где то этот вид номенклатуры.
Процедура ВестиУчетПоКарточкамНоменклатурыДоступность()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Остатки.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрНакопления.Остатки КАК Остатки
		|ГДЕ
		|	Остатки.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.Ссылка);
	НетОстатков = Запрос.Выполнить().Пустой();
	Элементы.ВестиУчетПоКарточкамНоменклатуры.Доступность 	= НетОстатков И НЕ Объект.СписыватьПриПоступлении;
	Элементы.СписыватьПриПоступлении.Доступность 			= НетОстатков И НЕ Объект.ВестиУчетПоКарточкамНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьИзображениеНаСервере()
	
	ЭлементСправочника = РеквизитФормыВЗначение("Объект");
	ЭлементСправочника.Картинка = Неопределено;
	ЭлементСправочника.Записать();
	Модифицированность = Ложь;
	ЗначениеВРеквизитФормы(ЭлементСправочника, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИзображение()
	
	АдресКартинки = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "Картинка");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзФайла()
	
	Перем ВыбранноеИмя;
	Перем АдресВременногоХранилища;

	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Фильтр = УправлениеITОтделом8УФКлиентСервер.ПолучитьФильтрИзображений();
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите изображение'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ВыбранноеИмя = ДиалогОткрытияФайла.ПолноеИмяФайла;
			НачатьПомещениеФайла(Новый ОписаниеОповещения("ВыбратьКартинкуИзФайлаЗавершение", ЭтотОбъект, Новый Структура("АдресВременногоХранилища", АдресВременногоХранилища)), АдресВременногоХранилища, ВыбранноеИмя,Ложь,);	
		КонецЕсли;
	Иначе		
		ПоказатьПредупреждение(,НСтр("ru = 'Данная возможность недоступна, так как не подключено расширение работы с файлами.'", "ru"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзФайлаЗавершение(Результат, Адрес, ВыбранноеИмя, ДополнительныеПараметры) Экспорт
    
    Если Результат Тогда
        ПоместитьФайлОбъекта(Адрес);
        Элементы.АдресКартинки.Обновить();
		ОбновитьИзображение();
    КонецЕсли;

КонецПроцедуры

// Процедура извлекает данные объекта из временного хранилища, 
// производит модификацию элемента справочника и записывает его.
// 
// Параметры: 
//  АдресВременногоХранилища - Строка - адрес временного хранилища. 
// 
// Возвращаемое значение: 
//  Нет.
&НаСервере
Процедура ПоместитьФайлОбъекта(АдресВременногоХранилища)
	
	ЭлементСправочника = РеквизитФормыВЗначение("Объект");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ЭлементСправочника.Картинка = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных());
	ЭлементСправочника.Записать();
	Модифицированность = Ложь;
	УдалитьИзВременногоХранилища(АдресВременногоХранилища);
	ЗначениеВРеквизитФормы(ЭлементСправочника, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьХарактеристикуНаСервере(ВидХарактеристики)
	
	СЛС.ДобавитьХарактеристику(ВидХарактеристики, ЭтаФорма);
	УстановитьВидимостьИДоступность("Характеристики");
	
КонецПроцедуры	

&НаСервере
Процедура УдалитьХарактеристикуНаСервере(Идентификатор)
	
	СЛС.УдалитьХарактеристику(Идентификатор, ЭтаФорма);		
	УстановитьВидимостьИДоступность("Характеристики");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьХарактеристики()
	
	СЛС.ЗаписатьХарактеристики(Объект, ЭтаФорма);	
	УстановитьВидимостьИДоступность("Характеристики");
	
КонецПроцедуры

#КонецОбласти
