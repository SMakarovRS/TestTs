#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ДляВызоваИзДругихПодсистем

#Область Взаимодействия
////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Взаимодействия.

// Возвращает контакты.
// 
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПоКонтактам(ТекстВременнаяТаблица = "", Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить,"ВЫБРАТЬ РАЗЛИЧНЫЕ","ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ");
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	ПервичныеДокументы.Контрагент КАК Контакт " + ТекстВременнаяТаблица + "
	|ИЗ
	|	Справочник.ПервичныеДокументы КАК ПервичныеДокументы
	|ГДЕ
	|	ПервичныеДокументы.Ссылка = &Предмет
	|	И (НЕ ПервичныеДокументы.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: 
//         	"pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
//@skip-warning
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
		
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
//@skip-warning
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
//@skip-warning
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
//@skip-warning
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область ПравилаСобытий

// Функция - Все условия правил событий для объекта.
// 
// Возвращаемое значение:
//  Соответствие - соответствие с условиями.
//
Функция УсловияПравилаСобытий() Экспорт
	
	СоответствиеИзменениеОбъекта     = Новый Соответствие;	
	СоответствиеИзменениеОбъекта.Вставить("ПервичныеДокументыИзменениеОбъектаЗаписьЭлемента", 
		НСтр("ru = 'Запись элемента'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ПервичныеДокументыИзменениеОбъектаПереданВОплату", 
		НСтр("ru = 'Передан в оплату'"));
	
	СоответствиеИзменениеОбъекта.Вставить("ПервичныеДокументыИзменениеОбъектаОплачен", 
		НСтр("ru = 'Оплачен'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ПервичныеДокументыИзменениеОбъектаПереданВАрхив", 
		НСтр("ru = 'Передан в архив'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ПервичныеДокументыИзменениеОбъектаПолученОригинал", 
		НСтр("ru = 'Получен оригинал'"));
		
	СоответствиеИзменениеОбъекта.Вставить("ПервичныеДокументыИзменениеОбъектаИзменениеСтатуса", 
		НСтр("ru = 'Изменение статуса'"));	
	
		
	СоответствиеПериодическоеСобытие = Новый Соответствие;
	
	СоответствиеРасчетМетрик = Новый Соответствие;
	СоответствиеРасчетМетрик.Вставить("ПервичныеДокументыРасчетМетрикЗаписьЭлемента", НСтр("ru = 'Запись элемента'"));

	Соответствие = Новый Соответствие;
	Соответствие.Вставить("СоответствиеИзменениеОбъекта", 	  СоответствиеИзменениеОбъекта);
	Соответствие.Вставить("СоответствиеПериодическоеСобытие", СоответствиеПериодическоеСобытие);
	Соответствие.Вставить("СоответствиеРасчетМетрик", 		  СоответствиеРасчетМетрик);
	
	Возврат Соответствие;
	
КонецФункции

// Функция - Проверка условия правила события.
//
// Параметры:
//  ПравилоСобытия	 - СправчоникСсылка.ПравилаСобытий	 - правило проверки.
//  ИмяСобытия		 - Строка	 - имя проверки.
//  Структура		 - Структура - источник события и другая информация.
// 
// Возвращаемое значение: 
//	Булево			 - результат функции.
//
Функция ПроверкаУсловияПравилаСобытия(Знач ПравилоСобытия, Знач Структура = Неопределено, 
		Знач Источник = Неопределено) Экспорт
	
	ИмяСобытия = ПравилоСобытия.ПроверкаРеквизитовОбъектаИмяУсловия;
	
	Если ПравилоСобытия.ТипПравила = Перечисления.ТипыПравилСобытий.ИзменениеОбъекта Тогда 
		Результат = Ложь;		
		
		Если Структура.ЭтоНовый Тогда
			
			Если ИмяСобытия = "ПервичныеДокументыИзменениеОбъектаЗаписьЭлемента" Тогда				
				Результат = Истина;				
			КонецЕсли;
			
		Иначе
			
			ИсточникПередЗаписью 	= Структура.ИсточникПередЗаписью;			
			Если ИмяСобытия = "ПервичныеДокументыИзменениеОбъектаЗаписьЭлемента" Тогда
				Результат = Истина;
				
			ИначеЕсли ИмяСобытия = "ПервичныеДокументыИзменениеОбъектаПереданВОплату" Тогда
				Если Источник.ПереданВОплату
					И Источник.ПереданВОплату <> ИсточникПередЗаписью.ПереданВОплату Тогда
				    Результат = Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ПервичныеДокументыИзменениеОбъектаОплачен" Тогда
				Если Источник.Оплачен
					И Источник.Оплачен <> ИсточникПередЗаписью.Оплачен Тогда
				    Результат = Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ПервичныеДокументыИзменениеОбъектаПереданВАрхив" Тогда
				Если Источник.ПереданВАрхив
					И Источник.ПереданВАрхив <> ИсточникПередЗаписью.ПереданВАрхив Тогда
				    Результат = Истина;
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ПервичныеДокументыИзменениеОбъектаПолученОригинал" Тогда
				Если Источник.ЕстьОригинал
					И Источник.ЕстьОригинал <> ИсточникПередЗаписью.ЕстьОригинал Тогда
				    Результат = Истина;
				КонецЕсли;	
				
			ИначеЕсли ИмяСобытия = "ПервичныеДокументыИзменениеОбъектаИзменениеСтатуса" Тогда
				Если Источник.Статус <> ИсточникПередЗаписью.Статус Тогда
				    Результат = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("Наименование");
	Поля.Добавить("НомерДокумента");
	Поля.Добавить("Дата");
	Поля.Добавить("ВидПервичногоДокумента");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Данные.Наименование) Тогда
		СтандартнаяОбработка = Ложь;
		Представление = СтрШаблон(НСтр("ru = '%1 №%2 от %3'"), Данные.ВидПервичногоДокумента, Данные.НомерДокумента, 
			Формат(Данные.Дата, "ДФ=dd.MM.yy"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти