
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    УстановитьПараметрыСписка();
	УстановитьУсловноеОформление();   
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
    
    УстановитьПараметрыСписка();
	Оповестить("ОбновитьДанныеTelegram");
    
КонецПроцедуры

&НаКлиенте
Процедура СписокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
    
    УстановитьПараметрыСписка();
	Элементы.Список.Обновить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокПроксиСерверов(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьСписокПроксиСерверовЗавершение", ЭтотОбъект), 
		НСтр("ru = 'Действительно удалить список ВСЕХ прокси-серверов?'"), Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокПроксиСерверовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	TelegramСервер.ОчиститьСправочник("TelegramПрокси");
    УстановитьПараметрыСписка();
	Элементы.Список.Обновить();
	Оповестить("ОбновитьДанныеTelegram");
	ПоказатьПредупреждение(, НСтр("ru = 'Справочник очищен'"));

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьВсеПрокси(Команда)
	
	ДлительнаяОперация = ПроверитьПроксиСервераВФоне();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания 			= Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения 	= Истина;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверкаПроксиСерверовВФонеЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура СайтСПрокси(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://spys.one/sslproxy/");
    
КонецПроцедуры

&НаКлиенте
Процедура АвтозагрузкаПроксиСерверов(Команда)

	ДлительнаяОперация = АвтозагрузкаПроксиСерверовВФоне();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания 			= Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения 	= Истина;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("АвтозагрузкаПроксиСерверовВФонеЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УО = УсловноеОформление.Элементы;	
	УО.Очистить();
	
    ЭлементУО 						= УО.Добавить();
    ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
    ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Список.Активность");
    ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
    ЭлементУсловия.ПравоеЗначение 	= Ложь;
    ПолеОформления 					= ЭлементУО.Поля.Элементы.Добавить();
   	ПолеОформления.Поле 	    	= Новый ПолеКомпоновкиДанных("Список");
    ПолеОформления.Использование 	= Истина;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПроксиСервераВФоне()
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка прокси-серверов на доступность'");
	
	ПараметрыПроверки = Новый Структура();
	
	Результат = ДлительныеОперации.ВыполнитьВФоне("TelegramСервер.ПроверитьПроксиСерверы",
		ПараметрыПроверки, ПараметрыВыполнения);
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаПроксиСерверовВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
    УстановитьПараметрыСписка();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСписка()
    
    // Установка параметров
    ТекДата = ТекущаяДатаСеанса();
    Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала",  НачалоДня(ТекДата));
    Список.Параметры.УстановитьЗначениеПараметра("ДатаКонец",   ТекДата);
    Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала1", ДобавитьМесяц(ТекДата, -1));
    Список.Параметры.УстановитьЗначениеПараметра("ДатаКонец1",  ТекДата);
    
КонецПроцедуры

&НаКлиенте
Процедура АвтозагрузкаПроксиСерверовВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
    УстановитьПараметрыСписка();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Функция АвтозагрузкаПроксиСерверовВФоне()
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Автозагрузка 10 прокси-серверов'");
	
	ПараметрыПроверки = Новый Структура();
	
	Результат = ДлительныеОперации.ВыполнитьВФоне("TelegramСервер.АвтозагрузкаПроксиСерверов",
		ПараметрыПроверки, ПараметрыВыполнения);
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти 
