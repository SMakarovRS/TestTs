
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.СпособВзаимодействияСБотом = Перечисления.TelegramСпособВзаимодействияСБотом.ПериодическийЗапрос;
		Объект.Активность = Истина;
		Объект.ОграниченныйДоступ = Истина;
	КонецЕсли;
	
	Элементы.СтраницыСтатусы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(
		Метаданные.РегламентныеЗадания.TelegramОбработкаВходящихСообщенийПриИспользованииПериодическихЗапросов);
	Расписание = Задание.Расписание;	
	
	ОбновитьПолныйАдрес();
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.СпособВзаимодействияСБотом 
		= ПредопределенноеЗначение("Перечисление.TelegramСпособВзаимодействияСБотом.ПериодическийЗапрос") Тогда
	
		ЗаписатьРегламентноеЗаданиеНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОграниченныйДоступПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресВебхукПриИзменении(Элемент)
	
	ОбновитьПолныйАдрес();
	
КонецПроцедуры

&НаКлиенте
Процедура КлючВебхукПриИзменении(Элемент)
	
	ОбновитьПолныйАдрес();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСамоподписанныйСертификатПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВзаимодействияСБотомПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверкаСвязи(Команда)
	
	ПроверкаСвязиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроксиСерверы(Команда)
	
	ОткрытьФорму("Справочник.TelegramПрокси.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатус(Команда)
	
	ОбновитьИнформациюОСостоянии();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификат(Команда)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр 			= СтрШаблон("%1|*.pem;*.crt;*.cer;*.key", НСтр("ru = 'Самодписанный сертификат'"));
	ДиалогВыбора.Заголовок 			= НСтр("ru = 'Выберите файл сертификата в формате PEM'");
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ОО = Новый ОписаниеОповещения("ЗагрузитьСертификатВыбор", ЭтаФорма);
	ДиалогВыбора.Показать(ОО);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификатВыбор(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		ВыбранныйФайл 				= ВыбранныеФайлы[0];
		Файл 						= Новый Файл(ВыбранныйФайл);
		Объект.ИмяСертификата 		= Файл.Имя;
		ТД = Новый ТекстовыйДокумент();
		ТД.Прочитать(ВыбранныйФайл);
		Объект.Сертификат = ТД.ПолучитьТекст();
		Модифицированность 			= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СлучайныйАдресВебхук(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КлючВебхук) Тогда
		Объект.КлючВебхук = Строка(Новый УникальныйИдентификатор);
		ОбновитьВидимостьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)	
	Если Объект.Ссылка.Пустая() Тогда		
		ТекстВопроса =
			НСтр("ru = 'Данные еще не записаны. Указать расписание выполнения
                  |возможно только после записи данных.
                  |
                  |Данные будут записаны.'");
					   
		ОписаниеОповещения = Новый ОписаниеОповещения("РасписаниеВопрос",ЭтаФорма);			   
		Режим = РежимДиалогаВопрос.ОКОтмена;
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,Режим);
		Возврат;
	ИначеЕсли Модифицированность = Истина Тогда
		ТекстВопроса =
			НСтр("ru = 'Указать расписание выполнения
                  |возможно только после записи данных.
                  |
                  |Данные будут записаны.'");
					   
		ОписаниеОповещения = Новый ОписаниеОповещения("РасписаниеВопрос",ЭтаФорма);			   
		Режим = РежимДиалогаВопрос.ОКОтмена;
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,Режим);
		Возврат;		
	КонецЕсли;
	РасписаниеФрагмент();	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Запись:'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
		РасписаниеФрагмент();
		
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеФрагмент()
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеЗавершение", ЭтотОбъект));
	
КонецПроцедуры	
	
&НаКлиенте
Процедура РасписаниеЗавершение(НовоеРасписание, Контекст) Экспорт
	
	Если НовоеРасписание <> Неопределено Тогда
		Расписание = НовоеРасписание;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроверкаСвязиНаСервере()
	
	Ресурс = "bot" + Объект.Токен + "/getUpdates";
	Ответ = TelegramСервер.Get(Ресурс);
	
	Если ТипЗнч(Ответ) = Тип("HTTPОтвет") И Ответ.КодСостояния = 200 Тогда
		TelegramСервер.СообщитьПользователю(НСтр("ru = 'Проверка связи с ботом выполнена успешно'"));
	Иначе
		TelegramСервер.СообщитьПользователю(НСтр("ru = 'Проверка связи с ботом не выполнена'"));
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДоступность()
	
    Элементы.ДекорацияОписаниеОграничения.Заголовок =
        ?(Объект.ОграниченныйДоступ,
        НСтр("ru = 'Доступ к боту будет ограничен. Новых пользователей необходимо будет администратору ""активировать"" в справочнике ""Пользователи чат-ботов"".'"),
        НСтр("ru = 'Доступ к боту не ограничен. Новые пользователи смогут самостоятельно регистрироваться и выполнять команды бота.'"));
	
	Элементы.ПроксиСерверы.Видимость = УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("TelegramИспользоватьСписокПроксиСерверов");
	
	Элементы.ДекорацияСпособВзаимодействия.Заголовок =
		?(Объект.СпособВзаимодействияСБотом = Перечисления.TelegramСпособВзаимодействияСБотом.ПериодическийЗапрос,
		НСтр("ru = 'Этот метод не будет работать, если подключен Webhook.'"),
		НСтр("ru = 'При подключенном и настроенном Webhook метод ""Периодческий запрос"" работать не будет.'"));
		
	Элементы.СтраницаНастройкиWebhook.Видимость = 
		(Объект.СпособВзаимодействияСБотом = Перечисления.TelegramСпособВзаимодействияСБотом.Вебхук);
	Элементы.СтраницаНастройкиПолученияОбновлений.Видимость = 
		(Объект.СпособВзаимодействияСБотом = Перечисления.TelegramСпособВзаимодействияСБотом.ПериодическийЗапрос);
		
	Если ЗначениеЗаполнено(Объект.СпособВзаимодействияСБотом) Тогда
		Элементы.СтраницыСтатусы.Видимость = Истина;
		Если Объект.СпособВзаимодействияСБотом = Перечисления.TelegramСпособВзаимодействияСБотом.ПериодическийЗапрос Тогда
			Элементы.СтраницыСтатусы.ТекущаяСтраница = Элементы.СтраницаСтатусаПериодическийЗапрос;
		Иначе
			Элементы.СтраницыСтатусы.ТекущаяСтраница = Элементы.СтраницаСтатусаВебхук;
		КонецЕсли;
	Иначе
		Элементы.СтраницыСтатусы.Видимость = Ложь;
	КонецЕсли;
	Элементы.НастроитьРасписание.Заголовок = СтрШаблон(НСтр("ru = 'Расписание: %1'"), Строка(Расписание));	
	Элементы.ГруппаСертификат.Доступность = Объект.ИспользоватьСамоподписанныйСертификат;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОСостоянии()
	
	Если Объект.СпособВзаимодействияСБотом = Перечисления.TelegramСпособВзаимодействияСБотом.ПериодическийЗапрос Тогда
		СостояниеПериодическогоЗапроса = TelegramСервер.СостояниеРегламентногоЗаданияПериодическогоЗапроса(Объект.Ссылка);
	Иначе
		СостояниеWebhook = TelegramСервер.СостояниеВебхука(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегламентноеЗаданиеНаСервере()
	
	Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(
		Метаданные.РегламентныеЗадания.TelegramОбработкаВходящихСообщенийПриИспользованииПериодическихЗапросов);
	Задание.Расписание = Расписание;
	Задание.Записать();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолныйАдрес()
	
	АдресВИнтернете = TelegramСервер.АдресWebHook(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНастройкиWebHook(Команда)
	
	Если Модифицированность = Истина ИЛИ Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	Результат = TelegramСервер.ОтправитьНастройкиВебхука(Объект.Ссылка);
	Если НЕ ПустаяСтрока(Результат) Тогда
		TelegramСервер.СообщитьПользователю(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНастройкиWebhook(Команда)
	
	Если Модифицированность = Истина ИЛИ Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	Результат = TelegramСервер.УдалитьНастройкиВебхука(Объект.Ссылка);
	Если НЕ ПустаяСтрока(Результат) Тогда
		TelegramСервер.СообщитьПользователю(Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти