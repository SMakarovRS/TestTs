
#Область ПрограммныйИнтерфейс

// Восстанавливает настройки отборов при открытии формы.
//
// Параметры:
//	Форма 			- УправляемаяФорма - исходная форма с отборами.
//	СписокОтбора 	- ДинамическийСписок - динамический список, на который следует установить отбор.
//	ДопПараметры 	- Структура - содержит дополнительные параметры для настройки отборов:
//		* ИмяСписка					- Строка - имя динамического списка - указывается, если на форме несколько списков.
//		* СтруктураИменЭлементов	- Структура - имена элементов формы, если они не совпадают по умолчанию.
//		* СтруктураИменПолейОтборов - Структура - имена полей списка формы для наложения отбора.
//		* ВариантОтборовФормы		- Строка - ключ варианта сохраненных отборов формы.
//		* УстановитьОтборПоПериоду	- Булево - применять отбор по периоду.
//		* ИмяТЗТаблицаОтборов		- Строка - имя таблицы формы, содержащей отборы.
//		* СписокПолейИсключений		- СписокЗначений - список полей, по которым не восстанавливать сохраненные значения.
//
Процедура ВосстановитьНастройкиОтборов(Форма, Знач СписокОтбора, Знач ДопПараметры = Неопределено) Экспорт
	
	// Получение параметров процедуры.
	ИмяСписка					= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяСписка", "");
	СтруктураИменЭлементов		= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "СтруктураИменЭлементов");
	СтруктураИменПолейОтборов	= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "СтруктураИменПолейОтборов");
	ВариантОтборовФормы			= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ВариантОтборовФормы", "");
	УстановитьОтборПоПериоду	= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "УстановитьОтборПоПериоду", Истина);
	ИмяТЗТаблицаОтборов			= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяТЗТаблицаОтборов", "ТаблицаОтборов");
	СписокПолейИсключений		= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "СписокПолейИсключений");
			
	ИмяКлючаОбъекта		= СтрЗаменить(Форма.ИмяФормы, ".", "") + ВариантОтборовФормы;
	СохраненноеЗначение	= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, 
		ИмяКлючаОбъекта + ИмяСписка + "_ДанныеОтборов");
	
	ЕстьОтборТекущегоСписка = Ложь;
	
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		
		// Проверка на старую версию отборов.
		Если ТипЗнч(СохраненноеЗначение) = Тип("ТаблицаЗначений") Тогда
			Если СохраненноеЗначение.Колонки.Найти("Отбор") = Неопределено Тогда
				мПериод 					= Новый СтандартныйПериод;
				Форма.ПредставлениеПериода	= РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(мПериод);
				Возврат;
			КонецЕсли;	
		КонецЕсли;			
		
		// Удалим поля из списка исключений восстановления отборов.
		Если ТипЗнч(СписокПолейИсключений) = Тип("СписокЗначений")
			И ТипЗнч(СохраненноеЗначение) = Тип("ТаблицаЗначений")
			И НЕ СохраненноеЗначение.Колонки.Найти("ИмяПоляОтбора") = Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура("ИмяПоляОтбора",);
			
			Для Каждого ПолеДляИсключения Из СписокПолейИсключений Цикл
				
				ПараметрыОтбора.ИмяПоляОтбора 	= ПолеДляИсключения.Значение;
				НайденныеСтрокиОтбора 			= СохраненноеЗначение.НайтиСтроки(ПараметрыОтбора);
				
				Для Каждого СтрокаОтбора Из НайденныеСтрокиОтбора Цикл
					СохраненноеЗначение.Удалить(СтрокаОтбора);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СохраненноеЗначение.Колонки.Найти("ИмяПоляОтбора") = Неопределено Тогда
			Возврат;
		КонецЕсли;		
		
		// Проверить сохраненные отборы, удалить строки, которых нет ДоступныхПоляхКомпоновкиДанных.
		Если СохраненноеЗначение.Колонки.Найти("ИмяПараметраЗапроса") = Неопределено Тогда
			
			МассивДоступныхПолейКомпоновкиДанных = Новый Массив;
			
			Для Каждого ПолеОтбора Из СписокОтбора.Отбор.ДоступныеПоляОтбора.Элементы Цикл
				МассивДоступныхПолейКомпоновкиДанных.Добавить(Строка(ПолеОтбора.Поле));
			КонецЦикла;
			
			МассивУдалитьОтборы = Новый Массив;
			Для Каждого СохраненноеПолеОтбора Из СохраненноеЗначение Цикл
								
				Если СтрНайти(СохраненноеПолеОтбора.ИмяПоляОтбора, ".") <> 0 Тогда
					// Для полей табличной части, которые представлены через точку.
					МассивПолей = СтрРазделить(СохраненноеПолеОтбора.ИмяПоляОтбора, ".");
					Если МассивПолей.Количество() > 0 Тогда
						СохраненноеПолеОтбораИмя = МассивПолей[0];
					КонецЕсли;
				Иначе
					СохраненноеПолеОтбораИмя = СохраненноеПолеОтбора.ИмяПоляОтбора;
				КонецЕсли;
				
				Если МассивДоступныхПолейКомпоновкиДанных.Найти(СохраненноеПолеОтбораИмя)=Неопределено Тогда
					МассивУдалитьОтборы.Добавить(СохраненноеПолеОтбора);
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого строкаУдалить Из МассивУдалитьОтборы Цикл
				СохраненноеЗначение.Удалить(строкаУдалить);
			КонецЦикла;
			
		КонецЕсли; 
		
		Форма[ИмяТЗТаблицаОтборов].Загрузить(СохраненноеЗначение);
		
		// Установить отборы списка по данным в таблице ТаблицыОтборов.
		ЕстьИмяСписка 			= Ложь; // для форм с несколькими динамическими списками.
		ЕстьИмяПараметраЗапроса = Ложь; // для форм, где отбор устанавливается через параметр запроса динамического списка.
		
		СтрокаПолейТаблицыДляСвертки = "ИмяПоляОтбора";
		
		Если СохраненноеЗначение.Колонки.Найти("ИмяСписка")<>Неопределено Тогда
			СтрокаПолейТаблицыДляСвертки	= СтрокаПолейТаблицыДляСвертки + ",ИмяСписка";
			ЕстьИмяСписка 				 	= Истина;
			
		КонецЕсли;
		
		Если СохраненноеЗначение.Колонки.Найти("ИмяПараметраЗапроса")<>Неопределено  Тогда
			СтрокаПолейТаблицыДляСвертки	= СтрокаПолейТаблицыДляСвертки + ",ИмяПараметраЗапроса";
			ЕстьИмяПараметраЗапроса 		= Истина;
			
		КонецЕсли;
		
		ТаблицаИменПолейОтборов = СохраненноеЗначение.Скопировать(,СтрокаПолейТаблицыДляСвертки);
		ТаблицаИменПолейОтборов.Свернуть(СтрокаПолейТаблицыДляСвертки, "");
		
		Для Каждого СтрокаПолейОтборов Из ТаблицаИменПолейОтборов Цикл //цикл по именам полей отбора.
			
			// Если нет колонки "ИмяСписка", отбор через компоновку.
			// Если есть имя списка, нужно проверить, что поле отбора принадлежит этому списку.
			ПолеОтбораПринадлежитСписку = НЕ ЕстьИмяСписка ИЛИ (ЕстьИмяСписка И СтрокаПолейОтборов.ИмяСписка = ИмяСписка);
			
			Если (ЕстьИмяПараметраЗапроса И СтрокаПолейОтборов.ИмяПараметраЗапроса <> ""
				И ПолеОтбораПринадлежитСписку) Тогда
				// отбор через установку параметров запроса списка.
				УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, СтрокаПолейОтборов.ИмяПоляОтбора,
					СтрокаПолейОтборов.ИмяПараметраЗапроса, ИмяТЗТаблицаОтборов);
					
				ЕстьОтборТекущегоСписка = Истина;
				
			ИначеЕсли ПолеОтбораПринадлежитСписку Тогда
				// отбор через компоновку.
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ИмяПоляОтбора",			СтрокаПолейОтборов.ИмяПоляОтбора);
				ДопПараметры.Вставить("ИспользованиеОтбора",	Истина);
				ДопПараметры.Вставить("ИмяТЗТаблицаОтборов",	ИмяТЗТаблицаОтборов);
				
				УстановитьОтборСписка(Форма, СписокОтбора, ДопПараметры);
				ЕстьОтборТекущегоСписка = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьЭлементыФормыОтборы(Форма, , ИмяТЗТаблицаОтборов);
		
	КонецЕсли;
	
	Если УстановитьОтборПоПериоду Тогда
		
		Если СтруктураИменЭлементов = Неопределено Тогда
			
			Форма.ОтборПериод			= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, 
				ИмяКлючаОбъекта + ИмяСписка + "_ОтборПоПериоду");
				
			Форма.ПредставлениеПериода	= РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Форма.ОтборПериод);
			
			Если СтруктураИменПолейОтборов <> Неопределено 
				И СтруктураИменПолейОтборов.Свойство("ОтборПериод") Тогда
				ИмяПоляОтборПериод = СтруктураИменПолейОтборов.ОтборПериод;
				
			Иначе
				ИмяПоляОтборПериод = "Дата";
				
			КонецЕсли;
			
			РаботаСОтборамиКлиентСервер.УстановитьОтборПоПериоду(СписокОтбора.КомпоновщикНастроек.Настройки.Отбор,
				Форма.ОтборПериод.ДатаНачала, Форма.ОтборПериод.ДатаОкончания, ИмяПоляОтборПериод);
			
		Иначе
			Форма[СтруктураИменЭлементов.ОтборПериод] = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, 
				ИмяКлючаОбъекта + ИмяСписка + "_ОтборПоПериоду");
				
			Форма[СтруктураИменЭлементов.ПредставлениеПериода] = 
				РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Форма[СтруктураИменЭлементов.ОтборПериод]);
				
			РаботаСОтборамиКлиентСервер.УстановитьОтборПоПериоду(СписокОтбора.КомпоновщикНастроек.Настройки.Отбор, 
				Форма[СтруктураИменЭлементов.ОтборПериод].ДатаНачала, 
				Форма[СтруктураИменЭлементов.ОтборПериод].ДатаОкончания,
				?(СтруктураИменЭлементов.Свойство("ИмяПоляОтбора"), СтруктураИменЭлементов.ИмяПоляОтбора, "Дата"));
				
		КонецЕсли;
			
	КонецЕсли;
	
	Если Не ЕстьОтборТекущегоСписка И (НЕ УстановитьОтборПоПериоду ИЛИ НЕ ЗначениеЗаполнено(Форма.ОтборПериод)) Тогда
		
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта
			+ ИмяСписка + "_ВидимостьПанелиОтборов", Истина);
			
		Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
			СвернутьРазвернутьОтборыНаСервере(Форма, СохраненноеЗначение, СтруктураИменЭлементов);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Сохраняет настройки отборов при закрытии формы.
//
// Параметры:
//	Форма 			- УправляемаяФорма - исходная форма с отборами.
//	ДопПараметры 	- Структура - содержит дополнительные параметры для настройки отборов:
//		* ИмяСписка					- Строка - имя динамического списка - указывается, если на форме несколько списков.
//		* СтруктураИменЭлементов	- Структура - имена элементов формы, если они не совпадают по умолчанию.
//		* ВариантОтборовФормы		- Строка - ключ варианта сохраненных отборов формы.
//		* УстановитьОтборПоПериоду	- Булево - применять отбор по периоду.
//		* ИмяТЗТаблицаОтборов		- Строка - имя таблицы формы, содержащей отборы.
//
Процедура СохранитьНастройкиОтборов(Знач Форма, Знач ДопПараметры = Неопределено) Экспорт 
	
	// Получение параметров процедуры.
	ИмяСписка					= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяСписка", "");
	СтруктураИменЭлементов		= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "СтруктураИменЭлементов");	
	ВариантОтборовФормы			= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ВариантОтборовФормы", "");
	УстановитьОтборПоПериоду	= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "УстановитьОтборПоПериоду", Истина);
	ИмяТЗТаблицаОтборов			= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяТЗТаблицаОтборов", "ТаблицаОтборов");
	
	ИмяКлючаОбъекта = СтрЗаменить(Форма.ИмяФормы, ".", "") + ВариантОтборовФормы;
	
	Если ИмяСписка = "" Тогда
		ДанныеОтборов = Форма[ИмяТЗТаблицаОтборов].Выгрузить();
	Иначе
		ДанныеОтборов = Форма[ИмяСписка].Выгрузить();
	КонецЕсли;
	
	Если СтруктураИменЭлементов = Неопределено Тогда		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
			ИмяКлючаОбъекта + ИмяСписка + "_ДанныеОтборов", ДанныеОтборов);
		
		Если УстановитьОтборПоПериоду Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
				ИмяКлючаОбъекта + ИмяСписка + "_ОтборПоПериоду", Форма.ОтборПериод);			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
			ИмяКлючаОбъекта + ИмяСписка + "_ВидимостьПанелиОтборов", 
			Форма.Элементы.ПанельОтборов.Видимость);
	Иначе
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
			ИмяКлючаОбъекта + ИмяСписка + "_ДанныеОтборов", ДанныеОтборов);
			
		Если УстановитьОтборПоПериоду Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
				ИмяКлючаОбъекта + ИмяСписка + "_ОтборПоПериоду", 
				Форма[СтруктураИменЭлементов.ОтборПериод]);
		КонецЕсли;
			
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, 
			ИмяКлючаОбъекта + ИмяСписка + "_ВидимостьПанелиОтборов", 
			Форма.Элементы[СтруктураИменЭлементов.ПанельОтборов].Видимость);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет на форму новый элемент и обновляет ранее добавленные элементы установленных отборов.
//
// Параметры:
//	Форма - УправляемаяФорма - исходная форма с отборами.
//	ДопПараметры - Структура - содержит дополнительные параметры для настройки отборов:
//		* ИмяПоляОтбора					- Строка - имя поля дин. списка для наложения отбора.
//		* ИмяГруппыРодителя				- Строка - имя группы элементов формы для размещения нового элемента отбора.
//		* ЗначениеОтбора				- ЛюбаяСсылка, СписокЗначений, Булево, Строка, Дата, Число - значение отбора.
//		* ПредставлениеЗначенияОтбора	- Строка - заголовок элемента формы, отображающего отбор.
//		* ИмяСписка						- Строка - имя динамического списка - указывается, если на форме несколько списков.
//		* ИмяПараметраЗапроса			- Строка - имя параметра запроса динамического списка.
//		* ВариантОтборовФормы			- Строка - ключ варианта сохраненных отборов формы.
//		* УстановитьОтборПоПериоду		- Булево - применять отбор по периоду.
//		* ИмяТЗТаблицаОтборов			- Строка - имя таблицы формы, содержащей отборы.
//
Процедура СоздатьЭлементФормыПоЗначениюОтбора(Форма, Знач ДопПараметры) Экспорт 
			
	НайтиДобавитьПараметрВСтруктуру(ДопПараметры, "ИмяСписка"); 
	НайтиДобавитьПараметрВСтруктуру(ДопПараметры, "ИмяПараметраЗапроса"); 
	НайтиДобавитьПараметрВСтруктуру(ДопПараметры, "ИмяТЗТаблицаОтборов", "ТаблицаОтборов"); 
	
	Если ТипЗнч(ДопПараметры.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
		
		ПредыдущееЗначениеОтбора = ДопПараметры.ЗначениеОтбора;
		Для Каждого Элм Из ПредыдущееЗначениеОтбора Цикл
			ДопПараметры.Вставить("ЗначениеОтбора", 			 Элм.Значение);
			ДопПараметры.Вставить("ПредставлениеЗначенияОтбора", Строка(Элм.Значение));
			СоздатьЭлементФормыОтбор(Форма, ДопПараметры); 		
			ОбновитьЭлементыФормыОтборы(Форма, , ДопПараметры.ИмяТЗТаблицаОтборов);
		КонецЦикла;	
			
	Иначе		
		СоздатьЭлементФормыОтбор(Форма, ДопПараметры); 		
		ОбновитьЭлементыФормыОтборы(Форма, , ДопПараметры.ИмяТЗТаблицаОтборов);
		
	КонецЕсли;	
	
КонецПроцедуры

// Устанавливает отбор на динамический список формы.
//
// Параметры:
//	Форма 			- УправляемаяФорма - исходная форма с отборами.
//	СписокОтбора	- ДинамическийСписок - динамический список, на который следует установить отбор.
//	ДопПараметры	- Структура - содержит дополнительные параметры для настройки отборов:
//		* ИмяПоляОтбора				- Строка - имя поля динамического списка для наложения отбора.
//		* ИмяСписка					- Строка - имя динамического списка - указывается, если на форме несколько списков.
//		* ИспользованиеОтбора		- Булево - признак применения отбора.
//		* ИмяТЗТаблицаОтборов		- Строка - имя таблицы формы, содержащей отборы.
//
Процедура УстановитьОтборСписка(Форма, СписокОтбора, Знач ДопПараметры) Экспорт
	
	// Получение параметров процедуры.	
	ИмяПоляОтбора		= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяПоляОтбора", "");
	ИмяСписка			= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяСписка", "");
	ИспользованиеОтбора	= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИспользованиеОтбора");
	ИмяТЗТаблицаОтборов	= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяТЗТаблицаОтборов", "ТаблицаОтборов");
	
	МассивОтбора = Новый Массив;
	Для Каждого Стр Из Форма[ИмяТЗТаблицаОтборов] Цикл
		
		Если Стр.ИмяПоляОтбора = ИмяПоляОтбора 
			И (ИмяСписка = "" ИЛИ (Стр.Свойство("ИмяСписка") И ИмяСписка = Стр.ИмяСписка)) Тогда
			
			Если ТипЗнч(Стр.Отбор) = Тип("СписокЗначений") Тогда
				Для Каждого ЗначениеСписка Из Стр.Отбор Цикл
				    МассивОтбора.Добавить(ЗначениеСписка.Значение);
				КонецЦикла; 
			Иначе	
				
				МассивОтбора.Добавить(Стр.Отбор);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользованиеОтбора = Неопределено Тогда
		ИспользованиеОтбора = ЗначениеЗаполнено(МассивОтбора);
	КонецЕсли;
	
	ИмяЭлемента = "Отбор" + СтрЗаменить(ИмяПоляОтбора, ".", "");
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
	
	Если ЭлементФормы <> Неопределено
		И ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
		И ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода 
		И (ЭлементФормы.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы 
		ИЛИ ЭлементФормы.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы) Тогда
		ТекВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		
	Иначе		
		ТекВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		
	КонецЕсли; 
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокОтбора.КомпоновщикНастроек.Настройки.Отбор,
		ИмяПоляОтбора, 
		МассивОтбора, 
		ТекВидСравнения, 
		, 
		ИспользованиеОтбора);
	
КонецПроцедуры

// Удаляет ранее установленный отбор динамического списка и обновляет элементы формы, содержащие отборы.
//
// Параметры:
//	Форма 			- УправляемаяФорма - исходная форма с отборами.
//	СписокОтбора	- ДинамическийСписок - динамический список, на который следует установить отбор.
//	ДопПараметры	- Структура - содержит дополнительные параметры для настройки отборов:
//		* ОтборИД					- Строка - номер отбора в таблице отборов.
//		* ИмяСписка					- Строка - имя динамического списка - указывается, если на форме несколько списков.
//		* ИмяТЗТаблицаОтборов		- Строка - имя таблицы формы, содержащей отборы.
//		* УстановитьНовыйОтбор		- Булево - признак применения отбора.
//		* ИмяЭлементаПанельОтборов	- Строка - имя группы элементов формы - панели отборов.
//
Процедура УдалитьОтборСписка(Форма,	СписокОтбора, Знач ДопПараметры) Экспорт
	
	// Получение параметров процедуры.	
	ОтборИД							= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ОтборИД", 0);
    ИмяСписка						= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяСписка", "");
	ИмяТЗТаблицаОтборов				= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяТЗТаблицаОтборов", "ТаблицаОтборов");
	УстановитьНовыйОтбор			= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "УстановитьНовыйОтбор", Истина);
	
	ТаблицаОтборов 					= Форма[ИмяТЗТаблицаОтборов];	
	СтрокаОтборов 					= ТаблицаОтборов[Число(ОтборИД)];
	ИмяПоляОтбора 					= СтрокаОтборов.ИмяПоляОтбора;
	ИмяПараметраЗапроса 			= ?(СтрокаОтборов.Свойство("ИмяПараметраЗапроса"), СтрокаОтборов.ИмяПараметраЗапроса, "");
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = МассивЗначенийПоИмениКолонки(ТаблицаОтборов, "ИмяГруппыРодителя");
	
	ТаблицаОтборов.Удалить(СтрокаОтборов);
	
	ОбновитьЭлементыФормыОтборы(Форма, СписокГруппФормыДляУдаленияДобавленныхЭлементов, ИмяТЗТаблицаОтборов);
	
	Если УстановитьНовыйОтбор Тогда
		
		Если ИмяПараметраЗапроса = "" Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИмяПоляОтбора",	ИмяПоляОтбора);
			ДопПараметры.Вставить("ИмяСписка",		ИмяСписка);
			УстановитьОтборСписка(Форма, СписокОтбора, ДопПараметры);
			
		Иначе
			УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяПараметраЗапроса);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все отборы динамического списка и обновляет элементы формы.
//
// Параметры:
//	Форма 			- УправляемаяФорма - исходная форма с отборами.
//	СписокОтбора	- ДинамическийСписок - динамический список, на который следует установить отбор.
//	ДопПараметры	- Структура - содержит дополнительные параметры для настройки отборов:
//		* МассивПолейОтборов - Массив из имен полей динамического списка для удаления отборов.
//
Процедура УдалитьВсеОтборыСписка(Форма, СписокОтбора, Знач ДопПараметры = Неопределено) Экспорт
		
	ИмяТЗТаблицаОтборов = "ТаблицаОтборов";
	ИмяОтборПериод 		= "ОтборПериод";	
	ТаблицаОтборов		= Форма[ИмяТЗТаблицаОтборов];
	ОтборПериод			= Форма[ИмяОтборПериод];
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = МассивЗначенийПоИмениКолонки(ТаблицаОтборов, "ИмяГруппыРодителя");
	СписокИменПолейОтборовДляУдаления				= МассивЗначенийПоИмениКолонки(ТаблицаОтборов, "ИмяПоляОтбора");
	
	ТаблицаОтборов.Очистить();		
	ЗаполнитьЗначенияСвойств(ОтборПериод, Новый СтандартныйПериод); 
	
	Для Каждого ИмяПоляОтбора Из СписокИменПолейОтборовДляУдаления Цикл		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОтбора, ИмяПоляОтбора);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОтбора, "Дата");
	
	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("МассивПолейОтборов") Тогда
		Для Каждого Элм Из ДопПараметры.МассивПолейОтборов Цикл
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокОтбора, Элм);
		КонецЦикла;	
	КонецЕсли;	
		
	ОбновитьЭлементыФормыОтборы(Форма, СписокГруппФормыДляУдаленияДобавленныхЭлементов, ИмяТЗТаблицаОтборов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЭлементФормыОтбор(Форма, Знач ДопПараметры)
	
	// Получение параметров процедуры.
	ИмяПоляОтбора		= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяПоляОтбора", "");
	ИмяГруппыРодителя	= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяГруппыРодителя", "");
	ЗначениеОтбора		= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ЗначениеОтбора");
	ПредставлениеЗначенияОтбора	= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ПредставлениеЗначенияОтбора", "");
	ИмяСписка			= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяСписка", "");
	ИмяПараметраЗапроса	= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяПараметраЗапроса", "");
	ИмяТЗТаблицаОтборов	= ЗначениеСвойстваСтруктурыСервер(ДопПараметры, "ИмяТЗТаблицаОтборов", "ТаблицаОтборов");
    	
	ТаблицаОтборов	= Форма[ИмяТЗТаблицаОтборов];
	
	Если ТаблицаОтборов.Количество() > 0 Тогда
		
		Если ИмяСписка <> "" И ТаблицаОтборов[0].Свойство("ИмяСписка") Тогда
			СтруктураПоискаЗначенияОтбора = Новый Структура("Отбор, ИмяСписка, ИмяПоляОтбора", ЗначениеОтбора, ИмяСписка, ИмяПоляОтбора);
		Иначе
			СтруктураПоискаЗначенияОтбора = Новый Структура("Отбор, ИмяПоляОтбора", ЗначениеОтбора, ИмяПоляОтбора);
		КонецЕсли;
		
		Если ТаблицаОтборов.НайтиСтроки(СтруктураПоискаЗначенияОтбора).Количество() > 0 Тогда
			// добавляется значение отбора, по которому уже есть отбор.
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
		СписокОтборов	= Новый СписокЗначений;
		СписокОтборов.ЗагрузитьЗначения(ЗначениеОтбора);
		ЗначениеОтбора	= СписокОтборов;
	КонецЕсли; 
	
	СтрокаОтборов 			= ТаблицаОтборов.Добавить();
	НавигационнаяСсылкаФС	= "Отбор_" + СтрокаОтборов.ПолучитьИдентификатор();
	
	СтрокаОтборов.Отбор				= ЗначениеОтбора;
	СтрокаОтборов.ИмяПоляОтбора		= ИмяПоляОтбора;
	СтрокаОтборов.ИмяГруппыРодителя	= ИмяГруппыРодителя;

	// Для интерфейса такси.	
	ПредставлениеОтбора = ФорматированнаяСтрокаПредставленияОтбора(ПредставлениеЗначенияОтбора, НавигационнаяСсылкаФС);
	
	СтрокаОтборов.ПредставлениеОтбора = ПредставлениеОтбора;
	
	Если СтрокаОтборов.Свойство("ИмяСписка") Тогда
		СтрокаОтборов.ИмяСписка = ИмяСписка;
	КонецЕсли;
	
	Если СтрокаОтборов.Свойство("ИмяПараметраЗапроса") Тогда
		СтрокаОтборов.ИмяПараметраЗапроса = ИмяПараметраЗапроса;
	КонецЕсли;
	
КонецПроцедуры

Функция ФорматированнаяСтрокаПредставленияОтбора(Знач ПредставлениеЗначенияОтбора, Знач НавигационнаяСсылкаФС)
	
	Цвет  = WebЦвета.Черный;
	Шрифт = Новый Шрифт( , , Истина);
	
	КомпонентыФС = Новый Массив;	
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.УдалитьТег, , , , НавигационнаяСсылкаФС));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(" " + ПредставлениеЗначенияОтбора, Шрифт, Цвет));	
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

Процедура СвернутьРазвернутьОтборыНаСервере(Форма, Видимость, СтруктураИменЭлементов = Неопределено, пШирина = 25)
	
	Элементы = Форма.Элементы;
	
	ИнтерфейсТакси = Истина;
	
	Если СтруктураИменЭлементов = Неопределено Тогда
		
		Если Элементы.Найти("ДекорацияПоказатьОтборы") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ПанельОтборов.Видимость				= Видимость;
		Элементы.ГруппаСкрытьОчиститьОтборы.Видимость	= Видимость;
		Элементы.ДекорацияПоказатьОтборы.Видимость		= НЕ Видимость;
		Элементы.ГруппаПраво.Ширина = ?(Видимость, ?(ИнтерфейсТакси, пШирина, пШирина - 1), 0);
		
	Иначе		
		Элементы[СтруктураИменЭлементов.ПанельОтборов].Видимость		= Видимость;
		Элементы[СтруктураИменЭлементов.ДекорацияПоказатьОтборы].Видимость	= НЕ Видимость;
		Элементы[СтруктураИменЭлементов.ПанельОтборов].Ширина = ?(Видимость, ?(ИнтерфейсТакси, пШирина, пШирина - 1), 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЭлементыФормыОтборы(Форма, 
		Знач СписокГруппФормыДляУдаленияДобавленныхЭлементов = Неопределено, 
		Знач ИмяТЗТаблицаОтборов = "ТаблицаОтборов")
	
	Элементы		= Форма.Элементы;
	ТаблицаОтборов	= Форма[ИмяТЗТаблицаОтборов];
	
	Если СписокГруппФормыДляУдаленияДобавленныхЭлементов = Неопределено Тогда
		СписокГруппФормыДляУдаленияДобавленныхЭлементов = МассивЗначенийПоИмениКолонки(ТаблицаОтборов, "ИмяГруппыРодителя");
	КонецЕсли;
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ГруппаФормы Из СписокГруппФормыДляУдаленияДобавленныхЭлементов Цикл
		
		// УдалитьПроверку.
		Если Элементы.Найти(ГруппаФормы) <> Неопределено Тогда  
			ДобавитьОтборыДляУдаления(Форма.Элементы[ГруппаФормы], УдаляемыеЭлементы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	НомерЭлемента = 0;
	Для Каждого СтрокаОтбор Из ТаблицаОтборов Цикл
		
		// УдалитьПроверку.
		Если Элементы.Найти(СтрокаОтбор.ИмяГруппыРодителя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ГруппаРодитель = Форма.Элементы[СтрокаОтбор.ИмяГруппыРодителя];
		
		ПолеОтбора = Элементы.Добавить("Отбор_" + НомерЭлемента, Тип("ПолеФормы"), ГруппаРодитель);
		ПолеОтбора.Вид 						= ВидПоляФормы.ПолеНадписи;
		ПолеОтбора.ПутьКДанным				= ИмяТЗТаблицаОтборов + "[" + НомерЭлемента + "].ПредставлениеОтбора";
		ПолеОтбора.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеОтбора.РастягиватьПоГоризонтали	= Истина;		
		ПолеОтбора.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОтборОбработкаНавигационнойСсылки");
		ПолеОтбора.Подсказка				= СтрокаОтбор.ПредставлениеОтбора;		
		НомерЭлемента 						= НомерЭлемента + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МассивЗначенийПоИмениКолонки(Знач Таблица, Знач ИмяКолонки)
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = Таблица.Выгрузить();
	СписокГруппФормыДляУдаленияДобавленныхЭлементов.Свернуть(ИмяКолонки, "");
	
	Возврат СписокГруппФормыДляУдаленияДобавленныхЭлементов.ВыгрузитьКолонку(ИмяКолонки);
	
КонецФункции

Процедура ДобавитьОтборыДляУдаления(ЭлементГруппа, УдаляемыеЭлементы)
	
	Для Каждого СтрокаОтбор Из ЭлементГруппа.ПодчиненныеЭлементы Цикл
		
		Если СтрокаОтбор.Вид = ВидПоляФормы.ПолеВвода Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(СтрокаОтбор);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаСписка(Форма, 
	СписокОтбора, 
	ИмяПоляОтбора, 
	ИмяПараметраЗапроса, 
	ИмяТЗТаблицаОтборов = "ТаблицаОтборов")
	
	МассивОтбора 		 = Новый Массив;
	СтрокиЗначенийОтбора = Форма[ИмяТЗТаблицаОтборов].НайтиСтроки(Новый Структура("ИмяПоляОтбора", ИмяПоляОтбора));
	
	Для Каждого строкаОтборов Из СтрокиЗначенийОтбора Цикл
		
		Если ТипЗнч(строкаОтборов.Отбор)=Тип("СписокЗначений") Тогда
			Для каждого значениеСписка Из строкаОтборов.Отбор Цикл
				МассивОтбора.Добавить(значениеСписка.Значение);
			КонецЦикла;
		Иначе	
			МассивОтбора.Добавить(строкаОтборов.Отбор);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокОтбора.Параметры.УстановитьЗначениеПараметра("БезОтбора", НЕ ЗначениеЗаполнено(МассивОтбора));
	СписокОтбора.Параметры.УстановитьЗначениеПараметра(ИмяПараметраЗапроса, МассивОтбора);
	
КонецПроцедуры

Процедура НайтиДобавитьПараметрВСтруктуру(Структура, Знач ИмяПараметра, Знач Значение = "")
	
	Если Не Структура.Свойство(ИмяПараметра) Тогда
		Структура.Вставить(ИмяПараметра, Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСвойстваСтруктурыСервер(Знач Структура, Знач ИмяСвойства, Знач ЗначениеПоУмолчанию = Неопределено)
	
	Если Структура <> Неопределено Тогда
		
		Если Структура.Свойство(ИмяСвойства) Тогда
			Возврат Структура[ИмяСвойства];
		Иначе
			Возврат ЗначениеПоУмолчанию;		
		КонецЕсли;
		
	Иначе	
	    Возврат ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти