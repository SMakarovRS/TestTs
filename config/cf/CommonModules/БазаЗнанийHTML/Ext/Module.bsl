////////////////////////////////////////////////////////////////////////////////
// HTML работа с базой знаний.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ СТРАНИЦ БАЗЫ ЗНАНИЙ

// Возвращает готовый контент для вывода на главной странице
//
// Параметры:
//	ПараметрыСтраницы - Структура
//		ОснКартинки - Структура. Основные картинки базы знаний
//			Ключ - имя картинки
//			Значение - путь к картинке
//		
Функция ПолучитьКонтентГлавнойСтраницы(ПараметрыКонтента) Экспорт
	
	ПустаяКатегория	= Справочники.КатегорииБазыЗнаний.ПустаяСсылка();
	
	#Область ТекстНовости
	ПараметрыБлока	= Новый Структура("ОснКартинки, ГлавнаяСтраница",
		ПараметрыКонтента.ОснКартинки,
		Истина);
	ТекстНовости	= ПолучитьБлокНовости(ПараметрыБлока);
	#КонецОбласти
	
	#Область ТекстКатегории
	// Командная панель
	ДанныеПанели	= ПолучитьКоманднуюПанель_Категория(ПараметрыКонтента.ОснКартинки, Неопределено, "Добавить");
	КоманднаяПанель	= ПолучитьHTML_КоманднаяПанель(ПараметрыКонтента.ОснКартинки, ДанныеПанели);
	
	// Категории
	НастройкаОтбора	= Новый Массив;
	БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(НастройкаОтбора, "Родитель", ПустаяКатегория);
	
	ТаблицаКатегории = БазаЗнаний.ПолучитьКатегории(НастройкаОтбора);
	
	ПараметрыВывода	= Новый Структура("КоманднаяПанель", КоманднаяПанель);
	ТекстКатегории	= ПолучитьHTML_Категории(ПараметрыКонтента.ОснКартинки, ТаблицаКатегории, ПараметрыВывода);
	#КонецОбласти
	
	#Область ТекстТеги
	ТекстТеги		= ПолучитьHTML_Теги(Неопределено);
	#КонецОбласти
	
	#Область ТекстСтатьи
	СтруктураСтатей	= ПолучитьСтатьиГлавнойСтраницы();
	ТекстСтатьи		= ПолучитьHTML_СтатьиТитульнойСтраницы(ПараметрыКонтента.ОснКартинки, СтруктураСтатей);
	#КонецОбласти
	
	Возврат ТекстНовости + ТекстКатегории + ТекстТеги + ТекстСтатьи;
	
КонецФункции

// Возвращает готовый контент для вывода на странице по заданной категории
//
// Параметры:
//	ПараметрыКонтента - Структура
//		Ссылка - Справочники.КатегорииБазыЗнаний
//		ОснКартинки - Структура
//			Ключ - имя картинки
//			Значение - путь к картинке
//		
Функция ПолучитьКонтентКатегории(ПараметрыКонтента) Экспорт
	
	#Область ТекстПуть
	МассивПуть		= ПолучитьПутьТекущейСтраницы(ПараметрыКонтента.Ссылка);
	ТекстПуть		= ПолучитьHTML_Путь(ПараметрыКонтента.ОснКартинки, МассивПуть);
	#КонецОбласти
	
	#Область ТекстКатегории
	// Командная панель
	ПараметрыПанели	= Новый Структура("Ссылка", ПараметрыКонтента.Ссылка);
	КнопкиПанели	= ПолучитьКоманднуюПанель_Категория(
		ПараметрыКонтента.ОснКартинки,
		ПараметрыПанели,		
		"Добавить, Изменить, Подписаться");
	КоманднаяПанель	= ПолучитьHTML_КоманднаяПанель(ПараметрыКонтента.ОснКартинки, КнопкиПанели);
	
	// Категории
	НастройкаОтбора	= Новый Массив;
	БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(НастройкаОтбора, "Родитель", ПараметрыКонтента.Ссылка);
	
	ТаблицаКатегории = БазаЗнаний.ПолучитьКатегории(НастройкаОтбора);
	
	ПараметрыВывода	= Новый Структура("КоманднаяПанель, Категория", 
		КоманднаяПанель,
		ПараметрыКонтента.Ссылка);
	ТекстКатегории	= ПолучитьHTML_Категории(
		ПараметрыКонтента.ОснКартинки,
		ТаблицаКатегории,
		ПараметрыВывода);
	#КонецОбласти
	
	#Область ТекстТеги
	ТекстТеги = ПолучитьHTML_Теги(ПараметрыКонтента.Ссылка);
	#КонецОбласти
	
	#Область ТекстСтатьи
	ПараметрыБлока = Новый Структура("ОснКартинки, ВидСтраницы, Категория, Количество",
		ПараметрыКонтента.ОснКартинки,
		"category_articles",
		ПараметрыКонтента.Ссылка,
		20);
	ТекстСтатьи = ПолучитьБлокСтатьи(ПараметрыБлока);
	#КонецОбласти

	// Итоговый результат
	Возврат ТекстПуть + ТекстКатегории + ТекстТеги + ТекстСтатьи;
	
КонецФункции

// Возвращает готовый контент для вывода на странице по виду рейтинга
//
// Параметры:
//	ПараметрыКонтента - Структура
//		ОснКартинки - Структура
//			Ключ - имя картинки
//			Значение - путь к картинке
//		ВидСтраницы - Строка
//			featured_articles, recently_added, most_popular, top_rated
//		
Функция ПолучитьКонтентСтатьиПоРейтингу(ПараметрыКонтента) Экспорт
	
	ПараметрыПоВиду	= БазаЗнанийHTMLКлиентСервер.ПолучитьПараметрыВыводаСтраницыПоВиду(ПараметрыКонтента.ВидСтраницы);
	
	#Область ТекстПуть
	МассивПуть = Новый Массив;
	МассивПуть.Добавить("home");
	МассивПуть.Добавить(ПараметрыПоВиду.Заголовок);
	ТекстПуть = ПолучитьHTML_Путь(ПараметрыКонтента.ОснКартинки, МассивПуть);
	#КонецОбласти
	
	#Область ТекстСтатьи
	ПараметрыБлока = Новый Структура("ОснКартинки, ВидСтраницы, Количество, Кнопки",
		ПараметрыКонтента.ОснКартинки,
		ПараметрыКонтента.ВидСтраницы,
		20,
		"");
	ТекстСтатьи = ПолучитьБлокСтатьиПоРейтингу(ПараметрыБлока);
	#КонецОбласти
	
	// Итоговый результат
	Возврат ТекстПуть + ТекстСтатьи;
	
КонецФункции

// Возвращает готовый контент для вывода на странице по заданной статье
//
// Параметры:
//	ПараметрыКонтента - Структура
//		ОснКартинки - Структура
//			Ключ - имя картинки
//			Значение - путь к картинке
//		Ссылка - СправочникСсылка.СтатьиБазыЗнаний
//		ДопКартинки - Структура. Возвращаются адреса во временном хранилище на картинки в статье
//			ОписаниеФайла - Тип: ОписаниеПередаваемогоФайла
//			ДатаОбновления - Дата
//		
Функция ПолучитьКонтентСтатьи(ПараметрыКонтента) Экспорт		
	
	#Область ТекстПуть
	МассивПуть		= ПолучитьПутьТекущейСтраницы(ПараметрыКонтента.Ссылка);
	ТекстПуть		= ПолучитьHTML_Путь(ПараметрыКонтента.ОснКартинки, МассивПуть);
	#КонецОбласти
	
	#Область ТекстСтатьи
	// Командная панель.
	ПараметрыПанели	= Новый Структура("Ссылка", ПараметрыКонтента.Ссылка);
	КнопкиПанели	= ПолучитьКоманднуюПанель_Статья(
		ПараметрыКонтента.ОснКартинки,
		ПараметрыПанели,
		"Изменить, Оценить, СкопироватьСсылку");
	КоманднаяПанель	= ПолучитьHTML_КоманднаяПанель(ПараметрыКонтента.ОснКартинки, КнопкиПанели);		
	ПараметрыВывода	= Новый Структура("КоманднаяПанель", КоманднаяПанель);
	ТекстСтатьи		= ПолучитьHTML_ОписаниеСтатьи(ПараметрыКонтента.ОснКартинки, ПараметрыКонтента.Ссылка, ПараметрыВывода);
	#КонецОбласти
	
	Возврат ТекстПуть + ТекстСтатьи;

КонецФункции

// Возвращает готовый контент для вывода на странице по ключевому слову
//
// Параметры:
//	ПараметрыКонтента - Структура
//		ОснКартинки - Структура
//			Ключ - имя картинки
//			Значение - путь к картинке
//		Ссылка - СправочникСсылка.СтатьиБазыЗнаний
//		
Функция ПолучитьКонтентКлючевогоСлова(ПараметрыКонтента) Экспорт
	
	#Область ТекстПуть
	МассивПуть		= ПолучитьПутьТекущейСтраницы(ПараметрыКонтента.КлючевоеСлово);
	Если ЗначениеЗаполнено(ПараметрыКонтента.Категория) Тогда
		МассивПуть.Вставить(1, ПараметрыКонтента.Категория);
	КонецЕсли;
	ТекстПуть		= ПолучитьHTML_Путь(ПараметрыКонтента.ОснКартинки, МассивПуть);
	#КонецОбласти
	
	#Область ТекстСтатьи
	ТаблицаСтатей	= ПолучитьСтатьиПоКлючевомуСлову(ПараметрыКонтента.КлючевоеСлово, ПараметрыКонтента.Категория);
	ПараметрыВывода	= Новый Структура("Информация, Заголовок, КраткийТекст",
		"КраткоеОписание",
		СтрШаблон(НСтр("ru = 'Статьи по ключевому слову: %1'"), Строка(ПараметрыКонтента.КлючевоеСлово)),
		Истина);
	ТекстСтатьи		= ПолучитьHTML_Статьи_Кратко(ПараметрыКонтента.ОснКартинки, ТаблицаСтатей, ПараметрыВывода);
	ТекстСтатьи	 	= "<div id='articles'>" + ТекстСтатьи + "</div>";
	#КонецОбласти
	
	// Итоговый результат
	Возврат ТекстПуть + ТекстСтатьи;
	
КонецФункции

// Возвращает готовый контент для вывода на странице новостной ленты
//
// Параметры:
//	ПараметрыКонтента - Структура
//		ОснКартинки - Структура
//			Ключ - имя картинки
//			Значение - путь к картинке
//		
Функция ПолучитьКонтентНовостнаяЛента(ПараметрыКонтента) Экспорт
	
	#Область ТекстПуть
	МассивПуть = Новый Массив;
	МассивПуть.Добавить("home");
	МассивПуть.Добавить("Новостная лента");
	ТекстПуть		= ПолучитьHTML_Путь(ПараметрыКонтента.ОснКартинки, МассивПуть);
	#КонецОбласти
	
	#Область ТекстНовости
	ПараметрыБлока	= Новый Структура("ОснКартинки, ГлавнаяСтраница, Количество",
		ПараметрыКонтента.ОснКартинки,
		Ложь,
		20);
	ТекстНовости	= ПолучитьБлокНовости(ПараметрыБлока);
	#КонецОбласти
	
	Возврат ТекстПуть + ТекстНовости;
	
КонецФункции

// Возвращает готовый контент для вывода на странице по заданной новости
//
// Параметры:
//	ПараметрыКонтента - Структура
//		ОснКартинки - Структура
//			Ключ - имя картинки
//			Значение - путь к картинке
//		Ссылка - СправочникСсылка.НовостиБазыЗнаний
//		ДопКартинки - Структура. Возвращаются адреса во временном хранилище на картинки в статье
//			ОписаниеФайла - Тип: ОписаниеПередаваемогоФайла
//			ДатаОбновления - Дата
//		
Функция ПолучитьКонтентНовости(ПараметрыКонтента) Экспорт
	
	#Область ТекстПуть
	ПараметрыСсылки = Новый Структура("pagenum", "1");
	АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("news", ПараметрыСсылки);
	НовостнаяЛента	= "<a href='" + АдресСсылки + "'>" + НСтр("ru='Новостная лента'") + "</a>";
	
	МассивПуть = Новый Массив;
	МассивПуть.Добавить("home");
	МассивПуть.Добавить(НовостнаяЛента);
	МассивПуть.Добавить(Строка(ПараметрыКонтента.Ссылка));
	ТекстПуть		= ПолучитьHTML_Путь(ПараметрыКонтента.ОснКартинки, МассивПуть);
	#КонецОбласти
	
	#Область ТекстНовости
	ПараметрыВывода	= Новый Структура("КоманднаяПанель", "");
	ТекстНовости	= ПолучитьHTML_ОписаниеНовости(ПараметрыКонтента.ОснКартинки, ПараметрыКонтента.Ссылка, ПараметрыВывода);
	#КонецОбласти
	
	Возврат ТекстПуть + ТекстНовости;
	
КонецФункции

Функция ПолучитьКонтентПрофиляПользователя(Параметры) Экспорт
	
	// Путь к странице
	МассивПуть		= ПолучитьПутьТекущейСтраницы(Параметры.Пользователь);
	ТекстПуть		= ПолучитьHTML_Путь(Параметры.ОснКартинки, МассивПуть);
	
	// Профиль
	ТекстПрофиля	= ПолучитьHTML_Профиль(Параметры.ОснКартинки, Параметры.Пользователь);

	// Итоговый результат
	ТекстСтраницы	= ТекстПуть + ТекстПрофиля;
	Возврат ТекстСтраницы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ БЛОКОВ СТРАНИЦ БАЗЫ ЗНАНИЙ

Функция ПолучитьБлокКомментарии(Знач Параметры = Неопределено) Экспорт
	
	#Область ПодготовкаДанных
	ДанныеСтатьи = БазаЗнаний.ПолучитьДанныеСтатьи(Параметры.Ссылка, "Комментарии");
	ДанныеСтатьи.Вставить("Ссылка", Параметры.Ссылка);
	#КонецОбласти
		
	#Область ТекстHTML
	ПараметрыВерстки	= Новый Структура("Картинки", Параметры.ДопКартинки);
	ТекстHTML = Комментарии.ПолучитьHTML_Комментарии(Параметры.ОснКартинки, ДанныеСтатьи, ПараметрыВерстки);
	#КонецОбласти
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ПолучитьБлокНовости(Знач Параметры = Неопределено) Экспорт
	
	ПустаяСсылка	= Справочники.НовостиБазыЗнаний.ПустаяСсылка();
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ГлавнаяСтраница"	, Ложь);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Количество"			, 7);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПредыдущаяСтраница"	, 0);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ТекущаяСтраница"		, 1);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Ссылка"				, ПустаяСсылка);
	
	#Область ПодготовкаДанных
	СтраницаНазад = (Параметры.ПредыдущаяСтраница > Параметры.ТекущаяСтраница);
	
	// Настройка упорядочивания
	НастройкиПорядка = "Дата ВОЗР, Ссылка ВОЗР";
	Если СтраницаНазад Тогда
		НапрСравнения		= ВидСравненияКомпоновкиДанных.Больше;
		НастройкиПорядка	= СтрЗаменить(НастройкиПорядка, " ВОЗР", "");
	Иначе 
		НапрСравнения		= ВидСравненияКомпоновкиДанных.Меньше;
		НастройкиПорядка	= СтрЗаменить(НастройкиПорядка, " ВОЗР", " УБЫВ");
	КонецЕсли;
	
	// Настройка отбора
	НастройкиОтбора		= Новый Массив;
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Ссылка, "Дата, Ссылка");
		
		ГруппаИЛИ = БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(НастройкиОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ.Элементы, "Дата", Реквизиты.Дата, НапрСравнения);
		
		ГруппаИ = БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(ГруппаИЛИ.Элементы);
		БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИ.Элементы, "Дата", Реквизиты.Ссылка, ВидСравненияКомпоновкиДанных.Равно);
		БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИ.Элементы, "Ссылка", Реквизиты.Ссылка, НапрСравнения);
	КонецЕсли;
	
	// Запрос данных
	ТаблицаНовостей	= БазаЗнаний.ПолучитьНовости(НастройкиОтбора, НастройкиПорядка, Параметры.Количество + 1);
	КоличествоСтрок	= ТаблицаНовостей.Количество();
	Если КоличествоСтрок <= Параметры.Количество Тогда
		КонецСтраниц = ?(СтраницаНазад, Ложь, Истина);
	Иначе
		КонецСтраниц = Ложь;
		КоличествоСтрок = КоличествоСтрок - 1;
		ТаблицаНовостей.Удалить(КоличествоСтрок);
	КонецЕсли;
	#КонецОбласти
	
	#Область КоманднаяПанель
	ПараметрыПанели = Новый Структура("Количество, НомерСтраницы, ПерваяЗапись, ПоследняяЗапись, ГлавнаяСтраница, Конец",
		Параметры.Количество,
		Параметры.ТекущаяСтраница,
		?(КоличествоСтрок = 0, ПустаяСсылка, ТаблицаНовостей[0].Ссылка),
		?(КоличествоСтрок = 0, ПустаяСсылка, ТаблицаНовостей[КоличествоСтрок-1].Ссылка),
		Параметры.ГлавнаяСтраница,
		КонецСтраниц);
	ДанныеПанели	= ПолучитьКоманднуюПанель_Новости(Параметры.ОснКартинки, ПараметрыПанели, "ПереключениеСтраниц");
	КоманднаяПанель	= ПолучитьHTML_КоманднаяПанель(Параметры.ОснКартинки, ДанныеПанели);
	#КонецОбласти
	
	#Область ТекстHTML
	ПараметрыВерстки	= Новый Структура("КоманднаяПанель, ГлавнаяСтраница",
		КоманднаяПанель,
		Параметры.ГлавнаяСтраница);
	ТекстHTML			= ПолучитьHTML_Новости(Параметры.ОснКартинки, ТаблицаНовостей, ПараметрыВерстки);
	#КонецОбласти
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ПолучитьБлокСтатьи(Знач Параметры = Неопределено) Экспорт
	
	ПустаяСсылка	= Справочники.СтатьиБазыЗнаний.ПустаяСсылка();
	ПустаяКатегория	= Справочники.КатегорииБазыЗнаний.ПустаяСсылка();
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ВидСтраницы"			, "category_articles");
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Количество"			, 20);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПредыдущаяСтраница"	, 0);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ТекущаяСтраница"		, 1);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Ссылка"				, ПустаяСсылка);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Категория"			, ПустаяКатегория);
	
	ПараметрыПоВиду	= БазаЗнанийHTMLКлиентСервер.ПолучитьПараметрыВыводаСтраницыПоВиду(Параметры.ВидСтраницы);
	
	#Область ПодготовкаДанных
	СтраницаНазад	= (Параметры.ПредыдущаяСтраница > Параметры.ТекущаяСтраница);
	Направление		= ?(СтраницаНазад, "УБЫВ", "");
	
	// Настройка упорядочивания.
	НастройкиПорядка	= ПолучитьНастройкуПорядкаПоВидуСтраницыСтатей(Параметры.ВидСтраницы, Направление);
	
	// Настройка отбора.
	НастройкиОтбора		= ПолучитьНастройкуОтбораПоВидуСтраницыСтатей(Параметры.ВидСтраницы, Направление, Параметры.Ссылка);
	Если Параметры.ВидСтраницы = "category_articles" Тогда
		БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(НастройкиОтбора, "Категории.Категория", Параметры.Категория, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	// Запрос данных.
	ТаблицаСтатей	= БазаЗнаний.ПолучитьСтатьи(НастройкиОтбора, НастройкиПорядка, Параметры.Количество + 1, СтраницаНазад);
	КоличествоСтрок	= ТаблицаСтатей.Количество();
	Если КоличествоСтрок <= Параметры.Количество Тогда
		КонецСтраниц = ?(СтраницаНазад, Ложь, Истина);
	Иначе
		КонецСтраниц = Ложь;
		КоличествоСтрок = КоличествоСтрок - 1;
		ТаблицаСтатей.Удалить(КоличествоСтрок);
	КонецЕсли;
	
	ТаблицаСтатей.Сортировать(ПараметрыПоВиду.Порядок);
	#КонецОбласти
	
	#Область КоманднаяПанель
	ПараметрыПанели = Новый Структура("ВидСтраницы, Количество, НомерСтраницы, ПерваяЗапись, ПоследняяЗапись, Конец, Категория",
		Параметры.ВидСтраницы,
		Параметры.Количество,
		Параметры.ТекущаяСтраница,
		?(КоличествоСтрок = 0, ПустаяСсылка, ТаблицаСтатей[0].Ссылка),
		?(КоличествоСтрок = 0, ПустаяСсылка, ТаблицаСтатей[КоличествоСтрок-1].Ссылка),
		КонецСтраниц,
		Параметры.Категория);
	ДанныеПанели	= ПолучитьКоманднуюПанель_Статьи(Параметры.ОснКартинки, ПараметрыПанели, ПараметрыПоВиду.Кнопки);
	КоманднаяПанель	= ПолучитьHTML_КоманднаяПанель(Параметры.ОснКартинки, ДанныеПанели);
	#КонецОбласти
	
	#Область ТекстHTML
	ПараметрыВерстки	= Новый Структура("Информация, Заголовок, КраткийТекст, КоманднаяПанель",
		ПараметрыПоВиду.Информация,
		ПараметрыПоВиду.Заголовок,
		Истина,
		КоманднаяПанель);
	ТекстHTML		= ПолучитьHTML_Статьи_Кратко(Параметры.ОснКартинки, ТаблицаСтатей, ПараметрыВерстки);
	ТекстHTML	 	= "<div id='articles' style='margin-right:0'>" + ТекстHTML + "</div>";
	#КонецОбласти
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ПолучитьБлокСтатьиПоРейтингу(Знач Параметры = Неопределено) Экспорт
	
	ПустаяСсылка	= Справочники.СтатьиБазыЗнаний.ПустаяСсылка();
	ПустаяКатегория	= Справочники.КатегорииБазыЗнаний.ПустаяСсылка();
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ВидСтраницы"			, "category_articles");
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Количество"			, 20);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПредыдущаяСтраница"	, 0);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ТекущаяСтраница"		, 1);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Ссылка"				, ПустаяСсылка);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Категория"			, ПустаяКатегория);
	
	ПараметрыПоВиду	= БазаЗнанийHTMLКлиентСервер.ПолучитьПараметрыВыводаСтраницыПоВиду(Параметры.ВидСтраницы);
	
	#Область ПодготовкаДанных
	СтраницаНазад	= (Параметры.ПредыдущаяСтраница > Параметры.ТекущаяСтраница);
	Направление		= ?(СтраницаНазад, "УБЫВ", "");
	
	// Настройка упорядочивания.
	//НастройкиПорядка	= ПолучитьНастройкуПорядкаПоВидуСтраницыСтатей(Параметры.ВидСтраницы, Направление);
	
	// Настройка отбора.
	НастройкиОтбора		= ПолучитьНастройкуОтбораПоВидуСтраницыСтатей(Параметры.ВидСтраницы, Направление, Параметры.Ссылка);
	Если Параметры.ВидСтраницы = "category_articles" Тогда
		БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(НастройкиОтбора, "Категории.Категория", Параметры.Категория, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	// Запрос данных.	
	ТаблицаСтатей   = БазаЗнаний.ПолучитьСтатьиПоСтатистике(Параметры.ВидСтраницы, , 20, "вперед");		
	КоличествоСтрок	= ТаблицаСтатей.Количество();
	Если КоличествоСтрок <= Параметры.Количество Тогда
		КонецСтраниц = ?(СтраницаНазад, Ложь, Истина);
	Иначе
		КонецСтраниц = Ложь;
		КоличествоСтрок = КоличествоСтрок - 1;
		ТаблицаСтатей.Удалить(КоличествоСтрок);
	КонецЕсли;
	
	Если ТаблицаСтатей.Количество() = 0 Тогда
		Возврат "<div id='articles' style='margin-right:0'></div>";
	КонецЕсли;
	
	ТаблицаСтатей.Сортировать(ПараметрыПоВиду.Порядок);
	#КонецОбласти
	
	#Область КоманднаяПанель
	ПараметрыПанели = Новый Структура("ВидСтраницы, Количество, НомерСтраницы, ПерваяЗапись, ПоследняяЗапись, Конец, Категория",
		Параметры.ВидСтраницы,
		Параметры.Количество,
		Параметры.ТекущаяСтраница,
		?(КоличествоСтрок = 0, ПустаяСсылка, ТаблицаСтатей[0].Ссылка),
		?(КоличествоСтрок = 0, ПустаяСсылка, ТаблицаСтатей[КоличествоСтрок-1].Ссылка),
		КонецСтраниц,
		Параметры.Категория);
	ДанныеПанели	= ПолучитьКоманднуюПанель_Статьи(Параметры.ОснКартинки, ПараметрыПанели, ПараметрыПоВиду.Кнопки);
	КоманднаяПанель	= ПолучитьHTML_КоманднаяПанель(Параметры.ОснКартинки, ДанныеПанели);
	#КонецОбласти
	
	#Область ТекстHTML
	ПараметрыВерстки	= Новый Структура("Информация, Заголовок, КраткийТекст, КоманднаяПанель",
		ПараметрыПоВиду.Информация,
		ПараметрыПоВиду.Заголовок,
		Истина,
		КоманднаяПанель);
	ТекстHTML		= ПолучитьHTML_Статьи_Кратко(Параметры.ОснКартинки, ТаблицаСтатей, ПараметрыВерстки);
	ТекстHTML	 	= "<div id='articles' style='margin-right:0'>" + ТекстHTML + "</div>";
	#КонецОбласти
	
	Возврат ТекстHTML;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////

#Область ПолучитьHTML

// Формирует текст HTML блока "Путь"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивПуть - Массив
//		СправочникСсылка.СтатьиБазыЗнаний, СправочникСсылка.КатегорииБазыЗнаний, Строка
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_Путь(Знач АдресаКартинок, Знач МассивПуть)
	
	Если МассивПуть.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПутьКСтранице = "";
	Для Каждого ЗначениеПути Из МассивПуть Цикл
		ПутьКСтранице = ПутьКСтранице + ?(ПустаяСтрока(ПутьКСтранице), "", " &rArr; ");
		
		ТипЗначения = ТипЗнч(ЗначениеПути);
		Если ЗначениеПути = "home" Тогда
			АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("home");
			ПутьКСтранице	= ПутьКСтранице + "<a href='" + АдресСсылки + "'>Главная</a>";
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.КатегорииБазыЗнаний") Тогда
			ПараметрыСсылки	= Новый Структура("id", Строка(ЗначениеПути.УникальныйИдентификатор()));
			АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("category", ПараметрыСсылки);
			ПутьКСтранице	= ПутьКСтранице + "<a href='" + АдресСсылки + "'>" + Строка(ЗначениеПути) + "</a>";
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда
			ПараметрыСсылки	= Новый Структура("id", Строка(ЗначениеПути.УникальныйИдентификатор()));
			АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("article", ПараметрыСсылки);
			ПутьКСтранице = ПутьКСтранице + "<a href='" + АдресСсылки + "'>" + Строка(ЗначениеПути) + "</a>";
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Теги") Тогда
			ПараметрыСсылки	= Новый Структура("id", Строка(ЗначениеПути.УникальныйИдентификатор()));
			АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("tag", ПараметрыСсылки);
			ПутьКСтранице = ПутьКСтранице + "<a href='" + АдресСсылки + "'>" + Строка(ЗначениеПути) + "</a>";
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Пользователи") Тогда
			ПараметрыСсылки	= Новый Структура("id", Строка(ЗначениеПути.УникальныйИдентификатор()));
			АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("user", ЗначениеПути);
			ПутьКСтранице = ПутьКСтранице + "<a href='" + АдресСсылки + "'>" + Строка(ЗначениеПути) + "</a>";
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.НовостиБазыЗнаний") Тогда
			ПараметрыСсылки	= Новый Структура("id", Строка(ЗначениеПути.УникальныйИдентификатор()));
			АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("news_item", ЗначениеПути);
			ПутьКСтранице = ПутьКСтранице + "<a href='" + АдресСсылки + "'>" + Строка(ЗначениеПути) + "</a>";
		ИначеЕсли ТипЗначения = Тип("Строка") Тогда 
			ПутьКСтранице = ПутьКСтранице + ЗначениеПути;
		КонецЕсли;
	КонецЦикла;
	
	ТекстСтраницы = "
	|<div id='page_path'>
	|	<img src='data:image/png;base64," + Base64Строка(АдресаКартинок.Путь.ПолучитьДвоичныеДанные()) + "' class='flt_l'>
	|	<div>" + ПутьКСтранице + "</div>
	|</div>";
	
	Возврат ТекстСтраницы;
	
КонецФункции

// Формирует текст HTML блока "Новостная лента"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивНовостей - Массив
//		Структура
//			Идентификатор - УникальныйИдентификатор
//			Наименование - Строка
//			Описание - Строка
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_Новости(Знач АдресаКартинок, Знач ТаблицаНовостей, Знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ГлавнаяСтраница", Ложь);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "КоманднаяПанель", "");
	
	Если Параметры.ГлавнаяСтраница Тогда
		ПараметрыСсылки = Новый Структура("pagenum", "1");
		АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("news", ПараметрыСсылки);
		ТекстЗаголовок	= "<a href='" + АдресСсылки + "'>" + НСтр("ru='Новостная лента'") + "</a>";
	Иначе 
		ТекстЗаголовок	= НСтр("ru='Новостная лента'");
	КонецЕсли;
	
	ТекстНовости	= 
	"<div id='news'>
	|	<h1>" + Параметры.КоманднаяПанель + ТекстЗаголовок + "</h1>
	|";
	
	ПеречислениеМенеджер = Перечисления.ВидыНовостейБазыЗнаний;
	КартинкиПоВиду = Новый Соответствие;
	КартинкиПоВиду.Вставить(ПеречислениеМенеджер.Создание	, АдресаКартинок.НовостьСоздание);
	КартинкиПоВиду.Вставить(ПеречислениеМенеджер.Изменение	, АдресаКартинок.НовостьИзменение);
	КартинкиПоВиду.Вставить(ПеречислениеМенеджер.Удаление	, АдресаКартинок.НовостьУдаление);
	КартинкиПоВиду.Вставить(ПеречислениеМенеджер.Оповещение	, АдресаКартинок.НовостьОповещение);
	КартинкиПоВиду.Вставить(ПеречислениеМенеджер.Прочее		, АдресаКартинок.НовостьПрочее);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНовостей Цикл
		ПараметрыСсылки	= Новый Структура("id", Строка(СтрокаТаблицы.Идентификатор));
		АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("news_item", ПараметрыСсылки);
		
		СтильСсылки		= "";
		Если СтрокаТаблицы.Просмотрено Тогда
			СтильСсылки = "color:#fa7373; ";
		КонецЕсли;
		
		ПутьККартинке = КартинкиПоВиду.Получить(СтрокаТаблицы.Вид);
		Если ПутьККартинке = Неопределено Тогда
			ПутьККартинке = АдресаКартинок.НовостьПрочее;
		КонецЕсли;
		
		СтрИнформация	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' добавлена: %1; автор: %2; просмотров: %3.'"),
			Формат(СтрокаТаблицы.Дата, "ДЛФ=D"),
			Строка(СтрокаТаблицы.Автор),
			Формат(СтрокаТаблицы.Просмотров, "ЧН=0; ЧГ="));
		
		ТекстНовости = ТекстНовости + "
		|	<div class='news'>
		|		<div class='descr flt_l'>		
		|			<img src='data:image/png;base64," + Base64Строка(ПутьККартинке.ПолучитьДвоичныеДанные()) + "' class='flt_l'>
		|			<a style='" + СтильСсылки + "' href='" + АдресСсылки + "'>" + СокрЛП(СтрокаТаблицы.Заголовок) + "</a>
		|		</div>
		|		<div class='info'>
		|			<span style='font-size:13px;'>|</span> " + СтрИнформация + "
		|		</div>
		|		[[КраткийТекстНовости]]
		|	</div>";
		
		Если Параметры.ГлавнаяСтраница Тогда
			КраткийТекстНовости	= "";
		Иначе
			КраткийТекстНовости	= "<div class='text'>" + Лев(СтрокаТаблицы.Текст, 300) + "..." + "</div>";			
		КонецЕсли;
		
		ТекстНовости = СтрЗаменить(ТекстНовости, "[[КраткийТекстНовости]]", КраткийТекстНовости);
	КонецЦикла;
	
	ТекстНовости = ТекстНовости + "
	|</div>";
	
	Возврат ТекстНовости;
	
КонецФункции

// Формирует текст HTML блока "Новостная лента"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивНовостей - Массив
//		Структура
//			Идентификатор - УникальныйИдентификатор
//			Наименование - Строка
//			Описание - Строка
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_ОписаниеНовости(Знач АдресаКартинок, Знач НовостьСсылка, Знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "КоманднаяПанель", "");
	ДанныеНовости	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовостьСсылка, 
		"Наименование, Дата, ТекстHTML, Важность, Автор");
	
	ТекстНовости	= 
	"<div id='newsitem'>
	|	<h1>" + Параметры.КоманднаяПанель + ДанныеНовости.Наименование + "</h1>
	|	<div class='text'>
	|		" + ДанныеНовости.ТекстHTML;
	
	ТекстНовости = ТекстНовости + "	</div>
	|</div>";
	
	Возврат ТекстНовости;
	
КонецФункции

// Формирует текст HTML блока "Категории"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивКатегорий - Массив
//		Структура
//			Идентификатор - УникальныйИдентификатор
//			Наименование - Строка
//			КоличествоСтатей - Число
//			Описание - Строка
// 	Параметры - Структура.
//		КнопкаДобавить - Булево
//		КнопкаИзменить - Булево
//		Категория - СправочникСсылка.КатегорииБазыЗнаний
//		Заголовок - Строка (возможно использование HTML)
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_Категории(Знач АдресаКартинок, Знач ТаблицаКатегории, Знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ЗаголовокПоУмолчанию = ?(Параметры.Свойство("Категория") И ЗначениеЗаполнено(Параметры.Категория), 
		"Категория: " + Строка(Параметры.Категория),
		"Категории");
	
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Категория"			, Неопределено);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Заголовок"			, ЗаголовокПоУмолчанию);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "КоманднаяПанель"	, "");
	
	// КатегорияРодитель		= Параметры.Категория;
	// ИдентификаторРодитель	= ?(НЕ ЗначениеЗаполнено(КатегорияРодитель), "", 
	//	Строка(КатегорияРодитель.УникальныйИдентификатор()));
	
	Количество	= ТаблицаКатегории.Количество();
	
	ТекстСтраницы = "
	|<div id='categories'>
	|	<h1>" + Параметры.КоманднаяПанель + Параметры.Заголовок + "</h1>
	|	[[ТаблицаКатегорий]]
	|</div>
	|";
	
	Если Количество = 0 Тогда
		Возврат СтрЗаменить(ТекстСтраницы, "[[ТаблицаКатегорий]]", "");
	КонецЕсли;
	
	КоличествоНаСтраницу = 0;
	Если Количество > 6 Тогда
		ТекстВнутр = "
		|			<td>[[Категории_1_3]]</td>
		|			<td>[[Категории_4_6]]</td>
		|			<td>[[Категории_7_9]]</td>
		|";
		КоличествоНаСтраницу = Цел(Количество / 3);
	ИначеЕсли Количество > 3 Тогда
		ТекстВнутр = "
		|			<td>[[Категории_1_3]]</td>
		|			<td>[[Категории_4_6]]</td>
		|";
		КоличествоНаСтраницу = Цел(Количество / 2);
	Иначе 
		ТекстВнутр = "
		|			<td>[[Категории_1_3]]</td>
		|";
		КоличествоНаСтраницу = Количество;
	КонецЕсли;
	
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "[[ТаблицаКатегорий]]", "
	|	<table>
	|		<tr>" + ТекстВнутр + "</tr>
	|	</table>
	|");
	
	// Добавим записи по категориям
	Категории_1_3 = "";
	Категории_4_6 = "";
	Категории_7_9 = "";
	
	НомерСтраницы	= 1;
	Счетчик			= 0;
	Для Каждого СтрокаТаблицы Из ТаблицаКатегории Цикл
		Счетчик = Счетчик + 1;
		Если Счетчик > КоличествоНаСтраницу Тогда
			Счетчик = 0;
			НомерСтраницы = НомерСтраницы + 1;
		КонецЕсли;
		
		Идентификатор	= Строка(СтрокаТаблицы.Идентификатор);
		АдресКартинки	= ?(СтрокаТаблицы.ТипКатегории = Перечисления.ТипыКатегорийСтатейБазыЗнаний.Публичная, 
			АдресаКартинок.Категория, АдресаКартинок.КатегорияПриватная);
		
		ПараметрыСсылки	= Новый Структура("id", Идентификатор);
		АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("category", ПараметрыСсылки);
		
		ЕстьВИзбранном	= (СтрокаТаблицы.Избранное <> Неопределено);
		
		ТекстКатегории = "
		|				<div class='category'>
		|					<div class='title'>
		|						<div class='stat flt_r'>
		|							" + ?(ЕстьВИзбранном, "<img src='data:image/png;base64," 
		+ Base64Строка(АдресаКартинок.Кнопка.ПолучитьДвоичныеДанные()) 
		+ "' class='flt_l' title='Вы подписаны на данную категорию'>", "") + "
		|							<div class='text' title='Количество статей'>" 
		+ Формат(СтрокаТаблицы.КоличествоСтатей, "ЧДЦ=; ЧН=0; ЧГ=") + "</div>
		|						</div>
		|						<img src='data:image/png;base64," + Base64Строка(АдресКартинки.ПолучитьДвоичныеДанные()) 
		+ "' class='flt_l'>
		|						<h2><a href='" + АдресСсылки + "'>" + СтрокаТаблицы.Наименование + "</a></h2>
		|					</div>
		|					" + ?(Количество > 9, "", "<div class='info'>" + СокрЛП(СтрокаТаблицы.Описание) + "</div>") + "
		|				</div>
		|			";
		
		Если НомерСтраницы = 1 Тогда
			Категории_1_3 = Категории_1_3 + ТекстКатегории;
		ИначеЕсли НомерСтраницы = 2 Тогда
			Категории_4_6 = Категории_4_6 + ТекстКатегории;
		ИначеЕсли НомерСтраницы = 3 Тогда
			Категории_7_9 = Категории_7_9 + ТекстКатегории;
		КонецЕсли;
	КонецЦикла;
	
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "[[Категории_1_3]]", Категории_1_3);
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "[[Категории_4_6]]", Категории_4_6);
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "[[Категории_7_9]]", Категории_7_9);
	
	Возврат ТекстСтраницы;
	
КонецФункции

// Формирует текст HTML блока "Облако тегов"
Функция ПолучитьHTML_Теги(Знач КатегорияСсылка) Экспорт
	
	ТаблицаТегов = БазаЗнаний.ПолучитьМассивКлючевыхСловПоКатегории(КатегорияСсылка, 30);
	Максимум = ?(ТаблицаТегов.Количество() > 0, ТаблицаТегов[0].Количество, 0);
	
	СтраницаТегов = "
	|<div id='tags'><ul>";
	
	ТаблицаТегов.Сортировать("Наименование");
	Для Каждого СтрокаТаблицы Из ТаблицаТегов Цикл
		НомерТега	= Цел(СтрокаТаблицы.Количество / ?(Максимум = 0, 1, Максимум) * 5);
		
		ПараметрыСсылки	= Новый Структура;
		ПараметрыСсылки.Вставить("id", Строка(СтрокаТаблицы.Тег.УникальныйИдентификатор()));
		Если ЗначениеЗаполнено(КатегорияСсылка) Тогда
			ПараметрыСсылки.Вставить("category", КатегорияСсылка.УникальныйИдентификатор());
		КонецЕсли;
		АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("tag", ПараметрыСсылки);
		
		СтраницаТегов = СтраницаТегов + "
		|	<li class='tag" + Формат(НомерТега, "ЧГ=") + "'><a href='" + АдресСсылки + "'>" 
		+ СокрЛП(СтрокаТаблицы.Наименование) + "</a></li>";
	КонецЦикла;
	
	СтраницаТегов = СтраницаТегов + "</ul></div>";
	
	Возврат ?(ТаблицаТегов.Количество() = 0, "", СтраницаТегов);
	
КонецФункции

// Формирует текст HTML блока "Статьи"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивСтатей - Массив
//		Структура
//			Идентификатор - УникальныйИдентификатор
//			Заголовок - Строка
//			и пр. поля из запроса в процедуре ДополнитьМассивСтатейДанными
//	Параметры
//		Информация - Строка
//			Допустимые значения: любое поле из запроса в процедуре ДополнитьМассивСтатейДанными
//			кроме полей вложенных подзапросов
//		КнопкаДобавить - Булево
//		КнопкаИзменить - Булево
//		Статья - СправочникСсылка.СтатьиБазыЗнаний
//		Заголовок - Строка (возможно использование HTML)
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_Статьи_Кратко(Знач АдресаКартинок, Знач ТаблицаСтатей, Знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ЗаголовокПоУмолчанию = ?(Параметры.Свойство("Статья") И ЗначениеЗаполнено(Параметры.Статья), 
		Строка(Параметры.Статья),
		"Статьи");
	
	Количество	= ТаблицаСтатей.Количество();

	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Статья"			, Неопределено);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Заголовок"		, ЗаголовокПоУмолчанию);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "КраткийТекст"		, Ложь);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "КоманднаяПанель"	, "");
	
	ТекстСтраницы = "
	|	<h1>" + Параметры.КоманднаяПанель + Параметры.Заголовок + "</h1>
	|	[[Статьи]]
	|";
	
	Если Количество = 0 Тогда
		Возврат СтрЗаменить(ТекстСтраницы, "[[Статьи]]", "");
	КонецЕсли;
	
	ТаблицаСтатей.Колонки.Добавить("Опубликована");
	ТаблицаСтатей.Колонки.Добавить("Просмотрена");
	ТаблицаСтатей.Колонки.Добавить("Оценена");
	
	ТекстСтатей		= "";
	Для Каждого СтрокаТаблицы Из ТаблицаСтатей Цикл
		ДополнитьИнформациюПоСтатье(СтрокаТаблицы);
		
		ПараметрыСсылки	= Новый Структура("id", Строка(СтрокаТаблицы.Идентификатор));
		АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("article", ПараметрыСсылки);
		
		ТекстСтатей = ТекстСтатей + "
		|				<div class='article_s'>
		|					<div class='head'>
		|						<div class='stat'>
		|							<div class='text' title='Количество комментариев'>
		|								<img src='data:image/png;base64," + Base64Строка(АдресаКартинок.Комментарии.ПолучитьДвоичныеДанные()) + "'>
		|								" + Формат(СтрокаТаблицы.Комментарии, "ЧН=0; ЧГ=") + "
		|							</div>
		|							<div class='text' title='Средняя оценка'>
		|								<img src='data:image/png;base64," + Base64Строка(АдресаКартинок.ЗвездаПолная.ПолучитьДвоичныеДанные()) + "'>
		|								" + Формат(СтрокаТаблицы.СредняяОценка, "ЧН=0; ЧГ=") + "
		|							</div>
		|						</div>
		|						<h2><a href='" + АдресСсылки + "'>" + СтрокаТаблицы.Наименование + "</a></h2>
		|						<div class='info'>" + СтрокаТаблицы[Параметры.Информация] + "</div>
		|						[[КраткийТекстСтатьи]]
		|					</div>
		|				</div>
		|";
		
		Если Параметры.КраткийТекст Тогда
			ПодготовленныйТекст	= БазаЗнанийКлиентСервер.ОбработатьТекстСтатьи(СтрокаТаблицы.Текст);
			КраткийТекстСтатьи	= "<div class='text'>" + Лев(ПодготовленныйТекст, 300) + "..." + "</div>";
		Иначе
			КраткийТекстСтатьи	= "";
		КонецЕсли;
		
		ТекстСтатей = СтрЗаменить(ТекстСтатей, "[[КраткийТекстСтатьи]]", КраткийТекстСтатьи);
	КонецЦикла;
	
	Возврат СтрЗаменить(ТекстСтраницы, "[[Статьи]]", ТекстСтатей);
	
КонецФункции

// Формирует текст HTML блока "Статьи" на главной странице
//
// Параметры
//	АдресаКартинок - Структура
//	СтруктураСтатей - Структура
//		Рекомендуемые - Массив (см. МассивСтатей функции ТекстHTML_Статьи)
//		Новые - Массив (см. МассивСтатей функции ТекстHTML_Статьи)
//		Популярные - Массив (см. МассивСтатей функции ТекстHTML_Статьи)
//		Рейтинговые - Массив (см. МассивСтатей функции ТекстHTML_Статьи)
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_СтатьиТитульнойСтраницы(Знач АдресаКартинок, Знач СтруктураСтатей)
	
	Если СтруктураСтатей.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МассивТекстов = Новый Массив;
	Для Каждого КлючИЗначение Из СтруктураСтатей Цикл
		ВидСтраницы		= КлючИЗначение.Ключ;
		ТаблицаДанных	= КлючИЗначение.Значение;
		ПараметрыПоВиду	= БазаЗнанийHTMLКлиентСервер.ПолучитьПараметрыВыводаСтраницыПоВиду(ВидСтраницы);
		
		АдресСсылки = БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page(ВидСтраницы);
		
		ПараметрыВывода = Новый Структура("Информация, Заголовок",
			ПараметрыПоВиду.Информация,
			"<a href='" + АдресСсылки + "'>" + ПараметрыПоВиду.Заголовок + "</a>");
		ТекстHTML = ПолучитьHTML_Статьи_Кратко(АдресаКартинок, ТаблицаДанных, ПараметрыВывода);
		
		МассивТекстов.Добавить(ТекстHTML);
	КонецЦикла;
	
	КоличествоБлоков = МассивТекстов.Количество();
	
	ТекстСтраницы = "
	|<div id='articles'>
	|	<table width='100%'>
	|		<tr>
	|			<td style='padding:0 5px 0 0;'>
	|				" + ?(КоличествоБлоков > 0, МассивТекстов[0], "") + "
	|			</td>
	|			<td style='padding:0 0 0 5px;'>
	|				" + ?(КоличествоБлоков > 1, МассивТекстов[1], "") + "
	|			</td>
	|		</tr>
	|		<tr>
	|			<td style='padding:10px 5px 0 0;'>
	|				" + ?(КоличествоБлоков > 2, МассивТекстов[2], "") + "
	|			</td>
	|			<td style='padding:10px 0 0 5px;'>
	|				" + ?(КоличествоБлоков > 3, МассивТекстов[3], "") + "
	|			</td>
	|		</tr>
	|	</table>
	|</div>
	|";
	
	Возврат ТекстСтраницы;
	
КонецФункции

// Формирует текст HTML блока "Статья"
//
// Параметры
//	АдресаКартинок - Структура
//	СтатьяСсылка - СправочникСсылка.СтатьиБазыЗнаний
//	Параметры
//		КнопкаИзменить - Булево
//		КнопкаОценить - Булево
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_ОписаниеСтатьи(АдресаКартинок, Знач СтатьяСсылка, Знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Картинки"			, Новый Соответствие);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "КоманднаяПанель"	, "");
	
	ДанныеСтатьи	= БазаЗнаний.ПолучитьДанныеСтатьи(СтатьяСсылка);
	// Идентификатор	= Строка(ДанныеСтатьи.Идентификатор);
	
	// Содержание статьи.
	ТекстСодержание = "
	|	" + ПолучитьHTML_СодержаниеСтатьи(АдресаКартинок, ДанныеСтатьи, Параметры) + "
	|";
	
	// Дополнительная информация.
	ЗначениеОценки		= Строка(ДанныеСтатьи.СредняяОценка) + "/5";
	КоличествоГолосов	= СтрШаблон(НСтр("ru = '%1 голос%2'"), Формат(ДанныеСтатьи.Проголосовало, "ЧН=0; ЧГ="), ?(ДанныеСтатьи.Проголосовало > 1, "ов", ""));
	
	ПараметрыСсылки		= Новый Структура("id", Строка(ДанныеСтатьи.Автор.УникальныйИдентификатор()));
	АдресСсылкиСоздал	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("user", ПараметрыСсылки);
	
	ТекстДопИнформация	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Создал: %1 | Рейтинг: %2 | Обновлена: %3'"),
		"<a href='" + АдресСсылкиСоздал + "'>" + Строка(ДанныеСтатьи.Автор) + "</a>",
		?(ДанныеСтатьи.СредняяОценка > 0, ЗначениеОценки + " (" + КоличествоГолосов + ")", НСтр("ru = 'нет данных'")) ,
		Формат(ДанныеСтатьи.Изменена, "ДФ='ддд, дд/ММ/гггг'"));
	
	// Ключевые слова (теги).
	ТекстКлючевыеСлова = "";
	Для Каждого СтрокаТаблицы Из ДанныеСтатьи.КлючевыеСлова Цикл
		ПараметрСсылки		= Новый Структура("id", Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор()));
		АдресСсылки			= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("tag", ПараметрСсылки);
        ЦветФона   = ?(ПустаяСтрока(СтрокаТаблицы.ЦветФона), "white" ,СтрокаТаблицы.ЦветФона);
        ЦветТекста = ?(ПустаяСтрока(СтрокаТаблицы.ЦветТекста), "black", СтрокаТаблицы.ЦветТекста);
		//@skip-warning
		ТекстКлючевыеСлова	= ТекстКлючевыеСлова + "
		|	<li><a href='" + АдресСсылки + "'><span class='tag' style='color:" 
            + ЦветТекста + ";background-color:" + ЦветФона + "'>" 
            + ЗаданияСервер.УдалитьТегиИСпецСимволыИзТекста(СтрокаТаблицы.Наименование) + "</a></li>";
	КонецЦикла;
	ТекстКлючевыеСлова = НСтр("ru = 'Теги'") + ": <ul>" 
        + ?(ДанныеСтатьи.КлючевыеСлова.Количество() = 0, 
            "<li>" + НСтр("ru = 'не указаны'") + "</li>", 
            ТекстКлючевыеСлова) + "</ul>";
	
	// Комментарии.
	ТекстКомментарии = Комментарии.ПолучитьHTML_Комментарии(АдресаКартинок, ДанныеСтатьи, Параметры);
	
	// Код страницы.
	ТекстСтраницы = "
	|<div class='article'>
	|	<h1>" + Параметры.КоманднаяПанель + НСтр("ru = 'Статья'") + ": " + Строка(СтатьяСсылка) + "</h1>
	|	<div class='info'>" + ТекстДопИнформация + "</div>
	|	<div class='text'>" + ТекстСодержание + "</div>
	|	<div id='article_tags'>" + ТекстКлючевыеСлова + "</div>
	|	" + ТекстКомментарии + "
	|</div>
	|";
	
	Возврат ТекстСтраницы;
	
КонецФункции

// Формирует текст HTML блока "Содержание" из блока "Статья"
//
// Параметры
//	АдресаКартинок - Структура
//	ДанныеСтатьи - Структура
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_СодержаниеСтатьи(АдресаКартинок, ДанныеСтатьи, Знач Параметры)
	
	ТекстСтатьи		= "";
	// Идентификатор	= Строка(ДанныеСтатьи.Ссылка.УникальныйИдентификатор());
	
	// Основная часть статьи.
	ТекстСтатьи	= ДанныеСтатьи.ТекстHTML;
	БазаЗнанийHTMLКлиентСервер.ВырезатьТекстТелаДокумента(ТекстСтатьи);
	ТекстСтатьи = УдалитьКомментарииПоТексту(ТекстСтатьи, Истина);
	
	ОбработатьВложенныеТаблицы("Главная", ТекстСтатьи, ДанныеСтатьи);
	ОбработатьВложенныеКартинки("Главная", ТекстСтатьи, ДанныеСтатьи);
	ОбработатьВложенныеФайлы("Главная", ТекстСтатьи, ДанныеСтатьи);
	ОбработатьВложенныеПодсветкаКода("Главная", ТекстСтатьи, ДанныеСтатьи);
	
	// Содержание.
	ВыводитьСодержание = (ДанныеСтатьи.Содержание.Количество() > 3);
	Если ВыводитьСодержание И ДанныеСтатьи.ПоложениеСодержания = 1 Тогда
		ТекстСтатьи = ТекстСтатьи + "
		|__TOC__";
	ИначеЕсли ВыводитьСодержание И (ДанныеСтатьи.ПоложениеСодержания = 2 ИЛИ ДанныеСтатьи.ПоложениеСодержания = 3) Тогда
		ТекстСтатьи = "__TOC__
		|" + ТекстСтатьи;
	КонецЕсли;
	
	// Вложенные уровни.
	Счетчик = 0;
	Для Каждого СтрокаСодержание Из ДанныеСтатьи.Содержание Цикл
		
		Счетчик		= Счетчик + 1;
		ТегФормата	= ?(СтрокаСодержание.Уровень >= 5, "h5", "h" + Строка(СтрокаСодержание.Уровень));
		
		ТекстСтроки	= СтрокаСодержание.ТекстHTML;
		БазаЗнанийHTMLКлиентСервер.ВырезатьТекстТелаДокумента(ТекстСтроки);
		
		ОбработатьВложенныеТаблицы(СтрокаСодержание.Область, ТекстСтроки, ДанныеСтатьи);
		ОбработатьВложенныеКартинки(СтрокаСодержание.Область, ТекстСтроки, ДанныеСтатьи);
		ОбработатьВложенныеФайлы(СтрокаСодержание.Область, ТекстСтроки, ДанныеСтатьи);		
		ОбработатьВложенныйКод(СтрокаСодержание.Область, ТекстСтроки, ДанныеСтатьи);
		
		ТекстСсылкиСкрыть = 
		"<span style='font-size:12px; font-weight:normal;'>[ 
		|	<a href='#content_" + СтрокаСодержание.Область + "' id='visible_" + СтрокаСодержание.Область + "'>скрыть</a> ]
		|</span>";
		
		ТекстСтатьи = ТекстСтатьи + "
		|	<" + ТегФормата + " id='" + СтрокаСодержание.Область + "'>" + СтрокаСодержание.Наименование + " 
		|		" + ?(СтрокаСодержание.РазрешитьСворачивание, ТекстСсылкиСкрыть, "") + "
		|	</" + ТегФормата + ">
		|	<div id='content_" + СтрокаСодержание.Область + "' style='margin-left:" + Формат(2 * СтрокаСодержание.Уровень, "ЧГ=") +"px;'>
		|		" + ТекстСтроки + "
		|	</div>";
		
	КонецЦикла;
	
	// Подстановка строки разделителя.
	ОбработатьРазделительныеЛинии(ТекстСтатьи);
		
	// Удалим открытие ссылок в отдельных окнах.
	ТекстСтатьи = СтрЗаменить(ТекстСтатьи, "target='_blank'", "");
	
	// Сноски.
	ОбработатьСноски(ТекстСтатьи, ДанныеСтатьи);
	
	// Подстановка содержания статьи.
	Если ВыводитьСодержание И ДанныеСтатьи.ПоложениеСодержания > 0 Тогда
		Если ДанныеСтатьи.ПоложениеСодержания = 2 Тогда
			ДопСтиль = " style='float:left; margin: 0 10px 15px 0;'";
		ИначеЕсли ДанныеСтатьи.ПоложениеСодержания = 3 Тогда
			ДопСтиль = " style='float:right; margin: 0 0 15px 10px;'";
		Иначе
			ДопСтиль = " style='margin: 15px 10px 15px 0;'";
		КонецЕсли;
		
		ТекстОглавление = "<div class='contents'" + ДопСтиль + ">
		|<p style='text-align:center; font-weight:bold' id='contents_title'>Содержание 
		|	<span style='font-size:12px; font-weight:normal;'>[ <a href='#contens_ul' id='visible'>скрыть</a> ]</span>
		|</p>";			
		ТекУровень		= -1;
		Для Каждого СтрокаСодержание Из ДанныеСтатьи.Содержание Цикл
			Если ТекУровень < СтрокаСодержание.Уровень Тогда
				ТекстОглавление = ТекстОглавление + "<ul id='contens_ul'>";
			ИначеЕсли ТекУровень > СтрокаСодержание.Уровень Тогда
				ТекстОглавление = ТекстОглавление + "</ul>";
			КонецЕсли;
			ТекУровень = СтрокаСодержание.Уровень;
			
			ТекстОглавление = ТекстОглавление + "
			|	<li><a href='#" + СтрокаСодержание.Область + "'>" + СтрокаСодержание.Наименование + "</a></li>";
		КонецЦикла;
		ТекстОглавление = ТекстОглавление + "</ul></div>";
		
		ТекстСтатьи = СтрЗаменить(ТекстСтатьи, "__TOC__", ТекстОглавление);
	КонецЕсли;
	
	Возврат ТекстСтатьи;
	
КонецФункции

// Формирует текст HTML блока "Командная панель"
//
// Параметры
//	Кнопки - Массив[Структура, Строка]
//		Использование - Булево
//		Заголовок - Строка
//		Картинка - Строка. Путь к картинке. Если не задан не выводится.
//		Подсказка - Строка
//		АдресСсылки - Строка
//	Настройки - Структура
//		Выравнивание - Строка. Лево, Право
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьHTML_КоманднаяПанель(Знач АдресаКартинок, Знач КоманднаяПанель) Экспорт
	
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Кнопки"		, Новый Массив);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Настройки"	, Новый Структура);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель.Настройки, "Выравнивание", "Право");
	
	ИмяКласса = ?(ВРег(КоманднаяПанель.Настройки.Выравнивание) = "ЛЕВО", "flt_l", "flt_r");
	
	ТекстHTML = "
	|	<div id='command_panel' class='" + ИмяКласса + "'><ul>";
	Для Каждого СтруктураКнопки Из КоманднаяПанель.Кнопки Цикл
		ТипКнопки = ТипЗнч(СтруктураКнопки);
		Если ТипКнопки = Тип("Строка") Тогда
			СтрТекстКнопки = СтруктураКнопки;
		ИначеЕсли ТипКнопки = Тип("Структура") Тогда
			БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(СтруктураКнопки, "Использование"	, Ложь);
			БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(СтруктураКнопки, "Заголовок"		, "");
			БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(СтруктураКнопки, "Картинка"		, "");
			БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(СтруктураКнопки, "Подсказка"		, "");
			БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(СтруктураКнопки, "АдресСсылки"	, "");
			БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(СтруктураКнопки, "Стиль"			, "");
			
			Если НЕ СтруктураКнопки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			СтрТекстКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("
				|		<li><a title='%1' href='%2' class='%3'>%4 %5 </a></li>
				|",
				СтруктураКнопки.Подсказка,
				СтруктураКнопки.АдресСсылки,
				СтруктураКнопки.Стиль,
				?(ПустаяСтрока(СтруктураКнопки.Картинка), "", "<img class='flt_l' src='data:image/png;base64," + Base64Строка(СтруктураКнопки.Картинка.ПолучитьДвоичныеДанные()) + "'>"),
				СтруктураКнопки.Заголовок);
		Иначе 
			СтрТекстКнопки = "";
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + СтрТекстКнопки;
	КонецЦикла;
	ТекстHTML = ТекстHTML + "
	|	</ul></div>";
	
	Возврат ТекстHTML;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаТекстаСтатьи

Функция УдалитьКомментарииПоТексту(Знач ТекстHTML, Знач ЭтоHTML) Экспорт
	
	СтрНачКомм		= ?(ЭтоHTML, "&lt;!--", "<!--");
	СтрКонКомм		= ?(ЭтоHTML, "--&gt;", "-->");
	ДлинаОкончания	= СтрДлина(СтрКонКомм);
	
	ИтоговыйТекст = "";
	
	ПозицияНачКомм = СтрНайти(ТекстHTML, СтрНачКомм);
	Пока ПозицияНачКомм > 0 Цикл
		ПозицияКонКомм = СтрНайти(ТекстHTML, СтрКонКомм);
		Если ПозицияКонКомм <= ПозицияНачКомм Тогда
			Прервать;
		КонецЕсли;
		
		Если ЭтоHTML Тогда
			// Начало комментария.
			НачПодстрокаПоиска	= БазаЗнанийHTMLКлиентСервер.ВыделитьЭлементHTMLПоТегу(ТекстHTML, ПозицияНачКомм, "p");
			НачПозицияТекста	= СтрНайти(ТекстHTML, НачПодстрокаПоиска);
			
			// Окончание комментария.
			КонПодстрокаПоиска	= БазаЗнанийHTMLКлиентСервер.ВыделитьЭлементHTMLПоТегу(ТекстHTML, ПозицияКонКомм, "p");
			НачПозицияКонПоиска	= СтрНайти(ТекстHTML, КонПодстрокаПоиска);
			КонПозицияТекста	= НачПозицияКонПоиска + СтрДлина(КонПодстрокаПоиска);
		Иначе 
			НачПозицияТекста	= ПозицияНачКомм;
			КонПозицияТекста	= ПозицияКонКомм + ДлинаОкончания;
		КонецЕсли;
		
		ИтоговыйТекст	= ИтоговыйТекст + Лев(ТекстHTML, НачПозицияТекста - 1);
		ТекстHTML		= Сред(ТекстHTML, КонПозицияТекста + 1);
		ПозицияНачКомм	= СтрНайти(ТекстHTML, СтрНачКомм);
	КонецЦикла;
	
	Возврат ИтоговыйТекст + ТекстHTML;
	
КонецФункции

Процедура ОбработатьВложенныеТаблицы(Знач Область, ТекстHTML, ДанныеСтатьи) Экспорт
	
	МассивТаблиц = ДанныеСтатьи.Таблицы.Получить(Область);
	Если МассивТаблиц = Неопределено ИЛИ МассивТаблиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураТаблицы Из МассивТаблиц Цикл
		
		ТаблицаHTML	= СтруктураТаблицы.ТекстТаблицыHTML;
		ТаблицаHTML = СтрЗаменить(ТаблицаHTML, "width:100%", "");
		ТекстСтили	= СтруктураТаблицы.ТаблицаСтилейHTML;
		ТекстСтили	= СтрЗаменить(ТекстСтили, "width: 100%;", "");
		ИмяСтиля	= "name_" + СтруктураТаблицы.Имя;
		// Оформление	= БазаЗнанийКлиентСерверПовтИсп.ТекстHTML_Выравнивание(СтруктураТаблицы.Выравнивание);
		
		ТекстСтили	= СтрЗаменить(ТекстСтили, "t_0", ИмяСтиля);
		
		ТаблицаHTML	= 
		"	<div class='tableblock'>
		|		<style type='text/css'>" + ТекстСтили + "caption {caption-side: bottom;}</style>
		|		" + СтрЗаменить(ТаблицаHTML, "t_0", ИмяСтиля) + "		
		|	</div>
		|";
		
		Если НЕ ПустаяСтрока(СтруктураТаблицы.Подпись) Тогда			
			ТаблицаHTML = СтрЗаменить(ТаблицаHTML, "</table>", "<caption>" + СтруктураТаблицы.Подпись + "</caption>
				|</table>");
		КонецЕсли;		
		
		ПолеЗамены	= "[table='" + СокрЛП(СтруктураТаблицы.Имя) + "']";
		ТекстHTML	= СтрЗаменить(ТекстHTML, ПолеЗамены, ТаблицаHTML);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьВложенныеПодсветкаКода(Знач Область, ТекстHTML, ДанныеСтатьи) Экспорт
	
	МассивПодсветкаКода = ДанныеСтатьи.ПодсветкаКода.Получить(Область);
	Если МассивПодсветкаКода = Неопределено ИЛИ МассивПодсветкаКода.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураПодсветкаКода Из МассивПодсветкаКода Цикл		
		
		Текст = ВложенныйКодВHTML(СтруктураПодсветкаКода.Язык, СтруктураПодсветкаКода.Текст);
		ПолеЗамены	= "[code='" + СокрЛП(СтруктураПодсветкаКода.Имя) + "']";
		ТекстHTML	= СтрЗаменить(ТекстHTML, ПолеЗамены, Текст);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьВложенныеКартинки(Область, ТекстHTML, ДанныеСтатьи, СоздаватьСсылки = Истина, 
	ЗаменятьИменаНаИдентификаторы = Ложь) Экспорт
	
	ОбрабатыватьПользовательскиеКартинки = Истина;
	МассивКартинок = ДанныеСтатьи.Картинки.Получить(Область);
	Если МассивКартинок = Неопределено ИЛИ МассивКартинок.Количество() = 0 Тогда
		ОбрабатыватьПользовательскиеКартинки = Ложь;
	КонецЕсли;
	
	Если ОбрабатыватьПользовательскиеКартинки Тогда
		Для Каждого СтруктураКартинки Из МассивКартинок Цикл
			Если ДанныеСтатьи.РазделИмпортирован Тогда
				СтрокаПоиска = "[pict_" + СтрЗаменить(СтруктураКартинки.Идентификатор, "-", "") + "]";				
				АдресХранилищаКартинки = СтруктураКартинки.АдресХранилища;
				АдресВХранилищеSRC	   = "data:image/png;base64," + СтрЗаменить(Base64Строка(ПолучитьИзВременногоХранилища(СтруктураКартинки.АдресХранилища)), Символы.ВК + Символы.ПС, "");
				СтрокаОписаниеСтиля    = ?(Не ПустаяСтрока(СтруктураКартинки.ОписаниеСтиля), " style=""" + СтруктураКартинки.ОписаниеСтиля + """", "") + ">"; 
				Если СоздаватьСсылки Тогда
					ТекстКартинки	= 
						"<div class='pictureblock'>
						|	<a href=""" + АдресХранилищаКартинки + """>
						|		<img src=""" + АдресВХранилищеSRC + """" + СтрокаОписаниеСтиля + "
						|	</a>					
						|</div>
						|";
				Иначе
					ТекстКартинки	= 
						"<div>					
						|	<img src=""" + АдресВХранилищеSRC + """" + СтрокаОписаниеСтиля + "
						|</div>
						|";					
				КонецЕсли;				
				
				ТекстHTML = СтрЗаменить(ТекстHTML, СтрокаПоиска, ТекстКартинки);
				
			Иначе									
				// ИмяКартинки	= СтруктураКартинки.Имя;			
				Оформление	= БазаЗнанийКлиентСерверПовтИсп.ТекстHTML_Выравнивание(СтруктураКартинки.Выравнивание);
				Оформление	= Оформление + "; border:" + Формат(СтруктураКартинки.Граница, "ЧН=0; ЧГ=") + "px solid #666";
				АдресВХранилищеSRC	= "data:image/png;base64," + СтрЗаменить(Base64Строка(ПолучитьИзВременногоХранилища(СтруктураКартинки.АдресХранилища)), Символы.ВК + Символы.ПС, "");
				Если СоздаватьСсылки Тогда
						ТекстКартинки	= 
						"<div class='pictureblock' style='" + Оформление + ";'>
						|	<a href='" + СтруктураКартинки.АдресХранилища + "'>
						|		<img src='" + АдресВХранилищеSRC + "' height='" + Формат(СтруктураКартинки.Высота, "ЧГ=") + "px' title='" + СтруктураКартинки.Подсказка + "'>
						|	</a>
						|	" + ?(НЕ ПустаяСтрока(СтруктураКартинки.Подпись), "<br>" + СтруктураКартинки.Подпись, "") + "
						|</div>
						|";
				ИначеЕсли ЗаменятьИменаНаИдентификаторы Тогда
					ТекстКартинки	= 
						"<div class='pictureblock' style='" + Оформление + ";'>					
						|		<img src=""cid:" + СтруктураКартинки.Идентификатор + """ height='" + Формат(СтруктураКартинки.Высота, "ЧГ=") + "px' title='" + СтруктураКартинки.Подсказка + "'>
						|	" + ?(НЕ ПустаяСтрока(СтруктураКартинки.Подпись), "<br>" + СтруктураКартинки.Подпись, "") + "
						|</div>
						|";	
				Иначе	
					ТекстКартинки	= 
						"<div class='pictureblock' style='" + Оформление + ";'>					
						|		<img src='" + АдресВХранилищеSRC + "' height='" + Формат(СтруктураКартинки.Высота, "ЧГ=") + "px' title='" + СтруктураКартинки.Подсказка + "'>
						|	" + ?(НЕ ПустаяСтрока(СтруктураКартинки.Подпись), "<br>" + СтруктураКартинки.Подпись, "") + "
						|</div>
						|";
						
				КонецЕсли;
				ПолеЗамены	= "[picture='" + СтруктураКартинки.Имя + "']";
				ТекстHTML	= СтрЗаменить(ТекстHTML, ПолеЗамены, ТекстКартинки);			
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВложенныеФайлы(Область, ТекстHTML, ДанныеСтатьи, СоздаватьСсылки = Истина) Экспорт
	
	ТаблицаФайлов = ДанныеСтатьи.Файлы;
	Если ТаблицаФайлов = Неопределено ИЛИ ТаблицаФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаТаблицы Из ТаблицаФайлов Цикл
		
		ПолеЗамены  = "[fileid='" + Строка(СтрокаТаблицы.Файл.УникальныйИдентификатор()) + "'";
		Пока СтрНайти(ТекстHTML, ПолеЗамены) > 0 Цикл
			ИндексНачало = СтрНайти(ТекстHTML, ПолеЗамены);
			ИндексКонец  = СтрНайти(ТекстHTML, "]", , ИндексНачало);
			Если ИндексКонец > 0 Тогда
				ТекстПодстановки      = Сред(ТекстHTML, ИндексНачало, ИндексКонец - ИндексНачало + 1);
				ИндексНачалоЗаголовка = СтрНайти(ТекстПодстановки, "title='");
				
				Если ИндексНачалоЗаголовка > 0 Тогда
					ИндексКонецЗаголовка = СтрНайти(ТекстПодстановки, "'", , ИндексНачалоЗаголовка + 7);
					Если ИндексКонецЗаголовка > 0 Тогда
						ФайлЗаголовок = Сред(ТекстПодстановки, ИндексНачалоЗаголовка + 7, ИндексКонецЗаголовка - (ИндексНачалоЗаголовка + 7)); 
					КонецЕсли;	
				Иначе
					ФайлЗаголовок = СтрокаТаблицы.Файл.Наименование + "." + СтрокаТаблицы.Файл.Расширение; 
				КонецЕсли;
				
				Если СоздаватьСсылки Тогда
					СсылкаHTML =
						"<a href='fileid=" + Строка(СтрокаТаблицы.Файл.УникальныйИдентификатор()) + "'>  				
						| <img src='data:image/png;base64," + Base64Строка(БиблиотекаКартинок.ТолькоСкрепка.ПолучитьДвоичныеДанные()) + "' style=""border:none;"" align=""middle"">" + ФайлЗаголовок + "
						|</a>
						|";
				Иначе
					СсылкаHTML = "<img src='data:image/png;base64," + Base64Строка(БиблиотекаКартинок.ТолькоСкрепка.ПолучитьДвоичныеДанные()) + "' style=""border:none;"" align=""middle"">" + ФайлЗаголовок;
				КонецЕсли;	
				
				ТекстHTML	= СтрЗаменить(ТекстHTML, ТекстПодстановки, СсылкаHTML);			
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСноски(ТекстHTML, ДанныеСтатьи) Экспорт
	
	Если ПустаяСтрока(ТекстHTML) Тогда
		ТекстHTML = ТекстHTML + "<p></p>";
	КонецЕсли;
	
	// Преобразование строки HTML в документ
	Построитель	= Новый ПостроительDOM;
	ЧтениеHTML	= Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	// Обработка ссылок внутри документа
	КоллекцияЭлементов = ДокументHTML.Якоря;
	Для Каждого ЭлементЯкорь Из КоллекцияЭлементов Цикл
		
		Если Лев(ЭлементЯкорь.Гиперссылка, 4) = "ref:" Тогда
			Идентификатор = Сред(ЭлементЯкорь.Гиперссылка, 5);
			
			СтрокаТаблицы = ДанныеСтатьи.Сноски.Найти(Идентификатор, "Идентификатор");
			Если СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементЯкорь.УдалитьАтрибут("target");
			ЭлементЯкорь.УстановитьАтрибут("id", "sup_" + СтрЗаменить(Идентификатор, "#", "") + "_back");
			ЭлементЯкорь.УстановитьАтрибут("class", "sup");
			ЭлементЯкорь.Гиперссылка = "#sup_" + СтрЗаменить(Идентификатор, "#", "");
		КонецЕсли;
		
	КонецЦикла;
	
	// Подготовка подвала со сносками
	БлокСносок = ДокументHTML.СоздатьЭлемент("div");
	БлокСносок.УстановитьАтрибут("class", "references");
	ДокументHTML.Тело.ДобавитьДочерний(БлокСносок);
	
	МассивГрупп = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеСтатьи.Сноски, "Группа", Истина);
	Для Каждого ИмяГруппы Из МассивГрупп Цикл
		СтрокиСноски = ДанныеСтатьи.Сноски.НайтиСтроки(Новый Структура("Группа", ИмяГруппы));
		Если СтрокиСноски.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
	    Заголовок = ДокументHTML.СоздатьЭлемент("h6");
		Заголовок.ТекстовоеСодержимое = ?(ПустаяСтрока(ИмяГруппы), "Сноски", СокрЛП(ИмяГруппы));
		БлокСносок.ДобавитьДочерний(Заголовок);
		
		СписокСносок = ДокументHTML.СоздатьЭлемент("ul");
		БлокСносок.ДобавитьДочерний(СписокСносок);
		
		Для Каждого СтрокаСноски Из СтрокиСноски Цикл
			Идентификатор = СтрокаСноски.Идентификатор;
			
			ПредставлениеСноски = СтрокаСноски.Наименование;
			Если НЕ ПустаяСтрока(СтрокаСноски.ГиперссылкаАдрес) Тогда
				АдресСсылки = ПолучитьАдресГиперссылкиПоТипу(СтрокаСноски.ГиперссылкаТип, СтрокаСноски.ГиперссылкаАдрес);
				
				СноскаПредставление = ДокументHTML.СоздатьЭлемент("a");
				СноскаПредставление.Гиперссылка			= АдресСсылки;
				СноскаПредставление.ТекстовоеСодержимое = ПредставлениеСноски;
			Иначе 
				СноскаПредставление = ДокументHTML.СоздатьТекстовыйУзел(ПредставлениеСноски);
			КонецЕсли;
			
			ЭлементСноска = ДокументHTML.СоздатьЭлемент("li");
			СписокСносок.ДобавитьДочерний(ЭлементСноска);
			
			СноскаИдентификатор = ДокументHTML.СоздатьЭлемент("span");
			СноскаИдентификатор.УстановитьАтрибут("id"		, "sup_" + СтрЗаменить(Идентификатор, "#", ""));
			СноскаИдентификатор.УстановитьАтрибут("class"	, "sup");
			СноскаИдентификатор.ТекстовоеСодержимое	= СтрокаСноски.Идентификатор;
			ЭлементСноска.ДобавитьДочерний(СноскаИдентификатор);
			
			Пробел = ДокументHTML.СоздатьТекстовыйУзел(" ");
			//@skip-warning
			ЭлементСноска.ДобавитьДочерний(Пробел);
			
			СноскаВозврат = ДокументHTML.СоздатьЭлемент("a");
			СноскаВозврат.Гиперссылка			= "#sup_" + СтрЗаменить(Идентификатор, "#", "") + "_back";
			СноскаВозврат.ТекстовоеСодержимое	= "↑";
			ЭлементСноска.ДобавитьДочерний(СноскаВозврат);
			
			Пробел = ДокументHTML.СоздатьТекстовыйУзел(" ");
			//@skip-warning
			ЭлементСноска.ДобавитьДочерний(Пробел);
			
			ЭлементСноска.ДобавитьДочерний(СноскаПредставление);
		КонецЦикла;
	КонецЦикла;
	
	// Замена значения реквизита на итоговый текст
	ЗаписьDOM	= Новый ЗаписьDOM;
	ЗаписьHTML	= Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	
	ТекстHTML = ЗаписьHTML.Закрыть();
	БазаЗнанийHTMLКлиентСервер.ВырезатьТекстТелаДокумента(ТекстHTML);
	
КонецПроцедуры

Процедура ОбработатьРазделительныеЛинии(ТекстHTML) Экспорт
	
	Пока СтрНайти(ТекстHTML, "-----") > 0 Цикл
		ТекстHTML = СтрЗаменить(ТекстHTML, "-----", "----");
	КонецЦикла;
	Пока СтрНайти(ТекстHTML, "----") > 0 Цикл
		ТекстHTML = СтрЗаменить(ТекстHTML, "----", "<hr>");
	КонецЦикла;	
		
КонецПроцедуры

Функция СписокЯзыковВложенногоКода() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("css", "CSS");
	Список.Добавить("javascript", "JavaScript");
	Список.Добавить("csharp", "C#");
	Список.Добавить("java", "Java");
	Список.Добавить("json", "JSON");
	Список.Добавить("nginx", "NGINX");
	Список.Добавить("pascal", "Pascal (Delphi)");
	Список.Добавить("php", "PHP");
	Список.Добавить("powershell", "Power Shell");
	Список.Добавить("python", "Python");
	Список.Добавить("regex", "Regex");
	Список.Добавить("sql", "SQL");
	
	Возврат Список;
	
КонецФункции

Функция ВложенныйКодВHTML(Знач Язык, Знач Текст) Экспорт
	
	ТекстБезТегов = СтрЗаменить(Текст, "<", "&lt;");
	ТекстБезТегов = СтрЗаменить(ТекстБезТегов, ">", "&gt;");
	
	Возврат "<pre style='padding:0;overflow:initial;'><code class='language-" + Язык + "'>"	
		+ ТекстБезТегов + "</code></pre>";
	
КонецФункции	

Процедура ОбработатьВложенныйКод(Область, ТекстHTML, ДанныеСтатьи) Экспорт
	
	МассивПодсветкаКода = ДанныеСтатьи.ПодсветкаКода.Получить(Область);
	Если МассивПодсветкаКода = Неопределено ИЛИ МассивПодсветкаКода.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураПодсветкаКода Из МассивПодсветкаКода Цикл
				
		Текст 		= ВложенныйКодВHTML(СтруктураПодсветкаКода.Язык, СтруктураПодсветкаКода.Текст);
		ПолеЗамены	= "[code='" + СокрЛП(СтруктураПодсветкаКода.Имя) + "']";
		ТекстHTML	= СтрЗаменить(ТекстHTML, ПолеЗамены, Текст);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанных

Процедура ДополнитьИнформациюПоСтатье(СтрокаТаблицы)
	
	Категория	= ?(СтрокаТаблицы.Категории.Количество() = 1, СтрокаТаблицы.Категории[0], Неопределено);
	Если ЗначениеЗаполнено(Категория) Тогда
		Идентификатор = Строка(Категория.УникальныйИдентификатор());
		ПараметрыСсылки = Новый Структура("id", Идентификатор);
		АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("category", ПараметрыСсылки);
		СтрКатегория = ", <a href='" + АдресСсылки + "'>" + Строка(Категория) + "</a>";
	Иначе 
		СтрКатегория = "";
	КонецЕсли;
	
	Опубликована	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Опубликована %1%2'"),
		Формат(СтрокаТаблицы.Создана, "ДФ='ддд, дд МММ, гггг'"),
		СтрКатегория);
	
	Просмотрена		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Просмотрена %1 раз с %2%3'"),
		Формат(СтрокаТаблицы.Просмотры, "ЧН=0; ЧГ="),
		Формат(СтрокаТаблицы.Создана, "ДФ='ддд, дд МММ, гггг'"),
		СтрКатегория);
	
	Оценена			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Оценка %1. Проголосовало: %2%3'"),
		Строка(СтрокаТаблицы.СредняяОценка) + "/5",
		Строка(СтрокаТаблицы.Проголосовало),
		СтрКатегория);
	
	СтрокаТаблицы.Опубликована	= Опубликована;
	СтрокаТаблицы.Просмотрена	= Просмотрена;
	СтрокаТаблицы.Оценена		= Оценена;
	
КонецПроцедуры

Функция ПолучитьПутьККатегории(КатегорияСсылка, ТолькоСсылки = Ложь)
	
	МассивПуть = Новый Массив;
	МассивПуть.Добавить("home");
	
	РодительСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КатегорияСсылка, "Родитель");
	Пока ЗначениеЗаполнено(РодительСсылка) Цикл
		МассивПуть.Вставить(1, РодительСсылка);
		
		РодительСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РодительСсылка, "Родитель");
	КонецЦикла;
	
	МассивПуть.Добавить(?(ТолькоСсылки, КатегорияСсылка, Строка(КатегорияСсылка)));
	
	Возврат МассивПуть;
	
КонецФункции

Функция ПолучитьПутьКСтатье(СтатьяСсылка)
	
	МассивПуть = Новый Массив;
	МассивПуть.Добавить("home");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Категория КАК Категория
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний.Категории КАК Т
		|ГДЕ
		|	Т.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СтатьяСсылка);
	Категории = Запрос.Выполнить().Выгрузить();
	
	Если Категории.Количество() > 1 Тогда
		МассивПуть.Добавить("Несколько категорий");
	ИначеЕсли Категории.Количество() = 1 Тогда
		МассивПуть = ПолучитьПутьККатегории(Категории[0].Категория, Истина);
	КонецЕсли; 
	
	МассивПуть.Добавить(Строка(СтатьяСсылка));
	
	Возврат МассивПуть;
	
КонецФункции

Функция ПолучитьПутьТекущейСтраницы(Знач ЭлементСсылка)
	
	ТипСсылки = ТипЗнч(ЭлементСсылка);
	
	Если ТипСсылки = Тип("СправочникСсылка.КатегорииБазыЗнаний") Тогда
		МассивПуть = ПолучитьПутьККатегории(ЭлементСсылка);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда
		МассивПуть = ПолучитьПутьКСтатье(ЭлементСсылка);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Теги") Тогда
		МассивПуть = Новый Массив;
		МассивПуть.Добавить("home");
		МассивПуть.Добавить(Строка(ЭлементСсылка));
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Пользователи") Тогда
		МассивПуть = Новый Массив;
		МассивПуть.Добавить("home");
		МассивПуть.Добавить(Строка(ЭлементСсылка));
	Иначе 
		МассивПуть = Новый Массив;
	КонецЕсли;
	
	Возврат МассивПуть;
	
КонецФункции

Функция ПолучитьСтатьиГлавнойСтраницы()
	
	Таблица_1	= БазаЗнаний.ПолучитьСтатьиПоСтатистике("featured_articles", , 6, "вперед");
	Таблица_2	= БазаЗнаний.ПолучитьСтатьиПоСтатистике("recently_added", , 6, "вперед");
	Таблица_3	= БазаЗнаний.ПолучитьСтатьиПоСтатистике("most_popular", , 6, "вперед");
	Таблица_4	= БазаЗнаний.ПолучитьСтатьиПоСтатистике("top_rated", , 6, "вперед");
	
	// Возвращаемое значение
	Возврат Новый Структура("featured_articles, recently_added, most_popular, top_rated", 
		Таблица_1, Таблица_2, Таблица_3, Таблица_4);
	
КонецФункции

Функция ПолучитьСтатьиПоКлючевомуСлову(Знач ТегСсылка, Знач КатегорияСсылка)
	
	Если ТипЗнч(ТегСсылка) <> Тип("СправочникСсылка.Теги") Тогда
		ТегСсылка = Справочники.Теги.ПустаяСсылка();
	КонецЕсли;
	Если ТипЗнч(КатегорияСсылка) <> Тип("СправочникСсылка.КатегорииБазыЗнаний") Тогда
		КатегорияСсылка = Справочники.КатегорииБазыЗнаний.ПустаяСсылка();
	КонецЕсли;
	
	МассивСсылок = БазаЗнаний.ПолучитьСтатьиПоКлючевомуСлову(ТегСсылка, КатегорияСсылка);
	
	ОтборПоСсылке = Новый Структура("Поле, ВидСравнения, Значение",
		"Ссылка",
		ВидСравненияКомпоновкиДанных.ВСписке,
		Новый СписокЗначений);
	ОтборПоСсылке.Значение.ЗагрузитьЗначения(МассивСсылок);

	НастройкаОтбора = Новый Массив;
	НастройкаОтбора.Добавить(ОтборПоСсылке);
	
	ТаблицаСтатей = БазаЗнаний.ПолучитьСтатьи(НастройкаОтбора, "Наименование");
	
	Возврат ТаблицаСтатей;
	
КонецФункции

#КонецОбласти

#Область ОбщиеМетоды

Функция ПолучитьНастройкуПорядкаПоВидуСтраницыСтатей(ВидСтраницы, Знач Направление = "")
	ПараметрыПоВиду = БазаЗнанийHTMLКлиентСервер.ПолучитьПараметрыВыводаСтраницыПоВиду(ВидСтраницы);
	Возврат СтрЗаменить(ПараметрыПоВиду.Порядок, " УБЫВ", " " + Направление);
КонецФункции

Функция ПолучитьНастройкуОтбораПоВидуСтраницыСтатей(ВидСтраницы, Знач Направление = "", Ссылка)
	
	Если ВРег(Направление) = "УБЫВ" Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Меньше;
	Иначе 
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Больше;
	КонецЕсли;
	
	НастройкиОтбора = Новый Массив;
	
	Если ВидСтраницы = "category_articles" Тогда
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			Возврат НастройкиОтбора;
		КонецЕсли;
		
		ЗначениеОтбора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "РеквизитДопУпорядочивания");
		БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(НастройкиОтбора, "РеквизитДопУпорядочивания", ЗначениеОтбора, ВидСравненияОтбора);
	КонецЕсли;
		
	Возврат НастройкиОтбора;
	
КонецФункции

Функция ПолучитьСтрокуПоискаИзТекста(ТекстПоиска)
	
	СтрокаПоиска = "";
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстПоиска, " ");
	Для Каждого СловоПоиска Из МассивСлов Цикл
		СтрокаПоиска = СтрокаПоиска + ?(ПустаяСтрока(СтрокаПоиска), "", "+") + КодироватьСтроку(СловоПоиска, СпособКодированияСтроки.КодировкаURL);
	КонецЦикла;
	
	Возврат СтрокаПоиска;
	
КонецФункции

Функция ПолучитьАдресГиперссылкиПоТипу(Тип, Адрес)
	
	АдресСсылки = "";
	Если Тип = 0 Тогда
		ПараметрыСсылки = Новый Структура;
		
		Разделитель	= СтрНайти(Адрес, "#");
		Если Разделитель > 0 Тогда
			ПараметрыСсылки.Вставить("id", Лев(Адрес, Разделитель - 1));
			ПараметрыСсылки.Вставить("section", Сред(Адрес, Разделитель + 1));
		Иначе 
			ПараметрыСсылки.Вставить("id", Адрес);
		КонецЕсли;
		
		АдресСсылки = БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("article", ПараметрыСсылки);
	ИначеЕсли Тип = 1 Тогда
		АдресСсылки = Адрес;
	ИначеЕсли Тип = 2 Тогда
		АдресСсылки = "mailto:" + Адрес;
	ИначеЕсли Тип = 3 Тогда
		АдресСсылки = БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("category", Новый Структура("id", Адрес));
	ИначеЕсли Тип = 4 Тогда
		АдресСсылки = БазаЗнанийAPIКлиентСервер.КонструкторСсылки_search("text", Новый Структура("text", Адрес));
	ИначеЕсли Тип = 5 Тогда
		АдресСсылки = "http://www.google.ru/search?sourceid=chrome&ie=UTF-8&q=" + ПолучитьСтрокуПоискаИзТекста(Адрес);
	КонецЕсли;
	Возврат АдресСсылки;
	
КонецФункции

#КонецОбласти

#Область КоманднаяПанель

Функция ПолучитьКнопку(Заголовок, Картинка = "", АдресСсылки, Подсказка = "", Использование = Истина, Стиль = "")
	
	СтруктураКнопки = Новый Структура;
	
	СтруктураКнопки.Вставить("Заголовок"		, Заголовок);
	СтруктураКнопки.Вставить("Картинка"			, Картинка);
	СтруктураКнопки.Вставить("АдресСсылки"		, АдресСсылки);
	СтруктураКнопки.Вставить("Подсказка"		, Подсказка);
	СтруктураКнопки.Вставить("Использование"	, Использование);
	СтруктураКнопки.Вставить("Стиль"			, Стиль);
	
	Возврат СтруктураКнопки;
	
КонецФункции

// Параметры
//	АдресаКартинок - Структура
//	Параметры - Структура
//		НомерСтраницы - Число (ПереключениеСтраниц)
//		
Функция ПолучитьКоманднуюПанель_Новости(АдресаКартинок, Знач Параметры, Знач СписокКнопки = "")
	
	Если ПустаяСтрока(СписокКнопки) Тогда
		Возврат "";
	КонецЕсли;
	
	ПустаяСсылка = Справочники.НовостиБазыЗнаний.ПустаяСсылка();
		
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ГлавнаяСтраница"	, Ложь);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Количество"		, 0);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "НомерСтраницы"	, 1);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПерваяЗапись"		, ПустаяСсылка);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПоследняяЗапись"	, ПустаяСсылка);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Конец"			, Ложь);
	
	КоманднаяПанель = Новый Структура;
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Кнопки"		, Новый Массив);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Настройки"	, Новый Структура);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель.Настройки, "Выравнивание", "Право");
	
	МассивКнопок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокКнопки);
	Для Каждого ИмяКнопки Из МассивКнопок Цикл
		ВрегИмяКнопки	= ВРег(СокрЛП(ИмяКнопки));
		// ПараметрыСсылки = Новый Структура;
		
		Если ВрегИмяКнопки = "ПЕРЕКЛЮЧЕНИЕСТРАНИЦ" Тогда
			
			ПараметрыСсылкиНачало	= Новый Структура("mainpage, prevpage, currpage, limit",
				?(Параметры.ГлавнаяСтраница, "true", "false"),
				"0",
				"1",
				Параметры.Количество);
			ПараметрыСсылкиНазад	= Новый Структура("mainpage, prevpage, currpage, limit, id",
				?(Параметры.ГлавнаяСтраница, "true", "false"),
				Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ="),
				Формат(Параметры.НомерСтраницы - 1, "ЧН=0; ЧГ="),
				Параметры.Количество,
				Строка(Параметры.ПерваяЗапись.УникальныйИдентификатор()));
			ПараметрыСсылкиВперед	= Новый Структура("mainpage, prevpage, currpage, limit, id",
				?(Параметры.ГлавнаяСтраница, "true", "false"),
				Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ="),
				Формат(Параметры.НомерСтраницы + 1, "ЧН=0; ЧГ="),
				Параметры.Количество,
				Строка(Параметры.ПоследняяЗапись.УникальныйИдентификатор()));

			АдресСсылкиНачало	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("news", ПараметрыСсылкиНачало);
			АдресСсылкиНазад	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("news", ПараметрыСсылкиНазад);
			АдресСсылкиВперед	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("news", ПараметрыСсылкиВперед);
			
			СтруктураКнопкиНачало	= ПолучитьКнопку(
				"&#171;",
				"",
				АдресСсылкиНачало,
				НСтр("ru = 'Первая страница'"),
				Истина,
				"first_page");
			
			Если Параметры.НомерСтраницы = 1 Тогда
				СтруктураКнопкиНазад = "<li><span class='prev_page'>&#8249;</span></li>";
			Иначе 
				СтруктураКнопкиНазад	= ПолучитьКнопку(
					"&#8249;",
					"",
					АдресСсылкиНазад,
					НСтр("ru = 'Предыдущая страница'"),
					Истина,
					"prev_page");
			КонецЕсли;
			
			СтруктураКнопкиСтраница	= "<li><span title='" + НСтр("ru = 'Текущая страница'") + "' class='page_info'>Стр. № " + Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ=") + "</span></li>";
			
			Если Параметры.Конец Тогда
				СтруктураКнопкиВперед = "<li><span class='next_page'>&#8250;</span></li>";
			Иначе 
				СтруктураКнопкиВперед	= ПолучитьКнопку(
					"&#8250;",
					"",
					АдресСсылкиВперед,
					НСтр("ru = 'Следующая страница'"),
					Истина,
					"next_page");
			КонецЕсли;
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиНачало);
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиНазад);
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиСтраница);
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиВперед);
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоманднаяПанель;
	
КонецФункции

// Параметры
//	АдресаКартинок - Структура
//	Параметры - Структура
//		Ссылка - СправочникСсылка.КатегорииБазыЗнаний (Добавить, Изменить)
//	СписокКнопки - Строка
//		Добавить, Изменить, Подписаться
//	
Функция ПолучитьКоманднуюПанель_Категория(АдресаКартинок, Знач Параметры, Знач СписокКнопки = "")
	
	Если ПустаяСтрока(СписокКнопки) Тогда
		Возврат "";
	КонецЕсли;
	
	// ТекущиийПользователь    = Пользователи.ТекущийПользователь();
	ЕстьПравоРедактирования = УправлениеITОтделом8УФПовтИсп.Право("ДобавлениеИзменениеБазыЗнаний") 
		Или УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава");
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Ссылка", Неопределено);
	
	ИДКатегория = "";
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		ИДКатегория = Строка(Параметры.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	КоманднаяПанель = Новый Структура;
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Кнопки"		, Новый Массив);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Настройки"	, Новый Структура);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель.Настройки, "Выравнивание", "Право");
	
	МассивКнопок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокКнопки);
	Для Каждого ИмяКнопки Из МассивКнопок Цикл
		ВрегИмяКнопки	= ВРег(СокрЛП(ИмяКнопки));
		ПараметрыСсылки = Новый Структура;
		
		Если ВрегИмяКнопки = "ДОБАВИТЬ" Тогда
			Если ЕстьПравоРедактирования Тогда
				Если НЕ ПустаяСтрока(ИДКатегория) Тогда
					ПараметрыСсылки.Вставить("parent", ИДКатегория);
				КонецЕсли;
				АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_create("category", ПараметрыСсылки);
				
				СтруктураКнопки = ПолучитьКнопку("Добавить",
					АдресаКартинок.ДобавитьКатегорию,
					АдресСсылки,
					НСтр("ru = 'Добавить категорию'"));
			Иначе Продолжить;					
			КонецЕсли;
		ИначеЕсли ВрегИмяКнопки = "ИЗМЕНИТЬ" Тогда
			Если ЕстьПравоРедактирования Тогда
				ПараметрыСсылки.Вставить("id", ИДКатегория);
				АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_edit("category", ПараметрыСсылки);
				
				СтруктураКнопки = ПолучитьКнопку("Изменить",
					АдресаКартинок.Редактирование,
					АдресСсылки,
					НСтр("ru = 'Изменить категорию'"));
			Иначе Продолжить;					
			КонецЕсли;
		ИначеЕсли ВрегИмяКнопки = "ПОДПИСАТЬСЯ" Тогда		
			ПараметрыСсылки.Вставить("id", ИДКатегория);
			АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_subscribe("category", ПараметрыСсылки);
			
			СтруктураКнопки = ПолучитьКнопку("Подписаться",			
				АдресаКартинок.Кнопка,
				АдресСсылки,
				//НСтр("ru = 'Подписаться на категорию'"));
				НСтр("ru = 'Добавить в новостную ленту'"));
		
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
	КонецЦикла;
	
	Возврат КоманднаяПанель;
	
КонецФункции

// Параметры
//	АдресаКартинок - Структура
//	Параметры - Структура
//		ВидСтраницы - Строка
//		Количество - Число (ПереключениеСтраниц)
//		НомерСтраницы - Число (ПереключениеСтраниц)
//		ПерваяЗапись - СправочникСсылка.СтатьиБазыЗнаний (ПереключениеСтраниц)
//		ПоследняяЗапись - СправочникСсылка.СтатьиБазыЗнаний (ПереключениеСтраниц)
//		Конец - Булево (ПереключениеСтраниц)
//		Ссылка - СправочникСсылка.СтатьиБазыЗнаний (Изменить)
//		Категория - СправочникСсылка.КатегорииБазыЗнаний (Добавить)
//			
//	СписокКнопки - Строка
//		Добавить, Изменить, ПереключениеСтраниц
//	
Функция ПолучитьКоманднуюПанель_Статьи(АдресаКартинок, Знач Параметры, Знач СписокКнопки = "")
	
	Если ПустаяСтрока(СписокКнопки) Тогда
		СписокКнопки = "";
	КонецЕсли;
	
	ПустаяСсылка			= Справочники.СтатьиБазыЗнаний.ПустаяСсылка();
	ПустаяКатегория			= Справочники.КатегорииБазыЗнаний.ПустаяСсылка();
	ЕстьПравоРедактироваия  = УправлениеITОтделом8УФПовтИсп.Право("ДобавлениеИзменениеБазыЗнаний") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава");	
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ВидСтраницы"		, "");
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Количество"		, 0);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "НомерСтраницы"	, 1);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПерваяЗапись"		, ПустаяСсылка);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "ПоследняяЗапись"	, ПустаяСсылка);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Конец"			, Ложь);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Ссылка"			, ПустаяСсылка);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Категория"		, ПустаяКатегория);
	
	КоманднаяПанель = Новый Структура;
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Кнопки"		, Новый Массив);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Настройки"	, Новый Структура);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель.Настройки, "Выравнивание", "Право");
	
	ИДСтатья = "";
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		ИДСтатья = Строка(Параметры.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	ИДКатегория = "";
	Если ЗначениеЗаполнено(Параметры.Категория) Тогда
		ИДКатегория = Строка(Параметры.Категория.УникальныйИдентификатор());
	КонецЕсли;
	
	МассивКнопок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокКнопки);
	Для Каждого ИмяКнопки Из МассивКнопок Цикл
		ВрегИмяКнопки	= ВРег(СокрЛП(ИмяКнопки));
		ПараметрыСсылки = Новый Структура;
		
		Если ВрегИмяКнопки = "ДОБАВИТЬ" Тогда
			Если ЕстьПравоРедактироваия Тогда
				ПараметрыСсылки	= Новый Структура("category", ИДКатегория);				
				АдресСсылки 	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_create("article", ПараметрыСсылки);				
				СтруктураКнопки = ПолучитьКнопку("Добавить",
				АдресаКартинок.ДобавитьСтатью,
				АдресСсылки,
				НСтр("ru = 'Добавить статью'"));				
				КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);			
			КонецЕсли;
		ИначеЕсли ВрегИмяКнопки = "ИЗМЕНИТЬ" Тогда
			Если ЕстьПравоРедактироваия Тогда
			ПараметрыСсылки.Вставить("id", ИДСтатья);
			АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_edit("article", ПараметрыСсылки);
			
			СтруктураКнопки = ПолучитьКнопку("Изменить",
				АдресаКартинок.Редактирование,
				АдресСсылки,
				НСтр("ru = 'Изменить статью'"));
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
			КонецЕсли;
		
		ИначеЕсли ВрегИмяКнопки = "ПЕРЕКЛЮЧЕНИЕСТРАНИЦ" Тогда
			
			ПараметрыСсылкиНачало	= Новый Структура("prevpage, currpage, limit, type, category",
				"0",
				"1",
				Параметры.Количество,
				Параметры.ВидСтраницы,
				ИДКатегория);
			ПараметрыСсылкиНазад	= Новый Структура("prevpage, currpage, limit, type, category, id",
				Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ="),
				Формат(Параметры.НомерСтраницы - 1, "ЧН=0; ЧГ="),
				Параметры.Количество,
				Параметры.ВидСтраницы,
				ИДКатегория,				
				Строка(Параметры.ПерваяЗапись.УникальныйИдентификатор()));
			ПараметрыСсылкиВперед	= Новый Структура("prevpage, currpage, limit, type, category, id",
				Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ="),
				Формат(Параметры.НомерСтраницы + 1, "ЧН=0; ЧГ="),
				Параметры.Количество,
				Параметры.ВидСтраницы,
				ИДКатегория,
				Строка(Параметры.ПоследняяЗапись.УникальныйИдентификатор()));

			АдресСсылкиНачало	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("articles", ПараметрыСсылкиНачало);
			АдресСсылкиНазад	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("articles", ПараметрыСсылкиНазад);
			АдресСсылкиВперед	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("articles", ПараметрыСсылкиВперед);
			
			СтруктураКнопкиНачало	= ПолучитьКнопку(
				"&#171;",
				"",
				АдресСсылкиНачало,
				НСтр("ru = 'Первая страница'"),
				Истина,
				"first_page");
			
			Если Параметры.НомерСтраницы = 1 Тогда
				СтруктураКнопкиНазад = "<li><span class='prev_page'>&#8249</span></li>";
			Иначе 
				СтруктураКнопкиНазад	= ПолучитьКнопку(
					"&#8249;",
					"",
					АдресСсылкиНазад,
					НСтр("ru = 'Предыдущая страница'"),
					Истина,
					"prev_page");
			КонецЕсли;
			
			СтруктураКнопкиСтраница	= "<li><span title='" + НСтр("ru = 'Текущая страница'") + "' class='page_info'>Стр. № " + Формат(Параметры.НомерСтраницы, "ЧН=0; ЧГ=") + "</span></li>";
			
			Если Параметры.Конец Тогда
				СтруктураКнопкиВперед = "<li><span class='next_page'>&#8250;</span></li>";
			Иначе 
				СтруктураКнопкиВперед	= ПолучитьКнопку(
					"&#8250;",
					"",
					АдресСсылкиВперед,
					НСтр("ru = 'Следующая страница'"),
					Истина,
					"next_page");
			КонецЕсли;
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиНачало);
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиНазад);
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиСтраница);
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопкиВперед);
		
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоманднаяПанель;
	
КонецФункции

// Параметры
//	АдресаКартинок - Структура
//	Параметры - Структура
//		Ссылка - СправочникСсылка.СтатьиБазыЗнаний (Изменить)
//			
//	СписокКнопки - Строка
//		Добавить, Изменить, ПереключениеСтраниц
//	
Функция ПолучитьКоманднуюПанель_Статья(АдресаКартинок, Знач Параметры, Знач СписокКнопки = "")
	
	Если ПустаяСтрока(СписокКнопки) Тогда
		СписокКнопки = "";
	КонецЕсли;
	
	ПустаяСсылка	        = Справочники.СтатьиБазыЗнаний.ПустаяСсылка();
	ЕстьПравоРедактирования = УправлениеITОтделом8УФПовтИсп.Право("ДобавлениеИзменениеБазыЗнаний") 
		Или УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"); 
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(Параметры, "Ссылка", ПустаяСсылка);
	
	КоманднаяПанель = Новый Структура;
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Кнопки"		, Новый Массив);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель, "Настройки"	, Новый Структура);
	БазаЗнанийHTMLКлиентСервер.ПроверитьСвойствоКоллекции(КоманднаяПанель.Настройки, "Выравнивание", "Право");
	
	ИДСтатья = "";
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		ИДСтатья = Строка(Параметры.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	МассивКнопок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокКнопки);
	Для Каждого ИмяКнопки Из МассивКнопок Цикл
		ВрегИмяКнопки	= ВРег(СокрЛП(ИмяКнопки));
		ПараметрыСсылки = Новый Структура;
		
		Если ВрегИмяКнопки = "ИЗМЕНИТЬ" Тогда
			Если ЕстьПравоРедактирования Тогда
				ПараметрыСсылки.Вставить("id", ИДСтатья);
				АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_edit("article", ПараметрыСсылки);			
				СтруктураКнопки = ПолучитьКнопку("Изменить",
					АдресаКартинок.Редактирование,
					АдресСсылки,
					НСтр("ru = 'Изменить статью'"));			
				КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
		    КонецЕсли;
		ИначеЕсли ВрегИмяКнопки = "ОЦЕНИТЬ" Тогда
			
			ПараметрыСсылки	= Новый Структура("id", ИДСтатья);
			АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_rating("article", ПараметрыСсылки);
			
			СтруктураКнопки = ПолучитьКнопку("Оценить",
				АдресаКартинок.ЗвездаПолная,
				АдресСсылки,
				НСтр("ru = 'Оценить статью'"));
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
		ИначеЕсли ВрегИмяКнопки = "СКОПИРОВАТЬССЫЛКУ" Тогда
			
			ПараметрыСсылки	= Новый Структура("id", ИДСтатья);
			АдресСсылки		= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_getlink("article", ПараметрыСсылки);
			
			СтруктураКнопки = ПолучитьКнопку("Ссылка",
				АдресаКартинок.НавигационнаяСсылка,
				АдресСсылки,
				НСтр("ru = 'Получить ссылку'"));
			
			КоманднаяПанель.Кнопки.Добавить(СтруктураКнопки);
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоманднаяПанель;
	
КонецФункции

#КонецОбласти

#Область Профиль

// Формирует текст HTML блока "Профиль пользователя".
//
// Параметры:
//	АдресаКартинок - Структура.
//	Пользователь - СправочникСсылка.Пользователи.
//
// Возвращаемое значение.
//	Строка.
//
Функция ПолучитьHTML_Профиль(АдресаКартинок, Пользователь)
	
	// ПользовательИД		= Строка(Пользователь.УникальныйИдентификатор());
	ПользовательНаим	= Строка(Пользователь);
	
	АдресСсылкиПрофиль		= "";
	// АдресСсылкиИзбранное	= "";
	// АдресСсылкиПодписка		= "";
	// АдресСсылкиИстория		= "";
	
	ТекстHTML = 
	"<div class='kbuser'>
	|	<div class='user_head'>
	|		<img src='data:image/png;base64," + Base64Строка(АдресаКартинок.Пользователь.ПолучитьДвоичныеДанные()) + "'>
	|		<h1><a href='" + АдресСсылкиПрофиль + "'>" + ПользовательНаим + "</a></h1>
	|		</br>
	|	</div>
	|</div>
	|<div id='panel_button'>	
	|</div>";
	
	Возврат ТекстHTML;
	
КонецФункции

#КонецОбласти

#КонецОбласти
