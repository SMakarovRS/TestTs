////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с месенджером Telegram.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Обработка_сообщений

// Позволяет получить сообщения с сайта Telegram.
//
Процедура ОбработатьВходящиеСообщения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	                                            
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьTelegram") Тогда
		Возврат;
	КонецЕсли;
	
	// Выбираем по каждому боту его максимальный update_id - ИдентификаторОбновления (если он заполнен).
	ЗапросМакс = Новый Запрос();
	ЗапросМакс.Текст =
		"ВЫБРАТЬ
		|	TelegramБоты.Ссылка КАК Бот,
		|	TelegramБоты.Наименование КАК Наименование,
		|	TelegramБоты.СпособВзаимодействияСБотом КАК СпособВзаимодействияСБотом,
		|	TelegramБоты.Токен КАК Токен,
		|	ЕСТЬNULL(TelegramЧаты.ИдентификаторОбновления, 0) КАК ИдентификаторОбновления
		|ИЗ
		|	Справочник.TelegramБоты КАК TelegramБоты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TelegramЧаты КАК TelegramЧаты
		|		ПО TelegramБоты.Ссылка = TelegramЧаты.Бот
		|ГДЕ
		|	TelegramБоты.Активность = ИСТИНА
		|	И TelegramБоты.СпособВзаимодействияСБотом = ЗНАЧЕНИЕ(Перечисление.TelegramСпособВзаимодействияСБотом.ПериодическийЗапрос)
		|	И TelegramБоты.Токен <> """"
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатВыборкиМакс = ЗапросМакс.Выполнить();
	
	// Запрос вообще пустой (нет ботов).
	Если РезультатВыборкиМакс.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивНакопленныхДанных = Новый Массив;
	
	// По каждому боту получаем информацию и обрабатываем
	ВыборкаМакс = РезультатВыборкиМакс.Выбрать(); 
	Пока ВыборкаМакс.Следующий() Цикл
				
		НастройкиБота 		= НастройкиБота(ВыборкаМакс.Бот);
		
		Если ВыборкаМакс.ИдентификаторОбновления <> 0 Тогда
			OffSet = "?offset=" + Формат(ВыборкаМакс.ИдентификаторОбновления, "ЧГ=");
		Иначе
			OffSet = "";
		КонецЕсли;
	
		Ресурс = "bot" + НастройкиБота.Токен + "/getUpdates" + OffSet;
		
		// Отправляем запрос на сервер.
		Ответ = Get(Ресурс);
		
		// Обработка ответов.
		ОбработатьОтветСервера(Ответ, НастройкиБота, МассивНакопленныхДанных);
		
	КонецЦикла;
	
	// Отправляем все данные.
	ОтправитьНакопленныеДанные(МассивНакопленныхДанных);
	
КонецПроцедуры

// Обрабатывает ответ от сервера.
//
// Параметры:
//	Ответ - HTTPОтвет - ответ от сервера Telegram.
//	НастройкиБота - Структура - настройки бота.
//	МассивНакопленныхДанных - Массив - данные, которые будут отправлены пользователю и настройки сообщения.
//
Процедура ОбработатьОтветСервера(Знач Ответ, Знач НастройкиБота, МассивНакопленныхДанных) Экспорт
	
	Бот = НастройкиБота.Ссылка;
	
	Если Ответ = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Telegram", УровеньЖурналаРегистрации.Ошибка, , , Строка(Бот) + ": "
			+ НСтр("ru = 'Бот не вернул ответ. Попробуйте использовать прокси серверы'"));
		Возврат;
	КонецЕсли;
	
	СтрокаJSON = Ответ.ПолучитьТелоКакСтроку();
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	Результат = ПрочитатьJSON(Чтение);
	
	Если Результат["ok"] Тогда
		
		ТабID = Новый ТаблицаЗначений;
		ТабID.Колонки.Добавить("ИдентификаторОбновления", ПолучитьОписаниеТиповЧисла(30));
		
		Для Каждого upd Из Результат["result"] Цикл
			
			СтрТаб = ТабID.Добавить();
			СтрТаб.ИдентификаторОбновления = upd["update_id"];
			
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТабID.ИдентификаторОбновления КАК ИдентификаторОбновления
			|ПОМЕСТИТЬ ТабID
			|ИЗ
			|	&ТабID КАК ТабID
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТабID.ИдентификаторОбновления КАК ИдентификаторОбновления
			|ИЗ
			|	ТабID КАК ТабID
			|ГДЕ
			|	НЕ ТабID.ИдентификаторОбновления В
			|				(ВЫБРАТЬ
			|					TelegramСообщениеВходящее.ИдентификаторОбновления
			|				ИЗ
			|					Документ.TelegramСообщениеВходящее КАК TelegramСообщениеВходящее
			|				ГДЕ
			|					TelegramСообщениеВходящее.Бот = &Бот)";
		
		Запрос.УстановитьПараметр("ТабID", ТабID);
		Запрос.УстановитьПараметр("Бот", Бот);
		
		// Список новых идентификаторов сообщений, перебираем их и создаем сообщения.
		НовыеИдентификаторыСообщений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторОбновления");
		Для Каждого ВходящееСообщение Из Результат["result"] Цикл
			
			ИдентификаторОбновления = ВходящееСообщение["update_id"];
			Если НовыеИдентификаторыСообщений.Найти(ИдентификаторОбновления) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Обработка входящих сообщений.
			НакопленныеДанные = ОбработатьВходящееСообщение(НастройкиБота, ИдентификаторОбновления, ВходящееСообщение);
			Если НакопленныеДанные <> Неопределено Тогда
				МассивНакопленныхДанных.Добавить(НакопленныеДанные);
			КонецЕсли;
						
		КонецЦикла;
					
	КонецЕсли;
	
	Чтение.Закрыть();
	
КонецПроцедуры

// Делает разбор одного входящего сообщения, записывает его в ИБ и выполняет команды.
//
// Параметры:
//	НастройкиБота - Структура - структура настроек бота.
//	ИдентификаторОбновления - Число - идентификатор обновления Telegram.
//	ВходящееСообщение - Структура - входящее сообщение.
//
// Возвращаемое значение:
//	Структура - накопленные данные для отправки.
//
Функция ОбработатьВходящееСообщение(Знач НастройкиБота, Знач ИдентификаторОбновления, Знач ВходящееСообщение) Экспорт
		
	// Параметры пользователя.
    НакопленныеДанные = Новый Структура;
	НакопленныеДанные.Вставить("Ошибки", Новый Массив);	
	НакопленныеДанные.Вставить("НастройкиБота", НастройкиБота);
    НакопленныеДанные.Вставить("ИдентификаторОбновления", ИдентификаторОбновления);
    НакопленныеДанные.Вставить("Сообщения", Новый Массив);
	НакопленныеДанные.Вставить("Параметры", Новый Соответствие);
	
	// Предопределенные значения.
	ТекстСообщения 			= "";
	//@skip-warning
	ТекстПодписиКФайлу		= "";
	ТипСообщения 			= Неопределено;
	//@skip-warning
	СодержитСтикер			= Ложь;
	//@skip-warning
	СодержитТекст			= Ложь;
	//@skip-warning
	СодержитАудио			= Ложь;
	//@skip-warning
	СодержитДокумент		= Ложь;
	//@skip-warning
	СодержитФото			= Ложь;
	//@skip-warning
	СодержитПодписьКФайлу	= Ложь;
	callback_query			= Ложь;
	
	Если ВходящееСообщение.Свойство("callback_query") Тогда
		
		callback_query = Истина;
		
		ТипСообщения	= Перечисления.TelegramТипСообщения.Запрос;
		ПоляСообщения	= ВходящееСообщение.callback_query.message;
		ТекстСообщения	= ВходящееСообщение.callback_query.data;
		СтруктураПользователя = ВходящееСообщение.callback_query.from;
	
	ИначеЕсли ВходящееСообщение.Свойство("edited_message") Тогда
				
		ПоляСообщения = ВходящееСообщение.edited_message;
		СтруктураПользователя = ПоляСообщения.from;
		
		ИсходноеСообщение = Документы.TelegramСообщениеВходящее.НайтиПоНомеру(ПоляСообщения["message_id"]);
		Если Не ИсходноеСообщение.Пустая() Тогда
			
			ИсходноеСообщениеОбъект = ИсходноеСообщение.ПолучитьОбъект();
			
			// Заблокируем объект.
			Попытка
				ИсходноеСообщениеОбъект.Заблокировать();
			Исключение
				Возврат Неопределено;
			КонецПопытки;
			
			Если ПоляСообщения.Свойство("text") Тогда
				ИсходноеСообщениеОбъект.Текст = ПоляСообщения["text"];
			ИначеЕсли ПоляСообщения.Свойство("caption") Тогда
				ИсходноеСообщениеОбъект.Текст = ПоляСообщения["caption"];	
			Иначе
				ИсходноеСообщениеОбъект.Текст = "";
			КонецЕсли;
			
			ИсходноеСообщениеОбъект.Записать();
			
		КонецЕсли;
		
	ИначеЕсли ВходящееСообщение.Свойство("message") Тогда
		
		ПоляСообщения = ВходящееСообщение.message;
		Если ПоляСообщения.Свойство("contact") Тогда
			ТекстСообщения = "contact";
		ИначеЕсли ПоляСообщения.Свойство("text") Тогда
			ТекстСообщения = ПоляСообщения.text;
		Иначе
			ТекстСообщения = "";
		КонецЕсли;
		СтруктураПользователя = ПоляСообщения.from;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПоляЧата = ПоляСообщения.chat;
	
	// Предопределенные значения.
	ИдентификаторЧата 		= ПоляЧата["id"];
	ИдентификаторСообщения 	= ПоляСообщения["message_id"];
	ИдентификаторКонтакта 	= ПоляЧата["id"];
	Если ПоляСообщения.Свойство("reply_to_message") Тогда
		ИдентификаторОтветаНаСообщения = ПоляСообщения.reply_to_message.message_id;
	Иначе
		ИдентификаторОтветаНаСообщения = Неопределено;
	КонецЕсли;		
	
    НакопленныеДанные.Вставить("ИдентификаторЧата", 				ИдентификаторЧата);
    НакопленныеДанные.Вставить("ИдентификаторСообщения", 			ИдентификаторСообщения);
	НакопленныеДанные.Вставить("ИдентификаторКонтакта", 			ИдентификаторКонтакта);
	НакопленныеДанные.Вставить("ИдентификаторОтветаНаСообщения", 	ИдентификаторОтветаНаСообщения);
	
	// Проверка, обрабатывать ли сообщения пользователя, который отправил сообщение.
	// Возможно он не создан и у бота есть ограничение по доступу.
	//@skip-warning
	СуществующийПользовательTelegram = НайтиПользователя(НастройкиБота, СтруктураПользователя);
	ПользовательTelegram = НайтиСоздатьПользователя(НастройкиБота, СтруктураПользователя);
	
	// Проверка, что пользователья не существует.
	Если НЕ ЗначениеЗаполнено(ПользовательTelegram) Тогда
		ДобавитьОшибку(НастройкиБота.Ссылка, СтрШаблон(
			НСтр("ru = 'Ошибка сопоставления пользователей. Для бота %1 и пользователя Telegram (%2) не указан пользователь в настройках информационной базы'"),
				НастройкиБота.Наименование, СтруктураПользователя["username"]),
			НакопленныеДанные);
		Возврат НакопленныеДанные;
	КонецЕсли;
	
	РеквизитыПользовательTelegram = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПользовательTelegram, 
		"Наименование,Пользователь,ИмяПрофиля,Имя", Истина);
	
	// Данные профиля Telegram
	НакопленныеДанные.Вставить("ФИОПользователяTelegram", РеквизитыПользовательTelegram.Наименование);
	Если НЕ ПустаяСтрока(РеквизитыПользовательTelegram.Имя) Тогда
		НакопленныеДанные.Вставить("ИмяПользователяTelegram", РеквизитыПользовательTelegram.Имя);
	Иначе
		НакопленныеДанные.Вставить("ИмяПользователяTelegram", НСтр("ru = 'пользователь'"));
	КонецЕсли;
	НакопленныеДанные.Вставить("ИмяПрофиля", РеквизитыПользовательTelegram.ИмяПрофиля);
	НакопленныеДанные.Вставить("ПользовательTelegram", ПользовательTelegram);
	
	// Данные по пользователям.
	Пользователь = РеквизитыПользовательTelegram.Пользователь;	
	НакопленныеДанные.Вставить("Пользователь", Пользователь);
	
	НайденноеСообщение = Документы.TelegramСообщениеВходящее.НайтиПоНомеру(ИдентификаторСообщения);
	
	Если НайденноеСообщение.Пустая() Тогда
		Сообщение 		= Документы.TelegramСообщениеВходящее.СоздатьДокумент();
		СообщениеСсылка = Документы.TelegramСообщениеВходящее.ПолучитьСсылку(Новый УникальныйИдентификатор);
		Сообщение.УстановитьСсылкуНового(СообщениеСсылка);
		Сообщение.Номер	= ИдентификаторСообщения;
	Иначе
		Сообщение 		= НайденноеСообщение.ПолучитьОбъект();
		СообщениеСсылка = НайденноеСообщение.Ссылка;
	КонецЕсли;
	
	МассивНовыхФайлов = Новый Массив;
	НакопленныеДанные.Параметры = ЗначенияПараметровДействий(НастройкиБота.Ссылка, ИдентификаторЧата);
	
	// Разбор сообщений Telegram.
	#Область Разбор_сообщения
	
	Если callback_query = Ложь Тогда
	
		Если ПоляСообщения.Свойство("text") Тогда
			
			#Область TEXT
			
			ТекстСообщения 	= ПоляСообщения["text"]; 
			ТипСообщения 	= Перечисления.TelegramТипСообщения.Текст;
			СодержитТекст 	= Истина;
			
			#КонецОбласти
			
		ИначеЕсли ПоляСообщения.Свойство("photo") Тогда
			
			#Область PHOTO
			
			МассивФото = ПоляСообщения.photo;
			
			Для Каждого Фото Из МассивФото Цикл
				
				ПараметрыФайла = СкачатьФайл(Фото["file_id"], ПоляСообщения, НакопленныеДанные);
				Если ЗначениеЗаполнено(ПараметрыФайла) Тогда
					
					ПараметрыФайла.Вставить("ВладелецФайлов", 	СообщениеСсылка);
					ПараметрыФайла.Вставить("Автор", 			ПользовательTelegram);
					НовыйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПараметрыФайла.АдресВоВременномХранилище);
					
					МассивНовыхФайлов.Добавить(НовыйФайл);
				Иначе
					Возврат Неопределено;
				КонецЕсли;
							
			КонецЦикла;
			
			Если ПоляСообщения.Свойство("caption") Тогда
				ТекстПодписиКФайлу = ПоляСообщения["caption"];
				СодержитПодписьКФайлу = Истина;
			КонецЕсли;
			
			ТипСообщения = Перечисления.TelegramТипСообщения.Фото;
			СодержитФото = Истина;
			
			#КонецОбласти
			
		ИначеЕсли ПоляСообщения.Свойство("document") Тогда
			
			#Область DOCUMENT
			
			Документ = ПоляСообщения.document;
			
			ПараметрыФайла = СкачатьФайл(Документ["file_id"], ПоляСообщения, НакопленныеДанные);
			Если ЗначениеЗаполнено(ПараметрыФайла) Тогда
				
				ПараметрыФайла.Вставить("ВладелецФайлов", 	СообщениеСсылка);
				ПараметрыФайла.Вставить("Автор", 			ПользовательTelegram);
				НовыйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПараметрыФайла.АдресВоВременномХранилище);
				
				МассивНовыхФайлов.Добавить(НовыйФайл);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
			Если ПоляСообщения.Свойство("caption") Тогда
				ТекстСообщения = ПоляСообщения["caption"];
				СодержитПодписьКФайлу = Истина;
			КонецЕсли;
			
			ТипСообщения = Перечисления.TelegramТипСообщения.Документ;
			СодержитДокумент = Истина;
			
			#КонецОбласти
			
		ИначеЕсли ПоляСообщения.Свойство("voice") Тогда
			
			#Область VOICE
			
			Аудио = ПоляСообщения.voice;
			
			ПараметрыФайла = СкачатьФайл(Аудио["file_id"], ПоляСообщения, НакопленныеДанные);
			Если ЗначениеЗаполнено(ПараметрыФайла) Тогда
				
				ПараметрыФайла.Вставить("ВладелецФайлов", 	СообщениеСсылка);
				ПараметрыФайла.Вставить("Автор", 			ПользовательTelegram);
				НовыйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПараметрыФайла.АдресВоВременномХранилище);
				
				МассивНовыхФайлов.Добавить(НовыйФайл);
			Иначе
				Возврат Неопределено;
			КонецЕсли;		
			
			Если ПоляСообщения.Свойство("caption") Тогда
				ТекстСообщения = ПоляСообщения["caption"];
				СодержитПодписьКФайлу = Истина;
			КонецЕсли;
			
			ТипСообщения = Перечисления.TelegramТипСообщения.Аудио;
			СодержитАудио = Истина;
			
			#КонецОбласти
			
		ИначеЕсли ПоляСообщения.Свойство("sticker") Тогда
			
			#Область STICKER
			
			ТекстСообщения = ПоляСообщения.sticker.emoji; 
			ТипСообщения = Перечисления.TelegramТипСообщения.Стикер;
			СодержитСтикер = Истина;
			
			#КонецОбласти
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
		
	НачатьТранзакцию();
	Попытка
		Сообщение.Бот 						= НастройкиБота.Ссылка;
		Сообщение.Дата 						= МестноеВремя(Дата('19700101') + ПоляСообщения["date"]);
        Сообщение.Пользователь              = ПользовательTelegram;
		Сообщение.Текст 					= ТекстСообщения;
		Сообщение.Тип 						= ТипСообщения;
		Сообщение.ИдентификаторОбновления	= ИдентификаторОбновления;	
		Сообщение.Записать();
		ЗафиксироватьТранзакцию();		
		
		НакопленныеДанные.Вставить("ТекстСообщения", ТекстСообщения);
		НакопленныеДанные.Вставить("ТипСообщения", ТипСообщения);
		НакопленныеДанные.Вставить("ДатаСообщения", Сообщение.Дата);
		НакопленныеДанные.Вставить("Сообщение", Сообщение.Ссылка);
	Исключение		
		ОтменитьТранзакцию();
		ДобавитьОшибку(НастройкиБота.Ссылка, СтрШаблон(НСтр("ru = 'Ошибка записи сообщения (%1) ботом %2. %3'"), 
			ИдентификаторОбновления, НастройкиБота.Наименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
			НакопленныеДанные);
	КонецПопытки;
		
	НакопленныеДанные.Вставить("ПользовательTelegram", ПользовательTelegram);
	
	// Пользователь не активен, отправим ему сообщение, пусть обратится к администраторам.
	// Проигнорируем обработку команд для такого пользователя.
	Если ПользовательTelegram.Активность = Ложь Тогда
		// Фиксируем, что пользователь создан, но необходим контроль со стороны администраторов.
		ФамилияИмя = ПользовательTelegram.Имя;
		Сообщение = Новый Структура();
		Сообщение.Вставить("Текст", 
			СтрШаблон(НСтр("ru = 'Здравствуйте, %1.
                            |Telegram-бот имеет ограниченный доступ. Для активации вашей учетной записи необходимо обратиться к администраторам.
                            |После активации появится возможность использовать бота без ограничений.
                            |Hi, %1.
                            |Telegram bot has limited access. To activate your account, you must contact your administrators.
                            |After activation, you will be able to use the bot without restrictions.'"), ФамилияИмя));
		Сообщение.Вставить("СкрытьКлавиатуру", Истина);
		ОтправитьСообщение(Сообщение, НакопленныеДанные);
		
		Возврат НакопленныеДанные;		
	КонецЕсли;
	
	// Проверка условий "ИЛИ".
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	TelegramКоманды.Ссылка КАК Команда,
		|	TelegramКоманды.ПрименитьОстальныеКоманды КАК ПрименитьОстальныеКоманды,
		|	TelegramКоманды.Наименование КАК Наименование,
		|	TelegramКоманды.ВходящийТекстИ.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		ВидСравнения КАК ВидСравнения,
		|		Значение КАК Значение
		|	) КАК ВходящийТекстИ,
		|	TelegramКоманды.ВходящийТекстИЛИ.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		ВидСравнения КАК ВидСравнения,
		|		Значение КАК Значение
		|	) КАК ВходящийТекстИЛИ,
		|	TelegramКоманды.УсловияИ.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Условие КАК Условие,
		|		Условие.Алгоритм КАК Алгоритм,
		|		Условие.ЕстьПрограммнаяПроверка КАК ЕстьПрограммнаяПроверка
		|	) КАК УсловияИ,
		|	TelegramКоманды.УсловияИЛИ.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Условие КАК Условие,
		|		Условие.Алгоритм КАК Алгоритм,
		|		Условие.ЕстьПрограммнаяПроверка КАК ЕстьПрограммнаяПроверка
		|	) КАК УсловияИЛИ,		
		|	TelegramКоманды.Действия.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Действие КАК Действие,
		|		Действие.Активность КАК Активность,
		|		Действие.Алгоритм КАК Алгоритм,
		|		Действие.ОчиститьВсеПараметры КАК ОчиститьВсеПараметры
		|	) КАК Действия
		|ИЗ
		|	Справочник.TelegramКоманды КАК TelegramКоманды
		|ГДЕ
		|	TelegramКоманды.Активность = ИСТИНА
		|	И TelegramКоманды.Владелец = &Бот
		|	И TelegramКоманды.ЭтоГруппа = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	TelegramКоманды.Приоритет УБЫВ";
	
	ИсходныйТекст 	= Сообщение.Текст;
	мИсходныйТекст 	= НРег(ИсходныйТекст);
	//@skip-warning
	МассивКоманд 	= Новый Массив;
	МассивВыполненныхДействий = Новый Массив;
	мВидыСравнения 	= Перечисления.TelegramВидыСравнения;
	
	КоличествоВыполненныхДействий = 0;
	
	Запрос.УстановитьПараметр("Бот", НастройкиБота.Ссылка);
	ВыборкаКоманды = Запрос.Выполнить().Выбрать();
	Пока ВыборкаКоманды.Следующий() Цикл
		
		// ВХОДЯЩИЙ ТЕКСТ
		//@skip-warning
		Команда = ВыборкаКоманды.Команда;
		
		#Область ПроверкаУсловийИ
		
		ГлобальныйРезультат = Истина;

		мВыборка = ВыборкаКоманды.ВходящийТекстИ.Выбрать();
		Пока мВыборка.Следующий() Цикл
			// Приводим все в один регистр и проверяем.
			Значение = НРег(мВыборка.Значение);
			
			Если мВыборка.ВидСравнения = мВидыСравнения.Равно Тогда
				Если мИсходныйТекст <> Значение Тогда
					ГлобальныйРезультат = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.НеРавно Тогда
				Если мИсходныйТекст = Значение Тогда
					ГлобальныйРезультат = Ложь;
					Прервать;
				КонецЕсли;				
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.Содержит И НЕ ПустаяСтрока(Значение) Тогда
				Если СтрНайти(мИсходныйТекст, Значение) = 0 Тогда
					ГлобальныйРезультат = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.НеСодержит И НЕ ПустаяСтрока(Значение) Тогда
				Если СтрНайти(мИсходныйТекст, Значение) > 0 Тогда
					ГлобальныйРезультат = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.Заполнено Тогда
				Если ПустаяСтрока(мИсходныйТекст) Тогда
					ГлобальныйРезультат = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.НеЗаполнено Тогда
				Если НЕ ПустаяСтрока(мИсходныйТекст) Тогда
					ГлобальныйРезультат = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.НачинаетсяС И НЕ ПустаяСтрока(Значение) Тогда
				Если СтрНачинаетсяС(мИсходныйТекст, Значение) = Ложь Тогда
					ГлобальныйРезультат = Ложь;
					Прервать;
				КонецЕсли;				
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.НеНачинаетсяС И НЕ ПустаяСтрока(Значение) Тогда
				Если СтрНачинаетсяС(мИсходныйТекст, Значение) = Истина Тогда
					ГлобальныйРезультат = Ложь;
					Прервать;
				КонецЕсли;			
			КонецЕсли;			
		КонецЦикла;

		// Условия И не сработали (не подходит команда).
		Если ГлобальныйРезультат = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		#КонецОбласти

		#Область ПроверкаУсловийПараметровИ
		
		мВыборка = ВыборкаКоманды.УсловияИ.Выбрать();	
		Пока мВыборка.Следующий() Цикл
			
			Бот = НастройкиБота.Ссылка;
			
			// Проверка должна вернуть результат (!)
			РезультатУсловий = Истина;
			
			// Проверка параметров (если они есть).
			Для Каждого Строки Из мВыборка.Условие.Параметры Цикл
				ПараметрыДействий = ЗначенияПараметровДействий(Бот, ИдентификаторЧата);
				Значение = Строки.Значение;
				ЗначениеПараметра = ПараметрыДействий.Получить(Строки.Параметр);
				
				// Для строк приводим их к одному виду и регистру.
				Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
					ЗначениеПараметра = НРег(СокрЛП(ЗначениеПараметра));
				КонецЕсли;
				Если ТипЗнч(Значение) = Тип("Строка") Тогда
					Значение = НРег(СокрЛП(Значение));
				КонецЕсли;
				
				Если Строки.ВидСравнения = мВидыСравнения.Равно Тогда
					Если ЗначениеПараметра <> Значение Тогда
						РезультатУсловий = Ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.Больше Тогда
					//@skip-warning
					Если ЗначениеПараметра <= Значение Тогда
						РезультатУсловий = Ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.БольшеИлиРавно Тогда
					//@skip-warning
					Если ЗначениеПараметра < Значение Тогда
						РезультатУсловий = Ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.Меньше Тогда
					//@skip-warning
					Если ЗначениеПараметра >= Значение Тогда
						РезультатУсловий = Ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.МеньшеИлиРавно Тогда
					//@skip-warning
					Если ЗначениеПараметра > Значение Тогда
						РезультатУсловий = Ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.НеРавно Тогда
					Если ЗначениеПараметра = Значение Тогда
						РезультатУсловий = Ложь;
						Прервать;
					КонецЕсли;				
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.Содержит И НЕ ПустаяСтрока(Значение) Тогда
					Если СтрНайти(ЗначениеПараметра, Значение) = 0 Тогда
						РезультатУсловий = Ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.НеСодержит И НЕ ПустаяСтрока(Значение) Тогда
					Если СтрНайти(ЗначениеПараметра, Значение) <> 0 Тогда
						РезультатУсловий = Ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.Заполнено Тогда
					Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						РезультатУсловий = Ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.НеЗаполнено Тогда
					Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						РезультатУсловий = Ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.НачинаетсяС И НЕ ПустаяСтрока(Значение) Тогда
					Если НЕ СтрНачинаетсяС(ЗначениеПараметра, Значение) Тогда
						РезультатУсловий = Ложь;
						Прервать;
					КонецЕсли;				
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.НеНачинаетсяС И НЕ ПустаяСтрока(Значение) Тогда
					Если НЕ СтрНачинаетсяС(ЗначениеПараметра, Значение) Тогда
						РезультатУсловий = Ложь;
						Прервать;
					КонецЕсли;			
				КонецЕсли;
				
			КонецЦикла;
			
			// Программная проверка.
			Результат = Истина;
			Если мВыборка.ЕстьПрограммнаяПроверка = Истина Тогда 
				Результат = Ложь;
				Попытка
					Выполнить(мВыборка.Алгоритм.Получить());
				Исключение
					ДобавитьОшибку(НастройкиБота.Ссылка, 
						СтрШаблон(НСтр("ru = 'Ошибка проверки условия И (%1) ботом %2. %3'"), мВыборка.Действие, 
							НастройкиБота.Наименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
						НакопленныеДанные);
				КонецПопытки;
			КонецЕсли;
			
			Если Результат = Ложь ИЛИ РезультатУсловий = Ложь Тогда
				ГлобальныйРезультат = Ложь;
				Прервать;
			КонецЕсли;
						
		КонецЦикла;
		
		Если ГлобальныйРезультат = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ПроверкаУсловийИЛИ
		
		мВыборка = ВыборкаКоманды.ВходящийТекстИЛИ.Выбрать();
		ГлобальныйРезультат = мВыборка.Количество() = 0;
		Пока мВыборка.Следующий() Цикл
			// Приводим все в один регистр и проверяем.
			Значение = НРег(мВыборка.Значение);
			
			Если мВыборка.ВидСравнения = мВидыСравнения.Равно Тогда
				Если мИсходныйТекст = Значение Тогда
					ГлобальныйРезультат = Истина;
					Прервать;
				КонецЕсли;
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.НеРавно Тогда
				Если мИсходныйТекст <> Значение Тогда
					ГлобальныйРезультат = Истина;
					Прервать;
				КонецЕсли;				
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.Содержит И НЕ ПустаяСтрока(Значение) Тогда
				Если СтрНайти(мИсходныйТекст, Значение) > 0 Тогда
					ГлобальныйРезультат = Истина;
					Прервать;
				КонецЕсли;
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.НеСодержит И НЕ ПустаяСтрока(Значение) Тогда
				Если СтрНайти(мИсходныйТекст, Значение) = 0 Тогда
					ГлобальныйРезультат = Истина;
					Прервать;
				КонецЕсли;
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.Заполнено Тогда
				Если НЕ ПустаяСтрока(мИсходныйТекст) Тогда
					ГлобальныйРезультат = Истина;
					Прервать;
				КонецЕсли;
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.НеЗаполнено Тогда
				Если ПустаяСтрока(мИсходныйТекст) Тогда
					ГлобальныйРезультат = Истина;
					Прервать;
				КонецЕсли;
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.НачинаетсяС И НЕ ПустаяСтрока(Значение) Тогда
				Если СтрНачинаетсяС(мИсходныйТекст, Значение) Тогда
					ГлобальныйРезультат = Истина;
					Прервать;
				КонецЕсли;				
			ИначеЕсли мВыборка.ВидСравнения = мВидыСравнения.НеНачинаетсяС И НЕ ПустаяСтрока(Значение) Тогда
				Если СтрНачинаетсяС(мИсходныйТекст, Значение) = Ложь Тогда
					ГлобальныйРезультат = Истина;
					Прервать;
				КонецЕсли;			
			КонецЕсли;
			
		КонецЦикла;
		
		#КонецОбласти

		#Область ПроверкаУсловийПараметровИЛИ
		
		мВыборка = ВыборкаКоманды.УсловияИЛИ.Выбрать();	
		Пока мВыборка.Следующий() Цикл
			
			Бот = НастройкиБота.Ссылка;
			
			// Проверка должна вернуть результат (!)
			РезультатУсловий = Ложь;
			
			// Проверка параметров (если они есть).
			Для Каждого Строки Из мВыборка.Условие.Параметры Цикл
				ПараметрыДействий = ЗначенияПараметровДействий(Бот, ИдентификаторЧата);
				Значение = Строки.Значение;
				ЗначениеПараметра = ПараметрыДействий.Получить(Строки.Параметр);
				
				// Для строк приводим их к одному виду и регистру.
				Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
					ЗначениеПараметра = НРег(СокрЛП(ЗначениеПараметра));
				КонецЕсли;
				Если ТипЗнч(Значение) = Тип("Строка") Тогда
					Значение = НРег(СокрЛП(Значение));
				КонецЕсли;
				
				Если Строки.ВидСравнения = мВидыСравнения.Равно Тогда
					Если ЗначениеПараметра = Значение Тогда
						РезультатУсловий = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.Больше Тогда
					//@skip-warning
					Если ЗначениеПараметра > Значение Тогда
						РезультатУсловий = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.БольшеИлиРавно Тогда
					//@skip-warning
					Если ЗначениеПараметра >= Значение Тогда
						РезультатУсловий = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.Меньше Тогда
					//@skip-warning
					Если ЗначениеПараметра < Значение Тогда
						РезультатУсловий = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.МеньшеИлиРавно Тогда
					//@skip-warning
					Если ЗначениеПараметра <= Значение Тогда
						РезультатУсловий = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.НеРавно Тогда
					Если ЗначениеПараметра <> Значение Тогда
						РезультатУсловий = Истина;
						Прервать;
					КонецЕсли;				
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.Содержит И НЕ ПустаяСтрока(Значение) Тогда
					Если СтрНайти(ЗначениеПараметра, Значение) > 0 Тогда
						РезультатУсловий = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.НеСодержит И НЕ ПустаяСтрока(Значение) Тогда
					Если СтрНайти(ЗначениеПараметра, Значение) = 0 Тогда
						РезультатУсловий = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.Заполнено Тогда
					Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						РезультатУсловий = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.НеЗаполнено Тогда
					Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						РезультатУсловий = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.НачинаетсяС И НЕ ПустаяСтрока(Значение) Тогда
					Если СтрНачинаетсяС(ЗначениеПараметра, Значение) Тогда
						РезультатУсловий = Истина;
						Прервать;
					КонецЕсли;				
				ИначеЕсли Строки.ВидСравнения = мВидыСравнения.НеНачинаетсяС И НЕ ПустаяСтрока(Значение) Тогда
					Если НЕ СтрНачинаетсяС(ЗначениеПараметра, Значение) Тогда
						РезультатУсловий = Истина;
						Прервать;
					КонецЕсли;			
				КонецЕсли;
				
			КонецЦикла;
			
			// Программная проверка.
			Если мВыборка.ЕстьПрограммнаяПроверка = Истина Тогда 
				Результат = Ложь;
				Попытка
					Выполнить(мВыборка.Алгоритм.Получить());
				Исключение
					ДобавитьОшибку(НастройкиБота.Ссылка, 
						СтрШаблон(НСтр("ru = 'Ошибка проверки условия ИЛИ (%1) ботом %2. %3'"), мВыборка.Действие, 
							НастройкиБота.Наименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
						НакопленныеДанные);
				КонецПопытки;
					
				РезультатУсловий = Результат;
			КонецЕсли;
			
			Если РезультатУсловий = Истина Тогда
				ГлобальныйРезультат = Истина;
				Прервать;
			КонецЕсли;
						
		КонецЦикла;
		
		Если ГлобальныйРезультат = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ВыполнениеДействий
		
		Бот 	= НастройкиБота.Ссылка;
		
		// Команда нам подходит.
		// Выполняем действия.
		мДействия = ВыборкаКоманды.Действия.Выбрать();	
		Пока мДействия.Следующий() Цикл
			
			// Делаем что-то и помещаем в накопленные данные с помощью процедур и функций
			Если ВыполнитьДействие(мДействия, НакопленныеДанные) Тогда
				МассивВыполненныхДействий.Добавить(мДействия.Действие);
				КоличествоВыполненныхДействий = КоличествоВыполненныхДействий + 1;
			КонецЕсли;

		КонецЦикла;
				
		#КонецОбласти
		
		// Останавливаем выполнение на этой команде после выполнения если такая настройка установлена.
		Если ВыборкаКоманды.ПрименитьОстальныеКоманды = Ложь Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Никакие действия не были выполнены, необходимо сказать об этом пользователю.
	Если КоличествоВыполненныхДействий = 0 Тогда
		
		// ...
		мДействие = Константы.TelegramДействиеКомандаНеНайдена.Получить();
		
		Если ЗначениеЗаполнено(мДействие) Тогда
			ВыполнитьДействие(мДействие, НакопленныеДанные);
		Иначе
			ДобавитьОшибку(НастройкиБота.Ссылка, 
				НСтр("ru = 'В настройках параметров учета не установлена константа ""Действие, если введенная команда не найдена""'"),
				НакопленныеДанные);			
		КонецЕсли;
			
	Иначе
		
		#Область РаботаСПараметрами
		
		Бот 	= НастройкиБота.Ссылка;
		
		Для Каждого ДействиеСсылка Из МассивВыполненныхДействий Цикл
			Если ДействиеСсылка.ОчиститьВсеПараметры Тогда
				ОчиститьПараметрыДействий(Бот, ИдентификаторЧата);
			Иначе
				
				Для Каждого Строки Из ДействиеСсылка.Параметры Цикл
					
					Если Строки.Действие = Перечисления.TelegramДействияСПараметром.Очистить Тогда
						ОчиститьПараметрДействия(Бот, ИдентификаторЧата, Строки.Параметр);
					Иначе
						УстановитьПараметрДействия(Бот, ИдентификаторЧата, Строки.Параметр, Строки.Значение);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		#КонецОбласти		
		
	КонецЕсли;
		
	// ВОЗВРАЩАЕМ НАКОПЛЕННЫЕ ДАННЫЕ.
	Возврат НакопленныеДанные;
    
КонецФункции

// Обработка сообщений Telegram в фоновом задании.
//
Процедура ПолучениеОтправкаСообщенияВФоне(Знач ПараметрыПроверки = Неопределено,
	АдресХранилища = Неопределено) Экспорт
	
	ОбработатьВходящиеСообщения();
    ОтправитьИсходящиеСообщения();
	
КонецПроцедуры

// Отправляет исходящее сообщение в Telegram.
//
Процедура ОтправитьИсходящиеСообщения() Экспорт
    
    Запрос = Новый Запрос();
    Запрос.Текст =
        "ВЫБРАТЬ РАЗЛИЧНЫЕ
        |	TelegramСообщениеИсходящее.Ссылка КАК Ссылка
        |ИЗ
        |	Документ.TelegramСообщениеИсходящее.Адресаты КАК TelegramСообщениеИсходящееАдресаты
        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.TelegramСообщениеИсходящее КАК TelegramСообщениеИсходящее
        |		ПО TelegramСообщениеИсходящееАдресаты.Ссылка = TelegramСообщениеИсходящее.Ссылка
        |ГДЕ
        |	TelegramСообщениеИсходящееАдресаты.Состояние = ЗНАЧЕНИЕ(Перечисление.TelegramСостояниеИсходящегоСообщения.Исходящее)
        |	И TelegramСообщениеИсходящее.ПометкаУдаления = ЛОЖЬ
        |
        |УПОРЯДОЧИТЬ ПО
        |	TelegramСообщениеИсходящее.МоментВремени";
    
    Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
        
        НачатьТранзакцию();
        Попытка            
            Об              = Выборка.Ссылка.ПолучитьОбъект();
            Об.ДатаОтправки = ТекущаяДатаСеанса();
            //@skip-warning
            МассивНакопленныхДанных = Новый Массив;
            НастройкиБота = НастройкиБота(Об.Бот);
            
            // Очистим текст от неподдерживаемых тегов.            
            МассивСообщений = СЛС.РазбитьТекстНаСообщения(Об.Текст);
            
            Для Каждого Строки Из Об.Адресаты Цикл
                
                СтрокиАдресатКод = Строки.Адресат.Код;
                НомерЧасти = 1;
                
                // Отправляем массив сообщений каждому адресату.
                Для Каждого Сообщение Из МассивСообщений Цикл                
                    структураОтвет = ПолучитьСтруктуруНовоеСообщение(СтрокиАдресатКод, Сообщение,,,,,"HTML");
    				структураОтвет.Вставить("saveMessageDoc", Ложь);
    				Строки.ОтправленныйЗапрос = Строки.ОтправленныйЗапрос 
                        + ?(ПустаяСтрока(Строки.ОтправленныйЗапрос),"", Символы.ПС + СтрШаблон(НСтр("ru = '=== %1 ==='"), НомерЧасти) + Символы.ПС) 
                        + ЗаписьJSONВСтруктуру(структураОтвет);
                	РезультатОтправки = ОтправитьДанные(НастройкиБота, структураОтвет);
                    Если ТипЗнч(РезультатОтправки) = Тип("Строка") Тогда
                    	Строки.Состояние = Перечисления.TelegramСостояниеИсходящегоСообщения.НеДоставлено;
                        Строки.ТекстОшибки = РезультатОтправки;
                        Прервать;
                    ИначеЕсли ТипЗнч(РезультатОтправки) = Тип("Соответствие") Тогда
                        Если РезультатОтправки.Получить("ok") = Неопределено Тогда
                    	    Строки.Состояние = Перечисления.TelegramСостояниеИсходящегоСообщения.НеДоставлено;
                            Строки.ТекстОшибки = РезультатОтправки.ТекстОшибки;
                            Прервать;
                        Иначе
                            Строки.Состояние = Перечисления.TelegramСостояниеИсходящегоСообщения.Доставлено;
                        КонецЕсли;
                    ИначеЕсли ТипЗнч(РезультатОтправки) = Тип("Структура") Тогда 
						Если Не ПустаяСтрока(РезультатОтправки.ТекстОшибки) Тогда
							Строки.Состояние = Перечисления.TelegramСостояниеИсходящегоСообщения.НеДоставлено;
                            Строки.ТекстОшибки = РезультатОтправки.ТекстОшибки;
							Прервать;
						Иначе
							Строки.Состояние = Перечисления.TelegramСостояниеИсходящегоСообщения.Доставлено;
						КонецЕсли;
                    КонецЕсли;
                    НомерЧасти = НомерЧасти + 1;
                КонецЦикла;
                
            КонецЦикла; 
            Об.Записать();
        	ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();            
            ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка отправки исходящего сообщения Telegram:
                                |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    		ЗаписьЖурналаРегистрации("Telegram", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
        КонецПопытки;
        
    КонецЦикла; 
    
КонецПроцедуры

#КонецОбласти

#Область Вызовы_из_алгоритмов

// Формирует структуру с настройками бота.
//
// Параметры:
//	Бот - СправочникСсылка.TelegramБоты - исходный бот.
//
// Возвращаемое значение:
//	Структура - Все реквизиты бота собранные в структуре.
//
Функция НастройкиБота(Знач Бот) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Бот, 
		"Наименование,Токен,ОграниченныйДоступ,АдресВебхук,КлючВебхук,ИспользоватьСамоподписанныйСертификат,
		|Сертификат,ИмяСертификата");
	
	НастройкиБота = Новый Структура;		
	НастройкиБота.Вставить("Ссылка", 			Бот);
	НастройкиБота.Вставить("Наименование", 		Реквизиты.Наименование);
	НастройкиБота.Вставить("Токен", 			Реквизиты.Токен);
	НастройкиБота.Вставить("ОграниченныйДоступ", Реквизиты.ОграниченныйДоступ);
	НастройкиБота.Вставить("АдресВебхук", 		Реквизиты.АдресВебхук);
	НастройкиБота.Вставить("КлючВебхук", 		Реквизиты.КлючВебхук);
	НастройкиБота.Вставить("ИспользоватьСамоподписанныйСертификат", Реквизиты.ИспользоватьСамоподписанныйСертификат);
	НастройкиБота.Вставить("Сертификат", 		Реквизиты.Сертификат);
	НастройкиБота.Вставить("ИмяСертификата", 	Реквизиты.ИмяСертификата);
	
	Возврат НастройкиБота;
	
КонецФункции

// Отправляет сообщение в Telegram.
//
// Параметры:
//	Сообщение - Структура - структура сообщения.
//  НакопленныеДанные - Структура - структура данных к отрпавке, ошибок и пр.
//
Процедура ОтправитьСообщение(Знач Сообщение, НакопленныеДанные) Экспорт
    
    ИдентификаторЧата   = НакопленныеДанные.ИдентификаторЧата;
    Текст               = "";
    Кнопки              = Неопределено;
	
	// Переопределим сообщение (если надо).
    Если Сообщение.Свойство("ИдентификаторЧата") Тогда
    	ИдентификаторЧата = Сообщение.ИдентификаторЧата;
	КонецЕсли;
	// Какой текст отправим (если он есть)
    Если Сообщение.Свойство("Текст") Тогда
        Текст = Сообщение.Текст;
	КонецЕсли;
	// Вывод клавиатуры.
	Если Сообщение.Свойство("Клавиатура") Тогда
        // Получить по наименованию клавиатуру и вставить в массив кнопки        
        НайденнаяКлавиатура = Справочники.TelegramКлавиатуры.НайтиПоНаименованию(Сообщение.Клавиатура);
        Если ЗначениеЗаполнено(НайденнаяКлавиатура) Тогда
        	Кнопки = ПолучитьСтруктуруКнопокКлавиатуры(НакопленныеДанные, Сообщение, НайденнаяКлавиатура);		
		КонецЕсли; 
	КонецЕсли;
	// Если стоит скрытие клавиатуры (принудительно скроем ее).
	Если Сообщение.Свойство("СкрытьКлавиатуру") Тогда
        СтруктураКнопок = Новый Структура;
        СтруктураКнопок.Вставить("remove_keyboard", Истина);
        Кнопки = ЗаписьJSONВСтруктуру(СтруктураКнопок);		
	КонецЕсли;
	
	// Доп. параметры
	Ответ 								= Неопределено;
	ВыключитьПредпросмотрВебСтраницы 	= Неопределено;
	ВыключитьУведомление 				= Неопределено;
	РежимАнализаТекста 					= Неопределено;
	
	// Отключает превью страницы для ссылки в этом сообщении.
	Если Сообщение.Свойство("ВыключитьПредпросмотрВебСтраницы") 
		И Сообщение.ВыключитьПредпросмотрВебСтраницы = Истина Тогда
        ВыключитьПредпросмотрВебСтраницы = Сообщение.ВыключитьПредпросмотрВебСтраницы;
	КонецЕсли;
	// Это сообщение ответ.
	Если Сообщение.Свойство("Ответ") И ТипЗнч(Сообщение.Ответ) = Тип("Число") Тогда
        Ответ = Сообщение.Ответ;
	КонецЕсли;
	// Выключить уведомление.
	Если Сообщение.Свойство("ВыключитьУведомление") И Сообщение.ВыключитьУведомление = Истина Тогда
        ВыключитьУведомление = Сообщение.ВыключитьУведомление;
	КонецЕсли;
	// Выключить уведомление.
	Если Сообщение.Свойство("РежимАнализаТекста") 
		И (ВРег(Сообщение.РежимАнализаТекста) = "HTML" ИЛИ ВРег(Сообщение.РежимАнализаТекста) = "MARKDOWN") Тогда
		
        РежимАнализаТекста = Сообщение.РежимАнализаТекста;
		
	КонецЕсли;
	
    Структура = ПолучитьСтруктуруНовоеСообщение(ИдентификаторЧата, Текст, Кнопки, Ответ, 
		ВыключитьПредпросмотрВебСтраницы, ВыключитьУведомление, РежимАнализаТекста);

	НакопленныеДанные.Сообщения.Добавить(Структура);
	
КонецПроцедуры

// Отправляет изображение в Telegram.
//
// Параметры:
//	Сообщение - Структура - структура сообщения.
//  НакопленныеДанные - Структура - структура данных к отрпавке, ошибок и пр.
//
Процедура ОтправитьФото(Знач Сообщение, НакопленныеДанные) Экспорт
	
    ОтправитьФайл(Сообщение, 0, НакопленныеДанные);
	
КонецПроцедуры

// Отправляет документ в Telegram.
//
// Параметры:
//	Сообщение - Структура - структура сообщения.
//  НакопленныеДанные - Структура - структура данных к отрпавке, ошибок и пр.
//
Процедура ОтправитьДокумент(Знач Сообщение, НакопленныеДанные) Экспорт
	
    ОтправитьФайл(Сообщение, 1, НакопленныеДанные);
	
КонецПроцедуры

// Отправляет видео в Telegram.
//
// Параметры:
//	Сообщение - Структура - структура сообщения.
//  НакопленныеДанные - Структура - структура данных к отрпавке, ошибок и пр.
//
Процедура ОтправитьВидео(Знач Сообщение, НакопленныеДанные) Экспорт
	
    ОтправитьФайл(Сообщение, 2, НакопленныеДанные);
	
КонецПроцедуры

// Отправляет аудио в Telegram.
//
// Параметры:
//	Сообщение - Структура - структура сообщения.
//  НакопленныеДанные - Структура - структура данных к отрпавке, ошибок и пр.
//
Процедура ОтправитьАудио(Знач Сообщение, НакопленныеДанные) Экспорт
	
    ОтправитьФайл(Сообщение, 3, НакопленныеДанные);
	
КонецПроцедуры

// Отправляет голосовое сообщение в Telegram.
//
// Параметры:
//	Сообщение - Структура - структура сообщения.
//  НакопленныеДанные - Структура - структура данных к отрпавке, ошибок и пр.
//
Процедура ОтправитьГолосовоеСообщение(Знач Сообщение, НакопленныеДанные) Экспорт
	
    ОтправитьФайл(Сообщение, 4, НакопленныеДанные);
	
КонецПроцедуры

// Общая процедура отправляет файл в Telegram.
//
// Параметры:
//	Сообщение - Структура - структура сообщения.
//  ТипФайла - Число - тип передаваемого файла (0 - изображение, 1 - документ, 2 - видео, 3 - аудио, 4 - голосовое сообщение).
//  НакопленныеДанные - Структура - структура данных к отрпавке, ошибок и пр.
//
Процедура ОтправитьФайл(Знач Сообщение, ТипФайла, НакопленныеДанные) Экспорт
	
    ИдентификаторЧата   = НакопленныеДанные.ИдентификаторЧата;
    Текст               = "";
    Кнопки              = Неопределено;
	ОтправляемыйФайл	= Неопределено;
	ИмяФайла			= "";
	
	// Имя файла
	Если Сообщение.Свойство("ИмяФайла") Тогда
		ИмяФайла = Сообщение.ИмяФайла;
	КонецЕсли;
	
	// Файл
    Если Сообщение.Свойство("Файл") Тогда
        СвойствоФайл = Сообщение.Файл;		
		Если ТипЗнч(СвойствоФайл) = Тип("ДвоичныеДанные") Тогда
			ОтправляемыйФайл = СвойствоФайл;
		ИначеЕсли ТипЗнч(СвойствоФайл) = Тип("Строка") Тогда
			// М.б. во временном хранилище, а может быть имя файла.
			Попытка
				ОтправляемыйФайл = ПолучитьИзВременногоХранилища(СвойствоФайл);
			Исключение
				ОтправляемыйФайл = Неопределено;
			КонецПопытки;
			
			Если ОтправляемыйФайл = Неопределено Тогда
				мФайл = Новый Файл(Сообщение.Файл);
				Если мФайл.Существует() Тогда
					ОтправляемыйФайл = Новый ДвоичныеДанные(Сообщение.Файл);
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Проверки обязательных полей.
	Если ОтправляемыйФайл = Неопределено Тогда
		ДобавитьОшибку(НакопленныеДанные.НастройкиБота.Ссылка,
			НСтр("ru = 'Ошибка отправки файла, файл не передан в структуру (свойство ""Файл"").'"),
			НакопленныеДанные);
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ИмяФайла) Тогда
		ДобавитьОшибку(НакопленныеДанные.НастройкиБота.Ссылка,
			НСтр("ru = 'Ошибка отправки файла, имя файла не передан в структуру (свойство ""ИмяФайла"").'"),
			НакопленныеДанные);
		Возврат;
	КонецЕсли;
	
	// Переопределим сообщение (если надо).
    Если Сообщение.Свойство("ИдентификаторЧата") Тогда
    	ИдентификаторЧата = Сообщение.ИдентификаторЧата;
	КонецЕсли;
	// Какой текст отправим (если он есть)
    Если Сообщение.Свойство("Подпись") Тогда
        Текст = Сообщение.Подпись;
	КонецЕсли;	
	// Вывод клавиатуры.
	Если Сообщение.Свойство("Клавиатура") Тогда
        // Получить по наименованию клавиатуру и вставить в массив кнопки        
        НайденнаяКлавиатура = Справочники.TelegramКлавиатуры.НайтиПоНаименованию(Сообщение.Клавиатура);
        Если ЗначениеЗаполнено(НайденнаяКлавиатура) Тогда
        	Кнопки = ПолучитьСтруктуруКнопокКлавиатуры(НакопленныеДанные, Сообщение, НайденнаяКлавиатура);		
		КонецЕсли; 
	КонецЕсли;
	// Если стоит скрытие клавиатуры (принудительно скроем ее).
	Если Сообщение.Свойство("СкрытьКлавиатуру") Тогда
        СтруктураКнопок = Новый Структура;
        СтруктураКнопок.Вставить("remove_keyboard", Истина);
        Кнопки = ЗаписьJSONВСтруктуру(СтруктураКнопок);		
	КонецЕсли;	

	// Доп. параметры
	Ответ 								= Неопределено;
	ВыключитьУведомление 				= Неопределено;
	
	// Это сообщение ответ.
	Если Сообщение.Свойство("Ответ") И ТипЗнч(Сообщение.Ответ) = Тип("Число") Тогда
        Ответ = Сообщение.Ответ;
	КонецЕсли;
	// Выключить уведомление.
	Если Сообщение.Свойство("ВыключитьУведомление") И Сообщение.ВыключитьУведомление = Истина Тогда
        ВыключитьУведомление = Сообщение.ВыключитьУведомление;
	КонецЕсли;
	
	// 0 - изображение
	// 1 - документ
	// 2 - видео
	// 3 - аудио
	// 4 - голосовое сообщение
	
	Если ТипФайла = 0 Тогда
    	Структура = ПолучитьСтруктуруСообщениеКартинка(ИдентификаторЧата, Текст, ИмяФайла, ОтправляемыйФайл, Кнопки, Ответ, 
			ВыключитьУведомление);
	ИначеЕсли ТипФайла = 1 Тогда
    	Структура = ПолучитьСтруктуруСообщениеДокумент(ИдентификаторЧата, Текст, ИмяФайла, ОтправляемыйФайл, Кнопки, Ответ, 
			ВыключитьУведомление);
	ИначеЕсли ТипФайла = 2 Тогда
    	Структура = ПолучитьСтруктуруСообщениеВидео(ИдентификаторЧата, Текст, ИмяФайла, ОтправляемыйФайл, Кнопки, Ответ, 
			ВыключитьУведомление);
	ИначеЕсли ТипФайла = 3 Тогда
    	Структура = ПолучитьСтруктуруСообщениеАудио(ИдентификаторЧата, Текст, ИмяФайла, ОтправляемыйФайл, Кнопки, Ответ, 
			ВыключитьУведомление);
	ИначеЕсли ТипФайла = 4 Тогда
    	Структура = ПолучитьСтруктуруСообщениеГолосовоеСообщение(ИдентификаторЧата, Текст, ИмяФайла, ОтправляемыйФайл, Кнопки, Ответ,
			ВыключитьУведомление);
	КонецЕсли;

	НакопленныеДанные.Сообщения.Добавить(Структура);
	
КонецПроцедуры

// Отправляет местоположение в Telegram.
//
// Параметры:
//	Сообщение - Структура - структура сообщения.
//  НакопленныеДанные - Структура - структура данных к отрпавке, ошибок и пр.
//
Процедура ОтправитьМестоположение(Знач Сообщение, НакопленныеДанные) Экспорт
	
    ИдентификаторЧата   = НакопленныеДанные.ИдентификаторЧата;
	Широта = Неопределено;
	Долгота = Неопределено;
	
	// Переопределим сообщение (если надо).
    Если Сообщение.Свойство("ИдентификаторЧата") Тогда
    	ИдентификаторЧата = Сообщение.ИдентификаторЧата;
	КонецЕсли;
	
	// Проверка реквизитов.
    Если Сообщение.Свойство("Широта") Тогда
    	Широта = Сообщение.Широта;
	Иначе
		ДобавитьОшибку(НакопленныеДанные.НастройкиБота.Ссылка,
			НСтр("ru = 'Ошибка отправки местоположения, не задана широта (свойство ""Широта"").'"),
			НакопленныеДанные);
		Возврат;		
	КонецЕсли;
    Если Сообщение.Свойство("Долгота") Тогда
    	Долгота = Сообщение.Долгота;
	Иначе
		ДобавитьОшибку(НакопленныеДанные.НастройкиБота.Ссылка,
			НСтр("ru = 'Ошибка отправки местоположения, не задана долгота (свойство ""Долгота"").'"),
			НакопленныеДанные);
		Возврат;		
	КонецЕсли;
	
	// Вывод клавиатуры.
	Если Сообщение.Свойство("Клавиатура") Тогда
        // Получить по наименованию клавиатуру и вставить в массив кнопки        
        НайденнаяКлавиатура = Справочники.TelegramКлавиатуры.НайтиПоНаименованию(Сообщение.Клавиатура);
        Если ЗначениеЗаполнено(НайденнаяКлавиатура) Тогда
        	Кнопки = ПолучитьСтруктуруКнопокКлавиатуры(НакопленныеДанные, Сообщение, НайденнаяКлавиатура);		
		КонецЕсли; 
	КонецЕсли;
	// Если стоит скрытие клавиатуры (принудительно скроем ее).
	Если Сообщение.Свойство("СкрытьКлавиатуру") Тогда
        СтруктураКнопок = Новый Структура;
        СтруктураКнопок.Вставить("remove_keyboard", Истина);
        Кнопки = ЗаписьJSONВСтруктуру(СтруктураКнопок);		
	КонецЕсли;
	
	// Доп. параметры
	Ответ 								= Неопределено;
	ВыключитьУведомление 				= Неопределено;
	
	// Это сообщение ответ.
	Если Сообщение.Свойство("Ответ") И ТипЗнч(Сообщение.Ответ) = Тип("Число") Тогда
        Ответ = Сообщение.Ответ;
	КонецЕсли;
	// Выключить уведомление.
	Если Сообщение.Свойство("ВыключитьУведомление") И Сообщение.ВыключитьУведомление = Истина Тогда
        ВыключитьУведомление = Сообщение.ВыключитьУведомление;
	КонецЕсли;
	
    Структура = ПолучитьСтруктуруМестоположения(ИдентификаторЧата, Широта, Долгота, Кнопки, Ответ, 
		ВыключитьУведомление);

	НакопленныеДанные.Сообщения.Добавить(Структура);
	
КонецПроцедуры

// Отправляем место на карте в Telegram.
//
// Параметры:
//	Сообщение - Структура - структура сообщения.
//  НакопленныеДанные - Структура - структура данных к отрпавке, ошибок и пр.
//
Процедура ОтправитьМестоНаКарте(Знач Сообщение, НакопленныеДанные) Экспорт
	
    ИдентификаторЧата   = НакопленныеДанные.ИдентификаторЧата;
	Широта = Неопределено;
	Долгота = Неопределено;
	Адрес = Неопределено;
	Подпись = Неопределено;
	
	// Переопределим сообщение (если надо).
    Если Сообщение.Свойство("ИдентификаторЧата") Тогда
    	ИдентификаторЧата = Сообщение.ИдентификаторЧата;
	КонецЕсли;
	
	// Проверка реквизитов.
    Если Сообщение.Свойство("Широта") Тогда
    	Широта = Сообщение.Широта;
	Иначе
		ДобавитьОшибку(НакопленныеДанные.НастройкиБота.Ссылка,
			НСтр("ru = 'Ошибка отправки места на карте, не задана широта (свойство ""Широта"").'"),
			НакопленныеДанные);
		Возврат;		
	КонецЕсли;
    Если Сообщение.Свойство("Долгота") Тогда
    	Долгота = Сообщение.Долгота;
	Иначе
		ДобавитьОшибку(НакопленныеДанные.НастройкиБота.Ссылка,
			НСтр("ru = 'Ошибка отправки места на карте, не задана долгота (свойство ""Долгота"").'"),
			НакопленныеДанные);
		Возврат;		
	КонецЕсли;
	Если Сообщение.Свойство("Адрес") Тогда
    	Адрес = Сообщение.Адрес;
	Иначе
		ДобавитьОшибку(НакопленныеДанные.НастройкиБота.Ссылка,
			НСтр("ru = 'Ошибка отправки места на карте, не задан адрес (свойство ""Адрес"").'"),
			НакопленныеДанные);
		Возврат;		
	КонецЕсли;
	Если Сообщение.Свойство("Подпись") Тогда
    	Подпись = Сообщение.Подпись;
	Иначе
		ДобавитьОшибку(НакопленныеДанные.НастройкиБота.Ссылка,
			НСтр("ru = 'Ошибка отправки места на карте, не задана подпись (свойство ""Подпись"").'"),
			НакопленныеДанные);
		Возврат;		
	КонецЕсли;	
	
	// Вывод клавиатуры.
	Если Сообщение.Свойство("Клавиатура") Тогда
        // Получить по наименованию клавиатуру и вставить в массив кнопки        
        НайденнаяКлавиатура = Справочники.TelegramКлавиатуры.НайтиПоНаименованию(Сообщение.Клавиатура);
        Если ЗначениеЗаполнено(НайденнаяКлавиатура) Тогда
        	Кнопки = ПолучитьСтруктуруКнопокКлавиатуры(НакопленныеДанные, Сообщение, НайденнаяКлавиатура);		
		КонецЕсли; 
	КонецЕсли;
	// Если стоит скрытие клавиатуры (принудительно скроем ее).
	Если Сообщение.Свойство("СкрытьКлавиатуру") Тогда
        СтруктураКнопок = Новый Структура;
        СтруктураКнопок.Вставить("remove_keyboard", Истина);
        Кнопки = ЗаписьJSONВСтруктуру(СтруктураКнопок);		
	КонецЕсли;
	
	// Доп. параметры
	Ответ 								= Неопределено;
	ВыключитьУведомление 				= Неопределено;
	
	// Это сообщение ответ.
	Если Сообщение.Свойство("Ответ") И ТипЗнч(Сообщение.Ответ) = Тип("Число") Тогда
        Ответ = Сообщение.Ответ;
	КонецЕсли;
	// Выключить уведомление.
	Если Сообщение.Свойство("ВыключитьУведомление") И Сообщение.ВыключитьУведомление = Истина Тогда
        ВыключитьУведомление = Сообщение.ВыключитьУведомление;
	КонецЕсли;
	
    Структура = ПолучитьСтруктуруМестаНаКарте(ИдентификаторЧата, Широта, Долгота, Адрес, Подпись, Кнопки, Ответ, 
		ВыключитьУведомление);

	НакопленныеДанные.Сообщения.Добавить(Структура);
	
КонецПроцедуры

// Изменяет текст сообщения Telegram.
//
// Параметры:
//	Сообщение - Структура - структура сообщения.
//  НакопленныеДанные - Структура - структура данных к отрпавке, ошибок и пр.
//
Процедура ИзменитьТекстСообщения(Знач Сообщение, НакопленныеДанные) Экспорт
	
	Текст = "";
	ИдентификаторЧата   = НакопленныеДанные.ИдентификаторЧата;
	Кнопки              = Неопределено;
	
	// Переопределим сообщение (если надо).
    Если Сообщение.Свойство("ИдентификаторЧата") Тогда
    	ИдентификаторЧата = Сообщение.ИдентификаторЧата;
	КонецЕсли;
	
	// Какой текст отправим (если он есть)
    Если Сообщение.Свойство("Текст") Тогда
        Текст = Сообщение.Текст;
	КонецЕсли;
	
	ИдентификаторСообщения = НакопленныеДанные.ИдентификаторСообщения;
	// Переопределим сообщение (если надо).
    Если Сообщение.Свойство("ИдентификаторСообщения") Тогда
    	ИдентификаторСообщения = Сообщение.ИдентификаторСообщения;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст)Тогда
		ДобавитьОшибку(НакопленныеДанные.НастройкиБота.Ссылка,
			НСтр("ru = 'Ошибка изменения текста сообщения (свойство ""Текст"").'"),
			НакопленныеДанные);
		Возврат;
	КонецЕсли;
	
	// Вывод клавиатуры.
	Если Сообщение.Свойство("Клавиатура") Тогда
        // Получить по наименованию клавиатуру и вставить в массив кнопки        
        НайденнаяКлавиатура = Справочники.TelegramКлавиатуры.НайтиПоНаименованию(Сообщение.Клавиатура);
        Если ЗначениеЗаполнено(НайденнаяКлавиатура) Тогда
        	Кнопки = ПолучитьСтруктуруКнопокКлавиатуры(НакопленныеДанные, Сообщение, НайденнаяКлавиатура);		
		КонецЕсли; 
	КонецЕсли;
	// Если стоит скрытие клавиатуры (принудительно скроем ее).
	Если Сообщение.Свойство("СкрытьКлавиатуру") Тогда
        СтруктураКнопок = Новый Структура;
        СтруктураКнопок.Вставить("remove_keyboard", Истина);
        Кнопки = ЗаписьJSONВСтруктуру(СтруктураКнопок);		
	КонецЕсли;
	
	// Доп. параметры
	ВыключитьПредпросмотрВебСтраницы 	= Неопределено;
	РежимАнализаТекста 					= Неопределено;
	
	// Отключает превью страницы для ссылки в этом сообщении.
	Если Сообщение.Свойство("ВыключитьПредпросмотрВебСтраницы") 
		И Сообщение.ВыключитьПредпросмотрВебСтраницы = Истина Тогда
        ВыключитьПредпросмотрВебСтраницы = Сообщение.ВыключитьПредпросмотрВебСтраницы;
	КонецЕсли;
	// Выключить уведомление.
	Если Сообщение.Свойство("РежимАнализаТекста") 
		И (ВРег(Сообщение.РежимАнализаТекста) = "HTML" ИЛИ ВРег(Сообщение.РежимАнализаТекста) = "MARKDOWN") Тогда
		
        РежимАнализаТекста = Сообщение.РежимАнализаТекста;
		
	КонецЕсли;
	
    Структура = ПолучитьСтруктуруИзменитьТекстСообщения(ИдентификаторЧата, Текст, ИдентификаторСообщения, Кнопки,
		ВыключитьПредпросмотрВебСтраницы, РежимАнализаТекста);

	НакопленныеДанные.Сообщения.Добавить(Структура);
	
	
КонецПроцедуры

// Удаляет сообщения Telegram.
//
// Параметры:
//	Сообщение - Структура - структура сообщения.
//  НакопленныеДанные - Структура - структура данных к отрпавке, ошибок и пр.
//
Процедура УдалитьСообщение(Знач Сообщение, НакопленныеДанные) Экспорт
	
	ИдентификаторЧата   = НакопленныеДанные.ИдентификаторЧата;
	ИдентификаторСообщения = НакопленныеДанные.ИдентификаторСообщения;
	
	// Переопределим сообщение (если надо).
    Если Сообщение.Свойство("ИдентификаторЧата") Тогда
    	ИдентификаторЧата = НакопленныеДанные.ИдентификаторЧата;
	КонецЕсли;
	
	// Переопределим сообщение (если надо).
    Если Сообщение.Свойство("ИдентификаторСообщения") Тогда
    	ИдентификаторСообщения = НакопленныеДанные.ИдентификаторСообщения;
	КонецЕсли;
	
    Структура = ПолучитьСтруктуруУдалитьСообщение(ИдентификаторЧата, ИдентификаторСообщения);

	НакопленныеДанные.Сообщения.Добавить(Структура);
	
КонецПроцедуры

// Добавляет ошибку, которая была получена при работе в Telegram.
//
// Параметры:
//	Бот - СправочникСсылка.TelegramБоты - бот.
//	Текст - Строка - строка с ошибкой.
//  НакопленныеДанные - Структура - структура данных к отрпавке, ошибок и пр.
//
Процедура ДобавитьОшибку(Знач Бот, Знач Текст, НакопленныеДанные) Экспорт
	
	СтруктураОшибка = Новый Структура;
	СтруктураОшибка.Вставить("Бот", Бот);
	СтруктураОшибка.Вставить("Текст", Текст);
	НакопленныеДанные.Ошибки.Добавить(СтруктураОшибка);
	
КонецПроцедуры

// Скачивает файл с сервера Telegram.
//
// Параметры:
//	file_id - Строка - идентификатор файла на сервере Telegram.
//	message - Структура - структура сообщения которое идет с файлом.
//	НакопленныеДанные - Массив - массив данных для отправки.
//
// Возвращаемое значение:
//	Структура - структура с результатом создания файла, или Неопределено, если ошибка.
//
Функция СкачатьФайл(Знач file_id, Знач message, НакопленныеДанные) Экспорт
	
	НастройкиБота = НакопленныеДанные.НастройкиБота;
	
	АдресРесурса = "/bot" + НастройкиБота.Токен + "/getFile?file_id=" + file_id;
	Ответ = Get(АдресРесурса, 1);

	Если Ответ = Неопределено Тогда
		ДобавитьОшибку(НастройкиБота.Ссылка, НСтр("ru = 'Бот не вернул ответ. Попробуйте использовать прокси-серверы'"),
			НакопленныеДанные);
		Возврат Неопределено;
	КонецЕсли;

	СтрокаJSON 		= Ответ.ПолучитьТелоКакСтроку();
	Чтение 			= Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	СтрокаОтвета 	= ПрочитатьJSON(Чтение);
				
	Если СтрокаОтвета["ok"] Тогда
		
		СтрокаРезультат = СтрокаОтвета["result"];		
		Путь 			= СтрокаРезультат["file_path"];
		
		Если message.Свойство("document") Тогда
			ИмяФайла 	= message.document.file_name;
		Иначе
			ИмяФайла	= Путь;
			ПозицияСлеш = СтрНайти(ИмяФайла, "/", НаправлениеПоиска.СКонца);
			Если ПозицияСлеш > 0 Тогда				
				ИмяФайла		= Сред(ИмяФайла, ПозицияСлеш + 1);
			КонецЕслИ;
		КонецЕсли;
		
		Если СтрНайти(ИмяФайла, ".") > 0 Тогда
			ПозицияТочки		= СтрНайти(ИмяФайла,".", НаправлениеПоиска.СКонца);
			ПозицияСлеш			= СтрНайти(ИмяФайла, "/", НаправлениеПоиска.СКонца);
			Расширение			= Сред(ИмяФайла, ПозицияТочки + 1);
			ИмяСРасширением		= Сред(ИмяФайла, ПозицияСлеш + 1);
			ИмяБезРасширения	= Лев(ИмяСРасширением, СтрДлина(ИмяСРасширением) - (СтрДлина(Расширение) + 1));
		Иначе
			ИмяСРасширением		= ИмяФайла;
			ИмяБезРасширения	= ИмяФайла;;
			Расширение			= "";
		КонецЕсли;
		
		//@skip-warning
		ВремяИзменения 	= МестноеВремя(Дата('19700101') + message["date"]);
		                                          
		HTTPЗапрос 	= Новый HTTPЗапрос("/file/bot" + НастройкиБота.Токен + "/" + Путь);
		HTTPОтвет 	= ОтправитьЗапрос(HTTPЗапрос, 0);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			ДвоичныеДанные 				= HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
			АдресВоВременномХранилище 	= ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("ИмяБезРасширения", 			ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", 			Расширение);
			ПараметрыФайла.Вставить("ВремяИзменения", 				ВремяИзменения);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	ВремяИзменения);
			ПараметрыФайла.Вставить("АдресВоВременномХранилище", 	АдресВоВременномХранилище);
						
			Возврат ПараметрыФайла;
			
		Иначе
			
			ДобавитьОшибку(НастройкиБота.Ссылка, 
				СтрШаблон(НСтр("ru = 'Ошибка получения файла %1 (код состояния: %2, причина: %3)'"), 
					Путь, HTTPОтвет.КодСостояния, HTTPОтвет.Причина), 
				НакопленныеДанные);
			
		КонецЕсли;
		
	Иначе
		
		ДобавитьОшибку(НастройкиБота.Ссылка, СтрШаблон(НСтр("ru = 'Неизвестная ошибка получения файла %1'"), Путь), 
			НакопленныеДанные);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // СкачатьФайл()

// Получает по имени профиля пользователя Telegram.
//
// Параметры:
//	ИмяПрофиля - Строка - имя профиля в Telegram
//
// Возвращаемое значение:
//	СправочникСсылка.TelegramПользователи - пользователь Telegram или Неопределено.
//
Функция ПользовательПоИмениПрофиля(Знач ИмяПрофиля) Экспорт
    
    Если ПустаяСтрока(ИмяПрофиля) Тогда
    	Возврат Неопределено;
    КонецЕсли; 
    
    Запрос = Новый Запрос();
    Запрос.Текст =
        "ВЫБРАТЬ
        |   TelegramПользователи.Ссылка КАК Ссылка,
        |   0 КАК Порядок
        |ИЗ
        |   Справочник.TelegramПользователи КАК TelegramПользователи
        |ГДЕ
        |   (TelegramПользователи.ИмяПрофиля ПОДОБНО &ИмяПрофиля
        |           ИЛИ TelegramПользователи.ИмяПрофиля ПОДОБНО ""@"" + &ИмяПрофиля)
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   TelegramПользователиОбозначения.Ссылка,
        |   1
        |ИЗ
        |   Справочник.TelegramПользователи.Обозначения КАК TelegramПользователиОбозначения
        |ГДЕ
        |   (TelegramПользователиОбозначения.Подстрока = &ИмяПрофиля
        |           ИЛИ TelegramПользователиОбозначения.Подстрока = ""@"" + &ИмяПрофиля)
        |
        |УПОРЯДОЧИТЬ ПО
        |   Порядок";
    
    // Ищем без символа "@".
    Если СтрНачинаетсяС(ИмяПрофиля, "@") Тогда
    	ИмяПрофиля = Сред(ИмяПрофиля, 2);
    КонецЕсли; 
    
    Запрос.УстановитьПараметр("ИмяПрофиля", ИмяПрофиля);
    Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
    	Возврат Выборка.Ссылка;
    КонецЦикла;
    
    Возврат Неопределено;
    
КонецФункции

// Получить пользователя Telegram по реквизиту Пользователь.
//
// Параметры:
//	Адресат - ОпределяемыйТип.TelegramАдресаты
//
// Возвращаемое значение:
//	СправочникСсылка.TelegramПользователи - искомый пользователь.
//
Функция ПользовательTelegramПоАдресату(Знач Адресат) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	TelegramПользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.TelegramПользователи КАК TelegramПользователи
		|ГДЕ
		|	TelegramПользователи.Активность = ИСТИНА
		|	И TelegramПользователи.Пользователь = &Пользователь";
		
	Если ТипЗнч(Адресат) = Тип("СправочникСсылка.Сотрудники") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И TelegramПользователи.Пользователь = &Пользователь",
			 "И TelegramПользователи.Пользователь.Сотрудник = &Пользователь");
	ИначеЕсли ТипЗнч(Адресат) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И TelegramПользователи.Пользователь = &Пользователь", 
			"И TelegramПользователи.Пользователь.ФизическоеЛицо = &Пользователь");	
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("Пользователь", Адресат);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Выполняет действие
//
// Параметры:
//	ДействиеСсылка - СправочникСсылка.TelegramДействия - выполняемое действие.
//	НакопленныеДанные - Структура - данные.
//
// Возвращаемое значение:
//	Булево - действие выполнено или нет.
//
Функция ВыполнитьДействие(Знач ДействиеСсылка, НакопленныеДанные) Экспорт
	
	Бот 	= НакопленныеДанные.НастройкиБота.Ссылка;
	мВыполнено = Ложь;
				                                              
	// Делаем что-то и помещаем в накопленные данные с помощью процедур и функций
	// ОтправитьСообщение
	Попытка
		Выполнить(ДействиеСсылка.Алгоритм.Получить());
		мВыполнено = Истина;
	Исключение
		ДобавитьОшибку(Бот, 
			СтрШаблон(НСтр("ru = 'Ошибка выполнения действия (%1) ботом %2. %3'"), ДействиеСсылка,
				НакопленныеДанные.НастройкиБота.Наименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
			НакопленныеДанные);				
	КонецПопытки;
	
	Возврат мВыполнено;
	
КонецФункции

#КонецОбласти

#Область Работа_с_прокси

// Использует ли подсистема прокси-сервера.
//
// Возвращаемое значение:
//	Булево - используется или нет.
//
Функция ИспользоватьПрокси() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.TelegramИспользоватьСписокПроксиСерверов.Получить();
	
КонецФункции

// Возвращает активные-прокси серверы.
//
// Возвращаемое значение:
//	ВыборкаРезультатаЗапроса - выборка.
//
Функция ПолучитьАктивныеПрокси() Экспорт
	
	Возврат СЛС.ПолучитьАктивныеПрокси();
	
КонецФункции

// Создает HTTPСоединение с прокси, или без него.
//
// Параметры:
//	АдресСервера - Строка - адрес сервера куда хотим отправлять запросы.
//  Порт - Число - порт на сервере.
//  Прокси - РезультатЗапросаВыборка с прокси - через какой прокси хотим подключиться.
//
// Возвращаемое значение:
//	HTTPСоединение.
//
Функция ПолучитьHTTPСоединениеСПрокси(Знач АдресСервера, Знач Порт, Знач Прокси) Экспорт
	
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	
	Если Прокси = Неопределено Тогда
		Соединение = Новый HTTPСоединение(АдресСервера, Порт,,,,Таймаут(),
			ЗащищенноеСоединение);
	Иначе
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);
        
        АдресПрокси = СокрЛП(Прокси.Сервер);
        Если Прокси.Протокол = Перечисления.TelegramПроксиПротоколы.SOCKS5 Тогда
			АдресПрокси = "socks5://" + АдресПрокси;
		КонецЕсли;
		ИнтернетПрокси.Установить("https", АдресПрокси, Прокси.Порт, 
			СокрЛП(Прокси.Пользователь), СокрЛП(Прокси.Пароль), Ложь);
			
		Соединение  =  Новый HTTPСоединение(АдресСервера, Порт,,,ИнтернетПрокси,Таймаут(),
			ЗащищенноеСоединение);
	КонецЕсли;
	
	Возврат Соединение;
	
КонецФункции

// Добавляет в регистр сведений статистику по прокси серверу.
//
// Параметры:
//	Набор - РегистрСведенийНаборЗаписей.Telegram_СтатистикаОтправкиСообщений - исходный регистр.
//	Прокси - СправочникСсылка.Telegram_Прокси - ссылка на прокси-сервер.
//	Оценка - Число - +1 или -1, в зависимости от успешности отправки сообщения.
//	ВремяОтвета - Число - число секунд с плавающей точкой.
//
Процедура ДобавитьВНаборСтатистикиОтправкиСообщений(Набор, Знач Прокси, Знач Оценка, Знач ВремяОтвета) Экспорт
	
	Если ЗначениеЗаполнено(Прокси) Тогда
		СтрокаНабора 			= Набор.Добавить();
		СтрокаНабора.Период 	= ТекущаяДатаСеанса();
		СтрокаНабора.Прокси 	= Прокси;
		СтрокаНабора.Оценка     = Оценка;
        СтрокаНабора.ВремяОтвета= ВремяОтвета;
        СтрокаНабора.Отправлено = 1;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет очистку истории работы с прокси.
//
// Параметры:
//	ПроксиСервер - СправочникСсылка.TelegramПрокси - исходный прокси-сервер.
//
Процедура ОчиститьИсториюПрокси(Знач ПроксиСервер) Экспорт
	
	Если ЗначениеЗаполнено(ПроксиСервер) Тогда
	
		НаборЗаписей = РегистрыСведений.TelegramСтатистикаОтправкиСообщений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Прокси.Установить(ПроксиСервер);
	    НаборЗаписей.Записать();
	
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку доступности прокси-серверов.
//
// Параметры:
//	ПараметрыПроверки - Массив или Неопределено - проверяемые прокси, если неопределено проверяются все активные прокси.
//	ПараметрыВыполнения - Любой - дополнительные параметры.
//
Процедура ПроверитьПроксиСерверы(ПараметрыПроверки, ПараметрыВыполнения) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	TelegramБоты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.TelegramБоты КАК TelegramБоты
		|ГДЕ
		|	TelegramБоты.Активность = ИСТИНА";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Бот = Выборка.Ссылка;
	Иначе
		СообщитьПользователю(НСтр("ru = 'Нет активных Telegram-ботов'"));
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("Массив") Тогда
		
		Массив = ПараметрыПроверки.Массив;
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	TelegramСтатистикаОтправкиСообщенийСрезПоследних.Прокси КАК Прокси,
			|	СУММА(TelegramСтатистикаОтправкиСообщенийСрезПоследних.Оценка) КАК Оценка
			|ПОМЕСТИТЬ ВТ_Оценки
			|ИЗ
			|	РегистрСведений.TelegramСтатистикаОтправкиСообщений.СрезПоследних КАК TelegramСтатистикаОтправкиСообщенийСрезПоследних
			|
			|СГРУППИРОВАТЬ ПО
			|	TelegramСтатистикаОтправкиСообщенийСрезПоследних.Прокси
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	TelegramПрокси.Ссылка КАК Прокси,
			|	ЕСТЬNULL(ВТ_Оценки.Оценка, 0) КАК Оценка
			|ИЗ
			|	Справочник.TelegramПрокси КАК TelegramПрокси
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Оценки КАК ВТ_Оценки
			|		ПО TelegramПрокси.Ссылка = ВТ_Оценки.Прокси
			|ГДЕ
			|	TelegramПрокси.Активность = ИСТИНА
			|
			|УПОРЯДОЧИТЬ ПО
			|	Оценка УБЫВ";
		
		Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Прокси");
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	TelegramПрокси.Ссылка КАК Ссылка,
		|	TelegramПрокси.Код КАК Код,
		|	TelegramПрокси.Наименование КАК Наименование,
		|	TelegramПрокси.Активность КАК Активность,
		|	TelegramПрокси.Пароль КАК Пароль,
		|	TelegramПрокси.Пользователь КАК Пользователь,
		|	TelegramПрокси.Порт КАК Порт,
		|	TelegramПрокси.Протокол КАК Протокол,
		|	TelegramПрокси.Сервер КАК Сервер
		|ИЗ
		|	Справочник.TelegramПрокси КАК TelegramПрокси
		|ГДЕ
		|	TelegramПрокси.Ссылка = &Ссылка";
	
	Счетчик = 0;
    Для Каждого ВыборкаПрокси Из Массив Цикл
		
		Процент = Окр(Счетчик * 100 / Массив.Количество());
		Счетчик = Счетчик + 1;
		ДлительныеОперации.СообщитьПрогресс(Процент, СтрШаблон(НСтр("ru = 'Проверка %1'"), ВыборкаПрокси.Ссылка));
    	        
    	Запрос.УстановитьПараметр("Ссылка", ВыборкаПрокси.Ссылка);
    	
    	Выборка = Запрос.Выполнить().Выбрать();
        
        Если Выборка.Следующий() Тогда
            
        	Ресурс = "bot" + Бот.Токен + "/getMe";
        	//@skip-warning
        	Ответ = Get(Ресурс,,Истина, Выборка);
        	        		
        КонецЕсли; 
    
    КонецЦикла;	
	
КонецПроцедуры

// Выполняет загрузку 10 активных прокси-серверов.
//
// Параметры:
// Параметры:
//	ПараметрыПроверки - Массив или Неопределено - проверяемые прокси, если неопределено проверяются все активные прокси.
//	ПараметрыВыполнения - Любой - дополнительные параметры.
//
Процедура АвтозагрузкаПроксиСерверов(ПараметрыПроверки, ПараметрыВыполнения) Экспорт
	
	Сервер 		= "spys.me";			
	Соединение 	= Новый HTTPСоединение(Сервер);			
	Заголовки 	= Новый Соответствие;
	Заголовки.Вставить("host", Сервер);   		
	Запрос 	= Новый HTTPЗапрос("/proxy.txt", Заголовки);
	Ответ 	= Соединение.Получить(Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение НСтр("ru = 'Нет связи с сайтом http://spys.me'");
	КонецЕсли;    
	ТекстСтраницы = Ответ.ПолучитьТелоКакСтроку();
	
	ТаблицаПрокси = Новый ТаблицаЗначений;
	ТаблицаПрокси.Колонки.Добавить("Сервер");
	ТаблицаПрокси.Колонки.Добавить("Порт");
	ТаблицаПрокси.Колонки.Добавить("SSL");
	ТаблицаПрокси.Колонки.Добавить("Страна");
	ТаблицаПрокси.Колонки.Добавить("SSL_support");
	ТаблицаПрокси.Колонки.Добавить("Google_passed");
	
	Для Индекс = 1 По СтрЧислоСтрок(ТекстСтраницы) Цикл
		
		Стр = СтрПолучитьСтроку(ТекстСтраницы, Индекс);
		
		// Если строка НЕ начинается с цифры или пустая
		Если ПустаяСтрока(Стр) ИЛИ СтрНайти("1234567890", Лев(Стр, 1)) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Сервер = Сред(Стр, 1, СтрНайти(Стр, ":") - 1);
			Стр = Сред(Стр, СтрНайти(Стр, ":") + 1);
			Порт = Число(Сред(Стр, 1, СтрНайти(Стр, " ") - 1));
			Стр = Сред(Стр, СтрНайти(Стр, " ") + 1);
			Страна = Лев(Стр, 2);
			Стр = Сред(Стр, 3);
			SSL_support = СтрНайти(Стр, "-S") > 0;
			Google_passed = СтрНайти(Стр, " +") > 0;
		Исключение
			Продолжить;
		КонецПопытки;
		
		НоваяСтрока 				= ТаблицаПрокси.Добавить();
		НоваяСтрока.Сервер 			= Сервер;
		НоваяСтрока.Порт 			= Порт;
		НоваяСтрока.Страна 			= Страна;
		НоваяСтрока.SSL_support 	= SSL_support;
		НоваяСтрока.Google_passed 	= Google_passed;
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	TelegramПрокси.Наименование КАК Сервер,
		|	TelegramПрокси.Порт КАК Порт
		|ИЗ
		|	Справочник.TelegramПрокси КАК TelegramПрокси";
	СуществующиеПрокси = Запрос.Выполнить().Выгрузить();
	КоличествоЗагруженных = 0;
	
	АдресСервераПроверки = "telegram.org";
	Таймаут = TelegramСервер.Таймаут();
	
	Для Каждого Прокси Из ТаблицаПрокси Цикл
		
		Если КоличествоЗагруженных >= 10 Тогда
			Прервать;
		КонецЕсли;
		
		// Пропускаем из зоны RU.
		Если Прокси.Страна = "RU" Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропускаем уже загруженные.
		Если СуществующиеПрокси.НайтиСтроки(Новый Структура("Сервер, Порт", Прокси.Сервер, Прокси.Порт)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Тестируем прокси.
		Протокол = Перечисления.TelegramПроксиПротоколы.ПустаяСсылка();
		
		// HTTPS протокол.
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);	        
        АдресПрокси = СокрЛП(Прокси.Сервер);
		ИнтернетПрокси.Установить("https", АдресПрокси, Прокси.Порт,,, Ложь);

		Попытка
			ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
			Соединение 	= Новый HTTPСоединение(АдресСервераПроверки, 443,,, ИнтернетПрокси,
				Таймаут, ЗащищенноеСоединение, Ложь);
				
			Заголовки 	= Новый Соответствие;
			Заголовки.Вставить("host", АдресСервераПроверки);
			Запрос 	= Новый HTTPЗапрос("/", Заголовки);
			Ответ 	= Соединение.Получить(Запрос);
			Если Ответ.КодСостояния = 200 Тогда
				Протокол = Перечисления.TelegramПроксиПротоколы.HTTPS;
			КонецЕсли;    
		Исключение
		КонецПопытки;
			
		// Проверяем через SOCKS5.
		Если НЕ ЗначениеЗаполнено(Протокол) Тогда
			ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);	        
	        АдресПрокси = СокрЛП(Прокси.Сервер);
			АдресПрокси = "socks5://" + АдресПрокси;
			ИнтернетПрокси.Установить("https", АдресПрокси, Прокси.Порт,,, Ложь);
			
			Попытка
				ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
				Соединение 	= Новый HTTPСоединение(АдресСервераПроверки, 443,,, ИнтернетПрокси,
					Таймаут, ЗащищенноеСоединение, Ложь);
					
				Заголовки 	= Новый Соответствие;
				Заголовки.Вставить("host", АдресСервераПроверки);
				Запрос 	= Новый HTTPЗапрос("/", Заголовки);
				Ответ 	= Соединение.Получить(Запрос);
				Если Ответ.КодСостояния = 200 Тогда
					Протокол = Перечисления.TelegramПроксиПротоколы.SOCKS5;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Протокол) Тогда
			НовыйПрокси 			= Справочники.TelegramПрокси.СоздатьЭлемент();
			НовыйПрокси.Активность 	= Истина;
			НовыйПрокси.Сервер 		= Прокси.Сервер;
			НовыйПрокси.Порт 		= Прокси.Порт;
			НовыйПрокси.Протокол 	= Протокол;
			НовыйПрокси.Записать();
			КоличествоЗагруженных = КоличествоЗагруженных + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Регламентные_задания

// Удаляет устаревшие сообщения Telegram.
//
Процедура TelegramУдалениеУстаревшихСообщений() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьTelegram") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.TelegramУдалениеУстаревшихСообщений);
			
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = ЗначениеТаймера();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	СрокХраненияСообщений = Константы.TelegramСрокХраненияСообщений.Получить();
	Если СрокХраненияСообщений = 0 Тогда
		СрокХраненияСообщений = 30;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
        |   TelegramСообщениеВходящее.Ссылка КАК Ссылка
        |ИЗ
        |   Документ.TelegramСообщениеВходящее КАК TelegramСообщениеВходящее
        |ГДЕ
        |   TelegramСообщениеВходящее.Дата < &ДатаУдаления
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   TelegramСообщениеИсходящее.Ссылка
        |ИЗ
        |   Документ.TelegramСообщениеИсходящее КАК TelegramСообщениеИсходящее
        |ГДЕ
        |   TelegramСообщениеИсходящее.Дата < &ДатаУдаления";
    
	Запрос.УстановитьПараметр("ДатаУдаления", ТекущаяДатаСеанса() - СрокХраненияСообщений * 86400);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Сообщение = Выборка.Ссылка.ПолучитьОбъект();
			Сообщение.Удалить();			
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗаписатьЗамер("TelegramУдалениеУстаревшихСообщений", ЗначениеТаймера);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	
	
КонецПроцедуры

// Выполняет получение входящих сообщений для ботов с периодическим опросом.
//
Процедура TelegramОбработкаВходящихСообщенийПриИспользованииПериодическихЗапросов() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьTelegram") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.TelegramОбработкаВходящихСообщенийПриИспользованииПериодическихЗапросов);
					
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = ЗначениеТаймера();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОбработатьВходящиеСообщения();
		
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗаписатьЗамер("TelegramОбработкаВходящихСообщенийПриИспользованииПериодическихЗапросов", ЗначениеТаймера);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	
	
КонецПроцедуры

// Выполняет отправку исходящих сообщений Telegram, которые не были отправлены.
//
Процедура TelegramОтправкаИсходящихСообщений() Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьTelegram") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.TelegramОтправкаИсходящихСообщений);
					
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = ЗначениеТаймера();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОтправитьИсходящиеСообщения();
		
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗаписатьЗамер("TelegramОтправкаИсходящихСообщений", ЗначениеТаймера);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	
    
КонецПроцедуры

// Вспомогательная функция.
Функция СостояниеРегламентногоЗаданияПериодическогоЗапроса(Знач Бот) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Бот) Тогда
		Возврат НСтр("ru = 'Не задан бот при проверке состояния webhook'");
	КонецЕсли;
	
	Если ТипЗнч(Бот) <> Тип("СправочникСсылка.TelegramБоты") Тогда
		Возврат НСтр("ru = 'Проверка состояния должна выполняться с типом СправочникСсылка.TelegramБоты'");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	TelegramЧаты.ИдентификаторОбновления КАК ИдентификаторОбновления,
		|	TelegramЧаты.ДатаВремяИзменения КАК ДатаВремяИзменения
		|ИЗ
		|	РегистрСведений.TelegramЧаты КАК TelegramЧаты
		|ГДЕ
		|	TelegramЧаты.Бот = &Бот";
	Запрос.УстановитьПараметр("Бот", Бот);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат СтрШаблон(НСтр("ru = 'Дата последнего сообщения в чате %1'"), Выборка.ДатаВремяИзменения);
	Иначе
		Возврат НСтр("ru = 'Еще нет информации о дате последней загрузке сообщений бота'")
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Переменные_в_алгоритмах

Функция КомментарийПредопределенныхПеременныеЗаголовок() Экспорт
	
	Возврат "// " + НСтр("ru = 'Предопределенные переменные:'") + Символы.ПС;
	
КонецФункции

Функция КомментарийПредопределенныхПеременныеНастройкиБота() Экспорт
	   
	Возврат
		"///////////////////////////////////////" + Символы.ПС
		+ "// " + НСтр("ru = 'Данные бота:'") + Символы.ПС
		+ ДобавитьКОписанию("НастройкиБота", "Структура", НСтр("ru = 'настройки бота'"))
		+ ДобавитьКОписанию("	* Ссылка", "СправочникСсылка.TelegramБоты", НСтр("ru = 'ссылка на бота'"))
		+ ДобавитьКОписанию("	* Наименование", "Строка", НСтр("ru = 'наименование бота'"))
		+ ДобавитьКОписанию("	* Токен", "Строка", НСтр("ru = 'токен бота'"))
		+ ДобавитьКОписанию("	* ОграниченныйДоступ", "Булево", 
			НСтр("ru = 'Если Истина, то у новых пользователей бота ограниченый доступ'"));
	
КонецФункции
		
Функция КомментарийПредопределенныхПеременныеНакопленныеДанные() Экспорт
    
	Возврат
		"///////////////////////////////////////" + Символы.ПС
		+ "// " + НСтр("ru = 'Накопленные данные:'") + Символы.ПС
		+ ДобавитьКОписанию("НакопленныеДанные", "Структура", 
            НСтр("ru = 'то, что будет отправлено боту.'"))
		+ ДобавитьКОписанию("	* ИдентификаторЧата", "Число", 
            НСтр("ru = 'идентификатор чата с пользователем.'"))
		+ ДобавитьКОписанию("	* ИдентификаторОбновления", "Число", 
            НСтр("ru = 'идентификатор получения обновления сообщения.'"))
		+ ДобавитьКОписанию("	* ИдентификаторСообщения", "Число", 
            НСтр("ru = 'идентификатор сообщения.'"))
		+ ДобавитьКОписанию("	* НастройкиБота", "Структура", 
            НСтр("ru = 'настройки бота.'"))
        + ДобавитьКОписанию("	* Ошибки", "Структура", 
            НСтр("ru = 'список ошибок, которые возникли в процессе проверок/действий.'"))
        + ДобавитьКОписанию("	* Параметры", "Структура", 
            НСтр("ru = 'параметры сеанса текущего пользвоателя Telegram.'"))
		+ ДобавитьКОписанию("	* Сообщения", "Структура", 
            НСтр("ru = 'список сообщений, которые будут отправлены боту.'"))
		+ ДобавитьКОписанию("	* ФИОПользователяTelegram", "Строка", 
            НСтр("ru = 'ФИО пользователя в профиле Telegram.'"))
		+ ДобавитьКОписанию("	* ИмяПользователяTelegram", "Строка", 
            НСтр("ru = 'имя пользователя в профиле Telegram.'"))
		+ ДобавитьКОписанию("	* ИмяПрофиля", "Строка", 
            НСтр("ru = 'имя профиля Telegram.'"))
		+ ДобавитьКОписанию("	* ПользовательTelegram", "СправочникСсылка.TelegramПользователи", 
            НСтр("ru = 'кто прислал сообщение в Telegram.'"))			
		+ ДобавитьКОписанию("	* Пользователь", "СправочникСсылка.Пользователи", 
            НСтр("ru = 'кто прислал сообщение в Telegram.'"))
		+ ДобавитьКОписанию("	* ТекстСообщения", "Строка", 
            НСтр("ru = 'текст последнего сообщения'"))
		+ ДобавитьКОписанию("	* ТипСообщения", "Перечисления.TelegramТипСообщения", 
            НСтр("ru = 'тип последнего сообщения (текст, фото, стикер, документ, аудио, документ, запрос).'"))
		+ ДобавитьКОписанию("	* ДатаСообщения", "Дата", 
            НСтр("ru = 'дата последнего сообщения Telegram.'"))
		+ ДобавитьКОписанию("	* Сообщение", "ДокументСсылка.TelegramСообщениеВходящее", 
            НСтр("ru = 'последнее сообщение Telegram.'"));                                      
	
КонецФункции		

Функция КомментарийПредопределенныхПеременныхУсловий() Экспорт
		
	Возврат 
		КомментарийПредопределенныхПеременныеЗаголовок()
		+ КомментарийПредопределенныхПеременныеНастройкиБота()
		+ "///////////////////////////////////////" + Символы.ПС
		+ "// " + НСтр("ru = 'Входящие данные:'") + Символы.ПС
		+ ДобавитьКОписанию("ТекстСообщения", "Строка", НСтр("ru = 'текст сообщения, которое получили'"))
		+ ДобавитьКОписанию("ТекстСообщения", "Строка", НСтр("ru = 'текст сообщения, которое получили'"))
		+ ДобавитьКОписанию("ТекстПодписиКФайлу", "Строка", 
			НСтр("ru = 'текст подписи к присланому файлу (фото, документа, файла звуков'"))
		+ ДобавитьКОписанию("СодержитТекст", "Булево", НСтр("ru = 'признак того, что получили текст'"))
		+ ДобавитьКОписанию("СодержитДокумент", "Булево", НСтр("ru = 'признак того, что получили документ'"))
		+ ДобавитьКОписанию("СодержитФото", "Булево", НСтр("ru = 'признак того, что получили фото'"))
		+ ДобавитьКОписанию("СодержитПодписьКФайлу", "Булево", 
			НСтр("ru = 'признак того, что файл, который получили содержит подпись'"))
		+ ДобавитьКОписанию("СодержитАудио", "Булево", НСтр("ru = 'признак того, что получили аудио-файл'"))
		+ ДобавитьКОписанию("СодержитСтикер", "Булево", НСтр("ru = 'признак того, что получили стикер'"));
	
КонецФункции

Функция КомментарийПредопределенныхПеременныхДействий() Экспорт
	
	Возврат 
		КомментарийПредопределенныхПеременныеЗаголовок()
		+ КомментарийПредопределенныхПеременныеНастройкиБота()
		+ КомментарийПредопределенныхПеременныеНакопленныеДанные();
	
КонецФункции

#КонецОбласти

#Область Работа_с_Интернет

// Возвращает таймаут подключения.
//
// Возвращаемое значение:
//	Число - таймаут подключения в секундах.
//
Функция Таймаут() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Таймаут = Константы.TelegramТаймаутПодключений.Получить();
	Если Таймаут <= 0 Тогда
		Таймаут = 30;
	КонецЕсли;
	
	Возврат Таймаут;
	
КонецФункции

// Возвращает адрес сервера Telegram.
//
// Возвращаемое значение:
//	Строка - адрес сервера.
//
Функция АдресСервераTelegram() Экспорт
	
	Возврат "api.telegram.org";
	
КонецФункции

// Преобразует текст в URL
//
// Параметры:
//	ТекстСообщения - Строка - исходная строка.
//
// Возвращаемое значение:
//	Строка - текст в формате URL.
//
Функция КодироватьURL(Знач ТекстСообщения) Экспорт
    
	// Тег заключен в &#128694;
	СообщениеРезультат = "";
	ОстатокИсходногоТекста = ТекстСообщения;
	ПозицияНачалаТэга = Найти(ОстатокИсходногоТекста, "&#");
	
	Пока ПозицияНачалаТэга <> 0 Цикл
		
		ТекстДоТэга = Лев(ОстатокИсходногоТекста, ПозицияНачалаТэга - 1);
		
		СообщениеРезультат = СообщениеРезультат + КодироватьСтроку(ТекстДоТэга, СпособКодированияСтроки.КодировкаURL);
		ОстатокИсходногоТекста = Сред(ОстатокИсходногоТекста, ПозицияНачалаТэга + 2);
		
		ПозицияКонцаТэга = Найти(ОстатокИсходногоТекста, ";");
		Если ПозицияКонцаТэга = 0 Тогда
			СообщениеРезультат = СообщениеРезультат + КодироватьСтроку("&#" + ОстатокИсходногоТекста, 
				СпособКодированияСтроки.КодировкаURL);
			Прервать;
		КонецЕсли;
		
		ЗначениеТэга = Лев(ОстатокИсходногоТекста, ПозицияКонцаТэга - 1);
		ОстатокИсходногоТекста = Сред(ОстатокИсходногоТекста, ПозицияКонцаТэга + 1);
		ПозицияНачалаТэга = Найти(ОстатокИсходногоТекста, "&#");
		
		ТолькоЦифрыВСтроке = ТолькоЦифрыВСтроке(ЗначениеТэга);
		Если НЕ ТолькоЦифрыВСтроке Тогда
			СообщениеРезультат = СообщениеРезультат + КодироватьСтроку("&#" + ЗначениеТэга + ";", 
				СпособКодированияСтроки.КодировкаURL);
			Продолжить;
		КонецЕсли;
		
		ЧислоТэга = Число(ЗначениеТэга);
		Если ЧислоТэга > 55295 И ЧислоТэга < 57344 ИЛИ ЧислоТэга > 1114111 Тогда
			СообщениеРезультат = СообщениеРезультат + КодироватьСтроку("&#" + ЗначениеТэга + ";",
				СпособКодированияСтроки.КодировкаURL);
		Иначе
			СообщениеРезультат = СообщениеРезультат + СимволUnicodeВURL(ЧислоТэга);
		КонецЕсли;

	КонецЦикла;
	
	СообщениеРезультат = СообщениеРезультат + КодироватьСтроку(ОстатокИсходногоТекста, 
		СпособКодированияСтроки.КодировкаURL);
    
    Возврат СообщениеРезультат;
    
КонецФункции

// Вызывает отправку накопленных данных боту Telegram.
//
// Параметры:
//	МассивНакопленныхДанных - Массив - массив структур.
//
Процедура ОтправитьНакопленныеДанные(Знач МассивНакопленныхДанных) Экспорт
		
	СЛС.ОтправитьНакопленныеДанные(МассивНакопленныхДанных);

КонецПроцедуры

// Отправляет GET-запрос Telegram боту
//
// Параметры:
//	Ресурс - Строка - запрос, который необходимо выполнить.
//	МетодПолученияРезультата - Число - как сделать запрос 
//		(0 - Соединение.Получить(ЗапросСоединения), 1 - Соединение.ОтправитьДляОбработки(ЗапросСоединения)).
//	ИспользуетсяПрокси - Булево, Неопределено - использовать для отправки прокси-сервера или нет.
//	Прокси - ВыборкаРезультатаЗапроса - список прокси серверов выбранных в нужном порядке по приоритету.
//
// Возвращаемое значение:
//	HTTPОтвет - результат запроса.
//
Функция Get(Знач Ресурс, Знач МетодПолученияРезультата = 0,
	Знач ИспользуетсяПрокси = Неопределено, Знач Прокси = Неопределено) Экспорт
	
	ЗапросСоединения = Новый HTTPЗапрос(Ресурс);
	ЗапросСоединения.Заголовки.Вставить("Connection", "keep-alive");
	ЗапросСоединения.АдресРесурса = Ресурс;
	
	Возврат ОтправитьЗапрос(ЗапросСоединения, МетодПолученияРезультата, ИспользуетсяПрокси, Прокси);
	
КонецФункции

// Отправляет GET-запрос Telegram боту
//
// Параметры:
//	ЗапросСоединения - HTTPЗапрос - запрос, который необходимо выполнить.
//	МетодПолученияРезультата - Число - как сделать запрос 
//		(0 - Соединение.Получить(ЗапросСоединения), 1 - Соединение.ОтправитьДляОбработки(ЗапросСоединения)).
//	ИспользуетсяПрокси - Булево, Неопределено - использовать для отправки прокси-сервера или нет.
//	Прокси - ВыборкаРезультатаЗапроса - список прокси серверов выбранных в нужном порядке по приоритету.
//
// Возвращаемое значение:
//	HTTPОтвет - результат запроса.
//
Функция ОтправитьЗапрос(ЗапросСоединения, Знач МетодПолученияРезультата = 0, 
	Знач ИспользуетсяПрокси = Неопределено, Знач Прокси = Неопределено) Экспорт
	
	Если ИспользуетсяПрокси = Неопределено Тогда
		ИспользуетсяПрокси = ИспользоватьПрокси();
	КонецЕсли;
	
	Если ИспользуетсяПрокси Тогда
		
		Если Прокси = Неопределено Тогда
			Прокси = ПолучитьАктивныеПрокси();
		Иначе
			// В начало выборки.
			Прокси.Сбросить();
		КонецЕсли;
		
		Отправлено = Ложь;
		Набор = РегистрыСведений.TelegramСтатистикаОтправкиСообщений.СоздатьНаборЗаписей();
		Пока Прокси.Следующий() Цикл

			Попытка
                ВремяОтвета = ТекущаяУниверсальнаяДатаВМиллисекундах();
                Соединение = ПолучитьHTTPСоединениеСПрокси(АдресСервераTelegram(), 443, Прокси.Ссылка);
				Если МетодПолученияРезультата = 1 Тогда
					Ответ = Соединение.ОтправитьДляОбработки(ЗапросСоединения);
				Иначе
					Ответ = Соединение.Получить(ЗапросСоединения);
                КонецЕсли;
                ТекущееВремяОтвета = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяОтвета) / 1000;
				ДобавитьВНаборСтатистикиОтправкиСообщений(Набор, Прокси.Ссылка, 1, ТекущееВремяОтвета);
				Отправлено = Истина;
				Прервать;
                
            Исключение
                ТекущееВремяОтвета = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяОтвета) / 1000;
                ДобавитьВНаборСтатистикиОтправкиСообщений(Набор, Прокси.Ссылка, -1, ТекущееВремяОтвета);
			КонецПопытки;
		
		КонецЦикла;
		
		Попытка
			Набор.Записать(Ложь);
		Исключение
		КонецПопытки;
		
		Если Отправлено = Ложь Тогда
			ВызватьИсключение НСтр("ru = 'При отправке данных на сайт Telegram все прокси-серверы оказались не доступны'");
		КонецЕсли;
		
	Иначе
		
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		Соединение = Новый HTTPСоединение(АдресСервераTelegram(),443,,,, Таймаут(), ЗащищенноеСоединение);
		
		Попытка
			Если МетодПолученияРезультата = 1 Тогда
				Ответ = Соединение.ОтправитьДляОбработки(ЗапросСоединения);
			Иначе
				Ответ = Соединение.Получить(ЗапросСоединения);
			КонецЕсли;
		Исключение
		    ВызватьИсключение СтрШаблон(НСтр("ru = 'При отправке данных на сайт Telegram нет доступа к сайту %1'"), АдресСервераTelegram());
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Отправляет данные боту.
//
// Параметры:
//	НастройкиБота - Структура - реквизиты справочника
//
// Возвращаемое значение:
//	
//
Функция ОтправитьДанные(Знач НастройкиБота, Знач структураОтвет) Экспорт
	
	Возврат СЛС.ОтправитьДанные(НастройкиБота, структураОтвет);
		
КонецФункции

#КонецОбласти

#Область Работа_c_JSON

// Конвертирует JSON в Структуру.
//
// Параметры:
//	СтруктураВСтроке - Строка - строка JSON.
//	ВернутьСоответствие - Булево - вернуть в Соответствие если Истина, иначе в Структуру.
//
// Возвращаемое значение:
//	Структура или Соответствие - результат конвертации.
//
Функция ЧтениеJSONВСтруктуру(Знач СтруктураВСтроке, ВернутьСоответствие = Истина) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтруктураВСтроке);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, ВернутьСоответствие);

КонецФункции

// Конвертирует Структуру в JSON.
//
// Параметры:
//	СтруктураЗначений - Структура - структура, которую необходимо конвертировать.
//
// Возвращаемое значение:
//	Строка - строка в формате JSON.
//
Функция ЗаписьJSONВСтруктуру(Знач СтруктураЗначений) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗначений);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#Область WebHook

// Адрес WebHook из интернета
//
// Параметры:
//	Бот - СправочникСсылка.TelegramБоты - исходный бот.
//
// Возвращаемое значение:
//	Строка - адрес сайта "из-вне" к базе.
//
Функция АдресWebHook(Знач Бот) Экспорт
	
	АдресВебхук = СокрЛП(Бот.АдресВебхук);
	Если НЕ ПустаяСтрока(АдресВебхук) И Прав(АдресВебхук, 1) <> "/" Тогда
		АдресВебхук = АдресВебхук + "/";
	КонецЕсли;
	АдресВИнтернете = АдресВебхук + "hs/telegram/" + СокрЛП(Бот.КлючВебхук);
	Если НЕ СтрНачинаетсяС(ВРег(АдресВИнтернете), "HTTPS://") Тогда
		АдресВИнтернете = "https://" + АдресВИнтернете;
	КонецЕсли;
	
	Возврат АдресВИнтернете; 
	
КонецФункции

// Проверка состояния webhook.
//
// Параметры:
//	Бот - СправочникСсылка.TelegramБоты - бот проверку по которому мы делаем.
//
// Возвращаемое значение:
//	Строка - ошибка, или если все правильно пустая строка.
//
Функция СостояниеВебхука(Знач Бот) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Бот) Тогда
		Возврат НСтр("ru = 'Не задан бот при проверке состояния webhook'");
	КонецЕсли;
	
	Если ТипЗнч(Бот) <> Тип("СправочникСсылка.TelegramБоты") Тогда
		Возврат НСтр("ru = 'Проверка состояния webhook должна выполняться с типом СправочникСсылка.TelegramБоты'");
	КонецЕсли;
	
	СтрокаСостояния = "";
	
	НастройкиБота = НастройкиБота(Бот);
	Ресурс = "bot" + НастройкиБота.Токен + "/getWebhookInfo";
	
	// Отправляем запрос на сервер.
	Ответ = Get(Ресурс);
	
	Если Ответ = Неопределено Тогда
		СтрокаСостояния = Строка(Бот) + ": "
			+ НСтр("ru = 'Бот не вернул ответ. Попробуйте использовать прокси серверы'");
		ЗаписьЖурналаРегистрации("Telegram", УровеньЖурналаРегистрации.Ошибка, , , СтрокаСостояния);
		Возврат СтрокаСостояния;
	КонецЕсли;
	
	СтрокаJSON = Ответ.ПолучитьТелоКакСтроку();
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	Результат = ПрочитатьJSON(Чтение);
	Если Результат["ok"] Тогда
		Результат = Результат["result"];
		Если Результат.Свойство("pending_update_count") Тогда
			СтрокаСостояния = СтрокаСостояния
				+ СтрШаблон(НСтр("ru = 'Количество обновлений, ожидающих доставки: %1'"), 
					Результат.pending_update_count) 
				+ Символы.ПС;
		КонецЕсли;
		Если Результат.Свойство("last_error_date") Тогда
			СтрокаСостояния = СтрокаСостояния
				+ СтрШаблон(НСтр("ru = 'Последняя ошибка доставки возникла: %1'"), 
					МестноеВремя(Дата('19700101') + Результат["last_error_date"]))
				+ Символы.ПС;
		КонецЕсли;
		Если Результат.Свойство("last_error_message") Тогда
			СтрокаСостояния = СтрокаСостояния
				+ СтрШаблон(НСтр("ru = 'Последней ошибки доставки обновления: %1'"), 
					Результат["last_error_message"])
				+ Символы.ПС;
		КонецЕсли;
		Если Результат.Свойство("url") Тогда
			Если НЕ ПустаяСтрока(Результат["url"]) Тогда
				СтрокаСостояния = СтрокаСостояния
					+ СтрШаблон(НСтр("ru = 'URL вебхука: %1'"), 
						Результат["url"])
					+ Символы.ПС;
			Иначе
				СтрокаСостояния = СтрокаСостояния
					+ НСтр("ru = 'URL вебхука не задан'")
					+ Символы.ПС;					
			КонецЕсли;
		КонецЕсли;
		Если Результат.Свойство("has_custom_certificate") Тогда
			Если Результат["has_custom_certificate"] Тогда
				СтрокаСостояния = СтрокаСостояния
					+ НСтр("ru = 'Используется самподписанный сертфикат'")
					+ Символы.ПС;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаСостояния = СтрокаСостояния
			+ СтрШаблон(НСтр("ru = 'Не известный статус обновления %1'"), СтрокаJSON);
	КонецЕсли;
	Чтение.Закрыть();
	
	Возврат СтрокаСостояния;
	
КонецФункции

// Отправляет данные по настройкам Webhook.
//
// Параметры:
//	Бот - СправочникСсылка.TelegramБоты - исходный бот.
//
// Возвращаемое значение:
//	Строка - ошибка, или если все правильно пустая строка.
//
Функция ОтправитьНастройкиВебхука(Знач Бот) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Бот) Тогда
		Возврат НСтр("ru = 'Не задан бот при отправке настроек webhook'");
	КонецЕсли;
	
	Если ТипЗнч(Бот) <> Тип("СправочникСсылка.TelegramБоты") Тогда
		Возврат НСтр("ru = 'Отправка настроек webhook должна выполняться с типом СправочникСсылка.TelegramБоты'");
	КонецЕсли;
	
	НастройкиБота = НастройкиБота(Бот);
	
	Сертификат = Неопределено;
	Если НастройкиБота.ИспользоватьСамоподписанныйСертификат Тогда
		Сертификат = НастройкиБота.Сертификат;
	КонецЕсли;
	
	Адрес = АдресWebHook(НастройкиБота.Ссылка);	
	Структура = ПолучитьСтруктуруУстановкиВебхук(Адрес, НастройкиБота.ИспользоватьСамоподписанныйСертификат,
		Сертификат, НастройкиБота.ИмяСертификата);
	Результат = ОтправитьДанные(НастройкиБота, Структура); 
		                    
	Если Результат.Получить("ok") = Истина Тогда
		Если Результат.Получить("result") = Истина Тогда			
			Возврат НСтр("ru = 'Вебхук Telegram успешно установлен'");
		КонецЕсли;
		Если Результат.Получить("description") <> Неопределено тогда
			Возврат Результат.Получить("description");
		КонецЕсли;
	КонецЕсли;
	
	Возврат НСтр("ru = 'Указанный адрес недоступен из интернета серверу Telegram'");
	
КонецФункции

// Удаляет настройки Webhook с сервера Telegram.
//
// Параметры:
//	Бот - СправочникСсылка.TelegramБоты - исходный бот.
//
// Возвращаемое значение:
//	Строка - ошибка, или если все правильно пустая строка.
//
Функция УдалитьНастройкиВебхука(Знач Бот) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Бот) Тогда
		Возврат НСтр("ru = 'Не задан бот при отправке настроек webhook'");
	КонецЕсли;
	
	Если ТипЗнч(Бот) <> Тип("СправочникСсылка.TelegramБоты") Тогда
		Возврат НСтр("ru = 'Отправка настроек webhook должна выполняться с типом СправочникСсылка.TelegramБоты'");
	КонецЕсли;
	
	НастройкиБота = НастройкиБота(Бот);
	Структура = ПолучитьСтруктуруУдаленияВебхук();
	//@skip-warning
	Результат = ОтправитьДанные(НастройкиБота, Структура); 
		
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область Общие

// Выводит сообщение пользователю.
//
// Параметры:
//	Текст - Строка - текст, который надо вывести.
//
Процедура СообщитьПользователю(Знач Текст) Экспорт
	
	ОбщегоНазначения.СообщитьПользователю(Текст);
	
КонецПроцедуры

// Возвращает количество элементов в настройках Telegram в базе.
//
// Возвращаемое значение:
//	Структура - количество элементов в справочнике "TelegramСообщения".
//
Функция КоличествоДанных() Экспорт
    
    Структура = Новый Структура;
    
    Запрос = Новый Запрос();
    Запрос.Текст =
        "ВЫБРАТЬ
        |   ""КоличествоВходящихСообщений"" КАК Настройка,
        |   ЕСТЬNULL(СУММА(1), 0) КАК Количество
        |ИЗ
        |   Документ.TelegramСообщениеВходящее КАК TelegramСообщениеВходящее
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ""КоличествоИсходящихСообщений"" КАК Настройка,
        |   ЕСТЬNULL(СУММА(1), 0) КАК Количество
        |ИЗ
        |   Документ.TelegramСообщениеИсходящее КАК TelegramСообщениеИсходящее
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ""КоличествоБотов"",
        |   ЕСТЬNULL(СУММА(1), 0)
        |ИЗ
        |   Справочник.TelegramБоты КАК TelegramБоты
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ""Действия"",
        |   ЕСТЬNULL(СУММА(1), 0)
        |ИЗ
        |   Справочник.TelegramДействия КАК TelegramДействия
        |ГДЕ
        |   TelegramДействия.ЭтоГруппа = ЛОЖЬ
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ""Клавиатуры"",
        |   ЕСТЬNULL(СУММА(1), 0)
        |ИЗ
        |   Справочник.TelegramКлавиатуры КАК TelegramКлавиатуры
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ""Команды"",
        |   ЕСТЬNULL(СУММА(1), 0)
        |ИЗ
        |   Справочник.TelegramКоманды КАК TelegramКоманды
        |ГДЕ
        |   TelegramКоманды.ЭтоГруппа = ЛОЖЬ
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ""Пользователи"",
        |   ЕСТЬNULL(СУММА(1), 0)
        |ИЗ
        |   Справочник.TelegramПользователи КАК TelegramПользователи
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ""Прокси"",
        |   ЕСТЬNULL(СУММА(1), 0)
        |ИЗ
        |   Справочник.TelegramПрокси КАК TelegramПрокси
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ""Условия"",
        |   ЕСТЬNULL(СУММА(1), 0)
        |ИЗ
        |   Справочник.TelegramУсловия КАК TelegramУсловия
        |ГДЕ
        |   TelegramУсловия.ЭтоГруппа = ЛОЖЬ
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ""Параметры"",
        |   ЕСТЬNULL(СУММА(1), 0)
        |ИЗ
        |   ПланВидовХарактеристик.TelegramПараметрыДействий КАК TelegramПараметрыДействий
        |ГДЕ
        |   TelegramПараметрыДействий.ЭтоГруппа = ЛОЖЬ
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ""ПопытокОтправки"",
        |   ЕСТЬNULL(СУММА(TelegramСтатистикаОтправкиСообщений.Отправлено), 0)
        |ИЗ
        |   РегистрСведений.TelegramСтатистикаОтправкиСообщений КАК TelegramСтатистикаОтправкиСообщений
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ""Emoji"",
        |   ЕСТЬNULL(СУММА(1), 0)
        |ИЗ
        |   Справочник.TelegramEmoji КАК TelegramEmoji
        |ГДЕ
        |   TelegramEmoji.ЭтоГруппа = ЛОЖЬ";
    
    Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
    	Структура.Вставить(Выборка.Настройка, Выборка.Количество);
    КонецЦикла; 
    
    Возврат Структура;
    
КонецФункции

#КонецОбласти

#Область Структуры

// Возвращает структуру кнопок клавиатуры для отправки сообщения.
//
// Параметры:
//	НакопленныеДанные - Структура
//	Сообщение - Структура
//	КлавиатураСсылка - СправочникСсылка.TelegramКлавиатуры
//
// Возвращаемое значение:
//	Структура
//
Функция ПолучитьСтруктуруКнопокКлавиатуры(НакопленныеДанные, Знач Сообщение, Знач КлавиатураСсылка) Экспорт
    
	Если НЕ ЗначениеЗаполнено(КлавиатураСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КлавиатураСсылка.ВидКлавиатуры = Перечисления.TelegramВидКлавиатуры.Стандартная Тогда
	
		МассивСтрок = Новый Массив;
		МассивКнопокСтроки = Новый Массив;
	
		ТЗ = КлавиатураСсылка.Кнопки.Выгрузить();
		ТЗ.Сортировать("Строка");
		ТекущийНомерСтроки = -1;
		Для Каждого Строки Из ТЗ Цикл
			Если ТекущийНомерСтроки <> Строки.Строка Тогда
				Если ТекущийНомерСтроки <> -1 Тогда
					МассивСтрок.Добавить(МассивКнопокСтроки);
				КонецЕсли;
				МассивКнопокСтроки = Новый Массив;
				ТекущийНомерСтроки = Строки.Строка;
			КонецЕсли;

			Кнопка = Новый Структура;
			Кнопка.Вставить("text", Строки.Текст);
			МассивКнопокСтроки.Добавить(Кнопка);

		КонецЦикла;

		Если МассивКнопокСтроки.Количество() > 0 Тогда
			МассивСтрок.Добавить(МассивКнопокСтроки);
		КонецЕсли;

		СтруктураКнопок = Новый Структура;
		СтруктураКнопок.Вставить("keyboard", МассивСтрок);
		Если КлавиатураСсылка.Авторазмер Тогда
			СтруктураКнопок.Вставить("resize_keyboard", Истина);
		КонецЕсли;
		Если КлавиатураСсылка.СкрытьПослеИспользования Тогда
			СтруктураКнопок.Вставить("one_time_keyboard", Истина);
		КонецЕсли;

		Возврат TelegramСервер.ЗаписьJSONВСтруктуру(СтруктураКнопок);
		
	ИначеЕсли КлавиатураСсылка.ВидКлавиатуры = Перечисления.TelegramВидКлавиатуры.Встроенная Тогда

		МассивСтрок = Новый Массив;
		МассивКнопокСтроки = Новый Массив;

		ТЗ = КлавиатураСсылка.Кнопки.Выгрузить();
		ТЗ.Сортировать("Строка");
		ТекущийНомерСтроки = -1;
		Для Каждого Строки Из ТЗ Цикл
			Если ТекущийНомерСтроки <> Строки.Строка Тогда
				Если ТекущийНомерСтроки <> -1 Тогда
					МассивСтрок.Добавить(МассивКнопокСтроки);
				КонецЕсли;
				МассивКнопокСтроки = Новый Массив;
				ТекущийНомерСтроки = Строки.Строка;
			КонецЕсли;

			Кнопка = Новый Структура;
			Кнопка.Вставить("text", Строки.Текст);
			Если НЕ ПустаяСтрока(Строки.URL) Тогда
				Кнопка.Вставить("url", Строки.URL);
			КонецЕсли;
			Если НЕ ПустаяСтрока(Строки.callback_data) Тогда
				Кнопка.Вставить("callback_data", Строки.callback_data);
			КонецЕсли;
			МассивКнопокСтроки.Добавить(Кнопка);

		КонецЦикла;

		Если МассивКнопокСтроки.Количество() > 0 Тогда
			МассивСтрок.Добавить(МассивКнопокСтроки);
		КонецЕсли;

		СтруктураКнопок = Новый Структура;
		СтруктураКнопок.Вставить("inline_keyboard", МассивСтрок);
		Если КлавиатураСсылка.Авторазмер Тогда
			СтруктураКнопок.Вставить("resize_keyboard", Истина);
		КонецЕсли;
		Если КлавиатураСсылка.СкрытьПослеИспользования Тогда
			СтруктураКнопок.Вставить("one_time_keyboard", Истина);
		КонецЕсли;

		Возврат TelegramСервер.ЗаписьJSONВСтруктуру(СтруктураКнопок);
		
	ИначеЕсли КлавиатураСсылка.ВидКлавиатуры = Перечисления.TelegramВидКлавиатуры.Программная Тогда
		
		Клавиатура = Неопределено;
		
		Попытка
			Выполнить(КлавиатураСсылка.Алгоритм.Получить());
		Исключение
			TelegramСервер.ДобавитьОшибку(НакопленныеДанные.НастройкиБота.Ссылка, 
				СтрШаблон(НСтр("ru = 'Ошибка построения программной клавиатуры: %1'"), 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())), НакопленныеДанные);
		КонецПопытки;
			
		Если Клавиатура <> Неопределено И ТипЗнч(Клавиатура) = Тип("Структура") Тогда
			Возврат TelegramСервер.ЗаписьJSONВСтруктуру(Клавиатура);
		КонецЕсли;
		
		Возврат Неопределено;
		
	ИначеЕсли КлавиатураСсылка.ВидКлавиатуры = Перечисления.TelegramВидКлавиатуры.СкрытьКлавиатуру Тогда
		
		СтруктураКнопок = Новый Структура;
		СтруктураКнопок.Вставить("remove_keyboard", Истина);
		Возврат TelegramСервер.ЗаписьJSONВСтруктуру(СтруктураКнопок);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Нет такого вида клавиатуры'");
		
	КонецЕсли;
        
КонецФункции

Функция ПолучитьСтруктуруИзменитьСообщение(Знач ИдЧата, Знач ИдСообщения, Знач ТекстСообщения, 
	Знач Кнопки = Неопределено) Экспорт
	
	структураОтвет = Новый Соответствие;	
	структураОтвет.Вставить("method", "editMessageText");		
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("message_id", ИдСообщения);		
	структураОтвет.Вставить("text", ТекстСообщения);
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруНовоеСообщение(Знач ИдЧата, Знач ТекстСообщения, Знач Кнопки = Неопределено,
	Знач Ответ = Неопределено, Знач ВыключитьПредпросмотрВебСтраницы = Неопределено, 
	Знач ВыключитьУведомление = Неопределено, Знач РежимАнализаТекста = Неопределено) Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "sendMessage");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("text", ТекстСообщения);
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	Если Ответ <> Неопределено Тогда
		структураОтвет.Вставить("reply_to_message_id", Ответ);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыключитьПредпросмотрВебСтраницы) Тогда
		структураОтвет.Вставить("disable_web_page_preview", ВыключитьПредпросмотрВебСтраницы);	
	КонецЕсли;
	Если ВыключитьУведомление <> Неопределено Тогда
		структураОтвет.Вставить("disable_notification", ВыключитьУведомление);	
	КонецЕсли;
	Если РежимАнализаТекста <> Неопределено Тогда
		структураОтвет.Вставить("parse_mode", РежимАнализаТекста);	
	КонецЕсли;	
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруИзменитьТекстСообщения(Знач ИдЧата, Знач ТекстСообщения, Знач ИдентификаторСообщения, 
	Знач Кнопки = Неопределено, Знач ВыключитьПредпросмотрВебСтраницы = Неопределено, 
	Знач РежимАнализаТекста = Неопределено) Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "editMessageText");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("message_id", ИдентификаторСообщения);
	структураОтвет.Вставить("text", ТекстСообщения);
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыключитьПредпросмотрВебСтраницы) Тогда
		структураОтвет.Вставить("disable_web_page_preview", ВыключитьПредпросмотрВебСтраницы);	
	КонецЕсли;
	Если РежимАнализаТекста <> Неопределено Тогда
		структураОтвет.Вставить("parse_mode", РежимАнализаТекста);	
	КонецЕсли;	
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруУдалитьСообщение(Знач ИдЧата, Знач ИдентификаторСообщения) Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "deleteMessage");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("message_id", ИдентификаторСообщения);
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруСообщениеКартинка(Знач ИдЧата, Знач ТекстСообщения, Знач ИмяФайла, Знач Картинка, 
	Знач Кнопки = Неопределено,	Знач Ответ = Неопределено, Знач ВыключитьУведомление = Неопределено) Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "sendPhoto");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("photo", Картинка);
	структураОтвет.Вставить("filename", ИмяФайла);
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		структураОтвет.Вставить("caption", ТекстСообщения);
	КонецЕсли;
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	Если ВыключитьУведомление <> Неопределено Тогда
		структураОтвет.Вставить("disable_notification", ВыключитьУведомление);	
	КонецЕсли;
	Если Ответ <> Неопределено Тогда
		структураОтвет.Вставить("reply_to_message_id", Ответ);	
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруСообщениеДокумент(Знач ИдЧата, Знач ТекстСообщения, Знач ИмяФайла, Знач Файл, 
	Знач Кнопки = Неопределено, Знач Ответ = Неопределено, Знач ВыключитьУведомление = Неопределено) Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "sendDocument");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("document", Файл);
	структураОтвет.Вставить("filename", ИмяФайла);
	структураОтвет.Вставить("caption", ТекстСообщения);
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	Если ВыключитьУведомление <> Неопределено Тогда
		структураОтвет.Вставить("disable_notification", ВыключитьУведомление);	
	КонецЕсли;
	Если Ответ <> Неопределено Тогда
		структураОтвет.Вставить("reply_to_message_id", Ответ);	
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруСообщениеВидео(Знач ИдЧата, Знач ТекстСообщения, Знач ИмяФайла, Знач Файл, 
	Знач Кнопки = Неопределено, Знач Ответ = Неопределено, Знач ВыключитьУведомление = Неопределено) Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "sendVideo");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("video", Файл);
	структураОтвет.Вставить("filename", ИмяФайла);
	структураОтвет.Вставить("caption", ТекстСообщения);
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	Если ВыключитьУведомление <> Неопределено Тогда
		структураОтвет.Вставить("disable_notification", ВыключитьУведомление);	
	КонецЕсли;
	Если Ответ <> Неопределено Тогда
		структураОтвет.Вставить("reply_to_message_id", Ответ);	
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруСообщениеАудио(Знач ИдЧата, Знач ТекстСообщения, Знач ИмяФайла, Знач Файл, 
	Знач Кнопки = Неопределено,	Знач Ответ = Неопределено, Знач ВыключитьУведомление = Неопределено) Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "sendAudio");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("audio", Файл);
	структураОтвет.Вставить("filename", ИмяФайла);
	структураОтвет.Вставить("caption", ТекстСообщения);
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	Если ВыключитьУведомление <> Неопределено Тогда
		структураОтвет.Вставить("disable_notification", ВыключитьУведомление);	
	КонецЕсли;
	Если Ответ <> Неопределено Тогда
		структураОтвет.Вставить("reply_to_message_id", Ответ);	
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруСообщениеГолосовоеСообщение(Знач ИдЧата, Знач ТекстСообщения, Знач ИмяФайла, Знач Файл,
	Знач Кнопки = Неопределено, Знач Ответ = Неопределено, Знач ВыключитьУведомление = Неопределено) Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "sendVoice");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("voice", Файл);
	структураОтвет.Вставить("filename", ИмяФайла);
	структураОтвет.Вставить("caption", ТекстСообщения);
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	Если ВыключитьУведомление <> Неопределено Тогда
		структураОтвет.Вставить("disable_notification", ВыключитьУведомление);	
	КонецЕсли;
	Если Ответ <> Неопределено Тогда
		структураОтвет.Вставить("reply_to_message_id", Ответ);	
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруУбратьКлавиатуру(Знач ИдЧата, Знач ТекстСообщения) Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "sendMessage");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("text", ТекстСообщения);
	структураОтвет.Вставить("reply_markup", ЗаписьJSONВСтруктуру(Новый Структура("remove_keyboard", Истина)));
	
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруМестоположения(Знач ИдЧата, Знач Широта, Знач Долгота, Знач Кнопки = Неопределено,
	Знач Ответ = Неопределено, Знач ВыключитьУведомление = Неопределено) Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "sendLocation");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("latitude", Широта);
	структураОтвет.Вставить("longitude", Долгота);
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	Если ВыключитьУведомление <> Неопределено Тогда
		структураОтвет.Вставить("disable_notification", ВыключитьУведомление);	
	КонецЕсли;
	Если Ответ <> Неопределено Тогда
		структураОтвет.Вставить("reply_to_message_id", Ответ);	
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруМестаНаКарте(Знач ИдЧата, Знач Широта, Знач Долгота, Знач Адрес, Знач Название, 
	Знач Кнопки = Неопределено,	Знач Ответ = Неопределено, Знач ВыключитьУведомление = Неопределено) Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "sendVenue");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("latitude", Широта);
	структураОтвет.Вставить("longitude", Долгота);
	структураОтвет.Вставить("address", Адрес);
	структураОтвет.Вставить("title", Название);
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	Если ВыключитьУведомление <> Неопределено Тогда
		структураОтвет.Вставить("disable_notification", ВыключитьУведомление);	
	КонецЕсли;
	Если Ответ <> Неопределено Тогда
		структураОтвет.Вставить("reply_to_message_id", Ответ);	
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруУстановкиВебхук(Знач Адрес, Знач ИспользоватьСамоподписанныйСертификат, Знач ПолноеИмяФайла,
	Знач ИмяСертификата) Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "setWebhook");
	структураОтвет.Вставить("url", Адрес);
	Если ИспользоватьСамоподписанныйСертификат Тогда
		структураОтвет.Вставить("certificate", ПолноеИмяФайла);
		структураОтвет.Вставить("filename", ИмяСертификата);
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция ПолучитьСтруктуруУдаленияВебхук() Экспорт
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "deleteWebhook");
	
	Возврат структураОтвет;
	
КонецФункции

#КонецОбласти

#Область ПараметрыДействий

Функция ЗначенияПараметровДействий(Знач Бот, Знач ИдентификаторЧата) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	TelegramПараметрыДействий.Параметр КАК Параметр,
		|	TelegramПараметрыДействий.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.TelegramПараметрыДействий КАК TelegramПараметрыДействий
		|ГДЕ
		|	TelegramПараметрыДействий.Бот = &Бот
		|	И TelegramПараметрыДействий.ИдентификаторЧата = &ИдентификаторЧата";
	
	Запрос.УстановитьПараметр("Бот", Бот);
	Запрос.УстановитьПараметр("ИдентификаторЧата", ИдентификаторЧата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Параметр, Выборка.Значение);
	КонецЦикла;
	                         
	Возврат Результат;
	
КонецФункции

Функция ЗначениеПараметраДействия(Знач Бот, Знач ИдентификаторЧата, Знач Параметр) Экспорт
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	TelegramПараметрыДействий.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.TelegramПараметрыДействий КАК TelegramПараметрыДействий
		|ГДЕ
		|	TelegramПараметрыДействий.Бот = &Бот
		|	И TelegramПараметрыДействий.ИдентификаторЧата = &ИдентификаторЧата
		|	И TelegramПараметрыДействий.Параметр = &Параметр";
	
	Запрос.УстановитьПараметр("Бот", Бот);
	Запрос.УстановитьПараметр("ИдентификаторЧата", ИдентификаторЧата);
	Запрос.УстановитьПараметр("Параметр", Параметр);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Значение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОчиститьПараметрыДействий(Знач Бот, Знач ИдентификаторЧата) Экспорт
	
	НаборЗаписей = РегистрыСведений.TelegramПараметрыДействий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Бот.Установить(Бот);
	НаборЗаписей.Отбор.ИдентификаторЧата.Установить(ИдентификаторЧата);
    НаборЗаписей.Записать(); 

КонецПроцедуры

Процедура ОчиститьПараметрДействия(Знач Бот, Знач ИдентификаторЧата, Знач Параметр) Экспорт
	
	НаборЗаписей = РегистрыСведений.TelegramПараметрыДействий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Бот.Установить(Бот);
	НаборЗаписей.Отбор.ИдентификаторЧата.Установить(ИдентификаторЧата);
	НаборЗаписей.Отбор.Параметр.Установить(Параметр);
    НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УстановитьПараметрДействия(Знач Бот, Знач ИдентификаторЧата, Знач Параметр, Знач Значение) Экспорт
	
	Запись 			= РегистрыСведений.TelegramПараметрыДействий.СоздатьМенеджерЗаписи();
	Запись.Бот 		= Бот;
	Запись.ИдентификаторЧата = ИдентификаторЧата;
	Запись.Параметр = Параметр;
	Запись.Значение = Значение;
    Запись.Записать(Истина);
	
КонецПроцедуры

Функция ПараметрДействия(Знач НаименованиеПараметра) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	TelegramПараметрыДействий.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.TelegramПараметрыДействий КАК TelegramПараметрыДействий
		|ГДЕ
		|	TelegramПараметрыДействий.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", НаименованиеПараметра);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПланыВидовХарактеристик.TelegramПараметрыДействий.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ЗначениеПараметра(Знач Структура, Знач НаименованиеПараметра) Экспорт
	
	Параметр = ПараметрДействия(НаименованиеПараметра);
	Если ЗначениеЗаполнено(Параметр) Тогда
		Возврат Структура.Получить(Параметр);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Заполнение_предопределенных_элементов

// Заполняет предопределенные этапы процессов.
//
Процедура ЗаполнитьНастройкиTelegramПоУмолчанию(Знач ПервоначальноеЗаполнение = Истина) Экспорт
	
	// Константы
	Если ПервоначальноеЗаполнение = Ложь Тогда
		Константы.ИспользоватьTelegram.Установить(Истина);
		Константы.TelegramСрокХраненияСообщений.Установить(30);
		Константы.TelegramТаймаутПодключений.Установить(30);
	КонецЕсли;
	
	// Справочники и прочее.
	ЗагрузитьНастройки(Неопределено, ПервоначальноеЗаполнение);
	
КонецПроцедуры

// Возвращает адрес во временном хранилище с двоичными данными всех выгруженных страниц.
// и настроек Telegram.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка - адрес  во временном хранилище с двоичными данными всех выгруженных страниц.
//
Функция ВыгрузитьНастройки() Экспорт
	
	КаталогXML = КаталогВременныхФайлов() + "telegram\";
	УдалитьФайлы(КаталогXML, "*");
	СоздатьКаталог(КаталогXML);
	
	УстановитьПривилегированныйРежим(Истина);
    
    #Область СериализацияОбъектов
    
	СериализоватьОбъектыПоЗапросу(
		"ВЫБРАТЬ
        |   TelegramБоты.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.TelegramБоты КАК TelegramБоты
        |ГДЕ
        |   НЕ TelegramБоты.ПометкаУдаления
        |
        |АВТОУПОРЯДОЧИВАНИЕ",
        КаталогXML + "TelegramБоты.xml");
        
	СериализоватьОбъектыПоЗапросу(
		"ВЫБРАТЬ
		|	TelegramПараметрыДействий.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.TelegramПараметрыДействий КАК TelegramПараметрыДействий
		|ГДЕ
		|	НЕ TelegramПараметрыДействий.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ", 
        КаталогXML + "TelegramПараметрыДействий.xml");
        
	СериализоватьОбъектыПоЗапросу(
		"ВЫБРАТЬ
        |   TelegramКлавиатуры.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.TelegramКлавиатуры КАК TelegramКлавиатуры
        |ГДЕ
        |   НЕ TelegramКлавиатуры.ПометкаУдаления
        |АВТОУПОРЯДОЧИВАНИЕ", 
        КаталогXML + "TelegramКлавиатуры.xml");
        
	СериализоватьОбъектыПоЗапросу(
		"ВЫБРАТЬ
        |   TelegramУсловия.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.TelegramУсловия КАК TelegramУсловия
        |ГДЕ
        |   НЕ TelegramУсловия.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ",
        КаталогXML + "TelegramУсловия.xml");
        
	СериализоватьОбъектыПоЗапросу(
		"ВЫБРАТЬ
        |   TelegramДействия.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.TelegramДействия КАК TelegramДействия
        |ГДЕ
        |   НЕ TelegramДействия.ПометкаУдаления
        |
        |УПОРЯДОЧИТЬ ПО
        |   Ссылка ИЕРАРХИЯ
        |АВТОУПОРЯДОЧИВАНИЕ",
        КаталогXML + "TelegramДействия.xml");
        
	СериализоватьОбъектыПоЗапросу(
		"ВЫБРАТЬ
        |   TelegramКоманды.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.TelegramКоманды КАК TelegramКоманды
        |ГДЕ
        |   НЕ TelegramКоманды.ПометкаУдаления
        |
        |УПОРЯДОЧИТЬ ПО
        |   Ссылка ИЕРАРХИЯ
        |АВТОУПОРЯДОЧИВАНИЕ",
        КаталогXML + "TelegramКоманды.xml");
        
    #КонецОбласти
    
    #Область СериализацияКонстант
    
	// Пишем константы
    Запись = Новый ЗаписьXML;
    Запись.УстановитьСтроку();
    
    // Записываем объявление xml файла: <?xml version="1.0"?>
    Запись.ЗаписатьОбъявлениеXML();
    	
	Запись.ЗаписатьНачалоЭлемента("Константы");
    Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.1/data/enterprise/current-config");
    Запись.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
    Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
    
    // TelegramДействиеКомандаНеНайдена
	TelegramДействиеКомандаНеНайдена = Константы.TelegramДействиеКомандаНеНайдена.Получить();
	Запись.ЗаписатьНачалоЭлемента("TelegramДействиеКомандаНеНайдена");	
	Запись.ЗаписатьТекст(Строка(TelegramДействиеКомандаНеНайдена.УникальныйИдентификатор()));
	Запись.ЗаписатьКонецЭлемента();	
        
	// Записываем конец элемента Страницы
	Запись.ЗаписатьКонецЭлемента();	
	
	// Записать все в файл НомерПорции.xml.
	// покажем что получилось
	Текст = Запись.Закрыть();	

	XMLФайл = КаталогXML +"TelegramКонстанты.xml";
	МойXML 	= Новый ТекстовыйДокумент; 
	МойXML.ДобавитьСтроку(Текст);
	МойXML.Записать(XMLФайл);
    
    #КонецОбласти
	
	// Делаем архив
	ИмяАрхива 	= ПолучитьИмяВременногоФайла();
	Файлы = НайтиФайлы(КаталогXML, "*", Ложь);
	
	НовыйАрхив 	= Новый ЗаписьZipФайла(ИмяАрхива);
	Для Каждого Ф Из Файлы Цикл	
		НовыйАрхив.Добавить(Ф.ПолноеИмя);
	КонецЦикла;
	НовыйАрхив.Записать();
	
	ДД 		= Новый ДвоичныеДанные(ИмяАрхива);
	Адрес 	= ПоместитьВоВременноеХранилище(ДД);
	
	УдалитьФайлы(КаталогXML);
	УдалитьФайлы(ИмяАрхива);
	
	Возврат Адрес;
	
КонецФункции

// Загружает все настройки Telegram.
//
// Параметры:
//	Адрес - Строка - адрес во временном хранилище с двоичными данными всех выгруженных 
//					 настроек Telegram. Если передано Неопределено, то произойдет загрузка настроек по умолчанию.
//	ОбновлятьСправочникБотов - Булево - обновлять или нет справочник ботов.
//
Процедура ЗагрузитьНастройки(Знач Адрес = Неопределено, Знач ПервоначальноеЗаполнение = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Адрес <> Неопределено Тогда
		ДД 	= ПолучитьИзВременногоХранилища(Адрес);	
		УдалитьИзВременногоХранилища(Адрес);
	Иначе
		ДД 	= ПолучитьОбщийМакет("Telegram");
	КонецЕсли;	
	
	ПапкаНазначения = КаталогВременныхФайлов() + "telegram" 
		+ СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "") + "\";
    УдалитьФайлы(ПапкаНазначения);
    СоздатьКаталог(ПапкаНазначения);
	
	Попытка
		Поток = ДД.ОткрытьПотокДляЧтения();
		ЧтениеАрхива = Новый ЧтениеZipФайла(Поток);
	Исключение
		ТекстОшибки = НСтр("ru = 'В файле отсутствует информация о данных настроек Telegram.'");		
		СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Для Каждого ЭлементАрхива Из ЧтениеАрхива.Элементы Цикл
        
        ИсходноеПолноеИмя		= ЭлементАрхива.ИмяБезРасширения;
		ЭтоСсылочныйТип      	= Метаданные.Справочники.Найти(ИсходноеПолноеИмя) <> Неопределено
            ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(ИсходноеПолноеИмя) <> Неопределено;
        ЭтоКонстанты			= Ложь;
        Если ЭтоСсылочныйТип = Ложь Тогда
           	ЭтоКонстанты = ИсходноеПолноеИмя = "TelegramКонстанты";
        КонецЕсли; 
        
        Если ЭтоСсылочныйТип = Ложь
            И ЭтоКонстанты = Ложь Тогда
            
            Продолжить;
            
		КонецЕсли;
		
		ЭтоСправочникБотов = ИсходноеПолноеИмя = "TelegramБоты";
		Если ПервоначальноеЗаполнение = Ложь И ЭтоСправочникБотов = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ЧтениеАрхива.Извлечь(ЭлементАрхива, ПапкаНазначения);
		ВременныйФайлXML = ПапкаНазначения + ЭлементАрхива.ПолноеИмя;
		ЧтениеXML 		 = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ВременныйФайлXML);
		// Прочитаем начало xml файла.
		ЧтениеXML.ПерейтиКСодержимому();
		
		// Прочитаем начало корневого элемента.
		ЧтениеXML.Прочитать();
		
		Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл			
			Если ЭтоСсылочныйТип Тогда					
                
                Попытка
				    // Читаем очередной элемент справочника.
				    ОбъектСправочника = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);						
				    ОбъектСправочника.ОбменДанными.Загрузка = Истина;
				    ОбъектСправочника.Записать();                	
                Исключение
                    ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка загрузки данных %1'"), ИсходноеПолноеИмя);
                КонецПопытки;
				
			ИначеЕсли ЭтоКонстанты Тогда
				
				Если ЧтениеXML.ЛокальноеИмя = "TelegramДействиеКомандаНеНайдена" Тогда
					УИД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
					Если НЕ ПустаяСтрока(УИД) Тогда
						Ссылка = Справочники.TelegramДействия.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
						Константы.TelegramДействиеКомандаНеНайдена.Установить(Ссылка);
					КонецЕсли;					
				КонецЕсли;
				
			КонецЕсли;	
		КонецЦикла;							
		ЧтениеXML.Прочитать();

	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЧтениеАрхива.Закрыть();
	Поток.Закрыть();
	
	ЧтениеXML	 = Неопределено;
	ЧтениеАрхива = Неопределено;
	Поток 		 = Неопределено;	
	
	// Очищаем временные файлы и освобождаем память.
	УдалитьФайлы(ПапкаНазначения);
		
КонецПроцедуры

// Очистка всех данных Telegram.
//
Процедура ОчиститьНастройки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

    Константы.TelegramДействиеКомандаНеНайдена.Установить(Справочники.TelegramДействия.ПустаяСсылка());
    
	ОчиститьСправочник("TelegramДействия");
	ОчиститьСправочник("TelegramКоманды");
	ОчиститьСправочник("TelegramУсловия");
	ОчиститьСправочник("TelegramКлавиатуры");
    ОчиститьСправочник("TelegramСообщениеВходящееПрисоединенныеФайлы");
    ОчиститьДокумент("TelegramСообщениеВходящее");
    ОчиститьДокумент("TelegramСообщениеИсходящее");
    ОчиститьСправочник("TelegramПользователи");
    ОчиститьПланВидовХарактеристик("TelegramПараметрыДействий");
	
	НаборЗаписей = РегистрыСведений.TelegramЧаты.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);
		
КонецПроцедуры

// Очищает справочник от элементов.
//
// Параметры:
//	ИмяСправочника - Строка - имя нужного справочника.
//
Процедура ОчиститьСправочник(Знач ИмяСправочника) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
    Если Метаданные.Справочники[ИмяСправочника].Иерархический Тогда
    	Выборка = Справочники[ИмяСправочника].ВыбратьИерархически();
    Иначе
        Выборка = Справочники[ИмяСправочника].Выбрать();
    КонецЕсли;
    
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Объект = Выборка.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Удалить();
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
	Если ИмяСправочника = "TelegramПрокси" Тогда
		НаборЗаписей = РегистрыСведений.TelegramСтатистикаОтправкиСообщений.СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Очищает документы.
//
// Параметры:
//	ИмяСправочника - Строка - имя нужного справочника.
//
Процедура ОчиститьДокумент(Знач ИмяСправочника) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Документы[ИмяСправочника].Выбрать();
    
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Объект = Выборка.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Удалить();
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Очищает план видов характеристик от элементов.
//
// Параметры:
//	ИмяПлана - Строка - имя нужного справочника.
//
Процедура ОчиститьПланВидовХарактеристик(Знач ИмяПлана) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
    Если Метаданные.ПланыВидовХарактеристик[ИмяПлана].Иерархический Тогда
    	Выборка = ПланыВидовХарактеристик[ИмяПлана].ВыбратьИерархически();
    Иначе
        Выборка = ПланыВидовХарактеристик[ИмяПлана].Выбрать();
    КонецЕсли;
    
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Объект = Выборка.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Удалить();
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.ОценкаПроизводительности
Функция ЗначениеТаймера()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		Возврат ОценкаПроизводительности.НачатьЗамерВремени();			
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

Процедура ЗаписатьЗамер(Знач КлючеваяОперация, Знач ВремяНачала)
	
	Если ВремяНачала <> Неопределено Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область Работа_с_пользователями

Функция НайтиПользователя(Знач НастройкиБота, СтруктураПользователя)
	
	НайденныйПользователь = Справочники.TelegramПользователи.НайтиПоКоду(Формат(СтруктураПользователя.id, 
		"ЧРД=; ЧРГ=; ЧН=0; ЧГ="));
	Если ЗначениеЗаполнено(НайденныйПользователь) Тогда
		Возврат НайденныйПользователь;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// СтруктураПользователя:
//	* first_name
//	* id
//	* is_bot
//	* language_code
//	* last_name
//
Функция НайтиСоздатьПользователя(Знач НастройкиБота, СтруктураПользователя)
	                                                                     
	НайденныйПользователь = Справочники.TelegramПользователи.НайтиПоКоду(Формат(СтруктураПользователя.id, 
		"ЧРД=; ЧРГ=; ЧН=0; ЧГ="));
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Обновляем данные пользователя
	Если НЕ ЗначениеЗаполнено(НайденныйПользователь) Тогда
		ПользовательОбъект              = Справочники.TelegramПользователи.СоздатьЭлемент();
        ПользовательОбъект.Активность	= НЕ НастройкиБота.ОграниченныйДоступ;
	ИначеЕсли ЗначениеЗаполнено(НайденныйПользователь.Пользователь) Тогда
		// Пробуем сопоставить пользователей (если пока нет связи).
		ПользовательОбъект = НайденныйПользователь.ПолучитьОбъект();
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
			|ГДЕ
			|	ПользователиКонтактнаяИнформация.Вид = &Вид
			|	И ПользователиКонтактнаяИнформация.Представление = &Представление";
		
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.TelegramПользователя);
		Запрос.УстановитьПараметр("Представление", ПользовательОбъект.ИмяПрофиля);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПользовательОбъект.Заблокировать();
			ПользовательОбъект.Пользователь	= Выборка.Ссылка;			
		КонецЕсли;
	Иначе
		Возврат НайденныйПользователь;
	КонецЕсли;
	
	Имя 	= "";
	Фамилия = "";
	
	ПользовательОбъект.Бот 		= СтруктураПользователя["is_bot"];
	ПользовательОбъект.Код		= Формат(СтруктураПользователя["id"], "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
	
	Если СтруктураПользователя.Свойство("first_name") Тогда
		Имя		= СтруктураПользователя["first_name"];
	КонецЕсли;
	
	Если СтруктураПользователя.Свойство("last_name") Тогда
		Фамилия	= СтруктураПользователя["last_name"];
	КонецЕсли;
	
	ПользовательОбъект.Имя		= Имя;
	ПользовательОбъект.Фамилия	= Фамилия;
	ПользовательОбъект.Наименование	= Имя + " " + Фамилия;
	
	Если СтруктураПользователя.Свойство("language_code") Тогда
		ПользовательОбъект.Язык	= СтруктураПользователя["language_code"];
	КонецЕсли;
	
	Если СтруктураПользователя.Свойство("username") Тогда
		ПользовательОбъект.ИмяПрофиля = СтруктураПользователя["username"];
	КонецЕсли;
	
	Попытка
		ПользовательОбъект.Записать();
		Возврат ПользовательОбъект.Ссылка;
	Исключение
		Если НЕ ПользовательОбъект.Ссылка.Пустая() Тогда
			Возврат ПользовательОбъект.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено)
	
	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
КонецФункции // ПолучитьОписаниеТиповЧисла()

Функция СимволUnicodeВURL(ПозицияСимволаВТаблицеЮникода)
	
	Если ПозицияСимволаВТаблицеЮникода <= 55295 Тогда
		Возврат КодироватьСтроку(Символ(ПозицияСимволаВТаблицеЮникода), СпособКодированияСтроки.КодировкаURL);
	КонецЕсли;
	
	Результат = "";
	ОсталосьРазложить = ПозицияСимволаВТаблицеЮникода;
	МассивДляОктетов = Новый Массив;
	
	Пока ОсталосьРазложить > 0 Цикл
		МассивДляОктетов.Добавить(ОсталосьРазложить % 64);
		ОсталосьРазложить = Цел(ОсталосьРазложить / 64);
	КонецЦикла;
	
	КоличествоОктетов = МассивДляОктетов.Количество();
	Если КоличествоОктетов = 3 И ПозицияСимволаВТаблицеЮникода > 65535 Тогда
		МассивДляОктетов.Добавить(ОсталосьРазложить%64);
		КоличествоОктетов = 4;
	КонецЕсли;
	
	Если КоличествоОктетов = 3 Тогда
		
		Октет = 224 + МассивДляОктетов[2];
		Результат = Результат +  ДесятичноеВURLHex(Октет);
		
		Октет = 128 + МассивДляОктетов[1];
		Результат = Результат +  ДесятичноеВURLHex(Октет);
		
		Октет = 128 + МассивДляОктетов[0];
		Результат = Результат +  ДесятичноеВURLHex(Октет);
		
	Иначе
		
		Октет = 240 + МассивДляОктетов[3];
		Результат = Результат +  ДесятичноеВURLHex(Октет);
		
		Октет = 128 + МассивДляОктетов[2];
		Результат = Результат +  ДесятичноеВURLHex(Октет);
		
		Октет = 128 + МассивДляОктетов[1];
		Результат = Результат +  ДесятичноеВURLHex(Октет);
		
		Октет = 128 + МассивДляОктетов[0];
		Результат = Результат +  ДесятичноеВURLHex(Октет);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДесятичноеВURLHex(Знач ДесятичноеЧисло)
    
	Буфер = Новый БуферДвоичныхДанных(2, ПорядокБайтов.BigEndian);
	Буфер.ЗаписатьЦелое16(0, ДесятичноеЧисло);
	Хекс = ПолучитьHexСтрокуИзБуфераДвоичныхДанных(Буфер);
	Хекс = Прав(Хекс, 2);
    
	Возврат "%" + Хекс;
    
КонецФункции

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  СтрокаПроверки          - Строка - Строка для проверки
//  УчитыватьЛидирующиеНули - Булево - Флаг учета лидирующих нулей, если Истина, то ведущие нули пропускаются
//  УчитыватьПробелы        - Булево - Флаг учета пробелов, если Истина, то пробелы при проверке игнорируются
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
		
	Если ПустаяСтрока(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не УчитыватьЛидирующиеНули Тогда
		Позиция = 1;
		// Взятие символа за границей строки возвращает пустую строку
		Пока Сред(СтрокаПроверки, Позиция, 1) = "0" Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, Позиция);
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
		СтрЗаменить( СтрЗаменить( 
		СтрокаПроверки, 
			"0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

Функция ДобавитьКОписанию(Знач Параметр, Знач ТипПараметра, Знач Комментарий)
	
	Возврат "// " + Параметр + " - " + ТипПараметра + " - " + Комментарий + Символы.ПС;
	
КонецФункции

#Область Выгрузка_загрузка_данных

Процедура СериализоватьОбъектыПоЗапросу(Знач ТекстЗапроса, Знач ИмяФайла)
    	
    Запись = Новый ЗаписьXML;
    Запись.УстановитьСтроку();
    
    // Записываем объявление xml файла: <?xml version="1.0"?>
    Запись.ЗаписатьОбъявлениеXML();
    
    // Записываем корневой элемент, по спецификации xml он может быть только один, назовем его "Данные".
    Запись.ЗаписатьНачалоЭлемента("Данные");
    
    Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.1/data/enterprise/current-config");
    
    // Пространства имен остальные префиксы
    Запись.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
    Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
    
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
    
	Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
        
	    // Вместо этого кода в боевой реализации выгрузки будет создание ОбъектаXDTO и его сериализация.
	    // Через ФабрикуXDTO и загруженные в нее схемы конфигурации приемника
	    СериализаторXDTO.ЗаписатьXML(Запись, Выборка.Ссылка.ПолучитьОбъект());
		        
    КонецЦикла;
    
	// Записываем конец элемента Страницы
	Запись.ЗаписатьКонецЭлемента();	
	
	// Записать все в файл НомерПорции.xml.
	// Покажем что получилось.
	Текст = Запись.Закрыть();
    
	МойXML 	= Новый ТекстовыйДокумент; 
	МойXML.ДобавитьСтроку(Текст);
	МойXML.Записать(ИмяФайла);
    
КонецПроцедуры

#КонецОбласти
 
#КонецОбласти
