////////////////////////////////////////////////////////////////////////////////
// Подсистема: Правила событий
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПодпискиНаСобытия

// Вызывается перед записью элементов справочников в информационную базу.
//
// Параметры:
//  Источник - Объект - записываемый объект ИБ;
//  Отказ    - Булево - признак отказа от записи объекта.
//
Процедура ПередЗаписьюСправочникаПравилаСобытий(Источник, Отказ) Экспорт
	
	мИсточникМетаданныеПолноеИмя = Источник.Метаданные().ПолноеИмя();	
	Если Источник.ОбменДанными.Загрузка 
		ИЛИ Источник.ДополнительныеСвойства.Свойство("НеВыполнятьПравилаСобытий") 
		ИЛИ ПравилаСобытийПовтИсп.ОбъектИсключениеПодсистемыПравилСобытий(мИсточникМетаданныеПолноеИмя) 
		ИЛИ НЕ ПравилаСобытийПовтИсп.ОбъектИспользуетсяПодсистемойПравилСобытий(мИсточникМетаданныеПолноеИмя) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Источник.ДополнительныеСвойства.Вставить("ЗначениеТаймера", ЗначениеТаймера());
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	
	
	СтруктураПравилаСобытия = Новый Структура;
	СтруктураПравилаСобытия.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	Если НЕ Источник.ЭтоНовый() Тогда
		ИсточникОбъект 		 = Источник.Ссылка.ПолучитьОбъект();
		ИсточникПередЗаписью = СериализоватьОбъект(ИсточникОбъект);
		СтруктураПравилаСобытия.Вставить("ИсточникПередЗаписью", ИсточникПередЗаписью);
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("СтруктураПравилаСобытия", СтруктураПравилаСобытия);
	
КонецПроцедуры

// Вызывается перед записью документов в информационную базу.
//
// Параметры:
//  Источник - Объект - записываемый объект ИБ;
//  Отказ    - Булево - признак отказа от записи объекта.
//  РежимЗаписи - РежимЗаписиДокумента - параметр, передаваемый в подписку на событие ПередЗаписью,
//                    когда Источник это ДокументОбъект.
//
//  РежимПроведения - РежимПроведенияДокумента - параметр, передаваемый в подписку на событие ПередЗаписью,
//                    когда Источник это ДокументОбъект.
//
Процедура ПередЗаписьюДокументаПравилаСобытий(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	мИсточникМетаданныеПолноеИмя = Источник.Метаданные().ПолноеИмя();	
	Если Источник.ОбменДанными.Загрузка 
		ИЛИ Источник.ДополнительныеСвойства.Свойство("НеВыполнятьПравилаСобытий") 
		ИЛИ ПравилаСобытийПовтИсп.ОбъектИсключениеПодсистемыПравилСобытий(мИсточникМетаданныеПолноеИмя)
		ИЛИ НЕ ПравилаСобытийПовтИсп.ОбъектИспользуетсяПодсистемойПравилСобытий(мИсточникМетаданныеПолноеИмя) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Источник.ДополнительныеСвойства.Вставить("ЗначениеТаймера", ЗначениеТаймера());
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	СтруктураПравилаСобытия = Новый Структура;
	СтруктураПравилаСобытия.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	
	Если НЕ Источник.ЭтоНовый() Тогда
		ИсточникОбъект 		 = Источник.Ссылка.ПолучитьОбъект();
		ИсточникПередЗаписью = СериализоватьОбъект(ИсточникОбъект);
		СтруктураПравилаСобытия.Вставить("ИсточникПередЗаписью", ИсточникПередЗаписью);
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("СтруктураПравилаСобытия", СтруктураПравилаСобытия);
	
КонецПроцедуры

// Вызывается перед записью регистра сведений в информационную базу.
//
// Параметры:
//  Источник - Объект - записываемый объект ИБ;
//  Отказ    - Булево - признак отказа от записи объекта.
//  Замещение - Булео - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ПередЗаписьюРегистраСведенийПравилаСобытий(Источник, Отказ, Замещение) Экспорт
	
	мИсточникМетаданныеПолноеИмя = Источник.Метаданные().ПолноеИмя();	
	Если Источник.ОбменДанными.Загрузка 
		ИЛИ Источник.ДополнительныеСвойства.Свойство("НеВыполнятьПравилаСобытий") 
		ИЛИ ПравилаСобытийПовтИсп.ОбъектИсключениеПодсистемыПравилСобытий(мИсточникМетаданныеПолноеИмя)
		ИЛИ НЕ ПравилаСобытийПовтИсп.ОбъектИспользуетсяПодсистемойПравилСобытий(мИсточникМетаданныеПолноеИмя) Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Источник.ДополнительныеСвойства.Вставить("ЗначениеТаймера", ЗначениеТаймера());
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	СтруктураПравилаСобытия = Новый Структура;
	СтруктураПравилаСобытия.Вставить("ЭтоНовый", Истина);
	Источник.ДополнительныеСвойства.Вставить("СтруктураПравилаСобытия", СтруктураПравилаСобытия);
	
КонецПроцедуры

// Вызывается при записи объекта в информационную базу.
//
// Параметры:
//  Источник - Объект - записываемый объект ИБ;
//  Отказ    - Булево - признак отказа от записи объекта.
//
Процедура ПриЗаписиОбъектаПравилаСобытий(Источник, Отказ) Экспорт
	
	мИсточникМетаданныеПолноеИмя = Источник.Метаданные().ПолноеИмя();
	Если Источник.ОбменДанными.Загрузка 
		ИЛИ Источник.ДополнительныеСвойства.Свойство("НеВыполнятьПравилаСобытий")
		ИЛИ ПравилаСобытийПовтИсп.ОбъектИсключениеПодсистемыПравилСобытий(мИсточникМетаданныеПолноеИмя)
		ИЛИ НЕ ПравилаСобытийПовтИсп.ОбъектИспользуетсяПодсистемойПравилСобытий(мИсточникМетаданныеПолноеИмя) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПравилаСобытия = Неопределено;
	Если Не Источник.ДополнительныеСвойства.Свойство("СтруктураПравилаСобытия", СтруктураПравилаСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Восстанавливаем структуру.
	ЭтоНовый = СтруктураПравилаСобытия.ЭтоНовый;
	Если ЭтоНовый Тогда
		СтруктураПравилаСобытия.Вставить("ИсточникПередЗаписью", Неопределено);
	Иначе
		Если ТипЗнч(СтруктураПравилаСобытия.ИсточникПередЗаписью) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		//ИсточникПередЗаписью = ВосстановитьОбъект(СтруктураПравилаСобытия.ИсточникПередЗаписью);
	КонецЕсли;
	
	//СтруктураПравилаСобытия.Вставить("ИсточникПередЗаписью", ИсточникПередЗаписью);
	
	мПеречисленияТипУсловийПравилСобытий 	= Перечисления.ТипУсловийПравилСобытий;	
	мПеречислениеТипыПравилСобытий	= Перечисления.ТипыПравилСобытий;
	мИсточникСсылка					= Источник.Ссылка;
	мТипЗнчИсточник					= ТипЗнч(Источник);
	МенеджерОбъекта					= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(мИсточникМетаданныеПолноеИмя);
	РегистрацияДляПодсистемыМетрик	= Ложь;
	
	МассивПравилКВыполнению			= Новый Массив;	
	
	// Проверка.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаСобытий.Ссылка КАК Ссылка,
		|	ПравилаСобытий.ТипУсловия КАК ТипУсловия,
		|	ПравилаСобытий.ПроверкаРеквизитовОбъектаИмяОбъекта КАК ПроверкаРеквизитовОбъектаИмяОбъекта,
		|	ПравилаСобытий.КодУсловия КАК КодУсловия,
		|	ПравилаСобытий.ПроверкаРеквизитовОбъектаИмяУсловия КАК ПроверкаРеквизитовОбъектаИмяУсловия,
		|	ПравилаСобытий.ПроизвольныйАлгоритмИмяОбъекта КАК ПроизвольныйАлгоритмИмяОбъекта,
		|	ПравилаСобытий.ПроверкаРеквизитовОбъектаУсловия КАК ПроверкаРеквизитовОбъектаУсловия,
		|	ПравилаСобытий.ПрименитьОстальныеПравила КАК ПрименитьОстальныеПравила,
		|	ПравилаСобытий.ТипПравила КАК ТипПравила,
		|	ПравилаСобытий.ЧасовДоУсловия КАК ЧасовДоУсловия,
		|	ПравилаСобытий.Представление КАК Представление,
		|	ПравилаСобытий.Наименование КАК Наименование,
		|	ПравилаСобытий.Приоритет КАК Приоритет,
		|	ПравилаСобытий.РасчетМетрикИмяОбъекта КАК РасчетМетрикИмяОбъекта,
		|	ПравилаСобытий.ПроверкаИспользуетСКД КАК ПроверкаИспользуетСКД
		|ИЗ
		|	Справочник.ПравилаСобытий КАК ПравилаСобытий
		|ГДЕ
		|	ПравилаСобытий.Использовать = ИСТИНА
		|	И (ПравилаСобытий.ТипПравила = ЗНАЧЕНИЕ(Перечисление.ТипыПравилСобытий.ИзменениеОбъекта)
		|			ИЛИ ПравилаСобытий.ТипПравила = ЗНАЧЕНИЕ(Перечисление.ТипыПравилСобытий.РасчетМетрик))
		|	И ПравилаСобытий.ЭтоГруппа = ЛОЖЬ
		|	И ПравилаСобытий.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПравилаСобытий.Приоритет УБЫВ";
			
	ПравилоВыборка = Запрос.Выполнить().Выбрать();
	
	Пока ПравилоВыборка.Следующий() Цикл
		
		Результат 	= Ложь;
		
		Если ПравилоВыборка.ТипПравила = мПеречислениеТипыПравилСобытий.ИзменениеОбъекта Тогда
			
			Если ПравилоВыборка.ТипУсловия = мПеречисленияТипУсловийПравилСобытий.ПроверкаРеквизитовОбъекта Тогда
							
				Если мТипЗнчИсточник = Тип("СправочникОбъект.Комментарии") Тогда // Комментарии.
					ВладелецКомментария = Источник.ВладелецКомментария;
					Если ЗначениеЗаполнено(ВладелецКомментария) Тогда
						Если (ТипЗнч(ВладелецКомментария) = Тип("ДокументСсылка.Задание") 
							И ПравилоВыборка.ПроверкаРеквизитовОбъектаИмяОбъекта = "Документ.Задание")
							ИЛИ (ТипЗнч(ВладелецКомментария) = Тип("СправочникСсылка.СтатьиБазыЗнаний")
							И ПравилоВыборка.ПроверкаРеквизитовОбъектаИмяОбъекта = "Справочник.СтатьиБазыЗнаний") Тогда
							ИсточникСКД = ВладелецКомментария;
						Иначе
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;	
				Иначе				
					// Проверяем, что это не для нашего Источника.
					Если ПравилоВыборка.ПроверкаРеквизитовОбъектаИмяОбъекта <> мИсточникМетаданныеПолноеИмя Тогда
						Продолжить;
					КонецЕсли;
					
					ИсточникСКД = мИсточникСсылка;
				КонецЕсли;
				
				// Осуществляем проверку в модуле менеджера.			
				Попытка
					Результат = МенеджерОбъекта.ПроверкаУсловияПравилаСобытия(ПравилоВыборка, СтруктураПравилаСобытия, 
						Источник);
				Исключение
					Результат = Ложь;
				КонецПопытки;	
				
				// Накладываем фильтр из реквизитов, если прошли первое условие.
				Если Результат = Истина И ПравилоВыборка.ПроверкаИспользуетСКД = Истина Тогда
					
					НастройкиСКД = ПравилоВыборка.ПроверкаРеквизитовОбъектаУсловия.Получить();
					Если НастройкиСКД <> Неопределено Тогда
						
						СКД = Справочники.ПравилаСобытий.ПолучитьПравилаОтбораСобытий(
							ПравилоВыборка.ПроверкаРеквизитовОбъектаИмяОбъекта);
						
						КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
						КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
						КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
						КомпоновщикНастроек.Восстановить();
						КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Основание", 
							ИсточникСКД);
						
						КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
						МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СКД,
							КомпоновщикНастроек.ПолучитьНастройки(),,,
							Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
						
						ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
						ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Ложь);
						
						РезультатСКД 		= Новый ТаблицаЗначений;
						ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
						ПроцессорВывода.УстановитьОбъект(РезультатСКД);
						ПроцессорВывода.Вывести(ПроцессорКомпоновки);
						
						Если РезультатСКД.Количество() = 0 Тогда
							// Источник не прошел критерий отбора правила, 
							// никаких действий по нему выполнять не требуется.
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ПравилоВыборка.ТипУсловия = мПеречисленияТипУсловийПравилСобытий.ПроизвольныйАлгоритм Тогда
				
				// Отсекаем по имени.
				Если ПравилоВыборка.ПроизвольныйАлгоритмИмяОбъекта <> мИсточникМетаданныеПолноеИмя Тогда
					Продолжить;
				КонецЕсли;
				
				// После проверок в переменной Результат необходимо присвоить Истина.
				Попытка
					Выполнить(ПравилоВыборка.КодУсловия);
				Исключение
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'Ошибка проверки условия для правила %1: %2'"), 
							ПравилоВыборка.Представление, 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
					Продолжить;
				КонецПопытки;
				
			КонецЕсли;
			
		//===============================================================
		// Для расчета метрик.
		//===============================================================
		ИначеЕсли РегистрацияДляПодсистемыМетрик = Ложь 
			И ПолучитьФункциональнуюОпцию("ИспользоватьМетрики") 
			И ПравилоВыборка.ТипПравила = мПеречислениеТипыПравилСобытий.РасчетМетрик Тогда
			
			Если ПравилоВыборка.РасчетМетрикИмяОбъекта = мИсточникМетаданныеПолноеИмя 
				И Источник.ПометкаУдаления = Ложь Тогда
				
				УзелОбменаДляРегистрацииВсехДанных = МетрикиПовтИсп.ПолучитьУзелДляРегистрацииДанных();
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, Источник.Ссылка);
				РегистрацияДляПодсистемыМетрик = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Все проверки пройдены, условия выполнены, выполним действия.
		Если Результат = Истина Тогда
			
			МассивПравилКВыполнению.Добавить(ПравилоВыборка.Ссылка);
			
			// Прерываем правило, если стоит флаг.
			Если ПравилоВыборка.ПрименитьОстальныеПравила = Ложь Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЕсли;
				
	КонецЦикла;
	
	// Выполняем действия для найденных правил.
	Если МассивПравилКВыполнению.Количество() > 0 Тогда
		ВыполнитьДействияПравила(МассивПравилКВыполнению, Источник, СтруктураПравилаСобытия, Отказ);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = 0;
	Если Источник.ДополнительныеСвойства.Свойство("ЗначениеТаймера", ЗначениеТаймера) Тогда
		ЗаписатьЗамер("ПравилаСобытийВыполнение", ЗначениеТаймера);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
		
КонецПроцедуры

// Вызывается при записи регистра сведений в информационную базу.
//
// Параметры:
//  Источник - Объект - записываемый объект ИБ;
//  Отказ    - Булево - признак отказа от записи объекта.
//  Замещение - Булео - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ПриЗаписиРегистраСведенийПравилаСобытий(Источник, Отказ, Замещение) Экспорт
	
	мИсточникМетаданныеПолноеИмя = Источник.Метаданные().ПолноеИмя();	
	Если Источник.ОбменДанными.Загрузка 
		ИЛИ Источник.ДополнительныеСвойства.Свойство("НеВыполнятьПравилаСобытий") 
		ИЛИ ПравилаСобытийПовтИсп.ОбъектИсключениеПодсистемыПравилСобытий(мИсточникМетаданныеПолноеИмя)
		ИЛИ НЕ ПравилаСобытийПовтИсп.ОбъектИспользуетсяПодсистемойПравилСобытий(мИсточникМетаданныеПолноеИмя) Тогда
		Возврат;
	КонецЕсли;
	
	мПеречисленияТипУсловийПравилСобытий 	= Перечисления.ТипУсловийПравилСобытий;
	
	МассивПравилКВыполнению					= Новый Массив;
	
	// Проверка.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаСобытий.Ссылка КАК Ссылка,
		|	ПравилаСобытий.ТипУсловия КАК ТипУсловия,
		|	ПравилаСобытий.КодУсловия КАК КодУсловия,
		|	ПравилаСобытий.ПроизвольныйАлгоритмИмяОбъекта КАК ПроизвольныйАлгоритмИмяОбъекта,
		|	ПравилаСобытий.ПрименитьОстальныеПравила КАК ПрименитьОстальныеПравила,
		|	ПравилаСобытий.Представление КАК Представление
		|ИЗ
		|	Справочник.ПравилаСобытий КАК ПравилаСобытий
		|ГДЕ
		|	ПравилаСобытий.ПометкаУдаления = ЛОЖЬ
		|	И ПравилаСобытий.Использовать = ИСТИНА
		|	И ПравилаСобытий.ТипПравила = ЗНАЧЕНИЕ(Перечисление.ТипыПравилСобытий.ИзменениеОбъекта)
		|	И ПравилаСобытий.ЭтоГруппа = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПравилаСобытий.Приоритет УБЫВ";
	
	ПравилоВыборка = Запрос.Выполнить().Выбрать();
	Пока ПравилоВыборка.Следующий() Цикл
		
		Если ПравилоВыборка.ТипУсловия = мПеречисленияТипУсловийПравилСобытий.ПроизвольныйАлгоритм Тогда
			
			// Отсекаем по имени.
			Если ПравилоВыборка.ПроизвольныйАлгоритмИмяОбъекта <> мИсточникМетаданныеПолноеИмя Тогда
				Продолжить;
			КонецЕсли;
			
			Результат = Ложь;
			
			// После проверок в переменной Результат необходимо присвоить Истина.
			Попытка
				Выполнить(ПравилоВыборка.КодУсловия);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Ошибка проверки условия для правила %1: %2'"), 
						ПравилоВыборка.Представление, 
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
				Продолжить;
			КонецПопытки;	
			
		КонецЕсли;	
		
		// Все проверки пройдены, условия выполнены, выполним действия.
		Если Результат = Истина Тогда
						
			МассивПравилКВыполнению.Добавить(ПравилоВыборка.Ссылка);
			
			// Прерываем правило, если стоит флаг.
			Если ПравилоВыборка.ПрименитьОстальныеПравила = Ложь Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПравилКВыполнению.Количество() > 0 Тогда
		ВыполнитьДействияПравила(МассивПравилКВыполнению, Источник, , Отказ);
	КонецЕсли;	
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = 0;
	Если Источник.ДополнительныеСвойства.Свойство("ЗначениеТаймера", ЗначениеТаймера) Тогда
		ЗаписатьЗамер("ПравилаСобытийВыполнение", ЗначениеТаймера);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

// Выполняет действия правил событий.
//
// Параметры:
//	Правила - Массив, СправочникСсылка.ПравилаСобытий - какие действия нужно выполнить.
//	Источник - СправочникОбъект, ДокументОбъект, РегистрСведенийНаборЗаписей - для какого объекта выполняются правила.
//	СтруктураПравилаСобытия - Структура - объект до, ЭтоНовый и т.д.
//	Отказ - Булево - возврат Истина, если надо не допустить запись объекта.
//
Процедура ВыполнитьДействияПравила(Знач Правила, Источник = Неопределено, СтруктураПравилаСобытия = Неопределено, 
	Отказ) Экспорт
	
	мПеречисленияТипДействийПравилСобытий = Перечисления.ТипДействийПравилСобытий;
	мЭтоФоновоеЗадание = ЭтоФоновоеЗадание();
	
	Если ТипЗнч(Правила) <> Тип("Массив") Тогда
		МассивПравилКВыполнению = Новый Массив;
		МассивПравилКВыполнению.Добавить(Правила);
	Иначе
		МассивПравилКВыполнению = Правила;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаСобытийДействия.Действие КАК Действие,
		|	ДействияПравилСобытий.ТипДействия КАК ТипДействия,
		|	ПравилаСобытий.Ссылка КАК Ссылка,
		|	ПравилаСобытий.ТипУсловия КАК ТипУсловия,
		|	ПравилаСобытий.ПроверкаРеквизитовОбъектаИмяОбъекта КАК ПроверкаРеквизитовОбъектаИмяОбъекта,
		|	ПравилаСобытий.КодУсловия КАК КодУсловия,
		|	ПравилаСобытий.ПроверкаРеквизитовОбъектаИмяУсловия КАК ПроверкаРеквизитовОбъектаИмяУсловия,
		|	ПравилаСобытий.ПроизвольныйАлгоритмИмяОбъекта КАК ПроизвольныйАлгоритмИмяОбъекта,
		|	ПравилаСобытий.ТипПравила КАК ТипПравила,
		|	ПравилаСобытий.ЧасовДоУсловия КАК ЧасовДоУсловия,
		|	ПравилаСобытий.Представление КАК Представление,
		|	ПравилаСобытий.Наименование КАК Наименование,
		|	ПравилаСобытий.Приоритет КАК Приоритет,
		|	ДействияПравилСобытий.КодДействия КАК КодДействия,
		|	ДействияПравилСобытий.ПолноеИмяОснования КАК ПолноеИмяОснования,
		|	ДействияПравилСобытий.ДелаАнализТемы КАК ДелаАнализТемы,
		|	ДействияПравилСобытий.ДелаПользователь КАК ДелаПользователь,
		|	ДействияПравилСобытий.Влияние КАК Влияние,
		|	ДействияПравилСобытий.Исполнитель КАК Исполнитель,
		|	ДействияПравилСобытий.Организация КАК Организация,
		|	ДействияПравилСобытий.ПриоритетОпределенияКлиентовИИнициаторов КАК ПриоритетОпределенияКлиентовИИнициаторов,
		|	ДействияПравилСобытий.Приоритет КАК ПриоритетЗадания,
		|	ДействияПравилСобытий.Процесс КАК Процесс,
		|	ДействияПравилСобытий.Сервис КАК Сервис,
		|	ДействияПравилСобытий.Проект КАК Проект,
		|	ДействияПравилСобытий.Срочность КАК Срочность,
		|	ДействияПравилСобытий.ТипПроцесса КАК ТипПроцесса,
		|	ДействияПравилСобытий.Услуга КАК Услуга,
		|	ДействияПравилСобытий.АвтоназначениеСУчетомМестоположения КАК АвтоназначениеСУчетомМестоположения,
		|	ДействияПравилСобытий.АвтоназначениеСУчетомКомпетенций КАК АвтоназначениеСУчетомКомпетенций,
		|	ДействияПравилСобытий.АвтоназначениеСУчетомГрафиковРабочегоВремени КАК АвтоназначениеСУчетомГрафиковРабочегоВремени,
		|	ДействияПравилСобытий.ПравилоАвтоназначенияИсполнителей КАК ПравилоАвтоназначенияИсполнителей,
		|	ДействияПравилСобытий.АвтоназначениеЗначение КАК АвтоназначениеЗначение,
		|	ДействияПравилСобытий.ВнешняяОбработка КАК ВнешняяОбработка,
		|	ДействияПравилСобытий.ВыполнятьВФоне КАК ВыполнятьВФоне,
		|	ДействияПравилСобытий.Наименование КАК НаименованиеДействия,
		|	ДействияПравилСобытий.Значения.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Реквизит КАК Реквизит,
		|		Значение КАК Значение
		|	) КАК Значения,
		|	ДействияПравилСобытий.ОбязательныеРеквизиты.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Реквизит КАК Реквизит,
		|		СтрокаСообщения КАК СтрокаСообщения
		|	) КАК ОбязательныеРеквизиты,
		|	ДействияПравилСобытий.ПолучателиОповещений.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		НапоминаниеВариантЗаполнения КАК НапоминаниеВариантЗаполнения,
		|		НапоминаниеЗначение КАК НапоминаниеЗначение,
		|		ПолучательВариантЗаполнения КАК ПолучательВариантЗаполнения,
		|		ПолучательЗначение КАК ПолучательЗначение,
		|		УчетнаяЗаписьВариантЗаполнения КАК УчетнаяЗаписьВариантЗаполнения,
		|		УчетнаяЗаписьЗначение КАК УчетнаяЗаписьЗначение,
		|		TelegramБот КАК TelegramБот,
		|		ШаблонОформления КАК ШаблонОформления,
		|		ШаблонСообщения КАК ШаблонСообщения
		|	) КАК ПолучателиОповещений,
		|	ДействияПравилСобытий.Компетенции.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Компетенция КАК Компетенция
		|	) КАК Компетенции
		|ИЗ
		|	Справочник.ПравилаСобытий.Действия КАК ПравилаСобытийДействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаСобытий КАК ПравилаСобытий
		|		ПО ПравилаСобытийДействия.Ссылка = ПравилаСобытий.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДействияПравилСобытий КАК ДействияПравилСобытий
		|		ПО ПравилаСобытийДействия.Действие = ДействияПравилСобытий.Ссылка
		|ГДЕ
		|	ПравилаСобытийДействия.Ссылка В(&МассивПравилКВыполнению)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ,
		|	ПравилаСобытийДействия.НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивПравилКВыполнению", МассивПравилКВыполнению);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
    СтруктураДанных = Новый Структура;
    Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
        СтруктураДанных.Вставить(Колонка.Имя, Неопределено);
	КонецЦикла;
	
	ПравилоВыборка = РезультатЗапроса.Выбрать();
	Пока ПравилоВыборка.Следующий() Цикл
		
		ТипДействия = ПравилоВыборка.ТипДействия;
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ПравилоВыборка, ,
			"ПолучателиОповещений, Компетенции, Значения, ОбязательныеРеквизиты");
		Если НЕ ПравилоВыборка.ПолучателиОповещений.Пустой() Тогда
			СтруктураДанных.ПолучателиОповещений = ПравилоВыборка.ПолучателиОповещений.Выгрузить();
		Иначе
			СтруктураДанных.ПолучателиОповещений = Неопределено;
		КонецЕсли;
		Если НЕ ПравилоВыборка.Компетенции.Пустой() Тогда
			СтруктураДанных.Компетенции = ПравилоВыборка.Компетенции.Выгрузить();
		Иначе
			СтруктураДанных.Компетенции = Неопределено;
		КонецЕсли;
		Если НЕ ПравилоВыборка.Значения.Пустой() Тогда
			СтруктураДанных.Значения = ПравилоВыборка.Значения.Выгрузить();
		Иначе
			СтруктураДанных.Значения = Неопределено;
		КонецЕсли;		
		Если НЕ ПравилоВыборка.ОбязательныеРеквизиты.Пустой() Тогда
			СтруктураДанных.ОбязательныеРеквизиты = ПравилоВыборка.ОбязательныеРеквизиты.Выгрузить();
		Иначе
			СтруктураДанных.ОбязательныеРеквизиты = Неопределено;
		КонецЕсли;		
		
		#Если ВнешнееСоединение Тогда
		ВыполнятьВФоне = Ложь;	
		#Иначе
		// Если запуск из фонового задания или регламентного, то не выполняем в фоне (все и так выполняется в фоне).
		ВыполнятьВФоне = ?(мЭтоФоновоеЗадание, Ложь, ПравилоВыборка.ВыполнятьВФоне);
		#КонецЕсли
		
		Если ТипДействия = мПеречисленияТипДействийПравилСобытий.ОповещениеПоEmail 
			ИЛИ ТипДействия = мПеречисленияТипДействийПравилСобытий.ОповещениеTelegram
			ИЛИ ТипДействия = мПеречисленияТипДействийПравилСобытий.ОповещениеПоSMS
			ИЛИ ТипДействия = мПеречисленияТипДействийПравилСобытий.СоздатьНапоминание	Тогда

			Если ВыполнятьВФоне Тогда
				ДействиеОтправкаОповещенияВФоне(СтруктураДанных, Источник, СтруктураПравилаСобытия);
			Иначе
				ДействиеОтправкаОповещения(СтруктураДанных, Источник, СтруктураПравилаСобытия);
			КонецЕсли;
			
		ИначеЕсли ТипДействия = мПеречисленияТипДействийПравилСобытий.УстановкаРеквизитовОбъекта Тогда
			
			ДействиеУстановкаРеквизитовОбъекта(СтруктураДанных, Источник);
			
		ИначеЕсли ТипДействия = мПеречисленияТипДействийПравилСобытий.ПроверкаОбязательныхРеквизитов Тогда
			
			ДействиеПроверкаОбязательныхРеквизитов(СтруктураДанных, Источник, Отказ);
			Источник.ДополнительныеСвойства.Вставить("ПравилаСобытийОтказ", Отказ);
			Если Отказ = Истина Тогда
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ТипДействия = мПеречисленияТипДействийПравилСобытий.СоздатьЗаданиеИлиКомментарийЗадания Тогда
			
			ДействиеСоздатьЗаданиеИлиКомментарийЗадания(СтруктураДанных, Источник);
			
		ИначеЕсли ТипДействия = мПеречисленияТипДействийПравилСобытий.СоздатьДело Тогда
			
			ДействиеСоздатьДело(СтруктураДанных, Источник);
			
		ИначеЕсли ТипДействия = мПеречисленияТипДействийПравилСобытий.АвтоназначениеИсполнителя Тогда
			
			ДействиеАвтоназначениеИсполнителя(СтруктураДанных, Источник);
			
		ИначеЕсли ТипДействия = мПеречисленияТипДействийПравилСобытий.ПроизвольныйАлгоритм Тогда
			
			Если ВыполнятьВФоне Тогда
				ДействиеПроизвольныйАлгоритмВФоне(СтруктураДанных, Источник);
			Иначе
				ДействиеПроизвольныйАлгоритм(СтруктураДанных, Источник, Отказ);
				Источник.ДополнительныеСвойства.Вставить("ПравилаСобытийОтказ", Отказ);
				Если Отказ = Истина Тогда
					Возврат;
				КонецЕсли;	
			КонецЕсли;

		ИначеЕсли ТипДействия = мПеречисленияТипДействийПравилСобытий.ВыполнениеОбработки Тогда
			
			Если ВыполнятьВФоне Тогда
				ДействиеВыполнениеОбработкиВФоне(СтруктураДанных, Источник);
			Иначе
				ДействиеВыполнениеОбработки(СтруктураДанных, Источник, Отказ);
				Источник.ДополнительныеСвойства.Вставить("ПравилаСобытийОтказ", Отказ);
				Если Отказ = Истина Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Выполняет проверку правил по расписанию (регламентному заданию).
//
Процедура ПроверкаВыполнениеПравилСобытий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = ЗначениеТаймера();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПроверкаВыполнениеПравилСобытий);
	
	ДатаОкончанияПроверки = ТекущаяДатаСеанса();
	
	// Определение даты с предыдущего запуска.	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПоследнийЗапускПроверкиВыполненияПравилСобытий.ДатаПоследнегоЗапуска КАК ДатаПоследнегоЗапуска
		|ИЗ
		|	РегистрСведений.ПоследнийЗапускПроверкиВыполненияПравилСобытий КАК ПоследнийЗапускПроверкиВыполненияПравилСобытий
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПоследнегоЗапуска УБЫВ";
	
	РезультатЗапроса 	   = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДатаНачалаПроверки = ВыборкаДетальныеЗаписи.ДатаПоследнегоЗапуска;
	Иначе
		ДатаНачалаПроверки = ДатаОкончанияПроверки;
	КонецЕсли;
	
	// Запишем выполнение.
	МенеджерЗаписи = РегистрыСведений.ПоследнийЗапускПроверкиВыполненияПравилСобытий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаПоследнегоЗапуска = ДатаОкончанияПроверки;
	МенеджерЗаписи.Записать(Истина);	
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Начало регламентной проверки правил событий. Интервал проверки (%1 - %2)'"),
			ДатаНачалаПроверки,
			ДатаОкончанияПроверки);
			
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Правила событий'"), УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
	РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(,
		НСтр("ru = 'Начало регламентной проверки правил событий.'"),,
		ДатаОкончанияПроверки,
		ТекстСообщения,
		Перечисления.ТипСобытияЖурналаПравилВыполнения.СтартПроверкиВыполнения);	
	
	// Удаление старых записей.
	СрокХраненияЗаписей = Константы.СрокХраненияЗаписейЖурналаПравилВыполненияСобытий.Получить();
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВыполнениеПравилСобытий.ДатаВыполнения
		|ИЗ
		|	РегистрСведений.ВыполнениеПравилСобытий КАК ВыполнениеПравилСобытий
		|ГДЕ
		|	ВыполнениеПравилСобытий.ДатаВыполнения < &ДатаВыполнения";
	
	Запрос.УстановитьПараметр("ДатаВыполнения", НачалоДня(ДатаОкончанияПроверки) - СрокХраненияЗаписей * 86400);
	РезультатЗапроса 	   = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ВыполнениеПравилСобытий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДатаВыполнения.Установить(ВыборкаДетальныеЗаписи.ДатаВыполнения);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	//@skip-warning
	МассивПравилКВыполнению	= Новый Массив;	
	
	// Проверим правила.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаСобытий.Ссылка КАК Ссылка,
		|	ПравилаСобытий.ТипУсловия КАК ТипУсловия,
		|	ПравилаСобытий.ПроверкаРеквизитовОбъектаИмяОбъекта КАК ПроверкаРеквизитовОбъектаИмяОбъекта,
		|	ПравилаСобытий.КодУсловия КАК КодУсловия,
		|	ПравилаСобытий.ПроверкаРеквизитовОбъектаИмяУсловия КАК ПроверкаРеквизитовОбъектаИмяУсловия,
		|	ПравилаСобытий.ПроизвольныйАлгоритмИмяОбъекта КАК ПроизвольныйАлгоритмИмяОбъекта,
		|	ПравилаСобытий.ПроверкаРеквизитовОбъектаУсловия КАК ПроверкаРеквизитовОбъектаУсловия,		
		|	ПравилаСобытий.ПрименитьОстальныеПравила КАК ПрименитьОстальныеПравила,		
		|	ПравилаСобытий.ТипПравила КАК ТипПравила,
		|	ПравилаСобытий.ЧасовДоУсловия КАК ЧасовДоУсловия,
		|	ПравилаСобытий.Представление КАК Представление,
		|	ПравилаСобытий.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПравилаСобытий КАК ПравилаСобытий
		|ГДЕ
		|	ПравилаСобытий.Использовать = ИСТИНА
		|	И ПравилаСобытий.ТипПравила = ЗНАЧЕНИЕ(Перечисление.ТипыПравилСобытий.ПериодическоеСобытие)
		|	И ПравилаСобытий.ЭтоГруппа = ЛОЖЬ
		|	И ПравилаСобытий.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПравилаСобытий.Приоритет УБЫВ";
		
	ПравилоВыборка = Запрос.Выполнить().Выбрать();
	Пока ПравилоВыборка.Следующий() Цикл
		
		Правило   = ПравилоВыборка.Ссылка;
		Результат = Ложь;
				
		// Это повторяющееся событие проверим условия.
		Если ПравилоВыборка.ТипУсловия = Перечисления.ТипУсловийПравилСобытий.ПроизвольныйАлгоритм Тогда
			
			// После выполнения в переменной Результат должно быть Истина или Ложь. 
			Попытка
				Выполнить(ПравилоВыборка.КодУсловия);
			Исключение
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка проверки условия для правила %1: %2'"), 
					ПравилоВыборка.Представление, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Правила событий'"), 
					УровеньЖурналаРегистрации.Ошибка, 
					Метаданные.Справочники.ПравилаСобытий, 
					ТекстОшибки);
				РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(ПравилоВыборка.Ссылка,
					НСтр("ru = 'Ошибка проверки условия правила.'"),
					,
					ДатаОкончанияПроверки,
					ТекстОшибки,
					Перечисления.ТипСобытияЖурналаПравилВыполнения.Ошибка);
				Продолжить;
			КонецПопытки;
			
			// Все проверки пройдены, условия выполнены, выполним действия.
			Если Результат = Истина Тогда
				СтруктураПравила  = Новый Структура;
				СтруктураПравила.Вставить("ДатаНачалаПроверки",    ДатаНачалаПроверки); 
				СтруктураПравила.Вставить("ДатаОкончанияПроверки", ДатаОкончанияПроверки);
				Отказ = Ложь; // Заглушка. Отказ используется для отказа от транзакции в интерактивных событиях.
				ВыполнитьДействияПравила(Правило, , СтруктураПравила, Отказ);
			КонецЕсли;
			
		ИначеЕсли ПравилоВыборка.ТипУсловия = Перечисления.ТипУсловийПравилСобытий.ПроверкаРеквизитовОбъекта Тогда
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПравилоВыборка.ПроверкаРеквизитовОбъектаИмяОбъекта);
			СтруктураПравила  = Новый Структура;
			СтруктураПравила.Вставить("ДатаНачалаПроверки",    ДатаНачалаПроверки); 
			СтруктураПравила.Вставить("ДатаОкончанияПроверки", ДатаОкончанияПроверки); 
			
			Попытка
				Результат = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя()).ПроверкаУсловияПравилаСобытия(ПравилоВыборка, СтруктураПравила);
			Исключение
				Результат = Новый Массив;
			КонецПопытки;
			
			Если Результат.Количество() > 0 Тогда
				СтруктураПравилаСобытия = Новый Структура;
				СтруктураПравилаСобытия.Вставить("ЭтоНовый", 			  Ложь);
				СтруктураПравилаСобытия.Вставить("ДатаНачалаПроверки",    ДатаНачалаПроверки); 
				СтруктураПравилаСобытия.Вставить("ДатаОкончанияПроверки", ДатаОкончанияПроверки);
				
				Для Каждого СтрокаРезультата Из Результат Цикл
					СтруктураПравилаСобытияПерем = СтруктураПравилаСобытия;
					ИсточникОбъект 		 = СтрокаРезультата.ПолучитьОбъект();
					ИсточникПередЗаписью = СериализоватьОбъект(ИсточникОбъект);
					СтруктураПравилаСобытияПерем.Вставить("ИсточникПередЗаписью", ИсточникПередЗаписью);
					ВыполнитьДействияПравила(Правило, ИсточникОбъект, СтруктураПравилаСобытияПерем, Отказ);
				КонецЦикла;
				
			Иначе
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'При проверке условий для правила %1 не отобрано ни одного объекта для выполнения действий.'"),
					Строка(Правило));
				РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(,
					НСтр("ru = 'Проверка условий правила событий.'"),
					,
					ТекущаяДатаСеанса(),
					ТекстСообщения,
					Перечисления.ТипСобытияЖурналаПравилВыполнения.Информация);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru = 'Окончание регламентной проверки правил событий.'");
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Правила событий'"), УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);	
	РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(,
		ТекстСообщения,
		,
		ТекущаяДатаСеанса(),
		,
		Перечисления.ТипСобытияЖурналаПравилВыполнения.ЗавершениеПроверкиВыполнения);
			
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗаписатьЗамер("ПравилаСобытийРегламентнаяПроверкаПериодическихСобытий", ЗначениеТаймера);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
			
КонецПроцедуры

#КонецОбласти

#Область РаботаСПравилами

Функция ПолучитьТипЗначенияРеквизитаОбъекта(Знач ИмяОбъекта, Знач ИмяРеквизита) Экспорт
	
	Результат = Неопределено;	
	ОбъектМета = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	
	// Стандартные реквизиты.
	Для Каждого Реквизит Из ОбъектМета.СтандартныеРеквизиты Цикл
		
		Если Реквизит.Имя = ИмяРеквизита Тогда
			Результат = Реквизит.Тип;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;	
	
	// Остальные реквизиты.
	Если Результат = Неопределено Тогда
		Для Каждого Реквизит Из ОбъектМета.Реквизиты Цикл
			
			Если Реквизит.Имя = ИмяРеквизита Тогда
				Результат = Реквизит.Тип;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
	
	// Формулы.
	Если Результат = Неопределено Тогда
		Формулы = МассивФормулУсловий();
		Для Каждого Элемент Из Формулы Цикл
			
			Если Элемент.ИмяРеквизита = ИмяРеквизита Тогда
				Результат = Элемент.Тип;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ПолучитьСписокЗначенийДляРеквизитовОбъекта(Знач ПолноеИмя) Экспорт
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	Результат  		  = Новый СписокЗначений;
	//@skip-warning
	Исключения 	  	  = СЛС.СписокРеквизитовИсключенийПоИмениИсточника(ПолноеИмя);
	
	// Стандартные реквизиты.
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		
		Если Исключения.НайтиПоЗначению(Реквизит.Имя) = Неопределено Тогда
			Результат.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЕсли;
		
	КонецЦикла;	

	// Остальные реквизиты.
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		Если Исключения.НайтиПоЗначению(Реквизит.Имя) = Неопределено Тогда
			Результат.Добавить(Реквизит.Имя, Реквизит.Синоним);	
		КонецЕсли;
	
	КонецЦикла;
	
	Результат.СортироватьПоПредставлению();
	
	Возврат Результат;
	
КонецФункции

Функция ТипыРеквизитовСКонтактнойИнформациейДляПравилСобытий() Экспорт
	
	Возврат Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛица, 
								  |СправочникСсылка.Сотрудники,
								  |СправочникСсылка.ПотенциальныеКлиенты,
								  |СправочникСсылка.Контрагенты, 
								  |СправочникСсылка.Организации, 
								  |СправочникСсылка.Подразделения, 
								  |СправочникСсылка.Пользователи,
								  |СправочникСсылка.ФизическиеЛица,
								  |СправочникСсылка.ГруппыПользователей");
КонецФункции	

Процедура СформироватьУведомлениеEMailSMSTelegram(Знач СтрокаПолучатели, 
	Знач СтруктураДанных, 
	Знач ДанныеОбъекта, 
	Знач Источник, 
	ТаблицаУведомляемых) Экспорт
	
	ДатаВыполненияДействия = ТекущаяДатаСеанса();
	
	ПараметрыШаблона 	  = ДанныеОбъекта.ПараметрыШаблона;
	УсловиеПравилаСобытия = ДанныеОбъекта.УсловиеПравилаСобытия;
	//@skip-warning
	ОписаниеИзменений	  = ДанныеОбъекта.ОписаниеИзменений;
	ТипДействия			  = СтруктураДанных.ТипДействия;
	
	Если ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail Тогда
		//@skip-warning
		МетаданныеПриемника	= Метаданные.Документы.ЭлектронноеПисьмоИсходящее;
		ПриемникОбъект		= Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();		
		ПриемникСсылка		= Документы.ЭлектронноеПисьмоИсходящее.ПолучитьСсылку(Новый УникальныйИдентификатор());

	ИначеЕсли ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеTelegram Тогда
		МетаданныеПриемника	= Метаданные.Документы.TelegramСообщениеИсходящее;
		ПриемникОбъект		= Документы.TelegramСообщениеИсходящее.СоздатьДокумент();
		ПриемникСсылка		= Документы.TelegramСообщениеИсходящее.ПолучитьСсылку(Новый УникальныйИдентификатор());
		
	Иначе
		МетаданныеПриемника	= Метаданные.Документы.СообщениеSMS;
		ПриемникОбъект		= Документы.СообщениеSMS.СоздатьДокумент();
		ПриемникСсылка		= Документы.СообщениеSMS.ПолучитьСсылку(Новый УникальныйИдентификатор());
		
	КонецЕсли;
	
	ПриемникОбъект.УстановитьСсылкуНового(ПриемникСсылка);
	
	МассивПолучателей = Новый Массив;
	
	Если ТипЗнч(СтрокаПолучатели.ЗначениеРеквизитаПолучатель) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТЗ Из СтрокаПолучатели.ЗначениеРеквизитаПолучатель Цикл
			МассивПолучателей.Добавить(СтрокаТЗ.Адресат);
		КонецЦикла;	
	Иначе
		МассивПолучателей.Добавить(СтрокаПолучатели.ЗначениеРеквизитаПолучатель);
	КонецЕсли;
	
	Результат = СтрШаблон(НСтр("ru = 'Условие правила события: ""%1""'"), УсловиеПравилаСобытия) + Символы.ПС;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Комментарии") Тогда
		ИсточникСобытия   = Источник.ВладелецКомментария;
		КомментарийСсылка = Источник.ДополнительныеСвойства.Ссылка;
	Иначе
		ИсточникСобытия   = Источник.ДополнительныеСвойства.Ссылка;
		КомментарийСсылка = Справочники.Комментарии.ПустаяСсылка();
	КонецЕсли;	
	
	Если МассивПолучателей.Количество() > 0 Тогда
		
        Для Каждого Получатель Из МассивПолучателей Цикл
            
			// Контроль, что будет отправлено только одно уведомление.
			ОтборПолучатель = Новый Структура;
			ОтборПолучатель.Вставить("Получатель", Получатель);
			МассивСтрок = ТаблицаУведомляемых.НайтиСтроки(ОтборПолучатель);
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока 			= ТаблицаУведомляемых.Добавить();
			    НоваяСтрока.Получатель 	= Получатель;
				НоваяСтрока.Флаг 	   	= Истина;
			Иначе
				Результат = Результат + СтрШаблон(
					НСтр("ru = 'Для получателя <%1> создание оповещения отменено, т.к. этот получатель уже был обработан ранее. Номер строки в списке действий (%2)'"), 
						Получатель, 
						СтрокаПолучатели.НомерСтроки) + Символы.ПС;
				Продолжить;
            КонецЕсли;
            
            // Проверка необходимости отправки сообщения.
			Если МожноОтправлятьОповещение(Источник, Получатель) Тогда
				СтруктураАдреса = КонтактнаяИнформацияПолучателя(Получатель, ИсточникСобытия, ТипДействия);
				Если СтруктураАдреса.Свойство("Кому") Тогда
					Если ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail Тогда
						ПолучательСтрока   		       = ПриемникОбъект.ПолучателиПисьма.Добавить();
						ПолучательСтрока.Адрес         = СтруктураАдреса.Кому;
						ПолучательСтрока.Контакт       = Получатель;
						ПолучательСтрока.Представление = Строка(Получатель);
                    ИначеЕсли ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеTelegram Тогда
						ПолучательСтрока   		       = ПриемникОбъект.Адресаты.Добавить();
						//@skip-warning
						ПолучательСтрока.Адресат       = СтруктураАдреса.Кому;
						ПолучательСтрока.Состояние     = Перечисления.TelegramСостояниеИсходящегоСообщения.Исходящее;
					Иначе								
						ПолучательСтрока 						= ПриемникОбъект.Адресаты.Добавить();
						ПолучательСтрока.КакСвязаться			= СтруктураАдреса.Кому;
						ПолучательСтрока.НомерДляОтправки		= СтруктураАдреса.Кому;        
						ПолучательСтрока.ПредставлениеКонтакта	= Строка(Получатель);
						ПолучательСтрока.Контакт				= Получатель;
						ПолучательСтрока.СостояниеСообщения 	= Перечисления.СостоянияСообщенияSMS.Исходящее;
					КонецЕсли;	
				Иначе
					Результат = Результат + СтруктураАдреса.ОписаниеОшибки + Символы.ПС;
				КонецЕсли;
			Иначе 
				Результат = Результат + СтрШаблон(
					НСтр("ru = 'Для пользователя <%1> создание оповещения отменено в соответствии с его настройками. Номер строки в списке действий (%2)'"), 
						Получатель, 
						СтрокаПолучатели.НомерСтроки) + Символы.ПС;
			КонецЕсли;	
		КонецЦикла;
		
	Иначе
		
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Для источника ""%1"" по действию ""%2"" и условию ""%3"" не удалось заполнить список получателей. Номер строки в списке действий (%4)'"), 
				ИсточникСобытия, 
				СтруктураДанных.Действие, 
				УсловиеПравилаСобытия, 
				СтрокаПолучатели.НомерСтроки);
				
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Правила событий'"), 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Справочники.ДействияПравилСобытий, , 
			СообщениеОбОшибке);
			
		РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка,
			СтрШаблон(НСтр("ru = 'Оповещение по условию: ""%1""'"), УсловиеПравилаСобытия), 
			СтруктураДанных.Действие,
			ДатаВыполненияДействия,
			СообщениеОбОшибке,
			Перечисления.ТипСобытияЖурналаПравилВыполнения.Предупреждение);
			
		Возврат;
		
	КонецЕсли;
	
	ОтменитьОтправку = Ложь;	
	Если ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail Тогда
		Если ПриемникОбъект.ПолучателиПисьма.Количество() = 0 Тогда
			ОтменитьОтправку = Истина;
		КонецЕсли;	
	Иначе
		Если ПриемникОбъект.Адресаты.Количество() = 0 Тогда
			ОтменитьОтправку = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если ОтменитьОтправку Тогда
		РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
			СтрШаблон(НСтр("ru = 'Оповещение по условию: ""%1""'"), 
			УсловиеПравилаСобытия),
			СтруктураДанных.Действие,
			ДатаВыполненияДействия,
			Результат + Символы.ПС 
				+ СтрШаблон(
					НСтр("ru = 'Отправка уведомления отменена (не заполнены получатели). Номер строки в списке действий (%1)'"), 
					СтрокаПолучатели.НомерСтроки),
			Перечисления.ТипСобытияЖурналаПравилВыполнения.Информация);
			
		Возврат;
		
	КонецЕсли;
	
	ШаблонСообщения  = СтрокаПолучатели.ШаблонСообщения;
	
	Результат = ШаблоныСообщений.СформироватьСообщение(
					ШаблонСообщения,
					?(ТипЗнч(Источник) = Тип("СправочникОбъект.Комментарии"), 
						Источник.ВладелецКомментария, 
						Источник.ДополнительныеСвойства.Ссылка),
					Новый УникальныйИдентификатор,
					ПараметрыШаблона);	
	
	// Для оповещения по Email.
	Если ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail Тогда
		
		#Область EMAIL
		
		ПриемникОбъект.СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(
			ПриемникОбъект.ПолучателиПисьма, Ложь);
		ПриемникОбъект.Тема		 	  		   = Результат.Тема;
		ПриемникОбъект.Дата 	 	  		   = ДатаВыполненияДействия;
		ПриемникОбъект.Кодировка 	  		   = "UTF-8";
		ПриемникОбъект.Важность	 	  		   = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		ПредметВзаимодействия				   = Источник.ДополнительныеСвойства.Ссылка;
		Если ЗначениеЗаполнено(ПредметВзаимодействия) Тогда
			Если ТипЗнч(ПредметВзаимодействия) = Тип("СправочникСсылка.Комментарии") Тогда
				ПредметВзаимодействия		   = Источник.ВладелецКомментария;
			КонецЕсли;
		КонецЕсли;
		ПриемникОбъект.СтатусПисьма	           = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		ПриемникОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
		
		ТекстПисьма						   	   = ОбработатьТекстПисьма(Результат.Текст);
		
		Если ТипЗнч(СтрокаПолучатели.ЗначениеРеквизитаУчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") 
			И ЗначениеЗаполнено(СтрокаПолучатели.ЗначениеРеквизитаУчетнаяЗапись) Тогда
			ПриемникОбъект.УчетнаяЗапись = СтрокаПолучатели.ЗначениеРеквизитаУчетнаяЗапись;
		Иначе			
			ПриемникОбъект.УчетнаяЗапись = 
				УправлениеITОтделом8УФПовтИсп.УчетнаяЗаписьЭлектроннойПочтыПоУмолчанию();
		КонецЕсли;
		ПриемникОбъект.ОтправительПредставление = Строка(ПриемникОбъект.УчетнаяЗапись);
		
		Если ШаблонСообщения.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			ШапкаHTML  = "";
			ПодвалHTML = "";
			ШаблонОформления = СтрокаПолучатели.ШаблонОформления;
			Если ЗначениеЗаполнено(ШаблонОформления) Тогда
				ШапкаHTML  = ШаблонОформления.БлокШапка;
				ПодвалHTML = ШаблонОформления.БлокПодвал;
			КонецЕсли;
			ПриемникОбъект.Текст	 	  = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекстПисьма);
			ПриемникОбъект.ТекстHTML 	  = ШапкаHTML 
				+ ?(ПустаяСтрока(ШапкаHTML), ТекстПисьма, ПолучитьТелоТекстаHTML(ТекстПисьма))
				+ ПодвалHTML;
			ПриемникОбъект.ТипТекста 	  = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;	
		ИначеЕсли ШаблонСообщения.ТипТекстаПисьма = 
			Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
			ПриемникОбъект.Текст	 	  = ТекстПисьма;
			ПриемникОбъект.ТипТекста 	  = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;	
		КонецЕсли;	
		
		// Обработка ID письма.
		Попытка
			Если ТипЗнч(Источник.ДополнительныеСвойства.Ссылка) = Тип("ДокументСсылка.Задание") 
				И ЗначениеЗаполнено(Источник.ИдентификаторСообщения) Тогда
				
				ПриемникОбъект.ИдентификаторОснования = Источник.ИдентификаторСообщения;
				
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		МассивОтправленныхФайлов = Новый Массив;
		
		// Если в шаблоне указано [Задание.Описание] или [Задание.ОписаниеЗаданияHTML] добавляем файлы из задания.
		Если ТипЗнч(Источник.ДополнительныеСвойства.Ссылка) = Тип("ДокументСсылка.Задание")			
			И ((ПриемникОбъект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
			И СтрНайти(ШаблонСообщения.ТекстШаблонаПисьмаHTML, "[Задание.ОписаниеЗаданияHTML]") > 0)
			ИЛИ (ПриемникОбъект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст
			И СтрНайти(ШаблонСообщения.ТекстШаблонаПисьма, "[Задание.Описание]") > 0)) Тогда
				 
			ЗаполнитьПрисоединенныеФайлы(Источник.ДополнительныеСвойства.Ссылка, ПриемникСсылка, 
				МассивОтправленныхФайлов);
		
		ИначеЕсли ТипЗнч(Источник.ДополнительныеСвойства.Ссылка) = Тип("СправочникСсылка.Комментарии")			
			И ((ПриемникОбъект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
			И СтрНайти(ШаблонСообщения.ТекстШаблонаПисьмаHTML, "[Задание.ОписаниеЗаданияHTML]") > 0)
			ИЛИ (ПриемникОбъект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст
			И СтрНайти(ШаблонСообщения.ТекстШаблонаПисьма, "[Задание.Описание]") > 0)) Тогда
				 
			ЗаполнитьПрисоединенныеФайлы(Источник.ВладелецКомментария, ПриемникСсылка, 
				МассивОтправленныхФайлов);
				
		КонецЕсли;
		
		// Если в шаблоне указано [Задание.ДобавленныйКомментарийТекст] 
		// или [Задание.ДобавленныйКомментарийHTML] добавляем файлы комментария.
		Если ТипЗнч(Источник.ДополнительныеСвойства.Ссылка) = Тип("СправочникСсылка.Комментарии")
			И ЗначениеЗаполнено(КомментарийСсылка)
			И ((ПриемникОбъект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML 
			И СтрНайти(ШаблонСообщения.ТекстШаблонаПисьмаHTML, "[Задание.ДобавленныйКомментарийHTML]") > 0) 
			ИЛИ (ПриемникОбъект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст 
			И СтрНайти(ШаблонСообщения.ТекстШаблонаПисьма, "[Задание.ДобавленныйКомментарийТекст]") > 0)) Тогда
				
			ЗаполнитьПрисоединенныеФайлы(КомментарийСсылка, ПриемникСсылка, МассивОтправленныхФайлов);
			
		КонецЕсли;
		
		// Файлы из последнего комментария.
		// Если в шаблоне указано [Задание.ПоследнийОбычныйКомментарийHTML] 
		// или [Задание.ПоследнийОбычныйКомментарийТекст] добавляем файлы последнего комментария.
		Если ТипЗнч(Источник.ДополнительныеСвойства.Ссылка) = Тип("СправочникСсылка.Комментарии")
			И ((ПриемникОбъект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
			И СтрНайти(ШаблонСообщения.ТекстШаблонаПисьмаHTML, "[Задание.ПоследнийОбычныйКомментарийHTML]") > 0)
			ИЛИ (ПриемникОбъект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст
			И СтрНайти(ШаблонСообщения.ТекстШаблонаПисьма, "[Задание.ПоследнийОбычныйКомментарийТекст]") > 0)) Тогда
				
			ПоследнийКомментарийСтруктура = Комментарии.ПоследнийОбычныйКомментарий(
				Источник.ДополнительныеСвойства.Ссылка);
			Если ЗначениеЗаполнено(ПоследнийКомментарийСтруктура.ПоследнийОбычныйКомментарийСсылка) Тогда
				ЗаполнитьПрисоединенныеФайлы(ПоследнийКомментарийСтруктура.ПоследнийОбычныйКомментарийСсылка, 
					ПриемникСсылка, МассивОтправленныхФайлов);
			КонецЕсли;
				
		КонецЕсли;
		
		// Файлы из статьи базы знаний.
		// Если в шаблоне указано [Задание.ТекстСтатьиHTML] 
		// или [Задание.ТекстСтатьиТекст] добавляем файлы из статьи базы знаний.
		Если ТипЗнч(Источник.ДополнительныеСвойства.Ссылка) = Тип("СправочникСсылка.СтатьиБазыЗнаний")
			И ((ПриемникОбъект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
			И СтрНайти(ШаблонСообщения.ТекстШаблонаПисьмаHTML, "[СтатьиБазыЗнаний.ТекстСтатьиHTML]") > 0)
			ИЛИ (ПриемникОбъект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст
			И СтрНайти(ШаблонСообщения.ТекстШаблонаПисьма, "[СтатьиБазыЗнаний.ТекстСтатьиТекст]") > 0)) Тогда
				 
			ЗаполнитьПрисоединенныеФайлы(Источник.ДополнительныеСвойства.Ссылка, ПриемникСсылка, 
				МассивОтправленныхФайлов);
			
		КонецЕсли;
		
		// Добавляем в качестве вложения картинки в теле задания/комментария.
		Если Результат.Вложения.Количество() > 0 Тогда
			Для Каждого Вложение Из Результат.Вложения Цикл
								
				РазложенноеИмяФайла = УправлениеITОтделом8УФ.РазложитьИмяФайла(Вложение.Представление);
				ДополнительныеРеквизиты = Новый Структура("ИДФайлаЭлектронногоПисьма", Вложение.Идентификатор);
				ПараметрыФайла 			= РаботаСФайлами.ПараметрыДобавленияФайла(ДополнительныеРеквизиты);
				ПараметрыФайла.ВладелецФайлов = ПриемникСсылка; 
				ПараметрыФайла.ВремяИзмененияУниверсальное = Неопределено;
				ЗаполнитьЗначенияСвойств(ПараметрыФайла, РазложенноеИмяФайла);			
				//@skip-warning
				ДобавленныйФайлСсылка = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Вложение.АдресВоВременномХранилище);
				Попытка
					УдалитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
				Исключение
				КонецПопытки;
								
			КонецЦикла;
		КонецЕсли;
		
		ПриемникОбъект.Записать(РежимЗаписиДокумента.Запись);	
		Взаимодействия.УстановитьПредмет(ПриемникСсылка, ПредметВзаимодействия, Истина);		
		
		#КонецОбласти
		
	ИначеЕсли ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеTelegram Тогда
		
		#Область Telegram
		
		Если ЗначениеЗаполнено(СтрокаПолучатели.TelegramБот)
			И СтрокаПолучатели.TelegramБот.Активность = Истина Тогда
			
			Текст = Результат.Текст;
			
			ПриемникОбъект.Бот			= СтрокаПолучатели.TelegramБот;	
			ПриемникОбъект.Дата			= ДатаВыполненияДействия;
			ПриемникОбъект.Текст		= Текст;
			ПриемникОбъект.ДатаОтправки = Дата(1, 1, 1);
			
			ПриемникОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ПредметВзаимодействия				   = Источник.ДополнительныеСвойства.Ссылка;
			Если ЗначениеЗаполнено(ПредметВзаимодействия) Тогда
				Если ТипЗнч(ПредметВзаимодействия) = Тип("СправочникСсылка.Комментарии") Тогда
					ПредметВзаимодействия		   = Источник.ВладелецКомментария;
				КонецЕсли;
			КонецЕсли;
			
			Взаимодействия.УстановитьПредмет(ПриемникСсылка, ПредметВзаимодействия, Истина);
			
		Иначе
			
			СообщениеОбОшибке = СтрШаблон(
				НСтр("ru = 'Для источника ""%1"" по действию ""%2"" и условию ""%3"" не заполнен реквизит Telegram-бот или Telegram-бот выключен. Номер строки в списке действий (%4)'"), 
					ИсточникСобытия, 
					СтруктураДанных.Действие, 
					УсловиеПравилаСобытия, 
					СтрокаПолучатели.НомерСтроки);
					
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Правила событий'"), 
				УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Справочники.ДействияПравилСобытий, , 
				СообщениеОбОшибке);
				
			РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка,
				СтрШаблон(НСтр("ru = 'Оповещение по условию: ""%1""'"), УсловиеПравилаСобытия), 
				СтруктураДанных.Действие,
				ДатаВыполненияДействия,
				СообщениеОбОшибке,
				Перечисления.ТипСобытияЖурналаПравилВыполнения.Предупреждение);
						
		КонецЕсли;
		
		#КонецОбласти
		
	Иначе
		
		#Область SMS
		
		// Для оповещения по SMS.	
		Тело = Результат.Текст;
		
		// Необходимо ли транслитерация сообщения.
		ПеревестиВТранслит = Ложь;
		Если СтрДлина(Тело) > 70 
			И УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ТранслитSMSПриПревышенииДлиныТекста") = Истина Тогда
			ПеревестиВТранслит = Истина;
		КонецЕсли;
		ПриемникОбъект.Дата			  		= ДатаВыполненияДействия;
		ПриемникОбъект.ОтправлятьВТранслите = ПеревестиВТранслит;
		ПриемникОбъект.ТекстСообщения 	  	= Тело;
		ПриемникОбъект.Состояние			= Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
		ПриемникОбъект.Тема				    = Тело;
		ПриемникОбъект.Ответственный		= Пользователи.ТекущийПользователь();
		
		Взаимодействия.УстановитьСостояниеИсходящееДокументСообщениеSMS(ПриемникОбъект);
		ПриемникОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ПредметВзаимодействия				   = Источник.ДополнительныеСвойства.Ссылка;
		Если ЗначениеЗаполнено(ПредметВзаимодействия) Тогда
			Если ТипЗнч(ПредметВзаимодействия) = Тип("СправочникСсылка.Комментарии") Тогда
				ПредметВзаимодействия		   = Источник.ВладелецКомментария;
			КонецЕсли;
		КонецЕсли;
		
		Взаимодействия.УстановитьПредмет(ПриемникСсылка, ПредметВзаимодействия, Истина);
		
		#КонецОбласти
		
	КонецЕсли;	
	
	Если ПустаяСтрока(СообщениеОбОшибке) Тогда
		РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
			ПриемникСсылка, 
			СтруктураДанных.Действие,
			ДатаВыполненияДействия,
			СтрШаблон(НСтр("ru = 'Оповещение успешно создано. Номер строки в списке действий (%1)'"), 
				СтрокаПолучатели.НомерСтроки),
			Перечисления.ТипСобытияЖурналаПравилВыполнения.Информация);
	Иначе
		РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
			ПриемникСсылка, 
			СтруктураДанных.Действие,
			ДатаВыполненияДействия,
			СообщениеОбОшибке,
			Перечисления.ТипСобытияЖурналаПравилВыполнения.Ошибка);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СформироватьНапоминаниеПользователю(Знач СтрокаПолучатели, 
	Знач СтруктураДанных, 
	Знач ДанныеОбъекта, 
	Знач Источник, 
	ТаблицаУведомляемых) Экспорт
	
	ДатаВыполненияДействия = ТекущаяДатаСеанса();	
	УсловиеПравилаСобытия  = ДанныеОбъекта.УсловиеПравилаСобытия;

	МассивПолучателей = Новый Массив;
	
	Если ТипЗнч(СтрокаПолучатели.ЗначениеРеквизитаПолучатель) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТЗ Из СтрокаПолучатели.ЗначениеРеквизитаПолучатель Цикл
			МассивПолучателей.Добавить(СтрокаТЗ.Адресат);
		КонецЦикла;	
	Иначе
		 МассивПолучателей.Добавить(СтрокаПолучатели.ЗначениеРеквизитаПолучатель);
	КонецЕсли;
	
	Результат = СтрШаблон(НСтр("ru = 'Условие правила события: ""%1""'"), УсловиеПравилаСобытия) + Символы.ПС;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Комментарии") Тогда
		Источник   = Источник.ВладелецКомментария;
	Иначе
		Источник   = Источник.ДополнительныеСвойства.Ссылка;
	КонецЕсли;
	
	ПриемникСтруктура = Новый Структура;
	ПриемникСтруктура.Вставить("Источник", Источник);	
	ПриемникСтруктура.Вставить("Описание", Строка(Источник) + " [" + УсловиеПравилаСобытия + "]");
	ПриемникСтруктура.Вставить("СпособУстановкиВремениНапоминания", 
		Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя);
	ПриемникСтруктура.Вставить("ВремяСобытия", Дата(1,1,1));
	Если СтрокаПолучатели.НапоминаниеВариантЗаполнения = "Указанный" Тогда
		ПриемникСтруктура.Вставить("ВремяСобытия", СтрокаПолучатели.НапоминаниеЗначение);
	ИначеЕсли СтрокаПолучатели.НапоминаниеВариантЗаполнения = "Смещение даты" Тогда
		ПриемникСтруктура.Вставить("ВремяСобытия", ДатаСмещения(ДатаВыполненияДействия, 
			СтрокаПолучатели.НапоминаниеЗначение));
	КонецЕсли;
	ПриемникСтруктура.Вставить("СрокНапоминания", ПриемникСтруктура.ВремяСобытия);
	
	Если МассивПолучателей.Количество() > 0 Тогда 
		Для Каждого Получатель Из МассивПолучателей Цикл
			
			// Контроль, что будет отправлено только одно уведомление.
			ОтборПолучатель = Новый Структура;
			ОтборПолучатель.Вставить("Получатель", Получатель);
			МассивСтрок = ТаблицаУведомляемых.НайтиСтроки(ОтборПолучатель);
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока 			= ТаблицаУведомляемых.Добавить();
			    НоваяСтрока.Получатель 	= Получатель;
				НоваяСтрока.Флаг 	   	= Истина;
			Иначе
				Результат = Результат 
					+ СтрШаблон(
						НСтр("ru = 'Для получателя <%1> создание напоминания отменено, т.к. этот получатель уже был обработан ранее. Номер строки в списке действий (%2)'"), 
						Получатель, 
						СтрокаПолучатели.НомерСтроки) 
					+ Символы.ПС;
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(Получатель) Тогда
				Если МожноОтправлятьОповещение(Источник, Получатель) Тогда
					ПриемникОбъект = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(ПриемникОбъект, ПриемникСтруктура);
					ПриемникОбъект.Пользователь = Получатель;
					Попытка
						ПриемникОбъект.Записать();
						Результат = Результат + СтрШаблон(
							НСтр("ru = 'Создано напоминание для пользователя: <%1>. Номер строки в списке действий (%2)'"), 
								Получатель, 
								СтрокаПолучатели.НомерСтроки) 
							+ Символы.ПС;
							
					Исключение
						ОписаниеОшибки = ОписаниеОшибки();
						Результат 	   = Результат 
							+ СтрШаблон(НСтр("ru = 'При создании напоминания для пользователя <%1> произошла ошибка: %2. Номер строки в списке действий (%3)'"), 
								Получатель, 
								ОписаниеОшибки, 
								СтрокаПолучатели.НомерСтроки) 
							+ Символы.ПС;
							
						//@skip-warning
						СообщениеОбОшибке = СтрШаблон(
							НСтр("ru = 'Для источника ""%1"" по действию ""%2"" и условию ""%3"" не удалось создать напоминание по причине: %4. Номер строки в списке действий (%5)'"),
								Источник.ДополнительныеСвойства.Ссылка, 
								СтруктураДанных.Действие, 
								УсловиеПравилаСобытия, 
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
							СтрокаПолучатели.НомерСтроки);
							
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка'"),
							УровеньЖурналаРегистрации.Ошибка,,,
							СообщениеОбОшибке);
						
					КонецПопытки;
				Иначе
					Результат = Результат 
						+ СтрШаблон(
							НСтр("ru = 'Для пользователя <%1> создание оповещения отменено в соответствии с его настройками.'"), 
								Получатель) 
						+ Символы.ПС;
				КонецЕсли;	
			Иначе
				Результат = Результат 
					+ СтрШаблон(
						НСтр("ru = 'Создать напоминание для <%1> невозможно, т.к. это не пользователь программы (либо пользователь не найден). Номер строки в списке действий (%2)'"),
							Получатель, 
							СтрокаПолучатели.НомерСтроки) 
					+ Символы.ПС;
			КонецЕсли;	
		КонецЦикла;
		
		Константы.ПризнакСбросаПовторноИспользуемыхЗначений.Установить(Новый УникальныйИдентификатор);
		
	Иначе
		//@skip-warning
		Результат = СтрШаблон(
			НСтр("ru = 'Для источника ""%1"" по действию ""%2"" и условию ""%3"" не удалось заполнить список получателей напоминания. Номер строки в списке действий (%4)'"),
				Источник.ДополнительныеСвойства.Ссылка,
				СтруктураДанных.Действие,
				УсловиеПравилаСобытия,
				СтрокаПолучатели.НомерСтроки);
				
	КонецЕсли;
	
	РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
		СтрШаблон(НСтр("ru = 'Напоминание по условию: %1'"), УсловиеПравилаСобытия), 
		СтруктураДанных.Действие,
		ДатаВыполненияДействия,
		Результат,
		Перечисления.ТипСобытияЖурналаПравилВыполнения.Информация);
	
КонецПроцедуры	

Функция КонтактнаяИнформацияПолучателя(Знач Адресат, Знач Основание, Знач ТипДействия) Экспорт
	
	СтруктураВозврата 	= Новый Структура;
	Кому 				= "";
	ТипЗнчАдресат 		= ТипЗнч(Адресат);
	
	Если ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail Тогда
		
		#Область ОповещениеПоEmail
		
		Если ТипЗнчАдресат = Тип("СправочникСсылка.Пользователи") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.EmailПользователя);
				
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для пользователя <%1> не указан e-mail для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому); 
			КонецЕсли;
			
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.Контрагенты") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для контрагента <%1> не указан e-mail для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);	
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для контактного лица <%1> не указан e-mail для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.Сотрудники") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.EmailСотрудника);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для сотрудника <%1> не указан e-mail для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для физического лица <%1> не указан e-mail для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.ПотенциальныеКлиенты") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.EmailПотенциальногоКлиента);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для потенциального клиента <%1> не указан e-mail для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.Подразделения") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.EmailПодразделения);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для подразделения <%1> не указан e-mail для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.Организации") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для организации <%1> не указан e-mail для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		КонецЕсли;
		
		#КонецОбласти
		
	ИначеЕсли ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеTelegram Тогда
		
		#Область ОповещениеTelegram
		
		ПользовательTelegram = TelegramСервер.ПользовательTelegramПоАдресату(Адресат);
		Если ПользовательTelegram = Неопределено Тогда
			СтруктураВозврата.Вставить("ОписаниеОшибки", 
				СтрШаблон(НСтр("ru = 'Для адресата <%1> не найден соответствующий элемент в справочнике ""Пользователи Telegram"". Заполните реквизит ""Объект ИБ"" в этом справочнике, чтобы сопоставить пользовтаеля Telegram с информируемым объектом инофрмационной базы.'"),
					Адресат));
		Иначе
			СтруктураВозврата.Вставить("Кому", ПользовательTelegram);
		КонецЕсли;
		
		#КонецОбласти
		
	Иначе
		
		#Область SMS
		
		Если ТипЗнчАдресат = Тип("СправочникСсылка.Пользователи") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.ТелефонПользователяДляРассылкиОповещенийПоЗаданиямSMS);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для пользователя <%1> не указан номер телефона для отправки SMS для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.Контрагенты") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагентаДляРассылкиОповещенийПоЗаданиямSMS);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для контрагента <%1> не указан номер телефона для отправки SMS для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.ПотенциальныеКлиенты") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.МобильныйТелефонПотенциальногоКлиента);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для потенциального клиента <%1> не указан номер телефона для отправки SMS для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.Сотрудники") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.ТелефонСотрудникаДляРассылкиОповещенийПоЗаданиямSMS);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для сотрудника <%1> номер телефона для отправки SMS для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаДляРассылкиОповещенийПоЗаданиямSMS);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для физического лица <%1> не указан номер телефона для отправки SMS для информирования (%2)'"), 
						Адресат, 
						Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для контактного лица <%1> не указан номер телефона (%2)'"), Адресат, Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.Подразделения") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.ТелефонПодразделения);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для подразделения <%1> не указан номер телефона (%2)'"), Адресат, Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		ИначеЕсли ТипЗнчАдресат = Тип("СправочникСсылка.Организации") Тогда
			Кому = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Адресат, 
				Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
			Если ПустаяСтрока(Кому) Тогда
				СтруктураВозврата.Вставить("ОписаниеОшибки", 
					СтрШаблон(НСтр("ru = 'Для организации <%1> не указан номер телефона (%2)'"), Адресат, Основание));
			Иначе
				СтруктураВозврата.Вставить("Кому", Кому);
			КонецЕсли;
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЕсли;
	
	Если СтруктураВозврата.Свойство("Кому") = Ложь И СтруктураВозврата.Свойство("ОписаниеОшибки") = Ложь Тогда
		СтруктураВозврата.Вставить("ОписаниеОшибки", СтрШаблон(НСтр("ru = 'Тип адресата не определен (%1)'"), 
			Основание));
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МассивФормулУсловий() Экспорт
	
	Результат = Новый Массив;
	
	// Сообщить.
	Значение 					= Новый Структура("ИмяРеквизита,Тип,Формула");
	Значение.ИмяРеквизита 		= "[Сообщить пользователю]";
	Массив 						= Новый Массив;
	Массив.Добавить(Тип("Строка"));
	Значение.Тип 				= Новый ОписаниеТипов(Массив);
	Значение.Формула	 		= "";
	Результат.Добавить(Значение);
		
	Возврат Результат;
	
КонецФункции

// Получает тело HTML-документа (все, что внутри тега BODY).
//
// Параметры:
//	ТекстHTML - Строка - исходный HTML-документ.
//
// Возвращаемое значение:
//	Строка - все, что внутри тега BODY.
//
Функция ПолучитьТелоТекстаHTML(Знач ТекстHTML) Экспорт
	
	Если СтрНайти(НРег(ТекстHTML), "<body") = 0 Тогда
		Возврат ТекстHTML;
	КонецЕсли;	
	
	Результат 		 = "";
	Позицияbody		 = СтрНайти(ТекстHTML, ">", , СтрНайти(НРег(ТекстHTML), "<body"));
	ПозицияКонецbody = СтрНайти(НРег(ТекстHTML), "</body", НаправлениеПоиска.СКонца);
	Результат 		 = Лев(ТекстHTML, ПозицияКонецbody - 1); 
	Результат		 = СокрЛП(Сред(Результат, Позицияbody + 1, СтрДлина(Результат)));
		
	Возврат Результат;
	
КонецФункции

// Заменяет в тексте письма ссылки и какие-то другие значения, которые нужны для корретной работы.
// Пример: установка ссылок на базу знаний.
//
// Параметры:
//	Текст - Строка - исходных текст.
//
// Возвращаемое значение:
//	Строка - результирующий текст.
//
Функция ОбработатьТекстПисьма(Знач Текст) Экспорт
	
	Результат = Текст;
	
	// Заменяем ссылки на базу на АдресПубликацииИнформационнойБазыВИнтернете.
	Адрес = УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("АдресПубликацииИнформационнойБазыВИнтернете");
	Если НЕ ПустаяСтрока(Адрес) Тогда
		Если Прав(Адрес, 1) <> "/" Тогда
			Адрес = Адрес + "/";
		КонецЕсли;
		Результат = СтрЗаменить(Результат, 
			"href=""e1cib/data/Справочник.СтатьиБазыЗнаний?", 
			"href=""" + Адрес + "e1cib/data/Справочник.СтатьиБазыЗнаний?");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает рассчитаную дату смещения
//
// Параметры:
//  Дата	 - Дата	 - дата, относительно которой выполняется расчет
//  Смещение - Строка	 - вариант смещения
// 
// Возвращаемое значение:
//  Дата - Дата
//
Функция ДатаСмещения(Знач Дата, Знач Смещение) Экспорт
	
	Результат = '0001-01-01';
	
	Если Смещение = "Дата срабатывания правила" Тогда
		Результат = Дата;
	ИначеЕсли Смещение = "Через час" Тогда
		Результат = Дата + 3600;
	ИначеЕсли Смещение = "Через день" Тогда
		Результат = Дата + 24 * 3600;
	ИначеЕсли Смещение = "Через неделю" Тогда
		Результат = Дата + 7 * 24 * 3600;
	ИначеЕсли Смещение = "Через месяц" Тогда
		Результат = ДобавитьМесяц(Дата, 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Приводит значение к типу строка.
//
// Параметры:
//	Значение - ЛюбаяСсылка, Строка, Дата, Булево, Число - исходное значение
//
// Возвращаемое значение:
//	Строка - строковое представление значения.
//
Функция ЗначениеРеквизитаСтрокой(Знач Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Если Значение = Дата(1, 1, 1) Тогда
			Возврат НСтр("ru = '[Пустая дата]'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка(Значение);
	
КонецФункции

// Функция - Возвращает текст для параметра %ОписаниеИзменений%
//
// Параметры:
//  ИсточникПередЗаписью - 	 - 
//  Источник			 - 	 - 
//  ФорматТекста		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ОписаниеИзмененийОбъектов(Знач СтруктураПравилаСобытия, Знач Источник) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", 	"");
	Результат.Вставить("ТекстHTML", "");
	Результат.Вставить("Вложения", 	Новый Структура);
	
	МетаданныеИсточника	= Источник.Метаданные();
	ПолноеИмяИсточника  = МетаданныеИсточника.ПолноеИмя();
	//@skip-warning	
	СписокИсключений 	= СЛС.СписокРеквизитовИсключенийПоИмениИсточника(ПолноеИмяИсточника);	
	//@skip-warning
	СообщениеОбИзменении= "";
	
	Если СтруктураПравилаСобытия.ЭтоНовый Тогда
		
		СообщениеОбИзменении = НСтр("ru = 'Объект успешно создан.'");
		
	Иначе
		// Проверяем изменения.
		// Реквизиты.
		Если СтруктураПравилаСобытия.Свойство("ИсточникПередЗаписью") Тогда
			ИсточникПередЗаписью = СтруктураПравилаСобытия.ИсточникПередЗаписью;
			СообщениеОбИзмененииВрем = "";
			Для Каждого Реквизит Из МетаданныеИсточника.СтандартныеРеквизиты Цикл
				Если СписокИсключений.НайтиПоЗначению(Реквизит.Имя) = Неопределено Тогда
					Если Источник[Реквизит.Имя] <> ИсточникПередЗаписью[Реквизит.Имя] Тогда
						ЗначениеРеквизитаПередЗаписью	= 
							ПравилаСобытийСервер.ЗначениеРеквизитаСтрокой(ИсточникПередЗаписью[Реквизит.Имя]);
							
						ЗначениеРеквизитаПриЗаписи 		= 
							ПравилаСобытийСервер.ЗначениеРеквизитаСтрокой(Источник[Реквизит.Имя]);
						
						СообщениеОбИзмененииВрем = СообщениеОбИзмененииВрем  
							+ " - <b>" + ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним) 
							+ ":</b> '" + ЗначениеРеквизитаПередЗаписью + "' &rarr; '" + ЗначениеРеквизитаПриЗаписи 
							+ "'" + "<br>";
							
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Реквизиты.
			Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
				// Только нужные.
				Если СписокИсключений.НайтиПоЗначению(Реквизит.Имя) = Неопределено Тогда
					Если Источник[Реквизит.Имя] <> ИсточникПередЗаписью[Реквизит.Имя] Тогда
						ЗначениеРеквизитаПередЗаписью	= 
							ПравилаСобытийСервер.ЗначениеРеквизитаСтрокой(ИсточникПередЗаписью[Реквизит.Имя]);
							
						ЗначениеРеквизитаПриЗаписи		= 
							ПравилаСобытийСервер.ЗначениеРеквизитаСтрокой(Источник[Реквизит.Имя]);
						
						Если Реквизит.Имя = "Описание" Тогда
							СообщениеОбИзмененииВрем = " - <b>" 
								+ ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним) 
								+ "</b> &rarr; '" + ЗначениеРеквизитаПриЗаписи + "'" + "<br>";
						Иначе
							СообщениеОбИзмененииВрем = СообщениеОбИзмененииВрем +  
								" - <b>" + ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним) 
								+ "</b> '" + ЗначениеРеквизитаПередЗаписью + "' &rarr; '" + ЗначениеРеквизитаПриЗаписи 
								+ "'" + "<br>";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СообщениеОбИзменении = НСтр("ru = 'Объект не изменен.'");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СообщениеОбИзмененииВрем) Тогда
		СообщениеОбИзмененииВрем = "<span style='font-weight:bold;color:red;'>" 
			+ НСтр("ru = 'Реквизиты:'") + "</span>" + Символы.ПС + СокрЛП(СообщениеОбИзмененииВрем) + "";
	КонецЕсли;
	
	Результат.ТекстHTML = СообщениеОбИзмененииВрем;
	ФД 				= Новый ФорматированныйДокумент;
	ФД.УстановитьHTML(СообщениеОбИзмененииВрем, Новый Структура);
	Результат.Текст	= ФД.ПолучитьТекст();
	
	Возврат Результат;
	
КонецФункции

// Сериализует объект и сохраняет его в структуру для дальнейшего восстановления методом "ВосстановитьОбъект".
//
// Параметры:
//	Объект - ДокументОбъект, СправочникОбъект - исходный объект.
//
// Возвращаемое значение:
//	Стркутура
//		* Имя - Строка - имя объекта метаданных.
//		* Тип - Тип - тип объекта метаданных
//		* Реквизиты - Струткура - значения реквизитов объекта.
//		* ДополнительныеСвойства - Структура - доп. свойства объекта.
//		* ТабличныеЧасти - Структура - таб. части объекта.
//
Функция СериализоватьОбъект(Знач Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;	
	
	ОбъектМетаданные = Объект.Метаданные();
	Результат.Вставить("Имя", ОбъектМетаданные.Имя);
	Результат.Вставить("ПолноеИмя", ОбъектМетаданные.ПолноеИмя());	
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданные)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданные) Тогда
		Результат.Вставить("Ссылка", Объект.Ссылка);		
	КонецЕсли;
	
	Для Каждого Реквизит Из ОбъектМетаданные.Реквизиты Цикл
		Результат.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	КонецЦикла;
	Для Каждого Реквизит Из ОбъектМетаданные.СтандартныеРеквизиты Цикл
		Результат.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	КонецЦикла;
	Результат.Вставить("ДополнительныеСвойства", Объект.ДополнительныеСвойства);
	Если Результат.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
		Результат.ДополнительныеСвойства.Удалить("ДляПроведения");
	КонецЕсли;
	
	Для Каждого ТЧ Из ОбъектМетаданные.ТабличныеЧасти Цикл
		
		ИмяТЧ = ТЧ.Имя;
		
		Если СтрНачинаетсяС(ИмяТЧ, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
				
		Результат.Вставить(ИмяТЧ, Объект[ИмяТЧ].Выгрузить());
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Восстанавливает объект серализованный методом СериализоватьОбъект
//
// Параметры:
//	ДанныеОбъекта - Структура
//		* Имя - Строка - имя объекта метаданных.
//		* Тип - Тип - тип объекта метаданных
//		* Реквизиты - Струткура - значения реквизитов объекта.
//		* ДополнительныеСвойства - Структура - доп. свойства объекта.
//		* ТабличныеЧасти - Структура - таб. части объекта.
//
// Возвращаемое значение:
//	ДокументОбъект, СправочникОбъект - исходный объект вновь созданный но не записанный.
//
Функция ВосстановитьОбъект(Знач ДанныеОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Имя 				= ДанныеОбъекта.Имя;
	//Тип 				= ДанныеОбъекта.Тип;
	//ОбъектМетаданные 	= Метаданные.НайтиПоТипу(Тип);
	ОбъектМетаданные 	= Метаданные.НайтиПоПолномуИмени(ДанныеОбъекта.ПолноеИмя);
	
	Объект = Неопределено;
	Если Метаданные.Документы.Содержит(ОбъектМетаданные) Тогда
		
		Объект = Документы[Имя].СоздатьДокумент();
		Объект.ДополнительныеСвойства.Вставить("Ссылка", ДанныеОбъекта.Ссылка);
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданные) Тогда 
		
		Если ДанныеОбъекта.Свойство("ЭтоГруппа") Тогда
			Если ДанныеОбъекта.ЭтоГруппа = Истина Тогда
				Объект = Справочники[Имя].СоздатьГруппу();
			КонецЕсли;
		КонецЕсли;
		
		Если Объект = Неопределено Тогда
			Объект = Справочники[Имя].СоздатьЭлемент();
		КонецЕсли;
		Объект.ДополнительныеСвойства.Вставить("Ссылка", ДанныеОбъекта.Ссылка);
		
	КонецЕсли;
	
	// Заполняем реквизиты.
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	// Заполняе доп. свойства.
	Для Каждого КлючЗначение Из ДанныеОбъекта.ДополнительныеСвойства Цикл
		Объект.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	// Заполняем ТЧ.
	Для Каждого ТЧ Из ОбъектМетаданные.ТабличныеЧасти Цикл
		//Объект[КлючЗначение.Ключ].Загрузить(КлючЗначение.Значение);
		
		ИмяТЧ = ТЧ.Имя;
		
		Если СтрНачинаетсяС(ИмяТЧ, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
				
		Объект[ИмяТЧ].Загрузить(ДанныеОбъекта[ИмяТЧ].Скопировать());
		
	КонецЦикла;
	
	Возврат Объект;
		
КонецФункции

// Возвращает дату рабочего дня, которая отличается от переданной даты на количество рабочих дней.
//
// Параметры:
//	Календарь			- СправочникСсылка.Календари - рабочий календарь.
//	Дата				- Исходная дата.
//	КоличествоДней 		- Число - количество рабочих дней от исходной даты.
//	ВызыватьИсключение	- Булево - признак обработки исключительной ситуации.
//
// Возвращаемое значение:
//	Дата, Неопределено.
//
Функция РабочаяДатаПоКалендарю(Календарь, Дата, КоличествоДней, ВызыватьИсключение = Ложь) Экспорт
	
	ДатаОт = НачалоДня(Дата);
	
	Если КоличествоДней = 0 Тогда
		Возврат ДатаОт;
	КонецЕсли;
	
	Если КоличествоДней > 0 Тогда 
		МассивДней	= Новый Массив;
		МассивДней.Добавить(КоличествоДней);
		МассивДат	= КалендарныеГрафики.ДатыПоКалендарю(Календарь, ДатаОт, МассивДней, , ВызыватьИсключение);
		
		Возврат ?(МассивДат <> Неопределено, МассивДат[0], Неопределено);
		
	Иначе
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ВложенныйЗапрос.ДатаГрафика) КАК ДатаГрафика
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ %1
		|		КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
		|	ИЗ
		|		РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|	ГДЕ
		|		КалендарныеГрафики.Календарь = &Календарь
		|		И КалендарныеГрафики.ДеньВключенВГрафик
		|		И КалендарныеГрафики.ДатаГрафика < &ДатаОт
		|	
		|	УПОРЯДОЧИТЬ ПО
		|		ДатаГрафика УБЫВ) КАК ВложенныйЗапрос";
		
		Запрос.Текст = СтрШаблон(ТекстЗапроса, Формат(Макс(КоличествоДней, -КоличествоДней), "ЧГ="));
		Запрос.УстановитьПараметр("ДатаОт", НачалоДня(ДатаОт));
		Запрос.УстановитьПараметр("Календарь", Календарь);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.ДатаГрафика) Тогда
			Возврат Выборка.ДатаГрафика;	
		Иначе			
			Если ВызыватьИсключение Тогда
				
				ТекстСообщения = 
					НСтр("ru = 'Невозможно определить ближайшую рабочую дату для даты %1, возможно, график работы не заполнен.'");
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
					Формат(Выборка.ДатаГрафика, "ДЛФ=D"));
			Иначе
				
				Возврат Неопределено;
				
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецФункции

#КонецОбласти

#Область РаботаСШаблонамиСообщений

// Возвращает структуру с текстами добавленного комментария.
//
// Параметры:
//	Источник - СправочникСсылка.Комментарии - исходный комментарий.
//
// Возвращаемое значение:
//	Структура - структура с результатом.
//		* ТекстHTML - представление в формате HTML.
//		* Текст - строковое представление.
//
Функция ПараметрыШаблонаСообщенияДобавленныйКомментарий(Знач Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат 			 = Новый Структура("ТекстHTML, Текст", "", "");
	РезультатHTML        = Источник.ТекстHTML;
	
	Если ПустаяСтрока(РезультатHTML) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Добавим тег HTML если он отсутствует. Такие письма могут приходить к примеру с Gmail.
	Если СтрЧислоВхождений(НРег(РезультатHTML),"<html") = 0 Тогда
		Если СтрЧислоВхождений(НРег(РезультатHTML),"<body") = 0 Тогда
			РезультатHTML = "<body>" + РезультатHTML + "</body>"
		КонецЕсли;
		РезультатHTML = "<html>" + РезультатHTML + "</html>"
	КонецЕсли;
	
	// Добавление шапки комментария.
	ТекстСообщения = РезультатHTML;
	ИскомыйТекст   = СтрНайти(ТекстСообщения, "<body");
	ТекстДоbody    = Сред(РезультатHTML, 1, ИскомыйТекст - 1); 
	Если ИскомыйТекст > 0 Тогда
		ТекстСообщения = Сред(ТекстСообщения, ИскомыйТекст + 5);
		Пока ТекстСообщения <> "" И Лев(ТекстСообщения, 1) <> ">" Цикл
			ТекстСообщения = Сред(ТекстСообщения, 2);
		КонецЦикла;
		Если Лев(ТекстСообщения, 1) = ">" Тогда
			ТекстСообщения = Сред(ТекстСообщения, 2);
		КонецЕсли;
		ТекстСообщения = Лев(ТекстСообщения, СтрНайти(ТекстСообщения + "</body", "</body") - 1);
	КонецЕсли;
	ОкончаниеТекста 	= Сред(РезультатHTML, СтрНайти(РезультатHTML, "</body")); 
	ТекстСообщения  	= "<br>" + ТекстСообщения;
	ПредставлениеАвтора = Строка(Источник.Автор);
	ЦветАвтора 			= Комментарии.HexЦветНика(ПредставлениеАвтора);
	ШапкаСообщения  	= "<span style='font-weight:bold;color:" + ЦветАвтора + ";'>" 
		+ СтрЗаменить(ПредставлениеАвтора, " ", "&nbsp;")
		+ " (" + СтрЗаменить(Формат(Источник.Период, "ДФ='дд.ММ.гг ЧЧ:мм'"), " ", "&nbsp;") + ")"  
		+ ?(Источник.Приватный = Истина, " " + НСтр("ru = '[Приватный]'"), "") + "</span><br>";
			
	ТекстСообщения = ШапкаСообщения + СокрЛП(ТекстСообщения) + "<br>";
	
	Пока СтрНайти(ТекстСообщения, "<br><br>") > 0 Цикл
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "<br><br>", "<br>");
	КонецЦикла;
	
	РезультатHTML = ТекстДоbody + "<body>" + ТекстСообщения + ОкончаниеТекста;
	Результат.Вставить("ТекстHTML", ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(РезультатHTML)); 
	
	Попытка
		РезультатТекст = Взаимодействия.ПолучитьОбычныйТекстИзHTML(РезультатHTML);
	Исключение
		РезультатТекст = "";
	КонецПопытки;	
	
	Результат.Вставить("Текст", РезультатТекст);
	
	Возврат Результат;	
	
КонецФункции

// Формирует текст, который можно вставить при отправке в письме инициатору задания с просьбой оценить задание.
//
// Параметры:
//	ИсточникСсылка - ДокументСсылка.Задание - документ задание для которого надо сделать оценку.
//
// Возвращаемое значение:
//	Структура - Структура - результат.
//		* ТекстHTML - Строка - текст в формате HTML.
//		* Текст - Строка - текст в формате HTML.
//
Функция ПараметрыШаблонаСообщенияМеханизмОценкиВыполнения(Знач ИсточникСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("ТекстHTML, Текст");
	
	Если НЕ ЗначениеЗаполнено(ИсточникСсылка) Тогда
		Результат.Текст 	= НСтр("ru = 'Не выбран документ Задание'");
		Результат.ТекстHTML = СтрШаблон("<p>%1</p>", Результат.Текст);
		Возврат Результат;
	КонецЕсли;
		
	СпособУстановкиОценки = УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("СпособУстановкиОценкиЗаданияВПисьме");
	Попытка
		мЦветПовторногоОткрытия = РаботаСЦветомКлиентСервер.HexВЦвет(
			Справочники.ОценкиЗаданий.ПовторноеОткрытие.ЦветТекста);
		мЦветТекстаПовторногоОткрытияHTML = мЦветПовторногоОткрытия;
	Исключение
		мЦветТекстаПовторногоОткрытияHTML = "blue";
	КонецПопытки;
		
	Результат.ТекстHTML = "<div style=""display:block;"" align=""center""><div style=""display:block;width:100%;"">";
	Результат.Текст 	= 
		НСтр("ru = 'Для установки оценки необходимо перейти по соответствующей ссылке рядом с оценкой'") + Символы.ПС;
		
	ТаблицаОценок = ЗаданияСервер.ПолучитьТаблицуОценок(ИсточникСсылка);
	Для Каждого СтрокаОценки Из ТаблицаОценок Цикл
		Результат.ТекстHTML = Результат.ТекстHTML + СтрокаОценки.ТекстHTML;
		Результат.Текст 	= Результат.Текст + СтрокаОценки.Текст;
	КонецЦикла;
	
	Результат.ТекстHTML = Результат.ТекстHTML + "</div></div>";
	
	Если СпособУстановкиОценки = Перечисления.СпособУстановкиОценкиЗаданияВПисьме.ЧерезЛичныйКабинет Тогда
	
		ОтносительныйУРЛСтраницыДобавленияКомментария = 
			УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ЛичныйКабинетДобавлениеКомментария");
		
		АдресНовогоКомментария = ЗаданияСервер.АдресВебСервераДляОткрытияЗаданияИзПисьмаДляОценкиЗаданий()
			+ "/hs/score/" + ОтносительныйУРЛСтраницыДобавленияКомментария + "?id=" 
			+ Строка(ИсточникСсылка.УникальныйИдентификатор()) + "&name=comment";
			
		Результат.ТекстHTML = Результат.ТекстHTML
			+ "<div style=""display:inline-block;width:100%;padding-top:10px;"">"
			+ СтрШаблон(НСтр("ru = 'Если Ваша проблема не решена перейдите по <a href=""%1"" target=""_blank"" style=""color:%2;"">ссылке и оставьте комментарий</a>, либо ответьте на это письмо указав причину, почему задача не является выполненной.'"),
				АдресНовогоКомментария, мЦветТекстаПовторногоОткрытияHTML) + "</div>";
			
		Результат.Текст = Результат.Текст
			+ СтрШаблон(НСтр("ru = 'Если Ваша проблема не решена перейдите по ссылке %1 и оставьте комментарий, либо ответьте на это письмо указав причину, почему задача не является выполненной.'"),
				АдресНовогоКомментария)
			+ Символы.ПС;
			
	Иначе
		
		Результат.ТекстHTML = Результат.ТекстHTML
			+ "<div style=""display:inline-block;width:100%;padding-top:10px;"">"
			+ НСтр("ru = 'Если Ваша проблема не решена, ответьте на это письмо не меняя тему, а в тексте письма укажите причину, почему задача не является выполненной.'")
			+ "</div>";
			
		Результат.Текст = Результат.Текст
			+ НСтр("ru = 'Если Ваша проблема не решена, ответьте на это письмо не меняя тему, а в тексте письма укажите причину, почему задача не является выполненной.'");
		
	КонецЕсли;
	
	Результат.ТекстHTML = Результат.ТекстHTML + "</div>";
		
	Возврат Результат;	
	
КонецФункции

// Возвращает ссылку на документ "Задание" личного кабинета.
//
// Параметры:
//	ИсточникСсылка - ДокументСсылка.Задание - исходный документ
//
// Возвращаемое значение:
//	Строка - ссылка на документ вида https://localhost/it/hs/lk/ticket.html?id=6f7ee1dc-c634-4262-a437-918a692692cc
//
Функция ПараметрыШаблонаСообщенияВнешняяСсылкаНаОбъектВЛичномКабинете(Знач ИсточникСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	АдресПубликацииИнформационнойБазыВИнтернете	= 
		УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("АдресПубликацииИнформационнойБазыВИнтернете");
	
	Если ПустаяСтрока(АдресПубликацииИнформационнойБазыВИнтернете) Тогда
		АдресОбъекта = 
			НСтр("ru = 'Не указан адрес веб-сервера в настройках параметров учета'");
			
	Иначе
		АдресОбъекта = АдресПубликацииИнформационнойБазыВИнтернете;
			
		Если Прав(АдресОбъекта, 1) <> "/" Тогда
			АдресОбъекта = АдресОбъекта	+ "/";
		КонецЕсли;
			
		АдресОбъекта = АдресОбъекта	+ "hs/lk/ticket.html?id=" + Строка(ИсточникСсылка.УникальныйИдентификатор());
			
	КонецЕсли;
		
	Возврат АдресОбъекта;
	
КонецФункции

// Возвращает ссылку на документ "Задание" для локальной сети.
//
// Параметры:
//	ИсточникСсылка - ДокументСсылка.Задание - исходный документ
//
// Возвращаемое значение:
//	Строка - ссылка на документ вида https://localhost/it/hs/lk/ticket.html?id=6f7ee1dc-c634-4262-a437-918a692692cc
//
Функция ПараметрыШаблонаСообщенияЛокальнаяСсылкаНаОбъект(Знач ИсточникСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	АдресПубликацииИнформационнойБазыВЛокальнойСети	= 
		УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("АдресПубликацииИнформационнойБазыВЛокальнойСети");
	
	Если ПустаяСтрока(АдресПубликацииИнформационнойБазыВЛокальнойСети) Тогда
		АдресОбъекта = НСтр("ru = 'Не указан локальный адрес в настройках параметров учета'");			
	Иначе
		АдресОбъекта = АдресПубликацииИнформационнойБазыВЛокальнойСети;				                          
		АдресОбъекта = АдресОбъекта	+ "#" +  ПолучитьНавигационнуюСсылку(ИсточникСсылка);			
	КонецЕсли;
		
	Возврат АдресОбъекта;
	
КонецФункции

Функция ПараметрыШаблонаСообщенияОписаниеИзмененийЧекЛиста(Знач СтруктураПравилаСобытия, Знач ИсточникСтруктура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат 	   = Новый Структура("ТекстHTML, Текст", "", "");
	РезультатHTML  = "";
	РезультатТекст = "";	
	ЧекЛист        = ИсточникСтруктура.ЧекЛист.Выгрузить();
	
	КонстВыполнено = НСтр("ru = 'Выполнено'");
	КонстОписание  = НСтр("ru = 'Описание'");
	КонстДатаАвтор = НСтр("ru = 'Дата, автор'");
	
	Если СтруктураПравилаСобытия.ЭтоНовый Тогда
		РезультатHTML = 
			"<table border=""1"" width=70%>
			|<tr>
			|<th>№</th>			
			|<th>" + КонстВыполнено + "</th>
			|<th>" + КонстОписание + "</th>
			|<th>" + КонстДатаАвтор + "</th>
			|</tr>";
		РезультатТекст = "№" + Символы.Таб
						+ КонстВыполнено + Символы.Таб
						+ КонстОписание + Символы.Таб
						+ КонстДатаАвтор + Символы.ПС;	
		Для Каждого СтрокаТаблицы Из ЧекЛист Цикл
			РезультатHTML = РезультатHTML
				+ "<tr>
				|<td>" + СтрокаТаблицы.НомерСтроки + "</td>
				|<td>" + ?(СтрокаТаблицы.Выполнено, "&#9745;", "&#9744;") + "</td>
				|<td>" + СтрокаТаблицы.Описание + "</td>
				|<td>" + Строка(СтрокаТаблицы.Дата) + "," + Строка(СтрокаТаблицы.Автор) + "</td>
				|</tr>";
				
			РезультатТекст = РезультатТекст
						+ СтрокаТаблицы.НомерСтроки + Символы.Таб
						+ ?(СтрокаТаблицы.Выполнено, "☑", "☐") + Символы.Таб
						+ СтрокаТаблицы.Описание + Символы.Таб
						+ Строка(СтрокаТаблицы.Дата) + "," + Строка(СтрокаТаблицы.Автор) + Символы.ПС;	
		КонецЦикла;
		РезультатHTML = РезультатHTML + "</table>";
		
	Иначе
		
		Если НЕ СтруктураПравилаСобытия.Свойство("ИсточникПередЗаписью") Тогда
			Возврат Результат;
		КонецЕсли;
		
		ИсточникПередЗаписью = СтруктураПравилаСобытия.ИсточникПередЗаписью;
		ЧекЛистПередЗаписью  = ИсточникПередЗаписью.ЧекЛист;
		Стр = "";
		СтрТекст = "";
		// Проверим изменения, добавления.
		Для Индекс1 = 1 По ЧекЛистПередЗаписью.Количество() Цикл
			СтрокаПередЗаписью = ЧекЛистПередЗаписью[Индекс1 - 1];
			Если ЧекЛист.Количество() < Индекс1 Тогда
				// В ЧекЛист удалено.
				Стр = Стр
					+ "<tr style=""color:red;"">
					|<td><s>" + Строка(Индекс1) + "</s></td>
					|<td><s>" + ?(СтрокаПередЗаписью.Выполнено, "&#9745;", "&#9744;") + "</s></td>
					|<td><s>" + СтрокаПередЗаписью.Описание + "</s></td>
					|<td><s>" + Строка(СтрокаПередЗаписью.Дата) + ", " + Строка(СтрокаПередЗаписью.Автор) + "</s></td>
					|</tr>";
				СтрТекст = СтрТекст 
					+ НСтр("ru = 'Строка удалена'") + " ->" + Строка(Индекс1) + Символы.Таб
					+ ?(СтрокаПередЗаписью.Выполнено, "☑", "☐") + Символы.Таб
					+ СтрокаПередЗаписью.Описание + Символы.Таб
					+ Строка(СтрокаПередЗаписью.Дата) + ", " + Строка(СтрокаПередЗаписью.Автор) + Символы.ПС;	
			Иначе				
				СтрокаПриЗаписи = ЧекЛист[Индекс1 - 1];
				// изменено, без изменений.
				Если СтрокаПередЗаписью.Выполнено <> СтрокаПриЗаписи.Выполнено
					ИЛИ СтрокаПередЗаписью.Описание <> СтрокаПриЗаписи.Описание
					ИЛИ СтрокаПередЗаписью.Дата <> СтрокаПриЗаписи.Дата
					ИЛИ СтрокаПередЗаписью.Автор <> СтрокаПриЗаписи.Автор Тогда
				Стр = Стр
					+ "<tr style='color:blue;'>
					|<td>" + Строка(Индекс1) + "</td>
					|<td>" + ?(СтрокаПередЗаписью.Выполнено <> СтрокаПриЗаписи.Выполнено, 
						"<s>" + ?(СтрокаПередЗаписью.Выполнено, "&#9745;", "&#9744;") + "</s> " 
						+ ?(СтрокаПриЗаписи.Выполнено, "&#9745;", "&#9744;"),
						?(СтрокаПриЗаписи.Выполнено, "&#9745;", "&#9744;")) + "</td>
					|<td>" + ?(СтрокаПередЗаписью.Описание <> СтрокаПриЗаписи.Описание, 
						"<s>" + СтрокаПередЗаписью.Описание + "</s> " 
						+ СтрокаПриЗаписи.Описание, СтрокаПриЗаписи.Описание) + "</td>
					|<td>" + ?(СтрокаПередЗаписью.Дата <> СтрокаПриЗаписи.Дата 
						ИЛИ СтрокаПередЗаписью.Автор <> СтрокаПриЗаписи.Автор, 
						"<s>" + Строка(СтрокаПередЗаписью.Дата) + ", " + СтрокаПередЗаписью.Автор + "</s> " 
							+ Строка(СтрокаПриЗаписи.Дата) + ", " + СтрокаПриЗаписи.Автор,
							Строка(СтрокаПриЗаписи.Дата) + ", " + СтрокаПриЗаписи.Автор)  + "</td>
					|</tr>";
				СтрТекст = СтрТекст
					+ "Строка изменена ->" + Строка(Индекс1) + Символы.Таб
					+ ?(СтрокаПередЗаписью.Выполнено <> СтрокаПриЗаписи.Выполнено, 
						" " + НСтр("ru = 'с'") + " <<" + ?(СтрокаПередЗаписью.Выполнено, "☑", "☐") + ">> " 
						+ НСтр("ru = 'на'") + " <<" 
						+ ?(СтрокаПриЗаписи.Выполнено, "☑", "☐") + ">>", 
						?(СтрокаПриЗаписи.Выполнено, "☑", "☐")) 
						+ Символы.Таб
					+ ?(СтрокаПередЗаписью.Описание <> СтрокаПриЗаписи.Описание,
						" c <<" + СтрокаПередЗаписью.Описание 
						+ ">> на <<" + СтрокаПриЗаписи.Описание + ">>",
						СтрокаПриЗаписи.Описание)  + Символы.Таб
					+ ?(СтрокаПередЗаписью.Дата <> СтрокаПриЗаписи.Дата 
						ИЛИ СтрокаПередЗаписью.Автор <> СтрокаПриЗаписи.Автор, 
							" " + НСтр("ru = 'с'") + " <<" + Строка(СтрокаПередЗаписью.Дата) + ", " 
							+ СтрокаПередЗаписью.Автор 
							+ ">> " + НСтр("ru = 'на'") + " <<" + Строка(СтрокаПриЗаписи.Дата) + ", " 
							+ СтрокаПриЗаписи.Автор 
							+ ">>", Строка(СтрокаПриЗаписи.Дата) + ", " + СтрокаПриЗаписи.Автор)  + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Добавлено.
		Для Индекс1 = ЧекЛистПередЗаписью.Количество() + 1 По ЧекЛист.Количество() Цикл			
			СтрокаПриЗаписи = ЧекЛист[Индекс1 - 1];	
			Стр = Стр
				+ "<tr style=""color:green;"">
				|<td>" + Строка(СтрокаПриЗаписи.НомерСтроки) + "</td>
				|<td>" + ?(СтрокаПриЗаписи.Выполнено, "&#9745;", "&#9744;") + "</td>
				|<td>" + СтрокаПриЗаписи.Описание + "</td>
				|<td>" + Строка(СтрокаПриЗаписи.Дата) + ", " + СтрокаПриЗаписи.Автор + "</td>
				|</tr>";
				
			СтрТекст = СтрТекст 
				+ "Строка добавлена ->" + Строка(СтрокаПриЗаписи.НомерСтроки) + Символы.Таб
				+ ?(СтрокаПриЗаписи.Выполнено, "☑", "☐") + Символы.Таб
				+ СтрокаПриЗаписи.Описание + Символы.Таб
				+ Строка(СтрокаПриЗаписи.Дата) + ", " + Строка(СтрокаПриЗаписи.Автор) + Символы.ПС;	
		КонецЦикла;
		
		Если Не ПустаяСтрока(Стр) Тогда
			РезультатHTML = 
				"<table border=""1"" width=70%>
				|<tr>
				|<th>№</th>				
				|<th>" + КонстВыполнено + "</th>
				|<th>" + КонстОписание + "</th>
				|<th>" + КонстДатаАвтор + "</th>
				|</tr>" + Стр + "</table>";
		КонецЕсли;
		Если Не ПустаяСтрока(СтрТекст) Тогда
			РезультатТекст = "№" + Символы.Таб
						+ КонстВыполнено + Символы.Таб
						+ КонстОписание + Символы.Таб
						+ КонстДатаАвтор + Символы.ПС
						+ СтрТекст;
		КонецЕсли;	
	КонецЕсли;
	
	Результат.Вставить("ТекстHTML", РезультатHTML);
	Результат.Вставить("Текст", 	РезультатТекст);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыШаблонаСообщенияОписаниеЗаданияHTML(Знач ИсточникСтруктура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатHTML         = ИсточникСтруктура.ТекстHTML;
	Если Не ПустаяСтрока(РезультатHTML) Тогда
		// Добавим тег HTML если он отсутствует. Такие письма могут приходить к примеру с Gmail. 	
		Если СтрЧислоВхождений(НРег(РезультатHTML),"<html") = 0 Тогда
			Если СтрЧислоВхождений(НРег(РезультатHTML),"<body") = 0 Тогда
				РезультатHTML = "<body>" + РезультатHTML + "</body>"
			КонецЕсли;
			РезультатHTML = "<html>" + РезультатHTML + "</html>"
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(РезультатHTML);
	
КонецФункции

Функция ПараметрыШаблонаСообщенияПредыдущийИсполнитель(Знач СтруктураПравилаСобытия, Знач Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Справочники.Пользователи.ПустаяСсылка();
	Если СтруктураПравилаСобытия.ЭтоНовый Тогда
		Возврат Результат;
		
	Иначе
		
		Если НЕ СтруктураПравилаСобытия.Свойство("ИсточникПередЗаписью") Тогда
			Возврат Результат;
		КонецЕсли;
		
		ИсточникПередЗаписью = СтруктураПравилаСобытия.ИсточникПередЗаписью;
		Результат            = ИсточникПередЗаписью.ТекущийИсполнитель;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыШаблонаСообщенияСодержимоеТабличнойЧасти(Знач ИсточникСтруктура) Экспорт	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Текст, HTML", "", "");
	ТЗНоменклатура = ИсточникСтруктура.Номенклатура.Выгрузить();
	Если ТЗНоменклатура.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;	
	
	РазделительТекст 	   = Символы.ПС;
	ОткрытиеВыделенияТекст = "";
	ЗакрытиеВыделенияТекст = "";
	РазделительHTML 	   = "<br>";
	ОткрытиеВыделенияHTML  = "<b>";
	ЗакрытиеВыделенияHTML  = "</b>";
		
	ОписаниеТекст = "";
	ОписаниеHTML  = "";
	Для Каждого Строки Из ТЗНоменклатура Цикл
		
		ОписаниеТекст = ОписаниеТекст + Строка(Строки.НомерСтроки) + ". " + ОткрытиеВыделенияТекст 
			+ Строка(Строки.Номенклатура) + ЗакрытиеВыделенияТекст +  " - "
			+ Строка(Строки.Количество) + " " + Строка(Строки.ЕдиницаИзмерения) + РазделительТекст;
			
		ОписаниеHTML = ОписаниеHTML + Строка(Строки.НомерСтроки) + ". " + ОткрытиеВыделенияHTML 
			+ Строка(Строки.Номенклатура) + ЗакрытиеВыделенияHTML +  " - " 
			+ Строка(Строки.Количество) + " " + Строка(Строки.ЕдиницаИзмерения) +  РазделительHTML;
				
	КонецЦикла;
	
	Результат.Вставить("Текст", ОписаниеТекст);
	Результат.Вставить("HTML",  ОписаниеHTML);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру с краткой историей задания.
//
// Параметры:
//	Источник - ДокументСсылка.Задание - исходный документ.
//	Пользователь - пользователь или другой тип, которому отправляем уведомление
//	ПоВозрастанию - Булево - как будет выведена краткая история по возрастанию или убыванию
//
// Возвращаемое значение:
//	Структура - структра с текстами.
//		* ТекстHTML - текст HTML с кратким описанием изменений по заданию.
//		* Текст - обычный текст с кратким описанием изменений по заданию.
//
Функция ПараметрыШаблонаСообщенияКраткаяИсторияЗадания(Знач Источник, Знач Пользователь, 
	Знач ПоВозрастанию = Истина) Экспорт
	
	// ToDo:
	// 1. Что делать с картинками? Удалить или выводить?
	// 2. В тексте много тегов HTML, BODY их надо вычленить
	
	// Описание задания.
	// Исходная таблица событий.
	ТаблицаСобытий = Новый ТаблицаЗначений();
	ТаблицаСобытий.Колонки.Добавить("ДатаСобытия");
	ТаблицаСобытий.Колонки.Добавить("НомерСобытия");
	ТаблицаСобытий.Колонки.Добавить("ТекстHTML");
	ТаблицаСобытий.Колонки.Добавить("Текст");
	ТаблицаСобытий.Колонки.Добавить("ПереводСтроки");
	ФорматДаты = "ДФ='dd.MM.yy HH:mm'";
	
	// Заявка создана.
	ТекстСобытия = СтрШаблон(НСтр("ru = '%1 - Создано задание №%2'"), Формат(Источник.Дата, ФорматДаты),
		УправлениеITОтделом8УФ.ДокументНомерЧислом(Источник.Номер));
	ТекстСобытияHTML = СтрШаблон(НСтр("ru = '<b>%1</b> Создано задание №%2'"), Формат(Источник.Дата, ФорматДаты),
		УправлениеITОтделом8УФ.ДокументНомерЧислом(Источник.Номер));
	Если НЕ ПустаяСтрока(Источник.ТекстHTML) Тогда
		ТекстСобытияHTML = ТекстСобытияHTML + "<br>" + Источник.ТекстHTML;
		ТекстСобытия = ТекстСобытия + Символы.ПС + Источник.Описание;
	КонецЕсли;
			
	ДобавитьСтрокуВТаблицуИстории(ТаблицаСобытий, Источник.ДатаСоздания, ТекстСобытияHTML, ТекстСобытия);
			
	// Назначение и переназначение исполнителей.
	Для Каждого Строки Из Источник.Исполнители Цикл
		
		ТекстИсполнитель = РаботаСHTML.ОбработатьТеги(Строка(Строки.Исполнитель));
		Если ПустаяСтрока(ТекстИсполнитель) Тогда
			ТекстИсполнитель = РаботаСHTML.ОбработатьТеги(НСтр("ru = '<Не выбран>'"));
		Иначе
			ТекстИсполнитель = "<span style='color:" + Комментарии.HexЦветНика(ТекстИсполнитель) + "'>" 
				+ ТекстИсполнитель + "</span>";
		КонецЕсли;
		
		ДобавитьСтрокуВТаблицуИстории(ТаблицаСобытий, Строки.ДатаНачала,
			СтрШаблон(НСтр("ru = '<b>%1</b> <b>%2</b> новый исполнитель'"),
				Формат(Строки.ДатаНачала, ФорматДаты),
				ТекстИсполнитель),
			СтрШаблон(НСтр("ru = '%1 - %2 новый исполнитель'"),
				Формат(Строки.ДатаНачала, ФорматДаты),
				ТекстИсполнитель),				
			Строки.НомерСтроки);
		
	КонецЦикла;
	
	// Изменение этапов (тут не соответствие, у вас статус, у нас этап в задании. В этапе есть статус, но это немного не то.
	мСправочникиЭтапыПроцессовНовый = Справочники.ЭтапыПроцессов.Новый;
	Для Каждого Строки Из Источник.Этапы Цикл
		
		// Пропускаем этап "Новый".
		Этап = Строки.Этап;
		Если Этап = мСправочникиЭтапыПроцессовНовый Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьСтрокуВТаблицуИстории(ТаблицаСобытий, Строки.ДатаНачала,
			СтрШаблон(НСтр("ru = '<b>%1</b> Статус задания ""%2""'"),
				Формат(Строки.ДатаНачала, ФорматДаты),
				РаботаСHTML.ОбработатьТеги(Строка(Этап))),
			СтрШаблон(НСтр("ru = '%1 - Статус задания ""%2""'"),
				Формат(Строки.ДатаНачала, ФорматДаты),
				Строка(Этап)),
			Строки.НомерСтроки);
		
	КонецЦикла;
	
	// Добавление комментариев. Важно учесть, что комментарии могут быть приватными и текст с историей заявки будет у каждого свой.
	// Длинные комментарии так же добавляются.
	МассивКомментариев = Комментарии.МассивКомментариевДоступныхПользователю(Источник.Ссылка, Пользователь);
	Индекс = 1;
	Для Каждого СтруктураКомментария Из МассивКомментариев Цикл
			
		ПараметрыКомментария = Неопределено;
		ПрикрепленныеФайлы = "";
		ПрикрепленныеФайлыHTML = "";
		Для Каждого Файл Из СтруктураКомментария.Файлы Цикл
			
			ПрикрепленныеФайлы = ПрикрепленныеФайлы
				+ ?(ПустаяСтрока(ПрикрепленныеФайлы), "", ", ")
				+ СтрШаблон("%1.%2 (%3)", Файл.Наименование, Файл.Расширение, 
					Комментарии.АвтоРазмерФайла(Файл.Размер));
			ПрикрепленныеФайлыHTML = ПрикрепленныеФайлыHTML
				+ ?(ПустаяСтрока(ПрикрепленныеФайлыHTML), "", ", ")
				+ СтрШаблон("%1.%2 (%3)", РаботаСHTML.ОбработатьТеги(Файл.Наименование), Файл.Расширение, 
					Комментарии.АвтоРазмерФайла(Файл.Размер));
			
		КонецЦикла;	
		
		Текст = СтруктураКомментария.Текст;
		Текст = СтрШаблон(НСтр("ru = '%1 - %2 добавлен комментарий: %3'"),
					Формат(СтруктураКомментария.Период, ФорматДаты),
					СтруктураКомментария.АвторПредставление,
					Текст);
		Если НЕ ПустаяСтрока(ПрикрепленныеФайлы) Тогда
			Текст = Текст + Символы.ПС
				+ СтрШаблон(НСтр("ru = 'Вложения: %1'"), ПрикрепленныеФайлы);
		КонецЕсли;
		
		ТекстHTML = РаботаСHTML.ОбработатьТекстHTML(СтруктураКомментария, ПараметрыКомментария);
		ТекстHTML = РаботаСHTML.ТекстТелаДокумента(ТекстHTML);		
		ТекстHTML = СтрШаблон(НСтр("ru = '<b>%1</b> <b>%2</b> добавлен комментарий: %3'"),
				Формат(СтруктураКомментария.Период, ФорматДаты),
				"<span style='color:" + Комментарии.HexЦветНика(СтруктураКомментария.АвторПредставление) + "'>" 
				+ РаботаСHTML.ОбработатьТеги(СтруктураКомментария.АвторПредставление)
				+ "</span>",
				ТекстHTML);
		Если НЕ ПустаяСтрока(ПрикрепленныеФайлыHTML) Тогда
			ТекстHTML = ТекстHTML
				+ СтрШаблон(НСтр("ru = 'Вложения: %1'"), ПрикрепленныеФайлыHTML) + "<br>";
		КонецЕсли;
		
		ДобавитьСтрокуВТаблицуИстории(ТаблицаСобытий, СтруктураКомментария.Период,
			ТекстHTML,
			Текст,
			Индекс);
			
		Индекс = Индекс + 1;
		
	КонецЦикла;
		
	// Заявка завершена.
	Если Источник.Завершено Тогда
		
		ДобавитьСтрокуВТаблицуИстории(ТаблицаСобытий, Источник.ДатаЗавершения,
			СтрШаблон(НСтр("ru = '<b>%1</b> Задание завершено'"),			
				Формат(Источник.ДатаЗавершения, ФорматДаты)), 
			СтрШаблон(НСтр("ru = '%1 - Задание завершено'"),			
				Формат(Источник.ДатаЗавершения, ФорматДаты)), 
			999);
		
	КонецЕсли;
	
	// Сортируем по дате и номеру события (если в одной дате было несколько событий).
	Если ПоВозрастанию Тогда
		ТаблицаСобытий.Сортировать("ДатаСобытия, НомерСобытия");
	Иначе
		ТаблицаСобытий.Сортировать("ДатаСобытия Убыв, НомерСобытия Убыв");
	КонецЕсли;
	
	// Заполняем результат.
	Текст = "";
	ТекстHTML = "";
	Для Индекс = 0 По ТаблицаСобытий.Количество() - 1 Цикл
		
		Строки = ТаблицаСобытий.Получить(Индекс);
		
		Если Индекс = ТаблицаСобытий.Количество() - 1 Тогда
			ПереводСтроки = Ложь;
		Иначе
			ПереводСтроки = Истина;
			Если СтрДлина(Строки.ТекстHTML) > 6 Тогда
				ПоследниеСимволы = НРег(Прав(Строки.ТекстHTML, 6));
				ПереводСтроки = СтрНайти(ПоследниеСимволы, "<br>") = 0
					И СтрНайти(ПоследниеСимволы, "</p>") = 0
					И СтрНайти(ПоследниеСимволы, "<br />") = 0
					И СтрНайти(ПоследниеСимволы, "<br/>") = 0
					И СтрНайти(ПоследниеСимволы, "</div>") = 0;
			КонецЕсли;
		КонецЕсли;
	
		ТекстHTML = ТекстHTML + Строки.ТекстHTML + ?(ПереводСтроки = Истина, "<br>", "");
		Текст = Текст + Строки.Текст + Символы.ПС;
				
	КонецЦикла;
	
	Возврат Новый Структура("Текст, ТекстHTML", Текст, ТекстHTML);
		
КонецФункции

#КонецОбласти

#Область Действия

Процедура ДействиеПроизвольныйАлгоритмВФоне(Знач СтруктураДанных, Знач Источник = Неопределено)
	
	Отказ = Ложь;
	Массив = Новый Массив;
	Массив.Добавить(СтруктураДанных);
	Массив.Добавить(?(Источник <> Неопределено, СериализоватьОбъект(Источник), Неопределено));
	Массив.Добавить(Отказ);
	ФоновыеЗадания.Выполнить("ПравилаСобытийСервер.ДействиеПроизвольныйАлгоритм",
		Массив,
		Строка(Новый УникальныйИдентификатор),
		СтрШаблон(НСтр("ru = 'Фоновое выполнение %1'"), СтруктураДанных.НаименованиеДействия));	
	
КонецПроцедуры

Процедура ДействиеПроизвольныйАлгоритм(Знач СтруктураДанных, Знач Источник = Неопределено, Отказ) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = ЗначениеТаймера();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Попытка
		Если Источник <> Неопределено Тогда
			Если ТипЗнч(Источник) <> Тип("РегистрСведенийНаборЗаписей.Характеристики") Тогда
				// Для комментариев используем владельца комментария.
				Если ТипЗнч(Источник) = Тип("СправочникОбъект.Комментарии") Тогда
					Если ЗначениеЗаполнено(Источник.ВладелецКомментария) Тогда 
						Источник = Источник.ВладелецКомментария.ПолучитьОбъект();
					Иначе
						Возврат;
					КонецЕсли;	
				ИначеЕсли Источник.Ссылка = Источник Тогда
					// Передана ссылка, получим объект.
					Источник = Источник.ПолучитьОбъект();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения действия для правила %1 (действие: %2): %3'"),
			СтруктураДанных.Представление, 
			Строка(СтруктураДанных.Действие), 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Правила событий'"), 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Справочники.ДействияПравилСобытий,
			ТекстОшибки);
			
		РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
			НСтр("ru = 'Ошибка выполнения действия правила'"), 
			СтруктураДанных.Действие,
			,
			ТекстОшибки,
			Перечисления.ТипСобытияЖурналаПравилВыполнения.Ошибка);
					
		Возврат;
		
	КонецПопытки;
	
	ДатаВыполненияДействия = ТекущаяДатаСеанса();
	
	Попытка
		
		Выполнить(СтруктураДанных.КодДействия);
		
		РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
			НСтр("ru = 'Выполнение произвольного алгоритма'"), 
			СтруктураДанных.Действие,
			ДатаВыполненияДействия,
			НСтр("ru = 'Произвольный алгоритм выполнен'"), 
			Перечисления.ТипСобытияЖурналаПравилВыполнения.Информация);

	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения действия для правила %1 (действие: %2): %3'"),
			СтруктураДанных.Представление,
			Строка(СтруктураДанных.Действие),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Правила событий'"), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ДействияПравилСобытий,
			ТекстОшибки);
			
		РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
			НСтр("ru = 'Ошибка выполнения действия правила'"), 
			СтруктураДанных.Действие,
			,
			ТекстОшибки,
			Перечисления.ТипСобытияЖурналаПравилВыполнения.Ошибка);
		
	КонецПопытки;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗаписатьЗамер("ПравилаСобытийВыполнениеПроизвольногоАлгоритма", ЗначениеТаймера);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

Процедура ДействиеУстановкаРеквизитовОбъекта(Знач СтруктураДанных, Знач Источник = Неопределено)  Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = ЗначениеТаймера();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Попытка
		
		// Для комментариев используем владельца комментария.
		Если ТипЗнч(Источник) = Тип("СправочникОбъект.Комментарии") Тогда
			Если ЗначениеЗаполнено(Источник.ВладелецКомментария) Тогда 
				Источник = Источник.ВладелецКомментария.ПолучитьОбъект();
			Иначе
				Возврат;
			КонецЕсли;	
		ИначеЕсли Источник.Ссылка = Источник Тогда
			// Передана ссылка, получим объект.
			Источник = Источник.ПолучитьОбъект();
		КонецЕсли;	
		
	Исключение
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения действия для правила %1 (действие: %2): %3'"), 
			СтруктураДанных.Представление, 
			Строка(СтруктураДанных.Действие), 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Правила событий'"), 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Справочники.ДействияПравилСобытий, 
			ТекстОшибки);
			
		РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
			НСтр("ru = 'Ошибка выполнения действия правила'"), 
			СтруктураДанных.Действие,
			,
			ТекстОшибки,
			Перечисления.ТипСобытияЖурналаПравилВыполнения.Ошибка);
		Возврат;
		
	КонецПопытки;	
	
	// Заполняем реквизитами Источник.
	ВыполнитьЗаписьОбъекта = Истина;
	ВыборкаЗначений = СтруктураДанных.Значения;
	Если ВыборкаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗначения Из ВыборкаЗначений Цикл
		
		ИмяРеквизита 		= СтрокаЗначения.Реквизит;
		ЗначениеРеквизита 	= СтрокаЗначения.Значение;
		
		Если ИмяРеквизита = "[Сообщить пользователю]" Тогда
			ОбщегоНазначения.СообщитьПользователю(Строка(ЗначениеРеквизита));
		Иначе
			Попытка
				
				Источник[ИмяРеквизита] = СтрокаЗначения.Значение;
				
			Исключение
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка выполнения действия для правила %1 (действие: %2, Реквизит = %3 Значения = %4): %5'"),
					СтруктураДанных.Представление,
					Строка(СтруктураДанных.Действие),
					Строка(ИмяРеквизита),
					Строка(ЗначениеРеквизита),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Правила событий'"), 
					УровеньЖурналаРегистрации.Ошибка, 
					Метаданные.Справочники.ДействияПравилСобытий, 
					ТекстОшибки);
					
				РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
					НСтр("ru = 'Ошибка выполнения действия правила'"), 
					СтруктураДанных.Действие,
					,
					ТекстОшибки,
					Перечисления.ТипСобытияЖурналаПравилВыполнения.Ошибка);
					
				ВыполнитьЗаписьОбъекта = Ложь;
				Прервать;
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ВыполнитьЗаписьОбъекта Тогда
		Источник.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина); // << Не допустим рекурсии.
		Источник.Записать();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗаписатьЗамер("ПравилаСобытийУстановкаРеквизитов", ЗначениеТаймера);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	
	
КонецПроцедуры

Процедура ДействиеПроверкаОбязательныхРеквизитов(Знач СтруктураДанных, Знач Источник = Неопределено, Отказ) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = ЗначениеТаймера();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОбязательныеРеквизиты = СтруктураДанных.ОбязательныеРеквизиты;
	Если ОбязательныеРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОбязательныеРеквизиты Из ОбязательныеРеквизиты Цикл
		
		МетаданныеИсточника	= Источник.Метаданные();
		ИмяРеквизита 		= СтрокаОбязательныеРеквизиты.Реквизит;
		ЗначениеРеквизита 	= Источник[ИмяРеквизита];
		ТипРеквизита		= ТипЗнч(ЗначениеРеквизита);
		СинонимРеквизита	= ?(ПустаяСтрока(МетаданныеИсточника.Реквизиты[ИмяРеквизита].Синоним), 
			ИмяРеквизита, МетаданныеИсточника.Реквизиты[ИмяРеквизита].Синоним);
		СтрокаСообщения		= ?(НЕ ПустаяСтрока(СтрокаОбязательныеРеквизиты.СтрокаСообщения), 
			СтрокаОбязательныеРеквизиты.СтрокаСообщения, 
			СтрШаблон(НСтр("ru = 'Обязательный реквизит ""%1"" не заполнен'"), СинонимРеквизита));
		
		Если (ТипРеквизита = Тип("Дата") И ЗначениеРеквизита = Дата(1, 1, 1))
			ИЛИ ТипРеквизита = Тип("Строка") И ПустаяСтрока(ЗначениеРеквизита)
			ИЛИ ТипРеквизита = Тип("Число") И ЗначениеРеквизита = 0
			ИЛИ ТипРеквизита = Тип("Булево") И ЗначениеРеквизита = Ложь Тогда
			
			ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения, Источник, ИмяРеквизита, , Отказ);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения, Источник, ИмяРеквизита, , Отказ);
			
		КонецЕсли;

	КонецЦикла;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗаписатьЗамер("ПравилаСобытийПроверкаОбязательныхРеквизитов", ЗначениеТаймера);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	
	
КонецПроцедуры

Процедура ДействиеОтправкаОповещенияВФоне(Знач СтруктураДанных, Знач Источник = Неопределено,
	СтруктураПравилаСобытия = Неопределено) Экспорт
	
	Массив = Новый Массив;                                                    
	Массив.Добавить(СтруктураДанных);
	Массив.Добавить(?(Источник <> Неопределено, СериализоватьОбъект(Источник), Неопределено));
	Массив.Добавить(СтруктураПравилаСобытия);
	ФоновыеЗадания.Выполнить("ПравилаСобытийСервер.ДействиеОтправкаОповещения",
		Массив,
		Строка(Новый УникальныйИдентификатор),
		СтрШаблон(НСтр("ru = 'Фоновое выполнение %1'"), СтруктураДанных.НаименованиеДействия));

КонецПроцедуры
	
Процедура ДействиеОтправкаОповещения(Знач СтруктураДанных,
	Знач Источник = Неопределено, СтруктураПравилаСобытия = Неопределено) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = ЗначениеТаймера();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	// Вызов из фонового задания.
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		Источник = ВосстановитьОбъект(Источник);
	Иначе
		Источник.ДополнительныеСвойства.Вставить("Ссылка", Источник.Ссылка);
	КонецЕсли;
	
	ТЗПолучателиОповещений = СтруктураДанных.ПолучателиОповещений;
	Если ТЗПолучателиОповещений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Вычисляем список общих реквизитов (единожды по возможности)
	// Значения реквизитов и параметры шаблонов сообщения.
	ДанныеОбъекта = СЛС.ДанныеИсточникаПравилаСобытий(
		ТЗПолучателиОповещений,
		СтруктураДанных, 
		СтруктураДанных.Действие,
		Источник,
		СтруктураПравилаСобытия);
		
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ДанныеОбъектаСоответствие = ДанныеОбъекта.ДанныеОбъектаСоответствие;	
	
	ТипДействия = СтруктураДанных.ТипДействия;
	мТипДействийПравилСобытий = Перечисления.ТипДействийПравилСобытий;
		
	ТЗПолучателиОповещений.Колонки.Добавить("ЗначениеРеквизитаПолучатель");
	ТЗПолучателиОповещений.Колонки.Добавить("ЗначениеРеквизитаУчетнаяЗапись");
	ТЗПолучателиОповещений.Колонки.Добавить("Обработан");
	
	// Контроль по дублированию оповещений.
	ТаблицаУведомляемых = Новый ТаблицаЗначений;
	ТаблицаУведомляемых.Колонки.Добавить("Получатель");
	ТаблицаУведомляемых.Колонки.Добавить("Флаг");
	
	ИсходныеПараметрыШаблона = ДанныеОбъекта.ПараметрыШаблона;
	
	Для Каждого СтрокаПолучатели Из ТЗПолучателиОповещений Цикл
			
		// Находим всех адресатов.
		ТЗСостав = Новый ТаблицаЗначений;
		ТЗСостав.Колонки.Добавить("Адресат");
		Если СтрокаПолучатели.ПолучательВариантЗаполнения = "Указанный" Тогда
			Если ТипЗнч(СтрокаПолучатели.ПолучательЗначение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				Для Каждого СтрокаСостава Из СтрокаПолучатели.ПолучательЗначение.Состав Цикл
					НоваяСтрока 		= ТЗСостав.Добавить();
					НоваяСтрока.Адресат = СтрокаСостава.Пользователь;	
				КонецЦикла;
				СтрокаПолучатели.ЗначениеРеквизитаПолучатель = ТЗСостав;
			Иначе
				НоваяСтрока 		= ТЗСостав.Добавить();
				НоваяСтрока.Адресат = СтрокаПолучатели.ПолучательЗначение;
			КонецЕсли;	
		Иначе	
			Попытка
				ЗначениеСоответствия = ДанныеОбъектаСоответствие[СтрокаПолучатели.ПолучательЗначение];
				Если ТипЗнч(ЗначениеСоответствия) = Тип("ТаблицаЗначений") Тогда
					Для Каждого СтрокиЗначения Из ЗначениеСоответствия Цикл
						НоваяСтрока 		= ТЗСостав.Добавить();
						НоваяСтрока.Адресат = СтрокиЗначения.Адресат;					
					КонецЦикла;
				Иначе
					НоваяСтрока 		= ТЗСостав.Добавить();
					НоваяСтрока.Адресат = ЗначениеСоответствия;
				КонецЕсли;
			Исключение				
			КонецПопытки;
		КонецЕсли;
		
		// Делаем отправку каждому
		Для Каждого СтрокаПолучатель Из ТЗСостав Цикл
			
			// Устанавливаем конкретного адресата.
			СтрокаПолучатели.ЗначениеРеквизитаПолучатель = СтрокаПолучатель.Адресат;
			
			// Вычисляем для него динамические реквизиты и объединяем их с общими.			
			ДанныеОбъекта.ПараметрыШаблона = ИсходныеПараметрыШаблона;
			ДинамическиеПараметры = СЛС.ДинамическиеДанныеИсточникаПравилаСобытий(
				СтрокаПолучатель,
				СтруктураДанных, 
				СтруктураДанных.Действие,
				Источник,
				СтруктураПравилаСобытия,
				ДанныеОбъекта);
				
			Для Каждого КлючЗначние Из ДинамическиеПараметры Цикл				
				ДанныеОбъекта.ПараметрыШаблона.Вставить(КлючЗначние.Ключ, КлючЗначние.Значение);				
			КонецЦикла;
		
			Если ТипДействия = мТипДействийПравилСобытий.ОповещениеПоEmail Тогда
				Если НЕ ПустаяСтрока(СтрокаПолучатели.УчетнаяЗаписьВариантЗаполнения) Тогда
					Если СтрокаПолучатели.УчетнаяЗаписьВариантЗаполнения = "Указанный" Тогда
						СтрокаПолучатели.ЗначениеРеквизитаУчетнаяЗапись = СтрокаПолучатели.УчетнаяЗаписьЗначение;
					ИначеЕсли СтрокаПолучатели.УчетнаяЗаписьВариантЗаполнения = "Реквизит основания" Тогда
						СтрокаПолучатели.ЗначениеРеквизитаУчетнаяЗапись = 
							ДанныеОбъектаСоответствие["УчетнаяЗаписьЭлектроннойПочты"];
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если ТипДействия = мТипДействийПравилСобытий.ОповещениеПоEmail
				ИЛИ ТипДействия = мТипДействийПравилСобытий.ОповещениеTelegram
				ИЛИ ТипДействия = мТипДействийПравилСобытий.ОповещениеПоSMS Тогда
				Если ЗначениеЗаполнено(СтрокаПолучатели.ЗначениеРеквизитаПолучатель) 
					И ЗначениеЗаполнено(СтрокаПолучатели.ШаблонСообщения) Тогда
					СформироватьУведомлениеEMailSMSTelegram(СтрокаПолучатели, СтруктураДанных, ДанныеОбъекта, Источник,
						ТаблицаУведомляемых);
				КонецЕсли;
			Иначе // Создать напоминание.
				Если ЗначениеЗаполнено(СтрокаПолучатели.ЗначениеРеквизитаПолучатель) Тогда
					СформироватьНапоминаниеПользователю(СтрокаПолучатели, СтруктураДанных, ДанныеОбъекта, Источник, 
						ТаблицаУведомляемых);
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗаписатьЗамер("ПравилаСобытийОповещенияПочтыСмс", ЗначениеТаймера);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	
	
КонецПроцедуры

Процедура ДействиеСоздатьДело(Знач СтруктураДанных, Знач Источник = Неопределено) Экспорт
		
	Если ТипЗнч(Источник) <> Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		Возврат;
    КонецЕсли;
    #Если ВнешнееСоединение Тогда
        Возврат;
    #КонецЕсли
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = ЗначениеТаймера();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Пользователь				= СтруктураДанных.ДелаПользователь;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
		
	Inbox						= Справочники.Дела.Inbox(Пользователь);
		
	НовоеДело 					= Справочники.Дела.СоздатьЭлемент();
	НовоеДело.Родитель 			= Inbox;
	НовоеДело.Пользователь 		= Пользователь;

	// Разбираем строку и при необходимости проводим анализ.
    Если СтруктураДанных.ДелаАнализТемы = Истина Тогда        
        #Если ВнешнееСоединение Тогда
            Структура = Новый Структура;
        #Иначе
            Структура = УправлениеДелами.АнализТемы(Источник.Тема);
        #КонецЕсли
		ЗаполнитьЗначенияСвойств(НовоеДело, Структура);
		
		// Если есть контексты.
		Если Структура.МассивКонтекстов.Количество() > 0 Тогда
			Для Каждого Контекст Из Структура.МассивКонтекстов Цикл
				НоваяСтрока 			= НовоеДело.Контексты.Добавить();
				НоваяСтрока.Контекст 	= Контекст;
			КонецЦикла;
		КонецЕсли;
	Иначе
		НовоеДело.Тема = Источник.Тема;
	КонецЕсли;
	
	// Описание				
	Если Источник.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML 
		ИЛИ Источник.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		
		ФД = Новый ФорматированныйДокумент();
		ФД.УстановитьHTML(Источник.ТекстHTML, Новый Структура);
		Текст = ФД.ПолучитьТекст();
		
	Иначе
		
		Текст = Источник.Текст;
		
	КонецЕсли;
	НовоеДело.Описание = Текст;
	НовоеДело.Записать();
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗаписатьЗамер("ПравилаСобытийСозданиеДелаИзПисьма", ЗначениеТаймера);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности		
	
КонецПроцедуры

Процедура ДействиеСоздатьЗаданиеИлиКомментарийЗадания(Знач СтруктураДанных, Знач Источник = Неопределено) Экспорт
	
	Если ТипЗнч(Источник) <> Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = ЗначениеТаймера();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	
	
	УчетнаяЗапись			= Источник.УчетнаяЗапись;
	РеквизитыУчетнойЗаписи 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись,
		"АдресЭлектроннойПочты, ИмяПользователя");
	
	// Проверка создан ли объект по данному приавлу или нет.	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СозданныеОбъектыНаОснованииВходящихПисем.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	РегистрСведений.СозданныеОбъектыНаОснованииВходящихПисем КАК СозданныеОбъектыНаОснованииВходящихПисем
		|ГДЕ
		|	СозданныеОбъектыНаОснованииВходящихПисем.ИдентификаторСообщения = &ИдентификаторСообщения
		|	И СозданныеОбъектыНаОснованииВходящихПисем.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗаписьЭлектроннойПочты";	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", Источник.ИдентификаторСообщения);
	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты", Источник.УчетнаяЗапись);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// Объект уже был создан ранее.
		Возврат;
	КонецЕсли;
	
	ПриоритетыСтрокой = ЗаданияСервер.ПриоритетОпределенияКлиентовИИнициаторов(СтруктураДанных);
	ТекстЗапросаПоискаИнициатора = ЗаданияСервер.ТекстЗапросаИнициаторовСУчетомПриоритета(ПриоритетыСтрокой);
	
	//****************************************************************************************
	// Не найдено в письмах письмо с данным ID, загружаем его анализируя тему письма.
	
	// Анализ, что это письмо не сообщение пользователя в задании.
	ПроверкаНаОтвет = ЗаданияСервер.ПроверитьТемуПисьмаНаОтвет(Источник.Тема);	
	
	Если ПроверкаНаОтвет.ЭтоОтветПользователя = Истина Тогда
		
		// Загружаем текст.
		Текст			= "";
		Если Источник.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML 
			ИЛИ Источник.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			Текст = ?(ПустаяСтрока(Источник.ТекстHTML), Источник.Текст, Источник.ТекстHTML);
			Текст = ЗаданияСервер.ОчиститьHTMLПерепискуОтвета(Текст);
		ИначеЕсли Источник.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
			//@skip-warning
			Текст = ЗаданияСервер.УдалитьТегиИСпецСимволыИзТекста(Источник.Текст);
			Текст = СтрЗаменить(Текст, Символы.ПС, "<br>");
		ИначеЕсли Источник.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
			//@skip-warning
			Текст = ЗаданияСервер.УдалитьТегиИСпецСимволыИзТекста(Источник.Текст);
			Текст = СтрЗаменить(Текст, Символы.ПС, "<br>");
		КонецЕсли;	
		
		// Проверяем необходимо ли создавать комментарий с этим текстом?
		// Дело в том, что комментарий может прислать робот с дублирующимся текстом.
		// Отсеим дубли комментариев.
		// Берем последний комментарий в основании и смотрим на текст нового, он не должен быть равен
		// последнему комментарию основанию от того же автора.
		ДобавитьКомментарий 	= Истина;
		ПоследнийКомментарий 	= Комментарии.ПоследнийКомментарий(ПроверкаНаОтвет.Задание);
		Если ЗначениеЗаполнено(ПоследнийКомментарий) Тогда
			ПоследнийКомментарийРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПоследнийКомментарий, 
				"Автор, ТекстHTML");
			Если ПоследнийКомментарийРеквизиты.Автор = Источник.ОтправительКонтакт
				И ПоследнийКомментарийРеквизиты.ТекстHTML = Текст Тогда
				ДобавитьКомментарий = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавитьКомментарий Тогда
			
			// Обработка приложенных файлов.
			Вложения 			= УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Источник.Ссылка, Ложь);
			КомментарийРодитель = ЗаданияСервер.ПолучитьКомментарийРодительИзТемыПисьма(Источник.Тема);	
			
			СтруктураАвторИнициаторКлиент = АвторИнициаторКлиентПоЭлектронномуАдресу(
				ТекстЗапросаПоискаИнициатора,
				ПриоритетыСтрокой,
				Источник.ОтправительАдрес);
			
			ПараметрыКомментария = Новый Структура();
			ПараметрыКомментария.Вставить("СсылкаНаОбъект", 			ПроверкаНаОтвет.Задание);
			ПараметрыКомментария.Вставить("ТекстСообщения", 			Текст);
			ПараметрыКомментария.Вставить("ДатаСообщения", 				Источник.Дата);
			Если СтруктураАвторИнициаторКлиент.Свойство("Автор") Тогда
				ПараметрыКомментария.Вставить("Автор", 					СтруктураАвторИнициаторКлиент.Автор);
			Иначе
				ПараметрыКомментария.Вставить("Автор", 					Источник.ОтправительКонтакт);
			КонецЕсли;
			ПараметрыКомментария.Вставить("ИдентификаторСообщения", 	Источник.ИдентификаторСообщения);
			ПараметрыКомментария.Вставить("ЗаписыватьДокументОснование",Истина);
			ПараметрыКомментария.Вставить("ПриложенныеФайлы", 			Вложения);
			ПараметрыКомментария.Вставить("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗапись);
			ПараметрыКомментария.Вставить("КомментарийРодитель", 		КомментарийРодитель);
			
			Комментарии.Добавить(ПроверкаНаОтвет.Задание, ПараметрыКомментария);
			
			// Предмет.
			Взаимодействия.УстановитьПредмет(Источник.Ссылка, ПроверкаНаОтвет.Задание, Истина);
			
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка выполнения действия для правила %1 (действие: %2): на основании письма с темой %3 от %4 %5 комментарий по заданию %6 не создан, так как это дублирующее письмо'"),
				СтруктураДанных.Представление,
				Строка(СтруктураДанных.Действие),
				Источник.Тема,
				Строка(Источник.ОтправительКонтакт),
				Источник.Дата,
				Строка(ПроверкаНаОтвет.Задание));
					
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Правила событий'"), 
				УровеньЖурналаРегистрации.Предупреждение, 
				Метаданные.Справочники.ДействияПравилСобытий, 
				ТекстОшибки);
				
			РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка,
				НСтр("ru = 'Ошибка выполнения действия правила'"), 
				СтруктураДанных.Действие,
				,
				ТекстОшибки,
				Перечисления.ТипСобытияЖурналаПравилВыполнения.Предупреждение);
			
		КонецЕсли;
		
		// Задание создано.
		РегистрыСведений.СозданныеОбъектыНаОснованииВходящихПисем.ДобавитьСозданныйОбъект(УчетнаяЗапись, 
			Источник.ИдентификаторСообщения, 
			ТекущаяДатаСеанса());
			
	ИначеЕсли ПроверкаНаОтвет.ЭтоОценкаЗадания = Истина Тогда
		
		ЗаданияСервер.УстановитьОценкуЗаданию(ПроверкаНаОтвет.Задание, ПроверкаНаОтвет.Оценка);		
		// Предмет.
		Взаимодействия.УстановитьПредмет(Источник.Ссылка, ПроверкаНаОтвет.Задание, Истина);

	Иначе
		
		#Область Создание_Нового_Задания
		
		// Создание нового задания.
		НовоеЗадание 						= Документы.Задание.СоздатьДокумент();
		НовоеЗадание.Дата 					= Источник.Дата;
		НовоеЗадание.ДатаСоздания			= НовоеЗадание.Дата;
		НовоеЗадание.УчетнаяЗаписьЭлектроннойПочты = УчетнаяЗапись;	
		НовоеЗадание.Тема 					= ?(ПустаяСтрока(Источник.Тема), НСтр("ru = 'Нет темы'"), Источник.Тема);
		НовоеЗадание.ИдентификаторСообщения = СокрЛП(Источник.ИдентификаторСообщения);
		НовоеЗадание.Комментарий 			= СтрШаблон(НСтр("ru = 'Загружено из %1 <%2> от %3 <%4>'"), 
			СокрЛП(РеквизитыУчетнойЗаписи.ИмяПользователя), СокрЛП(РеквизитыУчетнойЗаписи.АдресЭлектроннойПочты), 
			Источник.ОтправительКонтакт, Источник.ОтправительАдрес);
		НовоеЗадание.СпособСоздания			= Справочники.СпособыСозданияЗаданий.ЭлектроннаяПочта;
		НовоеЗадание.Родитель				= ПроверкаНаОтвет.РодительскоеЗадание;

		// Заполняем данными по умолчанию.
		Попытка
			//@skip-warning
			СЛС.ЗаполнитьШапкуОбъекта(НовоеЗадание);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка СЛС (%1)'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("СЛС", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Задание, ,
				ТекстОшибки);
			РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
				НСтр("ru = 'Ошибка выполнения действия правила'"), 
				СтруктураДанных.Действие,
				,
				ТекстОшибки,
				Перечисления.ТипСобытияЖурналаПравилВыполнения.Ошибка);
		КонецПопытки;
		
		// Установка параметров из учетных записей.
		Если ЗначениеЗаполнено(СтруктураДанных.ТипПроцесса) Тогда
			НовоеЗадание.ТипПроцесса = СтруктураДанных.ТипПроцесса;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.Организация) Тогда
			НовоеЗадание.Организация = СтруктураДанных.Организация;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.Процесс) Тогда
			НовоеЗадание.Процесс = СтруктураДанных.Процесс;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.Исполнитель) Тогда
			НовоеЗадание.ТекущийИсполнитель = СтруктураДанных.Исполнитель;
		КонецЕсли;
		// Влияние.
		Если ЗначениеЗаполнено(СтруктураДанных.Влияние) Тогда
			НовоеЗадание.Влияние = СтруктураДанных.Влияние;
		КонецЕсли;	
		// Срочность указана в самом письме.
		Если Источник.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
			НовоеЗадание.Срочность = Перечисления.Срочность.Высокая;
		ИначеЕсли Источник.Важность = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
			НовоеЗадание.Срочность = Перечисления.Срочность.Низкая;
		Иначе
			Если ЗначениеЗаполнено(СтруктураДанных.Срочность) Тогда
				НовоеЗадание.Срочность = СтруктураДанных.Срочность;
			КонецЕсли;
		КонецЕсли;
		// Приоритет.
		Если ЗначениеЗаполнено(СтруктураДанных.ПриоритетЗадания) Тогда
			НовоеЗадание.Приоритет = СтруктураДанных.ПриоритетЗадания;
		КонецЕсли;	
		Если ЗначениеЗаполнено(СтруктураДанных.Сервис) Тогда
			НовоеЗадание.Сервис = СтруктураДанных.Сервис;
		КонецЕсли;	
		Если ЗначениеЗаполнено(СтруктураДанных.Услуга) Тогда
			НовоеЗадание.Услуга = СтруктураДанных.Услуга;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовоеЗадание.Проект) Тогда
			НовоеЗадание.Проект = СтруктураДанных.Проект;
		КонецЕсли;	
		// Если что-то не заполнилось дозаполняем.
		Если НЕ ЗначениеЗаполнено(НовоеЗадание.Процесс) Тогда
			НовоеЗадание.Процесс = Справочники.Процессы.Обращение;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(НовоеЗадание.ТекущийЭтап) Тогда
			НовоеЗадание.ТекущийЭтап = Справочники.ЭтапыПроцессов.Новый;
		КонецЕсли;
		
		ТипПроцесса = НовоеЗадание.Процесс.ТипПроцесса;
		Если ЗначениеЗаполнено(ТипПроцесса) Тогда
			НовоеЗадание.ТипПроцесса = ТипПроцесса;
		КонецЕсли;
		
		// Подставляем текущего исполнителя.
		Если НЕ ЗначениеЗаполнено(НовоеЗадание.ТекущийИсполнитель) Тогда
			НовоеЗадание.ТекущийИсполнитель = ЗаданияСервер.ПолучитьИсполнителяЗаданияПоУмолчанию(НовоеЗадание.Процесс);
		КонецЕсли;
		
		НовоеЗадание.ПроцентВыполнения = 0;

		СтруктураАвторИнициаторКлиент = АвторИнициаторКлиентПоЭлектронномуАдресу(
			ТекстЗапросаПоискаИнициатора,
			ПриоритетыСтрокой,
			Источник.ОтправительАдрес);
		ЗаполнитьЗначенияСвойств(НовоеЗадание, СтруктураАвторИнициаторКлиент);
		
		// Наблюдатели
		ЗаданияСервер.ДобавитьНаблюдателейКоторыеПодписаныНаВсеНовыеЗадания(НовоеЗадание);
		
		// Добавим наблюдателей из процесса.
		Если ЗначениеЗаполнено(НовоеЗадание.Процесс) Тогда
			
			Для Каждого Н Из НовоеЗадание.Процесс.Наблюдатели Цикл
				НоваяСтрока			= НовоеЗадание.Наблюдатели.Добавить();
				НоваяСтрока.Адресат	= Н.Наблюдатель;
			КонецЦикла;
			
		КонецЕсли;
			
		// Добавление наблюдателей, которые стоят в копии письма.
		Если УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ПриСозданииЗаданийИзПисемДобавлятьНаблюдателейИзПолучателейКопий") = Истина Тогда
            
			// Список возможных наблюдателей.
			МассивПотенциальныхНаблюдателей = Новый Массив;
			Для Каждого Копии Из Источник.ПолучателиКопий Цикл
				Если МассивПотенциальныхНаблюдателей.Найти(Копии.Адрес) = Неопределено Тогда
					МассивПотенциальныхНаблюдателей.Добавить(Копии.Адрес);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Копии Из Источник.ПолучателиПисьма Цикл
				Если МассивПотенциальныхНаблюдателей.Найти(Копии.Адрес) = Неопределено Тогда
					МассивПотенциальныхНаблюдателей.Добавить(Копии.Адрес);
				КонецЕсли;
			КонецЦикла;
			
		    ЗапросКИ 		= Новый Запрос();
		    ЗапросКИ.Текст 	= ТекстЗапросаПоискаИнициатора;
									
			Для Каждого Адрес Из МассивПотенциальныхНаблюдателей Цикл
				
				// Отбрасываем из наблюдателей инициатора и исполнителя и нашу учетную запись.
				Если СокрЛП(НРег(Адрес)) = СокрЛП(НРег(РеквизитыУчетнойЗаписи.АдресЭлектроннойПочты))
					ИЛИ СокрЛП(НРег(Адрес)) = СокрЛП(НРег(Источник.ОтправительАдрес)) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗапросКИ.УстановитьПараметр("АдресЭП", Адрес);

				РезультатКИ = ЗапросКИ.Выполнить();
				Если НЕ РезультатКИ.Пустой() Тогда
					ВыборкаКИ = РезультатКИ.Выбрать();
					Если ВыборкаКИ.Следующий() Тогда
						
						// Добавляем наблюдателя.
						Адресат = ВыборкаКИ.Ссылка;
						Если ЗначениеЗаполнено(Адресат) И Адресат <> НовоеЗадание.Инициатор 
							И НовоеЗадание.Наблюдатели.Найти(Адресат, "Адресат") = Неопределено Тогда
							НовыйНаблюдатель 			= НовоеЗадание.Наблюдатели.Добавить();
							НовыйНаблюдатель.Адресат	= Адресат;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		НовыйУИД	= Новый УникальныйИдентификатор;
		НоваяСсылка	= Документы.Задание.ПолучитьСсылку(НовыйУИД);
		НовоеЗадание.УстановитьСсылкуНового(НоваяСсылка);
		
		// Вложения.
		Вложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Источник.Ссылка, Ложь);
		Если Вложения.Количество() > 0 Тогда
			Для Каждого Элемент Из Вложения Цикл
				Попытка
					ДанныеФайла    = РаботаСФайлами.ДанныеФайла(Элемент.Ссылка);
					ПараметрыФайла = Новый Структура;
					ПараметрыФайла.Вставить("ВладелецФайлов",              НовоеЗадание.ПолучитьСсылкуНового());
					ПараметрыФайла.Вставить("Автор",                       Неопределено);
					ПараметрыФайла.Вставить("ИмяБезРасширения",            ДанныеФайла.Наименование);
					ПараметрыФайла.Вставить("РасширениеБезТочки",          ДанныеФайла.Расширение);
					ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
					ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ДанныеФайла.ДатаМодификацииУниверсальная);
					СсылкаВложения = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, 
						ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, "");

					Если НЕ ПустаяСтрока(Элемент.ИДФайлаЭлектронногоПисьма) Тогда
						ВложениеОбъект = СсылкаВложения.ПолучитьОбъект();
						ВложениеОбъект.ИДФайлаЭлектронногоПисьма = Элемент.ИДФайлаЭлектронногоПисьма;
						ВложениеОбъект.Записать();
					КонецЕсли;
				Исключение
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка добавления файлов в коде обработки созданного задания:
                                                       |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка создания заданий по входящим письмам'"), 
						УровеньЖурналаРегистрации.Ошибка,,
						УчетнаяЗапись, 
						ТекстОшибки);
						
					РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
						НСтр("ru = 'Ошибка выполнения действия правила'"), 
						СтруктураДанных.Действие,
						,
						ТекстОшибки,
						Перечисления.ТипСобытияЖурналаПравилВыполнения.Ошибка);
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		// Конец вложения.
		
		// Основание.
		ОснованиеСтрока 		  = НовоеЗадание.Основания.Добавить();
		ОснованиеСтрока.Основание = Источник.Ссылка;
		// Конец основание.
		
		// Загружаем текст.
		ТекстHTML			= "";
		
		Если Источник.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML 
			ИЛИ Источник.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			ТекстHTML = Источник.ТекстHTML;
		ИначеЕсли Источник.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
			ТекстHTML = Источник.Текст;
			ТекстHTML = СтрЗаменить(ТекстHTML, Символы.ПС, "<br>");
		ИначеЕсли Источник.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
			ТекстHTML = Источник.Текст;
			ТекстHTML = СтрЗаменить(ТекстHTML, Символы.ПС, "<br>");
		КонецЕсли;
		
		// Удаляем недопустимые символы.
		ТекстHTML = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстHTML);
		
		// Описание.
		НовоеЗадание.ТекстHTML	= ТекстHTML;
		
		// SLA.
		Попытка
			Структура 			= УправлениеSLA.РассчитатьSLA(НовоеЗадание);
			ЗаполнитьЗначенияСвойств(НовоеЗадание, Структура);
		Исключение
		КонецПопытки;
		
		// Выполняем код с заданием после загрузки.
		Если НЕ ПустаяСтрока(СтруктураДанных.КодДействия) Тогда
			Попытка
				Выполнить(СтруктураДанных.КодДействия);
			Исключение
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка выполнения произвольного кода обработки при обработке созданного задания:
                         |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка создания заданий по входящим письмам'"), 
					УровеньЖурналаРегистрации.Ошибка,,
					УчетнаяЗапись, 
					ТекстОшибки);
				РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
					НСтр("ru = 'Ошибка выполнения действия правила'"), 
					СтруктураДанных.Действие,
					,
					ТекстОшибки,
					Перечисления.ТипСобытияЖурналаПравилВыполнения.Ошибка);
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		// Отмена загрузки задания, если в дополнительных свойствах есть Отказ.
		Если НовоеЗадание.ДополнительныеСвойства.Свойство("Отказ") Тогда
			//@skip-warning
			Если НовоеЗадание.ДополнительныеСвойства["Отказ"] = Истина Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
						
		// Все реквизиты установлены, записываем в БД.
		Попытка
			// Если можем сразу проведем задание.
			НовоеЗадание.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка проведения в коде обработки созданного задания:
                                               |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка создания заданий по входящим письмам'"),
				УровеньЖурналаРегистрации.Ошибка,,
				УчетнаяЗапись, 
				ТекстОшибки);
			РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка,
				НСтр("ru = 'Ошибка выполнения действия правила'"), 
				СтруктураДанных.Действие,
				,
				ТекстОшибки,
				Перечисления.ТипСобытияЖурналаПравилВыполнения.Ошибка);
		КонецПопытки;
		
		// Задание создано.
		РегистрыСведений.СозданныеОбъектыНаОснованииВходящихПисем.ДобавитьСозданныйОбъект(УчетнаяЗапись, 
			НовоеЗадание.ИдентификаторСообщения, ТекущаяДатаСеанса());
			
		// Получаем письмо и устанавливаем предмет.
		Взаимодействия.УстановитьПредмет(Источник.Ссылка, НовоеЗадание.Ссылка, Истина);	

		#КонецОбласти
		
	КонецЕсли;
		
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗаписатьЗамер("ПравилаСобытийСозданиеЗаданияИКомментарияИзПисьма", ЗначениеТаймера);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	
	
КонецПроцедуры

Процедура ДействиеАвтоназначениеИсполнителя(Знач СтруктураДанных, Знач Источник = Неопределено) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = ЗначениеТаймера();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Если Источник.Ссылка = Источник Тогда // передана ссылка, получим объект.
		Источник = Источник.ПолучитьОбъект();
	КонецЕсли;
	
	// Фильтруем и не запускаем автоназначение для других объектов.
	Если ТипЗнч(Источник) <> Тип("ДокументОбъект.Задание")
		И ТипЗнч(Источник) <> Тип("ДокументОбъект.Проблема") Тогда
		Возврат;
	КонецЕсли;
	
	мПравилаАвтоназначения = Перечисления.ПравилаАвтоназначенияИсполнителей;
	
	Исполнитель = Справочники.Пользователи.ПустаяСсылка();
	
	Если СтруктураДанных.ПравилоАвтоназначенияИсполнителей = мПравилаАвтоназначения.ОтветственныйЗаСервис Тогда
		
		Если ЗначениеЗаполнено(Источник.Сервис) Тогда
			Исполнитель = Источник.Сервис.Ответственный;
		КонецЕсли;
		
	ИначеЕсли СтруктураДанных.ПравилоАвтоназначенияИсполнителей = мПравилаАвтоназначения.ФиксированныйИсполнитель
		ИЛИ СтруктураДанных.ПравилоАвтоназначенияИсполнителей 
			= мПравилаАвтоназначения.ФиксированнаяГруппаИсполнителей Тогда
		
		Исполнитель = СтруктураДанных.АвтоназначениеЗначение;
		
	Иначе
		
		// ИсполнительСНаименьшейНагрузкой
		// ИсполнительСНаименьшейНагрузкойИзФиксированнойГруппы
		// ИсполнительСНаименьшейНагрузкойИзФиксированнойЛинииПоддержки
		
		#Область ОсновнойЗапрос
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТЗ.Пользователь КАК Пользователь,
			|	ТЗ.График КАК График
			|ПОМЕСТИТЬ ВТ_Пользователи
			|ИЗ
			|	(ВЫБРАТЬ
			|		Пользователи.Ссылка КАК Пользователь,
			|		Пользователи.График КАК График
			|	ИЗ
			|		Справочник.Пользователи КАК Пользователи
			|	ГДЕ
			|		Пользователи.УчастиеВАвтоназначенииИсполнителей = ИСТИНА
			|		И Пользователи.ПометкаУдаления = ЛОЖЬ
			|		И Пользователи.Недействителен = ЛОЖЬ
			|		И &ИсполнительСНаименьшейНагрузкойИзФиксированнойГруппы
			|		И &ИсполнительСНаименьшейНагрузкойИзФиксированнойЛинииПоддержки
			|		И &АвтоназначениеСУчетомМестоположения
			|		И &АвтоназначениеСУчетомКомпетенций
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОтсутствияПользователей.Замещающий,
			|		ОтсутствияПользователей.Замещающий.График
			|	ИЗ
			|		РегистрСведений.ОтсутствияПользователей КАК ОтсутствияПользователей
			|	ГДЕ
			|		ТИПЗНАЧЕНИЯ(ОтсутствияПользователей.Объект) = ТИП(Справочник.Пользователи)
			|		И ОтсутствияПользователей.ДатаОкончания >= &ТекущаяДата
			|		И ОтсутствияПользователей.Замещающий <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ТЗ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Задание.ТекущийИсполнитель КАК Исполнитель,
			|	СУММА(1) КАК Количество
			|ПОМЕСТИТЬ ВТ_Исполнители
			|ИЗ
			|	Документ.Задание КАК Задание
			|ГДЕ
			|	Задание.ПометкаУдаления = ЛОЖЬ
			|	И Задание.Выполнено = ЛОЖЬ
			|	И ТИПЗНАЧЕНИЯ(Задание.ТекущийИсполнитель) = ТИП(Справочник.Пользователи)
			|	И Задание.Ссылка <> &ИсточникСсылка
			|
			|СГРУППИРОВАТЬ ПО
			|	Задание.ТекущийИсполнитель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Пользователи.Пользователь КАК Пользователь,
			|	СУММА(ЕСТЬNULL(ВТ_Исполнители.Количество, 0)) КАК Количество,
			|	ВТ_Пользователи.График КАК График
			|ИЗ
			|	ВТ_Пользователи КАК ВТ_Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исполнители КАК ВТ_Исполнители
			|		ПО ВТ_Пользователи.Пользователь = ВТ_Исполнители.Исполнитель
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Пользователи.Пользователь,
			|	ВТ_Пользователи.График
			|
			|УПОРЯДОЧИТЬ ПО
			|	Количество
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОтсутствияПользователей.Объект КАК Пользователь,
			|	ОтсутствияПользователей.Замещающий КАК Замещающий,
			|	ОтсутствияПользователей.ДатаНачала КАК ДатаНачала,
			|	ОтсутствияПользователей.ДатаОкончания КАК ДатаОкончания
			|ИЗ
			|	РегистрСведений.ОтсутствияПользователей КАК ОтсутствияПользователей
			|ГДЕ
			|	ОтсутствияПользователей.ДатаОкончания >= &ТекущаяДата";
		
		#КонецОбласти
		
		#Область ИсполнительСНаименьшейНагрузкойИзФиксированнойГруппы
		
		ИсполнительСНаименьшейНагрузкойИзФиксированнойГруппы = "ИСТИНА";
		Если СтруктураДанных.ПравилоАвтоназначенияИсполнителей = 
			мПравилаАвтоназначения.ИсполнительСНаименьшейНагрузкойИзФиксированнойГруппы Тогда
			
			ИсполнительСНаименьшейНагрузкойИзФиксированнойГруппы = 
				"Пользователи.Ссылка В(
				|ВЫБРАТЬ
				|	Группы.Пользователь КАК Пользователь
				|ИЗ
				|	Справочник.ГруппыПользователей.Состав КАК Группы
				|ГДЕ
				|	Группы.Ссылка = &ГруппаПользователей)";
			Запрос.УстановитьПараметр("ГруппаПользователей", СтруктураДанных.АвтоназначениеЗначение);
			
		КонецЕсли;
		
		#КонецОбласти 
		
		#Область ИсполнительСНаименьшейНагрузкойИзФиксированнойЛинииПоддержки
		
		ИсполнительСНаименьшейНагрузкойИзФиксированнойЛинииПоддержки = "ИСТИНА";
		Если СтруктураДанных.ПравилоАвтоназначенияИсполнителей = 
			мПравилаАвтоназначения.ИсполнительСНаименьшейНагрузкойИзФиксированнойЛинииПоддержки Тогда
			
			ИсполнительСНаименьшейНагрузкойИзФиксированнойЛинииПоддержки = 
				"Пользователи.Ссылка В(
				|ВЫБРАТЬ
				|	Пользователи.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.ЛинияПоддержки = &ЛинияПоддержки)";
			Запрос.УстановитьПараметр("ЛинияПоддержки", СтруктураДанных.АвтоназначениеЗначение);	
			
		КонецЕсли;
		
		#КонецОбласти
				
		#Область АвтоназначениеСУчетомМестоположения
		
		АвтоназначениеСУчетомМестоположения 			= "ИСТИНА";
		Если СтруктураДанных.АвтоназначениеСУчетомМестоположения 
			И ТипЗнч(Источник) = Тип("ДокументОбъект.Задание")
			И ЗначениеЗаполнено(Источник.Инициатор) Тогда
			
			АвтоназначениеСУчетомМестоположения = 
				"Пользователи.Ссылка В(
				|ВЫБРАТЬ
				|	П.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК П
				|ГДЕ
				|	П.Местоположение В ИЕРАРХИИ(&Местоположение))";	
			Запрос.УстановитьПараметр("Местоположение", Источник.Инициатор.Местоположение);
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область АвтоназначениеСУчетомКомпетенций
		
		АвтоназначениеСУчетомКомпетенций 				= "ИСТИНА";
		Если СтруктураДанных.АвтоназначениеСУчетомКомпетенций И СтруктураДанных.Компетенции <> Неопределено Тогда
			АвтоназначениеСУчетомКомпетенций = 
				"Пользователи.Ссылка В(
				|ВЫБРАТЬ
				|	ПользователиКомпетенции.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Пользователи.Компетенции КАК ПользователиКомпетенции
				|ГДЕ
				|	ПользователиКомпетенции.Компетенция В(&МассивКомпетенций))";
			Запрос.УстановитьПараметр("МассивКомпетенций", СтруктураДанных.Компетенции.ВыгрузитьКолонку("Компетенция"));
		КонецЕсли;
		
		#КонецОбласти
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсполнительСНаименьшейНагрузкойИзФиксированнойГруппы",
			ИсполнительСНаименьшейНагрузкойИзФиксированнойГруппы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсполнительСНаименьшейНагрузкойИзФиксированнойЛинииПоддержки",
			ИсполнительСНаименьшейНагрузкойИзФиксированнойЛинииПоддержки);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&АвтоназначениеСУчетомМестоположения",
			АвтоназначениеСУчетомМестоположения);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&АвтоназначениеСУчетомКомпетенций",
			АвтоназначениеСУчетомКомпетенций);
		
		мТекущаяДата = ТекущаяДатаСеанса();
		Запрос.УстановитьПараметр("ТекущаяДата", мТекущаяДата);
		Запрос.УстановитьПараметр("ИсточникСсылка", Источник.Ссылка);
		
		// Выбираем минимальное значение заданий/проблем.
		Пакет 		= Запрос.ВыполнитьПакет();
		Таблица 	= Пакет[2].Выгрузить();
		Таблица.Колонки.Добавить("СекундГрафика");
		Таблица.ЗаполнитьЗначения(999999999, "СекундГрафика");
		
		#Область АвтоназначениеСУчетомГрафиковРабочегоВремени			
		Если СтруктураДанных.АвтоназначениеСУчетомГрафиковРабочегоВремени Тогда
			
			Отсутствующие 	= Пакет[3].Выгрузить();
			
			// Проверяем пользователя по графику, работает ли, кто-то из пользователей сейчас.
			МассивГрафиков = Новый Массив;
			Для Каждого Строки Из Таблица Цикл
				Если МассивГрафиков.Найти(Строки.График) = Неопределено Тогда
					МассивГрафиков.Добавить(Строки.График);
				КонецЕсли;
			КонецЦикла;
			
			мНачалоДняТекущаяДата 	= НачалоДня(мТекущаяДата);
			мВремя					= мТекущаяДата - мНачалоДняТекущаяДата;
			
			Если МассивГрафиков.Количество() > 0 Тогда
				
				// Узнаем графики на ближайшие 15 дней по исполнителям.
				ТЗ = ГрафикиРаботы.РасписанияРаботыНаПериод(МассивГрафиков, НачалоДня(мТекущаяДата), 
					КонецДня(мТекущаяДата + 86400 * 15));
						
				Для Каждого Строки Из Таблица Цикл
					
					// Первоначальное значение для сортировки (поместить в конец).
					Строки.СекундГрафика = 999999999;
					Пользователь 		 = Строки.Пользователь;
					
					// Проверка, что исполнитель на работе.
					Отсутствует = Ложь;
					НайденныеСтроки = Отсутствующие.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
					Для Каждого СтрокиТЗ Из НайденныеСтроки Цикл
						Если СтрокиТЗ.ДатаНачала < мТекущаяДата Тогда
							Отсутствует = Истина;
							Если ЗначениеЗаполнено(СтрокиТЗ.Замещающий) Тогда
								Пользователь = СтрокиТЗ.Замещающий;
							Иначе
								Строки.Пользователь = Справочники.Пользователи.ПустаяСсылка();
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ ЗначениеЗаполнено(Строки.Пользователь) Тогда
						Продолжить;
					КонецЕсли;
					
					// Потенциальный исполнитель в это время на работе.
					Если Отсутствует = Ложь Тогда
						Отсутствует = Истина;
						НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("ГрафикРаботы", Строки.График));
						Для Каждого СтрокиТЗ Из НайденныеСтроки Цикл
							Если СтрокиТЗ.ДатаГрафика = мНачалоДняТекущаяДата
								И СтрокиТЗ.ВремяНачала - Дата(1, 1, 1) <= мВремя
								И мВремя <= СтрокиТЗ.ВремяОкончания - Дата(1, 1, 1) Тогда
								
								Отсутствует = Ложь;
								Строки.СекундГрафика = 
									?(СтрокиТЗ.ДатаГрафика + (СтрокиТЗ.ВремяОкончания - Дата(1, 1, 1)) 
										- мТекущаяДата > 3600, 
									0, 
									СтрокиТЗ.ДатаГрафика + (СтрокиТЗ.ВремяОкончания - Дата(1, 1, 1)) - мТекущаяДата);
								
								Прервать;
								
							КонецЕсли;
						КонецЦикла;
						
						// График такой не найден. Установим поиск с макс. приоритетом.
						Если НайденныеСтроки.Количество() = 0 Тогда
							Строки.СекундГрафика = 0;
							Отсутствует = Ложь;
						КонецЕсли;
					КонецЕсли;
						
					// Исполнитель не на работе.
					Если Отсутствует Тогда
						
						// Считаем для него ближайшую дату выхода.
						НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("ГрафикРаботы", Строки.График));
						Для Каждого СтрокиТЗ Из НайденныеСтроки Цикл
							Если СтрокиТЗ.ДатаГрафика = мНачалоДняТекущаяДата
								И СтрокиТЗ.ВремяНачала - Дата(1, 1, 1) <= мВремя
								И мВремя <= СтрокиТЗ.ВремяОкончания - Дата(1, 1, 1) Тогда
															
								Строки.СекундГрафика = 
									?(Строки.СекундГрафика > (СтрокиТЗ.ДатаГрафика 
										+ (СтрокиТЗ.ВремяНачала - Дата(1, 1, 1))) - мТекущаяДата,
									(СтрокиТЗ.ДатаГрафика + (СтрокиТЗ.ВремяНачала - Дата(1, 1, 1))) 
										- мТекущаяДата, Строки.СекундГрафика);
								
								Прервать;
								
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					Строки.Пользователь = Пользователь;
					
				КонецЦикла;
			КонецЕсли;
						
		КонецЕсли;	
		#КонецОбласти
		
		// Удаляем пользователей, которые пустые.
		ИндексТаблицы = Таблица.Количество() - 1;
		Пока ИндексТаблицы >= 0 Цикл
			Если НЕ ЗначениеЗаполнено(Таблица[ИндексТаблицы].Пользователь) Тогда
				Таблица.Удалить(ИндексТаблицы);
			КонецЕсли;	
			ИндексТаблицы = ИндексТаблицы - 1;	
		КонецЦикла;
		
		// Сортируем.
		Таблица.Сортировать("СекундГрафика,Количество");
		
		// Выбираем исполнителя.
		Если Таблица.Количество() = 0 Тогда
			// Нет подходящих исполнителей.
			Возврат;
		Иначе
			
			СекундГрафика 	= Таблица[0].СекундГрафика;
			Количество		= Таблица[0].Количество;
			
			МаксимальныйИндекс = 0;
			Пока МаксимальныйИндекс < Таблица.Количество() Цикл
				
				Если МаксимальныйИндекс + 1 >= Таблица.Количество() Тогда
					Прервать;	
				КонецЕсли;
				
				Если СекундГрафика <> Таблица[МаксимальныйИндекс + 1].СекундГрафика
					ИЛИ Количество <> Таблица[МаксимальныйИндекс + 1].Количество Тогда
					
					Прервать;
					
				КонецЕсли;
				
				МаксимальныйИндекс = МаксимальныйИндекс + 1;
				
			КонецЦикла;
			
			// Исполнитель один.
			Если МаксимальныйИндекс = 0 Тогда
				Исполнитель = Таблица[0].Пользователь;
			Иначе
				ГСЧ = Новый ГенераторСлучайныхЧисел();
				Исполнитель = Таблица[ГСЧ.СлучайноеЧисло(0, МаксимальныйИндекс)].Пользователь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Подставляем результат автоназначения в объект.
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.Задание") Тогда
			Источник.ТекущийИсполнитель = Исполнитель;
		Иначе
			Источник.Исполнитель = Исполнитель;
		КонецЕсли;
		Источник.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина); // << Не допустим рекурсии.
		Источник.Записать();
	КонецЕсли;

	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗаписатьЗамер("ПравилаСобытийАвтоназначениеИсполнителей", ЗначениеТаймера);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	
	
КонецПроцедуры

Процедура ДействиеВыполнениеОбработкиВФоне(Знач СтруктураДанных, Знач Источник = Неопределено)
	
	Отказ = Ложь;
	Массив = Новый Массив;
	Массив.Добавить(СтруктураДанных);
	Массив.Добавить(?(Источник <> Неопределено, СериализоватьОбъект(Источник), Неопределено));
	Массив.Добавить(Отказ);
	ФоновыеЗадания.Выполнить("ПравилаСобытийСервер.ДействиеВыполнениеОбработки",
		Массив,
		Строка(Новый УникальныйИдентификатор),
		СтрШаблон(НСтр("ru = 'Фоновое выполнение %1'"), СтруктураДанных.НаименованиеДействия));	
	
КонецПроцедуры

Процедура ДействиеВыполнениеОбработки(Знач СтруктураДанных, Знач Источник = Неопределено, Отказ) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗначениеТаймера = ЗначениеТаймера();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.Ссылка = Источник Тогда // передана ссылка, получим объект.
		Источник = Источник.ПолучитьОбъект();
	КонецЕсли;
	
	ТекстОшибки = "";
	Попытка
		ИмяОбработки = ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(СтруктураДанных.ВнешняяОбработка);
		Если ИмяОбработки = Неопределено Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка выполнения действия %1 для сценария %2: Не удалось подключить внешнюю обработку.'"),
					СтруктураДанных.Действие, СтруктураДанных.Ссылка);
		Иначе
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяОбработки);
			ВнешняяОбработка.Действие(СтруктураДанных, Источник, Отказ);
		КонецЕсли;
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения команды %1 для сценария %2: %3'"), 
			СтруктураДанных.Действие, СтруктураДанных.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		РегистрыСведений.ВыполнениеПравилСобытий.ЗафиксироватьВыполнениеПравила(СтруктураДанных.Ссылка, 
			НСтр("ru = 'Ошибка выполнения действия правила (ДействиеВыполнениеОбработки)'"), 
			СтруктураДанных.Действие,
			,
			ТекстОшибки,
			Перечисления.ТипСобытияЖурналаПравилВыполнения.Ошибка);
	КонецЕсли;	
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ЗаписатьЗамер("ПравилаСобытийДействиеВыполнениеОбработки", ЗначениеТаймера);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ОценкаПроизводительности
Функция ЗначениеТаймера()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		Возврат ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

Процедура ЗаписатьЗамер(Знач КлючеваяОперация, Знач ВремяНачала)
	
	Если ВремяНачала <> Неопределено Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

Процедура ДобавитьСтрокуВТаблицуИстории(Таблица, Знач ДатаСобытия, Знач ТекстHTML = "",
	Знач Текст = "", Знач НомерСобытия = 0)
	
	НоваяСтрока 				= Таблица.Добавить();
	НоваяСтрока.ДатаСобытия 	= ДатаСобытия;
	НоваяСтрока.ТекстHTML 		= ТекстHTML;
	НоваяСтрока.Текст	 		= Текст;
	НоваяСтрока.НомерСобытия 	= НомерСобытия;
	
КонецПроцедуры	

Процедура ЗаполнитьПрисоединенныеФайлы(Знач ОбъектСсылка, Знач ЭлектронноеПисьмо, МассивОтправленныхФайлов)
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда
		МассивПрисоединенныхФайлов = БазаЗнанийВызовСервера.СтатьиБазыЗнанийФайлыДляОтправки(ОбъектСсылка);
	Иначе	
		МассивПрисоединенныхФайлов = Новый Массив;
		РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ОбъектСсылка, МассивПрисоединенныхФайлов);
	КонецЕсли;
	
	Если МассивПрисоединенныхФайлов.Количество() > 0 Тогда
		Для Каждого Файл Из МассивПрисоединенныхФайлов Цикл
			
			// Если будет попытка добавить один и тот же файл дважды, проигнорируем.
			Если МассивОтправленныхФайлов.Найти(Файл) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивОтправленныхФайлов.Добавить(Файл);
			
			ДанныеФайла    			= РаботаСФайлами.ДанныеФайла(Файл);
			ДополнительныеРеквизиты = Новый Структура("ИДФайлаЭлектронногоПисьма", Файл.ИДФайлаЭлектронногоПисьма);
			ПараметрыФайла 			= РаботаСФайлами.ПараметрыДобавленияФайла(ДополнительныеРеквизиты);
			ПараметрыФайла.ВладелецФайлов = ЭлектронноеПисьмо; 
			ПараметрыФайла.Вставить("РасширениеБезТочки", Файл.Расширение);
			ПараметрыФайла.ВремяИзмененияУниверсальное = Неопределено;
			Если ПустаяСтрока(Файл.ИДФайлаЭлектронногоПисьма) Тогда
				ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.Наименование);
			Иначе // Это картинка из текста.
				ПараметрыФайла.Вставить("ИмяБезРасширения", "_" 
					+ СтрЗаменить(Файл.ИДФайлаЭлектронногоПисьма, "-", "_"));
			КонецЕсли;			
			//@skip-warning
			ДобавленныйФайлСсылка = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, 
				ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			Попытка
				УдалитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Функция МожноОтправлятьОповещение(Знач Источник, Знач Адресат)
	
	// Проверка на не уведомление.
	Попытка
		Если Источник.ДополнительныеСвойства.Свойство("МассивНеУведомляемых") Тогда
			МассивНеУведомляемых = Источник.ДополнительныеСвойства.МассивНеУведомляемых;
			Если МассивНеУведомляемых.Найти(Адресат) <> Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если ТипЗнч(Адресат) = Тип("СправочникСсылка.Пользователи") Тогда
		Если Адресат = Пользователи.ТекущийПользователь() Тогда
			Возврат УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеНастройки("ОповещатьПриСобственныхИзменениях");
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции	

Функция АвторИнициаторКлиентПоЭлектронномуАдресу(Знач ТекстЗапросаПоискаИнициатора,
	Знач ПриоритетыСтрокой, 
	Знач ЭлектронныйАдрес)
	
	Результат = Новый Структура();
	
	// Установка инициатора.
	ЗапросКИ 		= Новый Запрос();
	ЗапросКИ.Текст 	= ТекстЗапросаПоискаИнициатора;
	
	ЗапросКИ.УстановитьПараметр("АдресЭП", ЭлектронныйАдрес);

	РезультатКИ = ЗапросКИ.Выполнить();
	Если НЕ РезультатКИ.Пустой() Тогда
		ВыборкаКИ = РезультатКИ.Выбрать();
		Если ВыборкаКИ.Следующий() Тогда
			
			// Устанавливаем инициатора.
			Адресат = ВыборкаКИ.Ссылка;
			Если ЗначениеЗаполнено(Адресат) Тогда
				Результат.Вставить("Автор", Адресат);
				Результат.Вставить("Инициатор", Адресат);
				
				Если ТипЗнч(Адресат) = Тип("СправочникСсылка.Сотрудники") Тогда
					Если ЗначениеЗаполнено(Адресат.Подразделение) Тогда
						Результат.Вставить("Клиент", Адресат.Подразделение);
					Иначе
						Результат.Вставить("Клиент", Адресат.Организация);
					КонецЕсли;
				ИначеЕсли ТипЗнч(Адресат) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
					Результат.Вставить("Клиент", Адресат.Владелец);
				ИначеЕсли ТипЗнч(Адресат) = Тип("СправочникСсылка.Контрагенты") Тогда
					Результат.Вставить("Клиент", Адресат);
				ИначеЕсли ТипЗнч(Адресат) = Тип("СправочникСсылка.Организации")
					ИЛИ ТипЗнч(Адресат) = Тип("СправочникСсылка.Подразделения") Тогда
					Результат.Вставить("Клиент", Адресат);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если ПустаяСтрока(ПриоритетыСтрокой) Тогда
			ИмяСправочника = "ФизическиеЛица";
		Иначе
			ИмяСправочника = СокрЛП(СтрПолучитьСтроку(ПриоритетыСтрокой, 1));
			Если ПустаяСтрока(ИмяСправочника) Тогда
				ИмяСправочника = "ФизическиеЛица";
			КонецЕсли;
		КонецЕсли;
		
		СпрОбъект 				= Справочники[ИмяСправочника].СоздатьЭлемент();
		СсылкаНового 			= СпрОбъект.ПолучитьСсылкуНового();
		СпрОбъект.УстановитьСсылкуНового(СсылкаНового);
		
		СпрОбъект.Наименование 	= ЭлектронныйАдрес;
		// Контактная информация пользователя.
		СтрокаEmail 			= СпрОбъект.КонтактнаяИнформация.Добавить();
		СтрокаEmail.Тип 		= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокаEmail.Представление = ЭлектронныйАдрес;
		СтрокаEmail.АдресЭП 	= ЭлектронныйАдрес;
		
		// Создаем физическое лицо и устанавливаем его как сотрудника-инициатора.
		Если ИмяСправочника = "Сотрудники" Тогда
			СтрокаEmail.Вид			= Справочники.ВидыКонтактнойИнформации.EmailСотрудника;
			СпрОбъект.Актуальность	= Истина;
			
		ИначеЕсли ИмяСправочника = "Подразделения" Тогда
			СтрокаEmail.Вид 	= Справочники.ВидыКонтактнойИнформации.EmailПодразделения;
			
		ИначеЕсли ИмяСправочника = "Организации" Тогда
			СтрокаEmail.Вид 	= Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
			
		ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
			СтрокаEmail.Вид 	= Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			
		ИначеЕсли ИмяСправочника = "Пользователи" Тогда
			СтрокаEmail.Вид 	= Справочники.ВидыКонтактнойИнформации.EmailПользователя;
			
		ИначеЕсли ИмяСправочника = "ПотенциальныеКлиенты" Тогда
			СтрокаEmail.Вид 	= Справочники.ВидыКонтактнойИнформации.EmailПотенциальногоКлиента;
			
		ИначеЕсли ИмяСправочника = "КонтактныеЛица" Тогда
			СтрокаEmail.Вид 	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
			
			// Создаем контаргента.
			СпрКонтрагент 				= Справочники.Контрагенты.СоздатьЭлемент();
			СпрКонтрагент.Наименование 	= СтрШаблон(НСтр("ru = 'Контрагент контактного лица %1'"), ЭлектронныйАдрес);
			СпрКонтрагент.ВидКонтрагента = Перечисления.ВидКонтрагента.ЮридическоеЛицо;
			СпрКонтрагент.Клиент 		= Истина;
			СпрКонтрагент.КонтактноеЛицо = СсылкаНового; 
			СпрКонтрагент.Записать();
			
			СпрОбъект.Владелец = СпрКонтрагент.Ссылка;
			
		Иначе
			СтрокаEmail.Вид 	= Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица;
		КонецЕсли;
		СпрОбъект.Записать();
		
		Адресат 				= СпрОбъект.Ссылка;
		
		Результат.Вставить("Автор", Адресат);
		Результат.Вставить("Инициатор", Адресат);
		
		Если ТипЗнч(Адресат) = Тип("СправочникСсылка.Сотрудники") Тогда
			Если ЗначениеЗаполнено(Адресат.Подразделение) Тогда
				Результат.Вставить("Клиент", Адресат.Подразделение);
			Иначе
				Результат.Вставить("Клиент", Адресат.Организация);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Адресат) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			Результат.Вставить("Клиент", Адресат.Владелец);
		Иначе
			Результат.Вставить("Клиент", Адресат);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ЭтоФоновоеЗадание()
	
	УстановитьПривилегированныйРежим(Истина);
	
    НС = НомерСоединенияИнформационнойБазы();
    мСоединения = ПолучитьСоединенияИнформационнойБазы();
    Если мСоединения <> Неопределено Тогда
        Для Каждого Соединение Из мСоединения Цикл
            Если Соединение.НомерСоединения = НС Тогда
                Возврат Соединение.ИмяПриложения = "BackgroundJob"
                	ИЛИ Соединение.ИмяПриложения = "JobScheduler";
            КонецЕсли;
        КонецЦикла;
	КонецЕсли;
	
    Возврат Ложь;
	
КонецФункции

#КонецОбласти