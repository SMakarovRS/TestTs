
////////////////////////////////////////////////////////////////////////////////
// Клиент-серверный модуль конфигурации "Управление IT-отделом 8".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует строку фильтра для диалога выбора картинки с типами файлов.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора картинки.
//
Функция ПолучитьФильтрИзображений() Экспорт
	
	Возврат НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)"
									+ "|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат BMP(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат ICON(*.ico)|*.ico"
		                            + "|Формат Meta(*.wmf;*.emf)|*.wmf;*.emf'");
	
КонецФункции // ПолучитьФильтрИзображений()

Процедура ВыполнитьНаСервере(Знач Код) Экспорт
	
	Выполнить(Код);
	
КонецПроцедуры

// Получает текст секции ИниФайла
Функция ПолучитьСекциюИниФайла(Знач ИниФайл, Знач ИмяСекции) Экспорт
	
	Для НомерРаздела = 0 По ИниФайл.Количество() - 1 Цикл
		Если ИниФайл.Получить(НомерРаздела).Представление = ИмяСекции Тогда
			Возврат ИниФайл.Получить(НомерРаздела).Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Получает Имя и Значение по номеру
Процедура ПолучитьПеременнуюСекцииИниФайлаПоНомеру(Знач Секция, Знач ТекСтрока, Имя, Значение) Экспорт
	
	Если ТекСтрока.СтрокаИспользовалась = Истина Тогда
		Возврат;
	Иначе
		ПозицияЗнакаРавно = СтрНайти(ТекСтрока.Значение, "=");
		
		Если ПозицияЗнакаРавно = 0 Тогда
			Имя = "";
			Значение = "";
			Возврат;
		КонецЕсли;
		
		Значение = Сред(ТекСтрока.Значение, ПозицияЗнакаРавно + 1);
		Имя = Лев(ТекСтрока.Значение, ПозицияЗнакаРавно - 1);
	КонецЕсли;
	
КонецПроцедуры

// Получает Имя и Значение по номеру
Функция ПолучитьЗначениеСекцииИниФайлаПоНомеру(Знач Секция, Знач ТекСтрока) Экспорт
	
	ПозицияЗнакаРавно = СтрНайти(ТекСтрока, "=");
	
	Если ПозицияЗнакаРавно = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Сред(ТекСтрока, ПозицияЗнакаРавно + 1);
	
КонецФункции

// Считывает данные секции.
Функция ПолучитьЗначениеПеременнойСекцииИниФайла(Знач Секция, Знач Имя) Экспорт
	
	Если ТипЗнч(Секция) <> Тип("ТаблицаЗначений") Тогда
		Возврат "";
	КонецЕсли;
	
	ТекИмя = "";
	ТекЗначение = "";
	Для Каждого Строка Из Секция Цикл
		ПолучитьПеременнуюСекцииИниФайлаПоНомеру(Секция, Строка, ТекИмя, ТекЗначение);
		Если СтрНайти(ТекИмя, Имя) > 0 Тогда
			Возврат ТекЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции // ПолучитьЗначениеПеременнойРаздела()

// Считывает данные секции.
Функция ПолучитьЗначениеПеременнойСекцииИниФайлаСГлавнымРазделом(Знач Секция, Знач ГлавныйРаздел, Знач Имя, 
	Знач ИспользоватьГлавныйРаздел = Истина, Знач ПриПоискеВключатьЗначениеПеременнойСекцииAIDA = Ложь, 
	Знач ЗначениеНоменклатуры = "") Экспорт
	
	Если ТипЗнч(Секция) <> Тип("ТаблицаЗначений") Тогда
		Возврат "";
	КонецЕсли;
		
	ТекИмя = "";
	ТекЗначение = "";
	Для Каждого Строка Из Секция Цикл
		ПолучитьПеременнуюСекцииИниФайлаПоНомеру(Секция, Строка, ТекИмя, ТекЗначение);
		Если ПриПоискеВключатьЗначениеПеременнойСекцииAIDA Тогда
			Если (СтрНайти(ТекИмя, Имя) > 0) И (СтрНайти(ТекИмя, ЗначениеНоменклатуры) > 0) Тогда
				Если ИспользоватьГлавныйРаздел Тогда
					Если СтрНайти(ТекИмя, ГлавныйРаздел) > 0 Тогда
						Строка.СтрокаИспользовалась = Истина;
						Возврат ТекЗначение;
					КонецЕсли;
				Иначе	
					Строка.СтрокаИспользовалась = Истина;
					Возврат ТекЗначение;
				КонецЕсли;
			КонецЕсли;			
		Иначе
			Если СтрНайти(ТекИмя, Имя) > 0 Тогда
				Если ИспользоватьГлавныйРаздел Тогда
					Если СтрНайти(ТекИмя, ГлавныйРаздел) > 0 Тогда
						Строка.СтрокаИспользовалась = Истина;
						Возврат ТекЗначение;
					КонецЕсли;
				Иначе
					Строка.СтрокаИспользовалась = Истина;
					Возврат ТекЗначение;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции // ПолучитьЗначениеПеременнойРаздела()

// Функция проверки заполнения раздела данными.
//
// Параметры:
//	Раздел - проверяемый раздел.
//
// Возвращаемое значение:
//  Истина - раздел не заполнен, Ложь - иначе.
//
Функция ПустаяСекция(Знач Секция) Экспорт
	
	Если Секция = Ложь Тогда 
		Возврат Ложь;
	Иначе
		Возврат Секция.ПолучитьТекст() = "";
	КонецЕсли;
	
КонецФункции // ПустойРаздел()

// Устанавливает значение свойства элемента формы, если находит элемент на форме.
//
// Параметры:
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИмяЭлемента   - Строка - имя искомого элемента.
//  ИмяСвойства   - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение      - Произвольный - значение, которое будет установлено.
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомого элемента.
//
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, 
	УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(ИмяСвойства) = "толькопросмотр"
		И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			
		ИмяСвойстваЭлемента = "Доступность";
		ЗначениеСвойства    = НЕ Значение;
	Иначе
		ИмяСвойстваЭлемента = ИмяСвойства;
		ЗначениеСвойства    = Значение;
	КонецЕсли;
	
	Если Элемент[ИмяСвойстваЭлемента] <> ЗначениеСвойства Тогда
		Элемент[ИмяСвойстваЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
	//@skip-warning
	ТипыЭлементовФормыСПодчиненнымиЭлементами = Новый ОписаниеТипов("УправляемаяФорма, ГруппаФормы, ТаблицаФормы");
	
	Если УстанавливатьДляПодчиненных И ТипыЭлементовФормыСПодчиненнымиЭлементами.СодержитТип(ТипЗнч(Элемент)) Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ПодчиненныйЭлемент.Имя, ИмяСвойства, Значение, Истина);
		КонецЦикла;
 	КонецЕсли;
 	
КонецПроцедуры // УстановитьСвойствоЭлементаФорма()

Функция ПолучитьСтруктуруКэшируемыеЗначения() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("Штрихкоды",				Новый Соответствие);
	КэшированныеЗначения.Вставить("ПравоРегистрацииШтрихкодовНоменклатурыДоступно",	Неопределено);
	
	Возврат КэшированныеЗначения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Реализация события ОбработкаПолученияФормы элемента справочника Пользователи.

Процедура УправлениеITОтделом8УФПереопределитьФормуЭлементаПользователиОбработкаПолученияФормы(Источник, ВидФормы, 
	Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Справочник.Пользователи.Форма.УправлениеITОтделом8УФФормаЭлемента";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Реализация события ОбработкаПолученияФормы элемента справочника КлассификатораБанков.

Процедура УправлениеITОтделом8УФПереопределитьФормуВыбораКлассификатораБанков(Источник, ВидФормы, 
	Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт

	Если ВидФормы = "ФормаВыбора" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Справочник.КлассификаторБанков.Форма.УправлениеITОтделом8УФФормаВыбора";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Реализация события ОбработкаПолученияФормы документа Назначение опросов.

Процедура УправлениеITОтделом8УФПереопределитьФормуДокументаНазначениеОпросов(Источник, ВидФормы, 
	Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Документ.НазначениеОпросов.Форма.УправлениеITОтделом8УФФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Реализация события ОбработкаПолученияФормы справочника "Группы пользователей".

Процедура УправлениеITОтделом8УФПереопределитьФормуГруппыПользователейОбработкаПолученияФормы(Источник, ВидФормы,
	Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Справочник.ГруппыПользователей.Форма.УправлениеITОтделом8УФФормаЭлемента";
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Реализация события ОбработкаПолученияФормы списка справочника ВариантыОтветовАнкет.

Процедура УправлениеITОтделом8УФПереопределитьФормуСпискаСправочникаВариантыОтветовАнкет(Источник, ВидФормы,
	Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаСписка" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Справочник.ВариантыОтветовАнкет.Форма.УправлениеITОтделом8УФФормаСписка";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Реализация события ОбработкаПолученияФормы списка справочника ВариантыОтветовАнкет.

Процедура УправлениеITОтделом8УФПереопределитьФормыШаблоновСообщений(Источник, ВидФормы, Параметры, ВыбраннаяФорма, 
	ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт

	Если ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Справочник.ШаблоныСообщений.Форма.УправлениеITОтделом8УФФормаЭлемента";
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Справочник.ШаблоныСообщений.Форма.УправлениеITОтделом8УФФормаСписка";
	КонецЕсли;
	
КонецПроцедуры

// Преобразует длительность интервала времени в строку вида часов:минут.
//
// Параметры
//  Длительность – Число – длительность интервала времени в секундах. 
//
// Возвращаемое значение:
//   Строка – представление интервала в виде час:мин.
//
Функция ЧислоВоВремя(Знач Длительность) Экспорт
	
	Час = Цел(Длительность / 3600);
	Мин = (Длительность - Час * 3600) / 60;
	
	Если Окр(Мин) = 60 Тогда
		Час = Час + 1;
		Мин = 0;
	КонецЕсли;
	
	Возврат Формат(Час, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ":" + Формат(Мин, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=");
	
КонецФункции

// Преобразует длительность интервала времени в строку вида дней часов:минут.
//
// Параметры
//  Секунд – Число – длительность интервала времени в секундах. 
//
// Возвращаемое значение:
//   Строка – представление интервала в виде дн. ч.:мин.
//
Функция ЧислоВДниЧасы(Знач Секунд) Экспорт
	
	Дней 			= 0;
	Час				= 0;
	Мин				= 0;
	СтрокаРезультат = "";
	
	Если ЗначениеЗаполнено(Секунд) Тогда	
		Дней = Цел(Секунд / 86400);		
		Если Дней > 0 Тогда		
			Час = Цел((Секунд  - Дней * 86400) / 3600);			
			Мин = (Секунд - Дней * 86400 - Час * 3600) / 60;
			
			Если Формат(Мин, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") = "60" Тогда
				Час = Час + 1;
				Мин = 0;
			КонецЕсли;
			
			Если Формат(Час, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") = "24" Тогда
				Дней = Дней + 1;
				Час = 0;
			КонецЕсли;
			
			СтрокаРезультат = Формат(Дней, "ЧЦ=4; ЧН=; ЧГ=") + " дн. " 
			+ Формат(Час, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + " ч. : " 
			+ Формат(Мин, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + " мин.";
		Иначе
			Час = Цел(Секунд / 3600);			
			Мин = (Секунд - Час * 3600) / 60;
			
			Если Формат(Мин, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") = "60" Тогда
				Час = Час + 1;
				Мин = 0;
			КонецЕсли;
			
			Если Формат(Час, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") = "24" Тогда
				Дней = Дней + 1;
				Час = 0;
			КонецЕсли;
			
			Если Дней <> 0 Тогда
				СтрокаРезультат = Формат(Дней, "ЧЦ=4; ЧН=; ЧГ=") + " дн. " 
					+ Формат(Час, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + " ч. : " 
					+ Формат(Мин, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + " мин.";
			Иначе	
				СтрокаРезультат = Формат(Час, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + " ч. : " 
					+ Формат(Мин, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + " мин.";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Процедура заполняет список выбора времени.
// Параметры:
//  ПолеВводаФормы  - элемент-владелец списка,
//  Интервал        - интервал, с которым необходимо заполнить список, по умолчанию час.
Процедура ЗаполнитьСписокВыбораВремени(ПолеВводаФормы, Знач Интервал = 3600, Знач Начало = '00010101080000',
	Знач Окончание = '00010101200000') Экспорт
	
	СписокВремен = ПолеВводаФормы.СписокВыбора;
	СписокВремен.Очистить();
	
	ВремяСписка = НачалоЧаса(Начало);
	
	Пока НачалоЧаса(ВремяСписка) <= НачалоЧаса(Окончание) Цикл
		
		Если НЕ ЗначениеЗаполнено(ВремяСписка) Тогда
			ПредставлениеВремени = "00:00";
		Иначе
			ПредставлениеВремени = Формат(ВремяСписка,"ДФ=ЧЧ:мм");
		КонецЕсли;
		
		СписокВремен.Добавить(ВремяСписка, ПредставлениеВремени);
		
		ВремяСписка = ВремяСписка + Интервал;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильно ли введен адрес электронной почты.
//
// Параметры:
//	Адрес - Строка - e-mail.
//
// Возвращаемое значение:
//	Строка - пустая, если это e-mail, иначе строка с ошибкой. 
Функция ПроверитьКорректностьАдресаЭлектроннойПочты(Знач Адрес) Экспорт
	
	ТекстОшибки = "";
	РезультатПроверки = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Адрес, Ложь);
	
	Для Каждого ПроверенныйАдрес Из РезультатПроверки Цикл
		Если НЕ ЗначениеЗаполнено(ПроверенныйАдрес.Адрес)
			ИЛИ НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(
				ПроверенныйАдрес.Адрес) Тогда
			
			ТекстОшибки = НСтр("ru='Указан некорректный адрес электронной почты.'");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Получает родительскую форму элемента.
//
// Параметры:
//   Элемент - ЭлементыФормы - элемент, родителя которого мы ищем.
//
// Возвращаемое значение:
//   УправляемаяФорма - Родительская форма.
//
&НаКлиенте
Функция ПолучитьРодительскуюФормуЭлемента(Знач Элемент) Экспорт
	
	ЭлементВременный = Элемент;
	
	//@skip-warning
	Пока ТипЗнч(ЭлементВременный) <> Тип("УправляемаяФорма") Цикл
		ЭлементВременный = ЭлементВременный.Родитель;
	КонецЦикла;
	
	Возврат ЭлементВременный;
	
КонецФункции

// Преобразует строку вида час:мин в длительность интервала времени.
//
// Параметры:
//  ДлительностьСтр – Строка – представление интервала времени в виде строки час:мин. 
//
// Возвращаемое значение:
//   Число – длительность интервала времени в секундах.
//
Функция ЧислоИзСтроки(Знач ДлительностьСтр) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДлительностьСтр) Тогда 
		Возврат 0;
	КонецЕсли;

	Поз = СтрНайти(ДлительностьСтр, ":");
	Если Поз = 0 Тогда 
		Возврат 0;
	КонецЕсли;

	Час = Лев(ДлительностьСтр, Поз-1);
	Мин = Сред(ДлительностьСтр, Поз+1);
	
	Возврат Число(Час) * 3600 + Число(Мин) * 60;
	
КонецФункции

Функция ЦветОбластиМестаХраненияВМестоположениях() Экспорт
	
	Возврат Новый Цвет(255, 209, 253);
	
КонецФункции

Функция ЦветОбластиКарточкиНоменклатурыВМестоположениях() Экспорт
	
	Возврат Новый Цвет(163, 255, 226);
	
КонецФункции

// Производит транслитерацию текста на русском языке.
//
// Параметры:
//	ИсходныйТекст - Строка - текст на русском.
//
// Возвращаемое значение:
//	Строка - результат работы функции.
//
Функция Транслит(Знач ИсходныйТекст) Экспорт

	СоответствиеСимволов = Новый Соответствие;
	
	СоответствиеСимволов.Вставить("а", "a");
	СоответствиеСимволов.Вставить("б", "b");
	СоответствиеСимволов.Вставить("в", "v");
	СоответствиеСимволов.Вставить("г", "g");
	СоответствиеСимволов.Вставить("д", "d");
	СоответствиеСимволов.Вставить("е", "e");
	СоответствиеСимволов.Вставить("ё", "e");
	СоответствиеСимволов.Вставить("ж", "zh");
	СоответствиеСимволов.Вставить("з", "z");
	СоответствиеСимволов.Вставить("и", "i");
	СоответствиеСимволов.Вставить("й", "y");
	СоответствиеСимволов.Вставить("к", "k");
	СоответствиеСимволов.Вставить("л", "l");
	СоответствиеСимволов.Вставить("м", "m");
	СоответствиеСимволов.Вставить("н", "n");
	СоответствиеСимволов.Вставить("о", "o");
	СоответствиеСимволов.Вставить("п", "p");
	СоответствиеСимволов.Вставить("р", "r");
	СоответствиеСимволов.Вставить("с", "s");
	СоответствиеСимволов.Вставить("т", "t");
	СоответствиеСимволов.Вставить("у", "u");
	СоответствиеСимволов.Вставить("ф", "f");
	СоответствиеСимволов.Вставить("х", "kh");
	СоответствиеСимволов.Вставить("ц", "ts");
	СоответствиеСимволов.Вставить("ч", "ch");
	СоответствиеСимволов.Вставить("ш", "sh");
	СоответствиеСимволов.Вставить("щ", "shch");
	СоответствиеСимволов.Вставить("ъ", "");
	СоответствиеСимволов.Вставить("ы", "y");
	СоответствиеСимволов.Вставить("ь", "");
	СоответствиеСимволов.Вставить("э", "e");
	СоответствиеСимволов.Вставить("ю", "yu");
	СоответствиеСимволов.Вставить("я", "ya");
	
	СоответствиеСимволов.Вставить("А", "A");
	СоответствиеСимволов.Вставить("Б", "B");
	СоответствиеСимволов.Вставить("В", "V");
	СоответствиеСимволов.Вставить("Г", "G");
	СоответствиеСимволов.Вставить("Д", "D");
	СоответствиеСимволов.Вставить("Е", "E");
	СоответствиеСимволов.Вставить("Ё", "E");
	СоответствиеСимволов.Вставить("Ж", "ZH");
	СоответствиеСимволов.Вставить("З", "Z");
	СоответствиеСимволов.Вставить("И", "I");
	СоответствиеСимволов.Вставить("Й", "Y");
	СоответствиеСимволов.Вставить("К", "K");
	СоответствиеСимволов.Вставить("Л", "L");
	СоответствиеСимволов.Вставить("М", "M");
	СоответствиеСимволов.Вставить("Н", "N");
	СоответствиеСимволов.Вставить("О", "O");
	СоответствиеСимволов.Вставить("П", "P");
	СоответствиеСимволов.Вставить("Р", "R");
	СоответствиеСимволов.Вставить("С", "S");
	СоответствиеСимволов.Вставить("Т", "T");
	СоответствиеСимволов.Вставить("У", "U");
	СоответствиеСимволов.Вставить("Ф", "F");
	СоответствиеСимволов.Вставить("Х", "KH");
	СоответствиеСимволов.Вставить("Ц", "TS");
	СоответствиеСимволов.Вставить("Ч", "CH");
	СоответствиеСимволов.Вставить("Ш", "SH");
	СоответствиеСимволов.Вставить("Щ", "SHCH");
	СоответствиеСимволов.Вставить("Ъ", "");
	СоответствиеСимволов.Вставить("Ы", "Y");
	СоответствиеСимволов.Вставить("Ь", "");
	СоответствиеСимволов.Вставить("Э", "E");
	СоответствиеСимволов.Вставить("Ю", "YU");
	СоответствиеСимволов.Вставить("Я", "YA");
	
	СоответствиеСимволов.Вставить("q", "q");
	СоответствиеСимволов.Вставить("w", "w");
	СоответствиеСимволов.Вставить("e", "e");
	СоответствиеСимволов.Вставить("r", "r");
	СоответствиеСимволов.Вставить("t", "t");
	СоответствиеСимволов.Вставить("y", "y");
	СоответствиеСимволов.Вставить("u", "u");
	СоответствиеСимволов.Вставить("i", "i");
	СоответствиеСимволов.Вставить("o", "o");
	СоответствиеСимволов.Вставить("p", "p");
	СоответствиеСимволов.Вставить("a", "a");
	СоответствиеСимволов.Вставить("s", "s");
	СоответствиеСимволов.Вставить("d", "d");
	СоответствиеСимволов.Вставить("f", "f");
	СоответствиеСимволов.Вставить("g", "g");
	СоответствиеСимволов.Вставить("h", "h");
	СоответствиеСимволов.Вставить("j", "j");
	СоответствиеСимволов.Вставить("k", "k");
	СоответствиеСимволов.Вставить("l", "l");
	СоответствиеСимволов.Вставить("z", "z");
	СоответствиеСимволов.Вставить("x", "x");
	СоответствиеСимволов.Вставить("c", "c");
	СоответствиеСимволов.Вставить("v", "v");
	СоответствиеСимволов.Вставить("b", "b");
	СоответствиеСимволов.Вставить("n", "n");
	СоответствиеСимволов.Вставить("m", "m");
	СоответствиеСимволов.Вставить("Q", "Q");
	СоответствиеСимволов.Вставить("W", "W");
	СоответствиеСимволов.Вставить("E", "E");
	СоответствиеСимволов.Вставить("R", "R");
	СоответствиеСимволов.Вставить("T", "T");
	СоответствиеСимволов.Вставить("Y", "Y");
	СоответствиеСимволов.Вставить("U", "U");
	СоответствиеСимволов.Вставить("I", "I");
	СоответствиеСимволов.Вставить("O", "O");
	СоответствиеСимволов.Вставить("P", "P");
	СоответствиеСимволов.Вставить("A", "A");
	СоответствиеСимволов.Вставить("S", "S");
	СоответствиеСимволов.Вставить("D", "D");
	СоответствиеСимволов.Вставить("F", "F");
	СоответствиеСимволов.Вставить("G", "G");
	СоответствиеСимволов.Вставить("H", "H");
	СоответствиеСимволов.Вставить("J", "J");
	СоответствиеСимволов.Вставить("K", "K");
	СоответствиеСимволов.Вставить("L", "L");
	СоответствиеСимволов.Вставить("Z", "Z");
	СоответствиеСимволов.Вставить("X", "X");
	СоответствиеСимволов.Вставить("C", "C");
	СоответствиеСимволов.Вставить("V", "V");
	СоответствиеСимволов.Вставить("B", "B");
	СоответствиеСимволов.Вставить("N", "N");
	СоответствиеСимволов.Вставить("M", "M");
	
	СоответствиеСимволов.Вставить("0", "0");
	СоответствиеСимволов.Вставить("1", "1");
	СоответствиеСимволов.Вставить("2", "2");
	СоответствиеСимволов.Вставить("3", "3");
	СоответствиеСимволов.Вставить("4", "4");
	СоответствиеСимволов.Вставить("5", "5");
	СоответствиеСимволов.Вставить("6", "6");
	СоответствиеСимволов.Вставить("7", "7");
	СоответствиеСимволов.Вставить("8", "8");
	СоответствиеСимволов.Вставить("9", "9");
	СоответствиеСимволов.Вставить("-", "_");
	СоответствиеСимволов.Вставить(" ", "_");

	ИсходныйТекст 			= СокрЛП(ИсходныйТекст);
	ГотовоеЗначение 		= "";
	ТекущийСимвол 			= "";
	ТекущийГотовыйСимвол 	= "";
	
	Для Индекс = 1 по СтрДлина(ИсходныйТекст) Цикл
		
		ТекущийСимвол = Сред(ИсходныйТекст, Индекс, 1);
		ТекущийГотовыйСимвол = СоответствиеСимволов.Получить(ТекущийСимвол);
		Если ТекущийГотовыйСимвол <> Неопределено Тогда
			ГотовоеЗначение = ГотовоеЗначение + ТекущийГотовыйСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГотовоеЗначение;

КонецФункции

// Получает из переданного текста HTML.
//
// Параметры:
//	Текст - Строка - исходная строка.
//
// Возвращаемое значение:
//	Строка - результат преобразования.
//
Функция ПолучитьHTMLИзТекста(Знач Текст) Экспорт
	
	Результат = Текст;
	Результат = СтрЗаменить(Результат, "<", "&lt;");
	Результат = СтрЗаменить(Результат, ">", "&gt;");
	Результат = СтрЗаменить(Результат, Символы.ПС, "<BR>");
	
	Результат = "<HTML><BODY>" + Результат + "</BODY></HTML>";
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает показатели числовых ячеек в табличном документе.
// См. также ОтчетыКлиент.ВыделенныеОбласти.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - таблица, для которой требуется расчет.
//   ВыделенныеОбласти
//       - Неопределено - при вызове с клиента этот параметр будет определен автоматически.
//       - Массив - При вызове с сервера в этот параметр следует передавать области,
//           предварительно вычисленные на клиенте
//           при помощи функции ОтчетыКлиент.ВыделенныеОбласти(ТабличныйДокумент).
//
// Возвращаемое значение:
//   Структура - результаты расчета выделенных ячеек.
//       * Количество         - Число - Количество выделенных ячеек.
//       * КоличествоЧисловых - Число - Количество числовых ячеек.
//       * Сумма      - Число - Сумма выделенных ячеек с числами.
//       * Среднее    - Число - Сумма выделенных ячеек с числами.
//       * Минимум    - Число - Сумма выделенных ячеек с числами.
//       * Максимум   - Число - Максимум выделенных ячеек с числами.
//       * НуженВызовСервера - Булево - Истина когда вычисление на клиенте нецелесообразно и нужен вызов сервера.
//
Функция РасчетЯчеек(ТабличныйДокумент, ВыделенныеОбласти) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Количество", 0);
	Результат.Вставить("КоличествоНеПустых", 0);
	Результат.Вставить("КоличествоЧисловых", 0);
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("Среднее", 0);
	Результат.Вставить("Минимум", Неопределено);
	Результат.Вставить("Максимум", Неопределено);
	Результат.Вставить("НуженВызовСервера", Ложь);
	
	Если ВыделенныеОбласти = Неопределено Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ВызватьИсключение НСтр("ru = 'Не указано значение параметра ""ВыделенныеОбласти"".'");
		#Иначе
			ВыделенныеОбласти = ТабличныйДокумент.ВыделенныеОбласти;
		#КонецЕсли
	КонецЕсли;
	
	ПроверенныеЯчейки = Новый Соответствие;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента")
			И ТипЗнч(ВыделеннаяОбласть) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		ВыделеннаяОбластьВерх  = ВыделеннаяОбласть.Верх;
		ВыделеннаяОбластьНиз   = ВыделеннаяОбласть.Низ;
		ВыделеннаяОбластьЛево  = ВыделеннаяОбласть.Лево;
		ВыделеннаяОбластьПраво = ВыделеннаяОбласть.Право;
		
		Если ВыделеннаяОбластьВерх = 0 Тогда
			ВыделеннаяОбластьВерх = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьНиз = 0 Тогда
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбластьЛево = 0 Тогда
			ВыделеннаяОбластьЛево = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьПраво = 0 Тогда
			ВыделеннаяОбластьПраво = ТабличныйДокумент.ШиринаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Низ;
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		ВыделеннаяОбластьВысота = ВыделеннаяОбластьНиз   - ВыделеннаяОбластьВерх + 1;
		ВыделеннаяОбластьШирина = ВыделеннаяОбластьПраво - ВыделеннаяОбластьЛево + 1;
		
		Результат.Количество = Результат.Количество + ВыделеннаяОбластьШирина * ВыделеннаяОбластьВысота;
		#Если Не Сервер И Не ТолстыйКлиентОбычноеПриложение И Не ВнешнееСоединение Тогда
			Если Результат.Количество >= 1000 Тогда
				Результат.НуженВызовСервера = Истина;
				Возврат Результат;
			КонецЕсли;
		#КонецЕсли
		
		Для НомерКолонки = ВыделеннаяОбластьЛево По ВыделеннаяОбластьПраво Цикл
			Для НомерСтроки = ВыделеннаяОбластьВерх По ВыделеннаяОбластьНиз Цикл
				Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ПроверенныеЯчейки.Получить(Ячейка.Имя) = Неопределено Тогда
					ПроверенныеЯчейки.Вставить(Ячейка.Имя, Истина);
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если Ячейка.Видимость = Истина Тогда
					Если Ячейка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Колонки
						И Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
						Число = Ячейка.Значение;
					ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
						ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
						Число = ОписаниеТипаЧисло.ПривестиЗначение(Ячейка.Текст);
					Иначе
						Продолжить;
					КонецЕсли;
					Результат.КоличествоНеПустых = Результат.КоличествоНеПустых + 1;
					Если ТипЗнч(Число) = Тип("Число") Тогда
						Результат.КоличествоЧисловых = Результат.КоличествоЧисловых + 1;
						Результат.Сумма = Результат.Сумма + Число;
						Если Результат.КоличествоЧисловых = 1 Тогда
							Результат.Минимум  = Число;
							Результат.Максимум = Число;
						Иначе
							Результат.Минимум  = Мин(Число,  Результат.Минимум);
							Результат.Максимум = Макс(Число, Результат.Максимум);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если Результат.КоличествоЧисловых > 0 Тогда
		Результат.Среднее = Результат.Сумма / Результат.КоличествоЧисловых;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция БезопаснаяСтрокаКоманды(КомандаЗапуска) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(КомандаЗапуска) = Тип("Строка") Тогда 
		
		Если СодержитНебезопасныеДействия(КомандаЗапуска) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось запустить программу
				           |по причине:
				           |Недопустимая строка команды
				           |%1
				           |по причине:
				           |Строка команды не должна содержать символы: ""$"", ""`"", ""|"", "";"".'"),
				КомандаЗапуска);
		КонецЕсли;
		
		Результат = КомандаЗапуска;
		
	ИначеЕсли ТипЗнч(КомандаЗапуска) = Тип("Массив") Тогда
		
		Если КомандаЗапуска.Количество() > 0 Тогда 
			
			Если СодержитНебезопасныеДействия(КомандаЗапуска[0]) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось запустить программу
				           |по причине:
				           |Недопустимая команда или путь к исполняемому файлу
				           |%1
				           |по причине:
				           |Команда не должна содержать символы: ""$"", ""`"", ""|"", "";"".'"),
				КомандаЗапуска[0]);
			КонецЕсли;
			
			Результат = МассивВСтрокуКоманды(КомандаЗапуска);
			
		Иначе
			ВызватьИсключение
				НСтр("ru = 'Ожидалось, что первый элемент массива КомандаЗапуска будет командой или путем к исполняемому файлу.'");
		КонецЕсли;
		
	Иначе 
		ВызватьИсключение 
			НСтр("ru = 'Ожидалось, что значение КомандаЗапуска будет <Строка> или <Массив>'");
	КонецЕсли;
		
	Возврат Результат
	
КонецФункции

Функция СодержитНебезопасныеДействия(Знач СтрокаКоманды)
	
	Возврат СтрНайти(СтрокаКоманды, "$") <> 0
		Или СтрНайти(СтрокаКоманды, "`") <> 0
		Или СтрНайти(СтрокаКоманды, "|") <> 0
		Или СтрНайти(СтрокаКоманды, ";") <> 0;
	
КонецФункции

Функция МассивВСтрокуКоманды(КомандаЗапуска)
	
	Результат = Новый Массив;
	НужныКавычки = Ложь;
	Для Каждого Аргумент Из КомандаЗапуска Цикл
		
		Если Результат.Количество() > 0 Тогда 
			Результат.Добавить(" ")
		КонецЕсли;
		
		НужныКавычки = Аргумент = Неопределено
			Или ПустаяСтрока(Аргумент)
			Или СтрНайти(Аргумент, " ")
			Или СтрНайти(Аргумент, Символы.Таб)
			Или СтрНайти(Аргумент, "(")
			Или СтрНайти(Аргумент, ")")
			Или СтрНайти(Аргумент, "[")
			Или СтрНайти(Аргумент, "]")
			Или СтрНайти(Аргумент, "{")
			Или СтрНайти(Аргумент, "}")
			Или СтрНайти(Аргумент, "^")
			Или СтрНайти(Аргумент, "=")
			Или СтрНайти(Аргумент, ";")
			Или СтрНайти(Аргумент, "!")
			Или СтрНайти(Аргумент, "'")
			Или СтрНайти(Аргумент, "+")
			Или СтрНайти(Аргумент, ",")
			Или СтрНайти(Аргумент, "`")
			Или СтрНайти(Аргумент, "~")
			Или СтрНайти(Аргумент, "$")
			Или СтрНайти(Аргумент, "|");
		
		Если НужныКавычки Тогда 
			Результат.Добавить("""");
		КонецЕсли;
		
		Результат.Добавить(СтрЗаменить(Аргумент, """", """"""));
		
		Если НужныКавычки Тогда 
			Результат.Добавить("""");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат);
	
КонецФункции

#КонецОбласти