////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы подсистемы "Управление IT-отделом 8"
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт

	Описание.Имя = "УправлениеITОтделом8УФ";
	Описание.Версия = "3.1.8.3";
	Описание.ИдентификаторИнтернетПоддержки = "SSL";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить("ИнтернетПоддержкаПользователей");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаПодключаемогоОборудования");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ,
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПервыйЗапуск";
	
	// Отключение Центра мониторинга.
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ЦентрМониторинга.ОтключитьПодсистему";
	
	#Область _3_1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_0_44_1";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.2";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПустойОбработчик";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.45.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_0_45_1";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_0_1";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.2";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПустойОбработчик";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.3";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_0_3";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.4";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_0_4";
	Обработчик.РежимВыполнения = "Оперативно";
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.6";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_0_6";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.6";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_0_6_ЗаполнениеСпецификацийИЗаказовПоставщику";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.0";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_1_0";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_1_1";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.2";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_1_2";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.3";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПустойОбработчик";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПустойОбработчик";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_2_1_ЗаполнениеНДСПланированиеБюджетов";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти
	
	#Область _3_1_3
	
	ОчередьОтложеннойОбработки  = 1;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеКонтактнойИнформации";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Заполнение правил событий для получения почты.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ЗаполнениеПравилСобытийДляСозданияЗаданийИзПисем";
	Обработчик.РежимВыполнения = "Оперативно";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_УстановкаПриоритетаОпределенияКлиентовИИнициаторов";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеСтатейДоходовРасходов";
	Обработчик.РежимВыполнения = "Оперативно";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеПроцессовЗаданийШаблоныЗаданий";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обновим SLA.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеSLAИСервисов";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обновим метрики.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеМетрик";
	Обработчик.РежимВыполнения = "Оперативно";	
			
	// Обновим Виды работ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеВидовРабот";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Проверить каким может быть реквизит ОтветственныйИнициатора.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.ОчередьОтложеннойОбработки = ОчередьОтложеннойОбработки;
	ОчередьОтложеннойОбработки = ОчередьОтложеннойОбработки + 1;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b50c63fc-96b5-4954-92f6-4f65c0d784ce");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение значений реквизитов ""Клиент"", ""Инициатор"" и ""Тип процесса"" у документов ""Задание"".
		|До завершения обработки данные реквизиты у этих документов будут отображаться некорректно.'");
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеРеквизитовЗаданий";
	Обработчик.РежимВыполнения = "Отложенно";
	
	// Обновим Трудозатраты (Хронометраж).
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.ОчередьОтложеннойОбработки = ОчередьОтложеннойОбработки;
	ОчередьОтложеннойОбработки = ОчередьОтложеннойОбработки + 1;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6efa04fe-3f79-4a5d-a035-767d40b207f8");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение значений реквизита ""Инициатор"" для записей регистра ""Трудозатраты"".
		|До завершения обработки данных реквизит ""Инициатор"" будет отображаться некорректно.'");
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеТрудозатрат";
	Обработчик.РежимВыполнения = "Отложенно";
	
	// Обновим справочник "Банки".
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеБанков";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Видимость местоположений.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеВидовМестоположений";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Отклонения от графика.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ЗаполнитьВидыПричинОтклоненияОтГрафика";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Наряды на работы.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.ОчередьОтложеннойОбработки = ОчередьОтложеннойОбработки;
	ОчередьОтложеннойОбработки = ОчередьОтложеннойОбработки + 1;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("930869d1-5965-4764-9044-a712f43ce2c3");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение значений реквизита ""Услуга"" в документе ""Наряд на работы"".
		|До завершения обработки данных реквизит ""Услуга"" будет отображаться некорректно.'");
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеНарядовНаРаботы";
	Обработчик.РежимВыполнения = "Отложенно";
	
	// Взаиморасчеты с контрагентами.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.ОчередьОтложеннойОбработки = ОчередьОтложеннойОбработки;
	ОчередьОтложеннойОбработки = ОчередьОтложеннойОбработки + 1;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4d5705ec-f876-4ee3-908a-fab33a847b04");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение значений регистра накоплений ""Взаиморасчеты с контрагентами"".
		|До завершения обработки данных данные из регистра ""Взаиморасчеты с контрагентами"" будут отображаться некорректно.'");
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеВзаиморасчетыСКонтрагентами";
	Обработчик.РежимВыполнения = "Отложенно";	
		
	// Обновление дел.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеДел";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обновление канбан.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеКанбан";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обновление рабочего стола.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновлениеРабочийСтол";
	Обработчик.РежимВыполнения = "Оперативно";
		
	// Регистрация справочников для мобильных клиентов.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ЗарегистрироватьСправочникиМП";
	Обработчик.РежимВыполнения = "Оперативно";

	// Изменение цветов тегов.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОбновитьТеги";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Удаление документа "План работ".
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ОчисткаПлановРабот";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти	
	
	#Область _3_1_3_2
	
	// Регистрация справочников для мобильных клиентов.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.2";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ЗарегистрироватьСправочникиМП";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти
	
	#Область _3_1_3_5
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.5";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_5_ОбновлениеЭтапаПроцесса";
	Обработчик.РежимВыполнения = "Оперативно";
		
	#КонецОбласти
    
    #Область _3_1_3_6
    
	// Отклонения от графика.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.6";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_1_ЗаполнитьВидыПричинОтклоненияОтГрафика";
	Обработчик.РежимВыполнения = "Оперативно";
    
	// Отклонения от графика.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.6";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_6_ОбновлениеНумерацииSLA";
	Обработчик.РежимВыполнения = "Оперативно";    
    
    #КонецОбласти
	
    #Область _3_1_3_8
    
	// Отклонения от графика.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.8";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_8_ЗаполнитьШаблоныЗаданий";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обновление шаблона оформления оповещений.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.8";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_8_ЗаполнитьШаблонОформления";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обновление шаблонов сообщений и шаблонов оформления в действиях правил событий.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.8";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_8_ПерезаполнитьДействияПравилСобытий";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти
	
	#Область _3_1_3_10
	
	// Обновление рабочего стола по умолчанию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.10";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_10_ОбновлениеРабочийСтол";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти
    
	#Область _3_1_3_12
	
	// Обновление рабочего стола по умолчанию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.12";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_12_УстановкаКонстантыИспользоватьИзображенияПользователейВКомментариях";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти
    
    #Область _3_1_3_14
    
	// Обновление оформлений писем (добавление тега quote)
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.14";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_14_ОбновлениеОформленияОповещенийEmailПравилСобытий";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обновление видов первичных документов.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.14";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_14_ОбновлениеВидовПервичныхДокументов";
	Обработчик.РежимВыполнения = "Оперативно";
	
    #КонецОбласти
	
    #Область _3_1_3_15
    	
	// Заполнение справочников Параметры расчетов и Виды начислений.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.15";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_15_ЗаполнитьПараметрыРасчетовИВидыНачислений";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Заполнение документа Учет денежных средств.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.15";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_15_ЗаполнитьУчетДенежныхСредств";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Заполнение весов приоритетов заданий.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.15";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_15_ЗаполнитьВесПриоритетовЗадания";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Заполнение даты начала выполнения работ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.15";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_15_ЗаполнитьДатуНачалаРаботВЗадании";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Заполнение очереди выполнения заданий.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.15";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_3_15_ЗаполнитьОчередьВыполненияЗаданий";
	Обработчик.РежимВыполнения = "Оперативно";	
	
	#КонецОбласти
	
	#Область _3_1_4_2
	
	// Заполнение регистра УслугиСервисов.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.2";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_4_2_ЗаполнениеУслугиСервисов";
	Обработчик.РежимВыполнения = "Оперативно";	
	
	// Изменение ролей.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.2";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_4_2_ИзменитьРолиПрофилей";
	Обработчик.РежимВыполнения = "Оперативно";
		
	// Обновление настроек Telegram.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.2";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_4_2_ОбновитьНастройкиTelegram";
	Обработчик.РежимВыполнения = "Оперативно";		
		
	// Отключение Центра мониторинга.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.2";
	Обработчик.Процедура = "ЦентрМониторинга.ОтключитьПодсистему";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти
	
	#Область _3_1_4_3
	
	// Обновление видов КИ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.3";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_4_3_ОбновитьВидыКИ";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обновление видов КИ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.3";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_4_3_ОбновитьПодсистемуTelegram";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обновление вариантов отчетов.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.3";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ОбновитьВариантыОтчетов";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обновление рабочего стола по умолчанию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.3";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_4_3_ОбновлениеРабочийСтол";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Перенос логинов и паролей из регистра в справочник.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.3";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_4_3_ПереносЛогиновИПаролей";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Корректировка документов "Учет денежных средств".
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.3";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_4_3_КорректировкаУчетДС";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Корректировка документов.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.3";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_4_3_ЗаполнитьВидДокумента";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Корректировка документов.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.3";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_4_3_ЗарегистрироватьСправочникиМП";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти
	
	#Область _3_1_4_5
	
	// Обновление вариантов отчетов.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.5";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ОбновитьВариантыОтчетов";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти
    
    #Область _3_1_4_6
    
    // Обновление групп канбан-доски.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.6";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_4_6_ОбновитьВидГруппКанбанДоски";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Перенос движений документа Инвентаризация.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.6";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_4_6_ПеренестиДвиженияДокументаИнвентаризация";
	Обработчик.РежимВыполнения = "Оперативно";
	
    #КонецОбласти
    
    #Область _3_1_5_1
        
	// Добавление системной учетной записи по умолчанию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_5_1_ОбновитьНастройкиПочты";
	Обработчик.РежимВыполнения = "Оперативно";
    
	// Заполнение исполнителей в документе Задание.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.1";
	Обработчик.ОчередьОтложеннойОбработки = ОчередьОтложеннойОбработки;
	ОчередьОтложеннойОбработки = ОчередьОтложеннойОбработки + 1;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a15d8473-9956-451b-8dfa-ff5095c2f4df");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение исполнителей в документе ""Задание"".
		|До завершения обработки данных данные в документе ""Задание"" будут отображаться некорректно.'");
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_5_1_ОбновитьИсполнителейЗаданий";
	Обработчик.РежимВыполнения = "Отложенно";
    
    #КонецОбласти
	
	#Область _3_1_6_1
	
	// Обновление канбан.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_6_1_ОбновитьКанбан";
	Обработчик.РежимВыполнения = "Оперативно";

	#КонецОбласти
	
	#Область _3_1_6_2
	
	// Обновление кодов справочника пользователи Telegram.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.2";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_6_2_ОбновитьКодыTelegram";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Оценки заданий.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.2";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_6_2_ОбновитьОценкиЗаданий";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Оценки заданий.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.2";              
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_6_2_ОбновитьДобавленныеСвойства";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти
		
	#Область _3_1_7_1
	
	// Обновляем электронную почту в КИ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_7_1_ОбновлениеПустыхАдресовЭлектроннойПочтыКИ";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обновляем электронную почту в КИ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.1";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_7_1_ОбновлениеПравилСобытий";
	Обработчик.РежимВыполнения = "Оперативно";	
		
	#КонецОбласти
	
	#Область _3_1_7_2
	
	// Обновляем проекты.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.2";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_7_2_ОбновлениеПроектов";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти
	
	#Область _3_1_7_5
	
	// Обновляем номенклатуру.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.5";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_7_5_ОбновлениеИзображенийНоменклатуры";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обновляем физические лица.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.5";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_7_5_ОбновлениеИзображенийФизическихЛиц";
	Обработчик.РежимВыполнения = "Оперативно";
		
	// Обновление вариантов отчетов.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.5";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ОбновитьВариантыОтчетов";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.5";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_7_5_ИспользоватьУправлениеПроектами";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти
	
	#Область _3_1_7_7
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.7";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_7_7_ОбновлениеМаркеровЗакрытия";
	Обработчик.РежимВыполнения = "Оперативно";
		
	#КонецОбласти
	
	#Область _3_1_7_8
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.8";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_7_8_ЗаполнениеКонтактныхЛиц";
	Обработчик.РежимВыполнения = "Оперативно";

	// Telegram.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.8";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_7_8_ОбновитьTelegram";
	Обработчик.РежимВыполнения = "Оперативно";
		
	#КонецОбласти
	
	#Область _3_1_7_9
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.9";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_7_9_ОбновитьЕжедневныеОтчеты";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти

	#Область _3_1_8_0
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.0";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_8_0_ОбновитьЕжедневныеОтчеты";
	Обработчик.РежимВыполнения = "Оперативно";	
		
	#КонецОбласти
	
	#Область _3_1_8_3
	
	// ЛК.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.3";
	Обработчик.Процедура = "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПереходНаВерсию_3_1_8_3_ОбновитьНастройкиЛичногоКабинета";
	Обработчик.РежимВыполнения = "Оперативно";
	
	#КонецОбласти
			
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
//@skip-warning
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	//Если Метаданные.Обработки.Найти("ЗащищеннаяОбработка") <> Неопределено Тогда
	//	ВызватьИсключение НСтр("ru = 'Из дистрибутива не удалена защищенная обработка'");
	//КонецЕсли;
	//Если Метаданные.Обработки.Найти("МенеджерОбъектов") <> Неопределено Тогда
	//	ВызватьИсключение НСтр("ru = 'Из дистрибутива не удален менеджер объектов'");
	//КонецЕсли;
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
//@skip-warning
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт

КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
//@skip-warning
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
//@skip-warning
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
//@skip-warning
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
//@skip-warning
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

//@skip-warning
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) Экспорт
	
КонецПроцедуры

Процедура УдалитьИзмененныеРолиИзПрофилейГруппДоступа(МассивРолей) Экспорт
	
	Если МассивРолей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивРолей Цикл
		ИдентификаторРоли = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("Имя", ЭлементМассива);
		Если ИдентификаторРоли <> Неопределено И ЗначениеЗаполнено(ИдентификаторРоли) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПрофилиГруппДоступаРоли.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
				|ГДЕ
				|	ПрофилиГруппДоступаРоли.Роль = &Роль";
			
			Запрос.УстановитьПараметр("Роль", ИдентификаторРоли);
			РезультатЗапроса 	   = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ПрофильОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				ОтборСтрок    = Новый Структура("Роль", ИдентификаторРоли);
				МассивСтрок   = ПрофильОбъект.Роли.НайтиСтроки(ОтборСтрок);
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					ПрофильОбъект.Роли.Удалить(СтрокаМассива);
				КонецЦикла;
				
				//ПрофильОбъект.ОбменДанными.Загрузка = Истина;
				Попытка
					ПрофильОбъект.Записать();
				Исключение
				КонецПопытки;
				
			КонецЦикла;
					
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ.

// Выполняется при первом запуске из модуля "УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП".
//
// Параметры:
//	Нет
//
Процедура ПервыйЗапуск() Экспорт
	
	ВерсияИБ = ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя);
	
	Если ВерсияИБ = "0.0.0.0" Тогда

		ВыборкаПользователи = Справочники.Пользователи.Выбрать();
		Пока ВыборкаПользователи.Следующий() Цикл
			ВыборкаПользователи.ПолучитьОбъект().Записать();
		КонецЦикла;
		
		РУБСсылка = НайтиСоздатьВалюту("643", НСтр("ru = 'руб.'"),
			НСтр("ru = 'Российский рубль'"), "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2", Ложь, "",
			Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод);
			
		Константы.НациональнаяВалюта.Установить(РУБСсылка);
		
		// Цвета по умолчанию просроченной задачи.
		Константы.ЦветФонаПросроченнойЗадачи.Установить(РаботаСЦветомКлиентСервер.ЦветВHex(Новый Цвет(253, 235, 235)));
		Константы.ЦветТекстаПросроченнойЗадачи.Установить(РаботаСЦветомКлиентСервер.ЦветВHex(WebЦвета.Черный));
		
		// Цвета по умолчанию помеченной задачи.
		Константы.ЦветФонаПомеченнойЗадачи.Установить(РаботаСЦветомКлиентСервер.ЦветВHex(Новый Цвет(255, 255, 204)));
		Константы.ЦветТекстаПомеченнойЗадачи.Установить(РаботаСЦветомКлиентСервер.ЦветВHex(WebЦвета.Черный));
		
		// Константы.
		Константы.АвтоматическоеОткрытиеФормПриАктивацииПодсистем.Установить(Ложь);
		Константы.ВыражениеПредставленияКарточкиНоменклатурыПоУмолчанию.Установить(
			УправлениеITОтделом8УФ.ПолучитьВыражениеНаименованияКарточкиПоУмолчанию());
			
		Константы.ВыражениеПредставленияМестаХранения.Установить(
			УправлениеITОтделом8УФ.ПолучитьВыражениеНаименованияМестаХраненияПоУмолчанию());
			
		Константы.ИзвлекатьТекстыФайловНаСервере.Установить(Истина);
		Константы.ИспользоватьГруппыПользователей.Установить(Истина);
		Константы.ИспользоватьЗаметки.Установить(Истина);
		Константы.ИспользоватьНапоминанияПользователя.Установить(Истина);
		Константы.ИспользоватьПолнотекстовыйПоиск.Установить(Истина);
		Константы.ИспользоватьПочтовыйКлиент.Установить(Истина);
		Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
		Константы.ИспользоватьВерсионированиеОбъектов.Установить(Ложь);
		Константы.ДлинаИнвентарногоНомера.Установить(10);
		Константы.ДобавлятьЛидирующиеНулиВИнвентарномНомере.Установить(Истина);
		Константы.ПроверятьУникальностьИнвентарногоНомера.Установить(Истина);
		Константы.ПроверятьУникальностьСерийногоНомера.Установить(Истина);
		Константы.ИспользоватьОбщиеДополнительныеРеквизитыИСведения.Установить(Истина);
		Константы.ИспользоватьОбщиеДополнительныеЗначения.Установить(Истина);
		Константы.ИспользоватьПочтовыйКлиент.Установить(Истина);
		Константы.ИспользоватьПрочиеВзаимодействия.Установить(Истина);
		Константы.ОтправлятьПисьмаВФорматеHTML.Установить(Истина);
		Константы.ИспользоватьПризнакРассмотрено.Установить(Истина);
		Константы.ИспользоватьПодключаемоеОборудование.Установить(Истина);
		Константы.СрокПолезногоИспользованияКомплектующих.Установить(60);
		Константы.ИспользоватьУчетВремени.Установить(Истина);
		Константы.ИспользоватьРемонтыИОбслуживание.Установить(Истина);
		Константы.ИспользоватьАнкетирование.Установить(Истина);
		Константы.ИспользоватьБюджетирование.Установить(Истина);
		Константы.ИспользоватьДоступКИнформационнымРесурсам.Установить(Истина);
		Константы.ИспользоватьОповещенияПоSMS.Установить(Истина);
		Константы.ИспользованиеВыполнениеЗаданияПоТекстовымФразамВСообщениях.Установить(Истина);
		Константы.ИспользоватьСкладскойУчет.Установить(Истина);
		Константы.ИспользоватьРемонтыИОбслуживание.Установить(Истина);
		Константы.ИспользоватьServiceDesk.Установить(Истина);
		Константы.SLAСервисыРаботы.Установить(Истина);
		Константы.ИспользоватьУдаленноеУправление.Установить(Истина);
		Константы.ИнтервалАвтоматическогоЗавершенияВыполненыхЗаданий.Установить(120);
		Константы.СрокХраненияЗаписейЖурналаПравилВыполненияСобытий.Установить(30);
		Константы.ИспользоватьШаблоныСообщений.Установить(Истина);
		Константы.ИспользоватьКанбан.Установить(Истина);
		Константы.СкладскойУчетКлиентов.Установить(Ложь);
		Константы.ПриСозданииЗаданийИзПисемДобавлятьНаблюдателейИзПолучателейКопий.Установить(Истина);
		Константы.ИспользоватьПроблемы.Установить(Истина);
		Константы.ИспользоватьCRM.Установить(Истина);
		Константы.ИспользоватьМетрики.Установить(Истина);
		Константы.ДнейХраненияВыполненныхДел.Установить(30);
		Константы.ИспользоватьДела.Установить(Истина);
		Константы.ИспользоватьПервичныеДокументы.Установить(Истина);
		Константы.ИспользоватьПодсистемуЗаработнаяПлата.Установить(Истина);
		Константы.ИспользоватьИзображенияПользователейВКомментариях.Установить(Истина);
		Константы.ИспользоватьУправлениеПроектами.Установить(Истина);
		УчетнаяЗаписьПоУмолчанию = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
        Константы.УчетнаяЗаписьЭлектроннойПочтыПоУмолчанию.Установить(УчетнаяЗаписьПоУмолчанию);
		Константы.ДлительностьСпринтаПоУмолчанию.Установить(14);
		ВариантУстановкиОценкиОтветнымПисьмом = Перечисления.СпособУстановкиОценкиЗаданияВПисьме.ОтветнымПисьмом;
		Константы.СпособУстановкиОценкиЗаданияВПисьме.Установить(ВариантУстановкиОценкиОтветнымПисьмом);
		
		МЗ = Константы.ИспользоватьМобильноеПриложение.СоздатьМенеджерЗначения();
		МЗ.ОбменДанными.Загрузка = Истина;
		МЗ.Значение = Ложь;
		МЗ.Записать();

		СтрокаКонтактнойИнформации  = "Copyright © 2011-" + Формат(ТекущаяДатаСеанса(), "ДФ=yyyy")
			+ " <a href='https://softonit.ru/'>https://softonit.ru</a>.
			 | All rights reserved. Phone: +7(861)203-39-44. E-mail: <a href='mailto:support@softonit.ru'>Написать нам</a>";
		Константы.КонтактыРазработчиков.Установить(СтрокаКонтактнойИнформации);
		
		// Заполняем справочник ВидыНоменклатуры.
		Справочники.ВидыНоменклатуры.ЗаполнитьВидыНоменклатурыПриПервоначальномЗаполнении();
		
		// Заполняем справочник ВидыМестХранения.
		Справочники.ВидыМестХранения.ЗаполнитьВидыМестХраненияПриПервоначальномЗаполнении();
		
		// Заполняем справочник ВидыПомещений.
		Справочники.ВидыМестоположений.ЗаполнитьВидыПомещенийПриПервоначальномЗаполнении();
		
		// Заполняем справочник СостоянияЗаказовПоставщикам.
		Справочники.СостоянияЗаказовПоставщикам.ЗаполнитьСостоянияЗаказовПоставщикамПриПервоначальномЗаполнении();
		
		// Заполняем справочник СостоянияЗаказовКлиентов.
		Справочники.СостоянияЗаказовКлиентов.ЗаполнитьСостоянияЗаказовКлиентовПриПервоначальномЗаполнении();
		
		// Заполняем справочник СостоянияРемонтов.
		Справочники.СостоянияОбслуживания.ЗаполнитьСостоянияОбслуживанияПриПервоначальномЗаполнении();
		
		// Заполняем справочник СостояниеНарядовНаРаботы.
		Справочники.СостояниеНарядовНаРаботы.ЗаполнитьСостояниеНарядовНаРаботыПриПервоначальномЗаполнении();
		
		// Состояние событий.
		Справочники.СостоянияСобытий.ЗаполнитьСостоянияСобытийПриПервоначальномЗаполнении();
		
		// Виды характеристик.
		ПланыВидовХарактеристик.ВидыХарактеристик.ЗаполнитьВидыХарактеристикПриПервоначальномЗаполнении();
		
		// Оценки заданий.
		Справочники.ОценкиЗаданий.ЗаполнитьОценкиЗаданийПриПервоначальномЗаполнении();
		
		// Виды работ.
		Справочники.ВидыРабот.ЗаполнитьВидыРаботПриПервоначальномЗаполнении();
		
		// Оформление писем.
		Справочники.ОформленияОповещенийEmailПравилСобытий.ЗаполнитьПриПервоначальномЗаполнении();
		
		// Состояния сотрудников.
		Справочники.ВидыПричинОтклоненияОтГрафика.ЗаполнитьВидыПричинОтклоненияОтГрафикаПриПервоначальномЗаполнении();
		
		// Метрики.
		Справочники.Метрики.ЗаполнитьПриПервоначальномЗаполнении();
		
		#Область ПравилаСобытий
		
		// Действия правил событий.
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДействияПравилСобытий.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДействияПравилСобытий КАК ДействияПравилСобытий
			|ГДЕ
			|	ДействияПравилСобытий.ЭтоГруппа = ЛОЖЬ";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СпрОбъект.Идентификатор = СпрОбъект.ИмяПредопределенныхДанных;
				СпрОбъект.ИмяПредопределенныхДанных = "";
				СпрОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
				СпрОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДействияПравилСобытий.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДействияПравилСобытий КАК ДействияПравилСобытий
			|ГДЕ
			|	ДействияПравилСобытий.ЭтоГруппа = ЛОЖЬ";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СпрОбъект.Удалить();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДействияПравилСобытий.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДействияПравилСобытий КАК ДействияПравилСобытий
			|ГДЕ
			|	ДействияПравилСобытий.ЭтоГруппа = ИСТИНА";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СпрОбъект.ИмяПредопределенныхДанных = "";
				СпрОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
				СпрОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;		
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДействияПравилСобытий.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДействияПравилСобытий КАК ДействияПравилСобытий
			|ГДЕ
			|	ДействияПравилСобытий.ЭтоГруппа = ИСТИНА";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СпрОбъект.Удалить();
			Исключение
			КонецПопытки;
		КонецЦикла;		
		
		Справочники.ПравилаСобытий.ЗаполнитьПравилаСобытийПриПервоначальномЗаполнении();
		
		#КонецОбласти
		
		// Канбан.
		Справочники.ГруппыКанбанДоски.ЗаполнитьГруппыКанбанДоскиПриПервоначальномЗаполнении();
		Справочники.КанбанДоски.ЗаполнитьКанбанДоскиПриПервоначальномЗаполнении();
		
		// Telegram
		TelegramСервер.ЗаполнитьНастройкиTelegramПоУмолчанию(Истина);
		
		//=========================
		// ServiceDesk
		Константы.ОсновнойПроцесс.Установить(Справочники.Процессы.Обращение);
		Константы.ОсновнаяОценкаПриРешенииЗадания.Установить(Справочники.ОценкиЗаданий.БезОценки);
		// Заполняем справочник ЭтапыПроцессов.
		Справочники.ЭтапыПроцессов.ЗаполнитьЭтапыПроцессовПриПервоначальномЗаполнении();
		// Заполняем справочник Процессы.
		Справочники.Процессы.ЗаполнитьПроцессыПриПервоначальномЗаполнении();
		// Маркеры.
		УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.УстановкаМаркеровЗадания();
		Константы.ТранслитSMSПриПревышенииДлиныТекста.Установить(Истина);
				
		// Заполним ставки НДС.
		СтавкаНДС20 							= ЗаполнитьСтавкиНДСПервыйЗапуск();
		
		// Наша организация.
		НашаОрганизацияСсылка 					= Справочники.Организации.ОсновнаяОрганизация;
		НашаОрганизация 						= НашаОрганизацияСсылка.ПолучитьОбъект();
		НашаОрганизация.НаименованиеПолное	  	= НСтр("ru = 'ООО ""Наша фирма""'");
		НашаОрганизация.Префикс				  	= "НФ-";
		НашаОрганизация.ВидКонтрагента			= Перечисления.ВидКонтрагента.ЮридическоеЛицо;
		НашаОрганизация.СтавкаНДСПоУмолчанию  	= СтавкаНДС20;
		НашаОрганизация.Записать();		
		Константы.ОсновнаяОрганизация.Установить(Справочники.Организации.ОсновнаяОрганизация);
		
		// Заполним реквизиты предопределенных единиц измерения.
		// Штука.
		ШтСсылка 								= Справочники.КлассификаторЕдиницИзмерения.шт;
		ШтОбъект 								= ШтСсылка.ПолучитьОбъект();
		ШтОбъект.НаименованиеПолное 			= НСтр("ru = 'Штука'");
		ШтОбъект.МеждународноеСокращение 		= "PCE";
		ШтОбъект.Записать();
		
		// Тариф (основной)
		Тариф 									= Справочники.Тарифы.Основной.ПолучитьОбъект();
		Тариф.Валюта 							= РУБСсылка;
		Тариф.Статус							= Перечисления.СтатусыТарифов.ВРаботе;
		Тариф.Записать();
		
		УстановитьВидыКонтактнойИнформации();
		
		// ТСД и штрихкоды.
		МенеджерОборудованияВызовСервераПереопределяемый.ОбновлениеБиблиотеки();
		
		СоздатьКалендарьПятидневкаРоссийскойФедерации();
		
		// Заполнение личного кабинета.
		Справочники.ЛичныйКабинет.ЗаполнитьСтраницыЛичногоКабинетаПриПервоначальномЗаполнении();
		
		// Заполнение рабочего стола.
		Справочники.РабочиеСтолы.ЗаполнитьРабочийСтолПриПервоначальномЗаполнении();
		
		// Виды первичных документов.
		Справочники.ВидыПервичныхДокументов.ЗаполнитьВидыПервичныхДокументовПриПервоначальномЗаполнении();
		
		// Динамические приоритеты.
		Константы.ИспользоватьДинамическиеПриоритеты.Установить(Истина);
		Константы.ВесКритическогоПриоритетаЗадания.Установить(40);
		Константы.ВесВысокогоПриоритетаЗадания.Установить(30);
		Константы.ВесСреднегоПриоритетаЗадания.Установить(20);
		Константы.ВесНизкогоПриоритетаЗадания.Установить(10);
		Константы.ВесОченьНизкогоПриоритетаЗадания.Установить(0);
		Константы.ШагКорректировкиВеса.Установить(10);
		
		// Очередь выполнения заданий.
		Константы.ИспользоватьОчередьВыполненияЗаданий.Установить(Истина);
		
	КонецЕсли;
		
КонецПроцедуры

//@skip-warning
Процедура ПустойОбработчик() Экспорт
	
	// НИЧЕГО НЕ ДЕЛАЕМ
	
КонецПроцедуры

Процедура УстановитьВидыКонтактнойИнформации() Экспорт
	
	Выборка = Справочники.ВидыКонтактнойИнформации.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Тип) ИЛИ Выборка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = Выборка.Ссылка.ПолучитьОбъект();
		
		Если НЕ Выборка.ЭтоГруппа Тогда
			
			Если СтрНайти(НРег(Элемент.Наименование), "телефон") > 0 Тогда
				Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				Элемент.МожноИзменятьСпособРедактирования = Истина;
				Элемент.РазрешитьВводНесколькихЗначений = Истина;
			ИначеЕсли СтрНайти(НРег(Элемент.Наименование), "email") > 0 
				ИЛИ СтрНайти(НРег(Элемент.Наименование), "mail") > 0 Тогда
				Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				Элемент.МожноИзменятьСпособРедактирования = Истина;
				Элемент.РазрешитьВводНесколькихЗначений = Истина;
			ИначеЕсли СтрНайти(НРег(Элемент.Наименование), "адрес") > 0 Тогда
				Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			ИначеЕсли СтрНайти(НРег(Элемент.Наименование), "факс") > 0 Тогда
				Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Факс;	
			ИначеЕсли СтрНайти(НРег(Элемент.Наименование), "telegram") > 0 Тогда
				Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Telegram;	
			Иначе
				Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
			КонецЕсли;
			
			Если Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				Элемент.РазрешитьВводНесколькихЗначений = ?(СтрНайти(НРег(Элемент.Наименование), "sms") > 0, Ложь, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент.Используется = Истина;
		
		Элемент.Записать();
	КонецЦикла;
		
КонецПроцедуры

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописи, ЗагружаетсяИзИнтернета = Ложь, 
	ФормулаРасчетаКурса, СпособУстановкиКурса) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда

		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код					= Код;
		СправочникОбъект.Наименование			= Наименование;
		СправочникОбъект.НаименованиеПолное		= НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи 		= ПараметрыПрописи;
		СправочникОбъект.ЗагружаетсяИзИнтернета	= ЗагружаетсяИзИнтернета;
		СправочникОбъект.ФормулаРасчетаКурса 	= ФормулаРасчетаКурса;
		СправочникОбъект.СпособУстановкиКурса 	= СпособУстановкиКурса;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
		
	ИначеЕсли Ссылка.Предопределенный 
		И ПустаяСтрока(Ссылка.НаименованиеПолное) Тогда
		
		// Это первое обращение к предопределенному элементу
		СправочникОбъект = Ссылка.ПолучитьОбъект();

		СправочникОбъект.Наименование			= Наименование;
		СправочникОбъект.НаименованиеПолное		= НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи		= ПараметрыПрописи;
		СправочникОбъект.ЗагружаетсяИзИнтернета	= ЗагружаетсяИзИнтернета;
		СправочникОбъект.ФормулаРасчетаКурса 	= ФормулаРасчетаКурса;
		СправочникОбъект.СпособУстановкиКурса 	= СпособУстановкиКурса;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

	КонецЕсли;
	
	// установим курс и кратность = 1 на 1 января 1980
	РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
	
	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

//@skip-warning
Функция ДобавитьСтавкуНДС(Наименование, Значение, Расчетная = Ложь, НеОблагается = Ложь)
	
	НайденныйЭлемент = Справочники.СтавкиНДС.НайтиПоНаименованию(Наименование, Истина);
	Если НЕ ЗначениеЗаполнено(НайденныйЭлемент) Тогда
		СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
		СтавкаНДС.Расчетная = Расчетная;
		СтавкаНДС.Наименование = Наименование;
		СтавкаНДС.Ставка = Значение;
		СтавкаНДС.Записать();
	КонецЕсли;
	
КонецФункции

// Функция заполняет в ИБ справочник "Ставки НДС" и возвращает
// ссылку на ставку НДС 18% для дальнейшего использования.
//
Функция ЗаполнитьСтавкиНДСПервыйЗапуск() Экспорт

	ДобавитьСтавкуНДС("10%", 10);
	ДобавитьСтавкуНДС("18% / 118%", 18, Истина);
	ДобавитьСтавкуНДС("10% / 110%", 10, Истина);
	ДобавитьСтавкуНДС("0%", 0);
	ДобавитьСтавкуНДС(НСтр("ru = 'Без НДС'"), 0,,Истина);
	ДобавитьСтавкуНДС("18%", 18);
	ДобавитьСтавкуНДС("20% / 120%", 20, Истина);
	Возврат ДобавитьСтавкуНДС("20%", 20);

КонецФункции // ЗаполнитьСтавкиНДСПервыйЗапуск()

// (7) Процедура создает график работы на основе производственного календаря.
// Российской Федерации по шаблону "Пятидневка".
//
Процедура СоздатьКалендарьПятидневкаРоссийскойФедерации() Экспорт
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	Если ПроизводственныйКалендарь = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Справочники.Календари.НайтиПоРеквизиту("ПроизводственныйКалендарь", ПроизводственныйКалендарь).Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйГрафикРаботы = Справочники.Календари.СоздатьЭлемент();
	НовыйГрафикРаботы.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроизводственныйКалендарь, "Наименование");
	НовыйГрафикРаботы.ПроизводственныйКалендарь = ПроизводственныйКалендарь;
	НовыйГрафикРаботы.СпособЗаполнения = Перечисления.СпособыЗаполненияГрафикаРаботы.ПоНеделям;
	НовыйГрафикРаботы.ДатаНачала = НачалоГода(ТекущаяДатаСеанса());
	НовыйГрафикРаботы.УчитыватьПраздники = Истина;
	
	// Заполняем недельный цикл как пятидневку
	Для НомерДня = 1 По 7 Цикл
		НовыйГрафикРаботы.ШаблонЗаполнения.Добавить().ДеньВключенВГрафик = НомерДня <= 5;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйГрафикРаботы, Истина, Истина);
	
КонецПроцедуры // СоздатьКалендарьПятидневкаРоссийскойФедерации()

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Создана группа справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Создан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		КонецЕсли; 
	Иначе
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Обработана группа справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Обработан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		КонецЕсли; 
	КонецЕсли;

	Если СправочникОбъект.Метаданные().ДлинаКода > 0 Тогда
		ПолныйКод = СправочникОбъект.ПолныйКод();
	Иначе
		ПолныйКод = НСтр("ru = '<без кода>'");
	КонецЕсли; 
	СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, 
		СправочникОбъект.Метаданные().Синоним, ПолныйКод, СправочникОбъект.Наименование);

	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрСообщения, СправочникОбъект);
		КонецЕсли;

	Исключение

		ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);

		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);

	КонецПопытки;

КонецПроцедуры

// Процедура - Увеличить размер кода справочника
//
// Параметры:
//  ИмяСправочника	 - 	Строка - имя справочника
//  НовыйРазмер		 - 	Число - размер кода
//
Процедура УвеличитьРазмерКодаСправочника(ИмяСправочника, НовыйРазмер) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Спр.Ссылка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК Спр";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл		
		Попытка
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Пока НовыйРазмер > СтрДлина(СокрЛП(Об.Код)) Цикл
				Если СтрНайти(Об.Код, "-0") > 0 Тогда
					Об.Код = СтрЗаменить(СокрЛП(Об.Код), "-0", "-00");
				Иначе
					Об.Код = "0" + СокрЛП(Об.Код);
				КонецЕсли;
			КонецЦикла;
			Об.Записать();
		Исключение
			// Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Разрешить ввод нескольких значений контактной информации (телефоны и e-mail).
//
Процедура РазрешитьВводНесколькихЗначенийКИ() Экспорт
	
	// Установка
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	МассивТипов.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Запрос = Новый Запрос();	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка,
		|	ВидыКонтактнойИнформации.Наименование
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип В(&МассивТипов)
		|	И ВидыКонтактнойИнформации.МожноИзменятьСпособРедактирования = ЛОЖЬ
		|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ";
	Запрос.УстановитьПараметр("МассивТипов", МассивТипов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Если СтрНайти(НРег(Выборка.Наименование), "sms") > 0 Тогда
				Продолжить;
			КонецЕсли;
			ОбъектКИ = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектКИ.МожноИзменятьСпособРедактирования = Истина;
			ОбъектКИ.РазрешитьВводНесколькихЗначений = Истина;
			ОбъектКИ.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Установка маркеров задания
//
Процедура УстановкаМаркеровЗадания() Экспорт
	
	// Маркеры закрытия
	МаркерыЗакрытия = 
		"Закрыть задание.
		|Закрыть задачу.
		|Задачу выполнил.
		|Задачу выполнила.
		|Задачу решил.
		|Задачу решила.
		|Задача решена.
		|Задание закрыто.
		|Close task.";
	Константы.МаркерыВыполненияЗадания.Установить(МаркерыЗакрытия);
	
	МаркерыОкончанияЭлектронныхПисем =
		"<!--MarkTheEndOfTheLetterSoftOnIT-->
		|С уважением
		|Отправлено с Android устройства
		|Отправлено из Mail.ru для Android
		|Отправлено с iPhone
		|Best regards
		|Best wishes
		|Yours truly
		|Truly yours
		|Yours very truly
		|Very truly yours
		|Faithfully yours
		|Kind regards
		|From:";
	Константы.МаркерыОкончанияЭлектронныхПисемЗадания.Установить(МаркерыОкончанияЭлектронныхПисем);
	
	МаркерыУстановкиСрока =
		"Срок [%г]
		|Срок [%г.]
		|Срок [%года]
		|Срок [% г]
		|Срок [% г.]
		|Срок [% года]
		|Срок [%]
		|Срок (%г)
		|Срок (%г.)
		|Срок (%года)
		|Срок (% г)
		|Срок (% г.)
		|Срок (% года)
		|Срок (%)
		|Срок {%г}
		|Срок {%г.}
		|Срок {%года}
		|Срок {% г}
		|Срок {% г.}
		|Срок {% года}
		|Срок {%}
		|Срок - %г.
		|Срок - %года.
		|Срок - % г.
		|Срок - % года.
		|Срок до %г
		|Срок до % г
		|Срок до % года";
	Константы.МаркерыУстановкиСрокаЗадания.Установить(МаркерыУстановкиСрока);
	
	МаркерыОтветаНаЗадание = "ID#";
	Константы.МаркерыНомераЗаданияВТемеЭлектронныхПисемПриОтвете.Установить(МаркерыОтветаНаЗадание);
	
	МаркерыНомераПриватногоКомментария = "IDC#";
	Константы.МаркерыНомераКомментарияВТемеЭлектронныхПисем.Установить(МаркерыНомераПриватногоКомментария);
	
КонецПроцедуры

//@skip-warning
Процедура ВыполнитьОбновлениеПравилСобытий()
	
	// Подготовка к удалению предопределенных элементов справочника "ДействияПравилСобытий".
	Выборка = Справочники.ДействияПравилСобытий.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ПустаяСтрока(Выборка.ИмяПредопределенныхДанных) Тогда
			Попытка
				СпрОбъект				= Выборка.ПолучитьОбъект();
				СпрОбъект.Идентификатор	= СпрОбъект.ИмяПредопределенныхДанных;
				СпрОбъект.ИмяПредопределенныхДанных = "";
				СпрОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
				СпрОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
	// Подготовка к удалению предопределенных элементов справочника "ПравилаСобытий".
	Выборка = Справочники.ПравилаСобытий.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ПустаяСтрока(Выборка.ИмяПредопределенныхДанных) Тогда
			Попытка
				СпрОбъект				= Выборка.ПолучитьОбъект();
				СпрОбъект.Идентификатор = СпрОбъект.ИмяПредопределенныхДанных;
				СпрОбъект.ИмяПредопределенныхДанных = "";
				СпрОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
				СпрОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
		
	ПТП = Перечисления.ТипыПравилСобытий;
	ПТУ = Перечисления.ТипУсловийПравилСобытий;
	ПС  = Справочники.ПравилаСобытий;
	ДПС = Справочники.ДействияПравилСобытий;
	
	// Новые действия правил событий.
	ГруппаОповещенияПоEMail								= 
		ДПС.НайтиСоздатьГруппу("ОповещенияПоEMail", "Оповещения по EMail");
	//@skip-warning
	ДействиеИзменениеИсполнителяПредыдущийИсполнитель	= 
		ДПС.ОповещениеПоEMailЗаданиеИзменениеИсполнителяПредыдущийИсполнитель(Истина, ГруппаОповещенияПоEMail);
	//@skip-warning
	ДействиеИзменениеНаблюдателейПредыдущиеНаблюдатели	= 
		ДПС.ОповещениеПоEMailЗаданиеИзменениеНаблюдателейПредыдущиеНаблюдатели(Истина, ГруппаОповещенияПоEMail);
	//@skip-warning
	ДействиеИзменениеНаблюдателейДобавленныеНаблюдатели	= 
		ДПС.ОповещениеПоEMailЗаданиеИзменениеНаблюдателейДобавленныеНаблюдатели(Истина, ГруппаОповещенияПоEMail);
	//@skip-warning
	ДействиеСтатьяБазыЗнанийДобавлениеКомментарияАвтор	= 
		ДПС.ОповещениеПоEMailСтатьяБазыЗнанийДобавлениеКомментарияАвтор(Истина, ГруппаОповещенияПоEMail);
	//@skip-warning
	ДействиеСтатьяБазыЗнанийДобавлениеКомментарияПользовательНеУказан = 
		ДПС.ОповещениеПоEMailСтатьяБазыЗнанийДобавлениеКомментарияПользовательНеУказан(Истина, ГруппаОповещенияПоEMail);
	ДействиеСтатьяБазыЗнанийЗаписьСтатьиПользовательНеУказан = 
		ДПС.ОповещениеПоEMailСтатьяБазыЗнанийЗаписьСтатьиПользовательНеУказан(Истина, ГруппаОповещенияПоEMail);
		
	Попытка
		// Правило "ЗаданиеИзменениеНаблюдателей".
		ГруппаЗадания = ПС.НайтиСоздатьГруппуПравила("Задание", "Задание");
		ТЗ            = ПС.ТаблицаСтруктураПравила(); 	
		НоваяСтрока   = ПС.ПравилаДобавитьВТаблицуЗначений(ТЗ, 
							ПС.ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеИзменениеНаблюдателей"), 
							НСтр("ru = 'Задание (изменение наблюдателей)'"), 
							ПТП.ИзменениеОбъекта, 
							ПТУ.ПроверкаРеквизитовОбъекта, 
							Истина, 
							"Документ.Задание", 
							"ЗаданиеИзменениеОбъектаИзменениеНаблюдателей", 
							Истина,
							,
							ГруппаЗадания);  
		ДобавитьКолонкиВДействия(НоваяСтрока.Действия);
		ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, ДействиеИзменениеНаблюдателейДобавленныеНаблюдатели);
		ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, ДействиеИзменениеНаблюдателейПредыдущиеНаблюдатели);
		
		// Правило "СтатьяБазыЗнанийДобавлениеКомментария".
		ГруппаСтатьяБазыЗнаний = ПС.НайтиСоздатьГруппуПравила("СтатьяБазыЗнаний", "Статья базы знаний");
		НоваяСтрока = ПС.ПравилаДобавитьВТаблицуЗначений(ТЗ, 
							ПС.ПравилаПредопределенноеЗначениеПоИдентификатору("СтатьяБазыЗнанийДобавлениеКомментария"),
							НСтр("ru = 'Статья базы знаний (добавление комментария)'"), 
							ПТП.ИзменениеОбъекта, 
							ПТУ.ПроверкаРеквизитовОбъекта, 
							Истина, 
							"Справочник.СтатьиБазыЗнаний", 
							"СтатьяБазыЗнанийИзменениеОбъектаДобавлениеКомментария",
							Истина,
							,
							ГруппаСтатьяБазыЗнаний);  
		ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
		ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, ДействиеСтатьяБазыЗнанийДобавлениеКомментарияАвтор);
		ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
			ДействиеСтатьяБазыЗнанийДобавлениеКомментарияПользовательНеУказан);
		
		// Правило "СтатьяБазыЗнанийЗаписьСтатьи".
		ГруппаСтатьяБазыЗнаний = ПС.НайтиСоздатьГруппуПравила("СтатьяБазыЗнаний", "Статья базы знаний");
		НоваяСтрока = ПС.ПравилаДобавитьВТаблицуЗначений(ТЗ, 
							ПС.ПравилаПредопределенноеЗначениеПоИдентификатору("СтатьяБазыЗнанийЗаписьСтатьи"),
							НСтр("ru = 'Статья базы знаний (запись статьи)'"), 
							ПТП.ИзменениеОбъекта, 
							ПТУ.ПроверкаРеквизитовОбъекта, 
							Ложь, 
							"Справочник.СтатьиБазыЗнаний", 
							"СтатьяБазыЗнанийИзменениеОбъектаЗаписьСтатьи",
							Истина,
							,
							ГруппаСтатьяБазыЗнаний);  
		ДобавитьКолонкиВДействия(НоваяСтрока.Действия);
		ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, 
			ДействиеСтатьяБазыЗнанийЗаписьСтатьиПользовательНеУказан);
		
		// Записываем.
		Для Каждого Строки Из ТЗ Цикл
			Объект 			= Строки.Объект.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(Объект, Строки);
			Объект.ПроверкаРеквизитовОбъектаУсловия = 
				Новый ХранилищеЗначения(Строки.ПроверкаРеквизитовОбъектаУсловия.Получить());
			Объект.Действия.Очистить();
			Для Каждого Строки2 Из Строки.Действия Цикл
				НоваяСтрока = Объект.Действия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки2);
			КонецЦикла;
			Объект.Записать();
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьКолонкиВДействия(Действия)
	
	Действия = Новый ТаблицаЗначений;
	Действия.Колонки.Добавить("Действие");
	
КонецПроцедуры

Процедура ДобавитьВТаблицуЗначенийДействия(ТЗДействия, Объект)

	НоваяСтрокаТЗ = ТЗДействия.Добавить();
	НоваяСтрокаТЗ.Действие = Объект; 

КонецПроцедуры

Процедура ОбновитьВариантыОтчетов() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Отчеты.Ссылка КАК Вариант,
	|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка) КАК Подсистема,
	|	НЕОПРЕДЕЛЕНО КАК Пользователь,
	|	ВЫБОР
	|		КОГДА Отчеты.ВидимостьПоУмолчаниюПереопределена
	|			ИЛИ ЕСТЬNULL(ОтчетыКонфигурации.ВидимостьПоУмолчанию, ОтчетыРасширений.ВидимостьПоУмолчанию) ЕСТЬ NULL
	|		ТОГДА Отчеты.ВидимостьПоУмолчанию
	|		ИНАЧЕ ЕСТЬNULL(ОтчетыКонфигурации.ВидимостьПоУмолчанию, ОтчетыРасширений.ВидимостьПоУмолчанию)
	|	КОНЕЦ КАК Видимость,
	|	ИСТИНА КАК БыстрыйДоступ
	|ПОМЕСТИТЬ Настройки
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК Отчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов.Размещение КАК РазмещениеОтчетов
	|		ПО РазмещениеОтчетов.Ссылка = Отчеты.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ОтчетыКонфигурации
	|		ПО ОтчетыКонфигурации.Ссылка = Отчеты.ПредопределенныйВариант
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов.Размещение КАК РазмещениеОтчетовКонфигурации
	|		ПО РазмещениеОтчетовКонфигурации.Ссылка = Отчеты.ПредопределенныйВариант
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений КАК ОтчетыРасширений
	|		ПО ОтчетыРасширений.Ссылка = Отчеты.ПредопределенныйВариант
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений.Размещение КАК РазмещениеОтчетовРасширений
	|		ПО РазмещениеОтчетовРасширений.Ссылка = Отчеты.ПредопределенныйВариант
	|ГДЕ
	|	ЕСТЬNULL(РазмещениеОтчетов.Использование, ИСТИНА) 
	|	И НЕ ЕСТЬNULL(РазмещениеОтчетов.Подсистема,
	|		ЕСТЬNULL(РазмещениеОтчетовКонфигурации.Подсистема, РазмещениеОтчетовРасширений.Подсистема)) ЕСТЬ NULL
	|;
	|
	|ВЫБРАТЬ
	|	Настройки.Вариант,
	|	Настройки.Подсистема,
	|	Настройки.Пользователь,
	|	Настройки.Видимость,
	|	Настройки.БыстрыйДоступ
	|ИЗ
	|	Настройки КАК Настройки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиСуществующие
	|		ПО НастройкиСуществующие.Вариант = Настройки.Вариант
	|		И НастройкиСуществующие.Подсистема = Настройки.Подсистема
	|ГДЕ
	|	Настройки.Видимость
	|	И НастройкиСуществующие.Вариант ЕСТЬ NULL");
	
	Ссылки = Запрос.Выполнить().Выбрать();
	
	Данные = Новый Структура("Вариант, Пользователь, Подсистема, Видимость, БыстрыйДоступ");
	Данные.Подсистема = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	Данные.Видимость = Истина;
	Данные.БыстрыйДоступ = Ложь;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.НастройкиВариантовОтчетов;
	ПредставлениеРегистра = МетаданныеРегистра.Представление();
	
	Пока Ссылки.Следующий() Цикл
		
		Данные.Вариант = Ссылки.Вариант;
		
		Попытка
			
			Записи = РегистрыСведений.НастройкиВариантовОтчетов.СоздатьНаборЗаписей();
			Записи.Отбор.Вариант.Установить(Данные.Вариант);
			Записи.Отбор.Пользователь.Установить(Данные.Пользователь);
			Записи.Отбор.Подсистема.Установить(Данные.Подсистема);
			Записи.Прочитать();
			
			Если Записи.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Запись = Записи.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Данные);
			Записи.ОбменДанными.Загрузка = Истина;
			Записи.Записать(Ложь);
	
		Исключение
			
			ШаблонКомментария = 
				НСтр("ru = 'Не удалось перенести настройки доступности варианта отчета ""%1"" в регистр ""%2""
					 |по причине: %3'");
			
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонКомментария,
				Ссылки.Вариант,
				ПредставлениеРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра,,
				Комментарий);
			
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

#Область Область3_0_44

// Устанавливаем срочность и важность для заданий.
Процедура ПереходНаВерсию_3_0_44_1() Экспорт
	
	ИзменятьЗавершенныеЗадания = Константы.ИзменятьЗавершенныеЗадания.Получить();
	Константы.ИзменятьЗавершенныеЗадания.Установить(Истина);
	
	мПриоритетКритический	= Перечисления.ПриоритетЗадания.Критический;
	мПриоритетВысокий		= Перечисления.ПриоритетЗадания.Высокий;
	мПриоритетСредний		= Перечисления.ПриоритетЗадания.Средний;
	мПриоритетНизкий		= Перечисления.ПриоритетЗадания.Низкий;
	мПриоритетОченьНизкий	= Перечисления.ПриоритетЗадания.ОченьНизкий;
	
	мВлиениеВысокое			= Перечисления.Влияние.Высокое;
	мВлиениеСреднее			= Перечисления.Влияние.Среднее;
	мВлиениеНизкое			= Перечисления.Влияние.Низкое;
	
	мСрочностьВысокая		= Перечисления.Срочность.Высокая;
	мСрочностьСредняя		= Перечисления.Срочность.Средняя;
	мСрочностьНизкая		= Перечисления.Срочность.Низкая;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Задание.Ссылка КАК Ссылка,
		|	Задание.Приоритет КАК Приоритет
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	Задание.Проведен = ИСТИНА
		|	И Задание.Срочность = ЗНАЧЕНИЕ(Перечисление.Срочность.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.Приоритет = мПриоритетСредний Тогда
			Об.Срочность = мСрочностьСредняя;
			Об.Влияние	 = мВлиениеСреднее;
		ИначеЕсли Выборка.Приоритет = мПриоритетКритический Тогда
			Об.Срочность = мСрочностьВысокая;
			Об.Влияние	 = мВлиениеВысокое;
		ИначеЕсли Выборка.Приоритет = мПриоритетВысокий Тогда
			Об.Срочность = мСрочностьВысокая;
			Об.Влияние	 = мВлиениеСреднее;
		ИначеЕсли Выборка.Приоритет = мПриоритетНизкий Тогда
			Об.Срочность = мСрочностьНизкая;
			Об.Влияние	 = мВлиениеСреднее;
		ИначеЕсли Выборка.Приоритет = мПриоритетОченьНизкий Тогда
			Об.Срочность = мСрочностьНизкая;
			Об.Влияние	 = мВлиениеНизкое;
		Иначе
			Об.Срочность = мСрочностьСредняя;
			Об.Влияние	 = мВлиениеСреднее;			
		КонецЕсли;
		
		Попытка
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныЗаданий.Ссылка КАК Ссылка,
		|	ШаблоныЗаданий.Приоритет КАК Приоритет
		|ИЗ
		|	Справочник.ШаблоныЗаданий КАК ШаблоныЗаданий
		|ГДЕ
		|	ШаблоныЗаданий.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныЗаданий.Влияние = ЗНАЧЕНИЕ(Перечисление.Влияние.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.Приоритет = мПриоритетСредний Тогда
			Об.Срочность = мСрочностьСредняя;
			Об.Влияние	 = мВлиениеСреднее;
		ИначеЕсли Выборка.Приоритет = мПриоритетКритический Тогда
			Об.Срочность = мСрочностьВысокая;
			Об.Влияние	 = мВлиениеВысокое;
		ИначеЕсли Выборка.Приоритет = мПриоритетВысокий Тогда
			Об.Срочность = мСрочностьВысокая;
			Об.Влияние	 = мВлиениеСреднее;
		ИначеЕсли Выборка.Приоритет = мПриоритетНизкий Тогда
			Об.Срочность = мСрочностьНизкая;
			Об.Влияние	 = мВлиениеСреднее;
		ИначеЕсли Выборка.Приоритет = мПриоритетОченьНизкий Тогда
			Об.Срочность = мСрочностьНизкая;
			Об.Влияние	 = мВлиениеНизкое;
		Иначе
			Об.Срочность = мСрочностьСредняя;
			Об.Влияние	 = мВлиениеСреднее;			
		КонецЕсли;
		
		Попытка
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
	Константы.ИзменятьЗавершенныеЗадания.Установить(ИзменятьЗавершенныеЗадания);
	
КонецПроцедуры

#КонецОбласти

#Область Область3_0_45

Процедура ПереходНаВерсию_3_0_45_1() Экспорт
	
	// Удаление предопределенных действий правил событий (двойников).
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияПравилСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДействияПравилСобытий КАК ДействияПравилСобытий
		|ГДЕ
		|	ДействияПравилСобытий.ИмяПредопределенныхДанных <> """"";
	
	РезультатЗапроса       = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивСсылок		   = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСсылок.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		ДПСОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДПСОбъект.ИмяПредопределенныхДанных = "";
		ДПСОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);			
		ДПСОбъект.Записать();
	КонецЦикла;
	
	Если МассивСсылок.Количество() > 0 Тогда
		Для Каждого ДПССсылка Из МассивСсылок Цикл
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПравилаСобытийДействия.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ПравилаСобытий.Действия КАК ПравилаСобытийДействия
				|ГДЕ
				|	ПравилаСобытийДействия.Действие = &Действие";				
			Запрос.УстановитьПараметр("Действие", ДПССсылка);				
			РезультатЗапроса       = Запрос.Выполнить();				
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();				
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда		
				Продолжить;
			Иначе	
				Попытка
					ДПСОбъект = ДПССсылка.ПолучитьОбъект();
					ДПСОбъект.Удалить();
				Исключение
				КонецПопытки;	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	// Маркер номера комментария при переписке.
	МаркерыНомераКомментария = "IDC#";
	Константы.МаркерыНомераКомментарияВТемеЭлектронныхПисем.Установить(МаркерыНомераКомментария);
	
	//Обновление правил событий.	
	//Замена параметров шаблона:
	//[Задание.ДобавленноеСообщениеHTML] -> [Задание.ДобавленныйКомментарийHTML]
	//[Задание.ДобавленноеСообщениеТекст]-> [Задание.ДобавленныйКомментарийТекст]
	//[Задание.ПоследнийНеСкрытыйКомментарийHTML] -> [Задание.ПоследнийОбычныйКомментарийHTML]
	//[Задание.ПоследнийНеСкрытыйКомментарийТекст]-> [Задание.ПоследнийОбычныйКомментарийТекст]
	//[СтатьиБазыЗнаний.ДобавленноеСообщениеHTML] -> [СтатьиБазыЗнаний.ДобавленныйКомментарийHTML]
	//[СтатьиБазыЗнаний.ДобавленноеСообщениеТекст]-> [СтатьиБазыЗнаний.ДобавленныйКомментарийТекст]
	
	Попытка
		ШаблоныСообщенийВыборка = Справочники.ШаблоныСообщений.Выбрать();
	Исключение
		ШаблоныСообщенийВыборка = Неопределено;
	КонецПопытки;
	
	Если ШаблоныСообщенийВыборка <> Неопределено Тогда
		
		ПараметрыШаблонаСоответствие = Новый Соответствие;
		ПараметрыШаблонаСоответствие.Вставить("Задание.ДобавленноеСообщениеHTML",
			"Задание.ДобавленныйКомментарийHTML");
		ПараметрыШаблонаСоответствие.Вставить("Задание.ДобавленноеСообщениеТекст",
			"Задание.ДобавленныйКомментарийТекст");
		ПараметрыШаблонаСоответствие.Вставить("Задание.ПоследнийНеСкрытыйКомментарийHTML",
			"Задание.ПоследнийОбычныйКомментарийHTML");
		ПараметрыШаблонаСоответствие.Вставить("Задание.ПоследнийНеСкрытыйКомментарийТекст",
			"Задание.ПоследнийОбычныйКомментарийТекст");
		ПараметрыШаблонаСоответствие.Вставить("СтатьиБазыЗнаний.ДобавленноеСообщениеHTML",
			"СтатьиБазыЗнаний.ДобавленныйКомментарийHTML");
		ПараметрыШаблонаСоответствие.Вставить("СтатьиБазыЗнаний.ДобавленноеСообщениеТекст", 
			"СтатьиБазыЗнаний.ДобавленныйКомментарийТекст");
				
		Пока ШаблоныСообщенийВыборка.Следующий() Цикл
			Для Каждого КлючИЗначение Из ПараметрыШаблонаСоответствие Цикл				
				ТекстHTML 		= "";
				ТекстТекст		= "";
				ЕстьИзменения  	= Ложь;				
				ШаблонСообщения = ШаблоныСообщенийВыборка.Ссылка;
				ТекстHTML 		= ШаблонСообщения.ТекстШаблонаПисьмаHTML;
				ТекстТекст 		= ШаблонСообщения.ТекстШаблонаПисьма;
				
				Если Не ПустаяСтрока(ТекстHTML) Тогда
					Если СтрНайти(ТекстHTML, КлючИЗначение.Ключ) > 0 Тогда
						ТекстHTML = СтрЗаменить(ТекстHTML, КлючИЗначение.Ключ, КлючИЗначение.Значение);
						ЕстьИзменения = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Не ПустаяСтрока(ТекстТекст) Тогда
					Если СтрНайти(ТекстТекст, КлючИЗначение.Ключ) > 0 Тогда
						ТекстТекст = СтрЗаменить(ТекстТекст, КлючИЗначение.Ключ, КлючИЗначение.Значение);
						ЕстьИзменения = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если ЕстьИзменения = Истина Тогда
					Попытка
						ШаблонОбъект = ШаблонСообщения.ПолучитьОбъект();			
						ШаблонОбъект.ТекстШаблонаПисьмаHTML = ТекстHTML;
						ШаблонОбъект.ТекстШаблонаПисьма 	= ТекстТекст;
						ШаблонОбъект.Записать();
					Исключение
					КонецПопытки;
				 КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Отключение правил событий по условию.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаСобытий КАК ПравилаСобытий
		|ГДЕ
		|	(ВЫРАЗИТЬ(ПравилаСобытий.ПроверкаРеквизитовОбъектаИмяУсловия КАК СТРОКА(500))) = ""ЗаданиеИзменениеОбъектаДобавлениеНеСкрытогоСообщения""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаСобытий КАК ПравилаСобытий
		|ГДЕ
		|	(ВЫРАЗИТЬ(ПравилаСобытий.ПроверкаРеквизитовОбъектаИмяУсловия КАК СТРОКА(500))) = ""ЗаданиеИзменениеОбъектаДобавлениеСкрытогоСообщения""";
	
	НаборРезультатов = Запрос.ВыполнитьПакет();	
	ВыборкаПравилНеСкрытогоСообщения = НаборРезультатов[0].Выгрузить();
	ВыборкаПравилСкрытогоСообщения   = НаборРезультатов[1].Выгрузить();
	
	Если ВыборкаПравилНеСкрытогоСообщения.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ВыборкаПравилНеСкрытогоСообщения Цикл
			Попытка
				ПравилоОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
				ПравилоОбъект.ПроверкаРеквизитовОбъектаИмяУсловия = 
					"ЗаданиеИзменениеОбъектаДобавлениеОбычногоКомментария";
				ПравилоОбъект.Использовать  = Ложь;
				ПравилоОбъект.Идентификатор = "";
				ПравилоОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);	
				ПравилоОбъект.Записать();
			Исключение
			КонецПопытки;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если ВыборкаПравилСкрытогоСообщения.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ВыборкаПравилСкрытогоСообщения Цикл
			Попытка
				ПравилоОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
				ПравилоОбъект.ПроверкаРеквизитовОбъектаИмяУсловия = 
					"ЗаданиеИзменениеОбъектаДобавлениеПриватногоКомментария";
				ПравилоОбъект.Использовать  = Ложь;
				ПравилоОбъект.Идентификатор = "";
				ПравилоОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);	
				ПравилоОбъект.Записать();
			Исключение
			КонецПопытки;	
		КонецЦикла;	
	КонецЕсли;
	
	ПТП = Перечисления.ТипыПравилСобытий;
	ПТУ = Перечисления.ТипУсловийПравилСобытий;
	ПС  = Справочники.ПравилаСобытий;
	ДПС = Справочники.ДействияПравилСобытий;
	
	// Новые действия правил событий.
	ГруппаОповещенияПоEMail                             = 
		ДПС.НайтиСоздатьГруппу("ОповещенияПоEMail", "Оповещения по EMail");
	//@skip-warning
	ДействиеДобавлениеОбычногоКомментарияИнициатор		= 
		ДПС.ОповещениеПоEMailЗаданиеДобавлениеОбычногоКомментарияИнициатор(Истина, ГруппаОповещенияПоEMail);
	//@skip-warning
	ДействиеДобавлениеОбычногоКомментарияИсполнитель    = 
		ДПС.ОповещениеПоEMailЗаданиеДобавлениеОбычногоКомментарияИсполнитель(Истина, ГруппаОповещенияПоEMail);
	//@skip-warning
	ДействиеДобавлениеОбычногоКомментарияНаблюдатели 	= 
		ДПС.ОповещениеПоEMailЗаданиеДобавлениеОбычногоКомментарияНаблюдатели(Истина, ГруппаОповещенияПоEMail);
	ДействиеДобавлениеПриватногоКомментарияАдресаты 	= 
		ДПС.ОповещениеПоEMailЗаданиеДобавлениеПриватногоКомментарияАдресаты(Истина, ГруппаОповещенияПоEMail);
	
	Попытка
		// Правило "ЗаданиеДобавлениеОбычногоКомментария".
		ГруппаЗадания = ПС.НайтиСоздатьГруппуПравила("Задание", "Задание");
		ТЗ            = ПС.ТаблицаСтруктураПравила(); 	
		НоваяСтрока   = ПС.ПравилаДобавитьВТаблицуЗначений(ТЗ, 
							ПС.ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеДобавлениеОбычногоКомментария"), 
							НСтр("ru = 'Задание (добавление обычного комментария)'"), 
							ПТП.ИзменениеОбъекта, 
							ПТУ.ПроверкаРеквизитовОбъекта, 
							Истина, 
							"Документ.Задание", 
							"ЗаданиеИзменениеОбъектаДобавлениеОбычногоКомментария", 
							Истина,
							,
							ГруппаЗадания);  
		ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
		ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, ДействиеДобавлениеОбычногоКомментарияИнициатор);
		ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, ДействиеДобавлениеОбычногоКомментарияИсполнитель);
		ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, ДействиеДобавлениеОбычногоКомментарияНаблюдатели);
		
		// Правило "ЗаданиеДобавлениеПриватногоКомментария".
		ГруппаЗадания = ПС.НайтиСоздатьГруппуПравила("Задание", "Задание");		 	
		НоваяСтрока   = ПС.ПравилаДобавитьВТаблицуЗначений(ТЗ, 
							ПС.ПравилаПредопределенноеЗначениеПоИдентификатору("ЗаданиеДобавлениеПриватногоКомментария"), 
							НСтр("ru = 'Задание (добавление приватного комментария)'"), 
							ПТП.ИзменениеОбъекта, 
							ПТУ.ПроверкаРеквизитовОбъекта, 
							Истина, 
							"Документ.Задание", 
							"ЗаданиеИзменениеОбъектаДобавлениеПриватногоКомментария", 
							Истина,
							,
							ГруппаЗадания);  
		ДобавитьКолонкиВДействия(НоваяСтрока.Действия);	
		ДобавитьВТаблицуЗначенийДействия(НоваяСтрока.Действия, ДействиеДобавлениеПриватногоКомментарияАдресаты);		
		
		// Записываем.
		Для Каждого Строки Из ТЗ Цикл		
			Объект 			= Строки.Объект.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(Объект, Строки);
			Объект.ПроверкаРеквизитовОбъектаУсловия = 
				Новый ХранилищеЗначения(Строки.ПроверкаРеквизитовОбъектаУсловия.Получить());
			Объект.Действия.Очистить();
			Для Каждого Строки2 Из Строки.Действия Цикл
				НоваяСтрока = Объект.Действия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки2);
			КонецЦикла;			
			Объект.Записать();				
		КонецЦикла;		
	Исключение
	КонецПопытки;
	
	// Перезаполнение комментариев.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Комментарии.Ссылка КАК Ссылка,
		|	Комментарии.ВладелецКомментария КАК ВладелецКомментария
		|ИЗ
		|	Справочник.Комментарии КАК Комментарии
		|ГДЕ
		|	Комментарии.Приватный = ИСТИНА";
	
	РезультатЗапроса       = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КомментарийСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		ВладелецСсылка	  = ВыборкаДетальныеЗаписи.ВладелецКомментария;	
		Если ТипЗнч(ВладелецСсылка) = Тип("ДокументСсылка.Задание") Тогда
			МассивАдресатов = Новый Массив;
			Если ЗначениеЗаполнено(ВладелецСсылка.ТекущийИсполнитель) Тогда
				МассивАдресатов.Добавить(ВладелецСсылка.ТекущийИсполнитель);
			КонецЕсли;	
			
			Если ВладелецСсылка.Наблюдатели.Количество() > 0 Тогда
				Для Каждого СтрокаНаблюдатель Из ВладелецСсылка.Наблюдатели Цикл
					Если ЗначениеЗаполнено(СтрокаНаблюдатель.Адресат)
						И МассивАдресатов.Найти(СтрокаНаблюдатель.Адресат) = Неопределено Тогда 
						МассивАдресатов.Добавить(СтрокаНаблюдатель.Адресат);
					КонецЕсли;	
				КонецЦикла;				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КомментарийСсылка.Автор) 
				И МассивАдресатов.Найти(КомментарийСсылка.Автор) = Неопределено Тогда
				МассивАдресатов.Добавить(КомментарийСсылка.Автор);
			КонецЕсли;
		КонецЕсли;
		
		Если МассивАдресатов.Количество() > 0 Тогда
			
			СписокАдресатов = Новый СписокЗначений;
			Для Каждого ЭлМассива Из МассивАдресатов Цикл
				СписокАдресатов.Добавить(ЭлМассива, ЭлМассива.Наименование);
			КонецЦикла;				
			СписокАдресатов.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
			
			Попытка
				КомментарийОбъект = КомментарийСсылка.ПолучитьОбъект();
				Для Каждого ЭлементСписка Из СписокАдресатов Цикл
					НоваяСтрока = КомментарийОбъект.Адресаты.Добавить();
					НоваяСтрока.Адресат = ЭлементСписка.Значение;
				КонецЦикла;
			
				КомментарийОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);			
				КомментарийОбъект.Записать();
			Исключение
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Заполнение участников задания.
	ЗаполнитьУчастниковЗадания();
	
КонецПроцедуры

Процедура ЗаполнитьУчастниковЗадания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задание.Ссылка КАК Ссылка,
		|	Задание.Автор КАК Автор,
		|	Задание.Инициатор КАК Инициатор,
		|	Задание.Клиент КАК Клиент,
		|	Задание.ТекущийИсполнитель КАК ТекущийИсполнитель,
		|	Задание.Наблюдатели.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Адресат КАК Адресат
		|	) КАК Наблюдатели
		|ИЗ
		|	Документ.Задание КАК Задание
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задание.Дата";
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	МассивУчастников = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаданиеСсылка    = ВыборкаДетальныеЗаписи.Ссылка;
		МассивУчастников.Очистить();
		
		// Автор.
		ДобавитьУчастникаВМассив(ВыборкаДетальныеЗаписи.Автор, МассивУчастников);
		// Инициатор.
		ДобавитьУчастникаВМассив(ВыборкаДетальныеЗаписи.Инициатор, МассивУчастников);
		// Клиент.
		ДобавитьУчастникаВМассив(ВыборкаДетальныеЗаписи.Клиент, МассивУчастников);
		// Текущий исполнитель.
		ДобавитьУчастникаВМассив(ВыборкаДетальныеЗаписи.ТекущийИсполнитель, МассивУчастников);
		// Наблюдатели.
		ВыборкаНаблюдатели = ВыборкаДетальныеЗаписи.Наблюдатели.Выбрать();
		Пока ВыборкаНаблюдатели.Следующий() Цикл
			ДобавитьУчастникаВМассив(ВыборкаНаблюдатели.Адресат, МассивУчастников);
		КонецЦикла;	
		
		Если МассивУчастников.Количество() > 0 Тогда
			ОбъектЗадание = ЗаданиеСсылка.ПолучитьОбъект();			
			ОбъектЗадание.УчастникиЗадания.Очистить();
			
			Для Каждого мУчастник Из МассивУчастников Цикл
				НоваяСтрока = ОбъектЗадание.УчастникиЗадания.Добавить();
				НоваяСтрока.Участник = мУчастник;
			КонецЦикла;
			ОбъектЗадание.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);			
			ОбъектЗадание.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ОбъектЗадание.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;			
		КонецЕсли; 	
		
		Попытка
			РегистрыСведений.РеквизитыЗаданий.ОбновитьДополнительныеРеквизитыЗадания(ЗаданиеСсылка);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьУчастникаВМассив(Знач Участник, МассивУчастников)
	
	Если ЗначениеЗаполнено(Участник) Тогда
		Если МассивУчастников.Найти(Участник) = Неопределено Тогда
			МассивУчастников.Добавить(Участник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область Область3_1_0

Процедура ПереходНаВерсию_3_1_0_1() Экспорт
	
	мПриоритетКритический	= Перечисления.ПриоритетЗадания.Критический;
	мПриоритетВысокий		= Перечисления.ПриоритетЗадания.Высокий;
	мПриоритетСредний		= Перечисления.ПриоритетЗадания.Средний;
	мПриоритетНизкий		= Перечисления.ПриоритетЗадания.Низкий;
	мПриоритетОченьНизкий	= Перечисления.ПриоритетЗадания.ОченьНизкий;
	
	мВлиениеВысокое			= Перечисления.Влияние.Высокое;
	мВлиениеСреднее			= Перечисления.Влияние.Среднее;
	мВлиениеНизкое			= Перечисления.Влияние.Низкое;
	
	мСрочностьВысокая		= Перечисления.Срочность.Высокая;
	мСрочностьСредняя		= Перечисления.Срочность.Средняя;
	мСрочностьНизкая		= Перечисления.Срочность.Низкая;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УЗ.Ссылка КАК Ссылка,
		|	УЗ.ПриоритетПоУмолчанию КАК Приоритет
		|ИЗ
		|	Справочник.УдалитьУчетныеЗаписиЭлектроннойПочтыДляСозданияЗаданийИзПисем КАК УЗ
		|ГДЕ
		|	УЗ.ВлияниеПоУмолчанию = ЗНАЧЕНИЕ(Перечисление.Влияние.ПустаяСсылка)
		|	И УЗ.ПриоритетПоУмолчанию <> ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Об = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Приоритет = мПриоритетСредний Тогда
			Об.СрочностьПоУмолчанию  = мСрочностьСредняя;
			Об.ВлияниеПоУмолчанию	 = мВлиениеСреднее;
		ИначеЕсли Выборка.Приоритет  = мПриоритетКритический Тогда
			Об.СрочностьПоУмолчанию  = мСрочностьВысокая;
			Об.ВлияниеПоУмолчанию	 = мВлиениеВысокое;
		ИначеЕсли Выборка.Приоритет  = мПриоритетВысокий Тогда
			Об.СрочностьПоУмолчанию  = мСрочностьВысокая;
			Об.ВлияниеПоУмолчанию	 = мВлиениеСреднее;
		ИначеЕсли Выборка.Приоритет  = мПриоритетНизкий Тогда
			Об.СрочностьПоУмолчанию  = мСрочностьНизкая;
			Об.ВлияниеПоУмолчанию	 = мВлиениеСреднее;
		ИначеЕсли Выборка.Приоритет  = мПриоритетОченьНизкий Тогда
			Об.СрочностьПоУмолчанию  = мСрочностьНизкая;
			Об.ВлияниеПоУмолчанию	 = мВлиениеНизкое;
		Иначе
			Об.СрочностьПоУмолчанию  = мСрочностьСредняя;
			Об.ВлияниеПоУмолчанию	 = мВлиениеСреднее;			
		КонецЕсли;
		
		Попытка
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	// Очищаем замеры производительсности.
	Попытка
		Константы.ВыполнятьЗамерыПроизводительности.Установить(Ложь);	
		//@skip-warning
		Набор = РегистрыСведений.УдалитьЗамерыВремени.СоздатьНаборЗаписей();
		Набор.Записать();
		//@skip-warning
		Набор = РегистрыСведений.УдалитьЗамерыВремени2.СоздатьНаборЗаписей();
		Набор.Записать();
		Набор = РегистрыСведений.УдалитьЗамерыВремени3.СоздатьНаборЗаписей();
		Набор.Записать();
		//@skip-warning
		Набор = РегистрыСведений.УдалитьЗамерыВремениТехнологические.СоздатьНаборЗаписей();
		Набор.Записать();
		Набор = РегистрыСведений.ЗамерыВремени.СоздатьНаборЗаписей();
		Набор.Записать();
	Исключение
	КонецПопытки;
	
	// Правим удаленное управление
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УдаленноеУправление.Ссылка КАК Ссылка,
		|	УдаленноеУправление.ЭтоГруппа КАК ЭтоГруппа,
		|	УдаленноеУправление.Владелец КАК Владелец,
		|	УдаленноеУправление.УдалитьОбъект КАК УдалитьОбъект,
		|	УдаленноеУправление.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.УдаленноеУправление КАК УдаленноеУправление
		|
		|УПОРЯДОЧИТЬ ПО
		|	УдаленноеУправление.Код УБЫВ";
		
	ПервыйОбъект = Справочники.УдаленноеУправление.ПустаяСсылка();
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.Владелец) Тогда
				Если НЕ Выборка.ЭтоГруппа Тогда
					Об = Выборка.Ссылка.ПолучитьОбъект();
					Об.Владелец = Об.УдалитьОбъект;
					Об.Родитель = Справочники.УдаленноеУправление.ПустаяСсылка();
					Об.Записать();
					Если НЕ ЗначениеЗаполнено(ПервыйОбъект) Тогда
						ПервыйОбъект = Об.УдалитьОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа И Выборка.ПометкаУдаления = Ложь Тогда		
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Если ЗначениеЗаполнено(ПервыйОбъект) Тогда
				Об.Владелец = ПервыйОбъект;
				Об.Записать();
			КонецЕсли;
			Об.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	// Изменение действий правил событий (оповещение по email и sms, напоминания).
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияПравилСобытий.Ссылка КАК Ссылка,
		|	ДействияПравилСобытий.ТипДействия КАК ТипДействия
		|ИЗ
		|	Справочник.ДействияПравилСобытий КАК ДействияПравилСобытий
		|ГДЕ
		|	(ДействияПравилСобытий.ТипДействия = ЗНАЧЕНИЕ(Перечисление.ТипДействийПравилСобытий.ОповещениеПоEmail)
		|			ИЛИ ДействияПравилСобытий.ТипДействия = ЗНАЧЕНИЕ(Перечисление.ТипДействийПравилСобытий.ОповещениеПоSMS)
		|			ИЛИ ДействияПравилСобытий.ТипДействия = ЗНАЧЕНИЕ(Перечисление.ТипДействийПравилСобытий.СоздатьНапоминание))";	
	
	РезультатЗапроса 	   = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДействиеСсылка   = ВыборкаДетальныеЗаписи.Ссылка;
		Попытка
			ДействиеОбъект   = ДействиеСсылка.ПолучитьОбъект();
			ШаблонСообщения  = ДействиеОбъект.УдалитьШаблонОповещения;
			ШаблонОформления = ДействиеОбъект.УдалитьШаблонОформления;
			ТипДействия		 = ДействиеОбъект.ТипДействия;
			
			ПолучательВариантЗаполнения    	= "";
			ПолучательЗначение			   	= "";
			УчетнаяЗаписьВариантЗаполнения 	= "";
			УчетнаяЗаписьЗначение		   	= "";
			НапоминаниеВариантЗаполнения 	= "";
			НапоминаниеЗначение				= "";

			Для Каждого СтрокаТЧ Из ДействиеОбъект.УдалитьНастройкиЗаполнения Цикл								
				Если СтрокаТЧ.ИмяРеквизита = "Получатель" Тогда				
					ПолучательВариантЗаполнения 	= СтрокаТЧ.ВариантЗаполнения;
					ПолучательЗначение 				= СтрокаТЧ.Значение.Получить();				
				ИначеЕсли СтрокаТЧ.ИмяРеквизита = "УчетнаяЗапись" Тогда				
					УчетнаяЗаписьВариантЗаполнения 	= СтрокаТЧ.ВариантЗаполнения;
					УчетнаяЗаписьЗначение		   	= СтрокаТЧ.Значение.Получить();
				ИначеЕсли СтрокаТЧ.ИмяРеквизита = "ВремяСобытия" Тогда				
					НапоминаниеВариантЗаполнения = СтрокаТЧ.ВариантЗаполнения;
					НапоминаниеЗначение		     = СтрокаТЧ.Значение.Получить();	
				КонецЕсли;				
			КонецЦикла;		
			
			Если Не ПустаяСтрока(ПолучательВариантЗаполнения) И ЗначениеЗаполнено(ПолучательЗначение) Тогда
				ДействиеОбъект.ПолучателиОповещений.Очистить();
				НоваяСтрока = ДействиеОбъект.ПолучателиОповещений.Добавить();
				НоваяСтрока.ПолучательВариантЗаполнения = ПолучательВариантЗаполнения;
				НоваяСтрока.ПолучательЗначение 			= ПолучательЗначение;
				
				Если ТипДействия = Перечисления.ТипДействийПравилСобытий.СоздатьНапоминание Тогда
					
					Если Не ПустаяСтрока(НапоминаниеВариантЗаполнения) И ЗначениеЗаполнено(НапоминаниеЗначение) Тогда
						Если НапоминаниеВариантЗаполнения = "Смещение" Тогда
							НоваяСтрока.НапоминаниеВариантЗаполнения = "Смещение даты";
							НоваяСтрока.НапоминаниеЗначение			 = ЗначениеСмещенияДаты(НапоминаниеЗначение);
						Иначе
							НоваяСтрока.НапоминаниеВариантЗаполнения = НапоминаниеВариантЗаполнения;
							НоваяСтрока.НапоминаниеЗначение			 = НапоминаниеЗначение;
						КонецЕсли;	
					Иначе	
						НоваяСтрока.НапоминаниеВариантЗаполнения = "Смещение даты";
						НоваяСтрока.НапоминаниеЗначение			 = "Дата срабатывания правила";
					КонецЕсли;
					
				ИначеЕсли ТипДействия = Перечисления.ТипДействийПравилСобытий.ОповещениеПоEmail Тогда
					
					Если Не ПустаяСтрока(УчетнаяЗаписьВариантЗаполнения) 
						И ЗначениеЗаполнено(УчетнаяЗаписьЗначение) Тогда
						НоваяСтрока.УчетнаяЗаписьВариантЗаполнения = УчетнаяЗаписьВариантЗаполнения;
						НоваяСтрока.УчетнаяЗаписьЗначение 		   = УчетнаяЗаписьЗначение;
					Иначе
						НоваяСтрока.УчетнаяЗаписьВариантЗаполнения = "Указанный";
						НоваяСтрока.УчетнаяЗаписьЗначение 		   = 
							Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
					КонецЕсли;
					НоваяСтрока.ШаблонОформления = ШаблонОформления;
					НоваяСтрока.ШаблонСообщения  = ШаблонСообщения;
					
				Иначе // ОповещениеПоSMS.
					
					НоваяСтрока.ШаблонСообщения  = ШаблонСообщения;
					
				КонецЕсли;				
			КонецЕсли;
			
			ДействиеОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			ДействиеОбъект.Записать();
			
		Исключение
			Продолжить;
		КонецПопытки;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_0_3() Экспорт
	
	// Обновление действий правил событий.
	ДПС = Справочники.ДействияПравилСобытий;
	ГруппаОповещенияПоEMail = ДПС.НайтиСоздатьГруппу("ОповещенияПоEMail", "Оповещения по EMail");
	ДПС.ОповещениеПоEMailЗаказПоставщикуВыполнениеИнициатор(Истина, ГруппаОповещенияПоEMail);
	ДПС.ОповещениеПоEMailСтатьяБазыЗнанийДобавлениеКомментарияАвторПользовательНеУказан(Истина, ГруппаОповещенияПоEMail);
	ДПС.ОповещениеПоEMailСтатьяБазыЗнанийЗаписьСтатьиПользовательНеУказан(Истина, ГруппаОповещенияПоEMail);
	
КонецПроцедуры

Функция ЗначениеСмещенияДаты(НапоминаниеЗначение)
	
	Если НапоминаниеЗначение = "Сразу" Тогда
		Возврат НСтр("ru = 'Дата срабатывания правила'");
	ИначеЕсли НапоминаниеЗначение = "ЧерезЧас" Тогда
		Возврат НСтр("ru = 'Через час'");
	ИначеЕсли НапоминаниеЗначение = "ЧерезДень" Тогда
		Возврат НСтр("ru = 'Через день'");
	ИначеЕсли НапоминаниеЗначение = "ЧерезНеделю" Тогда
		Возврат НСтр("ru = 'Через неделю'");
	ИначеЕсли НапоминаниеЗначение = "ЧерезМесяц" Тогда
		Возврат НСтр("ru = 'Через месяц'");
	Иначе
		Возврат НСтр("ru = 'Дата срабатывания правила'");
	КонецЕсли;	
	
КонецФункции	

Процедура ПереходНаВерсию_3_1_0_4() Экспорт
	
	ДобавитьСтавкуНДС("20% / 120%", 20, Истина);
	ДобавитьСтавкуНДС("20%", 20);
	
	// Меняем основание.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК Документ,
		|	ЗаказПоставщику.УдалитьОснование КАК Основание,
		|	ЗаказПоставщику.Проведен КАК Проведен
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПоставщику.Дата";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Основание) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Документ.Основания.Количество() = 0 Тогда
			Попытка
				Об = Выборка.Документ.ПолучитьОбъект();
				НоваяСтрока				= Об.Основания.Добавить();
				НоваяСтрока.Основание 	= Выборка.Основание;
				Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
				Об.Записать(?(Выборка.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_0_6() Экспорт
	
	// Уникальность серийных номеров в видах номенклатуры.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ВидыНоменклатуры.Ссылка <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.Лицензия)
		|				И ВидыНоменклатуры.Ссылка <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПрограммноеОбеспечение)
		|				И ВидыНоменклатуры.Ссылка <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.Услуга)
		|				И ВидыНоменклатуры.Ссылка <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ТипНеОпределен)
		|				И ВидыНоменклатуры.Ссылка <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.Бумага)
		|				И ВидыНоменклатуры.УникальностьИнвентарногоНомера = ЗНАЧЕНИЕ(Перечисление.МеханизмКонтроляУникальностиНоменклатуры.ПустаяСсылка)
		|				И ВидыНоменклатуры.УникальностьСерийногоНомера = ЗНАЧЕНИЕ(Перечисление.МеханизмКонтроляУникальностиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МеханизмКонтроляУникальностиНоменклатуры.ВсяИнформационнаяБаза)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МеханизмКонтроляУникальностиНоменклатуры.НеКонтролировать)
		|	КОНЕЦ КАК Уникальность
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Если НЕ ЗначениеЗаполнено(Об.УникальностьИнвентарногоНомера) Тогда
				Об.УникальностьИнвентарногоНомера = Выборка.Уникальность;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Об.УникальностьСерийногоНомера) Тогда
				Об.УникальностьСерийногоНомера = Выборка.Уникальность;
			КонецЕсли;
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//[ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатура] -> [ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатураHTML]
	//[ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатура] -> [ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатураТекст]
	
	Попытка
		ШаблоныСообщенийВыборка = Справочники.ШаблоныСообщений.Выбрать();
	Исключение
		ШаблоныСообщенийВыборка = Неопределено;
	КонецПопытки;
	
	Если ШаблоныСообщенийВыборка <> Неопределено Тогда				
		Пока ШаблоныСообщенийВыборка.Следующий() Цикл			
			ТекстHTML 		= "";
			ТекстТекст		= "";
			ЕстьИзменения  	= Ложь;				
			ШаблонСообщения = ШаблоныСообщенийВыборка.Ссылка;
			ТекстHTML 		= ШаблонСообщения.ТекстШаблонаПисьмаHTML;
			ТекстТекст 		= ШаблонСообщения.ТекстШаблонаПисьма;
			
			Если Не ПустаяСтрока(ТекстHTML) Тогда
				Если СтрНайти(ТекстHTML, "ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатура") > 0 
					И СтрНайти(ТекстHTML, "ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатураHTML") = 0 Тогда
					ТекстHTML = СтрЗаменить(ТекстHTML, "ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатура", 
											"ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатураHTML");
					ЕстьИзменения = Истина;
				КонецЕсли;	
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстТекст) Тогда
				Если СтрНайти(ТекстТекст, "ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатура") > 0 
					И СтрНайти(ТекстHTML, "ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатураТекст") = 0 Тогда
					ТекстТекст = СтрЗаменить(ТекстТекст, "ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатура", 
											"ЗаказПоставщику.СодержимоеТабличнойЧастиНоменклатураТекст");
					ЕстьИзменения = Истина;
				КонецЕсли;	
			КонецЕсли;
			
			Если ЕстьИзменения = Истина Тогда
				Попытка
					ШаблонОбъект = ШаблонСообщения.ПолучитьОбъект();			
					ШаблонОбъект.ТекстШаблонаПисьмаHTML = ТекстHTML;
					ШаблонОбъект.ТекстШаблонаПисьма 	= ТекстТекст;
					ШаблонОбъект.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
	ЗаписатьПроцесс(Справочники.Процессы.Задача.Ссылка, 				Справочники.ТипыПроцессов.ЗапросНаУслугу);
	ЗаписатьПроцесс(Справочники.Процессы.ЗадачаНаИзменениеПрограммногоПродукта.Ссылка,	
		Справочники.ТипыПроцессов.ЗапросНаИзменение);
	ЗаписатьПроцесс(Справочники.Процессы.Поручение.Ссылка, 				Справочники.ТипыПроцессов.Инцидент);
	ЗаписатьПроцесс(Справочники.Процессы.Обращение.Ссылка, 				Справочники.ТипыПроцессов.ЗапросНаИзменение);
	ЗаписатьПроцесс(Справочники.Процессы.СогласованиеДоступа.Ссылка, 	Справочники.ТипыПроцессов.ЗапросНаДоступ);
	ЗаписатьПроцесс(Справочники.Процессы.ЖалобаПользователя.Ссылка, 	Справочники.ТипыПроцессов.Инцидент);
	
КонецПроцедуры

Процедура ЗаписатьПроцесс(СсылкаНаПроцесс, ТипПроцесса)
	
	Попытка
		ОбъектПроцесса = СсылкаНаПроцесс.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(ОбъектПроцесса.ТипПроцесса) Тогда
			ОбъектПроцесса.ТипПроцесса = ТипПроцесса;
			ОбъектПроцесса.Записать();
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_0_6_ЗаполнениеСпецификацийИЗаказовПоставщику() Экспорт
	
 	// Заполняем единицы измерения в справочнике спецификация
 	ЗапросСпецификация = Новый Запрос;
	ЗапросСпецификация.Текст = 
		"ВЫБРАТЬ
		|	СпецификацияИсходныеКомплектующие.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Спецификация.ИсходныеКомплектующие КАК СпецификацияИсходныеКомплектующие";
	
	РезультатЗапроса = ЗапросСпецификация.Выполнить();
	
	ВыборкаСпецификация = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаСпецификация.Следующий() Цикл
		
		Если ВыборкаСпецификация.Ссылка.ИсходныеКомплектующие.Количество() > 0 Тогда
			
			СпецификацияОбъект = ВыборкаСпецификация.Ссылка.ПолучитьОбъект();
			НужнаЗаписьСпецификации = Ложь;
			Для Каждого Строка Из СпецификацияОбъект.ИсходныеКомплектующие Цикл
				Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
					Строка.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
					НужнаЗаписьСпецификации = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НужнаЗаписьСпецификации Тогда
				Попытка
					СпецификацияОбъект.Записать();
				Исключение
				КонецПопытки
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполняем единицы измерения в документе Поступление
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.Проведен КАК Проведен,
		|	Документы.МоментВремени КАК МоментВремени
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеНоменклатура.Ссылка КАК Ссылка,
		|		ПоступлениеНоменклатура.Ссылка.Проведен КАК Проведен,
		|		ПоступлениеНоменклатура.Ссылка.МоментВремени КАК МоментВремени
		|	ИЗ
		|		Документ.Поступление.Номенклатура КАК ПоступлениеНоменклатура
		|	ГДЕ
		|		НЕ ПоступлениеНоменклатура.Ссылка.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		ПоступлениеНакладная.Ссылка,
		|		ПоступлениеНакладная.Ссылка.Проведен,
		|		ПоступлениеНакладная.Ссылка.МоментВремени
		|	ИЗ
		|		Документ.Поступление.Накладная КАК ПоступлениеНакладная
		|	ГДЕ
		|		НЕ ПоступлениеНакладная.Ссылка.ПометкаУдаления) КАК Документы
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НужнаЗаписьДокумента = Ложь;
			ПоступлениеОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Если ПоступлениеОбъект.Номенклатура.Количество() > 0 Тогда 
				Для Каждого СтрокаНоменклатура Из ПоступлениеОбъект.Номенклатура Цикл
					Если Не ЗначениеЗаполнено(СтрокаНоменклатура.ЕдиницаИзмерения) 
						ИЛИ СтрокаНоменклатура.ЕдиницаИзмерения <> СтрокаНоменклатура.Номенклатура.ЕдиницаИзмерения Тогда 
						СтрокаНоменклатура.ЕдиницаИзмерения = СтрокаНоменклатура.Номенклатура.ЕдиницаИзмерения;
						НужнаЗаписьДокумента = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ПоступлениеОбъект.Накладная.Количество() > 0 Тогда 
				Для Каждого СтрокаНакладная Из ПоступлениеОбъект.Накладная Цикл
					Если Не ЗначениеЗаполнено(СтрокаНакладная.ЕдиницаИзмерения)
						ИЛИ СтрокаНакладная.ЕдиницаИзмерения <> СтрокаНакладная.Номенклатура.ЕдиницаИзмерения Тогда 
						СтрокаНакладная.ЕдиницаИзмерения = СтрокаНакладная.Номенклатура.ЕдиницаИзмерения;
						НужнаЗаписьДокумента = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НужнаЗаписьДокумента = Истина Тогда 
				Попытка					
					ПоступлениеОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
					ПоступлениеОбъект.Записать(?(ВыборкаДетальныеЗаписи.Проведен, РежимЗаписиДокумента.Проведение, 
						РежимЗаписиДокумента.Запись));
				Исключение
				КонецПопытки;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Область3_1_1

Процедура ПереходНаВерсию_3_1_1_0() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Поступление.Ссылка КАК Ссылка,
		|	Поступление.Проведен КАК Проведен
		|ИЗ
		|	Документ.Поступление КАК Поступление
		|ГДЕ
		|	НЕ Поступление.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Поступление.МоментВремени";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПоступлениеОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Попытка
			ПоступлениеОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			ПоступлениеОбъект.Записать(?(ВыборкаДетальныеЗаписи.Проведен, РежимЗаписиДокумента.Проведение, 
				РежимЗаписиДокумента.Запись));
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_1_1() Экспорт	
	
	// Дозаполнение договоров контрагентов.
	ТекущаяДата = ТекущаяДатаСеанса();
	Запрос      = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.ДатаДоговора";
	
	РезультатЗапроса       = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			ДоговорОбъект 		 = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			// Закрытые. 
			Если ЗначениеЗаполнено(ДоговорОбъект.СрокДействияДо) 
				И ДоговорОбъект.СрокДействияДо < ТекущаяДата Тогда
				ДоговорОбъект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт;
			Иначе // Действует.
				ДоговорОбъект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
			КонецЕсли;	
			Если ЗначениеЗаполнено(ДоговорОбъект.ДатаДоговора) Тогда
				ДоговорОбъект.СрокДействияОт = ДоговорОбъект.ДатаДоговора;
			КонецЕсли;
			ДоговорОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			ДоговорОбъект.Записать();
		Исключение
			Продолжить;
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_1_2() Экспорт
	
	// Создаем идентификаторы писем
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Задание.УчетнаяЗаписьЭлектроннойПочты КАК УчетнаяЗаписьЭлектроннойПочты,
		|	Задание.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	Задание.Дата КАК ДатаСоздания
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	Задание.ИдентификаторСообщения <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Комментарии.УчетнаяЗаписьЭлектроннойПочты,
		|	Комментарии.ИдентификаторСообщения,
		|	Комментарии.Период
		|ИЗ
		|	Справочник.Комментарии КАК Комментарии
		|ГДЕ
		|	Комментарии.ИдентификаторСообщения <> """"";
	
	мРегистрыСведенийСозданныеОбъектыНаОснованииВходящихПисем = 
		РегистрыСведений.СозданныеОбъектыНаОснованииВходящихПисем;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи 	= мРегистрыСведенийСозданныеОбъектыНаОснованииВходящихПисем.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать();		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Область3_1_2

Процедура ПереходНаВерсию_3_1_2_1_ЗаполнениеНДСПланированиеБюджетов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланированиеБюджета.Ссылка КАК Ссылка,
		|	ПланированиеБюджета.МоментВремени КАК МоментВремени,
		|	ПланированиеБюджета.Проведен КАК Проведен
		|ИЗ
		|	Документ.ПланированиеБюджета КАК ПланированиеБюджета
		|ГДЕ
		|	НЕ ПланированиеБюджета.ПометкаУдаления
		|	И ПланированиеБюджета.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Валюта			= УправлениеITОтделом8УФПовтИсп.ПолучитьОсновнуюВалюту();
		Налогооблажение = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("НеОблагается", Истина);
		
		Если СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка() Тогда 
			Попытка
				СправочникСтавкаНДС 				= Справочники.СтавкиНДС.СоздатьЭлемент();
				СправочникСтавкаНДС.Наименование 	= "Без НДС";
				СправочникСтавкаНДС.НеОблагается 	= Истина;
				СправочникСтавкаНДС.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
				СправочникСтавкаНДС.Записать();
				СтавкаНДС = СправочникСтавкаНДС;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПланированиеОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ПланированиеОбъект.ВалютаДокумента		= Валюта;
			ПланированиеОбъект.НалогообложениеНДС	= Налогооблажение;
			ПланированиеОбъект.СуммаВключаетНДС		= Истина;
			ПланированиеОбъект.НДСВключатьВСтоимость= Истина;
			
			ПланированиеОбъект.Курс      = 1;
			ПланированиеОбъект.Кратность = 1;
			
			Для Каждого Строка Из ПланированиеОбъект.Бюджеты Цикл
				Строка.СтавкаНДС	= СтавкаНДС;
				Строка.Всего		= Строка.Сумма;
			КонецЦикла;
			
			Попытка
				ПланированиеОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
				ПланированиеОбъект.Записать(?(ВыборкаДетальныеЗаписи.Проведен, РежимЗаписиДокумента.Проведение, 
					РежимЗаписиДокумента.Запись));
			Исключение
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Область3_1_3

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеКонтактнойИнформации() Экспорт
	
	УстановитьВидыКонтактнойИнформации();
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_УстановкаПриоритетаОпределенияКлиентовИИнициаторов() Экспорт
	
	Константы.ИспользоватьCRM.Установить(Истина);	
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеСтатейДоходовРасходов() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатьиДоходовРасходов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиДоходовРасходов КАК СтатьиДоходовРасходов
		|ГДЕ
		|	СтатьиДоходовРасходов.ЭтоГруппа = ЛОЖЬ
		|	И СтатьиДоходовРасходов.ВидСтатьи = ЗНАЧЕНИЕ(Перечисление.ВидыДоходовРасходов.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка 
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Об.ВидСтатьи = Перечисления.ВидыДоходовРасходов.Расход;
			Об.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеПроцессовЗаданийШаблоныЗаданий() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Процессы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Процессы КАК Процессы
		|ГДЕ
		|	Процессы.ТипПроцесса = ЗНАЧЕНИЕ(Справочник.ТипыПроцессов.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
															   
		Попытка 
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Индекс = Перечисления.УдалитьТипыДокументов.Индекс(Об.УдалитьТипДокумента);
			Об.ТипПроцесса = Справочники.ТипыПроцессов[
				Метаданные.Перечисления.УдалитьТипыДокументов.ЗначенияПеречисления[Индекс].Имя];
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныЗаданий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныЗаданий КАК ШаблоныЗаданий
		|ГДЕ
		|	ШаблоныЗаданий.ТипПроцесса = ЗНАЧЕНИЕ(Справочник.ТипыПроцессов.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
															   
		Попытка 
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Индекс = Перечисления.УдалитьТипыДокументов.Индекс(Об.УдалитьТипДокумента);
			Об.ТипПроцесса = Справочники.ТипыПроцессов[
				Метаданные.Перечисления.УдалитьТипыДокументов.ЗначенияПеречисления[Индекс].Имя];
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеSLAИСервисов() Экспорт
	
	// Тариф.
	Тариф 			= Справочники.Тарифы.Основной.ПолучитьОбъект();
	Тариф.Валюта 	= Константы.НациональнаяВалюта.Получить();
	Тариф.Статус	= Перечисления.СтатусыТарифов.ВРаботе;
	Тариф.Записать();
	
	// Сервисы.
	Запрос = Новый Запрос();	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сервисы.Ссылка КАК Ссылка,
		|	Сервисы.УдалитьНеИспользовать КАК НеИспользовать
		|ИЗ
		|	Справочник.Сервисы КАК Сервисы
		|ГДЕ
		|	Сервисы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСервисов.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			Об 				= Выборка.Ссылка.ПолучитьОбъект();
			Об.Статус 		= ?(Выборка.НеИспользовать = Истина, 
				Перечисления.СтатусыСервисов.НеИспользуется, 
				Перечисления.СтатусыСервисов.ВРаботе);
			Об.ТипСервиса 	= Перечисления.ТипыСервисов.ПользовательскийСервис;
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	// Соглашения SLA.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашениеSLA.Ссылка КАК Ссылка,
		|	СоглашениеSLA.Проведен КАК Проведен,
		|	СоглашениеSLA.УдалитьКлиент КАК УдалитьКлиент
		|ИЗ
		|	Документ.СоглашениеSLA КАК СоглашениеSLA
		|ГДЕ
		|	СоглашениеSLA.Тариф = ЗНАЧЕНИЕ(Справочник.Тарифы.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СоглашениеSLA.Дата";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			Об 					= Выборка.Ссылка.ПолучитьОбъект();
			Об.Контрагент		= Выборка.УдалитьКлиент;
			Об.Тариф			= Справочники.Тарифы.Основной;
			Об.Клиенты.Очистить();
			НоваяСтрока 		= Об.Клиенты.Добавить();
			НоваяСтрока.Клиент 	= Выборка.УдалитьКлиент;
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.Записать(?(Выборка.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));			
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеТрудозатрат(Параметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Трудозатраты.Объект) КАК Количество
		|ИЗ
		|	РегистрСведений.Трудозатраты КАК Трудозатраты
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Трудозатраты.Объект) = ТИП(Документ.Задание)
		|	И Трудозатраты.Объект.Инициатор <> НЕОПРЕДЕЛЕНО
		|	И НЕ Трудозатраты.Объект.Инициатор ЕСТЬ NULL
		|	И НЕ Трудозатраты.Объект.Инициатор В (&МассивПустыхИнициаторов)
		|	И (Трудозатраты.Инициатор = НЕОПРЕДЕЛЕНО
		|			ИЛИ Трудозатраты.Инициатор ЕСТЬ NULL
		|			ИЛИ Трудозатраты.Инициатор В (&МассивПустыхИнициаторов))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 50
		|	Трудозатраты.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.Трудозатраты КАК Трудозатраты
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Трудозатраты.Объект) = ТИП(Документ.Задание)
		|	И Трудозатраты.Объект.Инициатор <> НЕОПРЕДЕЛЕНО
		|	И НЕ Трудозатраты.Объект.Инициатор ЕСТЬ NULL
		|	И НЕ Трудозатраты.Объект.Инициатор В (&МассивПустыхИнициаторов)
		|	И (Трудозатраты.Инициатор = НЕОПРЕДЕЛЕНО
		|			ИЛИ Трудозатраты.Инициатор ЕСТЬ NULL
		|			ИЛИ Трудозатраты.Инициатор В (&МассивПустыхИнициаторов))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Трудозатраты.Объект.Дата УБЫВ";
	
	МассивПустых = Новый Массив;
	МассивПустых.Добавить(Справочники.КонтактныеЛица.ПустаяСсылка());
	МассивПустых.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	МассивПустых.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивПустых.Добавить(Справочники.Подразделения.ПустаяСсылка());
	МассивПустых.Добавить(Справочники.Пользователи.ПустаяСсылка());
	МассивПустых.Добавить(Справочники.ПотенциальныеКлиенты.ПустаяСсылка());
	МассивПустых.Добавить(Справочники.Сотрудники.ПустаяСсылка());
	МассивПустых.Добавить(Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("МассивПустыхИнициаторов", МассивПустых); 
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаНеОбработанных = МассивРезультатов[0].Выбрать();
	КоличествоНеОбработанных = 0;
	Если ВыборкаНеОбработанных.Следующий() Тогда
		КоличествоНеОбработанных = ВыборкаНеОбработанных.Количество;
	КонецЕсли;
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = КоличествоНеОбработанных;
	КонецЕсли;
	
	Выборка = МассивРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.Трудозатраты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписей.Прочитать(); 	
		
		НеобходимаЗапись = Ложь;
		Для Каждого Запись из НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(Запись.Инициатор) Тогда
				Запись.Инициатор = Запись.Объект.Инициатор;
				НеобходимаЗапись = Истина;
			КонецЕсли;
		КонецЦикла; 
		
		Если НеобходимаЗапись = Истина Тогда
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			Исключение
			КонецПопытки;	
		КонецЕсли;
		
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + 1;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = КоличествоНеОбработанных < 50;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеМетрик() Экспорт

	ИспользоватьМетрики = СЛС.РедакцияКонфигурации() = Перечисления.РедакцияКонфигурации.КОРП;
	Константы.ИспользоватьМетрики.Установить(ИспользоватьМетрики);
	
	// Заполняем метрики.
	Справочники.Метрики.ЗаполнитьПриПервоначальномЗаполнении();
	
	// Заполняем действия правил событий.
	Справочники.ДействияПравилСобытий.ЗаполнитьДействияПравилСобытияМетрики();
	
	// Заполняем правила событий.
	ТЗ = Справочники.ПравилаСобытий.ТаблицаСтруктураПравила();
	Справочники.ПравилаСобытий.ЗаполнитьПравилаДляМетрик(ТЗ);
	Справочники.ПравилаСобытий.ЗаписатьПравилаСобытий(ТЗ);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьServiceDesk") = Истина И ИспользоватьМетрики Тогда
		ПравилоРассчетаМетрик = Справочники.ПравилаСобытий.ПравилаПредопределенноеЗначениеПоИдентификатору(
			"РасчетМетрикДокументЗаданиеЗаписьДокумента");
		Справочники.ПравилаСобытий.ЗарегистрироватьИРассчитатьМетрикиПоПравилу(ПравилоРассчетаМетрик);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеВидовРабот() Экспорт
	
	Попытка
		ПроектныеРаботы = Справочники.ВидыРабот.ПроектныеРаботы.ПолучитьОбъект();
		ПроектныеРаботы.ВидВремени = Перечисления.ВидыВремени.Рабочее;
		ПроектныеРаботы.Записать();
	Исключение
	КонецПопытки;

КонецПроцедуры	

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеРеквизитовЗаданий(Параметры) Экспорт
	
	Константы.ЦветФонаПросроченнойЗадачи.Установить(РаботаСЦветомКлиентСервер.ЦветВHex(Новый Цвет(253, 235, 235)));
	Константы.ЦветТекстаПросроченнойЗадачи.Установить(РаботаСЦветомКлиентСервер.ЦветВHex(WebЦвета.Черный));
	
	// Заполняем клиента и инициатора. 
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	Задание.Ссылка КАК Ссылка,
		|	Задание.Проведен КАК Проведен,
		|	Задание.УдалитьОтветственныйИнициатора КАК ОтветственныйИнициатора,
		|	Задание.Инициатор КАК Инициатор,
		|	Задание.Клиент КАК Клиент,
		|	Задание.Этапы.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Этап КАК Этап,
		|		УдалитьИсполнитель КАК Исполнитель,
		|		ДатаНачала КАК ДатаНачала,
		|		ДатаОкончания КАК ДатаОкончания,
		|	) КАК Этапы,
		|	Задание.ТипПроцесса КАК ТипПроцесса,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Пользователи)
		|			ТОГДА Задание.Инициатор.Сотрудник
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	КОНЕЦ КАК ПользовательСотрудник,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Пользователи)
		|			ТОГДА Задание.Инициатор.Сотрудник.Организация
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	КОНЕЦ КАК ПользовательСотрудникОрганизация,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Задание.Инициатор) = ТИП(Справочник.Пользователи)
		|			ТОГДА Задание.Инициатор.Подразделение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеСотрудник
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	Задание.ТипПроцесса = ЗНАЧЕНИЕ(Справочник.ТипыПроцессов.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задание.Дата УБЫВ";
	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	КоличествоОшибок = 0;
	Обработано       = 0;	
	
	Выборка = Результат.Выбрать();
	
	УзелОбменаДляРегистрацииВсехДанных = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМобильноеПриложение") <> Истина Тогда
		УзелОбменаДляРегистрацииВсехДанных = ОбменМобильноеПриложениеПовтИсп.ПолучитьУзелДляРегистрацииДанных();
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		ТекущийДокумент = Выборка.Ссылка;		
		Попытка
			
			ЗаполнитьКлиентаИнициатораТипПроцессаВЗадании(ТекущийДокумент, Выборка, УзелОбменаДляРегистрацииВсехДанных);
			Обработано = Обработано + 1;
			
		Исключение
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить реквизиты документа %1 по причине %2'"), 
					ТекущийДокумент, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				ТекущийДокумент.Метаданные(), ТекущийДокумент, ТекстСообщения);
				
			КоличествоОшибок = КоличествоОшибок + 1;
			
		КонецПопытки;		
	КонецЦикла;	
	
	Если Обработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""ОбновлениеРеквизитовЗаданий"" не удалось обработать некоторые документы (пропущены): %1'"), 
				КоличествоОшибок);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Процедура ""ОбновлениеРеквизитовЗаданий"" обработала очередную порцию документов: 100'"));
		
КонецПроцедуры

Процедура ЗаполнитьКлиентаИнициатораТипПроцессаВЗадании(Знач ТекущийДокумент, Знач Выборка, 
	Знач УзелОбмена = Неопределено)
	
	Блокировка 		  = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ТекущийДокумент.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущийДокумент);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Об = ТекущийДокумент.ПолучитьОбъект();
		Если Об <> Неопределено Тогда
			
			ТипИнициатора = ТипЗнч(Об.Инициатор);
			// Клиент, Инициатор.
			Если ТипИнициатора = Тип("СправочникСсылка.Контрагенты") Тогда
				Об.Клиент = Выборка.Инициатор;
				Если ЗначениеЗаполнено(Выборка.ОтветственныйИнициатора) Тогда
					Об.Инициатор = Выборка.ОтветственныйИнициатора;
				КонецЕсли;
			ИначеЕсли ТипИнициатора = Тип("СправочникСсылка.Пользователи") Тогда
				Если ЗначениеЗаполнено(Выборка.ПользовательСотрудник) Тогда
					Если ЗначениеЗаполнено(Выборка.ПользовательСотрудникОрганизация) Тогда
						Об.Клиент = Выборка.ПользовательСотрудникОрганизация;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(Выборка.ПодразделениеСотрудник) Тогда
					Об.Клиент = Выборка.ПодразделениеСотрудник;
				КонецЕсли;
			ИначеЕсли ТипИнициатора = Тип("СправочникСсылка.Организации") Тогда
				Об.Клиент = Выборка.Инициатор;
				Если ЗначениеЗаполнено(Выборка.ОтветственныйИнициатора) Тогда
					Об.Инициатор = Выборка.ОтветственныйИнициатора;
				КонецЕсли;
			ИначеЕсли ТипИнициатора = Тип("СправочникСсылка.Подразделения") Тогда
				Об.Клиент = Выборка.Инициатор;
				Если ЗначениеЗаполнено(Выборка.ОтветственныйИнициатора) Тогда
					Об.Инициатор = Выборка.ОтветственныйИнициатора;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Об.Клиент) Тогда
				Об.Клиент = Об.Инициатор;
			КонецЕсли;
			
			// ДатаНазначенияИсполнителя.
			Этапы = Выборка.Этапы.Выбрать();
			Пока Этапы.Следующий() Цикл				
				Об.ДатаНазначенияИсполнителя = Этапы.ДатаНачала;
				Прервать;				
			КонецЦикла;
			
			// ТипПроцесса.
			Если ЗначениеЗаполнено(Об.УдалитьТипДокумента) Тогда
				Индекс 		   = Перечисления.УдалитьТипыДокументов.Индекс(Об.УдалитьТипДокумента);
				Об.ТипПроцесса = Справочники.ТипыПроцессов[
					Метаданные.Перечисления.УдалитьТипыДокументов.ЗначенияПеречисления[Индекс].Имя];
			Иначе
				Об.ТипПроцесса = Справочники.ТипыПроцессов.Инцидент;
			КонецЕсли;
			
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.ОбменДанными.Загрузка = Истина;
			Об.Записать(РежимЗаписиДокумента.Запись);
			
			// Регистрация в планах обмена.
			Если УзелОбмена <> Неопределено Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Об.Ссылка);	
			КонецЕсли;
			
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеБанков() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Банки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	Банки.Страна = &ПустаяСтрана
		|	И НЕ Банки.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("ПустаяСтрана", Справочники.СтраныМира.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтранаРФ = Справочники.СтраныМира.Россия;
	Пока Выборка.Следующий() Цикл
		
		ВыбранныйБанк = Выборка.Ссылка.ПолучитьОбъект();
		ВыбранныйБанк.Страна = СтранаРФ;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВыбранныйБанк);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеВидовМестоположений() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыМестоположений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыМестоположений КАК ВидыМестоположений";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ВыбранныйВидМестоположения = Выборка.Ссылка.ПолучитьОбъект();
			ВыбранныйВидМестоположения.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ЗаполнитьВидыПричинОтклоненияОтГрафика() Экспорт
	
	Справочники.ВидыПричинОтклоненияОтГрафика.ЗаполнитьВидыПричинОтклоненияОтГрафикаПриПервоначальномЗаполнении();
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеНарядовНаРаботы(Параметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	НарядНаРаботы.Ссылка КАК Ссылка,
		|	НарядНаРаботы.Проведен КАК Проведен
		|ИЗ
		|	Документ.НарядНаРаботы КАК НарядНаРаботы
		|ГДЕ
		|	НарядНаРаботы.Ссылка В
		|			(ВЫБРАТЬ
		|				НарядНаРаботыРаботы.Ссылка КАК Ссылка
		|			ИЗ
		|				Документ.НарядНаРаботы.Работы КАК НарядНаРаботыРаботы
		|			ГДЕ
		|				НарядНаРаботыРаботы.Количество = 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	КоличествоОшибок = 0;
	Обработано       = 0;	
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийДокумент = Выборка.Ссылка;		
		Попытка
			
			ЗаполнитьНарядНаРаботы(ТекущийДокумент, Выборка);
			Обработано = Обработано + 1;
			
		Исключение
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить реквизиты документа %1 по причине %2'"), 
					ТекущийДокумент, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				ТекущийДокумент.Метаданные(), ТекущийДокумент, ТекстСообщения);
				
			КоличествоОшибок = КоличествоОшибок + 1;
			
		КонецПопытки;		
	КонецЦикла;	
	
	Если Обработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""ОбновлениеНарядовНаРаботы"" не удалось обработать некоторые документы (пропущены): %1'"), 
				КоличествоОшибок);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Процедура ""ОбновлениеНарядовНаРаботы"" обработала очередную порцию документов: 100'"));
	
КонецПроцедуры

Процедура ЗаполнитьНарядНаРаботы(Знач ТекущийДокумент, Знач Выборка)
	
	мВыполнениеНарядовНаРаботы = Справочники.ВидыРабот.ВыполнениеНарядовНаРаботы;
	
	Блокировка 		  = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ТекущийДокумент.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущийДокумент);
	
	мЧас 			  = Справочники.КлассификаторЕдиницИзмерения.ч;
	мТарифОсновной 	  = Справочники.Тарифы.Основной;
	мПеречисленияСтатусыУслугВРаботе = Перечисления.СтатусыУслуг.ВРаботе;
	мПеречисленияВидыВремениРабочее = Перечисления.ВидыВремени.Рабочее;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Об = ТекущийДокумент.ПолучитьОбъект();
		Если Об <> Неопределено Тогда
			
			// ДатаНазначенияИсполнителя.
			Для Каждого Строки Из Об.Работы Цикл
				
				Строки.Тариф 			= мТарифОсновной;
				Строки.ЕдиницаИзмерения = мЧас;
				
				Если ЗначениеЗаполнено(Строки.Задание) Тогда
					Задание 			= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строки.Задание, 
						"Клиент, Инициатор");
					Строки.Клиент	 	= Задание.Клиент;
					Строки.Инициатор 	= Задание.Инициатор;
				КонецЕсли;
				
				Строки.Количество = ?(Строки.УдалитьДлительностьВЧасах = 0, 1, Строки.УдалитьДлительностьВЧасах);
				Если ЗначениеЗаполнено(Строки.Сервис) И ЗначениеЗаполнено(Строки.УдалитьВидРаботы) Тогда
					
					НайденнаяСсылка = Справочники.Услуги.НайтиПоНаименованию(Строка(Строки.УдалитьВидРаботы), Истина,,
						Строки.Сервис);
					Если НЕ ЗначениеЗаполнено(НайденнаяСсылка) Тогда
						НайденнаяСсылка 				= Справочники.Услуги.СоздатьЭлемент();
						НайденнаяСсылка.Наименование 	= Строка(Строки.УдалитьВидРаботы);
						НайденнаяСсылка.Владелец 		= Строки.Сервис;
						НайденнаяСсылка.Статус 			= мПеречисленияСтатусыУслугВРаботе;
						НайденнаяСсылка.ЕдиницаИзмерения= мЧас;
						НайденнаяСсылка.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
						НайденнаяСсылка.Записать();
						
						НайденнаяСсылка = НайденнаяСсылка.Ссылка;
					КонецЕсли;
					
					Строки.Услуга 			= НайденнаяСсылка;
					Строки.ЕдиницаИзмерения = НайденнаяСсылка.ЕдиницаИзмерения;
					
				КонецЕсли;
				
				Если Строки.УдалитьДень <> Дата(1, 1, 1) Тогда
					
					МенеджерЗаписи 					= РегистрыСведений.Трудозатраты.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект			= Об.Ссылка;					
					МенеджерЗаписи.Инициатор 		= Строки.Инициатор;
					МенеджерЗаписи.Исполнитель		= Строки.Пользователь;
					МенеджерЗаписи.КлючУникальности	= Новый УникальныйИдентификатор();
					МенеджерЗаписи.ДатаНачала		= Строки.УдалитьДень 
						+ (Строки.УдалитьВремяНачала - Дата(1, 1, 1));
					МенеджерЗаписи.ДатаОкончания	= Строки.УдалитьДень 
						+ (Строки.УдалитьВремяОкончания - Дата(1, 1, 1));
					МенеджерЗаписи.Длительность		= МенеджерЗаписи.ДатаОкончания - МенеджерЗаписи.ДатаНачала;
					Если ЗначениеЗаполнено(Строки.УдалитьВидРаботы) Тогда
						
						СтрокаВидРаботы = Строка(Строки.УдалитьВидРаботы);
						
						НайденнаяСсылка = Справочники.ВидыРабот.НайтиПоНаименованию(СтрокаВидРаботы, Истина);
						Если НЕ ЗначениеЗаполнено(НайденнаяСсылка) Тогда
							НайденнаяСсылка 				= Справочники.ВидыРабот.СоздатьЭлемент();
							НайденнаяСсылка.Наименование 	= СтрокаВидРаботы;
							НайденнаяСсылка.ВидВремени		= мПеречисленияВидыВремениРабочее;
							НайденнаяСсылка.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
							НайденнаяСсылка.Записать();
							
							НайденнаяСсылка = НайденнаяСсылка.Ссылка;
						КонецЕсли;
						
						МенеджерЗаписи.ВидРаботы	= НайденнаяСсылка;
						
					Иначе
						МенеджерЗаписи.ВидРаботы 	= мВыполнениеНарядовНаРаботы;
					КонецЕсли;
					МенеджерЗаписи.Описание			= Строки.Описание;
					Если МенеджерЗаписи.ДатаОкончания > МенеджерЗаписи.ДатаНачала Тогда
						МенеджерЗаписи.Записать(Истина);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.Записать(?(Выборка.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеВзаиморасчетыСКонтрагентами(Параметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВзаиморасчетыСКонтрагентами.Регистратор) КАК Количество
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.УдалитьОбр = Ложь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
		|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.УдалитьОбр = Ложь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВзаиморасчетыСКонтрагентами.Регистратор.Дата УБЫВ";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаНеОбработанных = МассивРезультатов[0].Выбрать();
	КоличествоНеОбработанных = 0;
	Если ВыборкаНеОбработанных.Следующий() Тогда
		КоличествоНеОбработанных = ВыборкаНеОбработанных.Количество;
	КонецЕсли;
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = КоличествоНеОбработанных;
	КонецЕсли;
	
	Выборка = МассивРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать(); 	
		
		НеобходимаЗапись = Ложь;
		Для Каждого Запись из НаборЗаписей Цикл
			Запись.ВидДвижения = ?(Запись.ВидДвижения = ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход, 
				ВидДвиженияНакопления.Приход);
				
			Запись.УдалитьОбр = Истина;
			НеобходимаЗапись = Истина;
		КонецЦикла; 
		
		Если НеобходимаЗапись = Истина Тогда
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			Исключение
			КонецПопытки;	
		КонецЕсли;
		
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + 1;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = КоличествоНеОбработанных < 50;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеДел() Экспорт
	
	Константы.ИспользоватьДела.Установить(Истина);
	Константы.ДнейХраненияВыполненныхДел.Установить(30);
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ЗаполнениеПравилСобытийДляСозданияЗаданийИзПисем() Экспорт
	
	// Действие.
	ГруппаСозданиеЗаданийИКомментариевИзВходящихПисем = 
		Справочники.ДействияПравилСобытий.НайтиСоздатьГруппу("СозданиеЗаданийИКомментариевИзВходящихПисем", 
		НСтр("ru = 'Создание заданий и/или комментариев из входящих писем'"));
		
	Справочники.ДействияПравилСобытий.СоздатьЗаданиеИлиКомментарийЗадания(Истина, 
		ГруппаСозданиеЗаданийИКомментариевИзВходящихПисем);
	
	// Правило.
	// Описываем структуру.
	ТЗ = Справочники.ПравилаСобытий.ТаблицаСтруктураПравила();	
	// Заполняем реквизитами.
	Справочники.ПравилаСобытий.ЗаполнитьПравилаДляВходящихЭлектронныхПисем(ТЗ);	
	// Записываем
	Справочники.ПравилаСобытий.ЗаписатьПравилаСобытий(ТЗ);
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеКанбан() Экспорт
	
	Справочники.КанбанДоски.ЗаполнитьКанбанДоскиПриПервоначальномЗаполнении();
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновлениеРабочийСтол() Экспорт
	
	Справочники.РабочиеСтолы.ЗаполнитьРабочийСтолПриПервоначальномЗаполнении();
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ЗарегистрироватьСправочникиМП() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМобильноеПриложение") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	МассивУзлов = ОбменМобильноеПриложениеПовтИсп.ПолучитьВсеУзлы();
	Если МассивУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	УзелОбменаДляРегистрацииВсехДанных = ОбменМобильноеПриложениеПовтИсп.ПолучитьУзелДляРегистрацииДанных();
	
	МетаТипыПроцессов = Метаданные.Справочники.ТипыПроцессов;	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, МетаТипыПроцессов);	
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОбновитьТеги() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Теги.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Теги КАК Теги
		|ГДЕ
		|	Теги.ЦветФона = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Тег 			= Выборка.Ссылка.ПолучитьОбъект();
			Тег.ЦветФона 	= РаботаСЦветомКлиентСервер.ЦветВHex(РаботаСЦветомКлиентСервер.СлучайныйЦвет());
			Тег.ЦветТекста 	= РаботаСЦветомКлиентСервер.ЦветВHex(
				РаботаСЦветомКлиентСервер.КонтрастныйЦвет(Тег.ЦветФона));
			Тег.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_1_ОчисткаПлановРабот() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПланРабот.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УдалитьПланРабот КАК ПланРабот";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ПланРабот 		= Выборка.Ссылка.ПолучитьОбъект();
			ПланРабот.Удалить();
			
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_5_ОбновлениеЭтапаПроцесса() Экспорт
	
	Попытка
		ЭтапОбъект	= Справочники.ЭтапыПроцессов.Приостановлено.ПолучитьОбъект();	
		ЭтапОбъект.Наименование			= НСтр("ru = 'Приостановлено'");
		ЭтапОбъект.ЦветФона				= РаботаСЦветомКлиентСервер.ЦветВHex(WebЦвета.Белый);
		ЭтапОбъект.ЦветТекста			= РаботаСЦветомКлиентСервер.ЦветВHex(WebЦвета.Серый);
		ЭтапОбъект.ЦветРамкиКанбанДоски	= РаботаСЦветомКлиентСервер.ЦветВHex(WebЦвета.Серый);
		ЭтапОбъект.СостояниеЭтапа		= Перечисления.СостоянияЭтаповПроцесса.Приостановка;
		ЭтапОбъект.Картинка				= Новый ХранилищеЗначения(БиблиотекаКартинок.сстПауза);
		ЭтапОбъект.Записать();
	Исключение
	КонецПопытки;	
	
КонецПроцедуры	

Процедура ПереходНаВерсию_3_1_3_6_ОбновлениеНумерацииSLA() Экспорт
    
    Запрос = Новый Запрос();
    Запрос.Текст =
        "ВЫБРАТЬ
        |   СоглашениеSLA.Номер КАК Номер,
        |   СоглашениеSLA.Ссылка КАК Ссылка
        |ИЗ
        |   Документ.СоглашениеSLA КАК СоглашениеSLA
        |
        |УПОРЯДОЧИТЬ ПО
        |   СоглашениеSLA.Дата";
    Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
        
        Номер = СокрЛП(Выборка.Номер);
        Если СтрДлина(Номер) <> 9 Тогда
        	Продолжить;
        КонецЕсли; 

        Индекс = СтрНайти(Номер, "-");
        Если Индекс > 0 Тогда            
            Номер = Лев(Номер, Индекс) + "00" + Сред(Номер, Индекс + 1);
        Иначе            
            Номер = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Номер, 11, "0", "Слева");
        КонецЕсли;
        
        НачатьТранзакцию();
        Попытка
            Об = Выборка.Ссылка.ПолучитьОбъект();
            Об.Номер = Номер;
            Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
            Об.Записать(РежимЗаписиДокумента.Проведение);
            ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
        КонецПопытки;
        
    КонецЦикла;
    
    ОбновитьНумерациюОбъектов(Метаданные.Документы.СоглашениеSLA);
    
КонецПроцедуры

#КонецОбласти

#Область _3_1_3_8

Процедура ПереходНаВерсию_3_1_3_8_ЗаполнитьШаблоныЗаданий() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныЗаданий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныЗаданий КАК ШаблоныЗаданий
		|ГДЕ
		|	ШаблоныЗаданий.ВидимостьШаблона = ЗНАЧЕНИЕ(Перечисление.ВидимостьШаблонов.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Об.ВидимостьШаблона = Перечисления.ВидимостьШаблонов.Общий;
		Об.Записать();
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныОтветовКомментариевВЗаданиях.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныОтветовКомментариевВЗаданиях КАК ШаблоныОтветовКомментариевВЗаданиях
		|ГДЕ
		|	ШаблоныОтветовКомментариевВЗаданиях.ВидимостьШаблона = ЗНАЧЕНИЕ(Перечисление.ВидимостьШаблонов.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Об.ВидимостьШаблона = Перечисления.ВидимостьШаблонов.Общий;
		Об.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_8_ЗаполнитьШаблонОформления() Экспорт
	
	Спр = Справочники.ОформленияОповещенийEmailПравилСобытий;
	Объект = Спр.СовременныйШаблон.ПолучитьОбъект();
	Объект.Наименование = НСтр("ru = 'Современный шаблон'");
	Объект.БлокШапка 	= ТекстМакета("ШапкаСовременныйШаблон");
	Объект.БлокПодвал 	= ТекстМакета("ПодвалСовременныйШаблон");
	Объект.Записать();
	
КонецПроцедуры

Функция ТекстМакета(ИмяМакета)
	
	Макет = Справочники.ОформленияОповещенийEmailПравилСобытий.ПолучитьМакет(ИмяМакета);
	Возврат Макет.ПолучитьТекст();
	
КонецФункции

Процедура ПереходНаВерсию_3_1_3_8_ПерезаполнитьДействияПравилСобытий() Экспорт
		
	ДПС = Справочники.ДействияПравилСобытий;
	ГруппаОповещенияПоEMail = ДПС.НайтиСоздатьГруппу("ОповещенияПоEMail",	НСтр("ru = 'Оповещения по EMail'"));
	ГруппаОповещенияПоSMS   = ДПС.НайтиСоздатьГруппу("ОповещенияПоSMS",  	НСтр("ru = 'Оповещения по SMS'"));
	
	ДПС.ОповещениеПоEMailЗаданиеСозданиеИнициаторИсполнительНаблюдатели(Истина, ГруппаОповещенияПоEMail);
	ДПС.ОповещениеПоSMSЗаданиеСозданиеИсполнитель(Истина, ГруппаОповещенияПоSMS);
	ДПС.ОповещениеПоEMailЗаданиеВыполнениеИнициаторНаблюдатели(Истина, ГруппаОповещенияПоEMail);
	ДПС.ОповещениеПоEMailЗаданиеДобавлениеОбычногоКомментарияИнициаторИсполнительНаблюдатели(Истина, 
		ГруппаОповещенияПоEMail);
		
	ДПС.ОповещениеПоEMailЗаданиеДобавлениеПриватногоКомментарияАдресаты(Истина, ГруппаОповещенияПоEMail);
	ДПС.ОповещениеПоEMailЗаданиеИзменениеИсполнителяИсполнительПредыдущийИсполнитель(Истина, ГруппаОповещенияПоEMail);
	ДПС.ОповещениеПоEMailЗаданиеИзменениеЭтапаИнициаторНаблюдатели(Истина, ГруппаОповещенияПоEMail);
	ДПС.ОповещениеПоEMailЗаданиеУстановкаОценкиИсполнительНаблюдатели(Истина, ГруппаОповещенияПоEMail);
	ДПС.ОповещениеПоEMailЗаданиеЗавершениеИнициатор(Истина, ГруппаОповещенияПоEMail);
	ДПС.ОповещениеПоEMailЗаказПоставщикуВыполнениеИнициатор(Истина, ГруппаОповещенияПоEMail);
	ДПС.ОповещениеПоEMailЗаданиеИзменениеНаблюдателейДобавленныеНаблюдателиПредыдущиеНаблюдатели(Истина, 
		ГруппаОповещенияПоEMail);
		
	ДПС.ОповещениеПоEMailСтатьяБазыЗнанийДобавлениеКомментарияАвторПользовательНеУказан(Истина, 
		ГруппаОповещенияПоEMail);
	ДПС.ОповещениеПоEMailСтатьяБазыЗнанийЗаписьСтатьиПользовательНеУказан(Истина, ГруппаОповещенияПоEMail);
	ДПС.ЗаполнитьДействияПравилСобытияМетрики();
	
	// Пересчет метрик.
	ИспользоватьМетрики = СЛС.РедакцияКонфигурации() = Перечисления.РедакцияКонфигурации.КОРП;	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьServiceDesk") = Истина И ИспользоватьМетрики Тогда
		ПравилоРассчетаМетрик = Справочники.ПравилаСобытий.ПравилаПредопределенноеЗначениеПоИдентификатору(
			"РасчетМетрикДокументЗаданиеЗаписьДокумента");
		
		Справочники.ПравилаСобытий.ЗарегистрироватьИРассчитатьМетрикиПоПравилу(ПравилоРассчетаМетрик);
	КонецЕсли;
	
	// Перезаполнение рабочего стола.
	Справочники.РабочиеСтолы.ЗаполнитьРабочийСтолПриПервоначальномЗаполнении();
		
КонецПроцедуры

#КонецОбласти

#Область _3_1_3_10

Процедура ПереходНаВерсию_3_1_3_10_ОбновлениеРабочийСтол() Экспорт
	
	Справочники.РабочиеСтолы.ЗаполнитьРабочийСтолПриПервоначальномЗаполнении();
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_3_12

Процедура ПереходНаВерсию_3_1_3_12_УстановкаКонстантыИспользоватьИзображенияПользователейВКомментариях() Экспорт
    
    Константы.ИспользоватьИзображенияПользователейВКомментариях.Установить(Истина);
    
КонецПроцедуры

#КонецОбласти

#Область _3_1_3_14

Процедура ПереходНаВерсию_3_1_3_14_ОбновлениеОформленияОповещенийEmailПравилСобытий() Экспорт
    
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОформленияОповещенийEmailПравилСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОформленияОповещенийEmailПравилСобытий КАК ОформленияОповещенийEmailПравилСобытий";
    
    ПодстрокаВставки = 
		"blockquote{display:block;padding:0px 5px;margin:10px 0 10px 0px;border-left:5px solid #eee;position:relative;}quote{display:block;padding:0px 5px;margin:10px 0 10px 0px;border-left:5px solid #eee;position:relative;}</style>";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
        
        НачатьТранзакцию();
        Попытка
    		Об = Выборка.Ссылка.ПолучитьОбъект();
            
            Если СтрНайти(Об.БлокШапка, ПодстрокаВставки) = 0 Тогда
                
        		Об.БлокШапка = СтрЗаменить(Об.БлокШапка, 
                    "</style>", 
                    ПодстрокаВставки);
        		Об.Записать();
                
            КонецЕсли;
            ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
        КонецПопытки;
        		
	КонецЦикла;
    
    
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_14_ОбновлениеВидовПервичныхДокументов() Экспорт
	
	Справочники.ВидыПервичныхДокументов.ЗаполнитьВидыПервичныхДокументовПриПервоначальномЗаполнении();
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_3_15

Процедура ПереходНаВерсию_3_1_3_15_ЗаполнитьПараметрыРасчетовИВидыНачислений() Экспорт
	
	Справочники.ВидыНачисленийИУдержаний.ЗаполнитьВидыНачисленийИУдержаний();
	
	Справочники.ПараметрыРасчетов.ЗаполнитьПараметрыРасчетов();
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_15_ЗаполнитьУчетДенежныхСредств() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетДенежныхСредств.Ссылка КАК Ссылка,
		|	УчетДенежныхСредств.ВидДвижения КАК ВидДвижения
		|ИЗ
		|	Документ.УчетДенежныхСредств КАК УчетДенежныхСредств
		|ГДЕ
		|	НЕ УчетДенежныхСредств.ПометкаУдаления
		|	И УчетДенежныхСредств.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидДокументаУчетДенежныхСредств.ПустаяСсылка)";
	
	ВыборкаУчетДенежныхСредств = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаУчетДенежныхСредств.Следующий() Цикл 
		
		УчетДенежныхСредствОбъект = ВыборкаУчетДенежныхСредств.Ссылка.ПолучитьОбъект();
		
		Если ВыборкаУчетДенежныхСредств.ВидДвижения = Перечисления.ВидыДоходовРасходов.Доход Тогда
			УчетДенежныхСредствОбъект.ВидДокумента = Перечисления.ВидДокументаУчетДенежныхСредств.ОплатаПокупателя;
		Иначе
			УчетДенежныхСредствОбъект.ВидДокумента = Перечисления.ВидДокументаУчетДенежныхСредств.ОплатаПоставщику;
		КонецЕсли;	
		
		Попытка					
			УчетДенежныхСредствОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			УчетДенежныхСредствОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_15_ЗаполнитьОчередьВыполненияЗаданий() Экспорт 
	
	Если Константы.ИспользоватьServiceDesk.Получить() <> Истина Тогда		
		Возврат;		
	КонецЕсли;	
		
	Константы.ИспользоватьОчередьВыполненияЗаданий.Установить(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задание.Ссылка КАК ЗаданиеСсылка,
		|	Задание.ТекущийИсполнитель КАК ТекущийИсполнитель
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	НЕ Задание.ПометкаУдаления
		|	И НЕ Задание.Выполнено
		|	И НЕ Задание.Завершено
		|	И НЕ Задание.ТекущийИсполнитель ЕСТЬ NULL
		|	И Задание.ТекущийИсполнитель <> НЕОПРЕДЕЛЕНО
		|	И Задание.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка)
		|	И Задание.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задание.ДатаСоздания";
	
	РезультатЗапроса		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	ТаблицаКлючей = Новый ТаблицаЗначений;
	ТаблицаКлючей.Колонки.Добавить("Исполнитель");
	ТаблицаКлючей.Колонки.Добавить("ПоследнийНомер");
	
	// Очистим регистр.
	НаборЗаписей = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл				
				
		НаборЗаписей = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Исполнитель.Установить(ВыборкаДетальныеЗаписи.ТекущийИсполнитель);
		НаборЗаписей.Отбор.Задание.Установить(ВыборкаДетальныеЗаписи.ЗаданиеСсылка);
		НаборЗаписей.Прочитать();		
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		// Номер в очереди.
		ОтборИсполнитель = Новый Структура;
		ОтборИсполнитель.Вставить("Исполнитель", ВыборкаДетальныеЗаписи.ТекущийИсполнитель);
		МассивСтрок = ТаблицаКлючей.НайтиСтроки(ОтборИсполнитель);
		
		Если МассивСтрок.Количество() = 0 Тогда
			ТекущийНомер				= 1;
			НоваяСтрока					= ТаблицаКлючей.Добавить();
			НоваяСтрока.Исполнитель		= ВыборкаДетальныеЗаписи.ТекущийИсполнитель;
			НоваяСтрока.ПоследнийНомер	= ТекущийНомер;
			
		Иначе
			ТекущийНомер = МассивСтрок[0].ПоследнийНомер + 1;
			МассивСтрок[0].ПоследнийНомер = ТекущийНомер;
			
		КонецЕсли;		
		
		НоваяЗапись					= НаборЗаписей.Добавить();
		НоваяЗапись.Исполнитель		= ВыборкаДетальныеЗаписи.ТекущийИсполнитель;
		НоваяЗапись.Задание			= ВыборкаДетальныеЗаписи.ЗаданиеСсылка;
		НоваяЗапись.НомерВОчереди	= ТекущийНомер;
		НаборЗаписей.Записать();		
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_15_ЗаполнитьВесПриоритетовЗадания() Экспорт 
	
	Если Константы.ИспользоватьServiceDesk.Получить() = Истина Тогда
		
		Константы.ИспользоватьДинамическиеПриоритеты.Установить(Истина);
		
	КонецЕсли;	
	
	Константы.ВесКритическогоПриоритетаЗадания.Установить(40);
	Константы.ВесВысокогоПриоритетаЗадания.Установить(30);
	Константы.ВесСреднегоПриоритетаЗадания.Установить(20);
	Константы.ВесНизкогоПриоритетаЗадания.Установить(10);
	Константы.ВесОченьНизкогоПриоритетаЗадания.Установить(0);
	Константы.ШагКорректировкиВеса.Установить(10);
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_3_15_ЗаполнитьДатуНачалаРаботВЗадании() Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Задание.Ссылка КАК Ссылка,
		|	Задание.Этапы.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Этап КАК Этап,
		|		УдалитьИсполнитель КАК Исполнитель,
		|		ДатаНачала КАК ДатаНачала,
		|		ДатаОкончания КАК ДатаОкончания
		|	) КАК Этапы
		|ИЗ
		|	Документ.Задание КАК Задание
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание.Этапы КАК ЗаданиеЭтапы
		|		ПО (ЗаданиеЭтапы.Ссылка = Задание.Ссылка)
		|			И (ЗаданиеЭтапы.НомерСтроки = 1)
		|ГДЕ
		|	Задание.ДатаНачалаВыполненияРабот = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ЗаданиеЭтапы.Ссылка ЕСТЬ НЕ NULL 
		|	И НЕ Задание.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задание.Дата УБЫВ";	
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Этапы = Выборка.Этапы.Выбрать();
		Пока Этапы.Следующий() Цикл
			Если Этапы.Этап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Выполнен
				И Этапы.Этап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Закрыт
				И Этапы.Этап.СостояниеЭтапа <> Перечисления.СостоянияЭтаповПроцесса.Новый Тогда
				
				Попытка
					ЗаданиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ЗаданиеОбъект.ДатаНачалаВыполненияРабот = Этапы.ДатаНачала;
					ЗаданиеОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
					ЗаданиеОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьИзмененияДляМП", Истина);
					ЗаданиеОбъект.ОбменДанными.Загрузка = Истина;
					ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
				КонецПопытки;	
				
				Прервать;
				
			КонецЕсли;	
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_4_2

Процедура ПереходНаВерсию_3_1_4_2_ЗаполнениеУслугиСервисов() Экспорт
	
	мПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УслугиСервисов.Регистратор КАК Регистратор,
		|	УслугиСервисов.Клиент КАК Клиент,
		|	УслугиСервисов.Услуга КАК Услуга
		|ИЗ
		|	РегистрСведений.УслугиСервисов КАК УслугиСервисов
		|ГДЕ
		|	УслугиСервисов.УдалитьОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УслугиСервисов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать(); 	
		
		НеобходимаЗапись = Ложь;
		Для Каждого Запись из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(Запись.УдалитьОрганизация) Тогда
				Запись.Организация 			= Запись.УдалитьОрганизация;
				Запись.УдалитьОрганизация 	= мПустаяОрганизация;
				НеобходимаЗапись = Истина;
			КонецЕсли;
		КонецЦикла; 
		
		Если НеобходимаЗапись = Истина Тогда
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			Исключение
			КонецПопытки;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_4_2_ИзменитьРолиПрофилей() Экспорт
	
	МассивРолей = Новый Массив;
	МассивРолей.Добавить("? ДобавлениеИзменениеПлановИНарядовНаРаботы");
	МассивРолей.Добавить("? ЧтениеПлановИНарядовНаРаботы");
	МассивРолей.Добавить("? УдаленныйДоступОбменДаннымиВМоделиСервиса");
	МассивРолей.Добавить("? УдаленныйДоступОбменСообщениями");
	
	УдалитьИзмененныеРолиИзПрофилейГруппДоступа(МассивРолей);
	
КонецПроцедуры	

Процедура ПереходНаВерсию_3_1_4_2_ОбновитьНастройкиTelegram() Экспорт
	
	TelegramСервер.ЗаполнитьНастройкиTelegramПоУмолчанию(Ложь);
	Константы.ИспользоватьTelegram.Установить(Ложь);
	УстановитьВидыКонтактнойИнформации();
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_4_3

Процедура ПереходНаВерсию_3_1_4_3_ОбновитьВидыКИ() Экспорт
	
	МассивКИ = Новый Массив;
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.TelegramКонтактногоЛица);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.TelegramКонтрагента);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.TelegramМестаХранения);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.TelegramМестоположения);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.TelegramОрганизации);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.TelegramПодразделения);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.TelegramПользователя);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.TelegramПотенциальногоКлиента);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.TelegramСотрудника);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.TelegramФизическогоЛица);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
		|	И ВидыКонтактнойИнформации.Ссылка В(&МассивСсылок)
		|	И ВидыКонтактнойИнформации.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Telegram)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивКИ);	
	РезультатЗапроса		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Попытка
			ВидКИОбъект		= ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации.Telegram;
			ВидКИОбъект.ОбменДанными.Загрузка = Истина;
			ВидКИОбъект.Записать();
		Исключение
			Продолжить;	
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_4_3_ОбновитьПодсистемуTelegram() Экспорт
	
	TelegramСервер.ЗагрузитьНастройки(, Ложь);
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_4_3_ОбновлениеРабочийСтол() Экспорт
	
	Справочники.РабочиеСтолы.ЗаполнитьРабочийСтолПриПервоначальномЗаполнении();
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_4_3_ПереносЛогиновИПаролей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛогиныИПароли.Объект КАК Объект,
		|	ЛогиныИПароли.Программа КАК Программа,
		|	ЛогиныИПароли.Категория КАК Категория,
		|	ЛогиныИПароли.Период КАК Период,
		|	ЛогиныИПароли.Логин КАК Логин,
		|	ЛогиныИПароли.Пароль КАК Пароль,
		|	ЛогиныИПароли.Автор КАК Автор,
		|	ЛогиныИПароли.ГруппаПользователей КАК ГруппаПользователей,
		|	ЛогиныИПароли.Комментарий КАК Комментарий,
		|	ЛогиныИПароли.ТипПароля КАК ТипПароля
		|ИЗ
		|	РегистрСведений.УдалитьЛогиныИПароли КАК ЛогиныИПароли
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	Объект,
		|	Программа,
		|	Категория";
	
	РезультатЗапроса	= Запрос.Выполнить();	
	ВыборкаПоОбъекту	= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОбъекту.Следующий() Цикл
		ВыборкаПоПрограмме = ВыборкаПоОбъекту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПрограмме.Следующий() Цикл
			ВыборкаПоКатегории = ВыборкаПоПрограмме.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоКатегории.Следующий() Цикл	
								
				ТребуетсяСоздатьЭлементСправочника	= Истина;
				ЛогиныИПаролиСсылка = Справочники.ЛогиныИПароли.ПустаяСсылка();
				
				ВыборкаДетальныеЗаписи = ВыборкаПоКатегории.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Попытка
						// 1. Новая запись в справочник Логины и Пароли.
						Если ТребуетсяСоздатьЭлементСправочника Тогда						
							ЛогиныИПаролиОбъект = Справочники.ЛогиныИПароли.СоздатьЭлемент();
							ЗаполнитьЗначенияСвойств(ЛогиныИПаролиОбъект, ВыборкаДетальныеЗаписи);
							ЛогиныИПаролиОбъект.ДатаСоздания = ВыборкаДетальныеЗаписи.Период;
							ЛогиныИПаролиОбъект.ОбменДанными.Загрузка = Истина;
							ЛогиныИПаролиОбъект.Записать();
							ЛогиныИПаролиСсылка = ЛогиныИПаролиОбъект.Ссылка;
							ТребуетсяСоздатьЭлементСправочника = Ложь;
						КонецЕсли;
						
						// 2. Запись в регистр ЛогиныИПаролиХранилище.
						МенеджерЗаписи = РегистрыСведений.ЛогиныИПаролиХранилище.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Владелец = ЛогиныИПаролиСсылка;
						МенеджерЗаписи.Период	= ВыборкаДетальныеЗаписи.Период;
						МенеджерЗаписи.Логин	= ВыборкаДетальныеЗаписи.Логин;
						МенеджерЗаписи.Пароль	= Новый ХранилищеЗначения(ВыборкаДетальныеЗаписи.Пароль, 
							Новый СжатиеДанных(6));
						МенеджерЗаписи.ПериодМП = ВыборкаДетальныеЗаписи.Период;
						МенеджерЗаписи.Записать(Истина);
					Исключение
					КонецПопытки;
					
				КонецЦикла;	 
			КонецЦикла;
			
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_4_3_КорректировкаУчетДС() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетДенежныхСредств.Ссылка КАК Ссылка,
		|	УчетДенежныхСредств.Дата КАК Дата,
		|	УчетДенежныхСредств.Проведен КАК Проведен,
		|	УчетДенежныхСредств.Организация КАК Организация
		|ИЗ
		|	Документ.УчетДенежныхСредств КАК УчетДенежныхСредств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УчетДенежныхСредств.Оплата КАК УчетДенежныхСредствОплата
		|		ПО (УчетДенежныхСредствОплата.Ссылка = УчетДенежныхСредств.Ссылка)
		|			И (УчетДенежныхСредствОплата.НомерСтроки = 1)
		|ГДЕ
		|	НЕ УчетДенежныхСредств.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	УчетДенежныхСредств.Дата УБЫВ";
	
	РезультатЗапроса		= Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект	= ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ТребуетсяЗапись = Ложь;		
		ПоступлениеПустаяСсылка = Документы.Поступление.ПустаяСсылка();
		
		Для Каждого Стр Из ДокументОбъект.Оплата Цикл
			
			Если ЗначениеЗаполнено(Стр.ОплачиваемыйДокумент) Тогда
				
				// Перенос заказа поставщику в поле Заказ.
				Если ТипЗнч(Стр.ОплачиваемыйДокумент) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					Стр.Заказ				 = Стр.ОплачиваемыйДокумент;
					Стр.ОплачиваемыйДокумент = ПоступлениеПустаяСсылка;
					ТребуетсяЗапись = Истина;
					
				// Движение документа Поступление по регистру Оплата документов.				
				ИначеЕсли ТипЗнч(Стр.ОплачиваемыйДокумент) = Тип("ДокументСсылка.Поступление")
					И Стр.ОплачиваемыйДокумент.Проведен
					И ЗначениеЗаполнено(Стр.ОплачиваемыйДокумент.Контрагент)
					И Стр.ОплачиваемыйДокумент.СуммаДокумента > 0 Тогда
					
					// Движения документа Поступление по регистру Оплата документов (Приход).
					НаборЗаписей = РегистрыНакопления.ОплатаДокументов.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(Стр.ОплачиваемыйДокумент);
					Запись = НаборЗаписей.ДобавитьПриход();
					Запись.Регистратор	= Стр.ОплачиваемыйДокумент;
					Запись.Организация	= Стр.ОплачиваемыйДокумент.Организация;
					Запись.Документ		= Стр.ОплачиваемыйДокумент;
					Запись.Сумма		= Стр.ОплачиваемыйДокумент.СуммаДокумента;
					Запись.Активность	= Истина;
					Запись.Период		= Стр.ОплачиваемыйДокумент.Дата;
					Попытка
						НаборЗаписей.Записать(Истина);
					Исключение
					КонецПопытки;
					
					// Движения документа Учет ДС для документа Поступления (Расход).
					Если ВыборкаДетальныеЗаписи.Проведен Тогда
						НаборЗаписей = РегистрыНакопления.ОплатаДокументов.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Ссылка);
						НаборЗаписей.Прочитать();
						Запись = НаборЗаписей.ДобавитьРасход();
						Запись.Регистратор	= ВыборкаДетальныеЗаписи.Ссылка;
						Запись.Организация	= ВыборкаДетальныеЗаписи.Организация;
						Запись.Документ		= Стр.ОплачиваемыйДокумент;
						Запись.Сумма		= Стр.Сумма;
						Запись.Активность	= Истина;
						Запись.Период		= ВыборкаДетальныеЗаписи.Дата;
						Попытка
							НаборЗаписей.Записать(Истина);
						Исключение
						КонецПопытки;
					КонецЕсли;	
					
				Иначе
					Продолжить;
					
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;
		
		Если ТребуетсяЗапись Тогда
			
			Попытка
				ДокументОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЦикла;	

КонецПроцедуры	

Процедура ПереходНаВерсию_3_1_4_3_ЗаполнитьВидДокумента() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Поступление.Ссылка КАК Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.ВидДокументаПоступления.ПоступлениеОтПоставщика) КАК ВидДокумента,
		|	Поступление.Проведен КАК Проведен
		|ИЗ
		|	Документ.Поступление КАК Поступление
		|ГДЕ
		|	Поступление.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидДокументаПоступления.ПустаяСсылка)
		|	И Поступление.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Продажа.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.ВидДокументаПродажа.ПродажаПокупателю),
		|	Продажа.Проведен
		|ИЗ
		|	Документ.Продажа КАК Продажа
		|ГДЕ
		|	Продажа.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидДокументаПродажа.ПустаяСсылка)
		|	И Продажа.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УчетДенежныхСредств.Ссылка,
		|	ВЫБОР
		|		КОГДА УчетДенежныхСредств.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДоходовРасходов.Расход)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидДокументаУчетДенежныхСредств.ОплатаПоставщику)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидДокументаУчетДенежныхСредств.ОплатаПокупателя)
		|	КОНЕЦ,
		|	УчетДенежныхСредств.Проведен
		|ИЗ
		|	Документ.УчетДенежныхСредств КАК УчетДенежныхСредств
		|ГДЕ
		|	УчетДенежныхСредств.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидДокументаУчетДенежныхСредств.ПустаяСсылка)
		|	И УчетДенежныхСредств.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект 				= Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидДокумента = Выборка.ВидДокумента;
		ДокументОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_4_3_ЗарегистрироватьСправочникиМП() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМобильноеПриложение") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	МассивУзлов = ОбменМобильноеПриложениеПовтИсп.ПолучитьВсеУзлы();
	Если МассивУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	УзелОбменаДляРегистрацииВсехДанных = ОбменМобильноеПриложениеПовтИсп.ПолучитьУзелДляРегистрацииДанных();	
	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, 
		Метаданные.Справочники.ВидыМестХранения);	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, 
		Метаданные.Справочники.МестаХранения);
	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, 
		Метаданные.Справочники.ВидыНоменклатуры);
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, 
		Метаданные.Справочники.Номенклатура);
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, 
		Метаданные.Справочники.КарточкиНоменклатуры);
	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, 
		Метаданные.Справочники.КатегорииЛогиновИПаролей);
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, 
		Метаданные.Справочники.ЛогиныИПароли);
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, 
		Метаданные.РегистрыСведений.ЛогиныИПаролиХранилище);
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_4_6

Процедура ПереходНаВерсию_3_1_4_6_ОбновитьВидГруппКанбанДоски() Экспорт
    
    Запрос = Новый Запрос();
    Запрос.Текст =
        "ВЫБРАТЬ
        |   ГруппыКанбанДоски.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.ГруппыКанбанДоски КАК ГруппыКанбанДоски
        |ГДЕ
        |   ГруппыКанбанДоски.ВидГруппы = ЗНАЧЕНИЕ(Перечисление.ВидыГруппКанбанДоски.ПустаяСсылка)";
    
    Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
        
        Попытка
        	ГруппаОбъект = Выборка.Ссылка.ПолучитьОбъект();
            ГруппаОбъект.ВидГруппы = Перечисления.ВидыГруппКанбанДоски.Этапы;
            ГруппаОбъект.Записать();
        Исключение
        КонецПопытки;
        
    КонецЦикла; 
    
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_4_6_ПеренестиДвиженияДокументаИнвентаризация() Экспорт
	
	// Перенос движений по регистру Остатки.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Остатки.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.Остатки КАК Остатки
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Остатки.Регистратор) = ТИП(Документ.Инвентаризация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Остатки.Регистратор.Дата";
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	СоответствиеДокументов  = Новый Соответствие;	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.Остатки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		НаборЗаписей.Прочитать();
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		
		Корректировка = СоответствиеДокументов.Получить(ВыборкаДетальныеЗаписи.Регистратор);
		Если Корректировка = Неопределено Тогда
			Корректировка = НовыйКорректировкаРегистров(ВыборкаДетальныеЗаписи.Регистратор);			
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаДвижений Цикл
			Строка.Регистратор = Корректировка;
		КонецЦикла;
		
		НовыйНаборЗаписей = РегистрыНакопления.Остатки.СоздатьНаборЗаписей();
		НовыйНаборЗаписей.Загрузить(ТаблицаДвижений);
		НовыйНаборЗаписей.Отбор.Регистратор.Установить(Корректировка);
		НовыйНаборЗаписей.Записать(Истина);
		
		СоответствиеДокументов.Вставить(ВыборкаДетальныеЗаписи.Регистратор, Корректировка);
		
	КонецЦикла;
	
	// Перенос движений по регистру СостоянияКарточекНоменклатуры.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СостояниеКарточекНоменклатуры.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СостояниеКарточекНоменклатуры КАК СостояниеКарточекНоменклатуры
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СостояниеКарточекНоменклатуры.Регистратор) = ТИП(Документ.Инвентаризация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостояниеКарточекНоменклатуры.Регистратор.Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СостояниеКарточекНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		НаборЗаписей.Прочитать();
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		
		Корректировка = СоответствиеДокументов.Получить(ВыборкаДетальныеЗаписи.Регистратор);
		Если Корректировка = Неопределено Тогда
			Корректировка = НовыйКорректировкаРегистров(ВыборкаДетальныеЗаписи.Регистратор);			
		КонецЕсли;	
		
		Для Каждого Строка Из ТаблицаДвижений Цикл
			Строка.Регистратор = Корректировка;
		КонецЦикла;
		
		НовыйНаборЗаписей = РегистрыСведений.СостояниеКарточекНоменклатуры.СоздатьНаборЗаписей();
		НовыйНаборЗаписей.Загрузить(ТаблицаДвижений);
		НовыйНаборЗаписей.Отбор.Регистратор.Установить(Корректировка);
		НовыйНаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйКорректировкаРегистров(Знач Основание)
	
	ДокументОбъект	= Документы.КорректировкаРегистров.СоздатьДокумент();
	ДокументОбъект.Комментарий = СтрШаблон(НСтр("ru = 'Движения документа %1. Создан автоматически.'"), 
		Строка(Основание));
	
	НоваяСтрока 		= ДокументОбъект.ТаблицаРегистров.Добавить();
	НоваяСтрока.Имя		= "Остатки";
	
	НоваяСтрока 		= ДокументОбъект.ТаблицаРегистров.Добавить();
	НоваяСтрока.Имя		= "СостояниеКарточекНоменклатуры";
	
	ДокументОбъект.Дата = Основание.Дата;
	ДокументОбъект.Записать();	
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область _3_1_5_1

Процедура ПереходНаВерсию_3_1_5_1_ОбновитьНастройкиПочты() Экспорт
    
    Константы.УчетнаяЗаписьЭлектроннойПочтыПоУмолчанию.Установить(
    	Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты);
    
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_5_1_ОбновитьИсполнителейЗаданий(Параметры) Экспорт
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
        |   Задание.Ссылка КАК Ссылка,
        |   Задание.Проведен КАК Проведен,
        |   Задание.Этапы.(
        |       Ссылка КАК Ссылка,
        |       НомерСтроки КАК НомерСтроки,
        |       Этап КАК Этап,
        |       УдалитьИсполнитель КАК Исполнитель,
        |       ДатаНачала КАК ДатаНачала,
        |       ДатаОкончания КАК ДатаОкончания
        |   ) КАК Этапы
        |ИЗ
        |   Документ.Задание КАК Задание
        |ГДЕ
        |   НЕ Задание.Ссылка В
        |               (ВЫБРАТЬ
        |                   ЗаданиеИсполнители.Ссылка КАК Ссылка
        |               ИЗ
        |                   Документ.Задание.Исполнители КАК ЗаданиеИсполнители)
        |
        |УПОРЯДОЧИТЬ ПО
        |   Задание.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	КоличествоОшибок = 0;
	Обработано       = 0;	
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийДокумент = Выборка.Ссылка;		
		Попытка
			
			ЗаполнитьИсполнителейЗаданий(ТекущийДокумент, Выборка);
			Обработано = Обработано + 1;
			
		Исключение
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить реквизиты документа %1 по причине %2'"), 
					ТекущийДокумент, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение, ТекущийДокумент.Метаданные(), ТекущийДокумент, 
				ТекстСообщения);
				
			КоличествоОшибок = КоличествоОшибок + 1;
			
		КонецПопытки;		
	КонецЦикла;	
	
	Если Обработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""ЗаполнитьИсполнителейЗаданий"" не удалось обработать некоторые документы (пропущены): %1'"), 
				КоличествоОшибок);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Процедура ""ЗаполнитьИсполнителейЗаданий"" обработала очередную порцию документов: 100'"));
		
КонецПроцедуры

Процедура ЗаполнитьИсполнителейЗаданий(Знач ТекущийДокумент, Знач Выборка)
	
	Блокировка 		  = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ТекущийДокумент.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущийДокумент);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Об = ТекущийДокумент.ПолучитьОбъект();
		Если Об <> Неопределено Тогда
                        
			Этапы = Выборка.Этапы.Выбрать();
            Пока Этапы.Следующий() Цикл
                ЗаполнитьЗначенияСвойств(Об.Исполнители.Добавить(), Этапы);
            КонецЦикла;
            
            Об.Исполнители.Сортировать("ДатаНачала");
            Если Об.Исполнители.Количество() > 1 Тогда
                Индекс = Об.Исполнители.Количество() - 2;
                Пока Индекс >= 0 И Об.Исполнители.Количество() > 1 Цикл
                    Строки1 = Об.Исполнители[Индекс];
                    Строки2 = Об.Исполнители[Индекс + 1];
                    
                    Если Строки1.Исполнитель = Строки2.Исполнитель Тогда
                        Строки1.ДатаОкончания = Строки2.ДатаОкончания;
                        Об.Исполнители.Удалить(Индекс + 1);
                    КонецЕсли;
                    
                    Индекс = Индекс - 1;
                КонецЦикла;
            КонецЕсли;
            
            Если Об.Исполнители.Количество() = 0 Тогда
                НоваяСтрока                 = Об.Исполнители.Добавить();
                НоваяСтрока.Исполнитель     = Об.ТекущийИсполнитель;
                НоваяСтрока.ДатаНачала      = Об.ДатаСоздания;
                НоваяСтрока.ДатаОкончания   = ?(Об.Выполнено, Об.ДатаВыполнения, Дата(1, 1, 1));
            КонецЕсли;
            			
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.ОбменДанными.Загрузка = Истина;
			Об.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

#КонецОбласти

#Область _3_1_6_1

Процедура ПереходНаВерсию_3_1_6_1_ОбновитьКанбан() Экспорт
	
	Константы.ДлительностьСпринтаПоУмолчанию.Установить(14);
	
	// Обновляем оформление канбан-досок.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КанбанДоски.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КанбанДоски КАК КанбанДоски
		|ГДЕ
		|	КанбанДоски.ТипФона = ЗНАЧЕНИЕ(Перечисление.ТипФонаКанбанДоски.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Об.ТипФона = Перечисления.ТипФонаКанбанДоски.ЦветФона;
			Об.ЦветФона = "#FAFAFA";
			Об.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	// Обновляем группы канбан-досок.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГруппыКанбанДоски.Ссылка КАК Ссылка,
		|	ГруппыКанбанДоски.ЦветТекста КАК ЦветТекста
		|ИЗ
		|	Справочник.ГруппыКанбанДоски КАК ГруппыКанбанДоски";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(СокрЛП(Выборка.ЦветТекста)) Тогда
			Попытка
				Об = Выборка.Ссылка.ПолучитьОбъект();
				Об.ЦветТекста = "#666666";
				Об.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_6_2

Процедура ПереходНаВерсию_3_1_6_2_ОбновитьКодыTelegram() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	TelegramПользователи.Ссылка КАК Ссылка,
		|	TelegramПользователи.Код КАК Код
		|ИЗ
		|	Справочник.TelegramПользователи КАК TelegramПользователи";		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Пропускаем те, которые уже созданы.
		Если СтрНайти(Выборка.Код, " ") > 0 Тогда
			Продолжить;
		КонецЕсли;
				
		НачатьТранзакцию();
		Попытка
			КодСтр = Формат(Число(Выборка.Код), "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
		
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Об.Код = КодСтр;
			Об.Записать();			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_6_2_ОбновитьОценкиЗаданий() Экспорт
	
	Константы.СпособУстановкиОценкиЗаданияВПисьме.Установить(
		Перечисления.СпособУстановкиОценкиЗаданияВПисьме.ЧерезЛичныйКабинет);
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОценкиЗаданий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОценкиЗаданий КАК ОценкиЗаданий
		|ГДЕ
		|	ОценкиЗаданий.ВнешнийВидОценки = Значение(Перечисление.ВнешнийВидОценки.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
						
		НачатьТранзакцию();
		Попытка
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Об.ВнешнийВидОценки = Перечисления.ВнешнийВидОценки.ТолькоТекст;
			Об.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_6_2_ОбновитьДобавленныеСвойства() Экспорт
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ГруппыЗаданий");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Проекты");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Спринты");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Тарифы");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Услуги");
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_7_1

Процедура ПереходНаВерсию_3_1_7_1_ОбновлениеПравилСобытий() Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаСобытий КАК ПравилаСобытий
		|ГДЕ
		|	ПравилаСобытий.ЭтоГруппа = ЛОЖЬ
		|	И ПравилаСобытий.ПроверкаИспользуетСКД = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Спр = Выборка.Ссылка.ПолучитьОбъект();
			Спр.ПроверкаИспользуетСКД = Истина;
			Спр.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_7_1_ОбновлениеПустыхАдресовЭлектроннойПочтыКИ() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("КонтактныеЛица");
	Массив.Добавить("Контрагенты");
	Массив.Добавить("Организации");
	Массив.Добавить("Подразделения");
	Массив.Добавить("Пользователи");
	Массив.Добавить("Сотрудники");
	Массив.Добавить("ФизическиеЛица");
	Массив.Добавить("ПотенциальныеКлиенты");
	
	мАдресЭлектроннойПочты = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	Запрос = Новый Запрос();
	Для Каждого Спр Из Массив Цикл
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Спр.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник." + Спр + ".КонтактнаяИнформация КАК Спр
			|ГДЕ
			|	Спр.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл			
			НачатьТранзакцию();
			Попытка
				
				Об = Выборка.Ссылка.ПолучитьОбъект();				
				КИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Ссылка, , , Ложь);
				
				Для Каждого Строки Из КИ Цикл
					Если Строки.Тип = мАдресЭлектроннойПочты Тогда
						УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Об, Строки.Представление, 
							Строки.Вид, , Истина);
					КонецЕсли;
				КонецЦикла;
				
				Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
				Об.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
			    ОтменитьТранзакцию();
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_7_2

Процедура ПереходНаВерсию_3_1_7_2_ОбновлениеПроектов() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Спр = Выборка.Ссылка.ПолучитьОбъект();
			Спр.ЦветТекста 	= "#000000";
			Спр.ЦветФона 	= "#FFFFFF";
			Спр.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Спр.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_7_5

Процедура ПереходНаВерсию_3_1_7_5_ОбновлениеИзображенийНоменклатуры() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.УдалитьКартинка КАК УдалитьКартинка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.УдалитьКартинка ЕСТЬ NULL
		|	И Номенклатура.ФайлКартинки = ЗНАЧЕНИЕ(Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыФайла 						= РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыФайла.ВладелецФайлов 		= Выборка.Ссылка;
		ПараметрыФайла.ИмяБезРасширения 	= НСтр("ru = 'Изображение'");
		ПараметрыФайла.РасширениеБезТочки 	= "png";
		
		НачатьТранзакцию();
		Попытка
			АдресКартинки = "";
			ДД = Выборка.УдалитьКартинка.Получить();
			Если ДД <> Неопределено Тогда
				Если ТипЗнч(ДД) = Тип("ДвоичныеДанные") Тогда
					АдресКартинки = ПоместитьВоВременноеХранилище(ДД);
				Иначе
					ДД = ДД.ПолучитьДвоичныеДанные();
					Если ДД <> Неопределено Тогда
						АдресКартинки = ПоместитьВоВременноеХранилище(ДД);
					КонецЕсли;
				КонецЕсли;							
			КонецЕсли;		
			
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Если НЕ ПустаяСтрока(АдресКартинки) Тогда
				Об.ФайлКартинки = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресКартинки);
			КонецЕсли;
			Об.УдалитьКартинка	= Неопределено;
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_7_5_ОбновлениеИзображенийФизическихЛиц() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка,
		|	ФизическиеЛица.УдалитьКартинка КАК УдалитьКартинка,
		|	ФизическиеЛица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.УдалитьКартинка ЕСТЬ NULL
		|	И ФизическиеЛица.ФайлКартинки = ЗНАЧЕНИЕ(Справочник.ФизическиеЛицаПрисоединенныеФайлы.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыФайла 						= РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыФайла.ВладелецФайлов 		= Выборка.Ссылка;
		ПараметрыФайла.ИмяБезРасширения 	= СтрШаблон(НСтр("ru = 'Фото %1'"), 
			СтрЗаменить(СокрЛП(Выборка.Наименование), ".", ""));
		ПараметрыФайла.РасширениеБезТочки 	= "png";
		
		НачатьТранзакцию();
		Попытка
			АдресКартинки = "";
			ДД = Выборка.УдалитьКартинка.Получить();
			Если ДД <> Неопределено Тогда
				Если ТипЗнч(ДД) = Тип("ДвоичныеДанные") Тогда
					АдресКартинки = ПоместитьВоВременноеХранилище(ДД);
				Иначе
					ДД = ДД.ПолучитьДвоичныеДанные();
					Если ДД <> Неопределено Тогда
						АдресКартинки = ПоместитьВоВременноеХранилище(ДД);
					КонецЕсли;
				КонецЕсли;							
			КонецЕсли;		
			
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Если НЕ ПустаяСтрока(АдресКартинки) Тогда
				Об.ФайлКартинки = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресКартинки);
			КонецЕсли;
			Об.УдалитьКартинка	= Неопределено;
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_7_5_ИспользоватьУправлениеПроектами() Экспорт
	
	Константы.ИспользоватьУправлениеПроектами.Установить(Истина);
	
	// Перенос всех проектов в корень.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Родитель <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Спр = Выборка.Ссылка.ПолучитьОбъект();
			Спр.Родитель 	= Справочники.Проекты.ПустаяСсылка();
			Спр.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Спр.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_7_7

Процедура ПереходНаВерсию_3_1_7_7_ОбновлениеМаркеровЗакрытия() Экспорт
	
	Маркеры = Константы.МаркерыОкончанияЭлектронныхПисемЗадания.Получить();
	Если СтрНайти(Маркеры, "Отправлено из Mail.ru для Android") = 0 Тогда
		Константы.МаркерыОкончанияЭлектронныхПисемЗадания.Установить(Маркеры + Символы.ПС 
			+ "Отправлено из Mail.ru для Android");
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область _3_1_7_8

Процедура ПереходНаВерсию_3_1_7_8_ЗаполнениеКонтактныхЛиц() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Об.Актуальность = Истина;
		
		Попытка
			Об.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
			Об.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаВерсию_3_1_7_8_ОбновитьTelegram() Экспорт
	
	TelegramСервер.ЗаполнитьНастройкиTelegramПоУмолчанию(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_7_9

Процедура ПереходНаВерсию_3_1_7_9_ОбновитьЕжедневныеОтчеты() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕжедневныйОтчет.Ссылка,
		|	ЕжедневныйОтчет.Проведен
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|ГДЕ
		|	ЕжедневныйОтчет.ПометкаУдаления = ЛОЖЬ
		|	И ЕжедневныйОтчет.УдалитьВремяНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		
	мПустаяСсылка = Документы.Задание.ПустаяСсылка();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка		
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Об.УдалитьВремяНачала = Дата(1, 1, 1);
			Об.УдалитьВремяОкончания = Дата(1, 1, 1);
			Для Каждого Строки Из Об.Работы Цикл
				Если ТипЗнч(Строки.Источник) <> Тип("ДокументСсылка.Задание") 
					И ТипЗнч(Строки.Источник) <> Тип("СправочникСсылка.Проекты") Тогда						
					Строки.Источник = мПустаяСсылка;						
				КонецЕсли;
			КонецЦикла;
			Об.Записать(?(Выборка.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_8_0

Процедура ПереходНаВерсию_3_1_8_0_ОбновитьЕжедневныеОтчеты() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕжедневныйОтчет.Ссылка
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|ГДЕ
		|	ЕжедневныйОтчет.Проведен = Истина";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка		
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Об.Записать(?(Выборка.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область _3_1_8_3

Процедура ПереходНаВерсию_3_1_8_3_ОбновитьНастройкиЛичногоКабинета() Экспорт
	
	Справочники.ЛичныйКабинет.ЗаполнитьСтраницыЛичногоКабинетаПриПервоначальномЗаполнении();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти