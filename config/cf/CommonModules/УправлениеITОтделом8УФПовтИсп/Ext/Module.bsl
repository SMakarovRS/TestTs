//////////////////////////////////////////////////////////////////////////////// 
// Управление IT-отделом 8.
//
//////////////////////////////////////////////////////////////////////////////// 

#Область ПрограммныйИнтерфейс

#Область Маркеры

// Возвращает маркеры для выполнения заданий.
//
// Возвращаемое значение:
//   Массив - массив строк.
//
Функция МассивМаркеровВыполнения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Массив = Новый Массив;
	
	Если Константы.ИспользованиеВыполнениеЗаданияПоТекстовымФразамВСообщениях.Получить() = Истина Тогда
		
		Маркеры = Константы.МаркерыВыполненияЗадания.Получить();
		Для Индекс = 1 По СтрЧислоСтрок(Маркеры) Цикл
			Маркер = СокрЛП(СтрПолучитьСтроку(Маркеры, Индекс));
			Если НЕ ПустаяСтрока(Маркер) Тогда
				Массив.Добавить(Маркер);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

// Возвращает маркеры окончания текста задания, после которого необходимо обрезать текст.
//
// Возвращаемое значение:
//   Массив - массив строк.
//
Функция МассивМаркеровОкончанияЭлектронногоПисьма() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Массив = Новый Массив;
	
	Маркеры = Константы.МаркерыОкончанияЭлектронныхПисемЗадания.Получить();
	Для Индекс = 1 По СтрЧислоСтрок(Маркеры) Цикл
		Маркер = СокрЛП(СтрПолучитьСтроку(Маркеры, Индекс));
		Если НЕ ПустаяСтрока(Маркер) Тогда
			Массив.Добавить(Маркер);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Возвращает маркеры срока задания.
//
// Возвращаемое значение:
//   Массив - массив строк.
//
Функция МассивМаркеровУстановкиСрока() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Массив = Новый Массив;
	
	Маркеры = Константы.МаркерыУстановкиСрокаЗадания.Получить();
	Для Индекс = 1 По СтрЧислоСтрок(Маркеры) Цикл
		Маркер = СокрЛП(СтрПолучитьСтроку(Маркеры, Индекс));
		Если НЕ ПустаяСтрока(Маркер) Тогда
			Массив.Добавить(Маркер);
		КонецЕсли;
	КонецЦикла;
		
	Возврат Массив;
	
КонецФункции

// Возвращает маркеры окончания номера задания.
//
// Возвращаемое значение:
//   Массив - массив строк.
//
Функция МассивМаркеровОкончанияНомераЗадания() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(" ");
	Массив.Добавить(".");
	Массив.Добавить(",");
	Массив.Добавить(")");
	Массив.Добавить("(");
	Массив.Добавить("[");
	Массив.Добавить("]");
	Массив.Добавить("{");
	Массив.Добавить("}");
	Массив.Добавить(":");
	Массив.Добавить(";");
	Массив.Добавить("<");
	Массив.Добавить(">");
	
	Возврат Массив;
	
КонецФункции

// Возвращает маркеры начала номера задания.
//
// Возвращаемое значение:
//   Массив - массив строк.
//
Функция МассивМаркеровНачалаНомераЗадания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Массив = Новый Массив;
	
	Маркеры = Константы.МаркерыНомераЗаданияВТемеЭлектронныхПисемПриОтвете.Получить();
	Для Индекс = 1 По СтрЧислоСтрок(Маркеры) Цикл
		Маркер = СокрЛП(СтрПолучитьСтроку(Маркеры, Индекс));
		Если НЕ ПустаяСтрока(Маркер) Тогда
			Массив.Добавить(Маркер);
		КонецЕсли;
	КонецЦикла;
	
	Если Массив.Количество() = 0 Тогда
		Массив.Добавить("ID#");
	КонецЕсли;
		
	Возврат Массив;
	
КонецФункции

// Возвращает маркеры начала номера комментария.
//
// Возвращаемое значение:
//   Массив - массив строк.
//
Функция МассивМаркеровНачалаНомераКомментария() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Массив = Новый Массив;
	
	Маркеры = Константы.МаркерыНомераКомментарияВТемеЭлектронныхПисем.Получить();
	Для Индекс = 1 По СтрЧислоСтрок(Маркеры) Цикл
		Маркер = СокрЛП(СтрПолучитьСтроку(Маркеры, Индекс));
		Если НЕ ПустаяСтрока(Маркер) Тогда
			Массив.Добавить(Маркер);
		КонецЕсли;
	КонецЦикла;
	
	Если Массив.Количество() = 0 Тогда
		Массив.Добавить("IDC#");
	КонецЕсли;
		
	Возврат Массив;
	
КонецФункции	

#КонецОбласти

// Работает аналогично системному методу РольДоступна, но за тем исключением,
// что работает в правязке не к аутентификации, а к справочнику Пользователи.
//
// Параметры:
//	Роль - Строка, Роль - роль строкой в конфигураторе.
//
// Возвращаемое значение:
// 	Булево - Истина, если РольДоступна(Роль)
//	
Функция Право(Знач Роль) Экспорт
	
	Возврат ПравоПользователя(Роль, Пользователи.ТекущийПользователь());
	
КонецФункции

// Проверят доступность роли для пользователя.
// Работает аналогично системному методу РольДоступна, но за тем исключением,
// что работает в правязке не к аутентификации, а к справочнику Пользователи.
//
// Параметры:
//	Роль - Строка, Роль - роль строкой в конфигураторе.
//	Пользователь - СправочникСсылка.Пользователи - пользователь, для которого надо проверить доступность.
//
// Возвращаемое значение:
//  Булево - Истина, если РольДоступна(Роль)
//	
Функция ПравоПользователя(Знач Роль, Знач Пользователь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяПользователя = Пользователь.Наименование;
	НайденныйПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Если НайденныйПользователь <> Неопределено Тогда 
				
		Если ТипЗнч(Роль) = Тип("Строка") Тогда
			РольПользователя = Метаданные.Роли.Найти(Роль);
		Иначе
			РольПользователя = Роль;
		КонецЕсли;
		
		Возврат НайденныйПользователь.Роли.Содержит(РольПользователя);
		
	КонецЕсли;
	
	Возврат РольДоступна(Роль);
	
КонецФункции

// Возвращает весы приоритетов.
//
// Возвращаемое значение:
//	Соответствие - результат весов приоритетов.
//
Функция ВесПриоритетовЗадания() Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.ПриоритетЗадания.Критический, 
		Константы.ВесКритическогоПриоритетаЗадания.Получить());
	Соответствие.Вставить(Перечисления.ПриоритетЗадания.Высокий, 
		Константы.ВесВысокогоПриоритетаЗадания.Получить());
	Соответствие.Вставить(Перечисления.ПриоритетЗадания.Средний, 
		Константы.ВесСреднегоПриоритетаЗадания.Получить());
	Соответствие.Вставить(Перечисления.ПриоритетЗадания.Низкий, 
		Константы.ВесНизкогоПриоритетаЗадания.Получить());
	Соответствие.Вставить(Перечисления.ПриоритетЗадания.ОченьНизкий, 
		Константы.ВесОченьНизкогоПриоритетаЗадания.Получить());
	
	Возврат Соответствие;
	
КонецФункции

// Функция возвращает признак использования торгового оборудования.
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Булево - можно ли использовать подключаемое оборудование или нет.
//
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	 Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование")
		   И ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	 
КонецФункции // ИспользоватьПодключаемоеОборудование()

// Функция возвращает ставку НДС - Без НДС.
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	СправочникСсылка.СтавкиНДС - ставка ставку "Без НДС".
//
Функция ПолучитьСтавкуНДСБезНДС() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Ставка = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСтавкуНДСБезНДС()

// Функция возвращает ставку НДС - Ноль.
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	СправочникСсылка.СтавкиНДС - ставка ставку "НДС 0%".
//
Функция ПолучитьСтавкуНДСНоль() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	(НЕ СтавкиНДС.НеОблагается)
		|	И СтавкиНДС.Ставка = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСтавкуНДСНоль()

// Получить значение ставки НДС.
//
// Параметры:
//	СтавкаНДС - СправочникСсылка.СтавкиНДС - ставка НДС.
//
// Возвращаемое значение:
//	Число - значение ставки НДС.
//
Функция ПолучитьЗначениеСтавкиНДС(СтавкаНДС) Экспорт
	
	Возврат ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС.Ставка, 0);

КонецФункции // ПолучитьЗначениеСтавкиНДС()

// Возвращает основной процесс.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка.Процессы - основной процесс в конфигурации.
//
Функция ПолучитьОсновнойПроцесс() Экспорт
	
	Возврат Константы.ОсновнойПроцесс.Получить();
	
КонецФункции

// Основная организация.
Функция ПолучитьОсновнуюОрганизацию() Экспорт
	
	Возврат Константы.ОсновнаяОрганизация.Получить();
	
КонецФункции

// Основное место ремонта.
Функция ПолучитьОсновноеМестоОбслуживанияРемонта() Экспорт
	
	Возврат Константы.ОсновноеМестоОбслуживанияРемонта.Получить();
	
КонецФункции

// Основная валюта.
Функция ПолучитьОсновнуюВалюту() Экспорт
	
	Возврат Константы.НациональнаяВалюта.Получить();
	
КонецФункции

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы.
//  Настройка    - признак, для которого возвращается значение по умолчанию.
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Знач Пользователь, Знач Настройка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрЗначениеПрав.Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
		|ГДЕ
		|	РегистрЗначениеПрав.Пользователь = &Пользователь
		|	И РегистрЗначениеПрав.Настройка = &Настройка";

	Выборка = Запрос.Выполнить().Выбрать();

	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();

	Если Выборка.Количество() = 0 Тогда
		
		Возврат ПустоеЗначение;

	ИначеЕсли Выборка.Следующий() Тогда

		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;

	Иначе
		Возврат ПустоеЗначение;

	КонецЕсли;

КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - признак, для которого возвращается значение по умолчанию.
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеНастройки(Знач Настройка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрЗначениеПрав.Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
		|ГДЕ
		|	РегистрЗначениеПрав.Пользователь = &Пользователь
		|	И РегистрЗначениеПрав.Настройка = &Настройка";

	Выборка = Запрос.Выполнить().Выбрать();

	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();

	Если Выборка.Количество() = 0 Тогда
		
		Возврат ПустоеЗначение;

	ИначеЕсли Выборка.Следующий() Тогда

		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;

	Иначе
		Возврат ПустоеЗначение;

	КонецЕсли;

КонецФункции // ПолучитьЗначениеНастройки()

// Возвращает Истина или Ложь - указанная настройка пользователя находится в шапке.
//
// Параметры:
//  Настройка    - признак, для которого возвращается значение по умолчанию.
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция РеквизитВШапке(Знач Настройка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрЗначениеПрав.Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
		|ГДЕ
		|	РегистрЗначениеПрав.Пользователь = &Пользователь
		|	И РегистрЗначениеПрав.Настройка = &Настройка";

	Выборка = Запрос.Выполнить().Выбрать();

	ЗначениеПоУмолчанию = Истина;

	Если Выборка.Количество() = 0 Тогда
		
		Возврат ЗначениеПоУмолчанию;

	ИначеЕсли Выборка.Следующий() Тогда

		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ЗначениеПоУмолчанию;
		Иначе
			Возврат Выборка.Значение = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;

	Иначе
		
		Возврат ЗначениеПоУмолчанию;

	КонецЕсли;

КонецФункции // РеквизитВШапке()

// Получить навигационную ссылку в зависимости от номенклатуры.
Функция ПолучитьНавСсылкуНоменклатуры(Знач Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(Номенклатура.ВидНоменклатуры) Тогда
		Возврат Номенклатура.ВидНоменклатуры.НавСсылка;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает Истина/Ложь если ведется учет по карточкам по той или иной номенклатуре.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура	 - проверяемая номенклатура.
// 
// Возвращаемое значение:
//  Булево - Истина/Ложь если ведется учет по карточкам.
//
Функция ВестиУчетПоКарточкамНоменклатуры(Знач Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает если необходимо для номенклатуры Карточку номенклатуры "<Не ведется учет по карточкам>".
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура	 - номенклатура, которую проверяем.
// 
// Возвращаемое значение:
//  СправочникСсылка.КарточкиНоменклатуры - системная карточка с наименованием "<Не ведется учет по карточкам>".
//
Функция ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Знач Номенклатура) Экспорт
	
	Если Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
		Возврат Справочники.КарточкиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	мНеВедетсяУчетПоКарточкам = "<" + НСтр("ru = 'Не ведется учет по карточкам'") + ">";
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КарточкиНоменклатуры.Ссылка,
		|	КарточкиНоменклатуры.Наименование
		|ИЗ
		|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
		|ГДЕ
		|	КарточкиНоменклатуры.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Наименование <> мНеВедетсяУчетПоКарточкам Тогда
			Элемент 				= Выборка.Ссылка.ПолучитьОбъект();
			Элемент.Наименование 	= мНеВедетсяУчетПоКарточкам;
			Элемент.Записать();			
		КонецЕсли;
		
		Возврат Выборка.Ссылка;
	Иначе
		// Не найдено создаем.
		НовыйЭлемент 				= Справочники.КарточкиНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Владелец 		= Номенклатура;
		НовыйЭлемент.Наименование 	= мНеВедетсяУчетПоКарточкам;
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
	КонецЕсли;
	
КонецФункции

// Функция - Номенклатура может иметь комплектующие.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура	 - номенклатура, которую проверяем.
// 
// Возвращаемое значение:
//  Булево - Истина/Ложь если Номенклатура может иметь комплектующи.
//
Функция НоменклатураМожетИметьКомплектующие(Знач Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура.ВидНоменклатуры.МожетИметьКомплектующие;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получает национальную валюту по умолчанию.
// 
// Возвращаемое значение:
//  СправочникСсылка.Валюты - в чем ведем учет.
//
Функция ПолучитьНациональнуюВалюту() Экспорт	
	
	Возврат Константы.НациональнаяВалюта.Получить();
	
КонецФункции

// Возвращает значение константы ПроверятьУникальностьИнвентарногоНомера.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево - значение константы
//
Функция ПроверятьУникальностьИнвентарногоНомера() Экспорт
	
	Возврат Константы.ПроверятьУникальностьИнвентарногоНомера.Получить();
	
КонецФункции

// Возвращает значение константы ПроверятьУникальностьСерийногоНомера.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево - значение константы
//
Функция ПроверятьУникальностьСерийногоНомера() Экспорт
	
	Возврат Константы.ПроверятьУникальностьСерийногоНомера.Получить();
	
КонецФункции

// Функция - Получить константу
//
// Параметры:
//  Имя	 - Строка - Имя константы
// 
// Возвращаемое значение:
//  Произвольное - Значение константы
//
Функция ПолучитьКонстанту(Знач Имя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы[Имя].Получить();
	
КонецФункции

// Возвращает типы подключенного оборудования.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив, Неопределено - массив типов подключенного оборудования или Неопределено если пусто.
//
Функция ТипыПодключенногоОборудования() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
			|ИЗ
			|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
			|ГДЕ
			|	ПодключаемоеОборудование.УстройствоИспользуется
			|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто";
		
		Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
		
		Результат = Запрос.Выполнить();
		
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("ТипОборудования");
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Контанта выражение представление места хранения.
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Строка - выражение.
//
Функция ВыражениеПредставленияМестаХранения() Экспорт
	
	Возврат Константы.ВыражениеПредставленияМестаХранения.Получить();
	
КонецФункции

// Получает версию, которая находится во внешней компоненте
Функция ПолучитьВерсиюИнтегрированнойКомпоненты(Знач ИмяВК) Экспорт
	
	Если ИмяВК = "UniNative" Тогда
		Возврат "1.0.1.1";
	КонецЕсли;
	
КонецФункции

// В зависимости от того демо версия или нет возвращает ИСТИНА или ЛОЖЬ.
// 
// Возвращаемое значение:
//  Булево - Истина, если демо-версия.
//
Функция ЭтоДемоВерсия() Экспорт
	
	ВладелецЛицензии = ВРег(СокрЛП(УправлениеITОтделом8УФ.ВладелецЛицензии()));
	ВладелецЛицензии = СтрЗаменить(ВладелецЛицензии, " ", "");
	ВладелецЛицензии = СтрЗаменить(ВладелецЛицензии, "-", "");
	Возврат (ВладелецЛицензии = "ДЕМО") ИЛИ (ВладелецЛицензии = "ДЕМОВЕРСИЯ");
	
КонецФункции // ЭтоДемоВерсия()

// Проверяет, ведется ли учет остатков по контрагентам.
Функция ВедетсяСкладскойУчетКлиентов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.СкладскойУчетКлиентов.Получить();
	
КонецФункции	

// Ведется ли учет остатков по контрагентам или нет.
//
// Параметры:
//	Контрагент - СправочникСсылка.Органиазции или СправочникСсылка.Контрагенты - исходная ссылка.
//
// Возвращаемое значение:
//	Булево - Истина, если учет остатков ведется.
//
Функция ПоКонтрагентуВедетсяУчетОстатков(Знач Контрагент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Контрагент.УчетОстатков;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Используются ли статусы для номенклатуры или нет.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура для которой проверяем.
//
// Возвращаемое значение:
//	Булево - Истина, если исользуются, иначе Ложь.
//
Функция ДляКарточкиНоменклатурыИспользуютсяСтатусы(Знач Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура.ВидНоменклатуры.МожетИметьСтатус;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Используется ли ведение истории изменения статусов для номенклатуры или нет.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура для которой проверяем.
//
// Возвращаемое значение:
//	Булево - Истина, если ведется, иначе Ложь.
//
Функция ДляКарточкиНоменклатурыВедетсяИсторияИзмененияСтатусов(Знач Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура.ВидНоменклатуры.ВестиИсториюИзмененияСтатусов;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает метаданные объекта по полному имени.
//
// Параметры:
//	ИмяМетаданных - Строка - имя метаданных.
//
// Возвращаемое значение:
//	Метаданные
//
Функция МетаданныеНайтиПоПолномуИмени(Знач ИмяМетаданых) Экспорт

	Возврат Метаданные.НайтиПоПолномуИмени(ИмяМетаданых);

КонецФункции

// Возвращает массив организаций у которых есть ИНН из справочника Организации.
//
// Параметры:
//	ИНН - Строка - ИНН организации
//
// Возвращаемое значение:
//	Массив - перечисленные с данным ИНН организации
//
Функция МассивОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП,
		|	Организации.Наименование КАК Наименование,
		|	Организации.Предопределенный КАК Предопределенный
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
				
		// Найдено.
		Структура = Новый Структура("Ссылка, ИНН, КПП, Наименование, Предопределенный");
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
		Результат.Добавить(Структура);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает группы для текущего пользователя.
//
// Возвращаемое значение:
//	Массив - массив групп пользователя.
//
Функция ГруппыТекущегоПользователя() Экспорт
			
	Возврат УправлениеITОтделом8УФ.ГруппыТекущегоПользователя();
	
КонецФункции

// Возвращает массив состоящий из текущего пользователя и его групп.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи, Неопределено - пользователь по которому хотим получить информацию.
//				   Если передано "Неопределено", то возвращает информацию по текущему пользователю.
//
// Возвращаемое значение:
//	Массив - массив групп пользователя включая самого пользователя.
//
Функция ПользовательИЕгоГруппы(Знач Пользователь = Неопределено) Экспорт
	
	Массив = Новый Массив;
	
	Если Пользователь = Неопределено Тогда		
		Массив.Добавить(Пользователи.ТекущийПользователь());
		МассивГрупп = ГруппыТекущегоПользователя();		
	Иначе		
		Массив.Добавить(Пользователь);
		МассивГрупп = УправлениеITОтделом8УФ.ГруппыПользователя(Пользователь);
	КонецЕсли;
	
	Для Каждого Группа Из МассивГрупп Цикл
		Массив.Добавить(Группа);
	КонецЦикла;
	
	Возврат Массив;	
	
КонецФункции

// Возвращает список подчиненных сотрудников.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому хотим получить подчиненных сотрудников.
//	ДобавлятьПользователя - Булево - добавлять или нет самого пользователя, по умолчанию Истина.
//
// Возвращаемое значение:
//   Массив - массив пользователей.
//
Функция СписокПодчиненныхПользователей(Знач Пользователь, Знач ДобавлятьПользователя = Истина) Экспорт
	
	Результат = Новый Массив;
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОткрытыйСписок = Новый Массив();
	ОткрытыйСписок.Добавить(Пользователь);	
	
	Пока ОткрытыйСписок.Количество() > 0 Цикл
		
		Значение = ОткрытыйСписок[0];
		
		// Добавляем в результат.
		Если Результат.Найти(Значение) = Неопределено Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
		
		// Добавляем подчиненных.
		Для Каждого Строки Из Значение.Подчиненные Цикл
			// Добавляем в результат
			Если Результат.Найти(Строки.Подчиненный) = Неопределено Тогда
				Результат.Добавить(Строки.Подчиненный);
				ОткрытыйСписок.Добавить(Строки.Подчиненный);
			КонецЕсли;			
		КонецЦикла;
		
		// Удаляем нулевой элемент.
		ОткрытыйСписок.Удалить(0);
		
	КонецЦикла;
	
	// Удалим, если нужно текущего пользователя.
	Если ДобавлятьПользователя = Ложь Тогда
		Если Результат.Найти(Пользователь) <> Неопределено Тогда
			Результат.Удалить(Результат.Найти(Пользователь));
		КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
		
КонецФункции

// Возвращает список подчиненных физ.лиц/пользователей.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому хотим получить подчиненных сотрудников.
//	ДобавлятьСотрудника - Булево - добавлять или нет самого сотрудника, по умолчанию Истина.
//
// Возвращаемое значение:
//   Массив - массив физ.лиц/пользователей.
//
Функция СписокПодчиненныхСотрудников(Знач Пользователь, Знач ДобавлятьСотрудника = Истина) Экспорт
	
	Массив = УправлениеITОтделом8УФ.СписокПодчиненныхПользователей(Пользователь, ДобавлятьСотрудника);
	
	Результат = Новый Массив;
	Для Каждого Пользователь Из Массив Цикл
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Результат.Добавить(Пользователь);
			Если ЗначениеЗаполнено(Пользователь.ФизическоеЛицо) Тогда
				Результат.Добавить(Пользователь.ФизическоеЛицо);
			КонецЕсли;
			Если ЗначениеЗаполнено(Пользователь.Сотрудник) Тогда
				Результат.Добавить(Пользователь.Сотрудник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает учетную запись почты по умолчанию.
//
// Возвращаемое значение:
//	СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись.
//
Функция УчетнаяЗаписьЭлектроннойПочтыПоУмолчанию() Экспорт
    
    УстановитьПривилегированныйРежим(Истина);
    УчетнаяЗапись = Константы.УчетнаяЗаписьЭлектроннойПочтыПоУмолчанию.Получить();
    Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
        Возврат УчетнаяЗапись;
    КонецЕсли;
    
    Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
    
КонецФункции

#КонецОбласти