////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ СТРАНИЦ БАЗЫ ЗНАНИЙ

Функция ПолучитьДанныеГлавнойСтраницы(СтруктураКартинок, ПараметрыСсылки, ДопНастройки) Экспорт
	
	АдресаКартинок = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураКартинок Цикл		
		АдресаКартинок.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ПараметрыВыполнения	= Новый Структура;
	ПараметрыВыполнения.Вставить("ОснКартинки"	, АдресаКартинок);
	ПараметрыВыполнения.Вставить("ДопКартинки"	, Новый Массив);
	ПараметрыВыполнения.Вставить("ДопНастройки"	, ДопНастройки);
	
	ТекстСтраницы = БазаЗнанийHTML.ПолучитьКонтентГлавнойСтраницы(ПараметрыВыполнения);
	
	Возврат Новый Структура("Контент, Картинки, Заголовок",
		ТекстСтраницы,
		ПараметрыВыполнения.ДопКартинки,
		"База знаний (основная)");
	
КонецФункции

Функция ПолучитьДанныеСтраницыКатегория(СтруктураКартинок, ПараметрыСсылки, ДопНастройки) Экспорт
	
	АдресаКартинок = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураКартинок Цикл
		АдресаКартинок.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ИдентификаторСтатьи		= ПараметрыСсылки.id;
	УникальныйИдентификатор	= Новый УникальныйИдентификатор(ИдентификаторСтатьи);
	КатегорияСсылка			= Справочники.КатегорииБазыЗнаний.ПолучитьСсылку(УникальныйИдентификатор);
	
	ПараметрыВыполнения	= Новый Структура;
	ПараметрыВыполнения.Вставить("ОснКартинки"	, АдресаКартинок);
	ПараметрыВыполнения.Вставить("ДопКартинки"	, Новый Массив);
	ПараметрыВыполнения.Вставить("ДопНастройки"	, ДопНастройки);
	ПараметрыВыполнения.Вставить("Ссылка"		, КатегорияСсылка);
	
	ТекстСтраницы = БазаЗнанийHTML.ПолучитьКонтентКатегории(ПараметрыВыполнения);
	
	Возврат Новый Структура("Контент, Картинки, Заголовок",
		ТекстСтраницы,
		ПараметрыВыполнения.ДопКартинки,
		"Категория: " + Строка(КатегорияСсылка));
	
КонецФункции

Функция ПолучитьДанныеСтраницыСтатья(СтруктураКартинок, ПараметрыСсылки, ДопНастройки) Экспорт
		
	ИдентификаторСтатьи		= ПараметрыСсылки.id;
	УникальныйИдентификатор	= Новый УникальныйИдентификатор(ИдентификаторСтатьи);
	СтатьяСсылка			= Справочники.СтатьиБазыЗнаний.ПолучитьСсылку(УникальныйИдентификатор);
	
	ПараметрыВыполнения	= Новый Структура;	
	ПараметрыВыполнения.Вставить("ОснКартинки"	, СтруктураКартинок);		
	ПараметрыВыполнения.Вставить("ДопНастройки"	, ДопНастройки);
	ПараметрыВыполнения.Вставить("Ссылка"		, СтатьяСсылка);
	
	ТекстСтраницы = БазаЗнанийHTML.ПолучитьКонтентСтатьи(ПараметрыВыполнения);
	
	Возврат Новый Структура("Контент, Заголовок", ТекстСтраницы, "Статья: " + Строка(СтатьяСсылка));
	
КонецФункции

Функция ПолучитьДанныеСтраницыКлючевоеСлово(СтруктураКартинок, ПараметрыСсылки, ДопНастройки) Экспорт
	
	АдресаКартинок = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураКартинок Цикл
		АдресаКартинок.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ИдентификаторСлова		= ПараметрыСсылки.id;
	УникальныйИдентификатор	= Новый УникальныйИдентификатор(ИдентификаторСлова);
	КлючевоеСловоСсылка		= Справочники.Теги.ПолучитьСсылку(УникальныйИдентификатор);
	
	ИдентификаторКатегории	= ?(ПараметрыСсылки.Свойство("category"), ПараметрыСсылки.category, "");
	Если НЕ ПустаяСтрока(ИдентификаторКатегории) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторКатегории);
		КатегорияСсылка			= Справочники.КатегорииБазыЗнаний.ПолучитьСсылку(УникальныйИдентификатор);
	Иначе 
		КатегорияСсылка			= Неопределено;
	КонецЕсли;
	
	ПараметрыВыполнения	= Новый Структура;
	ПараметрыВыполнения.Вставить("ОснКартинки"	, АдресаКартинок);
	ПараметрыВыполнения.Вставить("ДопКартинки"	, Новый Массив);
	ПараметрыВыполнения.Вставить("ДопНастройки"	, ДопНастройки);
	ПараметрыВыполнения.Вставить("КлючевоеСлово", КлючевоеСловоСсылка);
	ПараметрыВыполнения.Вставить("Категория"	, КатегорияСсылка);
	
	ТекстСтраницы = БазаЗнанийHTML.ПолучитьКонтентКлючевогоСлова(ПараметрыВыполнения);
	
	Возврат Новый Структура("Контент, Картинки, Заголовок",
		ТекстСтраницы,
		ПараметрыВыполнения.ДопКартинки,
		"Ключевое слово: " + Строка(КлючевоеСловоСсылка));
	
КонецФункции

Функция ПолучитьДанныеСтраницыПоРейтингу(СтруктураКартинок, ПараметрыСсылки, ДопНастройки) Экспорт
		
	ПараметрыПоВиду = БазаЗнанийHTMLКлиентСервер.ПолучитьПараметрыВыводаСтраницыПоВиду(ПараметрыСсылки.name);
	
	// Страница = ?(ПараметрыСсылки.Свойство("target"), ПараметрыСсылки.target, "");
	// Если ПараметрыСсылки.Свойство("id") Тогда
	//	ИдентификаторСтатьи		= ПараметрыСсылки.id;
	//	УникальныйИдентификатор	= Новый УникальныйИдентификатор(ИдентификаторСтатьи);
	//	СтатьяСсылка 			= Справочники.СтатьиБазыЗнаний.ПолучитьСсылку(УникальныйИдентификатор);
	// Иначе 
	// 	СтатьяСсылка			= Неопределено;
	// КонецЕсли;
	
	НомерСтраницы = ?(ПараметрыСсылки.Свойство("pagenum"), ПараметрыСсылки.pagenum, 1);
	
	ПараметрыВыполнения	= Новый Структура;
	ПараметрыВыполнения.Вставить("ОснКартинки"	, СтруктураКартинок);
	ПараметрыВыполнения.Вставить("ДопКартинки"	, Новый Массив);
	ПараметрыВыполнения.Вставить("ДопНастройки"	, ДопНастройки);
	ПараметрыВыполнения.Вставить("ВидСтраницы"	, ПараметрыСсылки.name);
	ПараметрыВыполнения.Вставить("НомерСтраницы", НомерСтраницы);
	
	ТекстСтраницы = БазаЗнанийHTML.ПолучитьКонтентСтатьиПоРейтингу(ПараметрыВыполнения);
	
	Возврат Новый Структура("Контент, Картинки, Заголовок",
		ТекстСтраницы,
		ПараметрыВыполнения.ДопКартинки,
		ПараметрыПоВиду.Заголовок);
	
КонецФункции

Функция ПолучитьДанныеСтраницыПользователь(СтруктураКартинок, ПараметрыСсылки, ДопНастройки) Экспорт
	
	АдресаКартинок = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураКартинок Цикл
		АдресаКартинок.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ИдентификаторСтатьи		= ПараметрыСсылки.id;
	УникальныйИдентификатор	= Новый УникальныйИдентификатор(ИдентификаторСтатьи);
	ПользовательСсылка		= Справочники.Пользователи.ПолучитьСсылку(УникальныйИдентификатор);
	
	ПараметрыВыполнения	= Новый Структура;
	ПараметрыВыполнения.Вставить("ОснКартинки"	, АдресаКартинок);
	ПараметрыВыполнения.Вставить("ДопКартинки"	, Новый Массив);
	ПараметрыВыполнения.Вставить("ДопНастройки"	, ДопНастройки);
	ПараметрыВыполнения.Вставить("Пользователь"	, ПользовательСсылка);
	
	ТекстСтраницы = БазаЗнанийHTML.ПолучитьКонтентПрофиляПользователя(ПараметрыВыполнения);
	
	Возврат Новый Структура("Контент, Картинки, Заголовок",
		ТекстСтраницы,
		ПараметрыВыполнения.ДопКартинки,
		"Пользователь: " + Строка(ПользовательСсылка));
	
КонецФункции

Функция ПолучитьДанныеСтраницыНовостнаяЛента(СтруктураКартинок, ПараметрыСсылки, ДопНастройки) Экспорт
	
	АдресаКартинок = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураКартинок Цикл
		АдресаКартинок.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	НомерСтраницы = ?(ПараметрыСсылки.Свойство("pagenum"), ПараметрыСсылки.pagenum, 1);
	
	ПараметрыВыполнения	= Новый Структура;
	ПараметрыВыполнения.Вставить("ОснКартинки"	, АдресаКартинок);
	ПараметрыВыполнения.Вставить("ДопКартинки"	, Новый Массив);
	ПараметрыВыполнения.Вставить("ДопНастройки"	, ДопНастройки);
	ПараметрыВыполнения.Вставить("НомерСтраницы", НомерСтраницы);
	
	ТекстСтраницы = БазаЗнанийHTML.ПолучитьКонтентНовостнаяЛента(ПараметрыВыполнения);
	
	Возврат Новый Структура("Контент, Картинки, Заголовок",
		ТекстСтраницы,
		ПараметрыВыполнения.ДопКартинки,
		"Новостная лента");
	
КонецФункции

Функция ПолучитьДанныеСтраницыНовости(СтруктураКартинок, ПараметрыСсылки, ДопНастройки) Экспорт
	
	АдресаКартинок = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураКартинок Цикл
		АдресаКартинок.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ИдентификаторНовости	= ПараметрыСсылки.id;
	УникальныйИдентификатор	= Новый УникальныйИдентификатор(ИдентификаторНовости);
	НовостьСсылка			= Справочники.НовостиБазыЗнаний.ПолучитьСсылку(УникальныйИдентификатор);
		
	ПараметрыВыполнения	= Новый Структура;
	ПараметрыВыполнения.Вставить("ОснКартинки"	, АдресаКартинок);
	ПараметрыВыполнения.Вставить("ДопКартинки"	, Новый Массив);
	ПараметрыВыполнения.Вставить("ДопНастройки"	, ДопНастройки);
	ПараметрыВыполнения.Вставить("Ссылка"		, НовостьСсылка);
	
	ТекстСтраницы = БазаЗнанийHTML.ПолучитьКонтентНовости(ПараметрыВыполнения);
	
	Возврат Новый Структура("Контент, Картинки, Заголовок",
		ТекстСтраницы,
		ПараметрыВыполнения.ДопКартинки,
		"Новость: " + Строка(НовостьСсылка));
	
КонецФункции

Функция ПолучитьТекстСтатьиИмпортированнойИзФайла(СтатьяБазыЗнаний, СоздаватьСсылки = Ложь, ЗаменятьИменаНаИдентификаторы = Ложь) Экспорт
	
	ТаблицаСтилей = БазаЗнанийCSSКлиентСервер.ПолучитьТаблицуСтилей();
	Если Не ПустаяСтрока(СтатьяБазыЗнаний.ОписаниеМетатегов) Тогда
		ОписаниеМетатеговHTML = СтатьяБазыЗнаний.ОписаниеМетатегов;
		ОписаниеМетатеговHTML = СтрЗаменить(ОписаниеМетатеговHTML, "<head>", ""); 
		ОписаниеМетатеговHTML = СтрЗаменить(ОписаниеМетатеговHTML, "</head>", ""); 
		ТаблицаСтилей = СтрЗаменить(ТаблицаСтилей, "/*ДОПОЛНИТЕЛЬНО*/", ОписаниеМетатеговHTML);
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтатьяБазыЗнаний.ТекстHTML) Тогда
		ТекстBODY 	 = СтатьяБазыЗнаний.ТекстHTML;		
		Если СтатьяБазыЗнаний.Картинки.Количество() > 0 Тогда
			Для Каждого СтрокаКартинка Из СтатьяБазыЗнаний.Картинки Цикл				
				Если ЗаменятьИменаНаИдентификаторы Тогда
				   СтрокаПоиска		   = "[pict_" + СтрЗаменить(СтрокаКартинка.Идентификатор, "-", "") + "]";
				   СтрокаОписаниеСтиля = ?(Не ПустаяСтрока(СтрокаКартинка.ОписаниеСтиля), " style=""" + СтрокаКартинка.ОписаниеСтиля + """", "") + ">";
				   СтрокаЗамены        = "<div>					
										| <img src=""cid:" + СтрокаКартинка.Идентификатор + """" + СтрокаОписаниеСтиля + "										
										| </div>
										|";
				   
			   Иначе
					Попытка
						ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СтрокаКартинка.Файл);
					Исключение
						Продолжить;
					КонецПопытки;	
					АдресВХранилище		= ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
					АдресВХранилищеSRC	= "data:image/png;base64," + СтрЗаменить(Base64Строка(ДвоичныеДанныеФайла), Символы.ВК + Символы.ПС, "");
					СтрокаПоиска		= "[pict_" + СтрЗаменить(СтрокаКартинка.Идентификатор, "-", "") + "]";															
					СтрокаОписаниеСтиля = ?(Не ПустаяСтрока(СтрокаКартинка.ОписаниеСтиля), " style=""" + СтрокаКартинка.ОписаниеСтиля + """", "") + ">"; 
					Если СоздаватьСсылки Тогда
						СтрокаЗамены    = "<div class='pictureblock'>							
										|	<a href=""" + АдресВХранилище + """>
										|		<img src=""" + АдресВХранилищеSRC + """" + СтрокаОписаниеСтиля + "
										|	</a>										
										|</div>
										|";
						
					Иначе	
						СтрокаЗамены    = "<div>					
										| <img src=""" + АдресВХранилищеSRC + """" + СтрокаОписаниеСтиля + "										
										| </div>
										|";			
					КонецЕсли;					
					
				КонецЕсли;
				ТекстBODY = СтрЗаменить(ТекстBODY, СтрокаПоиска, СтрокаЗамены);
			КонецЦикла; 	
		КонецЕсли;		
	КонецЕсли;		
	
	ТекстСтраницы = 
	"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
	|<html xmlns=""http://www.w3.org/1999/xhtml"">
	|	<head>
	|		<title>" + СтатьяБазыЗнаний.Наименование + "</title>	
	|		" + ТаблицаСтилей + "	
	|	</head>
	|	<body>
	|		<div id=""content"" class=""content_main"">
	|			[[ОсновнойКонтент]]
	|		</div>
	|	</body>
	|</html>";
	
	БазаЗнанийHTMLКлиентСервер.ВырезатьТекстТелаДокумента(ТекстBODY);	
	
	Возврат СтрЗаменить(ТекстСтраницы, "[[ОсновнойКонтент]]", ТекстBODY);
	
КонецФункции

Функция ПолучитьТекстСтатьиБазыЗнаний(СтатьяБазыЗнаний, СоздаватьСсылки = Ложь, ЗаменятьИменаНаИдентификаторы = Ложь) Экспорт
	
	ТекстСтатьи   = "";
	ТаблицаСтилей = БазаЗнанийCSSКлиентСервер.ПолучитьТаблицуСтилей();
	ДанныеСтатьи  = БазаЗнаний.ПолучитьДанныеСтатьи(СтатьяБазыЗнаний);
	ТекстСтатьи	  = ДанныеСтатьи.ТекстHTML;
	БазаЗнанийHTMLКлиентСервер.ВырезатьТекстТелаДокумента(ТекстСтатьи);
	ТекстСтатьи   = БазаЗнанийHTML.УдалитьКомментарииПоТексту(ТекстСтатьи, Истина);
	
	БазаЗнанийHTML.ОбработатьВложенныеТаблицы("Главная", ТекстСтатьи, ДанныеСтатьи);
	БазаЗнанийHTML.ОбработатьВложенныеКартинки("Главная", ТекстСтатьи, ДанныеСтатьи, СоздаватьСсылки, ЗаменятьИменаНаИдентификаторы);
	БазаЗнанийHTML.ОбработатьВложенныеФайлы("Главная", ТекстСтатьи, ДанныеСтатьи, Ложь);
	
	// Содержание.
	ВыводитьСодержание = (ДанныеСтатьи.Содержание.Количество() > 3);
	Если ВыводитьСодержание И ДанныеСтатьи.ПоложениеСодержания = 1 Тогда
		ТекстСтатьи = ТекстСтатьи + "
		|__TOC__";
	ИначеЕсли ВыводитьСодержание И (ДанныеСтатьи.ПоложениеСодержания = 2 ИЛИ ДанныеСтатьи.ПоложениеСодержания = 3) Тогда
		ТекстСтатьи = "__TOC__
		|" + ТекстСтатьи;
	КонецЕсли;
	
	// Вложенные уровни.
	Счетчик = 0;
	Для Каждого СтрокаСодержание Из ДанныеСтатьи.Содержание Цикл
		
		Счетчик		= Счетчик + 1;
		ТегФормата	= ?(СтрокаСодержание.Уровень >= 5, "h5", "h" + Строка(СтрокаСодержание.Уровень));
		
		ТекстСтроки	= СтрокаСодержание.ТекстHTML;
		БазаЗнанийHTMLКлиентСервер.ВырезатьТекстТелаДокумента(ТекстСтроки);
		
		БазаЗнанийHTML.ОбработатьВложенныеТаблицы(СтрокаСодержание.Область, ТекстСтроки, ДанныеСтатьи);
		БазаЗнанийHTML.ОбработатьВложенныеКартинки(СтрокаСодержание.Область, ТекстСтроки, ДанныеСтатьи, СоздаватьСсылки);
		БазаЗнанийHTML.ОбработатьВложенныеФайлы(СтрокаСодержание.Область, ТекстСтроки, ДанныеСтатьи, Ложь);
		
		ТекстСтатьи = ТекстСтатьи + "
		|	<" + ТегФормата + " id='" + СтрокаСодержание.Область + "'>" + СтрокаСодержание.Наименование + "		
		|	</" + ТегФормата + ">
		|	<div id='content_" + СтрокаСодержание.Область + "' style='margin-left:" + Формат(2 * СтрокаСодержание.Уровень, "ЧГ=") +"px;'>
		|		" + ТекстСтроки + "
		|	</div>";
		
	КонецЦикла;
	
	// Подстановка строки разделителя.
	БазаЗнанийHTML.ОбработатьРазделительныеЛинии(ТекстСтатьи);
	
	// Удалим открытие ссылок в отдельных окнах.
	ТекстСтатьи = СтрЗаменить(ТекстСтатьи, "target='_blank'", "");
	
	// Сноски.
	БазаЗнанийHTML.ОбработатьСноски(ТекстСтатьи, ДанныеСтатьи);
	
	// Подстановка содержания статьи.
	Если ВыводитьСодержание И ДанныеСтатьи.ПоложениеСодержания > 0 Тогда
		Если ДанныеСтатьи.ПоложениеСодержания = 2 Тогда
			ДопСтиль = " style='float:left; margin: 0 10px 15px 0;'";
		ИначеЕсли ДанныеСтатьи.ПоложениеСодержания = 3 Тогда
			ДопСтиль = " style='float:right; margin: 0 0 15px 10px;'";
		Иначе
			ДопСтиль = " style='margin: 15px 10px 15px 0;'";
		КонецЕсли;					
		
		ТекстОглавление = "<div class='contents'" + ДопСтиль + ">
		|<p style='text-align:center; font-weight:bold' id='contents_title'>Содержание 
		|	<span style='font-size:12px; font-weight:normal;'></span>
		|</p>";			

		ТекУровень		= -1;
		Для Каждого СтрокаСодержание Из ДанныеСтатьи.Содержание Цикл
			Если ТекУровень < СтрокаСодержание.Уровень Тогда
				ТекстОглавление = ТекстОглавление + "<ul id='contens_ul'>";
			ИначеЕсли ТекУровень > СтрокаСодержание.Уровень Тогда
				ТекстОглавление = ТекстОглавление + "</ul>";
			КонецЕсли;
			ТекУровень = СтрокаСодержание.Уровень;
			
			ТекстОглавление = ТекстОглавление + "
			|	<li>" + СтрокаСодержание.Наименование + "</a></li>";
		КонецЦикла;
		ТекстОглавление = ТекстОглавление + "</ul></div>";
		
		ТекстСтатьи = СтрЗаменить(ТекстСтатьи, "__TOC__", ТекстОглавление);
	КонецЕсли;
	
	ТекстСтраницы = 
	"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
	|<html xmlns=""http://www.w3.org/1999/xhtml"">
	|	<head>
	|		<title>" + СтатьяБазыЗнаний.Наименование + "</title>	
	|		" + ТаблицаСтилей + "	
	|	</head>
	|	<body>
	|		<div id='content' class='content_main'>
	|			[[ОсновнойКонтент]]
	|		</div>
	|	</body>
	|</html>";

	
	Возврат СтрЗаменить(ТекстСтраницы, "[[ОсновнойКонтент]]", ТекстСтатьи); 
	
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЧАСТЕЙ СТРАНИЦ БАЗЫ ЗНАНИЙ

Функция ПолучитьДанныеОбновлениеКомментариев(СтруктураКартинок, ПараметрыСсылки, ДопНастройки) Экспорт
	
	АдресаКартинок = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураКартинок Цикл
		АдресаКартинок.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ИдентификаторСтатьи		= ПараметрыСсылки.article;
	УникальныйИдентификатор	= Новый УникальныйИдентификатор(ИдентификаторСтатьи);
	СтатьяСсылка			= Справочники.СтатьиБазыЗнаний.ПолучитьСсылку(УникальныйИдентификатор);
	
	ПараметрыВыполнения	= Новый Структура;
	ПараметрыВыполнения.Вставить("ОснКартинки"	, АдресаКартинок);
	ПараметрыВыполнения.Вставить("ДопКартинки"	, Новый Массив);
	ПараметрыВыполнения.Вставить("ДопНастройки"	, ДопНастройки);
	ПараметрыВыполнения.Вставить("Ссылка"		, СтатьяСсылка);
	
	Возврат БазаЗнанийHTML.ПолучитьБлокКомментарии(ПараметрыВыполнения);
	
КонецФункции

Функция ПолучитьДанныеОбновлениеНовостнойЛенты(СтруктураКартинок, ПараметрыСсылки, ДопНастройки) Экспорт
	
	АдресаКартинок = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураКартинок Цикл
		АдресаКартинок.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ГлавнаяСтраница	= Булево(ПараметрыСсылки.mainpage);
	ПредСтраница	= Число(ПараметрыСсылки.prevpage);
	ТекСтраница		= Число(ПараметрыСсылки.currpage);
	Количество		= Число(ПараметрыСсылки.limit);
	Идентификатор	= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Идентификатор) Тогда
		УникальныйИдентификатор	= Новый УникальныйИдентификатор(Идентификатор);
		НовостиСсылка = Справочники.НовостиБазыЗнаний.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;
	
	ПараметрыВыполнения	= Новый Структура;
	ПараметрыВыполнения.Вставить("ОснКартинки"	, АдресаКартинок);
	ПараметрыВыполнения.Вставить("ДопКартинки"	, Новый Массив);
	ПараметрыВыполнения.Вставить("ДопНастройки"	, ДопНастройки);
	
	ПараметрыВыполнения.Вставить("ГлавнаяСтраница"		, ГлавнаяСтраница);
	ПараметрыВыполнения.Вставить("Количество"			, Количество);
	ПараметрыВыполнения.Вставить("ПредыдущаяСтраница"	, ПредСтраница);
	ПараметрыВыполнения.Вставить("ТекущаяСтраница"		, ТекСтраница);
	ПараметрыВыполнения.Вставить("Ссылка"				, НовостиСсылка);
	
	Возврат БазаЗнанийHTML.ПолучитьБлокНовости(ПараметрыВыполнения);
	
КонецФункции

Функция ПолучитьДанныеОбновленияСтатей(СтруктураКартинок, ПараметрыСсылки, ДопНастройки) Экспорт
	
	АдресаКартинок = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураКартинок Цикл
		АдресаКартинок.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ПредСтраница	= Число(ПараметрыСсылки.prevpage);
	ТекСтраница		= Число(ПараметрыСсылки.currpage);
	Количество		= Число(ПараметрыСсылки.limit);
	ВидСтраницы		= СокрЛП(ПараметрыСсылки.type);
	
	СтатьяСсылка	= Справочники.СтатьиБазыЗнаний.ПустаяСсылка();
	Если ПараметрыСсылки.Свойство("id") Тогда
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ПараметрыСсылки.id) Тогда
			УникальныйИдентификатор	= Новый УникальныйИдентификатор(ПараметрыСсылки.id);
			СтатьяСсылка = Справочники.СтатьиБазыЗнаний.ПолучитьСсылку(УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	КатегорияСсылка	= Справочники.КатегорииБазыЗнаний.ПустаяСсылка();
	Если ПараметрыСсылки.Свойство("category") Тогда
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ПараметрыСсылки.category) Тогда
			УникальныйИдентификатор	= Новый УникальныйИдентификатор(ПараметрыСсылки.category);
			КатегорияСсылка = Справочники.КатегорииБазыЗнаний.ПолучитьСсылку(УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения	= Новый Структура;
	ПараметрыВыполнения.Вставить("ОснКартинки"	, АдресаКартинок);
	ПараметрыВыполнения.Вставить("ДопКартинки"	, Новый Массив);
	ПараметрыВыполнения.Вставить("ДопНастройки"	, ДопНастройки);
	
	ПараметрыВыполнения.Вставить("Количество"			, Количество);
	ПараметрыВыполнения.Вставить("ПредыдущаяСтраница"	, ПредСтраница);
	ПараметрыВыполнения.Вставить("ТекущаяСтраница"		, ТекСтраница);
	ПараметрыВыполнения.Вставить("ВидСтраницы"			, ВидСтраницы);
	ПараметрыВыполнения.Вставить("Ссылка"				, СтатьяСсылка);
	ПараметрыВыполнения.Вставить("Категория"			, КатегорияСсылка);
	
	Возврат БазаЗнанийHTML.ПолучитьБлокСтатьи(ПараметрыВыполнения);
	
КонецФункции

Функция ЗаполнитьРазделДополнительноВТаблицеСтилей(СсылкаНаСтатью, ТаблицаСтилей) Экспорт
	
	ТекстДополнительно = "";
	Если СсылкаНаСтатью.РазделИмпортирован И Не ПустаяСтрока(СсылкаНаСтатью.ОписаниеМетатегов) Тогда
		ТекстДополнительно = УдалитьТегиHEAD(СсылкаНаСтатью.ОписаниеМетатегов) + Символы.ПС;
	КонецЕсли;
	Для Каждого СтрокаСодержания Из СсылкаНаСтатью.Содержание Цикл
		Если СтрокаСодержания.РазделИмпортирован И Не ПустаяСтрока(СтрокаСодержания.ОписаниеМетатегов) Тогда
			ТекстДополнительно = ТекстДополнительно + УдалитьТегиHEAD(СтрокаСодержания.ОписаниеМетатегов) + Символы.ПС; 
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не ПустаяСтрока(ТекстДополнительно) Тогда
		ТаблицаСтилей = СтрЗаменить(ТаблицаСтилей, "/*ДОПОЛНИТЕЛЬНО*/", ТекстДополнительно); 
	КонецЕсли;	
	
	Возврат ТаблицаСтилей;
	
КонецФункции

#Область ЭлектронноеПисьмоИсходящее

Процедура ЭлектронноеПисьмоИсходящееПриСозданииНаСервере(Форма, Параметры) Экспорт
		
	// Видимость страницы "Статья базы знаний".
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Если Форма.Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
			Форма.Элементы.СтраницаСтатьяБазыЗнаний.Видимость = Истина;
		Иначе				
			Форма.Элементы.СтраницаСтатьяБазыЗнаний.Видимость = Ложь;
		КонецЕсли;	
	Иначе
		Если Параметры.Свойство("СтатьяБазыЗнаний") Тогда
			Форма.Элементы.СтраницаСтатьяБазыЗнаний.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Если Форма.Параметры.Свойство("СтатьяВАрхивеZIP") И Форма.Параметры.СтатьяВАрхивеZIP Тогда
		Форма.Элементы.СтраницаСтатьяБазыЗнаний.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("СтатьяБазыЗнаний") Тогда
		Форма.Объект.СтатьяБазыЗнаний = Параметры.СтатьяБазыЗнаний; 
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Форма.Объект.СтатьяБазыЗнаний) Тогда
		Форма.Элементы.СтраницаСтатьяБазыЗнаний.Видимость = Ложь;
		Возврат;
	КонецЕсли;
			
	СтатьяБазыЗнаний       = Форма.Объект.СтатьяБазыЗнаний;
	Форма.ФорматСообщения  = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
	Форма.Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;	
	
	Если СтатьяБазыЗнаний.РазделИмпортирован Тогда
		Форма.СтатьяБазыЗнанийHTML = БазаЗнанийHTMLВызовСервера.ПолучитьТекстСтатьиИмпортированнойИзФайла(СтатьяБазыЗнаний);
	Иначе
		Форма.СтатьяБазыЗнанийHTML = БазаЗнанийHTMLВызовСервера.ПолучитьТекстСтатьиБазыЗнаний(СтатьяБазыЗнаний);
	КонецЕсли;
	
	Если Форма.Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик И СтатьяБазыЗнаний.Файлы.Количество() > 0 Тогда		
		Для Каждого СтрокаФайл Из СтатьяБазыЗнаний.Файлы Цикл
			ФайлСтруктура = Новый Структура;
			Попытка
				ДанныеФайла = РаботаСФайлами.ДанныеФайла(СтрокаФайл.Файл, 
														 Новый Структура("ИдентификаторФормы", Форма.УникальныйИдентификатор)); 
				ФайлСтруктура.Вставить("АдресВоВременномХранилище", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				ФайлСтруктура.Вставить("Представление", ДанныеФайла.ИмяФайла);
				Форма.Параметры.Вложения.Добавить(ФайлСтруктура);
			Исключение
				Продолжить;
			КонецПопытки;	
		КонецЦикла;		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЭлектронноеПисьмоИсходящееПередЗаписьюНаСервере(Форма, ТекстПисьма) Экспорт
		
	Попытка
		Если Не Форма.ВыполняетсяОтправка Тогда
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	ТаблицаСтилей        = БазаЗнанийCSSКлиентСервер.ПолучитьТаблицуСтилей();
	
	Попытка
		СтатьяБазыЗнаний     = Форма.Объект.СтатьяБазыЗнаний;
	Исключение
		СтатьяБазыЗнаний     = Форма.СтатьяБазыЗнаний;
	КонецПопытки;	
	
	Если НЕ ЗначениеЗаполнено(СтатьяБазыЗнаний) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтатьяБазыЗнаний.ОписаниеМетатегов) Тогда
		ОписаниеМетатеговHTML = СтатьяБазыЗнаний.ОписаниеМетатегов;
		ОписаниеМетатеговHTML = СтрЗаменить(ОписаниеМетатеговHTML, "<head>", ""); 
		ОписаниеМетатеговHTML = СтрЗаменить(ОписаниеМетатеговHTML, "</head>", ""); 
		ТаблицаСтилей = СтрЗаменить(ТаблицаСтилей, "/*ДОПОЛНИТЕЛЬНО*/", ОписаниеМетатеговHTML);
	КонецЕсли;	
		
	СтатьяБазыЗнанийHTML = Форма.СтатьяБазыЗнанийHTML;
	ТекстПисьмаHTML		 = ТекстПисьма;
	БазаЗнанийHTMLКлиентСервер.ВырезатьТекстТелаДокумента(ТекстПисьмаHTML);
	ТекстПисьмаHTML = "<div>" + Символы.ПС + СокрЛП(ТекстПисьмаHTML) + Символы.ПС + "</div>";
	
	ВложенияСтатьиБазыЗнаний = Новый Соответствие;
	ДокументHTML   = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(СтатьяБазыЗнанийHTML);
	
	// Картинки из временного хранилища.
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		Если Не ЭтоАдресВременногоХранилища(АтрибутИсточникКартинки.ТекстовоеСодержимое) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеВложения = Новый Структура("ДвоичныеДанные, Идентификатор");
		ОписаниеВложения.ДвоичныеДанные = ПолучитьИзВременногоХранилища(АтрибутИсточникКартинки.ТекстовоеСодержимое);
		ОписаниеВложения.Идентификатор = Новый УникальныйИдентификатор;
		ВложенияСтатьиБазыЗнаний.Вставить(
			СтрШаблон("cid%1", СтрЗаменить(ОписаниеВложения.Идентификатор, "-", "")),
			ОписаниеВложения);
		
		НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
		НовыйАтрибутКартинки.ТекстовоеСодержимое = СтрШаблон("cid:%1", ОписаниеВложения.Идентификатор);
		//@skip-warning
		Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
		
	КонецЦикла;
	
	Если ВложенияСтатьиБазыЗнаний.Количество() > 0 Тогда
		ИндексИмениКартинки = 1;
		Для Каждого СтрокаВложение Из ВложенияСтатьиБазыЗнаний Цикл
			НоваяСтрока = Форма.ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();			
			НоваяСтрока.ИмяФайла 				  = "imagekb" + Строка(ИндексИмениКартинки);
			НоваяСтрока.ИдентификаторФайлаДляHTML = СтрокаВложение.Значение.Идентификатор;
			НоваяСтрока.Картинка 				  = Новый Картинка(СтрокаВложение.Значение.ДвоичныеДанные);
			ИндексИмениКартинки                   = ИндексИмениКартинки + 1;
		КонецЦикла;	
	КонецЕсли;	

	СтатьяБазыЗнанийHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);	
	БазаЗнанийHTMLКлиентСервер.ВырезатьТекстТелаДокумента(СтатьяБазыЗнанийHTML);
	СтатьяБазыЗнанийHTML = СокрЛП(СтатьяБазыЗнанийHTML);
	
	ПолныйТекстПисьма = 
	"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
	|<html xmlns=""http://www.w3.org/1999/xhtml"">
	|	<head>	
	|		" + ТаблицаСтилей + "	
	|	</head>
	|	<body>
	|       [[КонтентПисьма]]
	|		<div id='content' class='content_main'>
	|			<hr>
	|			[[ОсновнойКонтент]]
	|		</div>
	|	</body>
	|</html>";
	
	ТекстПисьма = СтрЗаменить(ПолныйТекстПисьма, "[[КонтентПисьма]]",   ТекстПисьмаHTML);
	ТекстПисьма = СтрЗаменить(ТекстПисьма,       "[[ОсновнойКонтент]]", СтатьяБазыЗнанийHTML);	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УдалитьТегиHEAD(СтрокаОписания)
	
	Результат = СтрЗаменить(СтрокаОписания, "<head>", "");
	Результат = СтрЗаменить(Результат, "</head>", "");
	
	Возврат СокрЛП(Результат);
	
КонецФункции

#КонецОбласти
