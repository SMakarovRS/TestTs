
#Область ПроцедурыИФункцииПодсистемыЗаработнаяПлата

// Процедура устанавливает отбор на подчиненную табличную часть.
//
Процедура УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти, Строка = Неопределено) Экспорт
	
	Если Строка <> Неопределено Тогда
		СтрокаТабличнойЧасти = Строка;
	Иначе
		СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти].ОтборСтрок = СтрОтбора;
	
КонецПроцедуры //УстановитьОтборНаПодчиненнуюТабличнуюЧасть()

// Процедура удаляет строки из подчиненной табличной части.
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Процедура УдалитьСтрокиПодчиненнойТабличнойЧасти(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненнаяТабличнаяЧасть = ФормаДокумента.Объект[ИмяПодчиненнойТабличнойЧасти];
	
	РезультатПоиска = ПодчиненнаяТабличнаяЧасть.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи));
	Для каждого СтрокаПоиска Из  РезультатПоиска Цикл
		ИндексУдаления = ПодчиненнаяТабличнаяЧасть.Индекс(СтрокаПоиска);
		ПодчиненнаяТабличнаяЧасть.Удалить(ИндексУдаления);
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиПодчиненнойТабличнойЧасти()

// Процедура добавляет ключ связи в табличную часть.
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//
Процедура ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ФормаДокумента, Строка = Неопределено) Экспорт
	
	Если Строка <> Неопределено Тогда
		СтрокаТабличнойЧасти = Строка;
	Иначе
		СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.КлючСвязи = СоздатьНовыйКлючСвязи(ФормаДокумента);
	
КонецПроцедуры // ДобавитьКлючСвязиВСтрокуТабличнойЧасти()

// Процедура создает новый ключ связи для таблиц.
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Функция СоздатьНовыйКлючСвязи(ФормаДокумента) Экспорт

	СписокЗначений = Новый СписокЗначений;
	
	ТабличнаяЧасть = ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти];
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
        СписокЗначений.Добавить(СтрокаТЧ.КлючСвязи);
	КонецЦикла;

    Если СписокЗначений.Количество() = 0 Тогда
		КлючСвязи = 1;
	Иначе
		СписокЗначений.СортироватьПоЗначению();
		КлючСвязи = СписокЗначений.Получить(СписокЗначений.Количество() - 1).Значение + 1;
	КонецЕсли;

	Возврат КлючСвязи;

КонецФункции //  СоздатьНовыйКлючСвязи()

// Процедура запрещает добавление новой строки, если не выбрана строка в основной табличной части.
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Функция ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти) Экспорт

	Если ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка основной табличной части!'");
		Сообщение.Сообщить();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции // ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть()

// Процедура добавляет ключ связи в подчиненную табличную часть.
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Процедура ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти, Строка = Неопределено) Экспорт
	
	ПодчиненнаяТабличнаяЧасть = ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти];
	
	Если Строка = Неопределено Тогда
		СтрокаПодчиненнойТабличнойЧасти = ПодчиненнаяТабличнаяЧасть.ТекущиеДанные;
	Иначе
		СтрокаПодчиненнойТабличнойЧасти = Строка;
	КонецЕсли;
	СтрокаПодчиненнойТабличнойЧасти.КлючСвязи = ПодчиненнаяТабличнаяЧасть.ОтборСтрок["КлючСвязи"];
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", ПодчиненнаяТабличнаяЧасть.ОтборСтрок["КлючСвязи"]);
	ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти].ОтборСтрок = СтрОтбора;

КонецПроцедуры // ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти()

// Процедура устанавливает период регистрации на начало месяца.
// А так же обновляет надпись периода на форме
Процедура ПриИзмененииМесяцаНачисления(ПереданнаяФорма) Экспорт
	
	Если СтрНайти(ПереданнаяФорма.ИмяФормы, "ФормаОтчета") Тогда
		ПереданнаяФорма.МесяцНачисления 				= НачалоМесяца(ПереданнаяФорма.МесяцНачисления);
		ПереданнаяФорма.ОтображениеМесяцаНачисления 	= Формат(ПереданнаяФорма.МесяцНачисления, "ДФ='MMMM yyyy'");		
	ИначеЕсли СтрНайти(ПереданнаяФорма.ИмяФормы, "ФормаСписка") > 0 Тогда
		ПереданнаяФорма.ОтборМесяцНачисления 			= НачалоМесяца(ПереданнаяФорма.ОтборМесяцНачисления);
		ПереданнаяФорма.ОтображениеМесяцаНачисления 	= Формат(ПереданнаяФорма.ОтборМесяцНачисления, "ДФ='MMMM yyyy'");		
	Иначе
		ПереданнаяФорма.Объект.МесяцНачисления 			= НачалоМесяца(ПереданнаяФорма.Объект.МесяцНачисления);
		ПереданнаяФорма.ОтображениеМесяцаНачисления 	= Формат(ПереданнаяФорма.Объект.МесяцНачисления, "ДФ='MMMM yyyy'");
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииПериодаРегистрации()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет структуру данных для открытии формы выбора календаря
//
Функция ПолучитьПараметрыОткрытияФормыКалендаря(ДатаКалендаряПриОткрытии, 
		ЗакрыватьПриВыборе = Истина, 
		МножественныйВыбор = Ложь) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить(
		"ДатаКалендаря", 
			ДатаКалендаряПриОткрытии
		);
		
	СтруктураПараметров.Вставить(
		"ЗакрыватьПриВыборе", 
			ЗакрыватьПриВыборе
		);
		
	СтруктураПараметров.Вставить(
		"МножественныйВыбор", 
			МножественныйВыбор
		);
		
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьПараметрыОткрытияФормыКалендаря()

// Процедура выполняет приращение даты по кнопкам регулирования
// Используется в документе зарплаты, отчетах Расчетные листки
// Шаг равняется месяцу
//
// Параметры:
// ПереданнаяФорма 	- форма, данные которой правятся
// Направление 		- значение приращения, может быть положительным и отрицательным
Процедура ПриРегулированииМесяцаНачисления(ПереданнаяФорма, Направление) Экспорт
	
	Если СтрНайти(ПереданнаяФорма.ИмяФормы, "ФормаОтчета") Тогда
		
		ПереданнаяФорма.МесяцНачисления = ?(ЗначениеЗаполнено(ПереданнаяФорма.МесяцНачисления), 
							ДобавитьМесяц(ПереданнаяФорма.МесяцНачисления, Направление),
							ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), Направление));
							
	ИначеЕсли СтрНайти(ПереданнаяФорма.ИмяФормы, "ФормаСписка") > 0 Тогда
		
		ПереданнаяФорма.ОтборМесяцНачисления = ?(ЗначениеЗаполнено(ПереданнаяФорма.ОтборМесяцНачисления), 
							ДобавитьМесяц(ПереданнаяФорма.ОтборМесяцНачисления, Направление),
							ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), Направление));							
		
	Иначе
		
		ПереданнаяФорма.Объект.МесяцНачисления = ?(ЗначениеЗаполнено(ПереданнаяФорма.Объект.МесяцНачисления), 
							ДобавитьМесяц(ПереданнаяФорма.Объект.МесяцНачисления, Направление),
							ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), Направление));
		
	КонецЕсли;
	
КонецПроцедуры // ПриРегулированииПериодаРегистрации()

#КонецОбласти
