
#Область ПрограммныйИнтерфейс

//Создает и настраивает центральный узел обмена с мобильными устройствами.
//
Процедура НайтиСоздатьЦентральныйУзелОбменаСМобильнымиКлиентами() Экспорт

	УзелОбмена = ПланыОбмена.МобильноеПриложение.ЭтотУзел().ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(УзелОбмена.Код) Тогда

		УзелОбмена.Код          = "001";
		УзелОбмена.Наименование = НСтр("ru='Центральный'");
		УзелОбмена.Записать();

	КонецЕсли;

КонецПроцедуры

// Выполняет запуск фонового задания обработки данных с мобильного приложения.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.МобильноеПриложение - Ссылка на узел;
//  ИмяМетода       - Строка - Имя метода который будет запущен как фоновое задание.
//
Процедура ЗапуститьФоновоеЗаданиеОбработкиДанных(МобильныйКлиент, ИмяМетода) Экспорт

	СтруктураОтбора = Новый Структура("Наименование", МобильныйКлиент.Код);
	МассивЗаданий   = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);

	ЕстьАктивноеЗадание = Ложь;
	Для Каждого ФоновоеЗадание Из МассивЗаданий Цикл
		Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ЕстьАктивноеЗадание = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ЕстьАктивноеЗадание Тогда		
		ИсходящееСообщение = СоздатьНовоеСообщение(МобильныйКлиент);
		МассивПараметров   = Новый Массив;
		МассивПараметров.Добавить(МобильныйКлиент);
		МассивПараметров.Добавить(ИсходящееСообщение);
		ФоновоеЗадание     = ФоновыеЗадания.Выполнить(ИмяМетода, МассивПараметров, Новый УникальныйИдентификатор(), 
			МобильныйКлиент.Код);
	КонецЕсли;

КонецПроцедуры

// Создание нового сообщения и помещение его в очередь. У сообщения 
// устанавливается признак того, что оно находится в стадии подготовки (процент готовности = 0).
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.МобильноеПриложение - Ссылка на узел;
// 
// Возвращаемое значение:
//  СправочникСсылка.СообщенияОбменаМобильноеПриложение - Ссылка на сообщение.
//
Функция СоздатьНовоеСообщение(Знач МобильныйКлиент) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Сообщение = Справочники.СообщенияОбменаМобильноеПриложение.СоздатьЭлемент();
	Сообщение.ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
	Сообщение.Входящее               = Ложь;
	Сообщение.ДатаСоздания           = ТекущаяДатаСеанса();
	Сообщение.Записать();

	РегистрыСведений.ОчередиСообщенийОбменаМобильноеПриложение.ПоместитьСообщениеВОчередь(МобильныйКлиент, Сообщение);	
	РегистрыСведений.СтепеньГотовностиСообщенийОбменМобильноеПриложение.УстановитьПроцентГотовности(Сообщение, 0);

	Возврат Сообщение.Ссылка;

КонецФункции

// Проверяет возможность работы с мобильного клиента для текущего пользователя.
// Вызывает исключение в случае отсутсвия разрешения.
// Параметры
// 	Пользователь - ссылка на пользователя
Функция ПроверитьВозможностьПодключенияМобильногоПриложения(Знач ТекущийПользователь) Экспорт

	УстановитьПривилегированныйРежим(Истина);	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПользователиМобильныхПриложений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПользователиМобильныхПриложений КАК ПользователиМобильныхПриложений
		|ГДЕ
		|	НЕ ПользователиМобильныхПриложений.ПометкаУдаления
		|	И ПользователиМобильныхПриложений.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);	
	РезультатЗапроса 	   = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Следующий();

КонецФункции

// Записывает в очередь входящее сообщение
//
// Параметры:
//  МобильныйКлиент 	 - ПланОбменаСсылка.МобильноеПриложение - Ссылка на узел;
//  СообщениеОтСервера	 - ОбъектXDTO - Полученные сервером данные.
//
Процедура ЗаписатьВходящееСообщение(Знач МобильныйКлиент, Знач СообщениеОтСервера) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеСообщения = Неопределено;
	Если ТипЗнч(СообщениеОтСервера.exchangeData) = Тип("ХранилищеЗначения") Тогда
		ДанныеСообщения = СообщениеОтСервера.exchangeData.Получить();

	ИначеЕсли ТипЗнч(СообщениеОтСервера.exchangeData) = Тип("ДвоичныеДанные") Тогда
		ДанныеСообщения = СообщениеОтСервера.exchangeData;

	КонецЕсли;

	Если ДанныеСообщения = Неопределено Или ТипЗнч(ДанныеСообщения) <> Тип("ДвоичныеДанные") Тогда
		Возврат;
	КонецЕсли;

	Сообщение = Справочники.СообщенияОбменаМобильноеПриложение.СоздатьЭлемент();
	Сообщение.ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор());
	Сообщение.Входящее               = Истина;
	Сообщение.ДатаСоздания           = ТекущаяДатаСеанса();

	Если ТипЗнч(СообщениеОтСервера.exchangeData) = Тип("ХранилищеЗначения") Тогда
		Сообщение.ДанныеСообщения = СообщениеОтСервера.exchangeData;
	ИначеЕсли ТипЗнч(СообщениеОтСервера.exchangeData) = Тип("ДвоичныеДанные") Тогда
		Сообщение.ДанныеСообщения =	Новый ХранилищеЗначения(СообщениеОтСервера.exchangeData, Новый СжатиеДанных(9));
	КонецЕсли;

	Сообщение.Записать();

	РегистрыСведений.ОчередиСообщенийОбменаМобильноеПриложение.ПоместитьСообщениеВОчередь(МобильныйКлиент, Сообщение);
	РегистрыСведений.СведенияОСообщенияхОбменаМобильноеПриложение.ЗаписатьРазмер(Сообщение.Ссылка,
		ДанныеСообщения.Размер());

КонецПроцедуры

// Создает XDTO с указанным типом
//
// Параметры:
//  ТипОбъекта	 - Строка - строковое представление типа XDTO
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO указанного типа
//
Функция СоздатьОбъект(Знач ТипОбъекта) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://softonit.ru/uit/MobileClient", ТипОбъекта));

КонецФункции

// Инициирует обработку входящего сообщения и заполнения ответного сообщения.
//
// Параметры:
//  МобильныйКлиент		 - ссылка на узел плана обмена МобильноеПриложение;
//  ИсходящееСообщение	 - Ссылка на элемент справочника СообщенияОбменаМобильноеПриложение.
//
Процедура ОбработатьСообщенияИСформироватьПакетОбмена(МобильныйКлиент, ИсходящееСообщение) Экспорт

	Попытка
		Сообщения     = ПолучитьВходящиеНеобработанныеСообщения(МобильныйКлиент);		
		Для Каждого Сообщение Из Сообщения Цикл
			ОбработатьВходящееСообщение(МобильныйКлиент, Сообщение);
		КонецЦикла;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Описание = "СтопДальнейшейОбработки" Тогда
			Возврат;
		КонецЕсли;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с мобильным.Обработка сообщения.Ошибка'"),
			УровеньЖурналаРегистрации.Ошибка,, Строка(МобильныйКлиент), ПодробноеПредставлениеОшибки(Инфо));
			
		ПоместитьВОчередьСообщениеОбОшибке(МобильныйКлиент, Инфо);		
		УстановитьПривилегированныйРежим(Истина);
		ОбъектСообщения = ИсходящееСообщение.ПолучитьОбъект();
		Если Не ОбъектСообщения = Неопределено Тогда
			ОбъектСообщения.Удалить();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;

	Попытка		
		Если Не МобильныйКлиент.ПометкаУдаления Тогда
			Если УКлиентаЕстьСинхронизируемыеОбласти() Тогда				
				СформироватьПакетОбмена(ИсходящееСообщение, МобильныйКлиент);
			Иначе
				ТекстПредупреждения = 
					"warning:" + 
					НСтр("ru = 'Не включена синхронизация данных с мобильным клиентом.
						|C сервера на мобильный клиент не передаются никакие данные.
						|Необходимо зайти в персональные настройки в настольном клиенте и включить синхронизацию.'");

				Попытка
					ВызватьИсключение ТекстПредупреждения;
				Исключение
					Инфо = ИнформацияОбОшибке();
					ПоместитьВОчередьСообщениеОбОшибке(МобильныйКлиент, Инфо);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;		
	Исключение		
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с мобильным.Формирование сообщения'"), 
			УровеньЖурналаРегистрации.Ошибка,, Строка(МобильныйКлиент), ПодробноеПредставлениеОшибки(Инфо));
		ПоместитьВОчередьСообщениеОбОшибке(МобильныйКлиент, Инфо);
		ВызватьИсключение;		
	КонецПопытки;

КонецПроцедуры

// Получает массив еще не обработанных входящих сообщений от указанного клиента.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.МобильноеПриложение - Ссылка на узел;
// 
// Возвращаемое значение:
//  Массив - Необработанные входящие сообщения.
//
Функция ПолучитьВходящиеНеобработанныеСообщения(Знач МобильныйКлиент) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияОбменаМобильноеПриложение.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СообщенияОбменаМобильноеПриложение КАК СообщенияОбменаМобильноеПриложение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиСообщенийОбменаМобильноеПриложение КАК ОчередиСообщенийОбменаМобильноеПриложение
		|		ПО СообщенияОбменаМобильноеПриложение.Очередь = ОчередиСообщенийОбменаМобильноеПриложение.Очередь
		|ГДЕ
		|	СообщенияОбменаМобильноеПриложение.Входящее = ИСТИНА
		|	И СообщенияОбменаМобильноеПриложение.ДатаОбработки = ДАТАВРЕМЯ(1, 1, 1)
		|	И ОчередиСообщенийОбменаМобильноеПриложение.МобильныйКлиент = &МобильныйКлиент
		|	И СообщенияОбменаМобильноеПриложение.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СообщенияОбменаМобильноеПриложение.ДатаСоздания";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

// Вычисляет формат сообщения обмена от клиента и выполняет обработку сообщения в соответствии
//  с версией формата.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.МобильноеПриложение - Ссылка на узел;
//  Сообщение		 - СправочникСсылка.СообщенияОбменаМобильноеПриложение - Ссылка на входящее сообщение;
//  ВерсияКлиента	 - Строка - Версия формат обмена.
// 
// Возвращаемое значение:
//  Булево - Истина, если сообщение обработано.
//
Функция ОбработатьВходящееСообщение(МобильныйКлиент, Сообщение) Экспорт

	Данные = Сообщение.ДанныеСообщения.Получить();
	Если Данные = Неопределено Или ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Возврат Истина;
	КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	Данные.Записать(ИмяВременногоФайла);

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	ЧтениеXML.Прочитать();	
	ВерсияКлиента = ЧтениеXML.ПолучитьАтрибут("Version");
	ЧтениеXML.Прочитать();

	Если ВерсияКлиента <> Неопределено Тогда
		Версия = "MobileClient";
	Иначе
		Версия = "";
	КонецЕсли;

	ЧтениеXML.Закрыть();

	Если Версия = "MobileClient" Тогда

		Возврат ОбработатьВходящееСообщениеMobileClient(МобильныйКлиент, Сообщение);

	КонецЕсли;

КонецФункции

// Читает и обрабатывает данные СообщенияОбменаМобильноеПриложение.
//
// Параметры:
//  МобильныйКлиент	 -  ссылка на узел плана обмена МобильноеПриложение;
//  Сообщение		 -  Ссылка на элемент справочника СообщенияОбменаМобильноеПриложение;
// 
// Возвращаемое значение:
//  Истина - Если обработка завершена без ошибок.
//
Функция ОбработатьВходящееСообщениеMobileClient(МобильныйКлиент, Сообщение) Экспорт

	Данные = Сообщение.ДанныеСообщения.Получить();
	Если Данные = Неопределено Или ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Возврат Истина;
	КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	Данные.Записать(ИмяВременногоФайла);

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	ЧтениеXML.Прочитать();	
	ВерсияКлиента = ЧтениеXML.ПолучитьАтрибут("Version");
	
	ПараметрыСинхронизации = ОбменМобильноеПриложениеПовтИсп.ПолучитьПараметрыСинхронизацииПоПользователю(
		МобильныйКлиент.Пользователь);	
	ПараметрыСинхронизации.Вставить("МобильныйКлиент", МобильныйКлиент);
	ПараметрыСинхронизации.Вставить("ВерсияКлиента",   ВерсияКлиента);

	Попытка

		Пока ЧтениеXML.Прочитать() Цикл

			Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Продолжить;
			КонецЕсли;
			
			Версия = ЧтениеXML.ПолучитьАтрибут("Version");
			Если Версия = Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			
			ИмяТипа       = ЧтениеXML.Имя;			
			ДанныеОбъекта = ПрочитатьСтруктуруОбъектаИзXML(ЧтениеXML, ИмяТипа);
			//@skip-warning
			ДанныеОбъекта.Вставить(ВРег("Версия"),  Версия);
			//@skip-warning
			ДанныеОбъекта.Вставить(ВРег("ИмяТипа"), ИмяТипа);

			Попытка

				ОбработатьДанныеОбъектаMobileClient(ДанныеОбъекта, ПараметрыСинхронизации);

			Исключение

				Инфо = ИнформацияОбОшибке();
				Если Инфо.Описание = "СтопДальнейшейОбработки" Тогда
					ПометитьСообщениеОбработанным(Сообщение);
					ВызватьИсключение;
				КонецЕсли;				
				Если СтрНайти(НРег(Инфо.Описание), "info:") > 0 Тогда
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с мобильным. Обработка сообщения. Информация'"),
												УровеньЖурналаРегистрации.Информация,
												,
												Строка(МобильныйКлиент),
												ПодробноеПредставлениеОшибки(Инфо));
					ПоместитьВОчередьСообщениеОбОшибке(МобильныйКлиент, Инфо);

				ИначеЕсли СтрНайти(НРег(Инфо.Описание), "warning:") > 0 Тогда
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с мобильным. Обработка сообщения. Предупреждение'"),
												УровеньЖурналаРегистрации.Предупреждение,
												,
												Строка(МобильныйКлиент),
												ПодробноеПредставлениеОшибки(Инфо));
					ПоместитьВОчередьСообщениеОбОшибке(МобильныйКлиент, Инфо);
				Иначе
					ВызватьИсключение;
				КонецЕсли;

			КонецПопытки;

		КонецЦикла;

		ПометитьСообщениеОбработанным(Сообщение);
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяВременногоФайла);
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяВременногоФайла);

		Если НЕ Инфо.Описание = "СтопДальнейшейОбработки" Тогда
			ВызватьИсключение;
		КонецЕсли;

	КонецПопытки;

	Возврат Истина;

КонецФункции

// Выполняет обработку одного объекта .
//
// Параметры:
//  ДанныеОбъекта			 - Соответствие - Прочитанные данные объекта который нужно обработать;
//  ПисьмаКОтправке			 - Массив - Массив ссылок на письма, которые необходимо отправить после обработки всех XDTO сообщения;
//  СвязиКУстановке			 - Массив - Массив связей которые нужно установить между объектами;
//  ПараметрыСинхронизации	 - Структура - кешированные параметры обмена
//
Процедура ОбработатьДанныеОбъектаMobileClient(ДанныеОбъекта, ПараметрыСинхронизации) Экспорт

	ИмяТипа         = ОбменМобильноеПриложениеОбработкаXML.ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"ИмяТипа", "Строка");
	МобильныйКлиент = ПараметрыСинхронизации.МобильныйКлиент;

	Если СтрСравнить(ИмяТипа, "Connect") = 0 Тогда
		ПодключитьНовоеУстройство(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Disconnect") = 0 Тогда
		ОтключитьУстройство(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "GetFileTask") = 0
		ИЛИ СтрСравнить(ИмяТипа, "GetFileComment") = 0 Тогда
		ПередатьОдинФайл(ИмяТипа, ДанныеОбъекта, МобильныйКлиент);	
	
	ИначеЕсли СтрСравнить(ИмяТипа, "ClientInfo") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLИнформациюОКлиенте(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "ProcessType") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLТипыПроцессов(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "TaskGroup") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLГруппуЗадания(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "TaskCategory") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLКатегориюЗадания(ДанныеОбъекта, МобильныйКлиент);	
		
	ИначеЕсли СтрСравнить(ИмяТипа, "ContactPersons") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLКонтактноеЛицо(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Partners") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLКонтрагента(ДанныеОбъекта, МобильныйКлиент);	
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Sprint") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLСпринт(ДанныеОбъекта, МобильныйКлиент);
	
	ИначеЕсли СтрСравнить(ИмяТипа, "Tag") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLТег(ДанныеОбъекта, МобильныйКлиент);	
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Individual") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLФизЛицо(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "PotentialClients") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLПотенциальногоКлиента(ДанныеОбъекта, МобильныйКлиент);	
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Task") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLЗадание(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "TaskFile") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLФайлЗадания(ДанныеОбъекта, МобильныйКлиент);	
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Comment") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLКомментарий(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "CommentFile") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLФайлКомментария(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "CommentLink") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLСвязьКомментариев(ДанныеОбъекта, МобильныйКлиент);	
		
	ИначеЕсли СтрСравнить(ИмяТипа, "DataExpirationSettings") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLНастройкиУстареванияДанных(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "MaxFileSizeToDownloadSetting") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLНастройкуМаксимальныйРазмерФайла(ДанныеОбъекта, 
			МобильныйКлиент);
	
	ИначеЕсли СтрСравнить(ИмяТипа, "OptionAddYourselfIntoObservers") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLНастройкуДобавлятьСебяВНаблюдателиДляВсехНовыхЗаданий(
			ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "OptionBasicInitiator") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLНастройкуОсновнойИнициатор(ДанныеОбъекта, МобильныйКлиент);	
		
	ИначеЕсли СтрСравнить(ИмяТипа, "OptionBasicProcess") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLНастройкуОсновнойПроцесс(ДанныеОбъекта, МобильныйКлиент);	
		
	ИначеЕсли СтрСравнить(ИмяТипа, "OptionBasicProcessForSubTask") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLНастройкуОсновнойПроцессДляСоздаваемыхДочернихЗаданий(
			ДанныеОбъекта, МобильныйКлиент);	
		
	ИначеЕсли СтрСравнить(ИмяТипа, "OptionOpenTheTabComment") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLНастройкуОткрыватьНеНовоеЗаданиеНаВкладкеКомментарии(
			ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "OptionIgnorantTheInitiator") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLНастройкуПриДобавленииСообщенияПоУмолчаниюНеУведомлятьИнициатора(ДанныеОбъекта, МобильныйКлиент);	
		
	ИначеЕсли СтрСравнить(ИмяТипа, "OptionSortingComments") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLНастройкуУпорядочиваниеКомментариевВЗадании(ДанныеОбъекта, 
			МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "OptionBasicOrganization") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLНастройкуОсновнаяОрганизация(ДанныеОбъекта, МобильныйКлиент);
	
	ИначеЕсли СтрСравнить(ИмяТипа, "OptionBasicDivision") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLНастройкуОсновноеПодразделение(ДанныеОбъекта, 
			МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "JournalRecord") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLСобытиеЖурнала(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Logins") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLЛогиныИПароли(ДанныеОбъекта, МобильныйКлиент);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "LoginsStorage") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLЛогиныИПаролиХранилище(ДанныеОбъекта, МобильныйКлиент);	
		
	ИначеЕсли СтрСравнить(ИмяТипа, "KindWork") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLВидРаботы(ДанныеОбъекта, МобильныйКлиент);	

	ИначеЕсли СтрСравнить(ИмяТипа, "DailyReport") = 0 Тогда
		ОбменМобильноеПриложениеОбработкаXML.ЗаписатьИзXMLЕжедневныйОтчет(ДанныеОбъекта, МобильныйКлиент);
			
	Иначе

		РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
			СтрШаблон(НСтр("ru = 'В сообщении обнаружен неизвестный тип объекта %1'"), ИмяТипа), Ложь, МобильныйКлиент);

	КонецЕсли;

КонецПроцедуры

Функция СформироватьСообщениеОбОтсутствииОжидаемогоРеквизита(Знач ИмяТипа, Знач ИмяАтрибута) Экспорт

	ТекстСообщения = НСтр("ru = 'Не найден ожидаемый аттрибут ""%2"" с типом ""%1""'");

	Возврат СтрШаблон(ТекстСообщения, ИмяТипа, ИмяАтрибута);

КонецФункции

// Формирует структуру объекта читаемого из XML.
//
// Параметры:
//  ЧтениеXML	 - ЧтениеXML - Объект чтения из файла;
//  ИмяТипа		 - Строка - Имя типа читаемого объекта.
// 
// Возвращаемое значение:
//  Соответствие - прочитанные поля объекта указанного типа.
//
Функция ПрочитатьСтруктуруОбъектаИзXML(ЧтениеXML, ИмяТипа)

	ДанныеОбъекта = Новый Соответствие();
	
	Пока ЧтениеXML.Прочитать() Цикл		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = ИмяТипа Тогда
			Прервать;

		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда			
			Значение = ЧтениеXML.Значение;			
			ЧтениеXML.Прочитать();

			Возврат Значение;
		
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Имя        = ЧтениеXML.Имя;
			ВерсияУзла = ЧтениеXML.ПолучитьАтрибут("Version");
			Данные     = ПрочитатьСтруктуруОбъектаИзXML(ЧтениеXML, Имя);

			Если Не ВерсияУзла = Неопределено Тогда
				//@skip-warning
				Данные.Вставить(ВРег("Версия"), ВерсияУзла);
			КонецЕсли;

			Если ТипЗнч(ДанныеОбъекта) = Тип("Соответствие") Тогда

				Значение = ДанныеОбъекта[ВРег(Имя)];
				Если Значение = Неопределено Тогда
					ДанныеОбъекта.Вставить(ВРег(Имя), Данные);
				Иначе
					ДанныеОбъекта = Новый Массив();
					ДанныеОбъекта.Добавить(Значение);
					ДанныеОбъекта.Добавить(Данные);
				КонецЕсли;

			Иначе

				ДанныеОбъекта.Добавить(Данные);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат ДанныеОбъекта;

КонецФункции

// Записать ошибку произошедшую во время обмена в журнал.
//
// Параметры:
//  МобильныйКлиент      - ПланОбменаСсылка.МобильноеПриложение - Узел обмена с клиентом обмена;
//  ИнформацияОбОшибке	 - ИнформацияОбОшибке - Информация о произошедшей ошибке.
//
Процедура ЗаписатьОшибкуВПротоколПриОбмене(Знач МобильныйКлиент, Знач ИнформацияОбОшибке) Экспорт

	ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

	Если СтрНайти(ИнформацияОбОшибке.Описание, "info:") Тогда
		РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			СтрЗаменить(ПредставлениеОшибки, "info:", ""), Ложь,	МобильныйКлиент);
	ИначеЕсли СтрНайти(ИнформацияОбОшибке.Описание, "warning:") Тогда
		РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
			СтрЗаменить(ПредставлениеОшибки, "warning:", ""), Ложь, МобильныйКлиент);
	Иначе
		РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьОшибку(ПредставлениеОшибки, Ложь, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

// Записывает данные обмена из временного файла и устанавливает процент готовности сообщения равным 100.
//
// Параметры:
//  МобильныйКлиент      - ПланОбменаСсылка.МобильноеПриложение - Узел обмена с клиентом обмена;
//  ИмяВременногоФайла	 - Строка - Имя файла для записи данных обмена;
//  КоличествоОбъектов	 - Число - Количество выгруженных объектов.
//
Процедура ЗаписатьДанныеОбмена(МобильныйКлиент, ИмяВременногоФайла, КоличествоОбъектов) Экспорт

	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	МассивДанных        = Новый Массив;
	МассивДанных.Добавить(Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9)));	
	
	Сообщение                       = СоздатьНовоеСообщение(МобильныйКлиент);
	СообщениеОбъект                 = Сообщение.ПолучитьОбъект();
	СообщениеОбъект.ДанныеСообщения = Новый ХранилищеЗначения(МассивДанных);
	СообщениеОбъект.ДатаСоздания    = ТекущаяДатаСеанса();
	СообщениеОбъект.Записать();

	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;

	РегистрыСведений.СведенияОСообщенияхОбменаМобильноеПриложение.ЗаписатьСведения(Сообщение, 
		ДвоичныеДанныеФайла.Размер(), КоличествоОбъектов);
	РегистрыСведений.СтепеньГотовностиСообщенийОбменМобильноеПриложение.УстановитьПроцентГотовности(Сообщение, 100);

КонецПроцедуры

// Выполняет формирование сообщения со всеми измененными с момента последней синхронизации данными.
//
// Параметры:
//  Сообщение       - Справочник.СообщенияОбменаМобильноеПриложение - ссылка на СообщенияОбменаМобильноеПриложение,
//					  в которое необходимо поместить данные;
//  МобильныйКлиент - ПланОбмена.МобильноеПриложение - ссылка на узел плана обмена МобильноеПриложение, 
//  				  из которого читаются 
//					  данные для помещения в сообщение;
//  ВерсияСервиса   - Строка - Версия используемого сервиса обмена.
//
Процедура СформироватьПакетОбмена(Сообщение, МобильныйКлиент) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	НачалоПодготовки = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Начало подготовки сообщения'"), Ложь, МобильныйКлиент);
	ВерсияСервера    = Метаданные.Версия;
	УстановитьПривилегированныйРежим(Ложь);
	
	Попытка		
		
		// Данные с учетом прав пользователя.
		МассивДанныхДляПередачиНаМобильныйКлиент = ПолучитьИзмененныеДанные(МобильныйКлиент, Истина);				
		КоличествоОбъектовВсего                  = МассивДанныхДляПередачиНаМобильныйКлиент.Количество();
		ПараметрыСинхронизации 					 = ПолучитьПараметрыСинхронизации(МобильныйКлиент);
		
		УстановитьПривилегированныйРежим(Истина);
		Если КоличествоОбъектовВсего = 0 Тогда
			РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
				СтрШаблон(НСтр("ru = 'Данных к выгрузке: %1'"),	КоличествоОбъектовВсего), Ложь, МобильныйКлиент);
		КонецЕсли;
			
		Если КоличествоОбъектовВсего = 0 Тогда			
			СообщениеОбъект = Сообщение.ПолучитьОбъект();
			Если СообщениеОбъект <> Неопределено Тогда
				СообщениеОбъект.Удалить();
			КонецЕсли;
			
			Возврат;
		КонецЕсли;			
		
		ШагОтображенияПроцентаГотовности = ПолучитьШагОтображенияПроцентаГотовности(КоличествоОбъектовВсего);		
		ИмяВременногоФайла               = ПолучитьИмяВременногоФайла("xml");
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Message");
		ЗаписьXML.ЗаписатьАтрибут("Version", ВерсияСервера);
		СчетчикОбъектов = 0;
		
		Для Каждого ЭлементДанных Из МассивДанныхДляПередачиНаМобильныйКлиент Цикл

			Попытка
				СчетчикОбъектов = СчетчикОбъектов + 1;
				ОбменМобильноеПриложениеОбработкаXML.ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервера, 
					ПараметрыСинхронизации, ЭлементДанных);				
				Если СчетчикОбъектов % ШагОтображенияПроцентаГотовности = 0 Тогда
					ПроцентГотовности = 99 * (СчетчикОбъектов/КоличествоОбъектовВсего) - 1;
					РегистрыСведений.СтепеньГотовностиСообщенийОбменМобильноеПриложение.УстановитьПроцентГотовности(
						Сообщение, ПроцентГотовности);
				КонецЕсли;
				ПеренестиОбъектыКВыгрузкеВМассивВыгружаемых(ПараметрыСинхронизации, 
					МассивДанныхДляПередачиНаМобильныйКлиент);				
				КоличествоОбъектовВсего = МассивДанныхДляПередачиНаМобильныйКлиент.Количество();

			Исключение

				Инфо = ИнформацияОбОшибке();
				ОбменМобильноеПриложениеОбработкаXML.ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервера, 
					ПараметрыСинхронизации, Инфо);

			КонецПопытки;

		КонецЦикла;	
		
		ОбменМобильноеПриложениеОбработкаXML.ДобавитьИнформациюОТекущемПользователе(ЗаписьXML, ВерсияСервера, 
			Пользователи.ТекущийПользователь());
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();

		РегистрыСведений.СведенияОСообщенияхОбменаМобильноеПриложение.ЗаписатьВремяПодготовки(Сообщение, 
			(ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоПодготовки) / 1000);
		КоличествоОбъектов = ПараметрыСинхронизации.ВыгруженоОбъектов;
		РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			СтрШаблон(НСтр("ru = 'Готовится сообщение из %1 объектов'"), КоличествоОбъектов), Ложь, МобильныйКлиент);
		РазбитьДанныеИзФайлаНаЧастиИЗаписатьВСообщениеОбмена(МобильныйКлиент, Сообщение, ИмяВременногоФайла, 
			ТекущаяУниверсальнаяДатаВМиллисекундах(), КоличествоОбъектов);
		УдалитьФайлы(ИмяВременногоФайла);

		УдалитьРегистрациюИзмененийПослеФормированияСообщения(МобильныйКлиент, 
			МассивДанныхДляПередачиНаМобильныйКлиент, ПараметрыСинхронизации);        
		
	Исключение
		
		УстановитьПривилегированныйРежим(Истина);
		Инфо = ОписаниеОшибки();
		РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			НСтр("ru = 'Ошибка подготовки пакета: '") + Инфо, Ложь, МобильныйКлиент);

		ЗаписьXML.Закрыть();

		Если НайтиФайлы(ИмяВременногоФайла).Количество() > 0 Тогда 
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;

		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры

Процедура УдалитьОбъектНаМобильномКлиенте(Результат, ЭлементМассива) Экспорт
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Ссылка", 		 ЭлементМассива.Ссылка);
	СтруктураОбъекта.Вставить("ПометкаУдаления", Истина);
	Результат.Добавить(СтруктураОбъекта);	
	
КонецПроцедуры	

//	Получает массив, содержащий ссылки на элементы справочника, документы, 
//	а также наборы регистров сведений, входящие в состав плана обмена указанного узла.
//	и зарегистрированных в данный момент на этом узле.
//
// Параметры:
//  УзелОбмена  - ссылка на узел плана обмена;
//
// Возвращаемое значение:
//	Массив - содержит ссылки на справочники и документы, наборы записей регистров, менеджеры констант, 
//		изменения которых были зарегистрированы на указанном узле плана обмена в момент вызова функции.
//
Функция ПолучитьИзмененныеДанные(УзелОбмена, СПометкойУдаления = Ложь) Экспорт
		
	МассивИзмененныхДанных	= Новый Массив;	

	Для Каждого ЭлементСоставаПланаОбмена Из УзелОбмена.Метаданные().Состав Цикл
		МетаданныеЭлемента = ЭлементСоставаПланаОбмена.Метаданные;
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеЭлемента) Тогда
			ПолучитьИзмененныеДанныеРегистра(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);			
		ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеЭлемента) Тогда			
			ПолучитьИзмененнуюКонстанту(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);			
		Иначе			
			ПолучитьИзмененныеДанныеСсылочногоТипа(УзелОбмена, МассивИзмененныхДанных,
				МетаданныеЭлемента, СПометкойУдаления);			
		КонецЕсли;

	КонецЦикла;
	
	Возврат МассивИзмененныхДанных;	

КонецФункции

// Процедура - Разбить данные из файла на части и записать в сообщение обмена.
//
// Параметры:
//  МобильныйКлиент		 - ПланОбменаСсылка.МобильноеПриложение	 - Узел обмен мобильного клиента;
//  ИсходящееСообщение	 - СправочникСсылка.СообщенияОбменаМобильноеПриложение - Формируемое сообщение обмена;
//  ИмяВременногоФайла	 - Строка - Имя файла с записанными данными;
//  НачалоЗаполнения	 - Число  - Дата начала формирования файлов (в миллисекундах);
//  КоличествоОбъектов	 - Число  - Количество выгруженных объектов.
//
Процедура РазбитьДанныеИзФайлаНаЧастиИЗаписатьВСообщениеОбмена(МобильныйКлиент, ИсходящееСообщение, 
	ИмяВременногоФайла, НачалоЗаполнения, КоличествоОбъектов) Экспорт

	ДвоичныеДанныеСообщения = Новый ДвоичныеДанные(ИмяВременногоФайла);

	// Файл с сообщением обмена разделяется на части по 5 Мб для стабилизации передачи на мобильный клиент.
	МассивЧастейФайла = РазделитьФайл(ИмяВременногоФайла, 5 * 1024 * 1024);

	МассивЧастей = Новый Массив;
	Для Каждого ИмяФайла Из МассивЧастейФайла Цикл

		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);		
		МассивЧастей.Добавить(Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9)));
		УдалитьФайлы(ИмяФайла);

	КонецЦикла;
	
	СообщениеОбъект                 = ИсходящееСообщение.ПолучитьОбъект();
	СообщениеОбъект.ДанныеСообщения = Новый ХранилищеЗначения(МассивЧастей);
	СообщениеОбъект.Записать();

	РегистрыСведений.СведенияОСообщенияхОбменаМобильноеПриложение.ЗаписатьСведения(ИсходящееСообщение, 
		ДвоичныеДанныеСообщения.Размер(), КоличествоОбъектов);
	ОкончаниеЗаполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РегистрыСведений.СведенияОСообщенияхОбменаМобильноеПриложение.ЗаписатьВремяФормирования(ИсходящееСообщение, 
		(ОкончаниеЗаполнения - НачалоЗаполнения) / 1000);	
	РегистрыСведений.СтепеньГотовностиСообщенийОбменМобильноеПриложение.УстановитьПроцентГотовности(
		ИсходящееСообщение,	100);
	УдалитьФайлы(ИмяВременногоФайла);
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтрШаблон(НСтр("ru = 'Подготовлено сообщение объемом %1 байт'"), Строка(ДвоичныеДанныеСообщения.Размер())), 
		Ложь, МобильныйКлиент);

КонецПроцедуры

// Переносит данные из списка связанных объектов которые нужно выгрузить в массив выгружаемых.
//
// Параметры:
//  ПараметрыСинхронизации					 - Структура - Параметры синхронизации;
//  МассивДанныхДляПередачиНаМобильныйКлиент - Массив - Массив писем.
//
Процедура ПеренестиОбъектыКВыгрузкеВМассивВыгружаемых(ПараметрыСинхронизации, МассивДанныхДляПередачиНаМобильныйКлиент)
	
	Для Каждого Пара Из ПараметрыСинхронизации.ОбъектыКВыгрузке Цикл

		Если Не Пара.Значение Тогда
			Продолжить;
		КонецЕсли;

		Если МассивДанныхДляПередачиНаМобильныйКлиент.Найти(Пара.Ключ) = Неопределено Тогда
			ЭлементДанных = Новый Структура("Ссылка, ПометкаУдаления", Пара.Ключ, Ложь);
			МассивДанныхДляПередачиНаМобильныйКлиент.Добавить(ЭлементДанных);
			ПараметрыСинхронизации.ОбъектыКВыгрузке.Удалить(Пара.Ключ);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ОтразитьДоступностьЗаданияПользователям(Знач ЗаданиеСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.СведенияОДоступностиЗаданийПользователям.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задание.Установить(ЗаданиеСсылка);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьНабора.Доступность = Ложь;
		КонецЦикла;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи сведений о доступности задания'"), 
				УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат;
		КонецПопытки;	
	КонецЕсли;	
	
	ВсеПользователиПоЗаданию = ПолучитьВсехПользователейИзЗадания(ЗаданиеСсылка, Ложь);
	Если ВсеПользователиПоЗаданию.Количество() > 0 Тогда
		Для Каждого Пользователь Из ВсеПользователиПоЗаданию Цикл
			НаборЗаписей = РегистрыСведений.СведенияОДоступностиЗаданийПользователям.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Задание.Установить(ЗаданиеСсылка);
			НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
					ЗаписьНабора.Доступность = Истина;					
				КонецЦикла;
			Иначе	
				НоваяЗапись	= НаборЗаписей.Добавить();
				НоваяЗапись.Задание      = ЗаданиеСсылка;
				НоваяЗапись.Пользователь = Пользователь;
				НоваяЗапись.Доступность  = Истина;
			КонецЕсли;		
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи сведений о доступности задания'"), 
					УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
				Возврат;
			КонецПопытки;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстОшибкиПроверкиПользователя(Знач Пользователь) Экспорт
	
	Результат = "";
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь.ПометкаУдаления Тогда
		Возврат СтрШаблон(НСтр("ru = 'Пользователь ""%1"" помечен на удаление. Укажите другого пользователя ИБ'"),
			Пользователь.Наименование);
	КонецЕсли;	
	
	Если Пользователь.Недействителен Тогда
		Возврат СтрШаблон(НСтр("ru = 'Пользователь ""%1"" недействителен. Укажите другого пользователя ИБ'"),
			Пользователь.Наименование);
	КонецЕсли;
	
	СвойстваПользователяИБ	= Пользователи.СвойстваПользователяИБ(Пользователь.ИдентификаторПользователяИБ);
	Если СвойстваПользователяИБ = Неопределено Тогда
		Возврат СтрШаблон(НСтр("ru = 'Не удалось получить свойства пользователя ""%1""'"),
			Пользователь.Наименование);	
	КонецЕсли;	
	
	Если НЕ СвойстваПользователяИБ.АутентификацияСтандартная Тогда
		Возврат СтрШаблон(НСтр("ru = 'В настройках пользователя ""%1"" выключена аутентификация 1С:Предприятия'"),
			Пользователь.Наименование);
	КонецЕсли;	
	
	РолиПользователя	= СвойстваПользователяИБ.Роли;
	ЕстьРольПолныеПрава	= РолиПользователя.Найти("ПолныеПрава") <> Неопределено;	
	
	Если Не ЕстьРольПолныеПрава Тогда
		
		ЕстьРольБазовыеПраваМП = РолиПользователя.Найти("БазовыеПраваМобильноеПриложение") <> Неопределено;
		
		Если Не ЕстьРольБазовыеПраваМП Тогда			
			Возврат СтрШаблон(НСтр("ru='У пользователя ""%1"" отсутствует роль:
				|- ""Базовые права мобильное приложение"".'"), Пользователь.Наименование);
		КонецЕсли;		
			
		ЕстьРольДобавлениеЗаданий = РолиПользователя.Найти("ServiceDeskДобавлениеЗаданий") <> Неопределено;		
		ЕстьРольВыполнениеЗаданий = РолиПользователя.Найти("ServiceDeskВыполнениеЗаданий") <> Неопределено;		
		
		Если НЕ ЕстьРольДобавлениеЗаданий
			И НЕ ЕстьРольВыполнениеЗаданий Тогда			
			Возврат СтрШаблон(НСтр("ru='У выбранного пользователя отсутствуют необходимые роли:
			    |- ""Добавление заданий"" или ""Выполнение заданий"".'"), Пользователь.Наименование);			
		КонецЕсли;	
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции	

#КонецОбласти

#Область РегистрацияИзменений

Процедура ПередатьОдинФайл(Знач ИмяТипа, Знач ДанныеОбъекта, МобильныйКлиент)

	УстановитьПривилегированныйРежим(Истина);

	Сообщение  = СоздатьНовоеСообщение(МобильныйКлиент);
	
	Если ИмяТипа = "GetFileTask" Тогда
		ФайлСсылка = Справочники.ЗаданиеПрисоединенныеФайлы.ПолучитьСсылку(
			ОбменМобильноеПриложениеОбработкаXML.ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", 
				"УникальныйИдентификатор"));
	ИначеЕсли ИмяТипа = "GetFileComment" Тогда
		ФайлСсылка = Справочники.КомментарииПрисоединенныеФайлы.ПолучитьСсылку(
			ОбменМобильноеПриложениеОбработкаXML.ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", 
				"УникальныйИдентификатор"));
	КонецЕсли;	

	ИмяВременногоФайла     = ПолучитьИмяВременногоФайла("xml");
	ПараметрыСинхронизации = ПолучитьПараметрыСинхронизации(МобильныйКлиент);
	ВерсияСервера          = Метаданные.Версия;
	Попытка

		ВозвращаемыеОбъекты = Новый Соответствие;

		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Message");
		ЗаписьXML.ЗаписатьАтрибут("Version", ВерсияСервера);

		ОбменМобильноеПриложениеОбработкаXML.ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, 
			ФайлСсылка, Истина);

		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();

		КоличествоОбъектов = ВозвращаемыеОбъекты.Количество();
		ТекстИнформации    = СтрШаблон(НСтр("ru = 'Готовится сообщение из %1 объектов'"),Строка(КоличествоОбъектов));

		РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(ТекстИнформации, Ложь, МобильныйКлиент);
		РазбитьДанныеИзФайлаНаЧастиИЗаписатьВСообщениеОбмена(МобильныйКлиент, Сообщение, 
			ИмяВременногоФайла, ТекущаяУниверсальнаяДатаВМиллисекундах(), КоличествоОбъектов);

		УдалитьФайлы(ИмяВременногоФайла);

		ВызватьИсключение "СтопДальнейшейОбработки";

	Исключение

		Если НайтиФайлы(ИмяВременногоФайла).Количество() > 0 Тогда
			ЗаписьXML.Закрыть();
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;

		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры

Процедура ПодключитьНовоеУстройство(ДанныеОбъекта, МобильныйКлиент) Экспорт 

	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Начало подключения нового клиента'"), Ложь, МобильныйКлиент);
				
	УстановитьПривилегированныйРежим(Истина);
	НайтиСоздатьЦентральныйУзелОбменаСМобильнымиКлиентами();
    УстановитьПривилегированныйРежим(Ложь);	
	
	ПараметрыСинхронизации = ОбменМобильноеПриложениеПовтИсп.ПолучитьПараметрыСинхронизацииПоПользователю(
		Пользователи.ТекущийПользователь(), Истина);	
	
	ЗарегистрироватьСправочникиДляПервойЗагрузки(МобильныйКлиент, ПараметрыСинхронизации);
	ЗарегистрироватьРегистрыДляПервойЗагрузки(МобильныйКлиент, ПараметрыСинхронизации);
	ЗарегистрироватьЗаданияДляПервойЗагрузки(МобильныйКлиент, ПараметрыСинхронизации);
	ЗарегистрироватьЕжедневныеОтчетыДляПервойЗагрузки(МобильныйКлиент, ПараметрыСинхронизации);
	ЗарегистрироватьНастройкиПользователяДляПервойЗагрузе(МобильныйКлиент, ПараметрыСинхронизации);

КонецПроцедуры

Процедура ОтключитьУстройство(СтруктураДанныхОбъекта, МобильныйКлиент)
	
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Отключение мобильного клиента'"), Ложь, МобильныйКлиент);	
	УстановитьПривилегированныйРежим(Истина);
	МобильныйКлиент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	
	ВызватьИсключение "СтопДальнейшейОбработки";	
	
КонецПроцедуры

Процедура ВыполнитьРегистрациюДанных(МобильныйКлиент, ПараметрыСинхронизации, МассивДляРегистрации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТипСтрока = Тип("Строка");

	Для Каждого Элемент Из МассивДляРегистрации Цикл
		Попытка
			Если Не ТипЗнч(Элемент) = ТипСтрока Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МобильныйКлиент, Элемент);
			КонецЕсли;
			ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, МобильныйКлиент, 
				Элемент, НСтр("ru = 'Объект зарегистрирован для выгрузки'"));
		Исключение
			Инфо = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Регистрация изменений для мобильного приложения'"), 
				УровеньЖурналаРегистрации.Ошибка, , Элемент, 
					СтрШаблон(НСтр("ru = 'Тип: %1, Ссылка: %2'"), ТипЗнч(Элемент), Элемент) + Символы.ПС 
					+ ПодробноеПредставлениеОшибки(Инфо));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьРегистрациюЭлементаДанных(ЭлементДанных) Экспорт

	Попытка
						
		Если ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ЛогиныИПаролиХранилище") Тогда
			ВыполнитьРегистрациюНаборЗаписейЛогиныИПаролиХранилище(ЭлементДанных);			
			Возврат;
		ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.СвязьКомментариев") Тогда
			ВыполнитьРегистрациюНаборЗаписейСвязьКомментариев(ЭлементДанных);			
			Возврат; 	
		Иначе
			ВсеУзлы = ОбменМобильноеПриложениеПовтИсп.ПолучитьВсеУзлы();
			ПланыОбмена.УдалитьРегистрациюИзменений(ВсеУзлы, ЭлементДанных);
		КонецЕсли;	
		
		УзлыОбмена = ПолучитьУзлыОбмена(ЭлементДанных);
		Если УзлыОбмена.Количество() > 0 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзлыОбмена, ЭлементДанных);
		КонецЕсли;
		
		УзелОбменаДляРегистрацииВсехДанных = ОбменМобильноеПриложениеПовтИсп.ПолучитьУзелДляРегистрацииДанных();
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаДляРегистрацииВсехДанных, ЭлементДанных);

	Исключение

		Инфо 			 = ИнформацияОбОшибке();
		МобильныеКлиенты = ОбменМобильноеПриложениеПовтИсп.ПолучитьВсеУзлы();

		СписокУзлов = "Узлы: ";
		Для Каждого Узел Из МобильныеКлиенты Цикл
			СписокУзлов = СписокУзлов + Символы.ПС + Строка(Узел);
		КонецЦикла;
		ТекстСообщение = СтрШаблон("Элемент данных: %1, %2
			|%3", Строка(ЭлементДанных), Строка(ТипЗнч(ЭлементДанных)), СписокУзлов);

		Для Каждого МобильныйКлиент Из МобильныеКлиенты Цикл
			РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьОшибку(ПодробноеПредставлениеОшибки(Инфо) 
				+ Символы.ПС + ТекстСообщение, Ложь, МобильныйКлиент);
		КонецЦикла;

		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры

Процедура ВыполнитьРегистрациюНаборЗаписейЛогиныИПаролиХранилище(Знач НаборЗаписей) Экспорт
	
	Попытка
		ВсеУзлы		= ОбменМобильноеПриложениеПовтИсп.ПолучитьВсеУзлы();
		УзлыОбмена	= ПолучитьУзлыОбмена(НаборЗаписей);
		УзелОбменаДляРегистрацииВсехДанных = ОбменМобильноеПриложениеПовтИсп.ПолучитьУзелДляРегистрацииДанных();
		
		// Выгружаем всю историю изменения логинов и паролей.
		Для Каждого Запись Из НаборЗаписей Цикл
			Набор = РегистрыСведений.ЛогиныИПаролиХранилище.СоздатьНаборЗаписей();
			Набор.Отбор.Владелец.Установить(Запись.Владелец, Истина);
			Набор.Отбор.Период.Установить(Запись.ПериодМП, Истина);
			ПланыОбмена.УдалитьРегистрациюИзменений(ВсеУзлы, Набор);
			
			Если УзлыОбмена.Количество() > 0 Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзлыОбмена, Набор);
			КонецЕсли;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаДляРегистрацииВсехДанных, Набор);
			
		КонецЦикла;		
		
	Исключение
		
		Инфо 			 = ИнформацияОбОшибке();
		МобильныеКлиенты = ОбменМобильноеПриложениеПовтИсп.ПолучитьВсеУзлы();
		
		СписокУзлов = "Узлы: ";
		Для Каждого Узел Из МобильныеКлиенты Цикл
			СписокУзлов = СписокУзлов + Символы.ПС + Строка(Узел);
		КонецЦикла;
		ТекстСообщение = СтрШаблон("Элемент данных: %1, %2
			|%3", Строка(НаборЗаписей), Строка(ТипЗнч(НаборЗаписей)), СписокУзлов);
		
		Для Каждого МобильныйКлиент Из МобильныеКлиенты Цикл
			РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьОшибку(ПодробноеПредставлениеОшибки(Инфо) 
				+ Символы.ПС + ТекстСообщение, Ложь, МобильныйКлиент);
		КонецЦикла;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьРегистрациюНаборЗаписейСвязьКомментариев(Знач НаборЗаписей) Экспорт
	
	Попытка
		ВсеУзлы		= ОбменМобильноеПриложениеПовтИсп.ПолучитьВсеУзлы();
		УзлыОбмена	= ПолучитьУзлыОбмена(НаборЗаписей);
		УзелОбменаДляРегистрацииВсехДанных = ОбменМобильноеПриложениеПовтИсп.ПолучитьУзелДляРегистрацииДанных();
		
		// Выгружаем всю историю изменения логинов и паролей.
		Для Каждого Запись Из НаборЗаписей Цикл
			Набор = РегистрыСведений.СвязьКомментариев.СоздатьНаборЗаписей();
			Набор.Отбор.Родитель.Установить(Запись.Родитель, Истина);
			Набор.Отбор.Ссылка.Установить(Запись.Ссылка, Истина);
			ПланыОбмена.УдалитьРегистрациюИзменений(ВсеУзлы, Набор);
			
			Если УзлыОбмена.Количество() > 0 Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзлыОбмена, Набор);
			КонецЕсли;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаДляРегистрацииВсехДанных, Набор);
			
		КонецЦикла;		
		
	Исключение
		
		Инфо 			 = ИнформацияОбОшибке();
		МобильныеКлиенты = ОбменМобильноеПриложениеПовтИсп.ПолучитьВсеУзлы();
		
		СписокУзлов = "Узлы: ";
		Для Каждого Узел Из МобильныеКлиенты Цикл
			СписокУзлов = СписокУзлов + Символы.ПС + Строка(Узел);
		КонецЦикла;
		ТекстСообщение = СтрШаблон("Элемент данных: %1, %2
			|%3", Строка(НаборЗаписей), Строка(ТипЗнч(НаборЗаписей)), СписокУзлов);
		
		Для Каждого МобильныйКлиент Из МобильныеКлиенты Цикл
			РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьОшибку(ПодробноеПредставлениеОшибки(Инфо) 
				+ Символы.ПС + ТекстСообщение, Ложь, МобильныйКлиент);
		КонецЦикла;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры	

Процедура ВыполнитьРегистрациюУдаленияЭлементаДанных(Знач ЭлементДанных) Экспорт

	Попытка
		
		ЭлементДанныхСсылка = ЭлементДанных.Ссылка;		
		ВсеУзлы = ОбменМобильноеПриложениеПовтИсп.ПолучитьВсеУзлы();
		УдаляемыйОбъект = Новый УдалениеОбъекта(ЭлементДанныхСсылка);
		УдаляемыйОбъект.Записать();
		Для Каждого УзелПолучатель Из ВсеУзлы Цикл 
        	ПланыОбмена.ЗарегистрироватьИзменения(УзелПолучатель, УдаляемыйОбъект); 
		КонецЦикла;
		
		УзелОбменаДляРегистрацииВсехДанных = ОбменМобильноеПриложениеПовтИсп.ПолучитьУзелДляРегистрацииДанных();
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаДляРегистрацииВсехДанных, ЭлементДанныхСсылка);

	Исключение

		Инфо 			 = ИнформацияОбОшибке();
		МобильныеКлиенты = ОбменМобильноеПриложениеПовтИсп.ПолучитьВсеУзлы();

		СписокУзлов = "Узлы: ";
		Для Каждого Узел Из МобильныеКлиенты Цикл
			СписокУзлов = СписокУзлов + Символы.ПС + Строка(Узел);
		КонецЦикла;             
		ТекстСообщение = СтрШаблон(НСтр("ru = 'Удаление элемента данных: %1, %2
                                         |%3'"), Строка(ЭлементДанных), Строка(ТипЗнч(ЭлементДанных)), СписокУзлов);

		Для Каждого МобильныйКлиент Из МобильныеКлиенты Цикл
			РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьОшибку(ПодробноеПредставлениеОшибки(Инфо) 
				+ Символы.ПС + ТекстСообщение, Ложь, МобильныйКлиент);
		КонецЦикла;

		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры

Процедура УдалитьРегистрациюИзмененийПослеФормированияСообщения(МобильныйКлиент, 
		МассивДанныхДляПередачиНаМобильныйКлиент, ПараметрыСинхронизации) Экспорт
	
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Начало удаления регистрации изменений.'"),	Ложь, МобильныйКлиент);

	Для Каждого ЭлементМассива Из МассивДанныхДляПередачиНаМобильныйКлиент Цикл

		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			ЭлементДанных = ЭлементМассива.Ссылка;
		Иначе
			ЭлементДанных = ЭлементМассива;
		КонецЕсли;

		Попытка 
			МетаданныеОбъекта = ЭлементДанных.Метаданные();
		Исключение
			МетаданныеОбъекта = Неопределено;
		КонецПопытки;	
				
		Если Не МетаданныеОбъекта = Неопределено 
			И Не Метаданные.ПланыОбмена.МобильноеПриложение.Состав.Найти(МетаданныеОбъекта) = Неопределено Тогда
			
			Если ТипЗНЧ(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ЛогиныИПаролиХранилище") Тогда
				Для Каждого Запись Из ЭлементДанных Цикл
					Набор = РегистрыСведений.ЛогиныИПаролиХранилище.СоздатьНаборЗаписей();
					Набор.Отбор.Владелец.Установить(Запись.Владелец, Истина);
					Набор.Отбор.Период.Установить(Запись.ПериодМП, Истина);
					ПланыОбмена.УдалитьРегистрациюИзменений(МобильныйКлиент, Набор);					
				КонецЦикла;
				ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, 
					МобильныйКлиент, ЭлементДанных, НСтр("ru = 'Регистрация изменений удалена.'"));
			Иначе	
				ПланыОбмена.УдалитьРегистрациюИзменений(МобильныйКлиент, ЭлементДанных);
				ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, 
					МобильныйКлиент, ЭлементДанных, НСтр("ru = 'Регистрация изменений удалена.'"));
			КонецЕсли;				
		КонецЕсли;
		
	КонецЦикла;	

	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Удаление регистрации изменений завершено.'"), Ложь, МобильныйКлиент);

КонецПроцедуры

Функция ПолучитьУзлыОбмена(ЭлементДанных) Экспорт

	ТипЭлемента = ТипЗнч(ЭлементДанных);
		
	Если ТипЭлемента = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ГруппыЗаданий")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ГруппыПользователей")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.КатегорииЗаданий")		
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.КонтактныеЛица")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ЛинииПоддержки") 
        ИЛИ ТипЭлемента = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ОценкиЗаданий")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Подразделения")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ПотенциальныеКлиенты")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Проекты")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Процессы")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Сервисы")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Сотрудники")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.СпособыСозданияЗаданий")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Спринты")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.СтраныМира")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Теги")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ТипыПроцессов")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Услуги")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ФизическиеЛица")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ЭтапыПроцессов")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ВидыНоменклатуры")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Номенклатура") 
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.КарточкиНоменклатуры")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ВидыМестХранения")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.МестаХранения")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.КатегорииЛогиновИПаролей")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ВидыРабот") Тогда
		
		Возврат ОбменМобильноеПриложениеПовтИсп.ПолучитьВсеУзлы();
		
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Комментарии") Тогда
		
		Возврат ПолучитьУзлыДляСправочникаКомментарии(ЭлементДанных);
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.Задание") Тогда		
		
		Возврат ПолучитьУзлыДляДокументаЗадание(ЭлементДанных);
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда		
		
		Возврат ПолучитьУзлыДляДокументаЕжедневныйОтчет(ЭлементДанных);
		
	ИначеЕсли ТипЭлемента =  Тип("СправочникСсылка.ПользователиМобильныхПриложений") Тогда	
		
		Если ЗначениеЗаполнено(ЭлементДанных.Пользователь) Тогда
			Возврат ОбменМобильноеПриложениеПовтИсп.ПолучитьУзлыОбменаПоВладельцу(ЭлементДанных.Пользователь);
		Иначе
			Возврат Новый Массив;
		КонецЕсли;	
		
	ИначеЕсли ТипЭлемента =  Тип("РегистрСведенийНаборЗаписей.НастройкиПользователей") Тогда
		
		Если ЭлементДанных.Количество() > 0 Тогда
			//@skip-warning
			Пользователь = ЭлементДанных.Отбор.Пользователь.Значение;
			Возврат ОбменМобильноеПриложениеПовтИсп.ПолучитьУзлыОбменаПоВладельцу(Пользователь);
		Иначе
			Возврат Новый Массив;
		КонецЕсли;	
		
	ИначеЕсли ТипЭлемента =  Тип("РегистрСведенийНаборЗаписей.СвязьКомментариев") Тогда	
		
		Если ЭлементДанных.Количество() > 0 Тогда
			//@skip-warning
			Комментарий = ЭлементДанных.Отбор.Родитель.Значение;
			Возврат ПолучитьУзлыДляСправочникаКомментарии(Комментарий);
		Иначе
			Возврат Новый Массив;
		КонецЕсли;	
		
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ЗаданиеПрисоединенныеФайлы")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.КомментарииПрисоединенныеФайлы") Тогда
		
		ВладелецФайла  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДанных, "ВладелецФайла", Истина);
		Возврат ПолучитьУзлыОбмена(ВладелецФайла);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ЛогиныИПароли") Тогда
		Возврат ПолучитьУзлыЛогиныИПароли(ЭлементДанных);
		
	ИначеЕсли ТипЭлемента =  Тип("РегистрСведенийНаборЗаписей.ЛогиныИПаролиХранилище") Тогда	
		
		Если ЭлементДанных.Количество() > 0 Тогда
			Владелец = ЭлементДанных.Отбор.Владелец.Значение;
			Возврат ПолучитьУзлыЛогиныИПароли(Владелец);
		Иначе
			Возврат Новый Массив;
		КонецЕсли;
		
	Иначе		
				
		Возврат Новый Массив;
		
	КонецЕсли;		
		
КонецФункции

Функция ПолучитьУзлыДляСправочникаКомментарии(Знач КомментарийСсылка) Экспорт
	
	МассивУзлов = Новый Массив;
	Если ЗначениеЗаполнено(КомментарийСсылка.ВладелецКомментария) 
		И ТипЗнч(КомментарийСсылка.ВладелецКомментария) = Тип("ДокументСсылка.Задание") Тогда		
		
		МассивПользователейПоЗаданию = Новый Массив;		
		
		Если КомментарийСсылка.Приватный = Истина 
			И КомментарийСсылка.Адресаты.Количество() > 0 Тогда
			
			ТипПользователь 	   = Тип("СправочникСсылка.Пользователи");
			ТипГруппаПользователей = Тип("СправочникСсылка.ГруппыПользователей");
			
			Для Каждого СтрокаАдресат Из КомментарийСсылка.Адресаты Цикл
				Если ТипЗнч(СтрокаАдресат.Адресат) = ТипПользователь Тогда
					Если МассивПользователейПоЗаданию.Найти(СтрокаАдресат.Адресат) = Неопределено Тогда
						МассивПользователейПоЗаданию.Добавить(СтрокаАдресат.Адресат);
					КонецЕсли;	
				ИначеЕсли ТипЗнч(СтрокаАдресат.Адресат) = ТипГруппаПользователей Тогда
					Для Каждого СтрокаСостав Из СтрокаАдресат.Адресат.Состав Цикл
						Если МассивПользователейПоЗаданию.Найти(СтрокаСостав.Пользователь) = Неопределено Тогда
							МассивПользователейПоЗаданию.Добавить(СтрокаСостав.Пользователь);
						КонецЕсли;	
					КонецЦикла;						
				КонецЕсли;	
			КонецЦикла;				
			
		Иначе
			
			МассивПользователейПоЗаданию = ПолучитьВсехПользователейИзЗадания(КомментарийСсылка.ВладелецКомментария);
			
		КонецЕсли;
		
		Если МассивПользователейПоЗаданию.Количество() > 0 Тогда
			МассивУзлов = ПолучитьУзлыПоПользователям(МассивПользователейПоЗаданию);
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат МассивУзлов;
	
КонецФункции

Функция ПолучитьУзлыДляДокументаЗадание(Знач ЗаданиеСсылка) Экспорт
		
	МассивПользователей = 
		РегистрыСведений.СведенияОДоступностиЗаданийПользователям.ПолучитьВсехПользователейПоЗаданию(ЗаданиеСсылка);
	
	Если МассивПользователей.Количество() > 0 Тогда
		
		Возврат ПолучитьУзлыПоПользователям(МассивПользователей);
		
	Иначе	
		
		Возврат Новый Массив;
		
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьУзлыДляДокументаЕжедневныйОтчет(Знач ЕжедневныйОтчетСсылка) Экспорт
		
	Если ЗначениеЗаполнено(ЕжедневныйОтчетСсылка.Пользователь) Тогда
		МассивПользователей = 
			УправлениеITОтделом8УФПовтИсп.СписокПодчиненныхПользователей(ЕжедневныйОтчетСсылка.Пользователь, Истина);
		Возврат ПолучитьУзлыПоПользователям(МассивПользователей);
		
	Иначе		
		Возврат Новый Массив;
		
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьУзлыПоПользователям(Знач Пользователи) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	Запрос.УстановитьПараметр("ЭтотУзел"    , ПланыОбмена.МобильноеПриложение.ЭтотУзел());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МобильноеПриложение.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
		|ГДЕ
		|	МобильноеПриложение.Пользователь В(&Пользователи)
		|	И НЕ МобильноеПриложение.ПометкаУдаления
		|	И НЕ МобильноеПриложение.Ссылка = &ЭтотУзел";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

// Обрабочик регламентного задания "ОбменМобильноеПриложениеРегистрацияИзменений".
//
Процедура ВыполнитьРегистрациюИзмененийДляМобильныхУстройств() Экспорт

	УзелОбмена = ОбменМобильноеПриложениеПовтИсп.ПолучитьУзелДляРегистрацииДанных();

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого ЭлементСоставаПланаОбмена Из УзелОбмена.Метаданные().Состав Цикл

		МетаданныеЭлемента		= ЭлементСоставаПланаОбмена.Метаданные;
		МассивИзмененныхДанных	= Новый Массив;				
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеЭлемента) Тогда
			ПолучитьИзмененныеДанныеРегистра(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеЭлемента) Тогда
			ПолучитьИзмененнуюКонстанту(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		Иначе
			ПолучитьИзмененныеДанныеСсылочногоТипа(УзелОбмена, МассивИзмененныхДанных, 
				МетаданныеЭлемента, Истина);

		КонецЕсли;

		Для Каждого ЭлементДанных Из МассивИзмененныхДанных Цикл
			Если ТипЗнч(ЭлементДанных) = Тип("Структура") Тогда
				Если ЭлементДанных.Свойство("УдалениеОбъекта") Тогда
					ВыполнитьРегистрациюУдаленияЭлементаДанных(ЭлементДанных);
				Иначе
					ВыполнитьРегистрациюЭлементаДанных(ЭлементДанных.Ссылка);
				КонецЕсли;	
			Иначе
				ВыполнитьРегистрациюЭлементаДанных(ЭлементДанных);
			КонецЕсли;	

		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьИзмененныеДанныеРегистра(УзелОбмена, МассивИзмененныхДанных, 
		МетаданныеЭлемента, ТолькоКоличество = Ложь) Экспорт

	ИмяМетаданныхЭлемента       = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();

	// Сначала считываются все наборы значений измерений, соответствующие записям регистра,
	//	изменения которых зарегистрированы на указанном узле плана обмена.
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	%1
		|ИЗ
		|	%2.Изменения КАК ИзмененияДанныхРегистра
		|ГДЕ
		|	ИзмененияДанныхРегистра.Узел = (&Узел)";

	СтрокаРеквизитыВЗапросе = "";
	Измерения = МетаданныеЭлемента.Измерения;
	Для Каждого Измерение Из Измерения Цикл

		СтрокаДляДобавления = 
			"ИзмененияДанныхРегистра." + Измерение.Имя + " Как " + Измерение.Имя;

		Если ЗначениеЗаполнено(СтрокаРеквизитыВЗапросе) Тогда
			СтрокаРеквизитыВЗапросе = СтрокаРеквизитыВЗапросе + ", " + СтрокаДляДобавления;
		Иначе
			СтрокаРеквизитыВЗапросе = СтрокаДляДобавления;
		КонецЕсли;

	КонецЦикла;

	Если ТолькоКоличество ИЛИ ТипЗнч(УзелОбмена) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " = ", " В ");
	КонецЕсли;

	ЗапросИзменения = Новый Запрос;
	ЗапросИзменения.УстановитьПараметр("Узел", УзелОбмена);
	ЗапросИзменения.Текст = СтрШаблон(ТекстЗапроса,	СтрокаРеквизитыВЗапросе, ПолноеИмяМетаданныхЭлемента);

	Выборка = ЗапросИзменения.Выполнить().Выбрать();

	Если Не ТолькоКоличество Тогда

		Пока Выборка.Следующий() Цикл

			ЗапросДанныеРегистра = Новый Запрос;

			// После того, как был считан очередной набор значений измерений регистра,
			//	по этому набору значений формируется набор записей регистра.
			ТекстЗапросаДляЧтенияДанныхРегистра = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	%1
				|ИЗ
				|	%2 КАК Регистр
				|%3";

			// Добавление измерений регистра в секцию "Выбрать"
			СтрокаВыбрать = "";
			Для Каждого Измерение Из Измерения Цикл
				Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
					СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Измерение.Имя;
				Иначе
					СтрокаВыбрать = "Регистр." + Измерение.Имя;
				КонецЕсли;
			КонецЦикла;

			// Добавление ресурсов регистра в секцию "Выбрать"
			Ресурсы = МетаданныеЭлемента.Ресурсы;
			Для Каждого Ресурс Из Ресурсы Цикл
				Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
					СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Ресурс.Имя;
				Иначе
					СтрокаВыбрать = "Регистр." + Ресурс.Имя;
				КонецЕсли;
			КонецЦикла;

			// Добавление реквизитов регистра в секцию "Выбрать"
			Реквизиты = МетаданныеЭлемента.Реквизиты;
			Для Каждого Реквизит Из Реквизиты Цикл
				Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
					СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Реквизит.Имя;
				Иначе
					СтрокаВыбрать = "Регистр." + Реквизит.Имя;
				КонецЕсли;
			КонецЦикла;

			// Установка отбора в запрос на основании значений измерений регистра
			СтрокаГде = "";
			Для Каждого Измерение Из Измерения Цикл
				Если ЗначениеЗаполнено(СтрокаГде) Тогда
					СтрокаГде = СтрокаГде 
						+ " И " + "Регистр." + Измерение.Имя + " = &" + Измерение.Имя;
				Иначе
					СтрокаГде = "ГДЕ Регистр." + Измерение.Имя + " = &" + Измерение.Имя;
				КонецЕсли;
				ЗапросДанныеРегистра.УстановитьПараметр(Измерение.Имя, Выборка[Измерение.Имя]);
			КонецЦикла;

			// После получения всех данных регистра запросом формируется набор записей регистра,
			// так как дальнейшая обработка данных производится именно над наборами записей.
			НаборЗаписейРегистра = РегистрыСведений[ИмяМетаданныхЭлемента].СоздатьНаборЗаписей();
			Для Каждого Измерение Из Измерения Цикл
				НаборЗаписейРегистра.Отбор[Измерение.Имя].Установить(Выборка[Измерение.Имя]);
			КонецЦикла;

			ЗапросДанныеРегистра.Текст = СтрШаблон(
				ТекстЗапросаДляЧтенияДанныхРегистра,
				СтрокаВыбрать,
				ПолноеИмяМетаданныхЭлемента,
				СтрокаГде);

			ВыборкаДанныеРегистра = ЗапросДанныеРегистра.Выполнить().Выбрать();
			Пока ВыборкаДанныеРегистра.Следующий() Цикл
				НоваяЗапись = НаборЗаписейРегистра.Добавить();
				ЗаполнитьЗначенияСвойств(Новаязапись, ВыборкаДанныеРегистра);
			КонецЦикла;
			
			// Добавление сформированного набора записей регистра в массив измененных данных.
			// Этот массив будет передан в дальнейшую обработку.
			МассивИзмененныхДанных.Добавить(НаборЗаписейРегистра);
			
		КонецЦикла;

	КонецЕсли;
	
	Возврат Выборка.Количество();

КонецФункции

Функция ПолучитьИзмененнуюКонстанту(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента,	
	ТолькоКоличество = Ложь) Экспорт

	ИмяМетаданныхЭлемента       = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаИзменения.НомерСообщения
		|ИЗ
		|	%1.Изменения КАК ТаблицаИзменения
		|ГДЕ
		|	ТаблицаИзменения.Узел = (&Узел)";

	Если ТолькоКоличество ИЛИ ТипЗнч(УзелОбмена) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " = ", " В ");
	КонецЕсли;

	ЗапросИзмененияКонстанты = Новый Запрос;
	ЗапросИзмененияКонстанты.УстановитьПараметр("Узел", УзелОбмена);
	ЗапросИзмененияКонстанты.Текст = СтрШаблон(	ТекстЗапроса, ПолноеИмяМетаданныхЭлемента);

	РезультатЗапроса = ЗапросИзмененияКонстанты.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		Если НЕ ТолькоКоличество Тогда
			МассивИзмененныхДанных.Добавить(Константы[ИмяМетаданныхЭлемента]);
		КонецЕсли;

	КонецЕсли;

	Возврат 1;

КонецФункции

Функция ПолучитьИзмененныеДанныеСсылочногоТипа(УзелОбмена, МассивИзмененныхДанных, Знач МетаданныеЭлемента,
	СПометкойУдаления = Ложь, ТолькоКоличество = Ложь) Экспорт

	//@skip-warning
	ИмяМетаданныхЭлемента       = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();
	ЭлементЗапроса              = ?(СПометкойУдаления, 
		"ТаблицаИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,", 
		"");

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	%2
		|	ТаблицаИзменения.Ссылка
		|ИЗ
		|	%1.Изменения КАК ТаблицаИзменения
		|ГДЕ
		|	ТаблицаИзменения.Узел = (&Узел)";

	Если ТолькоКоличество ИЛИ ТипЗнч(УзелОбмена) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " = ", " В ");
	КонецЕсли;

	ЗапросИзмененияДанных 		= Новый Запрос;
	ЗапросИзмененияДанных.УстановитьПараметр("Узел", УзелОбмена);
	ЗапросИзмененияДанных.Текст = СтрШаблон(ТекстЗапроса, ПолноеИмяМетаданныхЭлемента, ЭлементЗапроса);
	РезультатЗапроса            = ЗапросИзмененияДанных.Выполнить();
	Выборка                     = РезультатЗапроса.Выбрать();

	Если Не ТолькоКоличество Тогда
		Пока Выборка.Следующий() Цикл
			Если СПометкойУдаления Тогда				
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Ссылка", Выборка.Ссылка);
				Если Выборка.ПометкаУдаления = Истина ИЛИ Выборка.ПометкаУдаления = Ложь Тогда 
					СтруктураДанных.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
					МассивИзмененныхДанных.Добавить(СтруктураДанных);
				Иначе
					СтруктураДанных.Вставить("УдалениеОбъекта", Истина);
					МассивИзмененныхДанных.Добавить(СтруктураДанных);					
				КонецЕсли;	
			Иначе
				МассивИзмененныхДанных.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
		
	Возврат Выборка.Количество();

КонецФункции

Функция ЗарегистрироватьСправочникиДляПервойЗагрузки(МобильныйКлиент, ПараметрыСинхронизации) Экспорт
	
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Подготовка справочников для первой загрузки'"), Ложь, МобильныйКлиент);
		
	МассивДанныхДляРегистрации = Новый Массив();	
	ВыбратьДанныеСправочниковДляРегистрации(МассивДанныхДляРегистрации);
	ВыполнитьРегистрациюДанных(МобильныйКлиент, ПараметрыСинхронизации, МассивДанныхДляРегистрации);

	ВсегоОбъектов = МассивДанныхДляРегистрации.Количество();
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтрШаблон(НСтр("ru = 'Подготовка справочников для первой загрузки завершена (%1 обьектов)'"),
		ВсегоОбъектов), Ложь, МобильныйКлиент);

	Возврат Истина;

КонецФункции

Функция ЗарегистрироватьРегистрыДляПервойЗагрузки(МобильныйКлиент, ПараметрыСинхронизации) Экспорт
		
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Подготовка регистров для первой загрузки'"), Ложь, МобильныйКлиент);
		
	Если ОбменМобильноеПриложениеПовтИсп.ПодсистемаЛогиныИПаролиДоступнаТекущемуПользователю() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПланыОбмена.ЗарегистрироватьИзменения(МобильныйКлиент, Метаданные.РегистрыСведений.ЛогиныИПаролиХранилище);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
	
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Подготовка регистров для первой загрузки завершена'"), Ложь, МобильныйКлиент);

	Возврат Истина;

КонецФункции

Процедура ВыбратьДанныеСправочниковДляРегистрации(МассивДанныхДляРегистрации) Экспорт
			
	Запрос = Новый Запрос;		
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыПользователей.Ссылка,
		|	2
		|ИЗ
		|	Справочник.ГруппыПользователей КАК ГруппыПользователей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	3
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка,
		|	4
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыЗаданий.Ссылка,
		|	5
		|ИЗ
		|	Справочник.ГруппыЗаданий КАК ГруппыЗаданий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КатегорииЗаданий.Ссылка,
		|	6
		|ИЗ
		|	Справочник.КатегорииЗаданий КАК КатегорииЗаданий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Спринты.Ссылка,
		|	7
		|ИЗ
		|	Справочник.Спринты КАК Спринты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭтапыПроцессов.Ссылка,
		|	8
		|ИЗ
		|	Справочник.ЭтапыПроцессов КАК ЭтапыПроцессов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Процессы.Ссылка,
		|	9
		|ИЗ
		|	Справочник.Процессы КАК Процессы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	10
		|ИЗ
		|	Справочник.Организации КАК Организации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Подразделения.Ссылка,
		|	11
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	12
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка,
		|	13
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	14
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОценкиЗаданий.Ссылка,
		|	15
		|ИЗ
		|	Справочник.ОценкиЗаданий КАК ОценкиЗаданий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сервисы.Ссылка,
		|	16
		|ИЗ
		|	Справочник.Сервисы КАК Сервисы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Проекты.Ссылка,
		|	17
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СпособыСозданияЗаданий.Ссылка,
		|	18
		|ИЗ
		|	Справочник.СпособыСозданияЗаданий КАК СпособыСозданияЗаданий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Теги.Ссылка,
		|	19
		|ИЗ
		|	Справочник.Теги КАК Теги
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтраныМира.Ссылка,
		|	20
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛинииПоддержки.Ссылка,
		|	21
		|ИЗ
		|	Справочник.ЛинииПоддержки КАК ЛинииПоддержки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПотенциальныеКлиенты.Ссылка,
		|	22
		|ИЗ
		|	Справочник.ПотенциальныеКлиенты КАК ПотенциальныеКлиенты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Услуги.Ссылка,
		|	23
		|ИЗ
		|	Справочник.Услуги КАК Услуги
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТипыПроцессов.Ссылка,
		|	24
		|ИЗ
		|	Справочник.ТипыПроцессов КАК ТипыПроцессов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыРабот.Ссылка,
		|	25
		|ИЗ
		|	Справочник.ВидыРабот КАК ВидыРабот";
	
	ТекстЗапросаЛогиныПароли =
		" ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка,
		|	26
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	27
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КарточкиНоменклатуры.Ссылка,
		|	28
		|ИЗ
		|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыМестХранения.Ссылка,
		|	29
		|ИЗ
		|	Справочник.ВидыМестХранения КАК ВидыМестХранения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МестаХранения.Ссылка,
		|	30
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КатегорииЛогиновИПаролей.Ссылка,
		|	31
		|ИЗ
		|	Справочник.КатегорииЛогиновИПаролей КАК КатегорииЛогиновИПаролей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛогиныИПароли.Ссылка,
		|	32
		|ИЗ
		|	Справочник.ЛогиныИПароли КАК ЛогиныИПароли";
	
	ТекстЗапросаОкончание	=
		" УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Если ОбменМобильноеПриложениеПовтИсп.ПодсистемаЛогиныИПаролиДоступнаТекущемуПользователю() Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаЛогиныПароли;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаОкончание;
	
	Запрос.Текст 			= ТекстЗапроса;
	РезультатЗапроса        = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивДанныхДляРегистрации.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
		
КонецПроцедуры

Функция ЗарегистрироватьЗаданияДляПервойЗагрузки(МобильныйКлиент, ПараметрыСинхронизации) Экспорт
	
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Подготовка заданий и комментариев для первой загрузки'"), Ложь, МобильныйКлиент);
		
	Пользователь               = Пользователи.ТекущийПользователь();
	МассивДанныхДляРегистрации = Новый Массив();	
	ВыбратьДанныеДокументЗаданиеДляРегистрации(Пользователь, ПараметрыСинхронизации, МассивДанныхДляРегистрации);
	ВыполнитьРегистрациюДанных(МобильныйКлиент, ПараметрыСинхронизации, МассивДанныхДляРегистрации);

	ВсегоОбъектов = МассивДанныхДляРегистрации.Количество();
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтрШаблон(НСтр("ru = 'Подготовка заданий и комментариев для первой загрузки завершена (%1 объектов)'"),
		ВсегоОбъектов), Ложь, МобильныйКлиент);

	Возврат Истина;
	
КонецФункции

Функция ЗарегистрироватьЕжедневныеОтчетыДляПервойЗагрузки(МобильныйКлиент, ПараметрыСинхронизации) Экспорт
	
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Подготовка ежедневных отчетов для первой загрузки'"), Ложь, МобильныйКлиент);
		
	Пользователь               = Пользователи.ТекущийПользователь();
	МассивДанныхДляРегистрации = Новый Массив();	
	ВыбратьДанныеДокументЕжедневныйОтчетДляРегистрации(Пользователь, ПараметрыСинхронизации, 
		МассивДанныхДляРегистрации);
	ВыполнитьРегистрациюДанных(МобильныйКлиент, ПараметрыСинхронизации, МассивДанныхДляРегистрации);

	ВсегоОбъектов = МассивДанныхДляРегистрации.Количество();
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтрШаблон(НСтр("ru = 'Подготовка ежедневных отчетов для первой загрузки завершена (%1 объектов)'"),
		ВсегоОбъектов), Ложь, МобильныйКлиент);

	Возврат Истина;
	
КонецФункции

Процедура ВыбратьДанныеДокументЕжедневныйОтчетДляРегистрации(Пользователь, ПараметрыСинхронизации, 
		МассивДанныхДляРегистрации) Экспорт
	
	ПериодПервичнойЗагрузки = 0;
	ТекущаяДата				= НачалоДня(ТекущаяДатаСеанса());
	ПараметрыСинхронизации.Свойство("ПериодПервичнойЗагрузки", ПериодПервичнойЗагрузки);
	
	Если ПериодПервичнойЗагрузки <> Неопределено И ПериодПервичнойЗагрузки > 0 Тогда
		НачалоПериода = ТекущаяДата - ПериодПервичнойЗагрузки * 86400;
	Иначе
		НачалоПериода = ТекущаяДата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕжедневныйОтчет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|ГДЕ
		|	ЕжедневныйОтчет.Дата >= &НачалоПериода
		|	И ЕжедневныйОтчет.Пользователь В (&СписокПользователей)
		|	И ЕжедневныйОтчет.ПометкаУдаления = ЛОЖЬ
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Запрос.УстановитьПараметр("СписокПользователей", 
		УправлениеITОтделом8УФПовтИсп.СписокПодчиненныхПользователей(Пользователь, Истина));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДанныхДляРегистрации.Добавить(Выборка.Ссылка);		
	КонецЦикла;
			
КонецПроцедуры

Процедура ВыбратьДанныеДокументЗаданиеДляРегистрации(Пользователь, ПараметрыСинхронизации, 
		МассивДанныхДляРегистрации) Экспорт
	
	ПериодПервичнойЗагрузки = 0;
	ТекущаяДата				= НачалоДня(ТекущаяДатаСеанса());
	ПараметрыСинхронизации.Свойство("ПериодПервичнойЗагрузки", ПериодПервичнойЗагрузки);
	
	Если ПериодПервичнойЗагрузки <> Неопределено И ПериодПервичнойЗагрузки > 0 Тогда
		НачалоПериода = ТекущаяДата - ПериодПервичнойЗагрузки * 86400;
	Иначе
		НачалоПериода = ТекущаяДата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДокументЗадание.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Задание КАК ДокументЗадание
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОДоступностиЗаданийПользователям КАК СведенияОДоступностиЗаданийПользователям
		|		ПО ДокументЗадание.Ссылка = СведенияОДоступностиЗаданийПользователям.Задание
		|ГДЕ
		|	СведенияОДоступностиЗаданийПользователям.Доступность = ИСТИНА
		|	И СведенияОДоступностиЗаданийПользователям.Пользователь = &Пользователь
		|	И ВЫБОР
		|			КОГДА НЕ &ИзменятьЗавершенныеЗадания
		|				ТОГДА ВЫБОР
		|						КОГДА ДокументЗадание.Завершено
		|							ТОГДА ЛОЖЬ
		|						ИНАЧЕ ИСТИНА
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ДокументЗадание.Завершено
		|						ТОГДА ВЫБОР
		|								КОГДА ДокументЗадание.ДатаЗавершения >= &НачалоПериода
		|									ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументЗадание.Дата";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ИзменятьЗавершенныеЗадания", 
		УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИзменятьЗавершенныеЗадания"));
		
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	МассивЗаданий = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивЗаданий.Добавить(Выборка.Ссылка);
		МассивДанныхДляРегистрации.Добавить(Выборка.Ссылка);				
	КонецЦикла;
	
	Если МассивЗаданий.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Комментарии.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Комментарии КАК Комментарии
			|ГДЕ
			|	Комментарии.ВладелецКомментария В(&МассивЗаданий)
			|	И НЕ Комментарии.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("МассивЗаданий", МассивЗаданий);		
		РезультатЗапроса 	   = Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивДанныхДляРегистрации.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			
			НаборЗаписей = РегистрыСведений.СвязьКомментариев.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Родитель.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				Для Каждого СтрокаНабора Из НаборЗаписей Цикл					
					НаборЗаписейДляРегистрации = РегистрыСведений.СвязьКомментариев.СоздатьНаборЗаписей();
					НаборЗаписейДляРегистрации.Отбор.Родитель.Установить(СтрокаНабора.Родитель);
					НаборЗаписейДляРегистрации.Отбор.Ссылка.Установить(СтрокаНабора.Ссылка);
					НоваяЗапись = НаборЗаписейДляРегистрации.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаНабора);
					МассивДанныхДляРегистрации.Добавить(НаборЗаписейДляРегистрации);
				КонецЦикла;					
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗарегистрироватьНастройкиПользователяДляПервойЗагрузе(МобильныйКлиент, ПараметрыСинхронизации) Экспорт
	
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Подготовка настроек пользователя по-умолчанию для первой загрузки'"), Ложь, МобильныйКлиент);
	Пользователь               = Пользователи.ТекущийПользователь();
	МассивДанныхДляРегистрации = Новый Массив();	
	ВыбратьДанныеНастроекПользователяДляРегистрации(Пользователь, ПараметрыСинхронизации, МассивДанныхДляРегистрации);
	ВыполнитьРегистрациюДанных(МобильныйКлиент, ПараметрыСинхронизации, МассивДанныхДляРегистрации);

	ВсегоОбъектов = МассивДанныхДляРегистрации.Количество();
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформацию(СтрШаблон(
		НСтр("ru = 'Подготовка настроек пользователя по-умолчанию для первой загрузки завершена (%1 обьектов)'"),
			ВсегоОбъектов), Ложь, МобильныйКлиент);	
	
КонецПроцедуры
																		
Функция ВыбратьДанныеНастроекПользователяДляРегистрации(Пользователь, ПараметрыСинхронизации, 
	МассивДанныхДляРегистрации) Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		Если СтрокаНабора.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ДобавлятьСебяВНаблюдателиДляВсехНовыхЗадания 
			И СтрокаНабора.Значение = Истина Тогда
				// Проверка ролей.
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
					Пользователь.ИдентификаторПользователяИБ);
				Если ПользовательИБ <> Неопределено Тогда			
					Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ServiceDeskПросмотрЧужихЗаданий) 
						ИЛИ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
						НаборЗаписейДляРегистрации = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
						НаборЗаписейДляРегистрации.Отбор.Пользователь.Установить(Пользователь);
						НаборЗаписейДляРегистрации.Отбор.Настройка.Установить(
							ПланыВидовХарактеристик.НастройкиПользователей.ДобавлятьСебяВНаблюдателиДляВсехНовыхЗадания);
						НоваяЗапись = НаборЗаписейДляРегистрации.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаНабора);
						МассивДанныхДляРегистрации.Добавить(НаборЗаписейДляРегистрации);
					КонецЕсли;
				КонецЕсли;
				
		ИначеЕсли СтрокаНабора.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойИнициатор
			И ЗначениеЗаполнено(СтрокаНабора.Значение) Тогда	
				НаборЗаписейДляРегистрации = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
				НаборЗаписейДляРегистрации.Отбор.Пользователь.Установить(Пользователь);
				НаборЗаписейДляРегистрации.Отбор.Настройка.Установить(
					ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойИнициатор);
				НоваяЗапись = НаборЗаписейДляРегистрации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаНабора);
				МассивДанныхДляРегистрации.Добавить(НаборЗаписейДляРегистрации);
				
		ИначеЕсли СтрокаНабора.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойПроцесс
			И ЗначениеЗаполнено(СтрокаНабора.Значение) Тогда	
				НаборЗаписейДляРегистрации = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
				НаборЗаписейДляРегистрации.Отбор.Пользователь.Установить(Пользователь);
				НаборЗаписейДляРегистрации.Отбор.Настройка.Установить(
					ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойПроцесс);
				НоваяЗапись = НаборЗаписейДляРегистрации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаНабора);
				МассивДанныхДляРегистрации.Добавить(НаборЗаписейДляРегистрации);
				
		ИначеЕсли СтрокаНабора.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойПроцессДляСоздаваемыхДочернихЗаданий
			И ЗначениеЗаполнено(СтрокаНабора.Значение) Тогда	
				НаборЗаписейДляРегистрации = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
				НаборЗаписейДляРегистрации.Отбор.Пользователь.Установить(Пользователь);
				НаборЗаписейДляРегистрации.Отбор.Настройка.Установить(
					ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойПроцессДляСоздаваемыхДочернихЗаданий);
				НоваяЗапись = НаборЗаписейДляРегистрации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаНабора);
				МассивДанныхДляРегистрации.Добавить(НаборЗаписейДляРегистрации);		
				
		ИначеЕсли СтрокаНабора.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОткрыватьНеНовоеЗаданиеНаВкладеСообщение
			И СтрокаНабора.Значение = Истина Тогда	
				НаборЗаписейДляРегистрации = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
				НаборЗаписейДляРегистрации.Отбор.Пользователь.Установить(Пользователь);
				НаборЗаписейДляРегистрации.Отбор.Настройка.Установить(
					ПланыВидовХарактеристик.НастройкиПользователей.ОткрыватьНеНовоеЗаданиеНаВкладеСообщение);
				НоваяЗапись = НаборЗаписейДляРегистрации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаНабора);
				МассивДанныхДляРегистрации.Добавить(НаборЗаписейДляРегистрации);
				
		ИначеЕсли СтрокаНабора.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ПриДобавленииСообщенияПоУмолчаниюНеУведомлятьИнициатора
			И СтрокаНабора.Значение = Истина Тогда	
				НаборЗаписейДляРегистрации = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
				НаборЗаписейДляРегистрации.Отбор.Пользователь.Установить(Пользователь);
				НаборЗаписейДляРегистрации.Отбор.Настройка.Установить(
					ПланыВидовХарактеристик.НастройкиПользователей.ПриДобавленииСообщенияПоУмолчаниюНеУведомлятьИнициатора);
				НоваяЗапись = НаборЗаписейДляРегистрации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаНабора);
				МассивДанныхДляРегистрации.Добавить(НаборЗаписейДляРегистрации);
				
		ИначеЕсли СтрокаНабора.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.УпорядочиваниеКомментариевВЗадании
			И ЗначениеЗаполнено(СтрокаНабора.Значение) Тогда
				НаборЗаписейДляРегистрации = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
				НаборЗаписейДляРегистрации.Отбор.Пользователь.Установить(Пользователь);
				НаборЗаписейДляРегистрации.Отбор.Настройка.Установить(
					ПланыВидовХарактеристик.НастройкиПользователей.УпорядочиваниеКомментариевВЗадании);
				НоваяЗапись = НаборЗаписейДляРегистрации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаНабора);
				МассивДанныхДляРегистрации.Добавить(НаборЗаписейДляРегистрации);		
				
		ИначеЕсли СтрокаНабора.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация
			И ЗначениеЗаполнено(СтрокаНабора.Значение) Тогда
				НаборЗаписейДляРегистрации = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
				НаборЗаписейДляРегистрации.Отбор.Пользователь.Установить(Пользователь);
				НаборЗаписейДляРегистрации.Отбор.Настройка.Установить(
					ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация);
				НоваяЗапись = НаборЗаписейДляРегистрации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаНабора);
				МассивДанныхДляРегистрации.Добавить(НаборЗаписейДляРегистрации);
				
		ИначеЕсли СтрокаНабора.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделение
			И ЗначениеЗаполнено(СтрокаНабора.Значение) Тогда
				НаборЗаписейДляРегистрации = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
				НаборЗаписейДляРегистрации.Отбор.Пользователь.Установить(Пользователь);
				НаборЗаписейДляРегистрации.Отбор.Настройка.Установить(
					ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделение);
				НоваяЗапись = НаборЗаписейДляРегистрации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаНабора);
				МассивДанныхДляРегистрации.Добавить(НаборЗаписейДляРегистрации);		
		КонецЕсли;	
	КонецЦикла;
	
КонецФункции

Функция ПолучитьУзлыЛогиныИПароли(Знач ЛогинПарольСсылка) Экспорт
	
	// 1. Проверка по типу пароля.
	// 2. Проверка доступности элемента пользователю в проц-ре "ОбъектДоступенТекущемуПользователю". 
	
	МассивУзлов = Новый Массив;
	ТипПароля	= ЛогинПарольСсылка.ТипПароля;
	Если Не ЗначениеЗаполнено(ТипПароля) Тогда
		Возврат МассивУзлов;
	КонецЕсли;
	
	Если ТипПароля = Перечисления.ТипыПаролей.Общий Тогда
		МассивУзлов = ОбменМобильноеПриложениеПовтИсп.ПолучитьВсеУзлы();
		
	ИначеЕсли ТипПароля = Перечисления.ТипыПаролей.ГруппыПользователей Тогда
		
		Если ЗначениеЗаполнено(ЛогинПарольСсылка.ГруппаПользователей) Тогда
			
			МассивПользователей = Новый Массив;			
			Для Каждого Элем Из ЛогинПарольСсылка.ГруппаПользователей.Состав Цикл
				МассивПользователей.Добавить(Элем.Пользователь);
			КонецЦикла;
			
			Если МассивПользователей.Количество() > 0 Тогда 
				МассивУзлов = ПолучитьУзлыПоПользователям(МассивПользователей);
			Иначе
				Возврат МассивУзлов;
			КонецЕсли;
			
		Иначе
			Возврат МассивУзлов;
			
		КонецЕсли;	
		
	Иначе // Личный.
		Если ЗначениеЗаполнено(ЛогинПарольСсылка.Автор) Тогда			
			МассивУзлов = ОбменМобильноеПриложениеПовтИсп.ПолучитьУзлыОбменаПоВладельцу(ЛогинПарольСсылка.Автор);
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат МассивУзлов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаданиеСоответствуетФильтрамПользователя(Знач ЗаданиеСсылка, Знач ФильтрыПользователя) Экспорт
	
	Если ФильтрыПользователя["ИспользоватьФильтры"] = Ложь Тогда
		Возврат Истина;
	КонецЕсли;
	
	РазрешенныеОрганизации = ФильтрыПользователя["РазрешенныеОрганизации"];
	РазрешенныеИнициаторы  = ФильтрыПользователя["РазрешенныеИнициаторы"];
	РазрешенныеИсполнители = ФильтрыПользователя["РазрешенныеИсполнители"];
	
	Если РазрешенныеОрганизации.Количество() = 0
		И РазрешенныеИнициаторы.Количество() = 0
		И РазрешенныеИсполнители.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаданиеСсылка, 
		"Организация, Инициатор, ТекущийИсполнитель");
	МожноПередавать    = Ложь;
	
	//По организациям.
	Если РазрешенныеОрганизации.Количество() > 0 Тогда // применяем фильтр.
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Организация) Тогда
			Если РазрешенныеОрганизации.Найти(ЗначенияРеквизитов.Организация) = Неопределено Тогда				
				Возврат Ложь;
			Иначе
				МожноПередавать = Истина;
			КонецЕсли;						
		Иначе			
			Возврат Ложь; // с пустой организацией задание отправлено не будет.
		КонецЕсли;	
	КонецЕсли;
	
	//По инициаторам.
	Если РазрешенныеИнициаторы.Количество() > 0 Тогда // применяем фильтр.
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Инициатор) Тогда
			Если РазрешенныеИнициаторы.Найти(ЗначенияРеквизитов.Инициатор) = Неопределено Тогда				
				Возврат Ложь;
			Иначе
				МожноПередавать = Истина;
			КонецЕсли;						
		Иначе			
			Возврат Ложь; // с пустым инициатором задание отправлено не будет.
		КонецЕсли;	
	КонецЕсли;
	
	//По исполнителям.
	Если РазрешенныеИсполнители.Количество() > 0 Тогда // применяем фильтр.
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ТекущийИсполнитель) Тогда
			Если РазрешенныеИсполнители.Найти(ЗначенияРеквизитов.ТекущийИсполнитель) = Неопределено Тогда				
				Возврат Ложь;
			Иначе
				МожноПередавать = Истина;
			КонецЕсли;						
		Иначе			
			Возврат Ложь; // с пустым инициатором задание отправлено не будет.
		КонецЕсли;	
	КонецЕсли;
	
	Возврат МожноПередавать;	
	
КонецФункции	

// Помечает сообщение обмена обработанным.
//
// Параметры:
//  Сообщение - Справочник.СообщенияОбменаМобильноеПриложение - Сообщение обмена данными.
//
Процедура ПометитьСообщениеОбработанным(Сообщение) Экспорт

	СообщениеОбъект = Сообщение.ПолучитьОбъект();
	Если Не СообщениеОбъект = Неопределено Тогда
		СообщениеОбъект.ДатаОбработки   = ТекущаяДатаСеанса();
		СообщениеОбъект.ПометкаУдаления = Истина;
		СообщениеОбъект.Записать();
	КонецЕсли;

КонецПроцедуры

// Формирует сообщение об ошибке и помещает его в очередь сообщений для мобильного клиента.
//  Клиент получит это сообщение и отобразит его пользователю.
//
// Параметры:
//  МобильныйКлиент		 - 	 - ссылка на узел плана обмена МобильноеПриложение;
//  ИнформацияОбОшибке	 - 	 - объект, содержащий информацию о произошедшей ошибке
//
Процедура ПоместитьВОчередьСообщениеОбОшибке(МобильныйКлиент, ИнформацияОбОшибке)
    
	УстановитьПривилегированныйРежим(Истина);
	
	ВерсияСервера = Метаданные.Версия;
	ЗаписатьОшибкуВПротоколПриОбмене(МобильныйКлиент, ИнформацияОбОшибке);

	Пользователь           = Пользователи.ТекущийПользователь();
	ИмяВременногоФайла     = ПолучитьИмяВременногоФайла("xml");
    ПараметрыСинхронизации = ОбменМобильноеПриложениеПовтИсп.ПолучитьПараметрыСинхронизацииПоПользователю(Пользователь);
	
	Попытка

		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Message");
		ЗаписьXML.ЗаписатьАтрибут("Version", ВерсияСервера);
		ОбменМобильноеПриложениеОбработкаXML.ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ИнформацияОбОшибке);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		ЗаписатьДанныеОбмена(МобильныйКлиент, ИмяВременногоФайла, 1);

	Исключение

		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
		КонецПопытки;

	КонецПопытки;

КонецПроцедуры

// Проверяет наличие у клиента синхронизируемых областей данных.
// 
// Возвращаемое значение:
//  Булево - Истина если есть что синхронизировать.
//
Функция УКлиентаЕстьСинхронизируемыеОбласти() 

	//Пользователь = ПользователиКлиентСервер.ТекущийПользователь();

	//СинхронизироватьПочту = 
	//	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
	//		Пользователь,
	//		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияПочты);

	//Если СинхронизироватьПочту Тогда
	//	Возврат Истина;
	//КонецЕсли;

	//СинхронизироватьЗадачи = 
	//	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
	//		Пользователь,
	//		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияЗадач);

	//Если СинхронизироватьЗадачи Тогда
	//	Возврат Истина;
	//КонецЕсли;

	//СинхронизироватьКалендарь = 
	//	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
	//		Пользователь,
	//		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияКалендаря);

	//Если СинхронизироватьКалендарь Тогда
	//	Возврат Истина;
	//КонецЕсли;

	//СинхронизироватьКонтроль = 
	//	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
	//		Пользователь,
	//		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияКонтроля);

	//Если СинхронизироватьКонтроль Тогда
	//	Возврат Истина;
	//КонецЕсли;

	//Возврат Ложь;
	
	Возврат Истина;

КонецФункции

// Формирует шаг отображения готовности для ускорения вывода данных в зависимости от их объема.
//
// Параметры:
//  КоличествоОбъектовВсего	 - Число - Количество объектов в выборке.
// 
// Возвращаемое значение:
//  Число - Шаг отображения изменений процента готовности.
//
Функция ПолучитьШагОтображенияПроцентаГотовности(КоличествоОбъектовВсего) Экспорт

	// Выводим каждые 5%.
	Шаг = Окр(КоличествоОбъектовВсего / 100 * 5);

	Если Шаг = 0 Тогда
		Шаг = 1;
	КонецЕсли;

	Возврат Шаг;

КонецФункции

// Проверяет, существует ли указанный объект в базе данных.
Функция ЭлементДанныхСуществуетВБазе(ЭлементДанных) Экспорт

	ЭлементСуществует = Истина;

	Если ТипЗнч(ЭлементДанных) = Тип("ИнформацияОбОшибке")
		Или ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда 
		Возврат ЭлементСуществует;
	КонецЕсли;

	Попытка

		Если ТипЗнч(ЭлементДанных) = Тип("Структура") Тогда
			Объект = ЭлементДанных.Ссылка;
		Иначе
			Объект = ЭлементДанных;
		КонецЕсли;

		МетаданныеЭлементаДанных = Объект.Метаданные();

		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеЭлементаДанных)
		 Или ОбщегоНазначения.ЭтоДокумент(МетаданныеЭлементаДанных) Тогда
			ЭлементСуществует = ОбщегоНазначения.СсылкаСуществует(Объект);
		КонецЕсли;

	Исключение
		ЭлементСуществует = Истина;
	КонецПопытки;

	Возврат ЭлементСуществует;

КонецФункции

// Получает параметры синхронизации.
//
// Параметры:
//  МобильныйКлиент	 - ПланОбмена.Мобильные - ссылка на узел плана обмена Мобильный, из которого читаются 
//							данные для помещения в сообщение;
// 
// Возвращаемое значение:
//  Структура - Кешированные параметры синхронизхации и объекты для обеспечения скорости выгрузки
//
Функция ПолучитьПараметрыСинхронизации(МобильныйКлиент) Экспорт

	Пользователь   = Пользователи.ТекущийПользователь();
	ИДПользователя = Пользователь.ИдентификаторПользователяИБ;

	Если ЗначениеЗаполнено(ИДПользователя) Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИДПользователя);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;	
	
	ПараметрыСинхронизации  = ОбменМобильноеПриложениеПовтИсп.ПолучитьПараметрыСинхронизацииПоПользователю(
		Пользователь, Истина);	
	ПараметрыСинхронизации.Вставить("МобильныйКлиент",			МобильныйКлиент);	
	ПараметрыСинхронизации.Вставить("ОбъектыКВыгрузке",			Новый Соответствие);
	ПараметрыСинхронизации.Вставить("ВыгруженныеОбъекты",		Новый Соответствие);
	ПараметрыСинхронизации.Вставить("Адресаты",					Новый Соответствие);
	ПараметрыСинхронизации.Вставить("Контакты",					Новый Соответствие);
	ПараметрыСинхронизации.Вставить("ПользовательИБ",			ПользовательИБ);
	ПараметрыСинхронизации.Вставить("ВыгруженоОбъектов",		0);
	
	Возврат ПараметрыСинхронизации;

КонецФункции

Процедура ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, МобильныйКлиент, Объект, ТекстСообщения, 
	СКлиента = Ложь) Экспорт

	Если Не ПараметрыСинхронизации.ПодробныйЖурналРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияОбъекта = ТипЗнч(Объект);
	Если ПараметрыСинхронизации.ПротоколируемыеТипы[ТипЗначенияОбъекта] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьИнформациюПоОбъекту(ТекстСообщения, 
		Строка(ТипЗначенияОбъекта), Объект.Ссылка.УникальныйИдентификатор(), СКлиента, МобильныйКлиент);

КонецПроцедуры

Функция ОбъектДоступенТекущемуПользователю(МобильныйКлиент, Объект, ОбъектТолькоЧтение) Экспорт
		
	Пользователь = Пользователи.ТекущийПользователь();
	Попытка
		
		ОбъектМетаданные = Объект.Метаданные();
		Если Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданные)
			И Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданные) Тогда
			Возврат Истина;
		КонецЕсли;		
		
		СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(Пользователь.ИдентификаторПользователяИБ);
		
		Если СвойстваПользователяИБ <> Неопределено Тогда
			
			РолиПользователя    = СвойстваПользователяИБ.Роли;
			ЕстьРольПолныеПрава = Ложь;
			ЕстьРольПолныеПрава = РолиПользователя.Найти("ПолныеПрава") <> Неопределено;
			
			// По типу объекта.
			// 0 - ТолькоЧтение = Ложь;
			// 1 - ТолькоЧтение = Истина.
			
			//@skip-warning
			ОбъектДоступен = Ложь;
			Если ЕстьРольПолныеПрава = Истина Тогда				
				ОбъектДоступен = Истина;				
			Иначе			
				Попытка
					//@skip-warning
					ВерсияДанных   = Объект.Ссылка.ВерсияДанных;
					ОбъектДоступен = Истина;
				Исключение
					ОбъектТолькоЧтение = 1;
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;			
			
			ТипЭлемента = ТипЗнч(Объект.Ссылка);
			Если ТипЭлемента = Тип("СправочникСсылка.ВидыКонтактнойИнформации")				
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.ГруппыПользователей")						
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.Организации")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.ОценкиЗаданий")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.Подразделения")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.Пользователи")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.Проекты")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.Процессы")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.Сервисы")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.Сотрудники")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.СпособыСозданияЗаданий")				
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.СтраныМира")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.Комментарии")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.ЛинииПоддержки")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.ЭтапыПроцессов")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.ВидыНоменклатуры")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.Номенклатура")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.КарточкиНоменклатуры")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.ВидыМестХранения")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.МестаХранения")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.КатегорииЛогиновИПаролей") Тогда
				ОбъектТолькоЧтение = 1;
				
			ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ГруппыЗаданий")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.КатегорииЗаданий")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.КонтактныеЛица")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.Контрагенты")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.Спринты")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.Теги")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.ФизическиеЛица")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.ЛогиныИПароли")
				ИЛИ ТипЭлемента = Тип("СправочникСсылка.ВидыРабот") Тогда
				ОбъектТолькоЧтение = 0;
				
			ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.Задание") Тогда
				
				Если ЕстьРольПолныеПрава = Истина Тогда
					ОбъектТолькоЧтение = 0;
				Иначе
					ОбъектТолькоЧтение = ДокументЗаданиеТолькоЧтение(Объект.Ссылка, Пользователь);
				КонецЕсли;	
				
			ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда
				
				Если ЕстьРольПолныеПрава = Истина Тогда
					ОбъектТолькоЧтение = 0;
				Иначе
					ОбъектТолькоЧтение = ДокументЕжедневныйОтчетТолькоЧтение(Объект.Ссылка, Пользователь);
				КонецЕсли;	

			КонецЕсли;			
			
			// ОбъектТолькоЧтение
			// < 0 - нет доступа
			// = 0 - редактирование
			// = 1 - только чтение
			
			Возврат ОбъектТолькоЧтение >= 0;
			
		КонецЕсли;	
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ДокументЗаданиеТолькоЧтение(ЗаданиеСсылка, Пользователь)
	
	МассивПользователей    = Новый Массив;
	РеквизитыЗадания 	   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаданиеСсылка, 
		"Автор, Инициатор, ТекущийИсполнитель");
	ТипПользователь  	   = Тип("СправочникСсылка.Пользователи");
	ТипГруппаПользователей = Тип("СправочникСсылка.ГруппыПользователей");
	
	Если ТипЗнч(РеквизитыЗадания.Автор) = ТипПользователь И ЗначениеЗаполнено(РеквизитыЗадания.Автор) Тогда
		МассивПользователей.Добавить(РеквизитыЗадания.Автор);
	КонецЕсли;	
	
	Если ТипЗнч(РеквизитыЗадания.Инициатор) = ТипПользователь И ЗначениеЗаполнено(РеквизитыЗадания.Инициатор) Тогда
		Если МассивПользователей.Найти(РеквизитыЗадания.Инициатор) = Неопределено Тогда 
			МассивПользователей.Добавить(РеквизитыЗадания.Инициатор);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ТипЗнч(РеквизитыЗадания.ТекущийИсполнитель) = ТипПользователь 
		И ЗначениеЗаполнено(РеквизитыЗадания.ТекущийИсполнитель) Тогда
		
		Если МассивПользователей.Найти(РеквизитыЗадания.ТекущийИсполнитель) = Неопределено Тогда 
			МассивПользователей.Добавить(РеквизитыЗадания.ТекущийИсполнитель);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РеквизитыЗадания.ТекущийИсполнитель) = ТипГруппаПользователей 
		И ЗначениеЗаполнено(РеквизитыЗадания.ТекущийИсполнитель) Тогда
			
		Для Каждого СтрокаСостав Из РеквизитыЗадания.ТекущийИсполнитель.Состав Цикл
			Если МассивПользователей.Найти(СтрокаСостав.Пользователь) = Неопределено Тогда 
				МассивПользователей.Добавить(СтрокаСостав.Пользователь);
			КонецЕсли;	
		КонецЦикла;
			                   
	КонецЕсли;
	
	Если МассивПользователей.Найти(Пользователь) <> Неопределено Тогда
		Возврат 0;
	Иначе
		// Пользователь только в наблюдателях, полных прав нет, ТолькоЧтение = Истина;
		Возврат 1;
	КонецЕсли;
	
КонецФункции

Функция ДокументЕжедневныйОтчетТолькоЧтение(ЕжедневныйОтчетСсылка, Пользователь)
		
	РеквизитыЗадания 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕжедневныйОтчетСсылка, "Пользователь");
	Если РеквизитыЗадания.Пользователь = Пользователь Тогда
		// Пользователь ежедневного отчета, может его менять.
		Возврат 0;		
	КонецЕсли;
	
	МассивПользователей = 
		УправлениеITОтделом8УФПовтИсп.СписокПодчиненныхПользователей(РеквизитыЗадания.Пользователь, Истина);
	
	Если МассивПользователей.Найти(Пользователь) = Неопределено Тогда
		// Нет доступа к ежедневному отчету.
		Возврат -1;
	КонецЕсли;
	
	// Это подчиненный пользователь, можно только смотреть.
	Возврат 1;
	
КонецФункции

Функция ПолучитьВсехПользователейИзЗадания(Знач ЗаданиеСсылка, ПрименятьФильтрыПользователей = Истина) Экспорт
	
	МассивПользователей = Новый Массив;
	ЗаданиеОбъект 		= ЗаданиеСсылка.ПолучитьОбъект(); // Если объект удален.
	Если ЗаданиеОбъект = Неопределено Тогда
		Возврат МассивПользователей;
	КонецЕсли;	
	
	РеквизитыЗадания       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаданиеСсылка, 
		"Автор, Инициатор, ТекущийИсполнитель, Наблюдатели");	
	
	ТипПользователь 	   = Тип("СправочникСсылка.Пользователи");
	ТипГруппаПользователей = Тип("СправочникСсылка.ГруппыПользователей");
	
	Если ТипЗнч(РеквизитыЗадания.Автор) = ТипПользователь И ЗначениеЗаполнено(РеквизитыЗадания.Автор) Тогда
		МассивПользователей.Добавить(РеквизитыЗадания.Автор);
	КонецЕсли;	
	
	Если ТипЗнч(РеквизитыЗадания.Инициатор) = ТипПользователь И ЗначениеЗаполнено(РеквизитыЗадания.Инициатор) Тогда
		Если МассивПользователей.Найти(РеквизитыЗадания.Инициатор) = Неопределено Тогда 
			МассивПользователей.Добавить(РеквизитыЗадания.Инициатор);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ТипЗнч(РеквизитыЗадания.ТекущийИсполнитель) = ТипПользователь 
		И ЗначениеЗаполнено(РеквизитыЗадания.ТекущийИсполнитель) Тогда
		Если МассивПользователей.Найти(РеквизитыЗадания.ТекущийИсполнитель) = Неопределено Тогда 
			МассивПользователей.Добавить(РеквизитыЗадания.ТекущийИсполнитель);
		КонецЕсли;	
	ИначеЕсли ТипЗнч(РеквизитыЗадания.ТекущийИсполнитель) = ТипГруппаПользователей 
			И ЗначениеЗаполнено(РеквизитыЗадания.ТекущийИсполнитель) Тогда
				
		Для Каждого СтрокаСостав Из РеквизитыЗадания.ТекущийИсполнитель.Состав Цикл
			Если МассивПользователей.Найти(СтрокаСостав.Пользователь) = Неопределено Тогда 
				МассивПользователей.Добавить(СтрокаСостав.Пользователь);
			КонецЕсли;	
		КонецЦикла;
			                   
	КонецЕсли;
	
	Наблюдатели = РеквизитыЗадания.Наблюдатели.Выгрузить();
	
	Если Наблюдатели.Количество() > 0 Тогда
		Для Каждого СтрокаНаблюдатели Из Наблюдатели Цикл			
			Если ТипЗнч(СтрокаНаблюдатели.Адресат) = ТипПользователь Тогда
				Если МассивПользователей.Найти(СтрокаНаблюдатели.Адресат) = Неопределено Тогда
					МассивПользователей.Добавить(СтрокаНаблюдатели.Адресат);
				КонецЕсли;	
			ИначеЕсли
				ТипЗнч(СтрокаНаблюдатели.Адресат) = ТипГруппаПользователей Тогда
				Для Каждого СтрокаСостав Из СтрокаНаблюдатели.Адресат.Состав Цикл
					Если МассивПользователей.Найти(СтрокаСостав.Пользователь) = Неопределено Тогда
						МассивПользователей.Добавить(СтрокаСостав.Пользователь);
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;			
		КонецЦикла;	
	КонецЕсли;
		
	// Руководители пользователей.
	Если МассивПользователей.Количество() > 0 Тогда
		ВсеРуководители = ПолучитьРуководителейПользователей(МассивПользователей);
		Для Каждого Руководитель Из ВсеРуководители Цикл
			Если МассивПользователей.Найти(Руководитель) = Неопределено Тогда
				МассивПользователей.Добавить(Руководитель);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Если ПрименятьФильтрыПользователей = Ложь Тогда
		
		Возврат МассивПользователей;
		
	КонецЕсли;	
	
	// Фильтры мобильных пользователей.
	МассивПользователейМП = Новый Массив;
	Если МассивПользователей.Количество() > 0 Тогда		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПользователиМобильныхПриложений.Пользователь КАК Пользователь,
			|	ПользователиМобильныхПриложений.ИспользоватьФильтры КАК ИспользоватьФильтры,
			|	ПользователиМобильныхПриложений.Инициаторы.(
			|		Инициатор КАК Инициатор
			|	) КАК Инициаторы,
			|	ПользователиМобильныхПриложений.Исполнители.(
			|		Исполнитель КАК Исполнитель
			|	) КАК Исполнители,
			|	ПользователиМобильныхПриложений.Организации.(
			|		Организация КАК Организация
			|	) КАК Организации
			|ИЗ
			|	Справочник.ПользователиМобильныхПриложений КАК ПользователиМобильныхПриложений
			|ГДЕ
			|	ПользователиМобильныхПриложений.Пользователь В(&СписокПользователей)";
		
		Запрос.УстановитьПараметр("СписокПользователей", МассивПользователей);		
		РезультатЗапроса = Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.ИспользоватьФильтры = Ложь Тогда
				МассивПользователейМП.Добавить(ВыборкаДетальныеЗаписи.Пользователь);
			Иначе
				РазрешенныеОрганизации = ВыборкаДетальныеЗаписи.Организации.Выгрузить().ВыгрузитьКолонку("Организация");
				РазрешенныеИнициаторы  = ВыборкаДетальныеЗаписи.Инициаторы.Выгрузить().ВыгрузитьКолонку("Инициатор");
				РазрешенныеИсполнители = ВыборкаДетальныеЗаписи.Исполнители.Выгрузить().ВыгрузитьКолонку("Исполнитель");
				ФильтрыПользователя    = Новый Соответствие;
				ФильтрыПользователя.Вставить("ИспользоватьФильтры",    Истина);
				ФильтрыПользователя.Вставить("РазрешенныеОрганизации", РазрешенныеОрганизации);
				ФильтрыПользователя.Вставить("РазрешенныеИнициаторы",  РазрешенныеИнициаторы);
				ФильтрыПользователя.Вставить("РазрешенныеИсполнители", РазрешенныеИсполнители);
				Если ЗаданиеСоответствуетФильтрамПользователя(ЗаданиеСсылка, ФильтрыПользователя) Тогда
					МассивПользователейМП.Добавить(ВыборкаДетальныеЗаписи.Пользователь);
				КонецЕсли;	
			КонецЕсли;			
		КонецЦикла;		
	КонецЕсли;	
	
	Возврат МассивПользователейМП;
	
КонецФункции

Функция ПолучитьРуководителейПользователей(Знач МассивПользователей)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПользователиПодчиненные.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи.Подчиненные КАК ПользователиПодчиненные
		|ГДЕ
		|	ПользователиПодчиненные.Подчиненный В(&МассивПодчиненных)";
	
	Запрос.УстановитьПараметр("МассивПодчиненных", МассивПользователей);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"); 
	
КонецФункции	

#КонецОбласти