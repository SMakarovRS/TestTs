
////////////////////////////////////////////////////////////////////////////////
// Клиентский модуль конфигурации "Управление IT-отделом 8".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, 
	Поле = Неопределено, Отказ = Ложь) Экспорт
		
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;

	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
	ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;

	Сообщение.УстановитьДанные(ЭтотОбъект);
	Сообщение.Сообщить();

	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибке()

// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обновляет состояние документа.
//
Процедура ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, 
	РазрешеноПроведение) Экспорт
	
	Если Объект.Проведен Тогда
		СостояниеДокумента = "Проведен";
		КартинкаСостоянияДокумента = 1;
	ИначеЕсли РазрешеноПроведение Тогда
		СостояниеДокумента = "Не проведен";
		КартинкаСостоянияДокумента = 0;
	Иначе
		СостояниеДокумента = "Записан";
		КартинкаСостоянияДокумента = 3;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСостояниеДокумента()

// Копирует текст в буфер
//
// Параметры:
//	Строка - текст для копирования
//
// Возвращаемое значение:
//	Строка - Скопированный иекст
//
Функция УстановитьТекстВБуферОбмена(Текст) Экспорт
	
	Объект = Новый COMОбъект("htmlfile");
	Возврат Объект.ParentWindow.ClipboardData.Setdata("Text", Текст);

КонецФункции

// Получает текст буфера обмена Windows.
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Строка - результат.
//
Функция ПолучитьТекстБуфераОбмена() Экспорт
	
    Объект = Новый COMОбъект("htmlfile");
    Возврат Объект.ParentWindow.ClipboardData.Getdata("Text");

КонецФункции

// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ

// Процедура разворачивает дерево значений на форме.
//
Процедура РазвернутьДеревоЗначенийСвойств(ЭлементФормы, Дерево) Экспорт
	
	Для каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		ЭлементФормы.Развернуть(Идентификатор, Истина);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьДеревоЗначенийСвойств()

// Процедура обработчик события ПередУдалением.
//
Процедура ДеревоЗначенийСвойствПередУдалением(Элемент, Отказ, Модифицированность) Экспорт
	
	Отказ = Истина;
	Элемент.ТекущиеДанные.Значение = Элемент.ТекущиеДанные.ТипЗначенияСвойства.ПривестиЗначение(Неопределено);
	Модифицированность = Истина;
	
КонецПроцедуры // ДеревоЗначенийСвойствПередУдалением()

// Процедура обработчик события ПриНачалеРедактирования.
//
Процедура ДеревоЗначенийСвойствПриНачалеРедактирования(Элемент) Экспорт
	
	Элемент.ПодчиненныеЭлементы.Значение.ОграничениеТипа = Элемент.ТекущиеДанные.ТипЗначенияСвойства;
	
КонецПроцедуры // ДеревоЗначенийСвойствПриНачалеРедактирования()

// МОДУЛЬ ОбщегоНазначения ОбновитьНадписьАвтор
// Процедура обновляет надпись в автор в левом нижнем углу формы документа
// Параметры: Документ объект, ссылка на форму документа
Процедура ОбновитьНадписьАвтор(Знач ДокументОбъект, Знач Форма)Экспорт
	
	Результат = "";	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Результат = СтрШаблон(НСтр("ru = 'Новый: <не записан !> %1'"), ПользователиКлиент.АвторизованныйПользователь());
	ИначеЕсли ДокументОбъект.ДатаКорректировки = Дата(1, 1, 1) Тогда
		Результат = СтрШаблон(НСтр("ru = 'Создан: %1 %2'"), ДокументОбъект.ДатаСоздания, ДокументОбъект.Автор);
	Иначе		
		Результат = СтрШаблон(НСтр("ru = 'Изменён: %1 %2'"), ДокументОбъект.ДатаКорректировки,
			ДокументОбъект.АвторКорректировки);
	КонецЕсли;
	
	Форма.НадписьАвтор = Результат;
	
КонецПроцедуры

// МОДУЛЬ ОбщегоНазначения ПолучитьСписокНадписьАвтор
// Функция возвращает надпись в автор в левом нижнем углу формы документа
// Параметры: Документ объект
Функция ПолучитьСписокНадписьАвтор(Объект) Экспорт
	
	Спк = Новый СписокЗначений;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Спк.Добавить(,"Новый: <не записан !>            ");
		Спк.Добавить(,"Автор:  " + ПользователиКлиент.ТекущийПользователь());
	Иначе
		Спк.Добавить(,"Создан:  " + Объект.ДатаСоздания + "            ");
		Спк.Добавить(,"Автор:  " + Объект.Автор);
		Если Объект.ДатаКорректировки <> Дата(1, 1, 1) Тогда
			Спк.Добавить(,"Изменён:  " + Объект.ДатаКорректировки);
			Спк.Добавить(,"Изменил:  " + Объект.АвторКорректировки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Спк;
	
КонецФункции

// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ЦЕНООБРАЗОВАНИЕ

// Выполняем пересчет цены по флагу СуммаВключаетНДС табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
																	   
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			Если ФормаДокумента.Объект.СуммаВключаетНДС Тогда
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * (100 + СтавкаНДС)) / 100;
			Иначе
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * 100) / (100 + СтавкаНДС);
			КонецЕсли;
		КонецЕсли;
		
		РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		        
	КонецЦикла;

КонецПроцедуры // ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()

// Выполняем пересчет цены по валюте табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ФормаДокумента, ПредыдущаяВалюта, ИмяТабличнойЧасти) Экспорт
	
	СтруктураКурсы = УправлениеITОтделом8УФ.ПолучитьКурсыВалют(ПредыдущаяВалюта, 
		ФормаДокумента.Объект.ВалютаДокумента, ФормаДокумента.Объект.Дата);
																   
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		// Цена.
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			
			СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
																	СтруктураКурсы.КурсНач, 
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);
																	
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
			
		// Сумма.	
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
			
			СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, 
																	СтруктураКурсы.КурсНач, 
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);														
					
			Если СтрокаТабличнойЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
				
				// Скидки.
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
					СтрокаТабличнойЧасти.Сумма = 0;
				ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 
						- СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
								
			КонецЕсли;														
			
			СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	        СтрокаТабличнойЧасти.СуммаНДС = ?(ФормаДокумента.Объект.СуммаВключаетНДС, 
  				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
  				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
					        		
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма 
				+ ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЕсли;
        		        
	КонецЦикла; 

КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

// Функция пересчитывает сумму из одной валюты в другую
//
// Параметры:      
//	Сумма         - Число - сумма, которую следует пересчитать.
// 	КурсНач       - Число - курс из которого надо пересчитать.
// 	КурсКон       - Число - курс в который надо пересчитать.
// 	КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
// 	КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0 ИЛИ КурсКон = 0 ИЛИ КратностьНач = 0 ИЛИ КратностьКон = 0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'");
		Сообщение.Сообщить();
		Возврат Сумма;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции // ПересчитатьИзВалютыВВалюту()

// Процедура вызывается из обработчика события "ПриНачалеРаботыСистемы".
//@skip-warning
Процедура ПриНачалеРаботыСистемы() Экспорт
		

	
КонецПроцедуры // ПриНачалеРаботыСистемы()

#Если НЕ ВнешнееСоединение Тогда
	
Процедура ПроверитьАктивацию() Экспорт
	
	Если ПустаяСтрока(УправлениеITОтделом8УФ.ВладелецЛицензии()) Тогда
		ПараметрыФормы = Новый Структура;
		//@skip-warning
		ОткрытьФорму("ОбщаяФорма.СЛСАктивация",ПараметрыФормы, , , , ,
			Новый ОписаниеОповещения("ПроверитьАктивациюЗавершение", УправлениеITОтделом8УФКлиент),
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьАктивациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		КомпонентаЗагруженаУспешно = Результат.КомпонентаЗагруженаУспешно;
		ТекстСообщения=Результат.ТекстСообщения;
		Если ТипЗнч(КомпонентаЗагруженаУспешно)=Тип("Строка") Тогда			
			ЗавершитьРаботуСистемы(Ложь, Истина);
			Возврат;
		КонецЕсли;
		
		#Если НЕ ВебКлиент Тогда		
		Если КомпонентаЗагруженаУспешно Тогда
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
				Если Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет, 60, 
					КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
					ЗавершитьРаботуСистемы(Ложь);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ПроверитьАктивацию();
			Возврат;
		КонецЕсли;		
		#КонецЕсли
		
		Если ПустаяСтрока(ТекстСообщения) Тогда			
			ТекстСообщения = НСтр("ru = '	Из-за возникших ошибок система защиты типового решения не была подключена.
                                   |Рекомендуется исправить возникшие проблемы перед следующей попыткой запуска программы.
                                   |(возможно вам следует заново установить систему защиты типового решения)'");
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьАктивациюЗавершениеЗавершение", ЭтотОбъект), 
			СтрШаблон(НСтр("ru = '%1
                            |Нажатие на кнопку ""Да"" откроет форму активации.
                            |Нажатие на кнопку ""Нет"" приведет к НЕМЕДЛЕННОМУ ЗАВЕРШЕНИЮ РАБОТЫ'"), ТекстСообщения), 
			РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	Иначе
		ПроверитьАктивацию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьАктивациюЗавершениеЗавершение(РезультатВопроса, ДополнительныеПараметры1) Экспорт
    
    ОтветПользователя = РезультатВопроса;
    
    Если ОтветПользователя = КодВозвратаДиалога.Отмена Тогда
        ЗавершитьРаботуСистемы(Ложь);
		Возврат;
	ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Да Тогда
		// Ничего не делаем
    Иначе
        ЗавершитьРаботуСистемы(Ложь);
        Возврат;
	КонецЕсли;
	
	ПроверитьАктивацию();

КонецПроцедуры

// Безусловное завершение работы
Процедура ЗавершитьРаботу() Экспорт
	
	ЗавершитьРаботуСистемы(Ложь);
	
КонецПроцедуры

#КонецЕсли

// Разворачивает дерево номенклатуры в документах
Процедура РазвернутьДеревоНоменклатуры(Форма) Экспорт
	
	КоллекцияЭлементовДерева = Форма.ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Форма.Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает представление дня недели.
//
Функция ПолучитьПредставлениеДняНедели(Знач ДеньНеделиКалендаря) Экспорт
	
	НомерДняНедели = ДеньНедели(ДеньНеделиКалендаря);
	Если НомерДняНедели = 1 Тогда
		
		Возврат НСтр("ru = 'Пн'");
		
	ИначеЕсли НомерДняНедели = 2 Тогда
		
		Возврат НСтр("ru = 'Вт'");
		
	ИначеЕсли НомерДняНедели = 3 Тогда
		
		Возврат НСтр("ru = 'Ср'");
		
	ИначеЕсли НомерДняНедели = 4 Тогда
		
		Возврат НСтр("ru = 'Чт'");
		
	ИначеЕсли НомерДняНедели = 5 Тогда
		
		Возврат НСтр("ru = 'Пт'");
		
	ИначеЕсли НомерДняНедели = 6 Тогда
		
		Возврат НСтр("ru = 'Сб'");
		
	Иначе
		
		Возврат НСтр("ru = 'Вс'");
		
	КонецЕсли;
	
КонецФункции // ПолучитьПредставлениеДняНедели()

// РАБОТА С ОТМЕТКАМИ ОБЪЕКТОВ.
Функция ОтметитьОтметкамиЗадания(Знач МассивЗаданий, Знач Отметка) Экспорт
	
	Результат 				  = Истина;	
	МассивЗаданийДляОбработки = Новый Массив;	
	Для Каждого Задание Из МассивЗаданий Цикл		
		Если ТипЗнч(Задание) <> Тип("ДокументСсылка.Задание") Тогда
			Продолжить;
		Иначе
			МассивЗаданийДляОбработки.Добавить(Задание);
		КонецЕсли;		
	КонецЦикла;
	
	Если МассивЗаданийДляОбработки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны задания.'"));
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат Тогда
		УправлениеITОтделом8УФ.ОтметитьКнопкойОбъекты(МассивЗаданийДляОбработки, Отметка);
		Оповестить("ИзмениласьОтметкаПодсветка", МассивЗаданий);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодсветитьМассивОбъектов(Знач МассивЗаданий) Экспорт
	
	Результат 				  = Истина;	
	МассивЗаданийДляОбработки = Новый Массив;	
	Для Каждого Задание Из МассивЗаданий Цикл		
		Если ТипЗнч(Задание) <> Тип("ДокументСсылка.Задание") Тогда
			Продолжить;
		Иначе
			МассивЗаданийДляОбработки.Добавить(Задание);
		КонецЕсли;		
	КонецЦикла;
	
	Если МассивЗаданийДляОбработки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны задания.'"));
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат Тогда
		УправлениеITОтделом8УФ.ПодсветитьОбъекты(МассивЗаданийДляОбработки);
		Оповестить("ИзмениласьОтметкаПодсветка", МассивЗаданий);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

// Процедура рекурсивно устанавливает/снимает пометку для вложенных элементов начиная
// с передаваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
Процедура ПометитьВложенныеЭлементы(Элемент) Экспорт

	ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
	
	Если ВложенныеЭлементы.Количество() <> 0 Тогда
		Для Каждого ВложенныйЭлемент ИЗ ВложенныеЭлементы Цикл
			ВложенныйЭлемент.Флаг = Элемент.Флаг;
			ПометитьВложенныеЭлементы(ВложенныйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для родителей передаваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
Процедура ПометитьЭлементыРодителей(СтрокаРодитель) Экспорт

	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Флаг = СтрокаРодитель.Флаг;
	
	Если СтрокаРодитель.ПолучитьЭлементы().Количество() > 0 Тогда
		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;
		Для Каждого Строка Из СтрокаРодитель.ПолучитьЭлементы() Цикл
			Если Строка.Флаг = 0 Тогда
				НайденыВыключенные = Истина;
			ИначеЕсли Строка.Флаг = 1 Тогда
				НайденыВключенные  = Истина;
			ИначеЕсли Строка.Флаг = 2 Тогда
				НайденыВыключенные = Истина;
				НайденыВключенные  = Истина;
			КонецЕсли;
			
			Если НайденыВключенные И НайденыВыключенные Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденыВключенные И НЕ НайденыВыключенные Тогда
			Флаг = 1;
		ИначеЕсли НЕ НайденыВключенные И НайденыВыключенные Тогда
			Флаг = 0;
		Иначе
			Флаг = 2;
		КонецЕсли;
	КонецЕсли; 
	
	СтрокаРодитель.Флаг = Флаг;
	
	ПометитьЭлементыРодителей(СтрокаРодитель.ПолучитьРодителя());

КонецПроцедуры

#Область УчетОстатковКонтрагентов

Процедура ВыполнитьОбработчикОбработкаВыбора(Форма, ИмяЭлементаФормы, РеквизитФормы, ОбработчикОповещения, 
	ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
			Если УправлениеITОтделом8УФПовтИсп.ПоКонтрагентуВедетсяУчетОстатков(ВыбранноеЗначение) Тогда		
				СтандартнаяОбработка = Ложь;			
				МассивТипов 		 = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(ВыбранноеЗначение));
				Форма.Элементы[ИмяЭлементаФормы].ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, 
					Новый КвалификаторыСтроки(200));
				РеквизитФормы = ВыбранноеЗначение;
				ВыполнитьОбработкуОповещения(ОбработчикОповещения);
			Иначе
				СтандартнаяОбработка = Ложь;
				РеквизитФормы = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработчикАвтоПодбор(Форма, ИмяЭлементаФормы, Текст, ДанныеВыбора, Ожидание, 
	СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда        
	    СтандартнаяОбработка = Ложь;
		Форма.Элементы[ИмяЭлементаФормы].СписокВыбора.Очистить();
	    ДанныеВыбора         = УправлениеITОтделом8УФ.ПолучитьСписокВыбораОрганизацииКонтрагента(Текст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработчикОчистка(Форма, ИмяЭлементаФормы) Экспорт
	
	МассивТипов = Новый Массив;	
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));		
	Форма.Элементы[ИмяЭлементаФормы].ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(200));
	Форма.Элементы[ИмяЭлементаФормы].КнопкаВыбора  	 = Истина;
	
КонецПроцедуры

Процедура ВыполнитьОбработчикНачалоВыбора(Форма, РеквизитФормы, СтандартнаяОбработка, ИмяРеквизитаВозврата = "") Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы 		 = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяОрганизация", РеквизитФормы);
	Если Не ПустаяСтрока(ИмяРеквизитаВозврата) Тогда
		ПараметрыФормы.Вставить("ИмяРеквизитаВозврата", ИмяРеквизитаВозврата);
	КонецЕсли;	
	ФормаВыбора 		 = ПолучитьФорму("ОбщаяФорма.ФормаВыбораОрганизацииКонтрагента", ПараметрыФормы, Форма);		
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ВыполнитьОбработчикОбработкаВыбораФормы(Форма, ИмяЭлементаФормы, РеквизитФормы, ВыбранноеЗначение, 
	ОбработчикОповещения) Экспорт    
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		МассивТипов 		 = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ВыбранноеЗначение));
		Форма.Элементы[ИмяЭлементаФормы].ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, 
			Новый КвалификаторыСтроки(200));
		РеквизитФормы 		 = ВыбранноеЗначение;
		ВыполнитьОбработкуОповещения(ОбработчикОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ОбновитьОграничениеТипаКлиента(Знач Инициатор, ЭлементКлиент) Экспорт
	
	// СправочникСсылка.ФизическиеЛица, СправочникСсылка.КонтактныеЛица, СправочникСсылка.Подразделения,
	// СправочникСсылка.Сотрудники, СправочникСсылка.Контрагенты, СправочникСсылка.Пользователи, 
	// СправочникСсылка.Организации
	
	МассивТипов = Новый Массив;
	Если ЗначениеЗаполнено(Инициатор) Тогда
		Если ТипЗнч(Инициатор) = Тип("СправочникСсылка.Организации") Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
		ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Подразделения") Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
		ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Контрагенты") Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
			МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Сотрудники") Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.Сотрудники"));
			МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
		ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
		ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
			МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Сотрудники"));
			МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));			
			МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.ПотенциальныеКлиенты") Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.ПотенциальныеКлиенты"));
		КонецЕсли;
	КонецЕсли;
	
	// Добавим все типы, если ничего не было добавлено.
	Если МассивТипов.Количество() = 0 Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ПотенциальныеКлиенты"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		МассивТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Сотрудники"));
	КонецЕсли;
	
	ЭлементКлиент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(200));
	ЭлементКлиент.КнопкаВыбора = Истина;	
	
КонецПроцедуры

// Рассчитывает сумму, среднее и прочие показатели по числовым ячейкам табличного документа
// и показывает результаты расчетов.
// См. также СтандартныеПодсистемыКлиентСервер.РасчетЯчеек.
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма-владелец, из которой осуществляется открытие формы.
//   ТабличныйДокумент - ТабличныйДокумент - Таблица, для которой выполняются расчеты.
//   ВыделенныеОбласти - Неопределено, Массив - Необязательный. Области документа, которые требуется рассчитать.
//       Если Неопределено, то расчет будет произведен по областям, выделенным интерактивно.
//       См. возвращаемое значение функции СтандартныеПодсистемыКлиент.ВыделенныеОбласти.
//
Процедура ПоказатьРасчетЯчеек(Форма, ТабличныйДокумент, ВыделенныеОбласти = Неопределено) Экспорт
	Если ВыделенныеОбласти = Неопределено Тогда
		ВыделенныеОбласти = ВыделенныеОбласти(ТабличныйДокумент);
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	ПараметрыФормы.Вставить("ВыделенныеОбласти", ВыделенныеОбласти);
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ОбщаяФорма.ПоказателиВыделенныхЯчеек", ПараметрыФормы, Форма, Истина, , , , РежимОкна);
КонецПроцедуры

// Открывает форму управления проектом.
//
// Параметры:
//	Проект - СправочникСсылка.Проекты - проект, которым хотим управлять.
//
Процедура ОткрытьДиаграммуГантаПроекта(Знач Проект) Экспорт
	
	ПараметрыФормы = Новый Структура("Проект", Проект);
	ОткрытьФорму("Отчет.УправлениеПроектами.Форма.ФормаУправляемая", ПараметрыФормы,, Проект);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура рассчитывает сумму строки табличной части при заполнение по "Цены и валюта".
//
Процедура РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабЧасти)
	
	Если СтрокаТабЧасти.Свойство("Количество") И СтрокаТабЧасти.Свойство("Цена") Тогда
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена;
	КонецЕсли;
	
	Если СтрокаТабЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
		Если СтрокаТабЧасти.ПроцентСкидкиНаценки = 100 Тогда
			СтрокаТабЧасти.Сумма = 0;
		ИначеЕсли СтрокаТабЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабЧасти.Количество <> 0 Тогда
			СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Сумма * (1 - СтрокаТабЧасти.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
	КонецЕсли;	

	СтавкаНДС = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабЧасти.СтавкаНДС);
			
	Если ФормаДокумента.Объект.Свойство("СуммаВключаетНДС") Тогда
		СтрокаТабЧасти.СуммаНДС = ?(
			ФормаДокумента.Объект.СуммаВключаетНДС, 
			СтрокаТабЧасти.Сумма - (СтрокаТабЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабЧасти.Сумма * СтавкаНДС / 100
		);
		СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, 
			СтрокаТабЧасти.СуммаНДС);
	Иначе
		СтрокаТабЧасти.СуммаНДС = СтрокаТабЧасти.Сумма * СтавкаНДС / 100;
		СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + СтрокаТабЧасти.СуммаНДС;
	КонецЕсли;	
	
КонецПроцедуры // РассчитатьСуммуСтрокиТабличнойЧасти()

// Формирует описание выделенных областей табличного документа, которое можно передавать на сервер.
// Служит заменой типа ВыделенныеОбластиТабличногоДокумента
// когда нужно вычислить сумму ячеек на сервере без контекста.
// См. также СтандартныеПодсистемыВызовСервера.РасчетЯчеек.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - таблица, для которой нужно сформировать описание выделенных ячеек.
//
// Возвращаемое значение: 
//   Массив - содержит структуры со свойствами:
//       * Верх  - Число - Номер строки верхней границы области.
//       * Низ   - Число - Номер строки нижней границы области.
//       * Лево  - Число - Номер колонки верхней границы области.
//       * Право - Число - Номер колонки нижней границы области.
//       * ТипОбласти - ТипОбластиЯчеекТабличногоДокумента - Колонки, Прямоугольник, Строки, Таблица.
//
Функция ВыделенныеОбласти(ТабличныйДокумент)
	
	Результат = Новый Массив;
	Для Каждого ВыделеннаяОбласть Из ТабличныйДокумент.ВыделенныеОбласти Цикл
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		Структура = Новый Структура("Верх, Низ, Лево, Право, ТипОбласти");
		ЗаполнитьЗначенияСвойств(Структура, ВыделеннаяОбласть);
		Результат.Добавить(Структура);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Запускает внешнюю программу на исполнение (например, *.exe, *bat), 
// или системную команду (например, ping, tracert или traceroute, обращаться к rac-клиенту),
// Позволяет также получать код возврата и значения потоков вывода (stdout) и ошибок (stderr)
//
// При запуске внешней программы в пакетном режиме поток вывода и поток ошибок может возвращаться на не ожидаемом языке. 
// Для того чтобы передать внешней программе язык, на котором ожидается результат следует:
// - указать язык в параметре запуска этой программы (если такой параметр предусмотрен). 
//   Например, в пакетном режиме платформы 1С:Предприятие предусмотрен ключ "/L en";
// - в других случаях явно установить кодировку исполнения пакетной команды.
//   См. свойство КодировкаИсполнения возвращаемого значения ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы. 
//
// Параметры:
//  КомандаЗапуска - Строка - командная строка для запуска программы.
//                 - Массив - первый элемент массива, путь к исполняемому приложению,
//      если Массив, то первый элемент массива - путь к исполняемому приложению, остальные - передаваемые параметры,
//      массив соответствует тому, который получит вызываемая программа в argv.
//  ПараметрыЗапускаПрограммы - см. ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы.
//
// Пример: 
//	// Простой запуск
//  ФайловаяСистемаКлиент.ЗапуститьПрограмму("calc");
//
//  // Запуск с ожиданием завершения и получения кода возврата:
//  ПараметрыЗапускаПрограммы = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
//  ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
//  ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
//  ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
//
//  Результат = ФайловаяСистемаКлиент.ЗапуститьПрограмму("ping 127.0.0.1 -n 5", ПараметрыЗапускаПрограммы);
//
//  КодВозврата = Результат.КодВозврата;
//  ПотокВывода = Результат.ПотокВывода;
//  ПотокОшибок = Результат.ПотокОшибок;
//
Процедура ЗапуститьПрограмму(Знач КомандаЗапуска, Знач ПараметрыЗапускаПрограммы = Неопределено) Экспорт
	
	Если ПараметрыЗапускаПрограммы = Неопределено Тогда 
		ПараметрыЗапускаПрограммы = ПараметрыЗапускаПрограммы();
	КонецЕсли;
	
	СтрокаКоманды = УправлениеITОтделом8УФКлиентСервер.БезопаснаяСтрокаКоманды(КомандаЗапуска);
	
	ИмяФайлаПотокаВывода = "";
	ИмяФайлаПотокаОшибок = "";
	
#Если Не ВебКлиент Тогда
	Если ПараметрыЗапускаПрограммы.ДождатьсяЗавершения Тогда
		
		// АПК:441-выкл временные файлы удаляются после асинхронных операций
		
		Если ПараметрыЗапускаПрограммы.ПолучитьПотокВывода Тогда
			ИмяФайлаПотокаВывода = ПолучитьИмяВременногоФайла("stdout.tmp");
			СтрокаКоманды = СтрокаКоманды + " > """ + ИмяФайлаПотокаВывода + """";
		КонецЕсли;
		
		Если ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок Тогда 
			ИмяФайлаПотокаОшибок = ПолучитьИмяВременногоФайла("stderr.tmp");
			СтрокаКоманды = СтрокаКоманды + " 2> """ + ИмяФайлаПотокаОшибок + """";
		КонецЕсли;
		
		// АПК:441-вкл
		
	КонецЕсли;
#КонецЕсли
	
	Контекст = Новый Структура;
	Контекст.Вставить("СтрокаКоманды", СтрокаКоманды);
	Контекст.Вставить("ТекущийКаталог", ПараметрыЗапускаПрограммы.ТекущийКаталог);
	Контекст.Вставить("Оповещение", ПараметрыЗапускаПрограммы.Оповещение);
	Контекст.Вставить("ДождатьсяЗавершения", ПараметрыЗапускаПрограммы.ДождатьсяЗавершения);
	Контекст.Вставить("КодировкаИсполнения", ПараметрыЗапускаПрограммы.КодировкаИсполнения);
	Контекст.Вставить("ПолучитьПотокВывода", ПараметрыЗапускаПрограммы.ПолучитьПотокВывода);
	Контекст.Вставить("ПолучитьПотокОшибок", ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок);
	Контекст.Вставить("ИмяФайлаПотокаВывода", ИмяФайлаПотокаВывода);
	Контекст.Вставить("ИмяФайлаПотокаОшибок", ИмяФайлаПотокаОшибок);
	Контекст.Вставить("ВыполнитьСНаивысшимиПравами", ПараметрыЗапускаПрограммы.ВыполнитьСНаивысшимиПравами);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗапуститьПрограммуПослеПроверкиРасширенияРаботыСФайлами", ФайловаяСистемаСлужебныйКлиент, Контекст);
	ТекстПредложения = 
		НСтр("ru = 'Для создания временного каталога необходимо установить расширение для работы с 1С:Предприятием.'");
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
	
КонецПроцедуры

// Конструктор параметров для ФайловаяСистемаКлиент.ЗапуститьПрограмму.
//
// Возвращаемое значение:
//  Структура - где:
//    * ТекущийКаталог - Строка - Задает текущий каталог запускаемого приложения.
//    * Оповещение - ОписаниеОповещения - оповещение о результате завершения запущенного приложения, 
//          если оповещение не задано в случае ошибки будет показано предупреждение. Параметры обработчика завершения:
//          - Результат - Структура - результат работы программы:
//              -- ПриложениеЗапущено - Булево - Истина, если внешнее приложение не вызвало ошибок при открытии.
//              -- ОписаниеОшибки - Строка - краткое описание ошибки. При отмене пользователем пустая строка.
//              -- КодВозврата - Число  - код возврата программы.
//              -- ПотокВывода - Строка - результат работы программы, направленный в поток stdout.
//                             В веб-клиенте всегда принимает значение "".
//              -- ПотокОшибок - Строка - ошибки исполнения программы, направленные в поток stderr.
//                             В веб-клиенте всегда принимает значение "".
//          - ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//    * ДождатьсяЗавершения - Булево - Истина, дожидаться завершения запущенного приложения перед продолжением работы.
//    * ПолучитьПотокВывода - Булево - Ложь - результат, направленный в поток stdout,
//         если не указан ДождатьсяЗавершения - игнорируется.
//    * ПолучитьПотокОшибок - Булево - Ложь - ошибки, направленные в поток stderr,
//         если не указан ДождатьсяЗавершения - игнорируется.
//    * КодировкаИсполнения - Строка, Число - кодировка, устанавливаемая в Windows с помощью команды chcp,
//         возможные значения: "OEM", "CP866", "UTF8" или номер кодовой страницы.
//         В Linux устанавливается переменной окружения "LANGUAGE" для конкретной команды,
//         возможные значения можно определить выполнив команду "locale -a", например "ru_RU.UTF-8".
//         В MacOS игнорируется.
//    * ВыполнитьСНаивысшимиПравами - Булево - Истина, если требуется запустить программу на исполнение
//          с повышением привилегий системы:
//          - Windows: запрос UAC;
//          - Linux: исполнение с командой pkexec;
//          - macOS, веб-клиент и мобильный клиент: будет возвращен Результат.ОписаниеОшибки.
//
Функция ПараметрыЗапускаПрограммы() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийКаталог", "");
	Параметры.Вставить("Оповещение", Неопределено);
	Параметры.Вставить("ДождатьсяЗавершения", Истина);
	Параметры.Вставить("ПолучитьПотокВывода", Ложь);
	Параметры.Вставить("ПолучитьПотокОшибок", Ложь);
	Параметры.Вставить("КодировкаИсполнения", Неопределено);
	Параметры.Вставить("ВыполнитьСНаивысшимиПравами", Ложь);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти
