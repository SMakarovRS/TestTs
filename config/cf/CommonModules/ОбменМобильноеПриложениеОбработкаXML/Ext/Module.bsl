
#Область ФормированиеXML

Процедура ПолучитьXMLИзОбъекта(ЗаписьXML, Знач ВерсияСервиса, ПараметрыСинхронизации, Знач ЭлементДанных, 
	Знач КакПредмет = Ложь) Экспорт

	Если ЭлементДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ЭлементДанных) = Тип("Структура") Тогда
		Объект          = ЭлементДанных.Ссылка;
		Если ЭлементДанных.Свойство("УдалениеОбъекта") Тогда
			ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
			ОбменМобильноеПриложениеСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, 
				ПараметрыСинхронизации.МобильныйКлиент, Объект,	НСтр("ru = 'Передано удаление объекта'"));
			Возврат;
			
		Иначе
			ПометкаУдаления = ЭлементДанных.ПометкаУдаления;
			Если ПометкаУдаления = Неопределено Тогда
				ПометкаУдаления = Ложь;
			КонецЕсли;
			
		КонецЕсли;	
		
	Иначе
		Объект  = ЭлементДанных;
		Попытка
			ПометкаУдаления = ЭлементДанных.ПометкаУдаления;
		Исключение
			ПометкаУдаления = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЭлементДанных)) Тогда
		ОбъектXML = ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.УникальныйИдентификатор()];
		Если Не ОбъектXML = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ТипЗначенияОбъекта = ТипЗнч(Объект);		
	
	Если ТипЗначенияОбъекта = Тип("УдалениеОбъекта") Тогда
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		ОбменМобильноеПриложениеСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, 
										ПараметрыСинхронизации.МобильныйКлиент, Объект, 
										НСтр("ru = 'Передано удаление объекта'"));
		Возврат;
	КонецЕсли;

	ОбъектТолькоЧтение = 0;
		
	Если Не ТипЗначенияОбъекта = Тип("ИнформацияОбОшибке") Тогда
		Если Не ОбменМобильноеПриложениеСервер.ОбъектДоступенТекущемуПользователю(
			ПараметрыСинхронизации.МобильныйКлиент,	Объект, ОбъектТолькоЧтение) Тогда				
				ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗначенияОбъекта = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ВыгрузитьВXMLГруппуПользователей(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Пользователи") Тогда
		ВыгрузитьВXMLПользователя(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВыгрузитьВXMLФизЛицо(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ПотенциальныеКлиенты") Тогда
		ВыгрузитьВXMLПотенциальногоКлиента(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Сотрудники") Тогда
		ВыгрузитьВXMLСотрудника(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ТипыПроцессов") Тогда
		ВыгрузитьВXMLТипыПроцессов(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
				
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ГруппыЗаданий") Тогда
		ВыгрузитьВXMLГруппуЗадания(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.КатегорииЗаданий") Тогда
		ВыгрузитьВXMLКатегориюЗадания(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Спринты") Тогда
		ВыгрузитьВXMLСпринт(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Процессы") Тогда
		ВыгрузитьВXMLПроцесс(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ЭтапыПроцессов") Тогда
		ВыгрузитьВXMLЭтапПроцесса(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Организации") Тогда
		ВыгрузитьВXMLОрганизацию(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Подразделения") Тогда
		ВыгрузитьВXMLПодразделение(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
		ВыгрузитьВXMLКонтрагента(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ВыгрузитьВXMLКонтактноеЛицо(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ОценкиЗаданий") Тогда
		ВыгрузитьВXMLОценкуЗадания(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Сервисы") Тогда
		ВыгрузитьВXMLСервис(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Услуги") Тогда
		ВыгрузитьВXMLУслугу(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
	
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Проекты") Тогда
		ВыгрузитьВXMLПроект(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.СпособыСозданияЗаданий") Тогда
		ВыгрузитьВXMLСпособСозданияЗадания(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Теги") Тогда
		ВыгрузитьВXMLТег(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Комментарии") Тогда
		ВыгрузитьВXMLКомментарий(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
			
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументСсылка.Задание") Тогда
		ВыгрузитьВXMLЗадание(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ЗаданиеПрисоединенныеФайлы") 
		ИЛИ ТипЗначенияОбъекта = Тип("СправочникСсылка.КомментарииПрисоединенныеФайлы") Тогда
		ВыгрузитьВXMLФайлы(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение, КакПредмет);	
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ВыгрузитьВXMLВидКонтактнойИнформации(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, 
			ОбъектТолькоЧтение);	
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.СтраныМира") Тогда
		ВыгрузитьВXMLСтрану(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);		
	
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ПользователиМобильныхПриложений") Тогда
  		ВыгрузитьВXMLНастройкиСинхронизации(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.НастройкиПользователей") Тогда

		Для Каждого Запись Из Объект Цикл
			ВыгрузитьВXMLНастройкиПользователяПоУмолчанию(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Запись);
		КонецЦикла;	
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.СвязьКомментариев") Тогда
       	ВыгрузитьВXMLСвязьКомментариев(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ЛинииПоддержки") Тогда
		ВыгрузитьВXMLЛиниюПоддержки(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		ВыгрузитьВXMLВидНоменклатуры(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Номенклатура") Тогда
		ВыгрузитьВXMLНоменклатуру(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
		ВыгрузитьВXMLКарточкуНоменклатуры(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ВидыМестХранения") Тогда
		ВыгрузитьВXMLВидМестаХранения(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.МестаХранения") Тогда
		ВыгрузитьВXMLМестоХранения(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.КатегорииЛогиновИПаролей") Тогда
		ВыгрузитьВXMLКатегорииЛогинов(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);	
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ЛогиныИПароли") Тогда
		ВыгрузитьВXMLЛогиныИПароли(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);	
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.ЛогиныИПаролиХранилище") Тогда		
		ВыгрузитьВXMLЛогиныИПаролиХранилище(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ВидыРабот") Тогда
		ВыгрузитьВXMLВидРаботы(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда
		ВыгрузитьВXMLЕжедневныйОтчет(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, ОбъектТолькоЧтение);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ИнформацияОбОшибке") Тогда		
	    ВыгрузитьВXMLИнформациюОбОшибке(ЗаписьXML, ВерсияСервиса, Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьВXMLИнформациюОбОшибке(ЗаписьXML, Знач ВерсияСервиса, Знач ЭлементДанных)
	
	ВерсияСервера = Метаданные.Версия;
	// Подготовка данных.
	ТипЗаписи = "Error";
	Если СтрНайти(ЭлементДанных.Описание, "info:") Тогда
		ТипЗаписи = "Information";
	ИначеЕсли СтрНайти(ЭлементДанных.Описание, "warning:") Тогда
		ТипЗаписи = "Warning";
	КонецЕсли;

	ОписаниеОшибки = ЭлементДанных.Описание;
	ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "info:", "");
	ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "warning:", "");

	Если СтрСравнить(ТипЗаписи, "Error") = 0 Тогда

		ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ЭлементДанных);
		ПодробноеОписаниеОшибки = СтрЗаменить(ПодробноеОписаниеОшибки, "info:", "");
		ПодробноеОписаниеОшибки = СтрЗаменить(ПодробноеОписаниеОшибки, "warning:", "");

		ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'При синхронизации на сервере произошла ошибка:
				|%1
				|
				|#Текст ошибки (для администратора):#
				|%2'"),
			ОписаниеОшибки,
			ПодробноеОписаниеОшибки);

	КонецЕсли;

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("LogRecord", ВерсияСервера);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "RecordType", ТипЗаписи);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Description", ОписаниеОшибки);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

Функция ЗаписатьЗаголовокОбъекта(Знач ИмяТипаОбъекта, Знач ВерсияФормата)

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяТипаОбъекта);
	ЗаписьXML.ЗаписатьАтрибут("Version", ВерсияФормата);

	Возврат ЗаписьXML;

КонецФункции

Функция УникальныйИдентификаторРодителя(Знач Объект)
	
	Возврат ?(ЗначениеЗаполнено(Объект.Родитель), 
		Объект.Родитель.УникальныйИдентификатор(),
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
КонецФункции

Процедура ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, Знач ИмяЭлемента, Знач ЭлементДанных)

	Если Не ЗначениеЗаполнено(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Type",	
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных));
		
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЭлементДанных);	
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, Знач ИмяЭлемента, Знач ЗначениеЭлемента)

	Если (ЗначениеЭлемента = Неопределено) ИЛИ (Не ЗначениеЗаполнено(ЗначениеЭлемента)) Тогда
		Возврат;
	КонецЕсли;

	Попытка
		УИД = ЗначениеЭлемента.УникальныйИдентификатор();
	Исключение
		ВызватьИсключение 
			СтрШаблон("Не удалось получить УИД от объекта (Тип %1, %2)", ТипЗнч(ЗначениеЭлемента), 
				Строка(ЗначениеЭлемента));
	КонецПопытки;

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, ИмяЭлемента, УИД);

КонецПроцедуры

Процедура ЗаписатьЭлементОбъектаДанных(ЗаписьXML, Знач ИмяЭлемента, Знач ЗначениеЭлемента)

	Если Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	
	Если ТипЗнч(ЗначениеЭлемента) = Тип("Строка") Тогда
		ЗаписьXML.ЗаписатьТекст(
			XMLСтрока(ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ЗначениеЭлемента)));
	Иначе	
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЗначениеЭлемента));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных)
	
	УникальныйИдентификаторПустой = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");	
	Если ЭлементДанных.Ссылка.УникальныйИдентификатор() = УникальныйИдентификаторПустой
		Или Не ЗначениеЗаполнено(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;	
	
	ВыгрузитьУдалениеОбъекта(ЗаписьXML, ЭлементДанных, ВерсияСервера);	
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьУдалениеОбъекта(ЗаписьXML, Знач ЭлементДанных, Знач ВерсияСервера = "")

	мЭлементДанныхСсылка = ЭлементДанных.Ссылка;
	
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ObjectDeletion", ВерсияСервера);	
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type", 
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаПоСсылке(мЭлементДанныхСсылка));
		
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", мЭлементДанныхСсылка);
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

Процедура ВыгрузитьВXMLПользователя(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект     = ЭлементДанных.Ссылка;
	
	РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, Недействителен, ИдентификаторПользователяИБ,"  
		+ " Сотрудник, ФизическоеЛицо, ЛинияПоддержки, Подчиненные, КонтактнаяИнформация, Комментарий");
	
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("User", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",  ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UserName",  РеквизитыПользователя.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UserDeleteMark", РеквизитыПользователя.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UserValid", РеквизитыПользователя.Недействителен);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UserIDDB",  РеквизитыПользователя.ИдентификаторПользователяИБ);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UserComment",  РеквизитыПользователя.Комментарий);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "UserAssociate",  РеквизитыПользователя.Сотрудник);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "UserIndividual", РеквизитыПользователя.ФизическоеЛицо);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "UserSupportLine", РеквизитыПользователя.ЛинияПоддержки);
	
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("SubordinateUsers");		
	Подчиненные = РеквизитыПользователя.Подчиненные.Выгрузить();
	
	Для Каждого СтрокаПодчиненные Из Подчиненные Цикл		
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StrSubordinateUsers");			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "SubordinateUser", СтрокаПодчиненные.Подчиненный);					
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();			
		Если ЗначениеЗаполнено(СтрокаПодчиненные.Подчиненный) Тогда
			ПараметрыСинхронизации.ОбъектыКВыгрузке.Вставить(СтрокаПодчиненные.Подчиненный, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	// КИ.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("UserContactInfo");		
	ТаблицаКИ = РеквизитыПользователя.КонтактнаяИнформация.Выгрузить();
	
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл			
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("UserContactInfoSt");
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type",    		
			ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаКИ(СтрокаКИ.Тип));
			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Kind",   		СтрокаКИ.Вид);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Caption", 		СтрокаКИ.Представление);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FieldValues", 	СтрокаКИ.ЗначенияПолей);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Country", 		СтрокаКИ.Страна);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Region", 		СтрокаКИ.Регион);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "City", 			СтрокаКИ.Город);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Email",			СтрокаКИ.АдресЭП);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Domain",		СтрокаКИ.ДоменноеИмяСервера);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PhoneNumber",	СтрокаКИ.НомерТелефона);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Phone",			СтрокаКИ.НомерТелефонаБезКодов);			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ViewForList",  СтрокаКИ.ВидДляСписка);		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLГруппуПользователей(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	РеквизитыГруппыПользователей = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, Предопределенный, ИмяПредопределенныхДанных, Комментарий, Состав");	
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("GroupUsers", 			ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 		ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GroupUsersName",    РеквизитыГруппыПользователей.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GroupUsersDeleteMark",РеквизитыГруппыПользователей.ПометкаУдаления);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GroupUsersParent",  
		УникальныйИдентификаторРодителя(ВыгружаемыйОбъект));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GroupUsersComment", РеквизитыГруппыПользователей.Комментарий);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GroupUsersPred",	РеквизитыГруппыПользователей.Предопределенный);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "GroupUsersNamePred",
		РеквизитыГруппыПользователей.ИмяПредопределенныхДанных);
	
	ТаблицаСостав = РеквизитыГруппыПользователей.Состав.Выгрузить();
	
	Если Не ТаблицаСостав.Количество() = 0 Тогда
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Members");
		
		Для Каждого СтрокаСостава Из ТаблицаСостав Цикл
			
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Member", СтрокаСостава.Пользователь);			
			Если Не ПараметрыСинхронизации.ВыгруженныеОбъекты[СтрокаСостава.Пользователь] = Истина Тогда
				ПараметрыСинхронизации.ОбъектыКВыгрузке.Вставить(СтрокаСостава.Пользователь, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLФизЛицо(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	РеквизитыФЛ   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, Родитель, ЭтоГруппа,"  
		+ "ДатаРождения, КонтактнаяИнформация");
			
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Individual", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		    ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IndividualDataVersion", ВыгружаемыйОбъект.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IndividualName",    	РеквизитыФЛ.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IndividualDeleteMark", 	РеквизитыФЛ.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IndividualParent",  	
		УникальныйИдентификаторРодителя(РеквизитыФЛ));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IndividualGroup",   	РеквизитыФЛ.ЭтоГруппа);	
	
	Если Не РеквизитыФЛ.ЭтоГруппа Тогда
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IndividualBirthday", РеквизитыФЛ.ДатаРождения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IndividualPict",     Новый ХранилищеЗначения(Неопределено));
		
		// КИ.
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("IndividualContactInfo");		
		ТаблицаКИ = РеквизитыФЛ.КонтактнаяИнформация.Выгрузить();
		
		Для Каждого СтрокаКИ Из ТаблицаКИ Цикл			
			
			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("IndividualContactInfoSt");
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type",    		
				ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаКИ(СтрокаКИ.Тип));
				
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Kind",   		СтрокаКИ.Вид);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Caption", 		СтрокаКИ.Представление);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FieldValues", 	СтрокаКИ.ЗначенияПолей);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Country", 		СтрокаКИ.Страна);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Region", 		СтрокаКИ.Регион);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "City", 			СтрокаКИ.Город);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Email",			СтрокаКИ.АдресЭП);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Domain",		СтрокаКИ.ДоменноеИмяСервера);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PhoneNumber",	СтрокаКИ.НомерТелефона);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Phone",			СтрокаКИ.НомерТелефонаБезКодов);			
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ViewForList",  СтрокаКИ.ВидДляСписка);		
			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
	КонецЕсли;	
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLПотенциальногоКлиента(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	РеквизитыПК   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, Родитель, ЭтоГруппа, Организация, Клиент,"  
		+ " ДатаРегистрации, Ответственный, Комментарий, КонтактнаяИнформация");	
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("PotentialClients", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",	ОбъектТолькоЧтение);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"PotentialClientsDataVersion", ВыгружаемыйОбъект.ВерсияДанных);
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"PotentialClientsName",	РеквизитыПК.Наименование);
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"PotentialClientsDeleteMark",	РеквизитыПК.ПометкаУдаления);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"PotentialClientsParent",	УникальныйИдентификаторРодителя(РеквизитыПК));
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта,
		"PotentialClientsGroup",	РеквизитыПК.ЭтоГруппа);	
	
	Если Не РеквизитыПК.ЭтоГруппа Тогда
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PotentialClientsDateRegistration", РеквизитыПК.ДатаРегистрации);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PotentialClientsOrganization",	РеквизитыПК.Организация);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "PotentialClientsClient",  		РеквизитыПК.Клиент);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "PotentialClientsResponsible",	РеквизитыПК.Ответственный);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PotentialClientsComment",		РеквизитыПК.Комментарий);
		
		// КИ.
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("PotentialClientsContactInfo");		
		ТаблицаКИ = РеквизитыПК.КонтактнаяИнформация.Выгрузить();
		
		Для Каждого СтрокаКИ Из ТаблицаКИ Цикл			
			
			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("PotentialClientsContactInfoStr");
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type",    		
				ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаКИ(СтрокаКИ.Тип));
				
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Kind",   		СтрокаКИ.Вид);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Caption", 		СтрокаКИ.Представление);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FieldValues", 	СтрокаКИ.ЗначенияПолей);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Country", 		СтрокаКИ.Страна);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Region", 		СтрокаКИ.Регион);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "City", 			СтрокаКИ.Город);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Email",			СтрокаКИ.АдресЭП);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Domain",		СтрокаКИ.ДоменноеИмяСервера);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PhoneNumber",	СтрокаКИ.НомерТелефона);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Phone",			СтрокаКИ.НомерТелефонаБезКодов);			
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ViewForList",  СтрокаКИ.ВидДляСписка);		
			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
			
		КонецЦикла;		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
	КонецЕсли;	
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLСотрудника(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект   = ЭлементДанных.Ссылка;
	РеквизитыСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Код, ЭтоГруппа, ПометкаУдаления, Родитель, Наименование,"
		+ " Организация, Физлицо, Актуальность, Подразделение, ВнутреннийНомер, КонтактнаяИнформация");
			
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Associate", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    	   ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AssociateName",    РеквизитыСотрудника.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AssociateDeleteMark",РеквизитыСотрудника.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AssociateParent",  
		УникальныйИдентификаторРодителя(РеквизитыСотрудника));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AssociateGroup",   РеквизитыСотрудника.ЭтоГруппа);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AssociateCode",    РеквизитыСотрудника.Код);	
	
	Если Не РеквизитыСотрудника.ЭтоГруппа Тогда
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AssociateRelevance", 	РеквизитыСотрудника.Актуальность);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AssociateExtensionNumber", РеквизитыСотрудника.ВнутреннийНомер);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "AssociateОrganization",РеквизитыСотрудника.Организация);		
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "AssociateIndividual", 	РеквизитыСотрудника.Физлицо);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "AssociateSubdivision", РеквизитыСотрудника.Подразделение);
		
		// КИ.
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("AssociateContactInfo");		
		ТаблицаКИ = РеквизитыСотрудника.КонтактнаяИнформация.Выгрузить();
		Для Каждого СтрокаКИ Из ТаблицаКИ Цикл			
			
			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("AssociateContactInfoSt");
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type",    		
				ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаКИ(СтрокаКИ.Тип));
				
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Kind",   		СтрокаКИ.Вид);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Caption", 		СтрокаКИ.Представление);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FieldValues", 	СтрокаКИ.ЗначенияПолей);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Country", 		СтрокаКИ.Страна);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Region", 		СтрокаКИ.Регион);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "City", 			СтрокаКИ.Город);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Email",			СтрокаКИ.АдресЭП);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Domain",		СтрокаКИ.ДоменноеИмяСервера);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PhoneNumber",	СтрокаКИ.НомерТелефона);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Phone",			СтрокаКИ.НомерТелефонаБезКодов);			
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ViewForList",  СтрокаКИ.ВидДляСписка);		
			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
			
		КонецЦикла;		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLТипыПроцессов(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, ВерсияДанных, Предопределенный, ИмяПредопределенныхДанных");
			
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("ProcessType",					ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 				ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly", 		   		    ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessTypeDataVersion", 	Реквизиты.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessTypeName",    		Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessTypeDeleteMark",		Реквизиты.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessTypePred",	 		Реквизиты.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessTypeNamePred",		Реквизиты.ИмяПредопределенныхДанных);
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLГруппуЗадания(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, ВерсияДанных, Предопределенный, ИмяПредопределенныхДанных, ЗапретВыбораВЗадании");	
			
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("TaskGroup", 				ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 			ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		    ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskGroupDataVersion", 	Реквизиты.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskGroupName",    		Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskGroupProhibitionChoice", Реквизиты.ЗапретВыбораВЗадании);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskGroupDeleteMark",	Реквизиты.ПометкаУдаления);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskGroupParent",  		
		УникальныйИдентификаторРодителя(ВыгружаемыйОбъект));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskGroupPred",	 		Реквизиты.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskGroupNamePred",		Реквизиты.ИмяПредопределенныхДанных);
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLКатегориюЗадания(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, ЭтоГруппа, ВерсияДанных, "
		+ "ЗапретВыбораВЗадании, Предопределенный, ИмяПредопределенныхДанных");
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("TaskCategory",              ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 			  ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		      ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskCategoryDataVersion", Реквизиты.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskCategoryName",    	  Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskCategoryDeleteMark",  Реквизиты.ПометкаУдаления);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskCategoryParent",  	  
		УникальныйИдентификаторРодителя(ВыгружаемыйОбъект));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskCategoryGroup",       Реквизиты.ЭтоГруппа);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskCategoryPred",		  Реквизиты.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskCategoryNamePred",	  Реквизиты.ИмяПредопределенныхДанных);
	
	Если Не Реквизиты.ЭтоГруппа Тогда
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskCategoryProhibitionChoice", Реквизиты.ЗапретВыбораВЗадании);
	КонецЕсли;	
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLСпринт(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект,
		"Наименование, ПометкаУдаления, ЭтоГруппа, ВерсияДанных," 
		+ "ДатаНачала, ДатаОкончания, Завершен, Описание, Предопределенный, ИмяПредопределенныхДанных");
	
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Sprint", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SprintDataVersion", Реквизиты.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SprintName",    	Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SprintDeleteMark", 	Реквизиты.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SprintParent",  	
		УникальныйИдентификаторРодителя(ВыгружаемыйОбъект));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SprintGroup",   	Реквизиты.ЭтоГруппа);	
	
	Если Не ВыгружаемыйОбъект.ЭтоГруппа Тогда
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SprintBeginDate",  Реквизиты.ДатаНачала);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SprintEndDate",    Реквизиты.ДатаОкончания);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SprintCompleted",  Реквизиты.Завершен);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SprintDescription",Реквизиты.Описание);
	КонецЕсли;
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLПроцесс(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт
	
	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект,
		СтрЗаменить("ЭтоГруппа, ПометкаУдаления, Родитель, Наименование,
		|АвтоматическоеВыполнениеЗадания, АвтоматическоеВыполнениеЗаданияЧасов, АвтоматическоеВыполнениеЗаданияЭтап,
		|ВидЭтапа, ВыводПрошлыхИсполнителейВСпискеВыбора, ГрафическаяСхема, ДобавлятьНовогоИнициатораВНаблюдатели,
		|Картинка, Комментарий, КонтрольИсполнителей, НеПереходитьНаЭтапыВыполненияБезУказанияРешений, НеИзменять,
		|НеИспользовать, НеИспользоватьКомментарии, СостояниеЭтапа, ТипПроцесса, Исполнители, Наблюдатели,
		|ИсполнителиЭтапов, Этапы, ЭтапыПроцесса, Предопределенный, ИмяПредопределенныхДанных", Символы.ПС, ""));	
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Process", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 		ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    	 	ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessName",    	РеквизитыПроцесса.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessDeleteMark",	РеквизитыПроцесса.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessParent",  
		УникальныйИдентификаторРодителя(РеквизитыПроцесса));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessGroup",   	РеквизитыПроцесса.ЭтоГруппа);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessPred",	 	РеквизитыПроцесса.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessNamePred",	РеквизитыПроцесса.ИмяПредопределенныхДанных);
	
	Если Не РеквизитыПроцесса.ЭтоГруппа Тогда
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessAutomaticExecution",
			РеквизитыПроцесса.АвтоматическоеВыполнениеЗадания);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessAutomaticTimeout",
			РеквизитыПроцесса.АвтоматическоеВыполнениеЗаданияЧасов);
			
		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ProcessAutomaticExecutionStep",
			РеквизитыПроцесса.АвтоматическоеВыполнениеЗаданияЭтап);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepView",
			РеквизитыПроцесса.ВидЭтапа);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessOutputExecutors",
			РеквизитыПроцесса.ВыводПрошлыхИсполнителейВСпискеВыбора);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessGraphicScheme",
			Новый ХранилищеЗначения(РеквизитыПроцесса.ГрафическаяСхема.Получить(),
			Новый СжатиеДанных(9)));
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessAddNewInitiatorToObservers",
			РеквизитыПроцесса.ДобавлятьНовогоИнициатораВНаблюдатели);
			
		КартинкаПроцесса = РеквизитыПроцесса.Картинка.Получить();
		
		Если ТипЗнч(КартинкаПроцесса) = Тип("Картинка") Тогда
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessPict", 
			Новый ХранилищеЗначения(КартинкаПроцесса.ПолучитьДвоичныеДанные(), 
			Новый СжатиеДанных(9)));
			
		Иначе	
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessPict", 
			Новый ХранилищеЗначения(КартинкаПроцесса, 
			Новый СжатиеДанных(9)));
			
		КонецЕсли;
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessComment",
			РеквизитыПроцесса.Комментарий);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessControlExecutors", 		
			РеквизитыПроцесса.КонтрольИсполнителей);
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessDontOverrideWithoutResolution", 
			РеквизитыПроцесса.НеПереходитьНаЭтапыВыполненияБезУказанияРешений);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessDontChange",
			РеквизитыПроцесса.НеИзменять);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessDontUse",
			РеквизитыПроцесса.НеИспользовать);
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessDontUseComments", 		
			РеквизитыПроцесса.НеИспользоватьКомментарии);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepState",
			ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеСостоянияЭтапаПроцесса(
				РеквизитыПроцесса.СостояниеЭтапа));
			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ProcessDocumentType",
			РеквизитыПроцесса.ТипПроцесса);
		
		// Табличные части.
		//Исполнители.
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Performers");		
		Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
		
		Для Каждого СтрокаИсполнителя Из Исполнители Цикл			
			
			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Performer");			
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Performer", СтрокаИсполнителя.Исполнитель);			
			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();					
			
		КонецЦикла;		
		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		//Исполнители этапов.
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("PerformersSteps");		
		ИсполнителиЭтапов = РеквизитыПроцесса.ИсполнителиЭтапов.Выгрузить();
		
		Для Каждого СтрокаИсполнителя Из ИсполнителиЭтапов Цикл			
			
			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("PerformerStep");			
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Step", 	 СтрокаИсполнителя.Этап);			
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Performer", СтрокаИсполнителя.Исполнитель);			
			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();					
			
		КонецЦикла;		
		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
		//Наблюдатели.
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Observers");		
		Наблюдатели = РеквизитыПроцесса.Наблюдатели.Выгрузить();
		
		Для Каждого СтрокаНаблюдатели Из Наблюдатели Цикл			
			
			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Observer");			
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Observer", СтрокаНаблюдатели.Наблюдатель);			
			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();					
			
		КонецЦикла;
		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
		//Этапы процесса.
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("ProcessSteps");		
		ЭтапыПроцесса = РеквизитыПроцесса.ЭтапыПроцесса.Выгрузить();
		
		Для Каждого СтрокаЭтапыПроцесса Из ЭтапыПроцесса Цикл			
			
			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StrProcessStep");			
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "BeginStep", СтрокаЭтапыПроцесса.НачальныйЭтап);			
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "EndStep", 	 СтрокаЭтапыПроцесса.КонечныйЭтап);			
			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();			
				
		КонецЦикла;
		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
		//Этапы.
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Steps");		
		Этапы = РеквизитыПроцесса.Этапы.Выгрузить();
		
		Для Каждого СтрокаЭтапы Из Этапы Цикл			
			
			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Step");			
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Step",       		СтрокаЭтапы.Этап);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта,  "SubProcess", 		СтрокаЭтапы.Подпроцесс);
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "PerformerDefault", СтрокаЭтапы.ИсполнительПоУмолчанию);
			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта,  "RequirePerformer", 
				СтрокаЭтапы.ТребоватьПриПереводеНаСледующийЭтапИсполнителя);
			
			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();				
				
		КонецЦикла;
		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
	КонецЕсли;	
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLЭтапПроцесса(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт	
	
	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		СтрЗаменить("Наименование, ПометкаУдаления, ЭтоГруппа, ВерсияДанных, 
		|ВидЭтапа, ЗаголовокКнопки, ЗапрашиватьКомментарий, Картинка, СостояниеЭтапа, ЦветРамкиКанбанДоски, 
		|ЦветТекста, ЦветФона, Комментарий, Предопределенный, ИмяПредопределенныхДанных", Символы.ПС, ""));
			
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("ProcessStep", 			ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 			ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		 	ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepName",    	Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepDeleteMark",	Реквизиты.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepParent",  
		УникальныйИдентификаторРодителя(ВыгружаемыйОбъект));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepGroup",   	Реквизиты.ЭтоГруппа);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepPred",	 	Реквизиты.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepNamePred",	Реквизиты.ИмяПредопределенныхДанных);
	
	Если Не Реквизиты.ЭтоГруппа Тогда
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepView",           Реквизиты.ВидЭтапа);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepCaptionButton",  Реквизиты.ЗаголовокКнопки);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepRequestComment", Реквизиты.ЗапрашиватьКомментарий);
		КартинкаЭтапа = Реквизиты.Картинка.Получить();
		
		Если ТипЗнч(КартинкаЭтапа) = Тип("Картинка") Тогда			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepPict", 			
			Новый ХранилищеЗначения(КартинкаЭтапа.ПолучитьДвоичныеДанные(), 
			Новый СжатиеДанных(9)));
			
		Иначе	
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepPict",
			Новый ХранилищеЗначения(КартинкаЭтапа, 
			Новый СжатиеДанных(9)));
			
		КонецЕсли;	
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepComment", 		Реквизиты.Комментарий);		
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepState",          
			ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеСостоянияЭтапаПроцесса(Реквизиты.СостояниеЭтапа));
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepColorRoomKanbandBoard",
			Реквизиты.ЦветРамкиКанбанДоски);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepTextColor",      Реквизиты.ЦветТекста);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProcessStepBackgroundColor",Реквизиты.ЦветФона);
		
	КонецЕсли;	
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLОрганизацию(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект    = ЭлементДанных.Ссылка;
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, НаименованиеПолное, Префикс, КонтактнаяИнформация,"
		+ " Предопределенный, ИмяПредопределенныхДанных");
	
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Оrganization", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		  ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ОrganizationName",    РеквизитыОрганизации.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ОrganizationDeleteMark",РеквизитыОрганизации.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ОrganizationNameFull",РеквизитыОрганизации.НаименованиеПолное);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ОrganizationPrefix",  РеквизитыОрганизации.Префикс);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ОrganizationPred",	  РеквизитыОрганизации.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ОrganizationNamePred",
		РеквизитыОрганизации.ИмяПредопределенныхДанных);
	
	// КИ.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("ОrganizationContactInfo");		
	ТаблицаКИ = РеквизитыОрганизации.КонтактнаяИнформация.Выгрузить();
	
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл			
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("ОrganizationContactInfoSt");
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type",    		
			ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаКИ(СтрокаКИ.Тип));
			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Kind",   		СтрокаКИ.Вид);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Caption", 		СтрокаКИ.Представление);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FieldValues", 	СтрокаКИ.ЗначенияПолей);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Country", 		СтрокаКИ.Страна);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Region", 		СтрокаКИ.Регион);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "City", 			СтрокаКИ.Город);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Email",			СтрокаКИ.АдресЭП);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Domain",		СтрокаКИ.ДоменноеИмяСервера);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PhoneNumber",	СтрокаКИ.НомерТелефона);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Phone",			СтрокаКИ.НомерТелефонаБезКодов);			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ViewForList",  СтрокаКИ.ВидДляСписка);		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLПодразделение(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных, 
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект 	   = ЭлементДанных.Ссылка;
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, Родитель, Организация, Комментарий, КонтактнаяИнформация");	
				
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Subdivision", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		      ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SubdivisionName",    	  ВыгружаемыйОбъект.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SubdivisionDeleteMark",   ВыгружаемыйОбъект.ПометкаУдаления);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SubdivisionParent",  	  
		УникальныйИдентификаторРодителя(РеквизитыПодразделения));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SubdivisionComment",	  ВыгружаемыйОбъект.Комментарий);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "SubdivisionОrganization", ВыгружаемыйОбъект.Организация);
	
	// КИ.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("SubdivisionContactInfo");		
	ТаблицаКИ = РеквизитыПодразделения.КонтактнаяИнформация.Выгрузить();
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл			
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("SubdivisionContactInfoSt");
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type",    		
			ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаКИ(СтрокаКИ.Тип));
			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Kind",   		СтрокаКИ.Вид);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Caption", 		СтрокаКИ.Представление);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FieldValues", 	СтрокаКИ.ЗначенияПолей);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Country", 		СтрокаКИ.Страна);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Region", 		СтрокаКИ.Регион);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "City", 			СтрокаКИ.Город);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Email",			СтрокаКИ.АдресЭП);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Domain",		СтрокаКИ.ДоменноеИмяСервера);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PhoneNumber",	СтрокаКИ.НомерТелефона);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Phone",			СтрокаКИ.НомерТелефонаБезКодов);			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ViewForList",  СтрокаКИ.ВидДляСписка);		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
	КонецЦикла;		
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLКонтрагента(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект    = ЭлементДанных.Ссылка;	
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект,
		"ЭтоГруппа, ПометкаУдаления, Родитель, Наименование, Комментарий, " 
		+ "КонтактноеЛицо, ВидКонтрагента, НаименованиеПолное, ФизическоеЛицо, КонтактнаяИнформация, ИНН, КПП, "
		+ "Автор, АвторКорректировки, ДатаКорректировки, ДатаСоздания");
			
	Если Не РеквизитыКонтрагента.ЭтоГруппа Тогда		
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.КонтактноеЛицо) Тогда
			ИДКонтактноеЛицо = РеквизитыКонтрагента.КонтактноеЛицо.УникальныйИдентификатор();			
			ПараметрыСинхронизации.ОбъектыКВыгрузке.Вставить(РеквизитыКонтрагента.КонтактноеЛицо, Истина);
		Иначе
			ИДКонтактноеЛицо = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");		
		КонецЕсли;		
	КонецЕсли;

	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Partners", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		  ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersDataVersion", ВыгружаемыйОбъект.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersName",    	  РеквизитыКонтрагента.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersDeleteMark",  РеквизитыКонтрагента.ПометкаУдаления);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersParent",      
		УникальныйИдентификаторРодителя(РеквизитыКонтрагента));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersGroup",       РеквизитыКонтрагента.ЭтоГруппа);
	
	Если Не РеквизитыКонтрагента.ЭтоГруппа Тогда
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersComment",  		 	РеквизитыКонтрагента.Комментарий);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersNameFull", 			
			РеквизитыКонтрагента.НаименованиеПолное);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersContactPerson",		ИДКонтактноеЛицо);
		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "PartnersIndividual", РеквизитыКонтрагента.ФизическоеЛицо);
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersView", 
			ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеВидаКонтрагента(РеквизитыКонтрагента.ВидКонтрагента));
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersINN", 			   	РеквизитыКонтрагента.ИНН);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersKPP", 			   	РеквизитыКонтрагента.КПП);		
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "PartnersAuthor", 			РеквизитыКонтрагента.Автор);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "PartnersAdjustmentAuthor", 
			РеквизитыКонтрагента.АвторКорректировки);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersAdjustmentDate", 
			РеквизитыКонтрагента.ДатаКорректировки);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PartnersDateOfCreation", 	РеквизитыКонтрагента.ДатаСоздания);

		// КИ.
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("PartnersContactInfo");		
		ТаблицаКИ = РеквизитыКонтрагента.КонтактнаяИнформация.Выгрузить();
		Для Каждого СтрокаКИ Из ТаблицаКИ Цикл			
			
			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("PartnersContactInfoSt");
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type",    		
				ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаКИ(СтрокаКИ.Тип));
				
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Kind",   		СтрокаКИ.Вид);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Caption", 		СтрокаКИ.Представление);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FieldValues", 	СтрокаКИ.ЗначенияПолей);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Country", 		СтрокаКИ.Страна);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Region", 		СтрокаКИ.Регион);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "City", 			СтрокаКИ.Город);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Email",			СтрокаКИ.АдресЭП);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Domain",		СтрокаКИ.ДоменноеИмяСервера);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PhoneNumber",	СтрокаКИ.НомерТелефона);			
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Phone",			СтрокаКИ.НомерТелефонаБезКодов);			
			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ViewForList",  СтрокаКИ.ВидДляСписка);		
			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
			
		КонецЦикла;		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
	КонецЕсли;	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLКонтактноеЛицо(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	РеквизитыКЛ   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, Владелец, Физлицо, Комментарий, КонтактнаяИнформация, "
		+ "Автор, АвторКорректировки, ДатаКорректировки, ДатаСоздания");
	
//	ИДВладельца = РеквизитыКЛ.Владелец.УникальныйИдентификатор();
	
	// Запись связанных объектов.	
	ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, РеквизитыКЛ.Владелец);
	ПараметрыСинхронизации.ОбъектыКВыгрузке.Вставить(РеквизитыКЛ.Владелец,  Истина);
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("ContactPersons", 				ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 				ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		        ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ContactPersonsDataVersion", ВыгружаемыйОбъект.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ContactPersonsName", 		РеквизитыКЛ.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ContactPersonsDeleteMark",	РеквизитыКЛ.ПометкаУдаления);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ContactPersonsOwner",  	РеквизитыКЛ.Владелец);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ContactPersonsComment", 	РеквизитыКЛ.Комментарий);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ContactPersonsIndividual", РеквизитыКЛ.Физлицо);	
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ContactPersonsAuthor", 	РеквизитыКЛ.Автор);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ContactPersonsAdjustmentAuthor", РеквизитыКЛ.АвторКорректировки);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ContactPersonsAdjustmentDate", РеквизитыКЛ.ДатаКорректировки);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ContactPersonsDateOfCreation", РеквизитыКЛ.ДатаСоздания);
	
	// КИ.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("ContactPersonsContactInfo");		
	ТаблицаКИ = РеквизитыКЛ.КонтактнаяИнформация.Выгрузить();
	
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл			
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("ContactPersonsContactInfoSt");
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type",    		
			ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаКИ(СтрокаКИ.Тип));
			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Kind",   		СтрокаКИ.Вид);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Caption", 		СтрокаКИ.Представление);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FieldValues", 	СтрокаКИ.ЗначенияПолей);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Country", 		СтрокаКИ.Страна);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Region", 		СтрокаКИ.Регион);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "City", 			СтрокаКИ.Город);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Email",			СтрокаКИ.АдресЭП);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Domain",		СтрокаКИ.ДоменноеИмяСервера);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PhoneNumber",	СтрокаКИ.НомерТелефона);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Phone",			СтрокаКИ.НомерТелефонаБезКодов);			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ViewForList",  СтрокаКИ.ВидДляСписка);		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
	КонецЦикла;		
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLОценкуЗадания(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект   = ЭлементДанных.Ссылка;
	РеквизитыОценки 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, ВыводитьВТекстеПисьма," 
		+ "Значение, Порядок, ЦветТекста, ЦветФона, Предопределенный, ИмяПредопределенныхДанных");
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("TaskAssessment", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		            ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskAssessmentName",            РеквизитыОценки.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskAssessmentDeleteMark",      РеквизитыОценки.ПометкаУдаления);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskAssessmentDisplayTheText",  
		РеквизитыОценки.ВыводитьВТекстеПисьма);
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskAssessmentValue",           РеквизитыОценки.Значение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskAssessmentOrder", 		    РеквизитыОценки.Порядок);	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskAssessmentTextColor", 	    РеквизитыОценки.ЦветТекста);	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskAssessmentBackgroundColor", РеквизитыОценки.ЦветФона);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskAssessmentPred",	  		РеквизитыОценки.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskAssessmentNamePred",		
		РеквизитыОценки.ИмяПредопределенныхДанных);
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLПроект(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект   = ЭлементДанных.Ссылка;
	РеквизитыПроекта 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		СтрЗаменить("Наименование, Родитель, ПометкаУдаления, Клиент, ДатаНачалаПлан, ДатаОкончанияПлан,
		|Описание, Инициатор, Статус, ДатаНачала, ДатаОкончания, Комментарий,
		|РуководительПроекта, ОтветственныйЗаПроект, Сервисы, ПроектнаяГруппа, ЧекЛист", Символы.ПС, ""));
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Project", 				ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 			ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		  	ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProjectName",         	РеквизитыПроекта.Наименование);	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProjectDeleteMark",	  	РеквизитыПроекта.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProjectParent",  	  	
		УникальныйИдентификаторРодителя(РеквизитыПроекта));	
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProjectDescription",  	
		Новый ХранилищеЗначения(РеквизитыПроекта.Описание.Получить(), 
		Новый СжатиеДанных(9)));
		
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ProjectInitiator", 	РеквизитыПроекта.Инициатор);	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProjectState", 			
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеСтатусаПроекта(РеквизитыПроекта.Статус));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProjectDateStart", 	  	РеквизитыПроекта.ДатаНачала);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProjectDateEnd", 	  	РеквизитыПроекта.ДатаОкончания);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProjectDateStartPlan", 	РеквизитыПроекта.ДатаНачалаПлан);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProjectDateEndPlan",  	РеквизитыПроекта.ДатаОкончанияПлан);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ProjectComment", 		РеквизитыПроекта.Комментарий);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ProjectManager", 		РеквизитыПроекта.РуководительПроекта);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ProjectResponsible", 	РеквизитыПроекта.ОтветственныйЗаПроект);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ProjectClient", 		РеквизитыПроекта.Клиент);
	
	// Сервисы.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("ProjectServices");		
	СервисыПроекта = РеквизитыПроекта.Сервисы.Выгрузить();
	
	Для Каждого СтрокаСервисыПроекта Из СервисыПроекта Цикл		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StrProjectServices");			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ProjectService", СтрокаСервисыПроекта.Сервис);					
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();							
	КонецЦикла;		
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	// Проектная группа.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("ProjectGroups");		
	ПроектнаяГруппа = РеквизитыПроекта.ПроектнаяГруппа.Выгрузить();
	
	Для Каждого СтрокаПроектнаяГруппа Из ПроектнаяГруппа Цикл		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StrProjectGroups");			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ProjectGroup", СтрокаПроектнаяГруппа.Участник);					
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();							
	КонецЦикла;		
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	// Чек - лист.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("ProjectCheckList");		
	ТаблицаЧекЛист = РеквизитыПроекта.ЧекЛист.Выгрузить();
	Для Каждого СтрокаЧекЛист Из ТаблицаЧекЛист Цикл			
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StrProjectCheckList");			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Done", СтрокаЧекЛист.Выполнено);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Description", СтрокаЧекЛист.Описание);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Weight", СтрокаЧекЛист.Вес);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Date", СтрокаЧекЛист.Дата);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Author", СтрокаЧекЛист.Автор);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DateStart", СтрокаЧекЛист.ДатаНачала);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DateEnd", СтрокаЧекЛист.ДатаОкончания);
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();			
		
	КонецЦикла;		
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLСервис(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных, 
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	РеквизитыСервиса  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, Родитель, ПометкаУдаления, Статус, ТипСервиса, Комментарий, Категория," 
		+ "Описание, КодСервиса, Ответственный");	
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Service", 			ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 		ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    	    ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ServiceName",       РеквизитыСервиса.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ServiceDeleteMark",	РеквизитыСервиса.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ServiceParent",
		УникальныйИдентификаторРодителя(РеквизитыСервиса));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ServiceDescription",РеквизитыСервиса.Описание);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ServiceCode",		РеквизитыСервиса.КодСервиса);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ServiceCategory",  РеквизитыСервиса.Категория);	
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ServiceResponsible", 
		РеквизитыСервиса.Ответственный);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ServiceState", 		
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеСтатусаСервиса(РеквизитыСервиса.Статус));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ServiceType",
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаСервиса(РеквизитыСервиса.ТипСервиса));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ServiceComment",
		РеквизитыСервиса.Комментарий);
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLУслугу(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных, 
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект 	= ЭлементДанных.Ссылка;
	РеквизитыУслуги		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, Родитель, ПометкаУдаления, Владелец, ВлияетНаДоступностьСервиса, КодУслуги, Описание," 
		+ " Процесс, Статус, ЭтоГруппа");	
			
//	ИДВладельца = РеквизитыУслуги.Владелец.УникальныйИдентификатор();
	
	// Запись связанных объектов.	
	ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, РеквизитыУслуги.Владелец);
	ПараметрыСинхронизации.ОбъектыКВыгрузке.Вставить(РеквизитыУслуги.Владелец,  Истина);
	
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Usluga", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",   	ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UslugaName", 	РеквизитыУслуги.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UslugaDeleteMark",РеквизитыУслуги.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UslugaGroup",	РеквизитыУслуги.ЭтоГруппа);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "UslugaOwner",  РеквизитыУслуги.Владелец);		
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UslugaParent",
		УникальныйИдентификаторРодителя(РеквизитыУслуги));
		
	Если Не РеквизитыУслуги.ЭтоГруппа Тогда
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UslugaAffectsServiceAvailability",
			РеквизитыУслуги.ВлияетНаДоступностьСервиса);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UslugaCode", 		РеквизитыУслуги.КодУслуги);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UslugaDescription", РеквизитыУслуги.Описание);	
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "UslugaProcess",	РеквизитыУслуги.Процесс);
	    ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UslugaStatus",
			ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеСтатусаУслуги(РеквизитыУслуги.Статус));
			
	КонецЕсли;
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLСпособСозданияЗадания(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных, 
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	РеквизитыСпособа  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, Предопределенный, ИмяПредопределенныхДанных");
	
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("CreationMethod", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		 	ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationMethodName", 	РеквизитыСпособа.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationMethodDeleteMark",РеквизитыСпособа.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationMethodPred",	РеквизитыСпособа.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationMethodNamePred",РеквизитыСпособа.ИмяПредопределенныхДанных);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLТег(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ЭлементДанных, 
	ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	РеквизитыТега  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, ВерсияДанных");	
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Tag", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    	ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TagDataVersion",РеквизитыТега.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TagName", 		РеквизитыТега.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TagDeleteMark", РеквизитыТега.ПометкаУдаления);
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLЗадание(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных, 
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если НЕ ЗначениеЗаполнено(ЭлементДанных) Тогда
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Проверка доступности и фильтров пользователя.
	Если РегистрыСведений.СведенияОДоступностиЗаданийПользователям.ЗаданиеДоступноПользователю(
		ТекущийПользователь, ЭлементДанных.Ссылка) Тогда
		
		Если НЕ ОбменМобильноеПриложениеСервер.ЗаданиеСоответствуетФильтрамПользователя(ЭлементДанных.Ссылка, 
			ПараметрыСинхронизации.ФильтрыПользователя) Тогда
			ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ЭлементДанных);
			Возврат;
		КонецЕсли;
		
	Иначе
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	РеквизитыЗадания  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		СтрЗаменить("Номер, Дата, Проведен, ПометкаУдаления, ВерсияДанных,
		|Автор, АвторКорректировки, Баллы, Влияние, Выполнено, ГруппаЗадания, ДатаВыполнения, ДатаЗавершения, 
		|ДатаКорректировки, ДатаНазначенияИсполнителя, ДатаСоздания, Завершено, Инициатор,  
		|Категория, Комментарий, КрайняяДатаВыполнения, КрайняяДатаРеакции, Описание, Организация, 
		|Клиент, ОценкаВыполнения, Подразделение, Приоритет, Проект, ПроцентВыполнения, Исполнители,
		|Процесс, Родитель, Сервис, СпособСоздания, Спринт, Срочность, ТекстHTML, ТекущийИсполнитель,
		|ТекущийЭтап, Тема, ТипПроцесса, Наблюдатели, Теги, ЧекЛист, Этапы, Услуга, КарточкаНоменклатуры, МестоХранения",
		Символы.ПС, ""));
	
	Если РеквизитыЗадания.ПометкаУдаления Тогда	 
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;
		
	КонецЕсли;
	
	ДатаПоследнегоИзменения	= РегистрыСведений.РеквизитыЗаданий.ПолучитьРеквизитЗадания(ВыгружаемыйОбъект, "ДатаПоследнегоИзменения");
	ДатаОткрытия				= РегистрыСведений.РеквизитыЗаданийПоПользователям.ПолучитьРеквизитЗаданияПоПользователю(ВыгружаемыйОбъект,
		"ДатаОткрытия", ТекущийПользователь);
		
	// Начало записи объекта.
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Task", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    	  ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskDataVersion", РеквизитыЗадания.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskNumber", РеквизитыЗадания.Номер);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskDate", РеквизитыЗадания.Дата);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskAuthor", РеквизитыЗадания.Автор);			
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskAuthorCorrection", РеквизитыЗадания.АвторКорректировки);			
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskPoints", РеквизитыЗадания.Баллы);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskInfluence", 
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеВлияния(РеквизитыЗадания.Влияние));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskDone", РеквизитыЗадания.Выполнено);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskGroup", РеквизитыЗадания.ГруппаЗадания);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskDoneDate", РеквизитыЗадания.ДатаВыполнения);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskCompletedDate", РеквизитыЗадания.ДатаЗавершения);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskCorrectionDate", РеквизитыЗадания.ДатаКорректировки);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskAppointmentExecutorDate", 
		РеквизитыЗадания.ДатаНазначенияИсполнителя);
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskCreationDate", РеквизитыЗадания.ДатаСоздания);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskCompleted", РеквизитыЗадания.Завершено);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskInitiator", РеквизитыЗадания.Инициатор);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskCategory", РеквизитыЗадания.Категория);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskComment", РеквизитыЗадания.Комментарий);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskEndDateCompletion", РеквизитыЗадания.КрайняяДатаВыполнения);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskReactionDeadline", РеквизитыЗадания.КрайняяДатаРеакции); 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskDescription", РеквизитыЗадания.Описание);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskOrganization", РеквизитыЗадания.Организация);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskClient", РеквизитыЗадания.Клиент);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskAssessment", РеквизитыЗадания.ОценкаВыполнения);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskSubdivision", РеквизитыЗадания.Подразделение);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskPriority", 
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеПриоритета(РеквизитыЗадания.Приоритет));
	
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskProject", РеквизитыЗадания.Проект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskPercentExecutions", РеквизитыЗадания.ПроцентВыполнения);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskProcess", РеквизитыЗадания.Процесс);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskParent", РеквизитыЗадания.Родитель);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskService", РеквизитыЗадания.Сервис);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskCreationMethod", РеквизитыЗадания.СпособСоздания);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskSprint", РеквизитыЗадания.Спринт);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskUrgency", 
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеСрочности(РеквизитыЗадания.Срочность));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskHTMLText", РеквизитыЗадания.ТекстHTML);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskCurrentContractor", РеквизитыЗадания.ТекущийИсполнитель);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskCurrentStage", РеквизитыЗадания.ТекущийЭтап);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TaskSubject", РеквизитыЗадания.Тема);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskProcessType", РеквизитыЗадания.ТипПроцесса);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskUsluga", РеквизитыЗадания.Услуга);
	//ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskStorage", РеквизитыЗадания.МестоХранения);
	//ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "TaskCardNomenclature", РеквизитыЗадания.КарточкаНоменклатуры);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DateOfLastChange", 
		?(ДатаПоследнегоИзменения = Неопределено, Дата(1, 1, 1, 0, 0, 0), ДатаПоследнегоИзменения));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DateOpening", 
		?(ДатаОткрытия = Неопределено, Дата(1, 1, 1, 0, 0, 0), ДатаОткрытия));	
	
	// Таб.часть Наблюдатели.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("TaskObservers");		
	ТаблицаНаблюдатели = РеквизитыЗадания.Наблюдатели.Выгрузить();
	Для Каждого СтрокаНаблюдатели Из ТаблицаНаблюдатели Цикл			
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StrTaskObservers");			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Observer", СтрокаНаблюдатели.Адресат);		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();			
		
	КонецЦикла;		
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	// Таб.часть Теги.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("TaskTegs");		
	ТаблицаТеги = РеквизитыЗадания.Теги.Выгрузить();
	Для Каждого СтрокаТеги Из ТаблицаТеги Цикл			
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StrTaskTegs");			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Teg", СтрокаТеги.Тег);		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();			
		
	КонецЦикла;		
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	// Таб.часть ЧекЛист.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("TaskCheckList");		
	ТаблицаЧекЛист = РеквизитыЗадания.ЧекЛист.Выгрузить();
	Для Каждого СтрокаЧекЛист Из ТаблицаЧекЛист Цикл			
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StrTaskCheckList");			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Done", СтрокаЧекЛист.Выполнено);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Description", СтрокаЧекЛист.Описание);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Weight", СтрокаЧекЛист.Вес);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Date", СтрокаЧекЛист.Дата);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Author", СтрокаЧекЛист.Автор);		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();			
		
	КонецЦикла;		
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	// Таб.часть Этапы.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("TaskStages");		
	ТаблицаЭтапы = РеквизитыЗадания.Этапы.Выгрузить();
	Для Каждого СтрокаЭтапы Из ТаблицаЭтапы Цикл			
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StrStages");			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Stage", СтрокаЭтапы.Этап);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "BeginDate", СтрокаЭтапы.ДатаНачала);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "EndDate", СтрокаЭтапы.ДатаНачала);				
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();			
		
	КонецЦикла;		
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	// Таб.часть Исполнители.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("TaskExecutors");		
	ТаблицаИсполнители = РеквизитыЗадания.Исполнители.Выгрузить();
	Для Каждого СтрокаИсполнитель Из ТаблицаИсполнители Цикл			
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StrExecutors");			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Executor", СтрокаИсполнитель.Исполнитель);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "BeginDate", СтрокаИсполнитель.ДатаНачала);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "EndDate", СтрокаИсполнитель.ДатаНачала);				
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();			
		
	КонецЦикла;		
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	// Окончание записи объекта.
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
	ВыгрузитьВXMLПрисоединенныеФайлы(ЗаписьXML, ВерсияСервера, ЭлементДанных.Ссылка, ПараметрыСинхронизации,
		ОбъектТолькоЧтение);

КонецПроцедуры

Процедура ВыгрузитьВXMLКомментарий(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт	
	
	Если Не ЗначениеЗаполнено(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
		
	ВыгружаемыйОбъект     = ЭлементДанных.Ссылка;
	РеквизитыКомментария  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"ПометкаУдаления, ВерсияДанных, ВладелецКомментария, Период, Автор, Текст, ТекстHTML, Приватный,"
		+ "Заголовок, Адресаты");
		
	// Проверка доступности и фильтров пользователя.
	ВладелецКомментария = РеквизитыКомментария.ВладелецКомментария;
	
	Если РегистрыСведений.СведенияОДоступностиЗаданийПользователям.ЗаданиеДоступноПользователю(
			Пользователи.ТекущийПользователь(), ВладелецКомментария) Тогда
			
		Если НЕ ОбменМобильноеПриложениеСервер.ЗаданиеСоответствуетФильтрамПользователя(ВладелецКомментария,
				ПараметрыСинхронизации.ФильтрыПользователя) Тогда
			ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ЭлементДанных);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;
		
	КонецЕсли;	
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Comment", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CommentDataVersion", РеквизитыКомментария.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CommentDeleteMark", РеквизитыКомментария.ПометкаУдаления);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "CommentOwner", РеквизитыКомментария.ВладелецКомментария);	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CommentPeriod", РеквизитыКомментария.Период);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "CommentAuthor", РеквизитыКомментария.Автор);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CommentText", РеквизитыКомментария.Текст);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CommentTextHTML", РеквизитыКомментария.ТекстHTML);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CommentHidden", РеквизитыКомментария.Приватный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CommentHeader", РеквизитыКомментария.Заголовок);
	
	// Таб.часть Адресаты.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("CommentAddressees");		
	ТаблицаАдресаты = РеквизитыКомментария.Адресаты.Выгрузить();
	
	Для Каждого СтрокаАдресаты Из ТаблицаАдресаты Цикл			
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StrCommentAddressees");			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Address", СтрокаАдресаты.Адресат);		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();			
		
	КонецЦикла;		
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
	ВыгрузитьВXMLПрисоединенныеФайлы(ЗаписьXML, ВерсияСервера, ЭлементДанных.Ссылка, ПараметрыСинхронизации, 
		ОбъектТолькоЧтение);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLВидКонтактнойИнформации(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, 
	Знач ЭлементДанных, Знач ОбъектТолькоЧтение = 0) Экспорт
	
	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	РеквизитыВидаКИ  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		СтрЗаменить("ПометкаУдаления, Наименование, Родитель, ЭтоГруппа, Предопределенный, 
		|ИмяПредопределенныхДанных, ТолькоНациональныйАдрес, ВидПоляДругое, ВключатьСтрануВПредставление, 
		|ЗапретитьРедактированиеПользователем, Используется, МожноИзменятьСпособРедактирования, ОбязательноеЗаполнение,
		|ПроверятьКорректность, ПроверятьПоФИАС, РазрешитьВводНесколькихЗначений, 
		|РеквизитДопУпорядочивания, СкрыватьНеактуальныеАдреса, ТелефонCДобавочнымНомером, Тип,
		|УказыватьОКТМО, ХранитьИсториюИзменений", Символы.ПС, ""));
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("KindContactInfo", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		     	ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoName",    	РеквизитыВидаКИ.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoDeleteMark",	РеквизитыВидаКИ.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoPred",	 	РеквизитыВидаКИ.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoNamePred",	
		РеквизитыВидаКИ.ИмяПредопределенныхДанных);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoParent",  
		УникальныйИдентификаторРодителя(РеквизитыВидаКИ));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoGroup",   РеквизитыВидаКИ.ЭтоГруппа);	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoUsed",    РеквизитыВидаКИ.Используется);	
	
	Если Не РеквизитыВидаКИ.ЭтоГруппа Тогда
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoOnlyNationalAddress", 
			РеквизитыВидаКИ.ТолькоНациональныйАдрес);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoTypeFieldsOther",     
			РеквизитыВидаКИ.ВидПоляДругое);
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoIncludeCountry",    	 
			РеквизитыВидаКИ.ВключатьСтрануВПредставление);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoDenyEditing",    	 
			РеквизитыВидаКИ.ЗапретитьРедактированиеПользователем);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoChangeEditingMethod", 
			РеквизитыВидаКИ.МожноИзменятьСпособРедактирования);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoMandatoryFilling",    
			РеквизитыВидаКИ.ОбязательноеЗаполнение);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoCheckCorrectness",    
			РеквизитыВидаКИ.ПроверятьКорректность);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoCheckFIAS",    		 
			РеквизитыВидаКИ.ПроверятьПоФИАС);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoMultipleValues",    	 
			РеквизитыВидаКИ.РазрешитьВводНесколькихЗначений);
			
		// Удалить реквизит	в следующей версии МП.
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoEditingOnlyDialogue", 
			Ложь);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoAdditionalArrangement", 
			РеквизитыВидаКИ.РеквизитДопУпорядочивания);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoHideNotActualAddresses", 
			РеквизитыВидаКИ.СкрыватьНеактуальныеАдреса);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoTelephoneAddNumber",  
			РеквизитыВидаКИ.ТелефонCДобавочнымНомером);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoType", 				 
			ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаКИ(РеквизитыВидаКИ.Тип));
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoIndicateOKTMO", 		 
			РеквизитыВидаКИ.УказыватьОКТМО);
			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindContactInfoKeepHistoryChanges",  
			РеквизитыВидаКИ.ХранитьИсториюИзменений);
			
	КонецЕсли;
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);	
	
КонецПроцедуры

Процедура ВыгрузитьВXMLСтрану(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	РеквизитыСтраны   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Код, Наименование, ПометкаУдаления, НаименованиеПолное,"  
		+ "Предопределенный, ИмяПредопределенныхДанных, КодАльфа2, КодАльфа3, УчастникЕАЭС");	
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Country", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    	 	ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CountryPred",	 	РеквизитыСтраны.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CountryNamePred",	РеквизитыСтраны.ИмяПредопределенныхДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CountryName", 		РеквизитыСтраны.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CountryDeleteMark",	РеквизитыСтраны.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CountryCode", 		РеквизитыСтраны.Код);	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CountryNameFull", 	РеквизитыСтраны.НаименованиеПолное);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CountryCodeAlpha2", РеквизитыСтраны.КодАльфа2);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CountryCodeAlpha3", РеквизитыСтраны.КодАльфа3);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CountryPartEAES", 	РеквизитыСтраны.УчастникЕАЭС);
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкиСинхронизации(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации,
	Знач ЭлементДанных) Экспорт
	
	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВXMLНастройкуМаксимальногоРазмераФайла(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации);
	ВыгрузитьВXMLНастройкуСрокаУстаревания(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации);
	
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных, Истина);	
	
КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкиПользователяПоУмолчанию(ЗаписьXML, Знач ВерсияСервера,	
	ПараметрыСинхронизации, Запись) Экспорт
	
	мНастройкиПользователей = ПланыВидовХарактеристик.НастройкиПользователей;
	ВидНастройки = Запись.Настройка;
	
	Если ВидНастройки = мНастройкиПользователей.ДобавлятьСебяВНаблюдателиДляВсехНовыхЗадания Тогда
		ВыгрузитьВXMLНастройкуДобавлятьСебяВНаблюдатели(Запись, ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации);
		
	ИначеЕсли ВидНастройки = мНастройкиПользователей.ОсновнойИнициатор Тогда
		ВыгрузитьВXMLНастройкуОсновнойИнициатор(Запись, ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации);
		
	ИначеЕсли ВидНастройки = мНастройкиПользователей.ОсновнойПроцесс Тогда
		ВыгрузитьВXMLНастройкуОсновнойПроцесс(Запись, ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации);
		
	ИначеЕсли ВидНастройки = мНастройкиПользователей.ОсновнойПроцессДляСоздаваемыхДочернихЗаданий Тогда
		ВыгрузитьВXMLНастройкуОсновнойПроцессДляДочернихЗаданий(Запись, ЗаписьXML, ВерсияСервера, 
			ПараметрыСинхронизации);
		
	ИначеЕсли ВидНастройки = мНастройкиПользователей.ОткрыватьНеНовоеЗаданиеНаВкладеСообщение Тогда
		ВыгрузитьВXMLНастройкуОткрыватьНаВкладкеСообщение(Запись, ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации);
		
	ИначеЕсли ВидНастройки = мНастройкиПользователей.ПриДобавленииСообщенияПоУмолчаниюНеУведомлятьИнициатора Тогда
		ВыгрузитьВXMLНастройкуНеУведомлятьИнициатора(Запись, ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации);
		
	ИначеЕсли ВидНастройки = мНастройкиПользователей.УпорядочиваниеКомментариевВЗадании Тогда
		ВыгрузитьВXMLНастройкуУпорядочиваниеКомментариев(Запись, ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации);
		
	ИначеЕсли ВидНастройки = мНастройкиПользователей.ОсновнаяОрганизация Тогда
		ВыгрузитьВXMLНастройкуОсновнаяОрганизация(Запись, ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации);
		
	ИначеЕсли ВидНастройки = мНастройкиПользователей.ОсновноеПодразделение Тогда
		ВыгрузитьВXMLНастройкуОсновноеПодразделение(Запись, ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации);
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкуДобавлятьСебяВНаблюдатели(Знач Запись, ЗаписьXML, Знач ВерсияСервера, 
	ПараметрыСинхронизации) Экспорт
	
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("OptionAddYourselfIntoObservers", ВерсияСервера);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AddYourselfIntoObservers", Запись.Значение);
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкуОсновнойИнициатор(Знач Запись, ЗаписьXML, Знач ВерсияСервера, 
	ПараметрыСинхронизации) Экспорт
	
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("OptionBasicInitiator", ВерсияСервера);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "BasicInitiator", Запись.Значение);
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкуОсновнойПроцесс(Знач Запись, ЗаписьXML, Знач ВерсияСервера, 
	ПараметрыСинхронизации) Экспорт
	
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("OptionBasicProcess", ВерсияСервера);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "BasicProcess", Запись.Значение);
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкуОсновнойПроцессДляДочернихЗаданий(Знач Запись, ЗаписьXML, Знач ВерсияСервера, 
	ПараметрыСинхронизации) Экспорт
	
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("OptionBasicProcessForSubTask", ВерсияСервера);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "BasicProcessForSubTask", Запись.Значение);
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкуОткрыватьНаВкладкеСообщение(Знач Запись, ЗаписьXML, Знач ВерсияСервера, 
	ПараметрыСинхронизации) Экспорт
	
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("OptionOpenTheTabComment", ВерсияСервера);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "OpenTheTabComment", Запись.Значение);
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкуНеУведомлятьИнициатора(Знач Запись, ЗаписьXML, Знач ВерсияСервера, 
	ПараметрыСинхронизации) Экспорт
	
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("OptionIgnorantTheInitiator", ВерсияСервера);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IgnorantTheInitiator", Запись.Значение);
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкуУпорядочиваниеКомментариев(Знач Запись, ЗаписьXML, Знач ВерсияСервера, 
	ПараметрыСинхронизации) Экспорт
	
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("OptionSortingComments", ВерсияСервера);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SortingComments", 
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеУпорядочиванияКомментариев(Запись.Значение));
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкуОсновнаяОрганизация(Знач Запись, ЗаписьXML, Знач ВерсияСервера, 
	ПараметрыСинхронизации) Экспорт
	
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("OptionBasicOrganization", ВерсияСервера);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "BasicOrganization", Запись.Значение);
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкуОсновноеПодразделение(Знач Запись, ЗаписьXML, Знач ВерсияСервера, 
	ПараметрыСинхронизации) Экспорт
	
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("OptionBasicDivision", ВерсияСервера);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "BasicDivision", Запись.Значение);
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLСвязьКомментариев(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, 
	Знач Объект) Экспорт	
	
	Для Каждого Запись Из Объект Цикл
		
		ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("CommentLink", ВерсияСервера);	
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Parent", Запись.Родитель);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Link", Запись.Ссылка);	
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
		ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());	
	
		ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкуМаксимальногоРазмераФайла(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MaxFileSizeToDownloadSetting", ВерсияСервера);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FileSize", ПараметрыСинхронизации.МаксимальныйРазмерФайлов);
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLНастройкуСрокаУстаревания(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("DataExpirationSettings", ВерсияСервера);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataExpirationPeriod", 
		ПараметрыСинхронизации.СрокУстареванияДанных);
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLПрисоединенныеФайлы(ЗаписьXML, Знач ВерсияСервера, Знач Владелец, ПараметрыСинхронизации, 
	Знач ОбъектТолькоЧтение) Экспорт

	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Владелец, Файлы);

	Для каждого Файл Из Файлы Цикл
		ВыгрузитьВXMLФайлы(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, Файл, ОбъектТолькоЧтение);
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьВXMLФайлы(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных, 
	Знач ОбъектТолькоЧтение = 0, ВыгрузитьПринудительноПолностью = Ложь)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
		
	КонецЕсли;
	
	Если ЭлементДанных.ПометкаУдаления Тогда	 
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;
	КонецЕсли;
	
	РеквизитыФайла = РаботаСФайлами.ДанныеФайла(ЭлементДанных);

	Если ТипЗнч(РеквизитыФайла.Владелец) = Тип("ДокументСсылка.Задание") Тогда
		ТипВладельца = "Task";
		
	ИначеЕсли ТипЗнч(РеквизитыФайла.Владелец) = Тип("СправочникСсылка.Комментарии") Тогда			
		ТипВладельца = "Comment";
		
	Иначе		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыСинхронизации.ФильтроватьФайлыПоФормату Тогда
		ЕстьОграничениеПоРасширению = Не РаботаСФайламиСлужебныйКлиентСервер.РасширениеФайлаВСписке(
			ПараметрыСинхронизации.ФорматыПередаваемыхФайлов, РеквизитыФайла.Расширение);
	Иначе
		ЕстьОграничениеПоРасширению = Ложь;
		
	КонецЕсли;

	Если ВыгрузитьПринудительноПолностью Тогда
		ТолькоЗаголовок = Ложь;
	
	ИначеЕсли ЕстьОграничениеПоРасширению Тогда
		ТолькоЗаголовок = Истина;

	Иначе
		МаксимальныйРазмерФайла = ПараметрыСинхронизации.МаксимальныйРазмерФайлов;
		ТолькоЗаголовок         = МаксимальныйРазмерФайла > 0 И РеквизитыФайла.Размер > МаксимальныйРазмерФайла * 1024;
	КонецЕсли;

	ПолноеНаименование = РеквизитыФайла.Наименование;
	
	Если ТолькоЗаголовок Тогда
		ДанныеФайла = Неопределено;
		
	Иначе

		Попытка
			ДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ЭлементДанных);
		Исключение

			ДанныеФайла         = Неопределено;
			ТолькоЗаголовок     = Истина;
			
			//@skip-warning
			ТекстПредупреждения = РаботаСФайламиСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				ПолноеНаименование + "." + РеквизитыФайла.Расширение);
				
			РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(ТекстПредупреждения, 
				Ложь, ПараметрыСинхронизации.МобильныйКлиент);

		КонецПопытки;

	КонецЕсли;

	Если Найти(ПолноеНаименование, "." + РеквизитыФайла.Расширение) = 0 Тогда
		ПолноеНаименование = ПолноеНаименование + "." + РеквизитыФайла.Расширение;
	КонецЕсли;

	ДанныеФайла = Новый ХранилищеЗначения(ДанныеФайла, Новый СжатиеДанных(9));
	
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта(ТипВладельца + "File", 	ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 		ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", 		ПолноеНаименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Extension", 		РеквизитыФайла.Расширение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Size", 				РеквизитыФайла.Размер);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "HeaderOnly", 		ТолькоЗаголовок);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FileData", 			ДанныеФайла);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FileDataUniversal", РеквизитыФайла.ДатаМодификацииУниверсальная);
	
	Если ТипВладельца = "Task" ИЛИ ТипВладельца = "Comment" Тогда
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IDFileMail", ЭлементДанных.ИДФайлаЭлектронногоПисьма);
	КонецЕсли;
	
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Owner", РеквизитыФайла.Владелец);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());		
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLЛиниюПоддержки(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт	
	
	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"ПометкаУдаления, Наименование, Предопределенный, ИмяПредопределенныхДанных");
	
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("SupportLine", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		 ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SupportLineName",    Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SupportLineDeleteMark",Реквизиты.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SupportLinePred",	 Реквизиты.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SupportLineNamePred",Реквизиты.ИмяПредопределенныхДанных);
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLВидНоменклатуры(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт	
	
	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"ПометкаУдаления, Наименование, Предопределенный, ИмяПредопределенныхДанных, ТипВидаНоменклатуры,"
		+ " РеквизитДопУпорядочивания, Картинка, ВестиУчетПоКарточкамНоменклатуры, МожетИметьIPАдрес");
	
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("ViewOfNomenclature", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 				ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		 		ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfNomenclatureName",	Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfNomenclatureDeleteMark",Реквизиты.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfNomenclaturePred", 	Реквизиты.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfNomenclatureNamePred",Реквизиты.ИмяПредопределенныхДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TypeOfNomenclature",
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаВидаНоменклатуры(Реквизиты.ТипВидаНоменклатуры));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfNomenclatureAdditionalArrangement",
		Реквизиты.РеквизитДопУпорядочивания);
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfNomenclatureCardAccounting", 
		Реквизиты.ВестиУчетПоКарточкамНоменклатуры);
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfNomenclatureHasIp", 
		Реквизиты.МожетИметьIPАдрес);	
	
	Картинка = Реквизиты.Картинка.Получить();	
	Если ТипЗнч(Картинка) = Тип("Картинка") Тогда			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfNomenclaturePict", 			
		Новый ХранилищеЗначения(Картинка.ПолучитьДвоичныеДанные(), 
		Новый СжатиеДанных(9)));
		
	Иначе	
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfNomenclaturePict",
		Новый ХранилищеЗначения(Картинка, 
		Новый СжатиеДанных(9)));
		
	КонецЕсли;	
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLНоменклатуру(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт	
	
	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"ЭтоГруппа, Родитель, ПометкаУдаления, Наименование, Предопределенный,"
		+ " ИмяПредопределенныхДанных, ВидНоменклатуры");
	
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Nomenclature", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 				ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		 		ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NomenclatureName",	Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NomenclatureDeleteMark",Реквизиты.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NomenclaturePred", 	Реквизиты.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NomenclatureNamePred",Реквизиты.ИмяПредопределенныхДанных);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NomenclatureParent",      
		УникальныйИдентификаторРодителя(Реквизиты));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "NomenclatureGroup",Реквизиты.ЭтоГруппа);
	
	Если НЕ Реквизиты.ЭтоГруппа Тогда
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ViewOfNomenclature", Реквизиты.ВидНоменклатуры);
	КонецЕсли;	
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLКарточкуНоменклатуры(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт	
	
	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Владелец, ПометкаУдаления, Наименование, ВидНоменклатуры, ИнвентарныйНомер,"
		+ " Комментарий, ПорядковыйНомер, СерийныйНомер");
		
//	ИДВладельца = Реквизиты.Владелец.УникальныйИдентификатор();
	
	// Запись связанных объектов.	
	ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, Реквизиты.Владелец);
	ПараметрыСинхронизации.ОбъектыКВыгрузке.Вставить(Реквизиты.Владелец,  Истина);
	
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("CartNomenclature", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 				 ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		 		 ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CartNomenclatureName",		 Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CartNomenclatureDeleteMark", Реквизиты.ПометкаУдаления);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "CartNomenclatureOwner",  	 Реквизиты.Владелец);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "CartNomenclatureView",		 Реквизиты.ВидНоменклатуры);	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CartNomenclatureInvNumber",	 Реквизиты.ИнвентарныйНомер);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CartNomenclatureOrderNumber",Реквизиты.ПорядковыйНомер);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CartNomenclatureSerNumber",  Реквизиты.СерийныйНомер);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CartNomenclatureComment",    Реквизиты.Комментарий);
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLВидМестаХранения(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт	
	
	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"ПометкаУдаления, Наименование, Предопределенный, ИмяПредопределенныхДанных, ИмеетСетевыеНастройки,"
		+ " РеквизитДопУпорядочивания, Картинка");
	
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("ViewOfStorage", 				ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 				ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",					ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfStorageName",			Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfStorageDeleteMark",	Реквизиты.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfStoragePred",			Реквизиты.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfStorageNamePred",		Реквизиты.ИмяПредопределенныхДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfStorageAdditionalArrangement",
		Реквизиты.РеквизитДопУпорядочивания);
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfStorageHasNetworkSettings", 
		Реквизиты.ИмеетСетевыеНастройки);
	
	Картинка = Реквизиты.Картинка.Получить();	
	Если ТипЗнч(Картинка) = Тип("Картинка") Тогда			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfStoragePict", 			
			Новый ХранилищеЗначения(Картинка.ПолучитьДвоичныеДанные(), 
			Новый СжатиеДанных(9)));
		
	Иначе	
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ViewOfStoragePict",
			Новый ХранилищеЗначения(Картинка, 
			Новый СжатиеДанных(9)));
		
	КонецЕсли;	
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLМестоХранения(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт	
	
	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"ПометкаУдаления, Наименование, Родитель, Код, ВидМестаХранения, Картинка, Комментарий,"
		+ " Организация, Подразделение, ПоследнийОтветственный, СвободныеОстатки, СетевоеИмя, СетевойПользователь,"
		+ " СетевыеИнтерфейсы, КонтактнаяИнформация, Вес");
	
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Storage", 			ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", 		ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly", 			ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StorageName",		Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StorageDeleteMark",	Реквизиты.ПометкаУдаления);	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StorageParent",  	  	
		УникальныйИдентификаторРодителя(Реквизиты));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StorageCodeSRV",	Реквизиты.Код);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StorageWeight",		Реквизиты.Вес);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "StorageView",		Реквизиты.ВидМестаХранения);
	
	Картинка = Реквизиты.Картинка.Получить();	
	Если ТипЗнч(Картинка) = Тип("Картинка") Тогда			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StoragePict", 			
			Новый ХранилищеЗначения(Картинка.ПолучитьДвоичныеДанные(), 
			Новый СжатиеДанных(9)));
		
	Иначе	
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StoragePict",
			Новый ХранилищеЗначения(Картинка, 
			Новый СжатиеДанных(9)));
		
	КонецЕсли;
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StorageComment",	  Реквизиты.Комментарий);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "StorageOrganization",Реквизиты.Организация);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "StorageSubdivision", Реквизиты.Подразделение);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "StorageResponsible", Реквизиты.ПоследнийОтветственный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StorageFreeBalances", Реквизиты.СвободныеОстатки);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StorageNetworkName",  Реквизиты.СетевоеИмя);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StorageNetworkUser",  Реквизиты.СетевойПользователь);
	
	// Сетевые интерфейсы.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StorageNetworkInterfaces");
	ТаблицаСИ = Реквизиты.СетевыеИнтерфейсы.Выгрузить();
	Для Каждого СтрокаСИ Из ТаблицаСИ Цикл
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StorageNetworkInterfacesSt");
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IP", 		СтрокаСИ.IPАдрес);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SubnetMask",СтрокаСИ.МаскаПодсети);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DNS1", 		СтрокаСИ.DNS1);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DNS2", 		СтрокаСИ.DNS2);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WINS", 		СтрокаСИ.WINS);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DHCP", 		СтрокаСИ.DHCP);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Gateway", 	СтрокаСИ.Шлюз);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PortRadmin",СтрокаСИ.ПортRadmin);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "MAC", 		СтрокаСИ.MACАдрес);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PortName", 	СтрокаСИ.НаименованиеПорта);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "VLANID", 	СтрокаСИ.VLANID);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SocketNumber", СтрокаСИ.НомерРозетки);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Note", 		СтрокаСИ.Примечание);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "SwitchingEquipment",  
			СтрокаСИ.КоммутационноеОборудование);		
		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	// КИ.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StorageContactInfo");
	ТаблицаКИ = Реквизиты.КонтактнаяИнформация.Выгрузить();
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("StorageContactInfoSt");
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type",    		
			ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаКИ(СтрокаКИ.Тип));
			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Kind",   		СтрокаКИ.Вид);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Caption", 		СтрокаКИ.Представление);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FieldValues", 	СтрокаКИ.ЗначенияПолей);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Country", 		СтрокаКИ.Страна);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Region", 		СтрокаКИ.Регион);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "City", 			СтрокаКИ.Город);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Email",			СтрокаКИ.АдресЭП);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Domain",		СтрокаКИ.ДоменноеИмяСервера);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "PhoneNumber",	СтрокаКИ.НомерТелефона);			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Phone",			СтрокаКИ.НомерТелефонаБезКодов);			
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "ViewForList",  СтрокаКИ.ВидДляСписка);		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
		
	КонецЦикла;		
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();		
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLКатегорииЛогинов(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт	
	
	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"ПометкаУдаления, Наименование, ЭтоГруппа");
	
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("CategoriesLogins", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly", ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CategoriesLoginsName", Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CategoriesLoginsDeleteMark", Реквизиты.ПометкаУдаления);	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CategoriesLoginsParent",  	  
		УникальныйИдентификаторРодителя(ВыгружаемыйОбъект));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CategoriesLoginsGroup", Реквизиты.ЭтоГруппа);
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLЛогиныИПароли(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт	
		
	Если НЕ ЗначениеЗаполнено(ЭлементДанных) Тогда
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;
	КонецЕсли;	
		
	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"ПометкаУдаления, Объект, Категория, Программа, Автор, ГруппаПользователей, Комментарий, ТипПароля,"
		+ " АвторКорректировки, ДатаКорректировки, ДатаСоздания");
		
	Если Реквизиты.ПометкаУдаления Тогда	 
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;		
	КонецЕсли;	
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("Logins", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly", ОбъектТолькоЧтение);	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsDeleteMark", Реквизиты.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsDataVersion", ВыгружаемыйОбъект.ВерсияДанных);
	
	Если ТипЗнч(Реквизиты.Объект) = Тип("Строка") Тогда
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsOwnerString", Истина);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsOwner", Реквизиты.Объект);
	Иначе	
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsOwnerString", Ложь);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "LoginsOwner", Реквизиты.Объект);
	КонецЕсли;
	
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "LoginsCategory", Реквизиты.Категория);	
	
	Если ТипЗнч(Реквизиты.Программа) = Тип("СправочникСсылка.Номенклатура") Тогда
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsProgramString", Ложь);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "LoginsProgram", Реквизиты.Программа);
	Иначе
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsProgramString", Истина);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsProgram", Реквизиты.Программа);
	КонецЕсли;	
	
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "LoginsAuthor", Реквизиты.Автор);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "LoginsUserGroup", Реквизиты.ГруппаПользователей);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsComment", Реквизиты.Комментарий);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "LoginsAuthorCorrections", Реквизиты.АвторКорректировки);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsAdjustmentDate", Реквизиты.ДатаКорректировки);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsDateOfCreation", Реквизиты.ДатаСоздания);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsPasswordType", 
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеТипаПароля(Реквизиты.ТипПароля));
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
		
	// Выгружаем историю по объекту.
	НаборЗаписей = РегистрыСведений.ЛогиныИПаролиХранилище.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Владелец.Установить(ВыгружаемыйОбъект);
	НаборЗаписей.Прочитать();
	ПараметрыСинхронизации.ОбъектыКВыгрузке.Вставить(НаборЗаписей,  Истина);
	
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLЛогиныИПаролиХранилище(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, 
	Знач Объект) Экспорт	
		
	Для Каждого Запись Из Объект Цикл
		
		ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("LoginsStorage", ВерсияСервера);	
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "LoginsStorageOwner", Запись.Владелец);	
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsStoragePeriod", Запись.ПериодМП);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsStorageLogin", Запись.Логин);
		
		мПароль = Запись.Пароль.Получить();
		Если НЕ ЗначениеЗаполнено(мПароль) Тогда
			мПароль = "";
		КонецЕсли;	
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LoginsStoragePassword",
			Новый ХранилищеЗначения(мПароль, 
			Новый СжатиеДанных(9)));		
		
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
		ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());	
		
		ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьИнформациюОТекущемПользователе(ЗаписьXML, Знач ВерсияСервера, Знач ТекущийПользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ТекущийПользователь.Ссылка;
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("UserInfo", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SDExecutingTasks", 
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskВыполнениеЗаданий"));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SDAddingTasks", 
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskДобавлениеЗаданий"));
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SDAddingSprints", 			
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskДобавлениеИзменениеСпринтов"));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SDAvailableChangeDateSLA", 	
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskДоступноИзменениеДатSLA"));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "SDDistributionTasks", 		
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskРаспределениеЗаданий"));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CompleteRights", 
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "UseCRM", Константы.ИспользоватьCRM.Получить());
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AddPasswords", 
		УправлениеITОтделом8УФПовтИсп.Право("ДобавлениеИзменениеПаролей"));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadPasswords", 
		УправлениеITОтделом8УФПовтИсп.Право("ЧтениеПаролей"));
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	
КонецПроцедуры

Процедура ВыгрузитьВXMLВидРаботы(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных,
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты   	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		"Наименование, ПометкаУдаления, ЭтоГруппа, ВерсияДанных, РеквизитДопУпорядочивания,"
		+ "ВидВремени, Предопределенный, ИмяПредопределенныхДанных");
		
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("KindWork",              ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID",			  ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    		  ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindWorkDataVersion", Реквизиты.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindWorkName",    	  Реквизиты.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindWorkDeleteMark",  Реквизиты.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindWorkAdditionalArrangement",
		Реквизиты.РеквизитДопУпорядочивания);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindWorkParent", 
		УникальныйИдентификаторРодителя(ВыгружаемыйОбъект));
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindWorkGroup",       Реквизиты.ЭтоГруппа);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindWorkPred",		  Реквизиты.Предопределенный);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindWorkNamePred",	  Реквизиты.ИмяПредопределенныхДанных);
	
	Если Не Реквизиты.ЭтоГруппа Тогда
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "KindWorkTypeTime", 
			ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеВидаВремени(Реквизиты.ВидВремени));
	КонецЕсли;	
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьВXMLЕжедневныйОтчет(ЗаписьXML, Знач ВерсияСервера, ПараметрыСинхронизации, Знач ЭлементДанных, 
	Знач ОбъектТолькоЧтение = 0) Экспорт

	Если НЕ ЗначениеЗаполнено(ЭлементДанных) Тогда
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	ВыгружаемыйОбъект = ЭлементДанных.Ссылка;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, 
		СтрЗаменить("Номер, Дата, Проведен, ПометкаУдаления, ВерсияДанных,
		|Автор, АвторКорректировки, ДатаКорректировки, ДатаНачала, ДатаОкончания,
		|ДатаСоздания, Комментарий, Организация, Подразделение, ПоложениеДаты, Пользователь, ПредставлениеДлительности,
		|Работы",
		Символы.ПС, ""));
	
	Если Реквизиты.ПометкаУдаления Тогда	 
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервера, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;
		
	КонецЕсли;

	// Начало записи объекта.
	ЗаписьXMLОбъекта  = ЗаписатьЗаголовокОбъекта("DailyReport", ВерсияСервера);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ВыгружаемыйОбъект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadOnly",    	  ОбъектТолькоЧтение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DailyReportDataVersion", Реквизиты.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DailyReportNumber", Реквизиты.Номер);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DailyReportDate", Реквизиты.Дата);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "DailyReportAuthor", Реквизиты.Автор);			
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "DailyReportAuthorCorrection", Реквизиты.АвторКорректировки);			
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DailyReportDatePosition", 
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПредставлениеПоложенияРеквизитаНаФорме(Реквизиты.ПоложениеДаты));		
		
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DailyReportStartDate", Реквизиты.ДатаНачала);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DailyReportEndDate", Реквизиты.ДатаОкончания);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DailyReportCreationDate", Реквизиты.ДатаСоздания);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DailyReportCorrectionDate", Реквизиты.ДатаКорректировки);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DailyReportComment", Реквизиты.Комментарий);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "DailyReportOrganization", Реквизиты.Организация);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "DailyReportSubdivision", Реквизиты.Подразделение);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "DailyReportUser", Реквизиты.Пользователь);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DailyReportDurationView", Реквизиты.ПредставлениеДлительности);
	
	// Таб.часть ЧекЛист.
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Works");		
	ТаблицаРаботы = Реквизиты.Работы.Выгрузить();
	Для Каждого СтрокаРаботы Из ТаблицаРаботы Цикл			
		
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Work");			
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DateWork", СтрокаРаботы.ДатаРаботы);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Description", СтрокаРаботы.Описание);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "KindWork", СтрокаРаботы.ВидРаботы);
		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Source", СтрокаРаботы.Источник);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StartTime", СтрокаРаботы.ВремяНачала);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "EndTime", СтрокаРаботы.ВремяОкончания);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DurationTime", СтрокаРаботы.ДлительностьВремя);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Duration", СтрокаРаботы.Длительность);
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();			
		
	КонецЦикла;		
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	// Окончание записи объекта.
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());
	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ВыгружаемыйОбъект, Истина);
	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
	
	ВыгрузитьВXMLПрисоединенныеФайлы(ЗаписьXML, ВерсияСервера, ЭлементДанных.Ссылка, ПараметрыСинхронизации,
		ОбъектТолькоЧтение);

КонецПроцедуры

#КонецОбласти

#Область ФормированиеДанныхИзXML

Функция ПолучитьЗначениеРеквизита(Знач СтруктураДанныхОбъекта, Знач ИмяРеквизита, Знач ИмяТипа = Неопределено,
	Знач Обязательный = Ложь) Экспорт

	Значение = СтруктураДанныхОбъекта[ВРег(ИмяРеквизита)];
	
	Если Значение = Неопределено Тогда
		Если Обязательный Тогда
			ВызватьИсключение 
				ОбменМобильноеПриложениеСервер.СформироватьСообщениеОбОтсутствииОжидаемогоРеквизита(ИмяТипа, ИмяРеквизита);
		Иначе
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТипа = Неопределено Тогда
		Возврат Значение;
	Иначе
		Возврат XMLЗначение(Тип(ИмяТипа), Значение);
	КонецЕсли;

КонецФункции

Функция ПолучитьСсылкуСоставногоТипа(Знач ДанныеОбъекта)

	Если ДанныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТипЗначения   = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Type", "Строка");
	Идентификатор = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID"  , "Строка");

	Возврат ОбменМобильноеПриложениеПовтИсп.ПолучитьСсылкуПоТипу(ТипЗначения, Идентификатор);

КонецФункции

Функция ПолучитьДанныеСтроки(Знач КоллекцияЭлементов, Знач ЭлементКоллекции)

	Если ТипЗнч(КоллекцияЭлементов) = Тип("Соответствие") Тогда
		Возврат ЭлементКоллекции.Значение;
	Иначе
		Возврат ЭлементКоллекции;
	КонецЕсли;

КонецФункции

Процедура ЗаписатьИзXMLИнформациюОКлиенте(Знач ДанныеОбъекта, МобильныйКлиент) Экспорт

	Версия        = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "AppVersion", "Строка");
	Система       = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "OS",         "Строка");
	Память        = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RAM",        "Строка");
	ИмяУстройства = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DeviceName", "Строка");
	РазмерЭкрана  = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ScreenSize", "Строка");
	
	ПредставлениеУстройства = СтрШаблон(НСтр("ru = 'Версия:%1, ОС:%2, ОЗУ:%3, WS:%4, Экран:%5""'"),	
		Версия, Система, Память, ИмяУстройства, РазмерЭкрана);
		
	РегистрыСведений.СведенияОМобильныхКлиентах.ЗаписатьСведенияОКлиенте(МобильныйКлиент, ТекущаяДатаСеанса(), 
		ПредставлениеУстройства, Версия);	
	
	НаименованиеМобильногоКлиента = "";
	Если ЗначениеЗаполнено(МобильныйКлиент.Пользователь) И Не ПустаяСтрока(ИмяУстройства) Тогда		
		НаименованиеМобильногоКлиента = СтрШаблон("%1(%2)", Строка(МобильныйКлиент.Пользователь), ИмяУстройства); 
	КонецЕсли;	
	
	Если Не ПустаяСтрока(НаименованиеМобильногоКлиента) 
		И НаименованиеМобильногоКлиента <> МобильныйКлиент.Наименование Тогда	
		
		Попытка
			МобильныйКлиентОбъект = МобильныйКлиент.ПолучитьОбъект();
			МобильныйКлиентОбъект.Наименование = НаименованиеМобильногоКлиента;
			МобильныйКлиентОбъект.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИзXMLТипыПроцессов(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТипПроцессаСсылка = Справочники.ТипыПроцессов.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"ID", "УникальныйИдентификатор"));
	
	ТипПроцессаОбъект = ТипПроцессаСсылка.ПолучитьОбъект();

	Если ТипПроцессаОбъект = Неопределено Тогда
		ТипПроцессаОбъект   = Справочники.ТипыПроцессов.СоздатьЭлемент();
		ТипПроцессаОбъект.УстановитьСсылкуНового(ТипПроцессаСсылка);
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ProcessTypeDataVersion", "Строка", Ложь);
	Если ЗначениеЗаполнено(ВерсияДанных) И Не ТипПроцессаОбъект.ВерсияДанных = ВерсияДанных Тогда

		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ТипПроцессаОбъект.Ссылка);
		ТекстПредупреждения = "warning:" 
			+ СтрШаблон(НСтр("ru = 'Тип процесса ""%1"" не была передана, т.к. он был изменен в центральной базе. 
			|Тип процесса на данном устройстве заменена версией из центральной базы.'"),
			ТипПроцессаОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	ТипПроцессаОбъект.Наименование = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ProcessTypeName", "Строка", Истина);
	
	ТипПроцессаОбъект.Записать();
	ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ТипПроцессаСсылка);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLГруппуЗадания(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ГруппаЗаданияСсылка = Справочники.ГруппыЗаданий.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"ID", "УникальныйИдентификатор"));
	ГруппаЗаданияОбъект = ГруппаЗаданияСсылка.ПолучитьОбъект();

	Если ГруппаЗаданияОбъект = Неопределено Тогда
		ГруппаЗаданияОбъект   = Справочники.ГруппыЗаданий.СоздатьЭлемент();
		ГруппаЗаданияОбъект.УстановитьСсылкуНового(ГруппаЗаданияСсылка);
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskGroupDataVersion", "Строка", Ложь);
	
	Если ЗначениеЗаполнено(ВерсияДанных) И Не ГруппаЗаданияОбъект.ВерсияДанных = ВерсияДанных Тогда

		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ГруппаЗаданияОбъект.Ссылка);
		ТекстПредупреждения = "warning:" 
			+ СтрШаблон(НСтр("ru = 'Группа заданий ""%1"" не была передана, т.к. она была изменена в центральной базе. 
			|Группа заданий на данном устройстве заменена версией из центральной базы.'"),
			ГруппаЗаданияОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	ГруппаЗаданияОбъект.Родитель		= ОбменМобильноеПриложениеПовтИсп.ПолучитьСсылкуПоТипу("TaskGroup",
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskGroupParent", "Строка", Ложь));
		
	ГруппаЗаданияОбъект.Наименование	= ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskGroupName", "Строка", Истина);
	
	ГруппаЗаданияОбъект.Наименование	= ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskGroupProhibitionChoice", "Булево", Ложь);
	
	ГруппаЗаданияОбъект.Записать();
	ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ГруппаЗаданияСсылка);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLКатегориюЗадания(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	КатегорияСсылка 	= Справочники.КатегорииЗаданий.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ID", "УникальныйИдентификатор"));
	
	КатегорияОбъект 	= КатегорияСсылка.ПолучитьОбъект();
	КатегорияЭтоГруппа 	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskCategoryGroup", "Булево"); 
		
	Если КатегорияОбъект = Неопределено Тогда
		Если КатегорияЭтоГруппа Тогда
			КатегорияОбъект   = Справочники.КатегорииЗаданий.СоздатьГруппу();
		Иначе	
			КатегорияОбъект   = Справочники.КатегорииЗаданий.СоздатьЭлемент();
		КонецЕсли;		
		КатегорияОбъект.УстановитьСсылкуНового(КатегорияСсылка);		
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskCategoryDataVersion", "Строка", Ложь);
	
	Если ЗначениеЗаполнено(ВерсияДанных) И Не КатегорияОбъект.ВерсияДанных = ВерсияДанных Тогда

		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(КатегорияОбъект.Ссылка);
		ТекстПредупреждения = "warning:" 
		+ СтрШаблон(НСтр("ru = 'Категория задания ""%1"" не была передана, т.к. она была изменена в центральной базе. 
		|Категория задания на данном устройстве заменена версией из центральной базы.'"),
		КатегорияОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	КатегорияОбъект.Родитель 	 	= ОбменМобильноеПриложениеПовтИсп.ПолучитьСсылкуПоТипу("TaskCategory", 
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskCategoryParent", "Строка", Ложь));	
	КатегорияОбъект.Наименование 	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskCategoryName", "Строка", Истина);
	
	Если Не КатегорияОбъект.ЭтоГруппа Тогда
		КатегорияОбъект.ЗапретВыбораВЗадании = 
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskCategoryProhibitionChoice", "Булево", Ложь);
	КонецЕсли;	
	
	КатегорияОбъект.Записать();
	ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(КатегорияСсылка);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLКомментарий(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	КомментарийСсылка 	= Справочники.Комментарии.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"ID", "УникальныйИдентификатор"));
	
	КомментарийОбъект 	= КомментарийСсылка.ПолучитьОбъект();	
		
	Если КомментарийОбъект = Неопределено Тогда		
		КомментарийОбъект     = Справочники.Комментарии.СоздатьЭлемент();		
		КомментарийОбъект.УстановитьСсылкуНового(КомментарийСсылка);
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CommentDataVersion", "Строка", Ложь);
	
	Если ЗначениеЗаполнено(ВерсияДанных) И Не КомментарийОбъект.ВерсияДанных = ВерсияДанных Тогда

		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(КомментарийОбъект.Ссылка);
		ТекстПредупреждения = "warning:" 
			+ СтрШаблон(НСтр("ru = 'Комментарий ""%1"" не был передан, т.к. он был изменен в центральной базе.
			|Комментарий на данном устройстве заменен версией из центральной базы.'"),
			КомментарийОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	ДанныеВладельца = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CommentOwner", , Истина);
	ВладелецСсылка  = ПолучитьСсылкуСоставногоТипа(ДанныеВладельца);	
	
	Если ВладелецСсылка = Неопределено ИЛИ Не ЗначениеЗаполнено(ВладелецСсылка) Тогда		
		
		ТекстПредупреждения = "warning:" 
			+ СтрШаблон(НСтр("ru = 'Для комментария ""%1"" не найден владелец (документ Задание). 
			|Запись комментария отменена.'"), ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CommentText", "Строка"));

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	КомментарийОбъект.ВладелецКомментария = ВладелецСсылка;		
	КомментарийОбъект.Период 		  	  = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CommentPeriod", "Дата", Ложь);
	
	КомментарийОбъект.Автор 		  	  = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"CommentAuthor", , Ложь));
	
	КомментарийОбъект.Текст 		  	  = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CommentText", "Строка", Ложь);
	КомментарийОбъект.ТекстHTML		  	  = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CommentTextHTML", "Строка", Ложь);
	КомментарийОбъект.Приватный		  	  = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CommentHidden", "Булево", Ложь);
	КомментарийОбъект.Заголовок		  	  = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CommentHeader", "Булево", Ложь);
	
	КомментарийОбъект.Адресаты.Очистить();
	ТаблицаАдресаты = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "CommentAddressees", , Ложь);
	
	Если Не ТаблицаАдресаты = Неопределено Тогда
		
		Для Каждого СтрокаТаблица Из ТаблицаАдресаты Цикл
			ДанныеСтроки 			 = ПолучитьДанныеСтроки(ТаблицаАдресаты, СтрокаТаблица);
			НоваяСтрока  			 = КомментарийОбъект.Адресаты.Добавить();
			НоваяСтрока.Адресат		 = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, "Address", , Ложь));							
		КонецЦикла;
		
	КонецЕсли;
	
	КомментарийОбъект.Записать();
	ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(КомментарийСсылка);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLФайлКомментария(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Имя 		= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Name", "Строка", Ложь);
	Расширение 	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Extension", "Строка", Ложь);
	
	Если СтрНайти(Имя, Расширение) > 0 Тогда
		Имя = СтрЗаменить(Имя, "." + Расширение, "");
	КонецЕсли;

	ФайлСсылка = Справочники.КомментарииПрисоединенныеФайлы.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ID", "УникальныйИдентификатор"));
	
	Попытка
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		Если Не ФайлОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	ДанныеВладельца = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Owner");	
	ВладелецИд  	= ПолучитьЗначениеРеквизита(ДанныеВладельца, "ID", "УникальныйИдентификатор");	
	ВладелецФайла 	= Справочники.Комментарии.ПолучитьСсылку(ВладелецИд);
	//ОбъектИД 		= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор");
	ДанныеФайла 	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "FileData", "ХранилищеЗначения", Ложь);
	ТолькоЗаголовок = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "HeaderOnly", "Булево");
	ИДФайлаЭлектронногоПисьма   = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "IDFileMail", "Строка", Ложь);
	ВремяИзмененияУниверсальное = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "FileDataUniversal", "Дата", Ложь);
	
	Если Не ТолькоЗаголовок И ДанныеФайла <> Неопределено Тогда
		
		ВХДанныхФайла  = ПоместитьВоВременноеХранилище(ДанныеФайла.Получить(), Новый УникальныйИдентификатор);
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь()); 
		ПараметрыФайла.Вставить("ВладелецФайлов", 		ВладелецФайла); 
		ПараметрыФайла.Вставить("ИмяБезРасширения", 	Имя); 
		ПараметрыФайла.Вставить("РасширениеБезТочки",	Расширение);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ВремяИзмененияУниверсальное);
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ВХДанныхФайла,,, ФайлСсылка);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИДФайлаЭлектронногоПисьма) Тогда
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		ФайлОбъект.ИДФайлаЭлектронногоПисьма = ИДФайлаЭлектронногоПисьма;
		ФайлОбъект.Записать();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаписатьИзXMLКонтактноеЛицо(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	ОбъектНайденНаСервере = Истина;
	
	КонтактноеЛицоСсылка = Справочники.КонтактныеЛица.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ID", "УникальныйИдентификатор"));
	
	КонтактноеЛицоОбъект = КонтактноеЛицоСсылка.ПолучитьОбъект();

	Если КонтактноеЛицоОбъект = Неопределено Тогда
		ОбъектНайденНаСервере = Ложь;
		КонтактноеЛицоОбъект  = Справочники.КонтактныеЛица.СоздатьЭлемент();
		КонтактноеЛицоОбъект.УстановитьСсылкуНового(КонтактноеЛицоСсылка);
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ContactPersonsDataVersion", "Строка", Ложь);
	
	Если ЗначениеЗаполнено(ВерсияДанных) И Не КонтактноеЛицоОбъект.ВерсияДанных = ВерсияДанных Тогда

		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(КонтактноеЛицоОбъект.Ссылка);
		ТекстПредупреждения = "warning:" 
			+ СтрШаблон(НСтр("ru = 'Контактное лицо ""%1"" не было передано, т.к. оно было изменено в центральной базе.
			|Контактное лицо на данном устройстве заменено версией из центральной базы.'"),
			КонтактноеЛицоОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	ДанныеВладельца = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ContactPersonsOwner", , Истина);
	ВладелецСсылка  = ПолучитьСсылкуСоставногоТипа(ДанныеВладельца);
	
	Если ВладелецСсылка = Неопределено ИЛИ Не ЗначениеЗаполнено(ВладелецСсылка) Тогда		
		
		ТекстПредупреждения = "warning:"
			+ СтрШаблон(НСтр("ru = 'Для контактного лица ""%1"" не найден владелец (контрагент).
							 |Запись контактного лица отменена.'"), 
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ContactPersonsName", "Строка"));

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	КонтактноеЛицоОбъект.Владелец     = ВладелецСсылка;	
	КонтактноеЛицоОбъект.Наименование =	ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ContactPersonsName", "Строка", Ложь);
	КонтактноеЛицоОбъект.Комментарий  =	ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ContactPersonsComment", "Строка", 
		Ложь);
	
	ДанныеФизЛица = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ContactPersonsIndividual", , Ложь);
	ФизЛицоСсылка = ПолучитьСсылкуСоставногоТипа(ДанныеФизЛица);	
	
	КонтактноеЛицоОбъект.Физлицо = ?(ФизЛицоСсылка = Неопределено, Справочники.ФизическиеЛица.ПустаяСсылка(), 
		ФизЛицоСсылка);		
	
	Если Не ОбъектНайденНаСервере Тогда
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		Если ЗначениеЗаполнено(ТекущийПользователь.Сотрудник) Тогда
			КонтактноеЛицоОбъект.Ответственный = ТекущийПользователь.Сотрудник;
		КонецЕсли;
		
	КонецЕсли;
	
	КонтактноеЛицоОбъект.Автор = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ContactPersonsAuthor", , Ложь));
	
	КонтактноеЛицоОбъект.АвторКорректировки = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ContactPersonsAdjustmentAuthor", , Ложь));
	
	КонтактноеЛицоОбъект.ДатаКорректировки = ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"ContactPersonsAdjustmentDate", "Дата", Ложь);
	
	КонтактноеЛицоОбъект.ДатаСоздания = ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"ContactPersonsDateOfCreation", "Дата", Ложь);
	
	// КИ.
	КонтактноеЛицоОбъект.КонтактнаяИнформация.Очистить();
	ТаблицаКИ = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ContactPersonsContactInfo", , Ложь);
	
	Если Не ТаблицаКИ = Неопределено Тогда
		
		Для Каждого СтрокаТаблица Из ТаблицаКИ Цикл
			ДанныеСтроки 				= ПолучитьДанныеСтроки(ТаблицаКИ, СтрокаТаблица);
			НоваяСтрока  				= КонтактноеЛицоОбъект.КонтактнаяИнформация.Добавить();
			
			НоваяСтрока.Тип 			= ОбменМобильноеПриложениеПовтИсп.ПолучитьТипКИПоПредставлению(
				ПолучитьЗначениеРеквизита(ДанныеСтроки, "Type", "Строка", Ложь));
				
			НоваяСтрока.Вид 			= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, "Kind",,
				Ложь));
			НоваяСтрока.Представление	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Caption", "Строка", Ложь);				
			НоваяСтрока.ЗначенияПолей	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "FieldValues", "Строка", Ложь);				
			НоваяСтрока.Страна			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Country", "Строка", Ложь);				
			НоваяСтрока.Регион			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Region", "Строка", Ложь);				
			НоваяСтрока.Город			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "City", "Строка", Ложь);				
			НоваяСтрока.АдресЭП			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Email", "Строка", Ложь);				
			НоваяСтрока.ДоменноеИмяСервера= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Domain", "Строка", Ложь);				
			НоваяСтрока.НомерТелефона	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "PhoneNumber", "Строка", Ложь);				
			НоваяСтрока.НомерТелефонаБезКодов= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Phone", "Строка", Ложь);		
			
			НоваяСтрока.ВидДляСписка	= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки,
				"ViewForList", , Ложь));
			
		КонецЦикла;
		
	КонецЕсли;
	
	КонтактноеЛицоОбъект.Записать();
	ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(КонтактноеЛицоСсылка);
	
КонецПроцедуры	

Процедура ЗаписатьИзXMLКонтрагента(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	КонтрагентСсылка	= Справочники.Контрагенты.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ID", "УникальныйИдентификатор"));
	
	КонтрагентОбъект	= КонтрагентСсылка.ПолучитьОбъект();
	КонтрагентЭтоГруппа	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PartnersGroup", "Булево");
		
	Если КонтрагентОбъект = Неопределено Тогда
		
		Если КонтрагентЭтоГруппа Тогда
			КонтрагентОбъект   = Справочники.Контрагенты.СоздатьГруппу();
		Иначе	
			КонтрагентОбъект   = Справочники.Контрагенты.СоздатьЭлемент();
		КонецЕсли;	
		КонтрагентОбъект.УстановитьСсылкуНового(КонтрагентСсылка);
		
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PartnersDataVersion", "Строка", Ложь);
	Если ЗначениеЗаполнено(ВерсияДанных) И Не КонтрагентОбъект.ВерсияДанных = ВерсияДанных Тогда

		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(КонтрагентОбъект.Ссылка);
		ТекстПредупреждения = "warning:"
			+ СтрШаблон(НСтр("ru = 'Контрагент ""%1"" не был передан, т.к. он был изменен в центральной базе. 
			|Контрагент на данном устройстве заменен версией из центральной базы.'"),
			КонтрагентОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	КонтрагентОбъект.Родитель 	  = ОбменМобильноеПриложениеПовтИсп.ПолучитьСсылкуПоТипу("Partners",
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PartnersParent", "Строка", Ложь));
		
	КонтрагентОбъект.Наименование = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PartnersName", "Строка", Истина);
	
	Если Не КонтрагентЭтоГруппа Тогда 
		
		КонтрагентОбъект.ВидКонтрагента 	= ОбменМобильноеПриложениеПовтИсп.ПолучитьВидКонтрагентаПоПредставлению(
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PartnersView", "Строка", Ложь));
			
		КонтрагентОбъект.Комментарий 		= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PartnersComment", "Строка", 
			Ложь);
		КонтрагентОбъект.НаименованиеПолное = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PartnersNameFull", "Строка", 
			Ложь);
		
		КонтрагентОбъект.КонтактноеЛицо		= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
			"PartnersContactPerson", , Ложь));
		
		КонтрагентОбъект.ФизическоеЛицо		= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
			"PartnersIndividual", , Ложь));
		
		КонтрагентОбъект.ИНН				= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PartnersINN", "Строка", Ложь);
		КонтрагентОбъект.КПП				= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PartnersKPP", "Строка", Ложь);
		КонтрагентОбъект.Автор				= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
			"PartnersAuthor", , Ложь));
	
		КонтрагентОбъект.АвторКорректировки = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
			"PartnersAdjustmentAuthor", , Ложь));
	
		КонтрагентОбъект.ДатаКорректировки = ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
			"PartnersAdjustmentDate", "Дата", Ложь);
	
		КонтрагентОбъект.ДатаСоздания = ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
			"PartnersDateOfCreation", "Дата", Ложь);

		// КИ.
		КонтрагентОбъект.КонтактнаяИнформация.Очистить();
		ТаблицаКИ = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PartnersContactInfo", , Ложь);
		
		Если Не ТаблицаКИ = Неопределено Тогда
			
			Для Каждого СтрокаТаблица Из ТаблицаКИ Цикл
				
				ДанныеСтроки 				= ПолучитьДанныеСтроки(ТаблицаКИ, СтрокаТаблица);
				НоваяСтрока  				= КонтрагентОбъект.КонтактнаяИнформация.Добавить();
				
				НоваяСтрока.Тип 			= ОбменМобильноеПриложениеПовтИсп.ПолучитьТипКИПоПредставлению(
					ПолучитьЗначениеРеквизита(ДанныеСтроки, "Type", "Строка", Ложь));
					
				НоваяСтрока.Вид 			= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, 
					"Kind", , Ложь));
				НоваяСтрока.Представление	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Caption", "Строка", Ложь);				
				НоваяСтрока.ЗначенияПолей	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "FieldValues", "Строка", Ложь);				
				НоваяСтрока.Страна			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Country", "Строка", Ложь);				
				НоваяСтрока.Регион			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Region", "Строка", Ложь);				
				НоваяСтрока.Город			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "City", "Строка", Ложь);				
				НоваяСтрока.АдресЭП			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Email", "Строка", Ложь);				
				НоваяСтрока.ДоменноеИмяСервера= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Domain", "Строка", Ложь);				
				НоваяСтрока.НомерТелефона	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "PhoneNumber", "Строка", Ложь);				
				НоваяСтрока.НомерТелефонаБезКодов= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Phone", "Строка", Ложь);		
				
				НоваяСтрока.ВидДляСписка	= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, 
					"ViewForList", , Ложь));
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрагентОбъект.Записать();
	ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(КонтрагентСсылка);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLСпринт(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	СпринтСсылка	= Справочники.Спринты.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ID", "УникальныйИдентификатор"));
	
	СпринтОбъект	= СпринтСсылка.ПолучитьОбъект();
	СпринтЭтоГруппа	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "SprintGroup", "Булево");
		
	Если СпринтОбъект = Неопределено Тогда
		Если СпринтЭтоГруппа Тогда
			СпринтОбъект   = Справочники.Спринты.СоздатьГруппу();
		Иначе	
			СпринтОбъект   = Справочники.Спринты.СоздатьЭлемент();
		КонецЕсли;	
		СпринтОбъект.УстановитьСсылкуНового(СпринтСсылка);
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "SprintDataVersion", "Строка", Ложь);
	Если ЗначениеЗаполнено(ВерсияДанных) И Не СпринтОбъект.ВерсияДанных = ВерсияДанных Тогда

		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(СпринтОбъект.Ссылка);
		ТекстПредупреждения = "warning:"
			+ СтрШаблон(НСтр("ru = 'Спринт ""%1"" не был передан, т.к. он был изменен в центральной базе. 
			|Спринт на данном устройстве заменен версией из центральной базы.'"),
			СпринтОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
		
	СпринтОбъект.Родитель 	  = ОбменМобильноеПриложениеПовтИсп.ПолучитьСсылкуПоТипу("Sprint", 
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "SprintParent", "Строка", Ложь));
		
	СпринтОбъект.Наименование = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "SprintName", "Строка", Истина);
	
	Если Не СпринтЭтоГруппа Тогда 
		СпринтОбъект.ДатаНачала		= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "SprintBeginDate",   "Дата",   Ложь);
		СпринтОбъект.ДатаОкончания	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "SprintEndDate",     "Дата",   Ложь);
		СпринтОбъект.Завершен		= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "SprintCompleted",   "Булево", Ложь);
		СпринтОбъект.Описание		= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "SprintDescription", "Строка", Ложь);
	КонецЕсли;
	
	СпринтОбъект.Записать();
	ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(СпринтСсылка);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLТег(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТегСсылка	 = Справочники.Теги.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ID", "УникальныйИдентификатор"));
	
	ТегОбъект	 = ТегСсылка.ПолучитьОбъект();
	
	Если ТегОбъект = Неопределено Тогда
		ТегОбъект   = Справочники.Теги.СоздатьЭлемент();		
		ТегОбъект.УстановитьСсылкуНового(ТегСсылка);
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TagDataVersion", "Строка", Ложь);
	
	Если ЗначениеЗаполнено(ВерсияДанных) И Не ТегОбъект.ВерсияДанных = ВерсияДанных Тогда

		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ТегОбъект.Ссылка);
		ТекстПредупреждения = "warning:"
			+ СтрШаблон(НСтр("ru = 'Тег ""%1"" не был передан, т.к. он был изменен в центральной базе. 
			|Тег на данном устройстве заменен версией из центральной базы.'"),
			ТегОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	ТегОбъект.Наименование = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TagName", "Строка", Истина);
	
	ТегОбъект.Записать();
	ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ТегСсылка);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLФизЛицо(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ФизЛицоСсылка	 = Справочники.ФизическиеЛица.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ID", "УникальныйИдентификатор"));
	
	ФизЛицоОбъект	 = ФизЛицоСсылка.ПолучитьОбъект();
	ФизЛицоЭтоГруппа = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "IndividualGroup", "Булево");
		
	Если ФизЛицоОбъект = Неопределено Тогда
		Если ФизЛицоЭтоГруппа Тогда
			ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьГруппу();
		Иначе	
			ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		КонецЕсли;	
		ФизЛицоОбъект.УстановитьСсылкуНового(ФизЛицоСсылка);		
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "IndividualDataVersion", "Строка", Ложь);
	
	Если ЗначениеЗаполнено(ВерсияДанных) И Не ФизЛицоОбъект.ВерсияДанных = ВерсияДанных Тогда

		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ФизЛицоОбъект.Ссылка);
		ТекстПредупреждения = "warning:"
			+ СтрШаблон(НСтр("ru = 'Физ.лицо ""%1"" не было передано, т.к. оно был изменено в центральной базе.
			|Физ.лицо на данном устройстве заменено версией из центральной базы.'"),
			ФизЛицоОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	ФизЛицоОбъект.Родитель     = ОбменМобильноеПриложениеПовтИсп.ПолучитьСсылкуПоТипу("Individual",	
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "IndividualParent", "Строка", Ложь));
		
	ФизЛицоОбъект.Наименование = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "IndividualName", "Строка", Истина);
	
	Если Не ФизЛицоЭтоГруппа Тогда 
		
		ФизЛицоОбъект.ДатаРождения = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "IndividualBirthday", "Дата", Ложь);		
		
		// КИ.
		ФизЛицоОбъект.КонтактнаяИнформация.Очистить();
		ТаблицаКИ = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "IndividualContactInfo", , Ложь);
		
		Если Не ТаблицаКИ = Неопределено Тогда
			
			Для Каждого СтрокаТаблица Из ТаблицаКИ Цикл
				
				ДанныеСтроки 				= ПолучитьДанныеСтроки(ТаблицаКИ, СтрокаТаблица);
				НоваяСтрока  				= ФизЛицоОбъект.КонтактнаяИнформация.Добавить();
				
				НоваяСтрока.Тип 			= ОбменМобильноеПриложениеПовтИсп.ПолучитьТипКИПоПредставлению(
					ПолучитьЗначениеРеквизита(ДанныеСтроки, "Type", "Строка", Ложь));
					
				НоваяСтрока.Вид 			= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, 
					"Kind", , Ложь));
				НоваяСтрока.Представление	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Caption", "Строка", Ложь);				
				НоваяСтрока.ЗначенияПолей	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "FieldValues", "Строка", Ложь);				
				НоваяСтрока.Страна			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Country", "Строка", Ложь);				
				НоваяСтрока.Регион			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Region", "Строка", Ложь);				
				НоваяСтрока.Город			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "City", "Строка", Ложь);				
				НоваяСтрока.АдресЭП			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Email", "Строка", Ложь);				
				НоваяСтрока.ДоменноеИмяСервера= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Domain", "Строка", Ложь);				
				НоваяСтрока.НомерТелефона	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "PhoneNumber", "Строка", Ложь);				
				НоваяСтрока.НомерТелефонаБезКодов= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Phone", "Строка", Ложь);		
				НоваяСтрока.ВидДляСписка	= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки,
					"ViewForList", , Ложь));
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ФизЛицоОбъект.Записать();
	ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ФизЛицоСсылка);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLПотенциальногоКлиента(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	КлиентСсылка	 = Справочники.ПотенциальныеКлиенты.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));
	
	КлиентОбъект	= КлиентСсылка.ПолучитьОбъект();
	КлиентЭтоГруппа	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PotentialClientsGroup", "Булево");
		
	Если КлиентОбъект = Неопределено Тогда
		Если КлиентЭтоГруппа Тогда
			КлиентОбъект = Справочники.ПотенциальныеКлиенты.СоздатьГруппу();
		Иначе	
			КлиентОбъект = Справочники.ПотенциальныеКлиенты.СоздатьЭлемент();
		КонецЕсли;	
		КлиентОбъект.УстановитьСсылкуНового(КлиентСсылка);		
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PotentialClientsDataVersion", "Строка", Ложь);
	
	Если ЗначениеЗаполнено(ВерсияДанных) И Не КлиентОбъект.ВерсияДанных = ВерсияДанных Тогда

		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(КлиентОбъект.Ссылка);
		ТекстПредупреждения = "warning:"
			+ СтрШаблон(НСтр("ru = 'Потенциальный клиент ""%1"" не был передан, т.к. он был изменен в Центральной базе.
			|Потенциальный клиент на данном устройстве заменен версией из Центральной базы.'"),
			КлиентОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	КлиентОбъект.Родитель     = ОбменМобильноеПриложениеПовтИсп.ПолучитьСсылкуПоТипу("PotentialClients",	
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PotentialClientsParent", "Строка", Ложь));
		
	КлиентОбъект.Наименование = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PotentialClientsName", "Строка", Истина);
	
	Если Не КлиентЭтоГруппа Тогда 
		
		КлиентОбъект.Организация = ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
			"PotentialClientsOrganization", "Строка", Ложь);		

		КлиентОбъект.Клиент = ПолучитьСсылкуСоставногоТипа(
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PotentialClientsClient", , Ложь));
		
		КлиентОбъект.ДатаРегистрации = ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
			"PotentialClientsDateRegistration", "Дата", Ложь);		
		
		КлиентОбъект.Ответственный = ПолучитьСсылкуСоставногоТипа(
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PotentialClientsResponsible", , Ложь));
		
		КлиентОбъект.Комментарий = ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
			"PotentialClientsComment", "Строка", Ложь);
		
		// КИ.
		КлиентОбъект.КонтактнаяИнформация.Очистить();
		ТаблицаКИ = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PotentialClientsContactInfo", , Ложь);
		
		Если Не ТаблицаКИ = Неопределено Тогда
			
			Для Каждого СтрокаТаблица Из ТаблицаКИ Цикл
				
				ДанныеСтроки 				= ПолучитьДанныеСтроки(ТаблицаКИ, СтрокаТаблица);
				НоваяСтрока  				= КлиентОбъект.КонтактнаяИнформация.Добавить();
				
				НоваяСтрока.Тип 			= ОбменМобильноеПриложениеПовтИсп.ПолучитьТипКИПоПредставлению(
					ПолучитьЗначениеРеквизита(ДанныеСтроки, "Type", "Строка", Ложь));
					
				НоваяСтрока.Вид 			= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, 
					"Kind", , Ложь));
				НоваяСтрока.Представление	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Caption", "Строка", Ложь);				
				НоваяСтрока.ЗначенияПолей	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "FieldValues", "Строка", Ложь);				
				НоваяСтрока.Страна			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Country", "Строка", Ложь);				
				НоваяСтрока.Регион			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Region", "Строка", Ложь);				
				НоваяСтрока.Город			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "City", "Строка", Ложь);				
				НоваяСтрока.АдресЭП			= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Email", "Строка", Ложь);				
				НоваяСтрока.ДоменноеИмяСервера= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Domain", "Строка", Ложь);				
				НоваяСтрока.НомерТелефона	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "PhoneNumber", "Строка", Ложь);				
				НоваяСтрока.НомерТелефонаБезКодов= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Phone", "Строка", Ложь);		
				НоваяСтрока.ВидДляСписка	= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки,
					"ViewForList", , Ложь));
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КлиентОбъект.Записать();
	ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(КлиентСсылка);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLЗадание(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ЗаданиеСсылка	 = Документы.Задание.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ID", "УникальныйИдентификатор"));
	
	ЗаданиеОбъект	 = ЗаданиеСсылка.ПолучитьОбъект();	
	
	Если ЗаданиеОбъект = Неопределено Тогда
		ЗаданиеОбъект = Документы.Задание.СоздатьДокумент();		
		ЗаданиеОбъект.УстановитьСсылкуНового(ЗаданиеСсылка);
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskDataVersion", "Строка", Ложь);
	Если ЗначениеЗаполнено(ВерсияДанных) И Не ЗаданиеОбъект.ВерсияДанных = ВерсияДанных Тогда
		
		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ЗаданиеОбъект.Ссылка);
		ТекстПредупреждения = "warning:"
			+ СтрШаблон(НСтр("ru = 'Документ ""Задание"" ""%1"" не был передан, т.к. он был изменен в центральной базе.
			|Документ ""Задание"" на данном устройстве заменен версией из центральной базы.'"),
			ЗаданиеОбъект.Номер);
		
		ВызватьИсключение ТекстПредупреждения;
		
	КонецЕсли;
		
	ЗаданиеОбъект.Автор 						= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskAuthor", , Ложь));
	
	ЗаданиеОбъект.АвторКорректировки 			= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskAuthorCorrection", , Ложь));
	
	мБаллы                                      	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskPoints", "Число", Ложь);
	ЗаданиеОбъект.Баллы						= ?(мБаллы = Неопределено, 0, мБаллы); 

	ЗаданиеОбъект.Влияние 						= ОбменМобильноеПриложениеПовтИсп.ПолучитьВлияниеПоПредставлению(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта,  "TaskInfluence", "Строка", Ложь));
		
	ЗаданиеОбъект.Выполнено 					= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskDone", "Булево");
	
	ЗаданиеОбъект.ГруппаЗадания 				= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskGroup", , Ложь));
	
	ЗаданиеОбъект.ДатаВыполнения				= ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskDoneDate", "Дата", Ложь);
	ЗаданиеОбъект.ДатаЗавершения				= ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskCompletedDate", "Дата", Ложь);
	ЗаданиеОбъект.ДатаКорректировки				= ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskCorrectionDate", "Дата", Ложь);
	
	ЗаданиеОбъект.ДатаНазначенияИсполнителя		= ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskAppointmentExecutorDate", "Дата", Ложь);
	
	ЗаданиеОбъект.ДатаСоздания					= ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskCreationDate", "Дата", Ложь);
	ЗаданиеОбъект.Завершено 					= ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskCompleted", "Булево", Ложь);
	
	ЗаданиеОбъект.Инициатор	 				= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskInitiator", , Ложь));
	
	ЗаданиеОбъект.Категория	 				= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskCategory", , Ложь));
	
	ЗаданиеОбъект.Комментарий 					= ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskComment", "Строка", Ложь);
	
	ЗаданиеОбъект.КрайняяДатаВыполнения			= ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskEndDateCompletion", "Дата", Ложь);
	
	ЗаданиеОбъект.КрайняяДатаРеакции			= ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskReactionDeadline", "Дата", Ложь);
	
	ЗаданиеОбъект.Описание 					= ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskDescription", "Строка", Ложь);
	
	ЗаданиеОбъект.Организация	 				= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskOrganization", , Ложь));
	
	ЗаданиеОбъект.Клиент						= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskClient", , Ложь));
	
	ЗаданиеОбъект.ОценкаВыполнения				= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskAssessment", , Ложь));
	
	ЗаданиеОбъект.Подразделение				= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskSubdivision", , Ложь));
	
	ЗаданиеОбъект.Приоритет					= ОбменМобильноеПриложениеПовтИсп.ПолучитьПриоритетПоПредставлению(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта,  "TaskPriority", "Строка", Ложь));
		
	ЗаданиеОбъект.Проект						= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskProject", , Ложь));
	
	ЗаданиеОбъект.ПроцентВыполнения				= ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskPercentExecutions", "Число", Ложь);
	
	ЗаданиеОбъект.Процесс						= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskProcess", , Ложь));
	
	ЗаданиеОбъект.Родитель						= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskParent", , Ложь));
	
	ЗаданиеОбъект.Сервис						= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskService", , Ложь));
	
	ЗаданиеОбъект.СпособСоздания				= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskCreationMethod", , Ложь));
	
	ЗаданиеОбъект.Спринт						= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskSprint", , Ложь));
	
	ЗаданиеОбъект.Срочность					= ОбменМобильноеПриложениеПовтИсп.ПолучитьСрочностьПоПредставлению(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта,  "TaskUrgency", "Строка", Ложь));
		
	ЗаданиеОбъект.ТекстHTML					= ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskHTMLText", "Строка", Ложь);	
	
	ЗаданиеОбъект.ТекущийИсполнитель			= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskCurrentContractor", , Ложь));
	
	ЗаданиеОбъект.ТекущийЭтап					= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskCurrentStage", , Ложь));
	
	ЗаданиеОбъект.Тема						= ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"TaskSubject", "Строка", Ложь);		
	
	ЗаданиеОбъект.ТипПроцесса					= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskDocumentType", , Ложь));
	
	ЗаданиеОбъект.Услуга						= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"TaskUsluga", , Ложь));		
		 
	мДатаОткрытия                    			= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DateOpening", "Дата", Ложь);	
	
	ЗаданиеОбъект.Наблюдатели.Очистить();
	ТаблицаНаблюдатели = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskObservers", , Ложь);
	Если Не ТаблицаНаблюдатели = Неопределено Тогда
		Для Каждого СтрокаТаблица Из ТаблицаНаблюдатели Цикл
			ДанныеСтроки 			= ПолучитьДанныеСтроки(ТаблицаНаблюдатели, СтрокаТаблица);
			НоваяСтрока  			= ЗаданиеОбъект.Наблюдатели.Добавить();			
			НоваяСтрока.Адресат	= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки,
				"Observer", , Ложь));
		КонецЦикла;	
	КонецЕсли;
	
	ЗаданиеОбъект.Теги.Очистить();
	ТаблицаТеги = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskTegs", , Ложь);
	Если Не ТаблицаТеги = Неопределено Тогда
		Для Каждого СтрокаТаблица Из ТаблицаТеги Цикл
			ДанныеСтроки 			= ПолучитьДанныеСтроки(ТаблицаТеги, СтрокаТаблица);
			НоваяСтрока  			= ЗаданиеОбъект.Теги.Добавить();
			НоваяСтрока.Тег		= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, 
				"Teg", , Ложь));							
		КонецЦикла;	
	КонецЕсли;
	
	ЗаданиеОбъект.ЧекЛист.Очистить();
	ТаблицаЧекЛист = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskCheckList", , Ложь);
	Если Не ТаблицаЧекЛист = Неопределено Тогда
		Для Каждого СтрокаТаблица Из ТаблицаЧекЛист Цикл
			ДанныеСтроки 			= ПолучитьДанныеСтроки(ТаблицаЧекЛист, СтрокаТаблица);
			НоваяСтрока  			= ЗаданиеОбъект.ЧекЛист.Добавить();			
			НоваяСтрока.Выполнено	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Done", "Булево", Ложь);
			НоваяСтрока.Описание	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Description", "Строка", Ложь);
			НоваяСтрока.Вес	 	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Weight", "Число", Ложь);
			НоваяСтрока.Дата 		= ПолучитьЗначениеРеквизита(ДанныеСтроки, "Date", "Дата", Ложь);			
			НоваяСтрока.Автор		= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, 
				"Author", , Ложь));				
		КонецЦикла;	
	КонецЕсли;

	ЗаданиеОбъект.Этапы.Очистить();
	ТаблицаЭтапы = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskStages", , Ложь);	
	Если Не ТаблицаЭтапы = Неопределено Тогда
		Для Каждого СтрокаТаблица Из ТаблицаЭтапы Цикл
			ДанныеСтроки 			 = ПолучитьДанныеСтроки(ТаблицаЭтапы, СтрокаТаблица);
			НоваяСтрока  			 = ЗаданиеОбъект.Этапы.Добавить();			
			НоваяСтрока.Этап		 = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, 
				"Stage", , Ложь));			
			НоваяСтрока.ДатаНачала	 = ПолучитьЗначениеРеквизита(ДанныеСтроки, "BeginDate", "Дата", Ложь);			
			НоваяСтрока.ДатаОкончания= ПолучитьЗначениеРеквизита(ДанныеСтроки, "EndDate", "Дата", Ложь);			
		КонецЦикла;	
	КонецЕсли;
	
	ЗаданиеОбъект.Исполнители.Очистить();
	ТаблицаИсполнители = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "TaskExecutors", , Ложь);	
	Если Не ТаблицаИсполнители = Неопределено Тогда
		Для Каждого СтрокаТаблица Из ТаблицаИсполнители Цикл
			ДанныеСтроки 			 	= ПолучитьДанныеСтроки(ТаблицаИсполнители, СтрокаТаблица);
			НоваяСтрока  			 	= ЗаданиеОбъект.Исполнители.Добавить();			
			НоваяСтрока.Исполнитель	= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, 
				"Executor", , Ложь));			
			НоваяСтрока.ДатаНачала		= ПолучитьЗначениеРеквизита(ДанныеСтроки, "BeginDate", "Дата", Ложь);			
			НоваяСтрока.ДатаОкончания	= ПолучитьЗначениеРеквизита(ДанныеСтроки, "EndDate", "Дата", Ложь);			
		КонецЦикла;	
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ЗаданиеОбъект.Дата) Тогда
		ЗаданиеОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Попытка
		ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Проведение);		
	Исключение
		ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Запись);				
	КонецПопытки;
	
	// Если задание создано ранее, получаем дату открытия из мобильного,
	// если задание только создается - указываем текущее время, чтобы для пользователя, создавшего задание,
	// оно считалось прочитанным.
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если мДатаОткрытия <> Дата( 1, 1, 1, 0, 0, 0) Тогда
		РегистрыСведений.РеквизитыЗаданийПоПользователям.УстановитьДатуОткрытия(ЗаданиеОбъект.Ссылка, ТекущийПользователь, 
			мДатаОткрытия);
	Иначе
		РегистрыСведений.РеквизитыЗаданийПоПользователям.УстановитьДатуОткрытия(ЗаданиеОбъект.Ссылка, ТекущийПользователь);					
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЗаданиеОбъект.ВерсияДанных) Тогда
		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ЗаданиеОбъект.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаписатьИзXMLФайлЗадания(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Имя 			= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Name", "Строка", Ложь);
	Расширение 	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Extension", "Строка", Ложь);
	
	Если СтрНайти(Имя, Расширение) > 0 Тогда
		Имя = СтрЗаменить(Имя, "." + Расширение, "");
	КонецЕсли;

	ФайлСсылка = Справочники.ЗаданиеПрисоединенныеФайлы.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ID", "УникальныйИдентификатор"));
	
	Попытка
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		Если Не ФайлОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	ДанныеВладельца = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Owner");	
	ВладелецИд  	= ПолучитьЗначениеРеквизита(ДанныеВладельца, "ID", "УникальныйИдентификатор");	
	ВладелецФайла 	= Документы.Задание.ПолучитьСсылку(ВладелецИд);
	ДанныеФайла 	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "FileData", "ХранилищеЗначения", Ложь);
	ТолькоЗаголовок = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "HeaderOnly", "Булево");
	ИДФайлаЭлектронногоПисьма   = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "IDFileMail", "Строка", Ложь);
	ВремяИзмененияУниверсальное = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "FileDataUniversal", "Дата", Ложь);
	
	Если Не ТолькоЗаголовок И ДанныеФайла <> Неопределено Тогда
		
		ВХДанныхФайла  = ПоместитьВоВременноеХранилище(ДанныеФайла.Получить(), Новый УникальныйИдентификатор);
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", 						Пользователи.ТекущийПользователь()); 
		ПараметрыФайла.Вставить("ВладелецФайлов", 				ВладелецФайла); 
		ПараметрыФайла.Вставить("ИмяБезРасширения", 			Имя); 
		ПараметрыФайла.Вставить("РасширениеБезТочки",			Расширение);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное",  ВремяИзмененияУниверсальное);
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ВХДанныхФайла,,, ФайлСсылка);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИДФайлаЭлектронногоПисьма) Тогда
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		ФайлОбъект.ИДФайлаЭлектронногоПисьма = ИДФайлаЭлектронногоПисьма;
		ФайлОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИзXMLНастройкиУстареванияДанных(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	Значение 				= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DataExpirationPeriod", "Число", Ложь);
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь 	= Пользователи.ТекущийПользователь();	
	
	НастройкиПользователя 	= 
		ОбменМобильноеПриложениеПовтИсп.НастройкиПользователяМобильногоПриложения(ТекущийПользователь);
		
	Если ЗначениеЗаполнено(НастройкиПользователя) Тогда
		НастройкиОбъект 						= НастройкиПользователя.ПолучитьОбъект();
		НастройкиОбъект.СрокУстареванияДанных 	= Значение;
		НастройкиОбъект.Записать();
		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(НастройкиПользователя);
	КонецЕсли;
	
КонецПроцедуры
						
Процедура ЗаписатьИзXMLНастройкуМаксимальныйРазмерФайла(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт

	Значение = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "FileSize", "Число", Ложь);
	
	Если Значение = Неопределено Тогда
		Значение = 0;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь 	= Пользователи.ТекущийПользователь();	
	
	НастройкиПользователя 	= 
		ОбменМобильноеПриложениеПовтИсп.НастройкиПользователяМобильногоПриложения(ТекущийПользователь);
		
	Если ЗначениеЗаполнено(НастройкиПользователя) Тогда
		НастройкиОбъект = НастройкиПользователя.ПолучитьОбъект();
		НастройкиОбъект.МаксимальныйРазмерФайлов 			   = Значение;
		НастройкиОбъект.ОграничениеПередаваемыхФайловПоРазмеру = Значение > 0;
		НастройкиОбъект.Записать();
		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(НастройкиПользователя);
	КонецЕсли;
	
КонецПроцедуры
						
Процедура ЗаписатьИзXMLНастройкуДобавлятьСебяВНаблюдателиДляВсехНовыхЗаданий(Знач ДанныеОбъекта, 
	Знач МобильныйКлиент) Экспорт

	Значение = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "AddYourselfIntoObservers", "Булево", Ложь);
	
	Если Значение = Неопределено Тогда
		Значение = Ложь;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи 				= РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = МобильныйКлиент.Пользователь;
	МенеджерЗаписи.Настройка    = 
		ПланыВидовХарактеристик.НастройкиПользователей.ДобавлятьСебяВНаблюдателиДляВсехНовыхЗадания;
	МенеджерЗаписи.Значение     = Значение;

	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLНастройкуОсновнойИнициатор(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт

	Значение = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "BasicInitiator", , Ложь));
	
	Если Значение = Неопределено Тогда
		Значение = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи 				= РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = МобильныйКлиент.Пользователь;
	МенеджерЗаписи.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойИнициатор;
	МенеджерЗаписи.Значение     = Значение;

	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры						

Процедура ЗаписатьИзXMLНастройкуОсновнойПроцесс(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт

	Значение = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "BasicProcess", , Ложь));
	
	Если Значение = Неопределено Тогда
		Значение = Справочники.Процессы.ПустаяСсылка();
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи 				= РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = МобильныйКлиент.Пользователь;
	МенеджерЗаписи.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойПроцесс;
	МенеджерЗаписи.Значение     = Значение;

	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLНастройкуОсновнойПроцессДляСоздаваемыхДочернихЗаданий(Знач ДанныеОбъекта, 
	Знач МобильныйКлиент) Экспорт

	Значение = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "BasicProcessForSubTask", , Ложь));
	
	Если Значение = Неопределено Тогда
		Значение = Справочники.Процессы.ПустаяСсылка();
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи 				= РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = МобильныйКлиент.Пользователь;
	
	МенеджерЗаписи.Настройка    = 
		ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойПроцессДляСоздаваемыхДочернихЗаданий;
		
	МенеджерЗаписи.Значение     = Значение;

	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLНастройкуОткрыватьНеНовоеЗаданиеНаВкладкеКомментарии(Знач ДанныеОбъекта,
	Знач МобильныйКлиент) Экспорт

	Значение = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "OpenTheTabComment", "Булево", Ложь);
	
	Если Значение = Неопределено Тогда
		Значение = Ложь;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи 				= РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = МобильныйКлиент.Пользователь;
	МенеджерЗаписи.Настройка    = 
		ПланыВидовХарактеристик.НастройкиПользователей.ОткрыватьНеНовоеЗаданиеНаВкладеСообщение;
	МенеджерЗаписи.Значение     = Значение;

	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLНастройкуПриДобавленииСообщенияПоУмолчаниюНеУведомлятьИнициатора(Знач ДанныеОбъекта, 
	Знач МобильныйКлиент) Экспорт

	Значение = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "IgnorantTheInitiator", "Булево", Ложь);
	
	Если Значение = Неопределено Тогда
		Значение = Ложь;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи 				= РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = МобильныйКлиент.Пользователь;
	МенеджерЗаписи.Настройка    = 
		ПланыВидовХарактеристик.НастройкиПользователей.ПриДобавленииСообщенияПоУмолчаниюНеУведомлятьИнициатора;
	МенеджерЗаписи.Значение     = Значение;

	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLНастройкуУпорядочиваниеКомментариевВЗадании(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт

	Значение = ОбменМобильноеПриложениеПовтИсп.ПолучитьЗначениеУпорядочиванияКомментариевПоПредставлению(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "SortingComments", "Строка", Ложь));
		
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи 				= РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = МобильныйКлиент.Пользователь;
	МенеджерЗаписи.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.УпорядочиваниеКомментариевВЗадании;
	МенеджерЗаписи.Значение     = Значение;

	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLНастройкуОсновнаяОрганизация(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт

	Значение = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "BasicOrganization", , Ложь));
	
	Если Значение = Неопределено Тогда
		Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи 				= РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = МобильныйКлиент.Пользователь;
	МенеджерЗаписи.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация;
	МенеджерЗаписи.Значение     = Значение;

	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLНастройкуОсновноеПодразделение(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт

	Значение = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, "BasicDivision", , Ложь));
	
	Если Значение = Неопределено Тогда
		Значение = Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи 				= РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = МобильныйКлиент.Пользователь;
	МенеджерЗаписи.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделение;
	МенеджерЗаписи.Значение     = Значение;

	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLСвязьКомментариев(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеРодителя	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Parent", , Истина);
	Родитель		= ОбменМобильноеПриложениеПовтИсп.ПолучитьСсылкуПоТипу("Comment", 
		ПолучитьЗначениеРеквизита(ДанныеРодителя, "ID", "Строка", Истина));
	
	ДанныеСсылки	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Link", , Истина);
	Ссылка			= ОбменМобильноеПриложениеПовтИсп.ПолучитьСсылкуПоТипу("Comment",
		ПолучитьЗначениеРеквизита(ДанныеСсылки, "ID", "Строка", Истина));
	
	НаборЗаписей 	= РегистрыСведений.СвязьКомментариев.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Родитель.Установить(Родитель);
	НаборЗаписей.Отбор.Ссылка.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяСтрока 			= НаборЗаписей.Добавить();
		НоваяСтрока.Родитель 	= Родитель;
		НоваяСтрока.Ссылка   	= Ссылка;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаписатьИзXMLСобытиеЖурнала(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипЗаписи = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RecordType", "Строка");

	Если СтрСравнить(ТипЗаписи, "Warning") = 0 Тогда
		ТипСобытия = Перечисления.ТипыСобытийЖурналаРаботыСМобильнымиКлиентами.Предупреждение;
		
	ИначеЕсли СтрСравнить(ТипЗаписи, "Error") = 0 Тогда
		ТипСобытия = Перечисления.ТипыСобытийЖурналаРаботыСМобильнымиКлиентами.Ошибка;
		
	Иначе
		ТипСобытия = Перечисления.ТипыСобытийЖурналаРаботыСМобильнымиКлиентами.Информация;
		
	КонецЕсли;

	РегистрыСведений.ЖурналРаботыСМобильнымиКлиентами.ДобавитьЗаписьВЖурналСКлиента(
		МобильныйКлиент,
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RecordMSecs", "Число"),
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "RecordDate", "Дата"),
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ObjectID", "УникальныйИдентификатор", Ложь),
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Description", "Строка", Ложь),
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ObjectType", "Строка", Ложь),
		ТипСобытия);	
	
КонецПроцедуры
	
Процедура ЗаписатьИзXMLЛогиныИПароли(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ЛогиныИПаролиСсылка	= Справочники.ЛогиныИПароли.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ID", "УникальныйИдентификатор"));
	
	ЛогиныИПаролиОбъект	= ЛогиныИПаролиСсылка.ПолучитьОбъект();	
		
	Если ЛогиныИПаролиОбъект = Неопределено Тогда
		ЛогиныИПаролиОбъект	= Справочники.ЛогиныИПароли.СоздатьЭлемент();		
		ЛогиныИПаролиОбъект.УстановитьСсылкуНового(ЛогиныИПаролиСсылка);
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "LoginsDataVersion", "Строка", Ложь);
	Если ЗначениеЗаполнено(ВерсияДанных) И Не ЛогиныИПаролиОбъект.ВерсияДанных = ВерсияДанных Тогда

		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ЛогиныИПаролиОбъект.Ссылка);
		ТекстПредупреждения = "warning:"
			+ СтрШаблон(НСтр(
			"ru = 'Учетная карточка логина и пароля ""%1"" не была передана, т.к. она была изменена в центральной базе.
			|Учетная карточка логина и пароля на данном устройстве заменена версией из центральной базы.'"),
			Строка(ЛогиныИПаролиОбъект.Объект));

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	ОбъектТипСтрока 		= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "LoginsOwnerString", "Булево");	
	Если ОбъектТипСтрока Тогда
		ЛогиныИПаролиОбъект.Объект = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "LoginsOwner", "Строка", Ложь);
	Иначе
		ЛогиныИПаролиОбъект.Объект = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
			"LoginsOwner", , Ложь));		
	КонецЕсли;
	
	ЛогиныИПаролиОбъект.Категория = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"LoginsCategory", , Ложь));
	
	ПрограммаТипСтрока		= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "LoginsProgramString", "Булево");
	Если ПрограммаТипСтрока Тогда
		ЛогиныИПаролиОбъект.Программа = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "LoginsProgram", "Строка");
	Иначе	
		ЛогиныИПаролиОбъект.Программа = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
			"LoginsProgram", , Ложь));
	КонецЕсли;	
	
	ЛогиныИПаролиОбъект.Автор = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"LoginsAuthor", , Ложь));
	
	ЛогиныИПаролиОбъект.ГруппаПользователей = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"LoginsUserGroup", , Ложь));
	
	ЛогиныИПаролиОбъект.Комментарий = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "LoginsComment", "Строка");
	ЛогиныИПаролиОбъект.ТипПароля = ОбменМобильноеПриложениеПовтИсп.ПолучитьТипПароляПоПредставлению(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "LoginsPasswordType", "Строка"));
	
	ЛогиныИПаролиОбъект.АвторКорректировки = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"LoginsAuthorCorrections", , Ложь));
	
	ЛогиныИПаролиОбъект.ДатаКорректировки = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "LoginsAdjustmentDate", "Дата");
	ЛогиныИПаролиОбъект.ДатаСоздания = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "LoginsDateOfCreation", "Дата");	
	
	ЛогиныИПаролиОбъект.Записать();
	ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ЛогиныИПаролиСсылка);	
	
КонецПроцедуры	

Процедура ЗаписатьИзXMLЛогиныИПаролиХранилище(Знач СтруктураДанныхОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВладельца	= ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "LoginsStorageOwner", , Истина);
	Владелец		= ОбменМобильноеПриложениеПовтИсп.ПолучитьСсылкуПоТипу("Logins", 
		ПолучитьЗначениеРеквизита(ДанныеВладельца, "ID", "Строка", Истина));
		
	Период	= ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "LoginsStoragePeriod", "Дата");
	Логин	= ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "LoginsStorageLogin", "Строка");
	ПарольХЗ= ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "LoginsStoragePassword", "ХранилищеЗначения");
	
	Попытка
		Пароль = ПарольХЗ.Получить();		
	Исключение
		Пароль = "";
	КонецПопытки;	
		
	ХранилищеДанных				= РегистрыСведений.ЛогиныИПаролиХранилище.СоздатьМенеджерЗаписи();
	ХранилищеДанных.Владелец	= Владелец;
	ХранилищеДанных.Период		= Период;
	ХранилищеДанных.Прочитать();
	
	ХранилищеДанных.Логин		= Логин;
	ХранилищеДанных.Пароль		= Новый ХранилищеЗначения(Пароль, Новый СжатиеДанных(6));
	ХранилищеДанных.ПериодМП	= Период;
	
	Если ХранилищеДанных.Выбран() Тогда
		ХранилищеДанных.Записать(Истина);
	Иначе
		ХранилищеДанных.Владелец	= Владелец;
		ХранилищеДанных.Период		= Период;
		ХранилищеДанных.ПериодМП	= Период;
		ХранилищеДанных.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИзXMLВидРаботы(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ВидРаботыСсылка 	= Справочники.ВидыРабот.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ID", "УникальныйИдентификатор"));
	
	ВидРаботыОбъект 	= ВидРаботыСсылка.ПолучитьОбъект();
		
	Если ВидРаботыОбъект = Неопределено Тогда
		ВидРаботыЭтоГруппа 	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "KindWorkGroup", "Булево");
		Если ВидРаботыЭтоГруппа Тогда
			ВидРаботыОбъект   = Справочники.ВидыРабот.СоздатьГруппу();
		Иначе	
			ВидРаботыОбъект   = Справочники.ВидыРабот.СоздатьЭлемент();
		КонецЕсли;		
		ВидРаботыОбъект.УстановитьСсылкуНового(ВидРаботыСсылка);		
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "KindWorkDataVersion", "Строка", Ложь);
	
	Если ЗначениеЗаполнено(ВерсияДанных) И Не ВидРаботыОбъект.ВерсияДанных = ВерсияДанных Тогда

		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ВидРаботыОбъект.Ссылка);
		ТекстПредупреждения = "warning:" 
		+ СтрШаблон(НСтр("ru = 'Вид работы ""%1"" не был передан, т.к. он был изменен в центральной базе. 
		|Вид работы на данном устройстве заменен версией из центральной базы.'"),
		ВидРаботыОбъект.Наименование);

		ВызватьИсключение ТекстПредупреждения;

	КонецЕсли;
	
	ВидРаботыОбъект.Родитель 	 	= ОбменМобильноеПриложениеПовтИсп.ПолучитьСсылкуПоТипу("KindWork", 
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "KindWorkParent", "Строка", Ложь));	
	ВидРаботыОбъект.Наименование 	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, "KindWorkName", "Строка", Истина);
	
	Если Не ВидРаботыОбъект.ЭтоГруппа Тогда
		ВидРаботыОбъект.ВидВремени = ОбменМобильноеПриложениеПовтИсп.ПолучитьВидВремениПоПредставлению(
			ПолучитьЗначениеРеквизита(ДанныеОбъекта,  "KindWorkTypeTime", "Строка", Ложь));
		ВидРаботыОбъект.РеквизитДопУпорядочивания = ПолучитьЗначениеРеквизита(ДанныеОбъекта,  
			"KindWorkAdditionalArrangement", "Число", Ложь);
			
	КонецЕсли;	
	
	ВидРаботыОбъект.Записать();
	ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ВидРаботыСсылка);
	
КонецПроцедуры

Процедура ЗаписатьИзXMLЕжедневныйОтчет(Знач ДанныеОбъекта, Знач МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ЕжедневныйОтчетСсылка	 = Документы.ЕжедневныйОтчет.ПолучитьСсылку(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"ID", "УникальныйИдентификатор"));
	
	ЕжедневныйОтчетОбъект	 = ЕжедневныйОтчетСсылка.ПолучитьОбъект();	
	
	Если ЕжедневныйОтчетОбъект = Неопределено Тогда
		ЕжедневныйОтчетОбъект = Документы.ЕжедневныйОтчет.СоздатьДокумент();		
		ЕжедневныйОтчетОбъект.УстановитьСсылкуНового(ЕжедневныйОтчетСсылка);
	КонецЕсли;
	
	ВерсияДанных = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DailyReportVersion", "Строка", Ложь);
	Если ЗначениеЗаполнено(ВерсияДанных) И Не ЕжедневныйОтчетОбъект.ВерсияДанных = ВерсияДанных Тогда
		
		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ЕжедневныйОтчетОбъект.Ссылка);
		ТекстПредупреждения = "warning:"
			+ СтрШаблон(НСтр("ru = 'Документ ""Ежедневный отчет"" ""%1"" не был передан, т.к. он был изменен в центральной базе.
			|Документ ""Ежеденвый отчет"" на данном устройстве заменен версией из центральной базы.'"),
			ЕжедневныйОтчетОбъект.Номер);
		
		ВызватьИсключение ТекстПредупреждения;
		
	КонецЕсли;
		
	ЕжедневныйОтчетОбъект.Автор = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"DailyReportAuthor", , Ложь));
		
	ЕжедневныйОтчетОбъект.АвторКорректировки = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"DailyReportAuthorCorrection", , Ложь));
		
	ЕжедневныйОтчетОбъект.ДатаКорректировки	= ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"DailyReportCorrectionDate", "Дата", Ложь);

	ЕжедневныйОтчетОбъект.ДатаНачала = ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"DailyReportStartDate", "Дата", Ложь);

	ЕжедневныйОтчетОбъект.ДатаОкончания = ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"DailyReportEndDate", "Дата", Ложь);
		
	ЕжедневныйОтчетОбъект.ДатаСоздания = ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"DailyReportCreationDate", "Дата", Ложь);

	ЕжедневныйОтчетОбъект.Комментарий = ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"DailyReportComment", "Строка", Ложь);
		
	ЕжедневныйОтчетОбъект.Организация = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"DailyReportOrganization", , Ложь));
		
	ЕжедневныйОтчетОбъект.Подразделение	= ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта,
		"DailyReportSubdivision", , Ложь));

	ЕжедневныйОтчетОбъект.ПоложениеДаты = 
		ОбменМобильноеПриложениеПовтИсп.ПолучитьПоложениеРеквизитаНаФормеПоПредставлению(
			ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DailyReportDatePosition", "Строка", Ложь));
		
	ЕжедневныйОтчетОбъект.Пользователь = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"DailyReportUser", , Ложь));

	ЕжедневныйОтчетОбъект.ПредставлениеДлительности = ПолучитьЗначениеРеквизита(ДанныеОбъекта, 
		"DailyReportDurationView", "Строка", Ложь);
		
	Если Не ЗначениеЗаполнено(ЕжедневныйОтчетОбъект.Дата) Тогда
		ЕжедневныйОтчетОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЕжедневныйОтчетОбъект.Работы.Очистить();
	ТаблицаРаботы = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Works", , Ложь);
	
	Если Не ТаблицаРаботы = Неопределено Тогда
		Для Каждого СтрокаТаблица Из ТаблицаРаботы Цикл
					
			ДанныеСтроки 			 = ПолучитьДанныеСтроки(ТаблицаРаботы, СтрокаТаблица);
			НоваяСтрока  			 = ЕжедневныйОтчетОбъект.Работы.Добавить();			
			НоваяСтрока.ДатаРаботы	 = ПолучитьЗначениеРеквизита(ДанныеСтроки, "DateWork", "Дата", Ложь);			
			НоваяСтрока.Описание	 = ПолучитьЗначениеРеквизита(ДанныеСтроки, "Description", "Строка", Ложь);
			НоваяСтрока.ВидРаботы	 = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, 
				"KindWork", , Ложь));			
			НоваяСтрока.Источник	 = ПолучитьСсылкуСоставногоТипа(ПолучитьЗначениеРеквизита(ДанныеСтроки, 
				"Source", , Ложь));			
			НоваяСтрока.ВремяНачала	 = ПолучитьЗначениеРеквизита(ДанныеСтроки, "StartTime", "Дата", Ложь);
			НоваяСтрока.ВремяОкончания	 = ПолучитьЗначениеРеквизита(ДанныеСтроки, "EndTime", "Дата", Ложь);
			НоваяСтрока.ДлительностьВремя = ПолучитьЗначениеРеквизита(ДанныеСтроки, "DurationTime", "Дата", Ложь);
			НоваяСтрока.Длительность	 = ПолучитьЗначениеРеквизита(ДанныеСтроки, "Duration", "Число", Ложь);			
			
		КонецЦикла;	
	КонецЕсли;
		
	Попытка
		ЕжедневныйОтчетОбъект.Записать(РежимЗаписиДокумента.Проведение);		
	Исключение
		ЕжедневныйОтчетОбъект.Записать(РежимЗаписиДокумента.Запись);				
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ЕжедневныйОтчетОбъект.ВерсияДанных) Тогда
		ОбменМобильноеПриложениеСервер.ВыполнитьРегистрациюЭлементаДанных(ЕжедневныйОтчетОбъект.Ссылка);
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьПротоколИСчетчики(ПараметрыСинхронизации)

	ПараметрыСинхронизации.ВыгруженоОбъектов = ПараметрыСинхронизации.ВыгруженоОбъектов + 1;

КонецПроцедуры

Функция УОбъектаЕстьФайлы(Знач ОбъектСсылка) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаличиеФайлов.ЕстьФайлы КАК ЕстьФайлы
		|ИЗ
		|	РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|ГДЕ
		|	НаличиеФайлов.ОбъектСФайлами = &ОбъектСФайлами";
	
	Запрос.УстановитьПараметр("ОбъектСФайлами", ОбъектСсылка);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ЕстьФайлы;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция УОбъектаЕстьКомментарии(Знач ОбъектСсылка) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Комментарии.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Комментарии КАК Комментарии
		|ГДЕ
		|	НЕ Комментарии.ПометкаУдаления
		|	И Комментарии.ВладелецКомментария = &ВладелецКомментария
		|	И НЕ Комментарии.Приватный";
	
	Запрос.УстановитьПараметр("ВладелецКомментария", ОбъектСсылка);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Следующий();		
	
КонецФункции

#КонецОбласти