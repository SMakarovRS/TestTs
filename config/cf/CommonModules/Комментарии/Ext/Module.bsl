////////////////////////////////////////////////////////////////////////////////
// Работа с комментариями.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получение количества комментариев объекта.
//
// Параметры:
//	ОбъектСсылка - СправочникСсылка, ДокументСсылка - объект владелец комментариев.
//
// Возвращаемое значение:
//	Число - число комментариев.
//
Функция КоличествоКомментариев(Знач ОбъектСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос();	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЗапросКоличества.Количество) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(Комментарии.Ссылка) КАК Количество
		|	ИЗ
		|		Справочник.Комментарии КАК Комментарии
		|	ГДЕ
		|		Комментарии.ВладелецКомментария = &Ссылка
		|		И Комментарии.Приватный = ЛОЖЬ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Комментарии.Ссылка)
		|	ИЗ
		|		Справочник.Комментарии.Адресаты КАК КомментарииАдресаты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Комментарии КАК Комментарии
		|			ПО КомментарииАдресаты.Ссылка = Комментарии.Ссылка
		|	ГДЕ
		|		Комментарии.ВладелецКомментария = &Ссылка
		|		И Комментарии.Приватный = ИСТИНА
		|		И КомментарииАдресаты.Адресат В(&МассивДоступныхАдресатов)) КАК ЗапросКоличества";
		
	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("МассивДоступныхАдресатов", УправлениеITОтделом8УФПовтИсп.ПользовательИЕгоГруппы());
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Количество;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
		
КонецФункции

// Добавление комментария у владельца.
//
// Параметры:
//	ВладелецКомментария - СправочникСсылка.СтатьиБазыЗнаний, ДокументСсылка.Задание -
//		к какому объекту добавить комментарий.
//
// Возвращаемое значение:
//	СправочникСсылка.Комментарии - добавленный комментарий.
//
Функция Добавить(Знач ВладелецКомментария, Знач ПараметрыКомментария) Экспорт
	
	ТекстHTML				= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыКомментария, 
		"ТекстСообщения", "");
	ДатаСообщения			= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыКомментария, 
		"ДатаСообщения", ТекущаяДатаСеанса());
	АвторСообщения			= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыКомментария, 
		"Автор", Справочники.Пользователи.ПустаяСсылка());
	ПриватныйКомментарий	= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыКомментария, 
		"ПриватныйКомментарий", Ложь);
//	УведомлятьНаблюдателей	= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыКомментария, 
//		"УведомлятьНаблюдателей", Истина);
	ИдентификаторСообщения	= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыКомментария, 
		"ИдентификаторСообщения", "");
	ЗаголовокСообщения		= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыКомментария, 
		"ЗаголовокСообщения", "");
	ПриложенныеФайлы		= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыКомментария, 
		"ПриложенныеФайлы", Новый Массив);
	
//	ДобавленоРегламентнымЗаданием 	= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыКомментария,
//		"ДобавленоРегламентнымЗаданием", Ложь);
	УчетнаяЗаписьЭлектроннойПочты 	= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыКомментария, 
		"УчетнаяЗаписьЭлектроннойПочты", Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка());
	КомментарийРодитель             = УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыКомментария, 
		"КомментарийРодитель", Справочники.Комментарии.ПустаяСсылка());
	
	НеобходимостьЗаписиЗадания		= Ложь;
	Если ТипЗнч(ВладелецКомментария)= Тип("ДокументСсылка.Задание") Тогда
		Объект						= ВладелецКомментария.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(ВладелецКомментария)= Тип("ДокументОбъект.Задание") Тогда
		Объект						= ВладелецКомментария;
	Иначе
		Объект						= Неопределено;
	КонецЕсли;
	
	Если Объект <> Неопределено Тогда
	                                                              
		#Область УстановкаЗакрытияЗадачиИзТекста
		
		// Проверяем надо ли закрыть сообщение.
		МассивМаркеровВыполнения 	= УправлениеITОтделом8УФПовтИсп.МассивМаркеровВыполнения();
		ТекстНижнийРегистр 		= НРег(ТекстHTML);
		ЗакрытьЗадание			= Ложь;
		Для Каждого Маркер Из МассивМаркеровВыполнения Цикл
			Позиция = СтрНайти(ТекстНижнийРегистр, НРег(Маркер));
			Если Позиция > 0 Тогда
				// Удаляем строку с маркером закрытия задания.
				ТекстHTML = Лев(ТекстHTML, Позиция - 1) + Сред(ТекстHTML, Позиция + СтрДлина(Маркер));
				ЗакрытьЗадание = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		Если ЗакрытьЗадание И ЗначениеЗаполнено(Объект.Процесс) Тогда
			
			Если ЗначениеЗаполнено(Объект.Процесс.АвтоматическоеВыполнениеЗаданияЭтап) Тогда
				Объект.ТекущийЭтап		= Объект.Процесс.АвтоматическоеВыполнениеЗаданияЭтап;			
			КонецЕсли;
			Объект.Выполнено			= Истина;
			Объект.ПроцентВыполнения	= 100;
			
			ЗаголовокСообщения 				= ЗаголовокСообщения + " " + НСтр("ru = 'Задача выполнена.'");
			НеобходимостьЗаписиЗадания		= Истина;
			
		КонецЕсли;
	
		#КонецОбласти
		
	#Область ПовторноеОткрытие 
	
	// Если сообщение не от текущего исполнителя задания, то задание не выполнено.
	Если НЕ ЗаданияСервер.ПроверитьТекущийИсполнительЗадания(Объект, АвторСообщения) Тогда

		Если Объект.Выполнено = Истина И ЗакрытьЗадание = Ложь И (Объект.Завершено = ЛОЖЬ 
			ИЛИ УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИзменятьЗавершенныеЗадания")) Тогда
			
			Объект.Выполнено 			= Ложь;
			Объект.Завершено 			= Ложь;
			Объект.ПроцентВыполнения 	= 0;	
			Объект.ОценкаВыполнения 	= Справочники.ОценкиЗаданий.ПовторноеОткрытие;
			Объект.ТекущийЭтап			= Справочники.ЭтапыПроцессов.Возобновлено;
			ЗаголовокСообщения 			= ЗаголовокСообщения + " " + НСтр("ru = 'Задача повторно открыта.'");
			НеобходимостьЗаписиЗадания	= Истина;
						
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// Получаем записываемый UID
		UID 		= Новый УникальныйИдентификатор();
		НоваяСсылка = Справочники.Комментарии.ПолучитьСсылку(UID);
		
		// Добавляем вложения.
		Для Каждого Файл Из ПриложенныеФайлы Цикл
			
			Если ТипЗнч(Файл) = Тип("Структура") Тогда
				
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("Автор", 						Файл.Автор);
				ПараметрыФайла.Вставить("ВладелецФайлов", 				НоваяСсылка);
				ПараметрыФайла.Вставить("ИмяБезРасширения", 			Файл.ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", 			Файл.РасширениеБезТочки);
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	ТекущаяУниверсальнаяДата());
				РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Файл.Адрес);
				УдалитьИзВременногоХранилища(Файл.Адрес);
				
			Иначе
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПолучатьСсылкуНаДвоичныеДанные", Истина);
				ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл.Ссылка, ДополнительныеПараметры);
				
				ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
				ПараметрыФайла.ВладелецФайлов = НоваяСсылка;
				ПараметрыФайла.ИмяБезРасширения = ДанныеФайла.Наименование;
				ПараметрыФайла.РасширениеБезТочки = ДанныеФайла.Расширение;
				ПараметрыФайла.ВремяИзмененияУниверсальное = Неопределено;
				
				ДобавленныйФайлСсылка = РаботаСФайлами.ДобавитьФайл(
					ПараметрыФайла,
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
					"");
				
                Если НЕ ПустаяСтрока(Файл.ИДФайлаЭлектронногоПисьма) Тогда
                    ДобавленныйФайл 							= ДобавленныйФайлСсылка.ПолучитьОбъект();
                    ДобавленныйФайл.ИДФайлаЭлектронногоПисьма 	= Файл.ИДФайлаЭлектронногоПисьма;
                    ДобавленныйФайл.Записать();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавляем сообщение.
		НовоеСообщение							= Справочники.Комментарии.СоздатьЭлемент();
		НовоеСообщение.УстановитьСсылкуНового(НоваяСсылка);
		НовоеСообщение.ВладелецКомментария		= ВладелецКомментария;
		НовоеСообщение.Автор					= АвторСообщения;
		НовоеСообщение.Период					= ДатаСообщения;
		НовоеСообщение.Приватный				= ПриватныйКомментарий;
		НовоеСообщение.ИдентификаторСообщения	= ИдентификаторСообщения;
		НовоеСообщение.Заголовок				= СокрЛП(ЗаголовокСообщения);
		НовоеСообщение.ТекстHTML				= ТекстHTML;
		НовоеСообщение.Текст					= Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекстHTML);
		НовоеСообщение.УчетнаяЗаписьЭлектроннойПочты = УчетнаяЗаписьЭлектроннойПочты;
		
		Если ТипЗнч(ВладелецКомментария) = Тип("ДокументСсылка.Задание") Тогда
			МассивНеУведомляемых = Новый Массив;
			МассивНеУведомляемых.Добавить(АвторСообщения);
			НовоеСообщение.ДополнительныеСвойства.Вставить("МассивНеУведомляемых", МассивНеУведомляемых);			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КомментарийРодитель) Тогда
			Если КомментарийРодитель.Приватный = Истина Тогда
				НовоеСообщение.Приватный = Истина;
				Для Каждого СтрокаАдресат Из КомментарийРодитель.Адресаты Цикл
					НоваяСтрока = НовоеСообщение.Адресаты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАдресат); 
				КонецЦикла;					
			КонецЕсли;	
		КонецЕсли;	
		
		НовоеСообщение.Записать();	
		
		Если ЗначениеЗаполнено(КомментарийРодитель) Тогда
			РегистрыСведений.СвязьКомментариев.УстановитьСвязь(КомментарийРодитель, НовоеСообщение.Ссылка);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
        
        ОтменитьТранзакцию();
		НовоеСообщение = Неопределено;		                                                                     
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка добавления комментария'"), УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(НСтр("ru = 'Ошибка при добавлении комментария: %1'"), 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		Возврат НовоеСообщение;
			
	КонецПопытки;
		
	// Работа с комментарием в соответствии 
	Если НеобходимостьЗаписиЗадания = Истина И Объект <> Неопределено Тогда
				
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки реквизитов задания при добавлении комментария'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				СтрШаблон(НСтр("ru = 'Ошибка записи: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат НовоеСообщение.Ссылка;
	
КонецФункции

// Возвращает последний комментарий по владельцу.
//
// Параметры:
//	ОбъектВладелецСсылка - Ссылка - произвольная ссылка владелец комментариев.
//
// Возвращаемое значение:
//	СправочникСсылка.Комментарии - результат.
//
Функция ПоследнийКомментарий(Знач ОбъектВладелецСсылка) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Комментарии.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Комментарии КАК Комментарии
		|ГДЕ
		|	Комментарии.ВладелецКомментария = &ОбъектСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Комментарии.Код УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектВладелецСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Комментарии.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает комментарии, которые доступны указанному пользователю.
//
// Параметры:
//	ОбъектСсылка - ДокументСсылка.Задание - исхоный владелец комментариев.
//	Пользователь - СправочникСсылка.Пользователь - пользователь.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с доступными комментариями.
//
Функция МассивКомментариевДоступныхПользователю(Знач ОбъектСсылка, Знач Пользователь) Экспорт
	
	// Массив комментариев.
	ЗапросКомментарии 		= Новый Запрос;
	ЗапросКомментарии.Текст = ТекстЗапросаКомментариев();
	
	// Установка параметров.
	ЗапросКомментарии.УстановитьПараметр("Ссылка", ОбъектСсылка);	
	ЗапросКомментарии.УстановитьПараметр("МассивДоступныхАдресатов", 
		УправлениеITОтделом8УФПовтИсп.ПользовательИЕгоГруппы(Пользователь));
	ЗапросКомментарии.УстановитьПараметр("ИспользоватьОтборКомментариев", Ложь);	
	ЗапросКомментарии.УстановитьПараметр("МассивВыводимыхКомментариев", Новый Массив);
	
	МассивРезультатов = ЗапросКомментарии.ВыполнитьПакет();
	
	Массив = Новый Массив;
	
	ВыборкаКомментариев = МассивРезультатов[2].Выбрать();
	ВыборкаФайлов = МассивРезультатов[3].Выбрать();
	Пока ВыборкаКомментариев.Следующий() Цикл
		
		Структура = Новый Структура();
		Структура.Вставить("Родитель", 	ВыборкаКомментариев.Родитель);
		Структура.Вставить("Ссылка", 	ВыборкаКомментариев.Ссылка);
		Структура.Вставить("Автор", 	ВыборкаКомментариев.Автор);
		Структура.Вставить("АвторПредставление", ВыборкаКомментариев.АвторПредставление);
		Структура.Вставить("Период", 	ВыборкаКомментариев.Период);
		Структура.Вставить("Приватный", ВыборкаКомментариев.Приватный);
		Структура.Вставить("ТекстHTML", ВыборкаКомментариев.ТекстHTML);
		Структура.Вставить("Текст", 	ВыборкаКомментариев.Текст);
		Структура.Вставить("Заголовок", ВыборкаКомментариев.Заголовок);
		
		МассивФайлов = Новый  Массив;
		ВыборкаФайлов.Сбросить();
		Пока ВыборкаФайлов.Следующий() Цикл
			
			Если ВыборкаФайлов.ВладелецФайла = ВыборкаКомментариев.Ссылка Тогда
				СтруктураФайла = Новый Структура();
				СтруктураФайла.Вставить("Ссылка", 			ВыборкаФайлов.Ссылка);
				СтруктураФайла.Вставить("ВладелецФайла", 	ВыборкаФайлов.ВладелецФайла);
				СтруктураФайла.Вставить("Наименование", 	ВыборкаФайлов.Наименование);
				СтруктураФайла.Вставить("Размер", 			ВыборкаФайлов.Размер);
				СтруктураФайла.Вставить("Расширение", 		ВыборкаФайлов.Расширение);
				СтруктураФайла.Вставить("ИДФайлаЭлектронногоПисьма", ВыборкаФайлов.ИДФайлаЭлектронногоПисьма);
				
				МассивФайлов.Добавить(СтруктураФайла);
			КонецЕсли;
			
		КонецЦикла;
		
		Структура.Вставить("Файлы", МассивФайлов);
		
		Массив.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Возвращает текст для запроса комментариев.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка - результат запроса.
//
Функция ТекстЗапросаКомментариев() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Комментарии.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Комментарии
		|ИЗ
		|	Справочник.Комментарии КАК Комментарии
		|ГДЕ
		|	Комментарии.ВладелецКомментария = &Ссылка
		|	И Комментарии.Приватный = ЛОЖЬ
		|	И ВЫБОР
		|		КОГДА &ИспользоватьОтборКомментариев
		|			ТОГДА Комментарии.Ссылка В (&МассивВыводимыхКомментариев)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Комментарии.Ссылка
		|ИЗ
		|	Справочник.Комментарии.Адресаты КАК КомментарииАдресаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Комментарии КАК Комментарии
		|		ПО КомментарииАдресаты.Ссылка = Комментарии.Ссылка
		|ГДЕ
		|	Комментарии.ВладелецКомментария = &Ссылка
		|	И Комментарии.Приватный = ИСТИНА
		|	И КомментарииАдресаты.Адресат В (&МассивДоступныхАдресатов)
		|	И ВЫБОР
		|		КОГДА &ИспользоватьОтборКомментариев
		|			ТОГДА Комментарии.Ссылка В (&МассивВыводимыхКомментариев)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Комментарии.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_РазличныеКомментарии
		|ИЗ
		|	ВТ_Комментарии КАК ВТ_Комментарии
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СвязьКомментариев.Родитель, ЗНАЧЕНИЕ(Справочник.Комментарии.ПустаяСсылка)) КАК Родитель,
		|	ВТ_РазличныеКомментарии.Ссылка КАК Ссылка,
		|	Комментарии.Автор КАК Автор,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Комментарии.Автор) КАК АвторПредставление,
		|	Комментарии.Период КАК Период,
		|	Комментарии.Приватный КАК Приватный,
		|	Комментарии.ТекстHTML КАК ТекстHTML,
		|	Комментарии.Текст КАК Текст,
		|	Комментарии.Заголовок КАК Заголовок,
		|	СвязьКомментариев.Родитель.ВладелецКомментария КАК ВладелецКомментария
		|ИЗ
		|	ВТ_РазличныеКомментарии КАК ВТ_РазличныеКомментарии
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязьКомментариев КАК СвязьКомментариев
		|		ПО ВТ_РазличныеКомментарии.Ссылка = СвязьКомментариев.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Комментарии КАК Комментарии
		|		ПО ВТ_РазличныеКомментарии.Ссылка = Комментарии.Ссылка
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КомментарииПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	КомментарииПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	КомментарииПрисоединенныеФайлы.Наименование КАК Наименование,
		|	КомментарииПрисоединенныеФайлы.Размер КАК Размер,
		|	КомментарииПрисоединенныеФайлы.Расширение КАК Расширение,
		|	КомментарииПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма
		|ИЗ
		|	Справочник.КомментарииПрисоединенныеФайлы КАК КомментарииПрисоединенныеФайлы
		|ГДЕ
		|	КомментарииПрисоединенныеФайлы.ВладелецФайла В
		|		(ВЫБРАТЬ
		|			ВТ_РазличныеКомментарии.Ссылка КАК Ссылка
		|		ИЗ
		|			ВТ_РазличныеКомментарии КАК ВТ_РазличныеКомментарии)
		|	И НЕ КомментарииПрисоединенныеФайлы.ПометкаУдаления
		|	И ВЫБОР
		|		КОГДА &ИспользоватьОтборКомментариев
		|			ТОГДА КомментарииПрисоединенныеФайлы.ВладелецФайла В (&МассивВыводимыхКомментариев)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает массив родителей комментариев.
//
// Параметры:
//	Комментарий - СправочникСсылка.Комментрии - исходное дело.
//	ДобавитьИсходныйКомментарий - Булево - включать в результат исходный комментарий.
//
// Возвращаемое значение:
//	Массив - массив родителей.
//
Функция ПолучитьРодительскиеКомментарии(Знач ИсходныйКомментарий, Знач ДобавитьИсходныйКомментарий = Истина) Экспорт
	
	Массив = Новый Массив;	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязьКомментариев.Родитель КАК Родитель
		|ИЗ
		|	РегистрСведений.СвязьКомментариев КАК СвязьКомментариев
		|ГДЕ
		|	СвязьКомментариев.Ссылка = &Комментарий"; 

	Если ДобавитьИсходныйКомментарий Тогда
		Массив.Добавить(ИсходныйКомментарий);
	КонецЕсли;
	
	Пока Истина Цикл 
	    Запрос.УстановитьПараметр("Комментарий", ИсходныйКомментарий); 
	    Результат = Запрос.Выполнить(); 
	    Если Результат.Пустой() Тогда 
	        Прервать; 
	    КонецЕсли; 
	    Выборка = Результат.Выбрать(); 
		Если Выборка.Следующий() Тогда
			ИсходныйКомментарий = Выборка.Родитель; 
		    Если НЕ ЗначениеЗаполнено(ИсходныйКомментарий) Тогда 
		        Прервать; 
		    КонецЕсли; 
        	Массив.Добавить(ИсходныйКомментарий);
		Иначе
			Прервать;
		КонецЕсли;

	КонецЦикла;	
	
	Возврат Массив;
	
КонецФункции

// Формирует текст HTML блока "Комментарии" документа "Задание".
//
// Параметры
//	ОбъектСсылка - Ссылка - ссылка на объект владелец.
//	ИдентификаторФормы - УникальныйИдентификатор - если открыто из формы, необходимо передать ИД формы,
//		чтобы отображались картинки.
//	ТолькоПросмотр - Булево - выводить или нет кнопки добавления комментариев.
//	ШапкаПодвалHTML - Булево - выводить ли шапку и подвал HTML-документа.
//	КнопкиДобавленияОбновления - Булево - выводить ли кнопки "Добавить", "Обновить" в конце или начале текста.
//	ВыводимыеКомментарии - Массив - массив комментариев, которые необходимо вывести. Если Неопределено, то вывод всех.
//
// Возвращаемое значение
//	Строка - текст HTML для вывода.
//
Функция ПолучитьHTML(Знач ОбъектСсылка, ИдентификаторФормы = Неопределено, Знач ТолькоПросмотр = Ложь,
	Знач ШапкаПодвалHTML = Истина, Знач КнопкиДобавленияОбновления = Истина, 
	Знач ВыводимыеКомментарии = Неопределено) Экспорт
	
	// Настройки сортировки.
	УпорядочиваниеКомментариевВЗадании = 
		УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеНастройки("УпорядочиваниеКомментариевВЗадании");
	Если НЕ ЗначениеЗаполнено(УпорядочиваниеКомментариевВЗадании) Тогда
		УпорядочиваниеКомментариевВЗадании = Перечисления.УпорядочиваниеКомментариевВЗадании.ПоДатеПоВозрастанию;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Пользователь", 		Пользователи.ТекущийПользователь());
	Параметры.Вставить("ТолькоПросмотр", 	ТолькоПросмотр);
	Если УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИспользоватьИзображенияПользователейВКомментариях") Тогда
		Параметры.Вставить("ОтображатьИзображенияАвторов", Истина);
	КонецЕсли;
	
	// Если объект новый, не делаем запросы.
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		
		// Массив комментариев.
		ЗапросКомментарии = Новый Запрос;
		ЗапросКомментарии.УстановитьПараметр("Ссылка", ОбъектСсылка);	
		ЗапросКомментарии.Текст = ТекстЗапросаКомментариев();
		
		// Пользователь и все его группы.
		ЗапросКомментарии.УстановитьПараметр("МассивДоступныхАдресатов",
			УправлениеITОтделом8УФПовтИсп.ПользовательИЕгоГруппы());
		
		// Если выводим не все комментарии, а какую-то часть из них.
		ЗапросКомментарии.УстановитьПараметр("ИспользоватьОтборКомментариев", ВыводимыеКомментарии <> Неопределено);
		
		МассивВыводимыхКомментариев = Новый Массив;
		Если ВыводимыеКомментарии <> Неопределено Тогда
			Для Каждого Коммент Из ВыводимыеКомментарии Цикл
				Массив = ПолучитьРодительскиеКомментарии(Коммент);
				Для Каждого Элемент2 Из Массив Цикл
					МассивВыводимыхКомментариев.Добавить(Элемент2);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		ЗапросКомментарии.УстановитьПараметр("МассивВыводимыхКомментариев", МассивВыводимыхКомментариев);
		
		МассивРезультатов 	= ЗапросКомментарии.ВыполнитьПакет();
		
		ТаблицаКомментариев = МассивРезультатов[2].Выгрузить();
		ТаблицаКомментариев.Индексы.Добавить("Родитель");	
		
		Для Каждого Строка Из ТаблицаКомментариев Цикл
			Если Строка.ВладелецКомментария <> ОбъектСсылка Тогда 
				Строка.Родитель = Справочники.Комментарии.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		МассивКомментариев	= ТаблицаКомментариевВИерархиюМассивов(ТаблицаКомментариев,, 
			УпорядочиваниеКомментариевВЗадании);
		Параметры.Вставить("ПрисоединенныеФайлы", 	МассивРезультатов[3].Выгрузить());		
		
	Иначе
		МассивКомментариев = "";
	КонецЕсли;
	
	Идентификатор 		= Строка(ОбъектСсылка.УникальныйИдентификатор());
	
	АдресСсылкиСоздать	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_create("comment",
		Новый Структура("article", Идентификатор));
	АдресСсылкиОбновить	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("comments",
		Новый Структура("article", Идентификатор));
	СтрокаКнопок		= ?(КнопкиДобавленияОбновления = Истина,
		ОформлениеКнопокДобавленияИОбновления(АдресСсылкиСоздать, АдресСсылкиОбновить), "");
	
	Если ШапкаПодвалHTML = Истина Тогда
		ТаблицаСтилей 	= БазаЗнанийCSSКлиентСервер.ПолучитьТаблицуСтилей();
		
		МакетСкрипта	= ПолучитьОбщийМакет("kdb_script");
		ТекстСкрипта	= МакетСкрипта.ПолучитьТекст();
		ТаблицаСкриптов = "<script type='text/javascript'>" + ТекстСкрипта + "</script>";
		
		Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Задание") Тогда
			Тема	= ОбъектСсылка.Тема;
		Иначе
			Тема	= Строка(ОбъектСсылка);
		КонецЕсли;
		
		ТекстHTML = 
			"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN""
			|	""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
			|<html xmlns=""http://www.w3.org/1999/xhtml"">
			|<head>
			|	<title>" + Тема + "</title>	
			|	" + ТаблицаСтилей + "
			|	" + ТаблицаСкриптов + "
			|</head>
			|<script>function scrollBottom(){document.body.scrollTop=document.body.scrollHeight;}</script>		
			|<body onload=""scrollBottom()"" onscroll=""fonscroll()"">
			|<div id='comments' style='margin: 0 5px 0 5px;'>
			|	[[МассивКомментариев]]
			|</div>
			|<div class='scrollvalue' id='scrollpos'>0</div>
			|</body>
			|</html>";		
	Иначе
		ТекстHTML = "[[МассивКомментариев]]";
	КонецЕсли;
	
	Если УпорядочиваниеКомментариевВЗадании = Перечисления.УпорядочиваниеКомментариевВЗадании.ПоДатеПоУбыванию Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, " onload=""scrollBottom()""", "");
		ТекстHTML = СтрЗаменить(ТекстHTML, "[[МассивКомментариев]]", СтрокаКнопок + "[[МассивКомментариев]]");
	Иначе
		ТекстHTML = СтрЗаменить(ТекстHTML, "[[МассивКомментариев]]", "[[МассивКомментариев]]" + СтрокаКнопок);
	КонецЕсли;	
	
	Если ТипЗнч(МассивКомментариев) <> Тип("Массив") Тогда
		ТекстHTML_комментарии = "";
	ИначеЕсли МассивКомментариев.Количество() = 0 Тогда
		ТекстHTML_комментарии = "";
	Иначе		
		АдресаКартинок        = Новый Структура;
		АдресаКартинок.Вставить("Пользователь", БиблиотекаКартинок.БазаЗнанийПользователь);
		ТекстHTML_комментарии = ПолучитьHTML_Комментарии_ПоМассиву(АдресаКартинок, МассивКомментариев, Параметры, 0);
	КонецЕсли;
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "[[МассивКомментариев]]", ТекстHTML_комментарии);
		
	Возврат ТекстHTML;
	
КонецФункции

// Формирует текст HTML блока "Комментарии" из блока "Статья" базы знаний.
//
// Параметры:
//	АдресаКартинок - Структура.
//	ДанныеСтатьи - Структура.
//  Параметры - Структура - дополнительные параметры.
//
// Возвращаемое значение:
//	Строка.
//
Функция ПолучитьHTML_Комментарии(АдресаКартинок, ДанныеСтатьи, Параметры) Экспорт
	
	// Вложения.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КомментарииПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	КомментарииПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	КомментарииПрисоединенныеФайлы.Наименование КАК Наименование,
		|	КомментарииПрисоединенныеФайлы.Размер КАК Размер,
		|	КомментарииПрисоединенныеФайлы.Расширение КАК Расширение,
		|	КомментарииПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма
		|ИЗ
		|	Справочник.КомментарииПрисоединенныеФайлы КАК КомментарииПрисоединенныеФайлы
		|ГДЕ
		|	КомментарииПрисоединенныеФайлы.ВладелецФайла В
		|			(ВЫБРАТЬ
		|				Комментарии.Ссылка КАК Ссылка
		|			ИЗ
		|				Справочник.Комментарии КАК Комментарии
		|			ГДЕ
		|				Комментарии.ВладелецКомментария = &ВладелецКомментария)
		|	И НЕ КомментарииПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецКомментария", ДанныеСтатьи.Ссылка);
	Параметры.Вставить("ПрисоединенныеФайлы", Запрос.Выполнить().Выгрузить());
	
	ТекПользователь	= Пользователи.ТекущийПользователь();
	Параметры.Вставить("Пользователь", ТекПользователь);
	Если УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИспользоватьИзображенияПользователейВКомментариях") Тогда
		Параметры.Вставить("ОтображатьИзображенияАвторов", 	Истина);
	КонецЕсли;
	
	Идентификатор = Строка(ДанныеСтатьи.Ссылка.УникальныйИдентификатор());
	
	АдресСсылкиСоздать	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_create("comment",
		Новый Структура("article", Идентификатор));
	АдресСсылкиОбновить	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_refresh("comments",
		Новый Структура("article", Идентификатор));
	
	ТекстHTML = 
		"<div id='comments'>
		|	<div class='h1'>" + ОформлениеКнопокДобавленияИОбновления(АдресСсылкиСоздать, АдресСсылкиОбновить) + "
		|		" + НСтр("ru = 'Комментарии'") + "
		|	</div>
		|	[[МассивКомментариев]]
		|</div>";
	
	МассивКомментарии = ДанныеСтатьи.Комментарии;
	Если ТипЗнч(МассивКомментарии) <> Тип("Массив") Тогда
		ТекстHTML_комментарии = "";
	ИначеЕсли МассивКомментарии.Количество() = 0 Тогда
		ТекстHTML_комментарии = "";
	Иначе 
		ТекстHTML_комментарии = ПолучитьHTML_Комментарии_ПоМассиву(АдресаКартинок, МассивКомментарии, Параметры, 0);
	КонецЕсли;
		
	// Устанавливаем комментарии
	ТекстHTML = СтрЗаменить(ТекстHTML, "[[МассивКомментариев]]", ТекстHTML_комментарии);
	
	Возврат ТекстHTML;
	
КонецФункции

// Получает вложения комментария с пустым ИД.
//
// Параметры:
//  КомментарийСсылка  - СправочникСсылка.Комментарии,
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица с информацией о вложениях с пустым ИД.
//
Функция ПолучитьВложенияКомментарияСПустымИД(Знач КомментарийСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомментарииПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	КомментарииПрисоединенныеФайлы.Наименование КАК Наименование,
		|	КомментарииПрисоединенныеФайлы.Размер КАК Размер,
		|	КомментарииПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма,
		|	КомментарииПрисоединенныеФайлы.Расширение КАК Расширение
		|ИЗ
		|	Справочник.КомментарииПрисоединенныеФайлы КАК КомментарииПрисоединенныеФайлы
		|ГДЕ
		|	КомментарииПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И КомментарииПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма = """"
		|	И НЕ КомментарииПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", КомментарийСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает авто размер файла в формате строки.
//
// Параметры:
//	РазмерВБайтах - Число - размер файла.
//
// Возвращаемое значение:
//	Строка - результирующая строка с размером.
//
Функция АвтоРазмерФайла(Знач РазмерВБайтах) Экспорт
	
	мЧисло 			= 0;
	мПостфикс 		= "";
	Если РазмерВБайтах < 1024 Тогда
		мЧисло 		= РазмерВБайтах;
		мПостфикс 	= НСтр("ru = 'байт'");
	ИначеЕсли РазмерВБайтах < 1048576 Тогда
		мЧисло 		= РазмерВБайтах / 1024;
		мПостфикс 	= НСтр("ru = 'Кб'");
	ИначеЕсли РазмерВБайтах < 1073741824 Тогда
		мЧисло 		= РазмерВБайтах / 1048576;
		мПостфикс 	= НСтр("ru = 'Мб'");
	ИначеЕсли РазмерВБайтах < 1099511627776 Тогда
		мЧисло 		= РазмерВБайтах / 1073741824;
		мПостфикс 	= НСтр("ru = 'Гб'");
	Иначе
		мЧисло 		= РазмерВБайтах / 1099511627776;
		мПостфикс 	= НСтр("ru = 'Тб'");		
	КонецЕсли;
	
	// Удаляем последние нули, если они есть.
	мЧислоСтрокой 	= Формат(мЧисло, "ЧДЦ=2; ЧРД=,; ЧН=0");
	Если СтрДлина(мЧислоСтрокой) > 3 Тогда
		Если Прав(мЧислоСтрокой, 3) = ",00" Тогда
			мЧислоСтрокой = Лев(мЧислоСтрокой, СтрДлина(мЧислоСтрокой) - 3); 
		КонецЕсли;
	КонецЕсли;
	
	Возврат мЧислоСтрокой + " " + мПостфикс;
	
КонецФункции

// Удаляет все вложения комментария.
//
// Параметры:
//	Комментарий - СправочникСсылка.Комментарии
//
Процедура УдалитьПрисоединенныеФайлыКомментария(Знач Комментарий) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КомментарииПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КомментарииПрисоединенныеФайлы КАК КомментарииПрисоединенныеФайлы
		|ГДЕ
		|	КомментарииПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", Комментарий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			Объект.Удалить();
		Исключение
			Объект.УстановитьПометкуУдаления(Истина);
		КонецПопытки;
		
	КонецЦикла;
		             
КонецПроцедуры

// Выводит по переданному нику его цвет.
//
// Параметры:
//	Ник - Строка - текстовая строка с именем.
//
// Возвращаемое значение:
//	Строка - hex-строка вида #00bbaa;
//
Функция HexЦветНика(Знач Ник) Экспорт
	
	Если ПустаяСтрока(Ник) Тогда
		Возврат "#000000";
	КонецЕсли;
	
	Хеш = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеш.Добавить(Ник);
	ЧислоНика = Хеш.ХешСумма;
	
	Массив = Новый Массив;
	Массив.Добавить("000000");
	Массив.Добавить("000033");
	Массив.Добавить("000066");
	Массив.Добавить("000099");
	Массив.Добавить("0000CC");
	Массив.Добавить("37A1DE");
	Массив.Добавить("8544DD");
	Массив.Добавить("D6671B");
	Массив.Добавить("8544D6");
	Массив.Добавить("2896BB");
	Массив.Добавить("3300CC");
	Массив.Добавить("330066");
	Массив.Добавить("330099");
	Массив.Добавить("990066");
	Массив.Добавить("990033");
	Массив.Добавить("990099");
	Массив.Добавить("CC0000");
	Массив.Добавить("CC0066");
	Массив.Добавить("CC0099");
	Массив.Добавить("00bfff");
	Массив.Добавить("1e90ff");
	Массив.Добавить("20b2aa");
	Массив.Добавить("228b22");
	Массив.Добавить("2e8b57");
	Массив.Добавить("2f4f4f");
	Массив.Добавить("32cd32");
	Массив.Добавить("3cb371");
	Массив.Добавить("4169e1");
	Массив.Добавить("0033FF");
	Массив.Добавить("483d8b");
	Массив.Добавить("4b0082");
	Массив.Добавить("696969");
	Массив.Добавить("708090");
	Массив.Добавить("800080");
	Массив.Добавить("4682b4");
	Массив.Добавить("993300");
	Массив.Добавить("0033CC");
	Массив.Добавить("009966");
	Массив.Добавить("666666");
	Массив.Добавить("64ca64");
	Массив.Добавить("FF3366");
	Массив.Добавить("997FF4");
	Массив.Добавить("461D64");
	Массив.Добавить("8AADFB");
	Массив.Добавить("AF928D");
	Массив.Добавить("83C352");
	Массив.Добавить("6994C4");
	Массив.Добавить("F38B3F");
	Массив.Добавить("B3554E");

	Попытка
		Результат = "#" + Массив[ЧислоНика % Массив.Количество()];
	Исключение
		Результат = "#000000";
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Подписка на событие.
//
// Параметры:
//	Источник - ДокументСсылка
//	Отказ - Булево
//
Процедура ПередЗаписиВладельцаКомментарияДокумента(Источник, Отказ) Экспорт
	
	ПроверкаПометкиУдаленияКомментариев(Источник, Отказ);
		
КонецПроцедуры

// Подписка на событие.
//
// Параметры:
//	Источник - ДокументСсылка
//	Отказ - Булево
//
Процедура ПередЗаписьюВладельцаКомментарияСправочника(Источник, Отказ) Экспорт
	
	ПроверкаПометкиУдаленияКомментариев(Источник, Отказ);
	
КонецПроцедуры

// Последний обычный комментарий.
//
// Параметры:
//	ВладелецКомментария - СправочникСсылка.СтатьяБазыЗнаний, ДокументСсылка.Задание - владелец.
//
// Возвращаемое значение:
//	Структура -
//		* ПоследнийОбычныйКомментарийHTML
//		* ПоследнийОбычныйКомментарийТекст
//		* ПоследнийОбычныйКомментарийСсылка
//
Функция ПоследнийОбычныйКомментарий(Знач ВладелецКомментария) Экспорт
	
	Если ТипЗнч(ВладелецКомментария) = Тип("ДокументОбъект.Задание") Тогда
		ВладелецКомментарияСсылка = ВладелецКомментария.Ссылка;
	ИначеЕсли ТипЗнч(ВладелецКомментария) = Тип("ДокументСсылка.Задание") Тогда
		ВладелецКомментарияСсылка = ВладелецКомментария;
	КонецЕсли;	
	
	Результат	= Новый Структура("ПоследнийОбычныйКомментарийHTML, ПоследнийОбычныйКомментарийТекст," 
		+ "ПоследнийОбычныйКомментарийСсылка", "", "",	Справочники.Комментарии.ПустаяСсылка());
	КомментарийСсылка = Справочники.Комментарии.ПустаяСсылка();
	Запрос		= Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Комментарии.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Комментарии КАК Комментарии
		|ГДЕ
		|	Комментарии.ВладелецКомментария = &ОбъектСсылка
		|	И НЕ Комментарии.Приватный
		|
		|УПОРЯДОЧИТЬ ПО
		|	Комментарии.Код УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектСсылка", ВладелецКомментарияСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КомментарийСсылка = Выборка.Ссылка;
	Иначе
		Возврат Результат;
	КонецЕсли;	
	
	РезультатHTML = КомментарийСсылка.ТекстHTML;
	
	// Добавим тег HTML если он отсутствует. Такие письма могут приходить к примеру с Gmail. 	
	Если СтрЧислоВхождений(НРег(РезультатHTML), "<html") = 0 Тогда
		Если СтрЧислоВхождений(НРег(РезультатHTML), "<body") = 0 Тогда
			РезультатHTML = "<body>" + РезультатHTML + "</body>"
		КонецЕсли;
		РезультатHTML = "<html>" + РезультатHTML + "</html>"
	КонецЕсли;	
	
	Результат.Вставить("ПоследнийОбычныйКомментарийHTML",
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(РезультатHTML)); 
	
	Попытка
		РезультатТекст = Взаимодействия.ПолучитьОбычныйТекстИзHTML(РезультатHTML);
	Исключение
		РезультатТекст = "";
	КонецПопытки;
	
	Результат.Вставить("ПоследнийОбычныйКомментарийТекст", РезультатТекст);   
	Результат.Вставить("ПоследнийОбычныйКомментарийСсылка", КомментарийСсылка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу всех контактов, связанных с EMail.
//
// Параметры:
//  Адрес - Строка - адрес электронной почты для поиска.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений, которая содержит информацию о контактах.
//
Функция ВзаимодействияПолучитьВсеКонтактыПоEmail(Адрес) Экспорт 
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ВзаимодействияСформироватьТекстЗапросаДляПоискаПоEmail(Ложь);
	
	Запрос.УстановитьПараметр("Адрес", Адрес);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает изображение по переданному автору.
//
// Параметры (название, тип, дифференцированное значение)
//	Автор - автор сообщения
//
// Возвращаемое значение: 
//	Картинка - искомая картинка.
//
Функция ПолучитьИзображениеКонтакта(Знач АвторКомментария) Экспорт
		
	Если ЗначениеЗаполнено(АвторКомментария) Тогда
		
		мТипАвтораКомментария = ТипЗнч(АвторКомментария);
		
		Если мТипАвтораКомментария = Тип("СправочникСсылка.Пользователи") Тогда
			Если ЗначениеЗаполнено(АвторКомментария.ФизическоеЛицо) Тогда
				Попытка
					Данные = РаботаСФайлами.ДвоичныеДанныеФайла(АвторКомментария.ФизическоеЛицо.ФайлКартинки);
					КартинкаФизЛица = Новый Картинка(Данные);
					Если ТипЗнч(КартинкаФизЛица) = Тип("Картинка") И КартинкаФизЛица.Вид = ВидКартинки.Абсолютная Тогда
						Возврат Данные;
					КонецЕсли;	
				Исключение
				КонецПопытки;	
			КонецЕсли;
			
		ИначеЕсли мТипАвтораКомментария = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			Попытка
				Данные = РаботаСФайлами.ДвоичныеДанныеФайла(АвторКомментария.ФайлКартинки);
				КартинкаФизЛица = Новый Картинка(Данные);
				Если ТипЗнч(КартинкаФизЛица) = Тип("Картинка") И КартинкаФизЛица.Вид = ВидКартинки.Абсолютная Тогда
					Возврат Данные;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		ИначеЕсли мТипАвтораКомментария = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			
			Если ЗначениеЗаполнено(АвторКомментария.Физлицо) Тогда
				
				Попытка
					Данные = РаботаСФайлами.ДвоичныеДанныеФайла(АвторКомментария.Физлицо.ФайлКартинки);
					КартинкаФизЛица = Новый Картинка(Данные);
					Если ТипЗнч(КартинкаФизЛица) = Тип("Картинка") И КартинкаФизЛица.Вид = ВидКартинки.Абсолютная Тогда
						Возврат Данные;
					КонецЕсли;	
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли мТипАвтораКомментария = Тип("СправочникСсылка.Контрагенты") 
			И АвторКомментария.ВидКонтрагента = Перечисления.ВидКонтрагента.ФизическоеЛицо Тогда
			
			Если ЗначениеЗаполнено(АвторКомментария.ФизическоеЛицо) Тогда
				
				Попытка
					Данные = РаботаСФайлами.ДвоичныеДанныеФайла(АвторКомментария.ФизическоеЛицо.ФайлКартинки);
					КартинкаФизЛица   = Новый Картинка(Данные);
					Если ТипЗнч(КартинкаФизЛица) = Тип("Картинка") И КартинкаФизЛица.Вид = ВидКартинки.Абсолютная Тогда
						Возврат Данные;
					КонецЕсли;	
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции //ПолучитьИзображениеКонтакта

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет на необходимость установки/снятия пометки удаления.
// При необходимости устанаваливается/снимается пометка удаления у комментариев для владельца.
//
// Параметры:
//	Источник - ДокументыОбъект.Задание, СправочникОбъект.СтатьиБазыЗнаний.
//	Отказ - Булево.
//
Процедура ПроверкаПометкиУдаленияКомментариев(Источник, Отказ)
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Помечаем на удаление присоединеннные файлы.
	Если Источник.ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления") Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Комментарии.Ссылка КАК Комментарий
			|ИЗ
			|	Справочник.Комментарии КАК Комментарии
			|ГДЕ
			|	Комментарии.ВладелецКомментария = &ВладелецКомментария";
		Запрос.УстановитьПараметр("ВладелецКомментария", Источник.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				КомментарийОбъект = Выборка.Комментарий.ПолучитьОбъект();
				КомментарийОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаСобытий", Истина);
				КомментарийОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления, Истина);				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает изображение из библиотеки картинок по переданному расширению.
//
// Параметры:
//	Расширение - Строка - расширение файла (без точки).
//
// Возвращаемое значение:
//	Картинка - картинка расширения.
//
Функция КартинкаПоРасширению(Знач Расширение)
	
	Стр = НРег(Расширение);
        
	Если Стр = "png" ИЛИ Стр = "jpg" ИЛИ Стр = "jpeg" ИЛИ Стр = "bmp" ИЛИ Стр = "ico"
		ИЛИ Стр = "tif" ИЛИ Стр = "tiff" ИЛИ Стр = "jpe" ИЛИ Стр = "gif" ИЛИ Стр = "svg" Тогда
		Картинка = БиблиотекаКартинок.Картинка;
	ИначеЕсли Стр = "zip" ИЛИ Стр = "7z" ИЛИ Стр = "rar" ИЛИ Стр = "arj" ИЛИ Стр = "ace"
		ИЛИ Стр = "cab" ИЛИ Стр = "cpio" ИЛИ Стр = "gz" ИЛИ Стр = "iso" ИЛИ Стр = "tar"
        ИЛИ Стр = "a0" ИЛИ Стр = "bz2" ИЛИ Стр = "jar" ИЛИ Стр = "rpm" ИЛИ Стр = "z" Тогда        
		Картинка = БиблиотекаКартинок.ФорматАрхив;        
	ИначеЕсли Стр = "doc" ИЛИ Стр = "docx" ИЛИ Стр = "dot" Тогда
		Картинка = БиблиотекаКартинок.ФорматWord;
	ИначеЕсли Стр = "xls" ИЛИ Стр = "xlsx" Тогда
		Картинка = БиблиотекаКартинок.ФорматExcel;
	ИначеЕсли Стр = "pdf" Тогда
		Картинка = БиблиотекаКартинок.ФорматPDF;
	ИначеЕсли Стр = "odt" ИЛИ Стр = "ott" Тогда
		Картинка = БиблиотекаКартинок.ФорматOpenOfficeWriter;
	ИначеЕсли Стр = "ods" ИЛИ Стр = "ots" Тогда
		Картинка = БиблиотекаКартинок.ФорматOpenOfficeCalc;
	ИначеЕсли Стр = "htm" ИЛИ Стр = "html" Тогда
		Картинка = БиблиотекаКартинок.ФорматHTML;
	ИначеЕсли Стр = "mxl" Тогда
		Картинка = БиблиотекаКартинок.ФорматMXL;
	Иначе
		Картинка = БиблиотекаКартинок.ФорматTXT;
	КонецЕсли;
	
	Возврат "<img src='data:image/png;base64," + Base64Строка(Картинка.ПолучитьДвоичныеДанные()) + "'>";
		
КонецФункции

// Получает массив комментариев в иерархии.
//
// Параметры:
//	ТаблицаЗначений - ТаблицаЗначение - исходная таблица комментариев.
//	РодительСсылка - СправочникСсылка.Комментарии - родительский комментарий для вывода.
//	УпорядочиваниеКомментариев - ПеречислениеСсылка.УпорядочиваниеКомментариевВЗадании - порядок вывода комментариев.
//
// Возвращаемое значение:
//	Массив - массив структур.
//
Функция ТаблицаКомментариевВИерархиюМассивов(ТаблицаЗначений, Знач РодительСсылка = Неопределено, 
	Знач УпорядочиваниеКомментариев = Неопределено)
	
	Если НЕ ТипЗнч(РодительСсылка) = Тип("СправочникСсылка.Комментарии") Тогда
		РодительСсылка = Справочники.Комментарии.ПустаяСсылка();
	КонецЕсли;
	
	КопияТаблицы = ТаблицаЗначений.Скопировать(Новый Структура("Родитель", РодительСсылка));
	Если УпорядочиваниеКомментариев = Перечисления.УпорядочиваниеКомментариевВЗадании.ПоДатеПоУбыванию Тогда
		КопияТаблицы.Сортировать("Период Убыв, Ссылка");
	Иначе
		КопияТаблицы.Сортировать("Период, Ссылка");
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из КопияТаблицы Цикл
		СтруктураСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
		СтруктураСтроки.Вставить("Элементы", 
			ТаблицаКомментариевВИерархиюМассивов(ТаблицаЗначений, СтрокаТаблицы.Ссылка, УпорядочиваниеКомментариев));
		СтруктураСтроки.Вставить("Идентификатор", СтрокаТаблицы.Ссылка.УникальныйИдентификатор());		
		СтруктураСтроки.Вставить("АвторИдентификатор", 
			?(ЗначениеЗаполнено(СтрокаТаблицы.Автор), СтрокаТаблицы.Автор.УникальныйИдентификатор(), ""));
		
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

// Вложенные строки блока "Комментарии".
Функция ПолучитьHTML_Комментарии_ПоМассиву(АдресаКартинок, МассивКомментарии, Параметры, Уровень)
	
	// Подготовка переменных
	ТекстHTML = Новый ТекстовыйДокумент;	
	мТолькоПросмотр = Параметры.Свойство("ТолькоПросмотр") И Параметры.ТолькоПросмотр = Истина;
	мОтображатьИзображенияАвторов = Параметры.Свойство("ОтображатьИзображенияАвторов");
	
	Если мОтображатьИзображенияАвторов Тогда
		Если Параметры.Свойство("ИзображенияАвторов") = Ложь Тогда
			Параметры.Вставить("ИзображенияАвторов", Новый Соответствие());
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ЦветаАвторов") = Ложь Тогда
		Параметры.Вставить("ЦветаАвторов", Новый Соответствие());
	КонецЕсли;

	Для Каждого СтруктураКомментария Из МассивКомментарии Цикл
		
		Сдвиг	        = Формат(25 * Уровень, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");		                       						
		КомментарийHTML	= РаботаСHTML.ТекстТелаДокумента(РаботаСHTML.ОбработатьТекстHTML(СтруктураКомментария, 
			Параметры));
		КомментарийHTML = ЗаменитьВHTMLСмайлики(КомментарийHTML);
		
		ИДКомментарий	= Строка(СтруктураКомментария.Идентификатор);
		ДатаКомментария	= Формат(СтруктураКомментария.Период, "ДФ='дд МММ yyyy HH:mm'");
		
		// Получение картинки автора.		
		#Область Изображения_Авторов
		
		Если мОтображатьИзображенияАвторов Тогда
			ИзображениеАвтораСтрокой = Параметры.ИзображенияАвторов.Получить(СтруктураКомментария.Автор);
			Если ИзображениеАвтораСтрокой = Неопределено Тогда
				ИзображениеАвтора = ПолучитьИзображениеКонтакта(СтруктураКомментария.Автор);
				Если НЕ ЗначениеЗаполнено(ИзображениеАвтора) Тогда
					ИзображениеАвтора = БиблиотекаКартинок.БазаЗнанийПользователь.ПолучитьДвоичныеДанные();
				КонецЕсли;
				ИзображениеАвтораСтрокой = СтрЗаменить(Base64Строка(ИзображениеАвтора), Символы.ВК + Символы.ПС, "");
				Параметры.ИзображенияАвторов.Вставить(СтруктураКомментария.Автор, ИзображениеАвтораСтрокой);
			КонецЕсли;
			ИзображениеАвтораСтрокой = "data:image/png;base64," + ИзображениеАвтораСтрокой;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Ссылки_и_команды
		
		АдресСсылкиОтветить	= БазаЗнанийAPIКлиентСервер.КонструкторСсылки_create("comment",
			Новый Структура("id", ИДКомментарий));
		ОтветПользователю	= ?(ЗначениеЗаполнено(СтруктураКомментария.Родитель),
			"<span class='answer'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>" + " " 
			+ СокрЛП(СтруктураКомментария.Родитель.Автор) + " от " 
			+ Формат(СтруктураКомментария.Родитель.Период, "ДФ='дд МММ yyyy HH:mm'"), "");
		
		#КонецОбласти
		
		#Область Вложения
		
		Если Параметры.Свойство("ПрисоединенныеФайлы") Тогда
			ТаблицаВложений 	= Параметры.ПрисоединенныеФайлы.НайтиСтроки(
				Новый Структура("ВладелецФайла,ИДФайлаЭлектронногоПисьма", СтруктураКомментария.Ссылка, ""));
		Иначе
			ТаблицаВложений		= ПолучитьВложенияКомментарияСПустымИД(СтруктураКомментария.Ссылка);
		КонецЕсли;			
		
		ВложенияБезИД		= "";		
		Если ТаблицаВложений.Количество() > 0 Тогда
            
        	Если Параметры.Свойство("КартинкиПоРасширению") = Ложь Тогда
        		Параметры.Вставить("КартинкиПоРасширению", Новый Соответствие());
        	КонецЕсли;
            
            Для Каждого СтрокаВложения Из ТаблицаВложений Цикл
                
                // Определяем расширение.
        		КартинкаРасширения = Параметры.КартинкиПоРасширению.Получить(СтрокаВложения.Расширение);
        		Если КартинкаРасширения = Неопределено Тогда
        			КартинкаРасширения = КартинкаПоРасширению(СтрокаВложения.Расширение);
        			Параметры.КартинкиПоРасширению.Вставить(СтрокаВложения.Расширение, КартинкаРасширения);
        		КонецЕсли;
            
                Если мТолькоПросмотр = Истина Тогда
					ВложенияБезИД	= ВложенияБезИД	+ "<div class='comment_body_files' style='margin-top:5px;'>"
						+ СтрШаблон(НСтр("ru = '%1&nbsp;%2.%3 (%4)'"), КартинкаРасширения,
						СтрокаВложения.Наименование, СтрокаВложения.Расширение, АвтоРазмерФайла(СтрокаВложения.Размер))
						+ "</div>";
				Иначе
					АдресВложенногоФайлаКомментария	= 
						БазаЗнанийAPIКлиентСервер.КонструкторСсылки_openfile("openfilecomment", 
							Новый Структура("id", СтрокаВложения.Ссылка.УникальныйИдентификатор()));
						
					ВложенияБезИД	= ВложенияБезИД	+ "<div class='comment_body_files'><a target='_blank' href='" 
						+ АдресВложенногоФайлаКомментария + "'>"
						+ СтрШаблон(НСтр("ru = '%1&nbsp;%2.%3 (%4)'"), КартинкаРасширения, СтрокаВложения.Наименование, 
							СтрокаВложения.Расширение, АвтоРазмерФайла(СтрокаВложения.Размер)) 
						+ "</a></div>";
                КонецЕсли;
                    
			КонецЦикла;
			
		КонецЕсли;
		
		#КонецОбласти
		
		ЗаголовокHTML = "";
		Если НЕ ПустаяСтрока(СтруктураКомментария.Заголовок) Тогда
			ЗаголовокHTML = "<div class='comment_h1'>" + СокрЛП(СтруктураКомментария.Заголовок) + "</div>";
		КонецЕсли;
		
		// Приватный.
		СтрокаПриватный = "";
		Если СтруктураКомментария.Приватный = Истина Тогда
			СтрокаПриватный = "<span style='color:#c0c0c0;'> [" + НСтр("ru = 'Приватный'") + "]: ";
			Если ЗначениеЗаполнено(СтруктураКомментария.Автор) Тогда
				СтрокаПриватный = СтрокаПриватный + СтруктураКомментария.Автор;				
			КонецЕсли;
			
			Адресаты = СтруктураКомментария.Ссылка.Адресаты;
			Если Адресаты.Количество() > 0 Тогда
				Для Каждого СтрокаАдресат Из Адресаты Цикл
					Если СтрокаАдресат.Адресат <> СтруктураКомментария.Автор Тогда
						СтрокаПриватный = СтрокаПриватный + "; " + СтрокаАдресат.Адресат;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
			СтрокаПриватный = СтрокаПриватный + "</span>";
		КонецЕсли;	
		
		// Получаем цвет автора в HEX-формате с решеткой.
		ЦветнойАвтор = Параметры.ЦветаАвторов.Получить(СтруктураКомментария.Автор);
		Если ЦветнойАвтор = Неопределено Тогда
			ЦветнойАвтор = HexЦветНика(СтруктураКомментария.АвторПредставление);
			Параметры.ЦветаАвторов.Вставить(СтруктураКомментария.Автор, ЦветнойАвтор);
		КонецЕсли;
		
		// Если только просмотр
		Если мТолькоПросмотр = Истина Тогда
			СтрокаСсылкиОтветить = "";
		Иначе
			СтрокаСсылкиОтветить = "<div class='comment_body_panel'><a href='" + АдресСсылкиОтветить + "'>" 
				+ НСтр("ru = 'Ответить'") + "</a></div>";
		КонецЕсли;
		
		ТекстHTML.ДобавитьСтроку("<a name=""a_" + ИДКомментарий + """></a>
			|<div class='comment' id='comment_" + ИДКомментарий + "' style='margin-left:" + Сдвиг + "px;'>");
		Если мОтображатьИзображенияАвторов Тогда
			ТекстHTML.ДобавитьСтроку("<img class='photo' src='" + ИзображениеАвтораСтрокой + "'>");
		КонецЕсли;
		ТекстHTML.ДобавитьСтроку("<h1 style='color:" + ЦветнойАвтор + ";'>" + СтруктураКомментария.АвторПредставление
			+ " <span class='date'>" + ДатаКомментария + ОтветПользователю + "</span>"
			+ ?(СтруктураКомментария.Приватный = Истина, СтрокаПриватный, "") + "</h1>
			|<div class='comment_body'>" + ЗаголовокHTML + "<div class='comment_body_text'>");
		ТекстHTML.ДобавитьСтроку(КомментарийHTML);
		ТекстHTML.ДобавитьСтроку("</div>" + ВложенияБезИД + СтрокаСсылкиОтветить + "</div></div>");
		                               
		ТекстHTML.ДобавитьСтроку(ПолучитьHTML_Комментарии_ПоМассиву(АдресаКартинок, СтруктураКомментария.Элементы, 
			Параметры, Уровень + 1));
		
	КонецЦикла;
	
	Возврат ТекстHTML.ПолучитьТекст();
	
КонецФункции

// Формирует текст запроса для поиска контактов по Email.
//
// Параметры:
//  ПоискПоСписку  - Булево - признак того, что в качестве параметра передается массив значений.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ВзаимодействияСформироватьТекстЗапросаДляПоискаПоEmail(ПоискПоСписку,ИтогиПоEmail = Ложь)
	
	//@skip-warning
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.МассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКонтактнойИнформации.Ссылка КАК Контакт,
	|	ТаблицаКонтактнойИнформации.Представление,
	|	"""" КАК НаименованиеВладельца,
	|	ТаблицаКонтактнойИнформации.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
	|ГДЕ
	|	ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
	|	И ТаблицаКонтактнойИнформации.АдресЭП = &Адрес";
	
	Для каждого Элемент Из МассивОписанияТиповКонтактов Цикл
		
		Если Элемент.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаКонтактнойИнформации.Ссылка,
			|	ТаблицаКонтактнойИнформации.Представление,
			|	" + ?(Элемент.ЕстьВладелец," ТаблицаКонтактнойИнформации.Ссылка.Владелец.Наименование","""""") + ",
			|	ТаблицаКонтактнойИнформации.Ссылка." + Элемент.ИмяРеквизитаПредставлениеКонтакта + " КАК Наименование
			|ИЗ
			|	Справочник." + Элемент.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|ГДЕ
			|	ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|	И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
			|	И ТаблицаКонтактнойИнформации.АдресЭП = &Адрес
			|  "+?(Элемент.Иерархический," И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ЭтоГруппа)","");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Если ИтогиПоEmail Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|
			|ИТОГИ ПО
			|	Представление";
	КонецЕсли;
	
	Если ПоискПоСписку Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "= &Адрес", "В (&Адрес)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получить блок HTML с кодом для добавления и обновления комментария.
//
//  АдресСсылкиСоздать - строка - адрес ссылки.
//	АдресСсылкиОбновить - строка - адрес ссылки.
//
// Возвращаемое значение:
//	Строка - строка в формате HTML.
//
Функция ОформлениеКнопокДобавленияИОбновления(Знач АдресСсылкиСоздать, Знач АдресСсылкиОбновить)
		
	АдресКартинкиДобавить = СтрЗаменить(Base64Строка(БиблиотекаКартинок.ДобавитьКомментарий.ПолучитьДвоичныеДанные()), 
		Символы.ВК + Символы.ПС, "");
	АдресКартинкиОбновить = СтрЗаменить(Base64Строка(БиблиотекаКартинок.Обновить.ПолучитьДвоичныеДанные()), 
		Символы.ВК + Символы.ПС, "");
	
	Возврат
			"<div id='comments_panel'>
			|	" + СтрШаблон("<a href='%1'><img src='data:image/png;base64," + АдресКартинкиДобавить 
			+ "' border='0' alt='%2'> %3</a>", АдресСсылкиСоздать, 
			НСтр("ru = 'Добавить комментарий'"), НСтр("ru = 'Добавить'")) + "
			|	" + СтрШаблон("<a href='%1'><img src='data:image/png;base64," + АдресКартинкиОбновить 
			+ "' border='0' alt='%2'> %3</a>", АдресСсылкиОбновить, НСтр("ru = 'Обновить список'"), 
			НСтр("ru = 'Обновить'")) + "</div>";
	
КонецФункции                                             

// Производит замену в тексте HTML смайликов.
//
// Параметры:
//	ТекстHTML - Строка - текстовая строка HTML для замены
//
// Возвращаемое значение:
//	Строка - текст HTML со смайликами
//
//@skip-warning
Функция ЗаменитьВHTMLСмайлики(Знач ТекстHTML)
	
	Результат = ТекстHTML;
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(":–)", 	"СмайликУлыбка");
	Соответствие.Вставить(":–D", 	"СмайликШирокаяУлыбка");
	Соответствие.Вставить(":–(", 	"СмайликПечально");
	Соответствие.Вставить(";–)", 	"СмайликШутливо");
	Соответствие.Вставить("8–)", 	"СмайликЗдорово");
    Соответствие.Вставить(":–|", 	"СмайликСкептически");
	Соответствие.Вставить("о_О", 	"СмайликШок");	
	Соответствие.Вставить("(!)", 	"СмайликВосклицание");
	                                                  
	Для Каждого КлючЗначение Из Соответствие Цикл
		
		Смайлик = КлючЗначение.Ключ;
		
		ИндкесСмайлика = СтрНайти(Результат, Смайлик, НаправлениеПоиска.СКонца);
		Если ИндкесСмайлика > 0 Тогда                     
			СтрокаЗамены = "<img src='data:image/gif;base64," 
				+ СтрЗаменить(Base64Строка(БиблиотекаКартинок[КлючЗначение.Значение].ПолучитьДвоичныеДанные()), 
				Символы.ВК + Символы.ПС, "") + "' alt='" + Смайлик + "' title='" + Смайлик + "'>";
		КонецЕсли;
		
		Пока ИндкесСмайлика > 0 Цикл
			
			ЛевБольше = СтрНайти(Результат, ">", НаправлениеПоиска.СКонца, ИндкесСмайлика);
			ПравМеньше = СтрНайти(Результат, "<", НаправлениеПоиска.СНачала, ИндкесСмайлика);
			
			Если ЛевБольше > 0 И ПравМеньше > 0 Тогда
				Подстр = Сред(Результат, ЛевБольше + 1, ПравМеньше - ЛевБольше - 1);
			ИначеЕсли ЛевБольше > 0 И ПравМеньше = 0 Тогда
				Подстр = Сред(Результат, ЛевБольше + 1);
			ИначеЕсли ЛевБольше = 0 И ПравМеньше > 0 Тогда
				Подстр = Лев(Результат, ПравМеньше - 1);
			Иначе
				Подстр = Результат;
			КонецЕслИ;
			
			Если СтрНайти(Подстр, ">") = 0 И СтрНайти(Подстр, "<") = 0 Тогда
				Результат = Лев(Результат, ИндкесСмайлика - 1) + СтрокаЗамены 
					+ Сред(Результат, ИндкесСмайлика + СтрДлина(Смайлик));
			КонецЕсли;
			
			ИндкесСмайлика = СтрНайти(Результат, Смайлик, НаправлениеПоиска.СКонца, ИндкесСмайлика - 1);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти