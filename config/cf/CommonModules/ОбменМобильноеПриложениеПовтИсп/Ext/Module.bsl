
#Область ПрограммныйИнтерфейс

Функция ПолучитьУзлыОбменаПоВладельцу(Знач Пользователь) Экспорт

	ЗапросПолучениеУзлов = Новый Запрос;
	ЗапросПолучениеУзлов.УстановитьПараметр("Пользователь", Пользователь);
	ЗапросПолучениеУзлов.УстановитьПараметр("Ссылка"      , ПланыОбмена.МобильноеПриложение.ЭтотУзел());
	ЗапросПолучениеУзлов.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МобильноеПриложение.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
		|ГДЕ
		|	МобильноеПриложение.Пользователь = &Пользователь
		|	И НЕ МобильноеПриложение.ПометкаУдаления
		|	И НЕ МобильноеПриложение.Ссылка = &Ссылка";

	Возврат ЗапросПолучениеУзлов.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

Функция ПолучитьПредставлениеТипаПоСсылке(Знач ЭлементДанных) Экспорт

	ТипЗначенияЭлемента = ТипЗнч(ЭлементДанных);
	Если ТипЗначенияЭлемента = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		Тип = "GroupUsers";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Пользователи") Тогда
		Тип = "User";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ФизическиеЛица") Тогда	
		Тип = "Individual";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Файлы") Тогда
		Тип = "File";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Процессы") Тогда
		Тип = "Process";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ЭтапыПроцессов") Тогда
		Тип = "ProcessStep";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ГруппыЗаданий") Тогда	
		Тип = "TaskGroup";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.КатегорииЗаданий") Тогда	
		Тип = "TaskCategory";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Спринты") Тогда	
		Тип = "Sprint";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Организации") Тогда	
		Тип = "Оrganization";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Подразделения") Тогда	
		Тип = "Subdivision";	
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Контрагенты") Тогда	
		Тип = "Partners";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.КонтактныеЛица") Тогда	
		Тип = "ContactPersons";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Сотрудники") Тогда	
		Тип = "Associate";		
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ОценкиЗаданий") Тогда	
		Тип = "TaskAssessment";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Сервисы") Тогда	
		Тип = "Service";	
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Проекты") Тогда	
		Тип = "Project";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.СпособыСозданияЗаданий") Тогда	
		Тип = "CreationMethod";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Теги") Тогда	
		Тип = "Tag";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда	
		Тип = "KindContactInfo";	
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("ДокументСсылка.Задание") Тогда	
		Тип = "Task";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ЗаданиеПрисоединенныеФайлы") Тогда	
		Тип = "TaskFile";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Комментарии") Тогда	
		Тип = "Comment";	
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.КомментарииПрисоединенныеФайлы") Тогда	
		Тип = "CommentFile";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ЛинииПоддержки") Тогда		
		Тип = "SupportLine";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ТипыПроцессов") Тогда			
		Тип = "ProcessType";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Услуги") Тогда			
		Тип = "Usluga";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ПотенциальныеКлиенты") Тогда			
		Тип = "PotentialClients";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда			
		Тип = "ViewOfNomenclature";	
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.Номенклатура") Тогда			
		Тип = "Nomenclature";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда			
		Тип = "CartNomenclature";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ВидыМестХранения") Тогда			
		Тип = "ViewOfStorage";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.МестаХранения") Тогда			
		Тип = "Storage";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.КатегорииЛогиновИПаролей") Тогда			
		Тип = "CategoriesLogins";
		
	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ЛогиныИПароли") Тогда			
		Тип = "Logins";

	ИначеЕсли ТипЗначенияЭлемента = Тип("СправочникСсылка.ВидыРабот") Тогда			
		Тип = "KindWork";

	ИначеЕсли ТипЗначенияЭлемента = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда			
		Тип = "DailyReport";
		
	Иначе
		
		Возврат Неопределено;		
		
	КонецЕсли;

	Возврат Тип;

КонецФункции

Функция ПолучитьСсылкуПоТипу(Знач ТипЗначения, Знач СтрокаИдентификатора) Экспорт

	Если Не ЗначениеЗаполнено(ТипЗначения) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(СтрокаИдентификатора) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора)
	ИначеЕсли ТипЗнч(СтрокаИдентификатора) = Тип("УникальныйИдентификатор") Тогда
		Идентификатор = СтрокаИдентификатора;
	КонецЕсли;
	
	УникальныйИдентификаторПустой = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Если Идентификатор = УникальныйИдентификаторПустой 
		Или Идентификатор = Неопределено 
		Или Идентификатор = "" Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СтрСравнить(ТипЗначения, "GroupUsers") = 0 Тогда
		Возврат Справочники.ГруппыПользователей.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения, "User") = 0 Тогда
		Возврат Справочники.Пользователи.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения, "Individual") = 0 Тогда
		Возврат Справочники.ФизическиеЛица.ПолучитьСсылку(Идентификатор);	

	ИначеЕсли СтрСравнить(ТипЗначения, "PotentialClients") = 0 Тогда
		Возврат Справочники.ПотенциальныеКлиенты.ПолучитьСсылку(Идентификатор);	
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Process") = 0 Тогда
		Возврат Справочники.Процессы.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения, "File") = 0 Тогда
		Возврат Справочники.Файлы.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения, "ProcessStep") = 0 Тогда
		Возврат Справочники.ЭтапыПроцессов.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения, "TaskGroup") = 0 Тогда
		Возврат Справочники.ГруппыЗаданий.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения, "TaskCategory") = 0 Тогда
		Возврат Справочники.КатегорииЗаданий.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения, "TaskDocumentType") = 0 Тогда
		Возврат Справочники.ТипыПроцессов.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Sprint") = 0 Тогда
		Возврат Справочники.Спринты.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения, "Оrganization") = 0 Тогда
		Возврат Справочники.Организации.ПолучитьСсылку(Идентификатор);

	ИначеЕсли СтрСравнить(ТипЗначения, "Subdivision") = 0 Тогда
		Возврат Справочники.Подразделения.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Partners") = 0 Тогда
		Возврат Справочники.Контрагенты.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "ContactPersons") = 0 Тогда
		Возврат Справочники.КонтактныеЛица.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Associate") = 0 Тогда
		Возврат Справочники.Сотрудники.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "TaskAssessment") = 0 Тогда
		Возврат Справочники.ОценкиЗаданий.ПолучитьСсылку(Идентификатор);	
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Service") = 0 Тогда
		Возврат Справочники.Сервисы.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Project") = 0 Тогда
		Возврат Справочники.Проекты.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "CreationMethod") = 0 Тогда
		Возврат Справочники.СпособыСозданияЗаданий.ПолучитьСсылку(Идентификатор);	
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Tag") = 0 Тогда
		Возврат Справочники.Теги.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Task") = 0 Тогда
		Возврат Документы.Задание.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "TaskFile") = 0 Тогда
		Возврат Справочники.ЗаданиеПрисоединенныеФайлы.ПолучитьСсылку(Идентификатор);	
		
	ИначеЕсли СтрСравнить(ТипЗначения, "KindContactInfo") = 0 Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Идентификатор);	
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Comment") = 0 Тогда
		Возврат Справочники.Комментарии.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "CommentFile") = 0 Тогда
		Возврат Справочники.КомментарииПрисоединенныеФайлы.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "SupportLine") = 0 Тогда
		Возврат Справочники.ЛинииПоддержки.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Usluga") = 0 Тогда
		Возврат Справочники.Услуги.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "ViewOfNomenclature") = 0 Тогда
		Возврат Справочники.ВидыНоменклатуры.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Nomenclature") = 0 Тогда
		Возврат Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "CartNomenclature") = 0 Тогда
		Возврат Справочники.КарточкиНоменклатуры.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "ViewOfStorage") = 0 Тогда
		Возврат Справочники.ВидыМестХранения.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Storage") = 0 Тогда
		Возврат Справочники.МестаХранения.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "CategoriesLogins") = 0 Тогда
		Возврат Справочники.КатегорииЛогиновИПаролей.ПолучитьСсылку(Идентификатор);	
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Logins") = 0 Тогда
		Возврат Справочники.ЛогиныИПароли.ПолучитьСсылку(Идентификатор);	

	ИначеЕсли СтрСравнить(ТипЗначения, "DailyReport") = 0 Тогда
		Возврат Документы.ЕжедневныйОтчет.ПолучитьСсылку(Идентификатор);	
	
	ИначеЕсли СтрСравнить(ТипЗначения, "KindWork") = 0 Тогда
		Возврат Справочники.ВидыРабот.ПолучитьСсылку(Идентификатор);	

	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьВсеУзлы() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПланыОбмена.МобильноеПриложение.ЭтотУзел());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МобильноеПриложение.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОМобильныхКлиентах КАК СведенияОМобильныхКлиентах
		|		ПО МобильноеПриложение.Ссылка = СведенияОМобильныхКлиентах.МобильныйКлиент
		|ГДЕ
		|	НЕ МобильноеПриложение.ПометкаУдаления
		|	И НЕ МобильноеПриложение.Ссылка = &Ссылка";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

Функция ПолучитьУзелДляРегистрацииДанных() Экспорт

	УзелОбменаСсылка = ПланыОбмена.МобильноеПриложениеРегистрацияДанных.НайтиПоКоду("1");

	Если Не ЗначениеЗаполнено(УзелОбменаСсылка) Тогда

		УзелОбменаОбъект = ПланыОбмена.МобильноеПриложениеРегистрацияДанных.СоздатьУзел();

		УзелОбменаОбъект.Код          = "1";
		УзелОбменаОбъект.Наименование = НСтр("ru = 'Единый узел для регистрации всех данных для мобильных клиентов'");

		УзелОбменаОбъект.Записать();

		Возврат УзелОбменаОбъект.Ссылка;

	Иначе

		Возврат УзелОбменаСсылка;

	КонецЕсли;

КонецФункции

Функция НастройкиПользователяМобильногоПриложения(Знач Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПользователиМобильныхПриложений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПользователиМобильныхПриложений КАК ПользователиМобильныхПриложений
		|ГДЕ
		|	НЕ ПользователиМобильныхПриложений.ПометкаУдаления
		|	И ПользователиМобильныхПриложений.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);	
	РезультатЗапроса 	   = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда	
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Справочники.ПользователиМобильныхПриложений.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьТипКИПоПредставлению(Знач Представление) Экспорт

	Если Представление = "address" Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ИначеЕсли Представление = "phone" Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ИначеЕсли Представление = "email" Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;	
	ИначеЕсли Представление = "skype" Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Skype;		
	ИначеЕсли Представление = "webpage" Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;			
	ИначеЕсли Представление = "fax" Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Факс;		
	Иначе
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;			
	КонецЕсли;

	Возврат ТипКИ;

КонецФункции

Функция ПолучитьВидКонтрагентаПоПредставлению(Знач Представление) Экспорт

	Если Представление = "individual" Тогда
		ВидКонтрагента = Перечисления.ВидКонтрагента.ФизическоеЛицо;			
	Иначе
		ВидКонтрагента = Перечисления.ВидКонтрагента.ЮридическоеЛицо;			
	КонецЕсли;

	Возврат ВидКонтрагента;

КонецФункции

Функция ПолучитьВлияниеПоПредставлению(Знач Представление) Экспорт

	Если Представление = "high" Тогда
		Влияние = Перечисления.Влияние.Высокое;
	ИначеЕсли Представление = "low" Тогда
		Влияние = Перечисления.Влияние.Низкое;
	Иначе
		Влияние = Перечисления.Влияние.Среднее;
	КонецЕсли;

	Возврат Влияние;

КонецФункции

Функция ПолучитьПриоритетПоПредставлению(Знач Представление) Экспорт

	Если Представление = "critical" Тогда
		Приоритет = Перечисления.ПриоритетЗадания.Критический;
	ИначеЕсли Представление = "high" Тогда
		Приоритет = Перечисления.ПриоритетЗадания.Высокий;
	ИначеЕсли Представление = "low" Тогда
		Приоритет = Перечисления.ПриоритетЗадания.Низкий;
	ИначеЕсли Представление = "verylow" Тогда
		Приоритет = Перечисления.ПриоритетЗадания.ОченьНизкий;	
	Иначе
		Приоритет = Перечисления.ПриоритетЗадания.Средний;
	КонецЕсли;

	Возврат Приоритет;

КонецФункции

Функция ПолучитьСрочностьПоПредставлению(Знач Представление) Экспорт

	Если Представление = "high" Тогда
		Срочность = Перечисления.Срочность.Высокая;
	ИначеЕсли Представление = "low" Тогда
		Срочность = Перечисления.Срочность.Низкая;
	Иначе
		Срочность = Перечисления.Срочность.Средняя;
	КонецЕсли;

	Возврат Срочность;

КонецФункции

Функция ПолучитьЗначениеУпорядочиванияКомментариевПоПредставлению(Знач Представление) Экспорт

	Если Представление = "bydateascending" Тогда
		Порядок = Перечисления.УпорядочиваниеКомментариевВЗадании.ПоДатеПоВозрастанию;	
	Иначе
		Порядок = Перечисления.УпорядочиваниеКомментариевВЗадании.ПоДатеПоУбыванию;
	КонецЕсли;

	Возврат Порядок;

КонецФункции

Функция ПолучитьПредставлениеТипаВидаНоменклатуры(Знач ТипВидаНоменклатуры) Экспорт

	Если ТипВидаНоменклатуры = Перечисления.ТипыВидовНоменклатуры.Комплект Тогда
		Представление = "kit";		
	ИначеЕсли ТипВидаНоменклатуры = Перечисления.ТипыВидовНоменклатуры.Комплектующая Тогда
		Представление = "component";	
	ИначеЕсли ТипВидаНоменклатуры = Перечисления.ТипыВидовНоменклатуры.Оборудование Тогда
		Представление = "equipment";		
	ИначеЕсли ТипВидаНоменклатуры = Перечисления.ТипыВидовНоменклатуры.ПрограммноеОбеспечение Тогда
		Представление = "software";		
	ИначеЕсли ТипВидаНоменклатуры = Перечисления.ТипыВидовНоменклатуры.РасходныйМатериал Тогда
		Представление = "consumable";		
	ИначеЕсли ТипВидаНоменклатуры = Перечисления.ТипыВидовНоменклатуры.Услуга Тогда
		Представление = "service";		
	Иначе		
		Представление = "other";		
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеСостоянияЭтапаПроцесса(Знач СостояниеЭтапа) Экспорт

	Если СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Новый Тогда
		Представление = "new";
	ИначеЕсли СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Подготовка Тогда
		Представление = "preparation";
	ИначеЕсли СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Бэклог Тогда
		Представление = "backlog";		
	ИначеЕсли СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Подпроцесс Тогда
		Представление = "subprocess";		
	ИначеЕсли СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Закрыт Тогда
		Представление = "closed";		
	ИначеЕсли СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Выполнен Тогда
		Представление = "completed";		
	ИначеЕсли СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Приостановка Тогда	
		Представление = "suspense";		
	Иначе		
		Представление = "work";		
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеСтатусаПроекта(Знач СтатусПроекта) Экспорт

	Если СтатусПроекта = Перечисления.СтатусыПроекта.Планируемый Тогда
		Представление = "planned";		
	ИначеЕсли СтатусПроекта = Перечисления.СтатусыПроекта.Завершен Тогда
		Представление = "completed";
	Иначе		
		Представление = "work";
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеСтатусаСервиса(Знач СтатусСервиса) Экспорт

	Если СтатусСервиса = Перечисления.СтатусыСервисов.Проектируется Тогда
		Представление = "project";		
	ИначеЕсли СтатусСервиса = Перечисления.СтатусыСервисов.НеИспользуется Тогда
		Представление = "notuse";		
	Иначе		
		Представление = "work";		
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеТипаСервиса(Знач ТипСервиса) Экспорт

	Если ТипСервиса = Перечисления.ТипыСервисов.ПользовательскийСервис Тогда
		Представление = "user";		
	Иначе		
		Представление = "it";
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеСтатусаУслуги(Знач СтатусУслуги) Экспорт

	Если СтатусУслуги = Перечисления.СтатусыУслуг.Проектируется Тогда
		Представление = "project";		
	ИначеЕсли СтатусУслуги = Перечисления.СтатусыУслуг.НеИспользуется Тогда
		Представление = "notuse";		
	Иначе		
		Представление = "work";		
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеПриоритета(Знач Приоритет) Экспорт

	Если Приоритет = Перечисления.ПриоритетЗадания.Критический Тогда
		Представление = "critical";	
	ИначеЕсли Приоритет = Перечисления.ПриоритетЗадания.Высокий Тогда
		Представление = "high";		
	ИначеЕсли Приоритет = Перечисления.ПриоритетЗадания.Низкий Тогда
		Представление = "low";
	ИначеЕсли Приоритет = Перечисления.ПриоритетЗадания.Низкий Тогда
		Представление = "verylow";	
	Иначе		
		Представление = "average";
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеВлияния(Знач Влияние) Экспорт

	Если Влияние = Перечисления.Влияние.Высокое Тогда
		Представление = "high";		
	ИначеЕсли Влияние = Перечисления.Влияние.Низкое Тогда
		Представление = "low";
	Иначе		
		Представление = "average";
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеСрочности(Знач Срочность) Экспорт

	Если Срочность = Перечисления.Срочность.Высокая Тогда
		Представление = "high";		
	ИначеЕсли Срочность = Перечисления.Срочность.Низкая Тогда
		Представление = "low";
	Иначе		
		Представление = "average";
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеТипаКИ(Знач ТипаВидаКИ) Экспорт
	
	Если ТипаВидаКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Представление = "address";		
	ИначеЕсли ТипаВидаКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Представление = "phone";		
	ИначеЕсли ТипаВидаКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Представление = "email";
	ИначеЕсли ТипаВидаКИ = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		Представление = "skype";
	ИначеЕсли ТипаВидаКИ = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Представление = "webpage";	
	ИначеЕсли ТипаВидаКИ = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Представление = "fax";		
	Иначе		
		Представление = "other";
	КонецЕсли;

	Возврат Представление;
	
КонецФункции	

Функция ПолучитьПредставлениеВидаКонтрагента(Знач ВидКонтрагента) Экспорт
	
	Если ВидКонтрагента = Перечисления.ВидКонтрагента.ФизическоеЛицо Тогда
		Представление = "individual";					
	Иначе		
		Представление = "entity";
	КонецЕсли;

	Возврат Представление;
	
КонецФункции

Функция ПолучитьПредставлениеУпорядочиванияКомментариев(Знач Порядок) Экспорт

	Если Порядок = Перечисления.УпорядочиваниеКомментариевВЗадании.ПоДатеПоВозрастанию Тогда
		Представление = "bydateascending";	
	Иначе		
		Представление = "bydatedescending";
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеТипаПароля(Знач ТипПароля) Экспорт
	
	Если ТипПароля = Перечисления.ТипыПаролей.ГруппыПользователей Тогда
		Представление = "groupsofusers";
	ИначеЕсли ТипПароля = Перечисления.ТипыПаролей.Общий Тогда
		Представление = "general";
	Иначе
		Представление = "private";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции	

Функция ПолучитьТипПароляПоПредставлению(Знач Представление) Экспорт
	
	Если Представление = "groupsofusers" Тогда
		ТипПароля = Перечисления.ТипыПаролей.ГруппыПользователей;
	ИначеЕсли Представление = "general" Тогда
		ТипПароля = Перечисления.ТипыПаролей.Общий;
	Иначе
		ТипПароля = Перечисления.ТипыПаролей.Личный;
	КонецЕсли;
	
	Возврат ТипПароля;
	
КонецФункции

Функция ПолучитьПредставлениеВидаВремени(Знач ВидВремени) Экспорт

	Если ВидВремени = Перечисления.ВидыВремени.Рабочее Тогда
		Представление = "working";		
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.НеРабочее Тогда
		Представление = "nonworking";		
	Иначе		
		Представление = "";		
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьВидВремениПоПредставлению(Знач Представление) Экспорт
	
	Если Представление = "working" Тогда
		ВидВремени = Перечисления.ВидыВремени.Рабочее;
	ИначеЕсли Представление = "nonworking" Тогда
		ВидВремени = Перечисления.ВидыВремени.НеРабочее;
	Иначе
		ВидВремени = Перечисления.ВидыВремени.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВидВремени;
	
КонецФункции

Функция ПолучитьПредставлениеПоложенияРеквизитаНаФорме(Знач ПоложениеРеквизита) Экспорт

	Если ПоложениеРеквизита = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Представление = "header";		
	ИначеЕсли ПоложениеРеквизита = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Представление = "table";		
	Иначе		
		Представление = "";		
	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПолучитьПоложениеРеквизитаНаФормеПоПредставлению(Знач Представление) Экспорт
	
	Если Представление = "header" Тогда
		Положение = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ИначеЕсли Представление = "table" Тогда
		Положение = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	Иначе
		Положение = Перечисления.ПоложениеРеквизитаНаФорме.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Положение;
	
КонецФункции

Функция ПодсистемаЛогиныИПаролиДоступнаТекущемуПользователю() Экспорт
	
	Результат							= Ложь;
	ЕстьРольПолныеПрава					= Ложь;
	ЕстьРольДобавлениеИзменениеПаролей	= Ложь;
	ЕстьРольЧтениеПаролей				= Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	Пользователь = Пользователи.ТекущийПользователь();
	СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(Пользователь.ИдентификаторПользователяИБ);	
	
	Если СвойстваПользователяИБ <> Неопределено Тогда		
		РолиПользователя    = СвойстваПользователяИБ.Роли;		
		ЕстьРольПолныеПрава = РолиПользователя.Найти("ПолныеПрава") <> Неопределено;
		Если Не ЕстьРольПолныеПрава Тогда			
			ЕстьРольДобавлениеИзменениеПаролей	= РолиПользователя.Найти("ДобавлениеИзменениеПаролей") <> Неопределено;
			ЕстьРольЧтениеПаролей				= РолиПользователя.Найти("ЧтениеПаролей") <> Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	Результат = ЕстьРольПолныеПрава ИЛИ ЕстьРольДобавлениеИзменениеПаролей ИЛИ ЕстьРольЧтениеПаролей;
	
	Возврат Результат;
	
КонецФункции

// Получает часто используемые параметры синхронизации для обмена с мобильным клиентом
// 
Функция ПолучитьПараметрыСинхронизацииПоПользователю(Знач Пользователь, ПодготовитьФильтры = Ложь) Экспорт
	
	//@skip-warning
	Возврат СЛС.ПолучитьПараметрыСинхронизацииПоПользователю(Пользователь, ПодготовитьФильтры);
	
КонецФункции

#КонецОбласти