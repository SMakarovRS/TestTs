////////////////////////////////////////////////////////////////////////////////
// Модуль по управлению заданиями на клиенте.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Переводит задание на другой этап.
// Вызывается из формы документа, но можно вызывать и из других форм (а также, из обработчика кодом).
//
// Параметры:
//	ДокументЗадание		- документ "Задание"(может быть ДанныеФормыСтруктура либо Ссылка).
//	НовыйЭтап			- этап, на который нужно перевести задание.
//  НеПроверятьПроцесс	- не будет проверяться, что данный этап есть в процессе и что на данный этап,
//						  возможен переход с текущего этапа задания.
//						 (этот параметр не используется при вызове из формы, но может использоваться в обработчиках кодом).
//  ДатаАктуальности	- Текущая дата (для логов, истории и т.п), если неопределено, то будет заполено.
//  ВвестиКомментарий	- булево, если истина, то форма ввода комментария будет показана, 
//						  даже если по прочим настройкам указано "не вводить комментарии".
//						 (передаётся из формы задания состояние кнопки "Вводить комментарий при переходе на этап").
// Возвращаемое значение:
//   Булево - Истина, успешно/не успешно.
//
Функция ПеревестиЗаданиеНаЭтап(ДокументЗадание, Знач ПараметрыСтруктура) Экспорт
	
	СтруктураВозврата	 = Новый Структура();
	СтруктураВозврата.Вставить("ВыполненПеревод", Ложь);
	
	НовыйЭтап 			 				= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыСтруктура, 
		"НовыйЭтап", ПредопределенноеЗначение("Справочник.ЭтапыПроцессов.ПустаяСсылка"));
	НеПроверятьПроцесс	 				= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыСтруктура, "НеПроверятьПроцесс", Ложь);
	ВвестиКомментарийПриПереходеНаЭтап	= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыСтруктура, 
		"ВвестиКомментарийПриПереходеНаЭтап", Ложь);
	ДатаАктуальности	 				= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыСтруктура, 
		"ДатаАктуальности", ОбщегоНазначенияКлиент.ДатаСеанса());
	ЭтоВебКлиент		 				= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыСтруктура, "ЭтоВебКлиент", 		Ложь);
	Источник			 				= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыСтруктура, "Источник", 			"");		
	ПереданаСсылка	 					= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыСтруктура, "ПереданаСсылка", 	Ложь);	
	ЭтоФормаПереводаНаЭтап				= УправлениеITОтделом8УФ.ПолучитьПараметр(ПараметрыСтруктура, "ФормаПереводаНаЭтап",Ложь);	
	ДокументСсылка 		 				= ?(ПереданаСсылка, ДокументЗадание, ПараметрыСтруктура.Ссылка);
		
	Если ПереданаСсылка Тогда
		СтруктураПриПереходе = ЗаданияСервер.ПолучитьСтруктуруПриПереходеЗаданияНаЭтап(ДокументСсылка, НовыйЭтап,
			НеПроверятьПроцесс);
	Иначе		
		СтруктураПриПереходе = ЗаданияСервер.ПолучитьСтруктуруПриПереходеЗаданияНаЭтап(ПараметрыСтруктура, НовыйЭтап,
			НеПроверятьПроцесс);
	КонецЕсли;
	
	Если СтруктураПриПереходе = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Этап <%1> не найден'"), НовыйЭтап));
		Возврат СтруктураВозврата;	
	КонецЕсли;
	
	Если ВвестиКомментарийПриПереходеНаЭтап = Истина И СтруктураПриПереходе.ЗапрашиватьКомментарий = 0 Тогда
		СтруктураПриПереходе.ЗапрашиватьКомментарий = 1;
	КонецЕсли;
	
	СтруктураПриПереходе.Вставить("Объект", 							ДокументЗадание);
	СтруктураПриПереходе.Вставить("ДокументСсылка",						ДокументСсылка);
	СтруктураПриПереходе.Вставить("ПолнаяОбработка", 					ПереданаСсылка);
	СтруктураПриПереходе.Вставить("НовыйЭтап", 							НовыйЭтап);
	СтруктураПриПереходе.Вставить("НеПроверятьПроцесс", 				НеПроверятьПроцесс);
	СтруктураПриПереходе.Вставить("ДатаАктуальности",					ДатаАктуальности);
	СтруктураПриПереходе.Вставить("ЭтоВебКлиент",						ЭтоВебКлиент);
	СтруктураПриПереходе.Вставить("Источник", 							Источник);
	СтруктураПриПереходе.Вставить("ВвестиКомментарийПриПереходеНаЭтап", ВвестиКомментарийПриПереходеНаЭтап);
	СтруктураПриПереходе.Вставить("ФормаПереводаНаЭтап", 				ЭтоФормаПереводаНаЭтап);
	
	ЗапрашиватьКомментарий = СтруктураПриПереходе.ЗапрашиватьКомментарий;
	Если ЗапрашиватьКомментарий = 1 ИЛИ ЗапрашиватьКомментарий = 2 Тогда
		
		ПараметрыКомментария = Новый Структура;
		ПараметрыКомментария.Вставить("СсылкаНаОбъект",					ДокументСсылка);
		ПараметрыКомментария.Вставить("Источник", 						Источник);
		// Не закрывать с пустым комментарием.
		ПараметрыКомментария.Вставить("ОбязательноеЗаполнениеКомментария",(ЗапрашиватьКомментарий = 2));
		ПараметрыКомментария.Вставить("ПриватныйКомментарий", 				Ложь);
		ПараметрыКомментария.Вставить("ДополнительныйТекст", 			СтрШаблон(НСтр("ru = 'Смена этапа: %1 &rarr; %2'"),
			СтруктураПриПереходе.НаименованиеТекущегоЭтапа, СтруктураПриПереходе.НаименованиеЭтапа));
		ПараметрыКомментария.Вставить("ЗаписыватьДокументОснование",	ПараметрыСтруктура.ЗаписатьОбъект);
		ПараметрыКомментария.Вставить("ПеревестиНаЭтапПослеДобавленияКомментария", Истина);
		ПараметрыКомментария.Вставить("СтруктураПриПереходе",			СтруктураПриПереходе);
		
		ОписаниеОповещения  = Новый ОписаниеОповещения("ПеревестиЗаданиеНаЭтапЗавершение", ЭтотОбъект, СтруктураПриПереходе);
		ЗначенияЗаполнения	= Новый Структура;
		ЗначенияЗаполнения.Вставить("ВладелецКомментария" , ДокументСсылка);
		ЗначенияЗаполнения.Вставить("Автор"				  , ПользователиКлиент.ТекущийПользователь());		
		ПараметрыКомментария.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыКомментария.Вставить("КомментарийПриПереходеНаЭтап", Истина);
		
		ОткрытьФорму("Справочник.Комментарии.Форма.ФормаРедактирования", ПараметрыКомментария,,,,, ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);				
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Если ПереданаСсылка Тогда
		Если ПараметрыСтруктура.ЗаписатьОбъект Тогда
			ВыполненПеревод = ЗаданияСервер.ПеревестиЗаданиеНаЭтапНаСервере(ДокументЗадание, НовыйЭтап, СтруктураПриПереходе, 
				ДатаАктуальности);
			СтруктураВозврата.Вставить("ВыполненПеревод", ВыполненПеревод);
			
			Возврат СтруктураВозврата;
			
		Иначе 
			СтруктураПриПереходе.Вставить("ВыполненПеревод", Истина);
			
			Возврат СтруктураПриПереходе;
				
		КонецЕсли;	
	ИначеЕсли ЭтоФормаПереводаНаЭтап Тогда
		СтруктураПриПереходе.Вставить("ВыполненПеревод", Истина);
		
		Возврат СтруктураПриПереходе;
		
	Иначе	
		ДокументЗадание.ТекущийЭтап = НовыйЭтап;		
		Если СтруктураПриПереходе.Свойство("ИсполнительПоУмолчанию") 
			И ЗначениеЗаполнено(СтруктураПриПереходе.ИсполнительПоУмолчанию) Тогда
			ДокументЗадание.ТекущийИсполнитель = СтруктураПриПереходе.ИсполнительПоУмолчанию;
		КонецЕсли;			
		СтруктураВозврата.Вставить("ВыполненПеревод", Истина);
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
КонецФункции

// Вспомогательная, используется в "ПеревестиЗаданиеНаЭтап" и "ПеревестиЗаданиеНаЭтапЗавершение".
//
// Параметры:
//  Код - Строка - код на языке 1С.
//	Задание - ДокументСсылка.Задание - документ, который является основанием.
// 	НовыйЭтап - СправочникСсылка.ЭтапыПроцесса - этап.
// 	Отказ - Булево - отказ или нет при выполнении.
//	Параметры - Структура - параметры обработки кода.
//	
Процедура ВыполнитьКодОбработчикаНаКлиенте(Знач Код, Знач Задание, НовыйЭтап, Отказ, Параметры) Экспорт
	
	Попытка
		Выполнить(Код);
	Исключение
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Ошибка при выполнении пользовательского обработчика для этапа: %1'"), 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

// Вспомогательная, используется в "ПеревестиЗаданиеНаЭтап".
//
// Параметры:
//   РезультатЗакрытия - Булево - результат работы перевода на этап.
//	 ДопПараметры - Структура - дополнительные параметры процедуры.
//
Процедура ПеревестиЗаданиеНаЭтапЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено И ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.Свойство("ЗаписыватьДокументОснование") И РезультатЗакрытия.ЗаписыватьДокументОснование Тогда 	
			
			Если ЗаданияСервер.ПеревестиЗаданиеНаЭтапНаСервере(ДополнительныеПараметры.Объект,
				ДополнительныеПараметры.НовыйЭтап, ДополнительныеПараметры, ДополнительныеПараметры.ДатаАктуальности) Тогда
				
				Оповестить("Задание_СмененЭтап", ДополнительныеПараметры, ДополнительныеПараметры.Источник);
				
			КонецЕсли;
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Реализует функционал "Оформить фрагмент кода" - для соответствующих кнопок в формах.
// Например: для поля "Описание" в форме док. "Задание".
//
// Параметры:
//	ТекстКод - Строка - текст, который нужно расскрасить.
//
// Возвращаемое значение:
//	Строка - раскрашенный текст в формате HTML.
//	
Функция РаскраситьКод1С8(Знач ТекстКод) Экспорт
	
	мОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	Таб = Символы.Таб;
	НПП = Символы.НПП;
	ДопустимыеЗнаки = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя0123456789abcdefghijklmnopqrstyvwxyz_";
	
	СписокКлючевыхСлов = "|if|если|then|тогда|elsif|иначеесли|else|иначе|endif|конецесли|do|цикл|for|для|to|по|each"
		+ "|каждого|in|из|while|пока|enddo|конеццикла|procedure|процедура|endprocedure|конецпроцедуры|function"
		+ "|функция|endfunction|конецфункции|var|перем|export|экспорт|goto|перейти|and|и|or|или|not|не|val|знач"
		+ "|break|прервать|continue|продолжить|return|возврат|try|попытка|except|исключение|endtry|конецпопытки"
		+ "|raise|вызватьисключение|false|ложь|true|истина|undefined|неопределено|null|new|новый|execute|выполнить|";
		
	Ответ = "<span style=""text-align:left;font-family:courier new,courier;color:blue;font-size:10pt;"
		+"white-space:pre;display:inline-block;""><font>";
		
	ТекТипСлова = "<text>";
	Для нс = 1 По СтрЧислоСтрок(ТекстКод) Цикл
		ТекСтрока = СокрП(СтрПолучитьСтроку(ТекстКод, нс));
		дл = СтрДлина(ТекСтрока);
		сч = 0;
		ТекСлово = "";
		КодНеНачался = Истина;
		Пока сч < дл Цикл
			сч = сч + 1;
			ТекущийСимвол = Сред(ТекСтрока, сч, 1);
			Если КодНеНачался Тогда
				Если ТекущийСимвол = " " ИЛИ ТекущийСимвол = Таб ИЛИ ТекущийСимвол = НПП Тогда
					Ответ = Ответ + ТекущийСимвол;
					Продолжить;
				ИначеЕсли ТекущийСимвол = "#" ИЛИ ТекущийСимвол = "&" Тогда
					ТекСлово = "";
					ДобавитьСлово(Ответ, Сред(ТекСтрока, сч), ТекТипСлова, СписокКлючевыхСлов, ДопустимыеЗнаки, 
						мОписаниеТипаЧисло, "<dir>");
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			КодНеНачался = Ложь;			
			Если ТекущийСимвол=" " ИЛИ ТекущийСимвол=Таб ИЛИ ТекущийСимвол=НПП Тогда
				Если КодНеНачался Тогда
					Ответ = Ответ + ТекущийСимвол;
					Продолжить;
				КонецЕсли;
				ДобавитьСлово(Ответ, ТекСлово+ТекущийСимвол, ТекТипСлова, СписокКлючевыхСлов, ДопустимыеЗнаки, мОписаниеТипаЧисло);
				ТекСлово = "";
				Продолжить;
				
			ИначеЕсли СтрНайти("():;.,=+-*<>?[]%/", ТекущийСимвол) > 0 Тогда
				ДобавитьСлово(Ответ, ТекСлово, ТекТипСлова, СписокКлючевыхСлов, ДопустимыеЗнаки, мОписаниеТипаЧисло);
				ТекСлово = "";
				// Проверяем на комментарий/
				Если ТекущийСимвол="/" И Сред(ТекСтрока, сч+1, 1)="/" Тогда
					ТекСлово = "";
					ДобавитьСлово(Ответ, СокрП(Сред(ТекСтрока, сч)), ТекТипСлова, СписокКлючевыхСлов, ДопустимыеЗнаки, 
						мОписаниеТипаЧисло, "<cmnt>");
					Прервать;
				КонецЕсли;	
				ДобавитьСлово(Ответ, ТекущийСимвол, ТекТипСлова, СписокКлючевыхСлов, ДопустимыеЗнаки, мОписаниеТипаЧисло, 
					"<symb>");
				Продолжить;
				
			ИначеЕсли ТекущийСимвол="""" ИЛИ ТекущийСимвол="|" Тогда
				ДобавитьСлово(Ответ, ТекСлово, ТекТипСлова, СписокКлючевыхСлов, ДопустимыеЗнаки, мОписаниеТипаЧисло);
				// найти закрывающую кавычку/
				нач = сч;
				сч = сч + 1;
				СледующийСимвол = Сред(ТекСтрока, сч, 1);
				Пока сч<дл Цикл
					сч = сч + 1;
					ТекущийСимвол = СледующийСимвол;
					СледующийСимвол = Сред(ТекСтрока, сч, 1);
					Если ТекущийСимвол="""" Тогда
						Если СледующийСимвол="""" Тогда
							сч = сч + 1;
							СледующийСимвол = Сред(ТекСтрока, сч, 1);
						Иначе
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ТекСлово = "";
				ДобавитьСлово(Ответ, Сред(ТекСтрока, нач, сч-нач), ТекТипСлова, СписокКлючевыхСлов, ДопустимыеЗнаки, 
					мОписаниеТипаЧисло, "<str>");
				сч = сч - 1;
				Продолжить;
				
			ИначеЕсли ТекущийСимвол="'" Тогда
				нач = сч;
				сч = сч + 1;
				СледующийСимвол = Сред(ТекСтрока, сч, 1);
				Пока сч<дл Цикл
					сч = сч + 1;
					ТекущийСимвол = СледующийСимвол;
					СледующийСимвол = Сред(ТекСтрока, сч, 1);
					Если ТекущийСимвол="'" Тогда
						Если СледующийСимвол="'" Тогда
							сч = сч + 1;
							СледующийСимвол = Сред(ТекСтрока, сч, 1);
						Иначе
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ТекСлово = "";
				ДобавитьСлово(Ответ, Сред(ТекСтрока, нач, сч-нач), ТекТипСлова, СписокКлючевыхСлов, ДопустимыеЗнаки, 
					мОписаниеТипаЧисло, "<str>");
				сч = сч - 1;
				Продолжить;
				
			КонецЕсли;
			ТекСлово = ТекСлово + ТекущийСимвол;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ТекСлово) Тогда
			ДобавитьСлово(Ответ,СокрП(ТекСлово), ТекТипСлова, СписокКлючевыхСлов, ДопустимыеЗнаки, мОписаниеТипаЧисло);
		КонецЕсли;
		Ответ = Ответ + "<BR />";
		
	КонецЦикла;
	
	Ответ = Ответ + Символы.ПС+"</font></span>";
	Ответ = СтрЗаменить(Ответ, "<keywrd>", "</font><font color=red>");
	Ответ = СтрЗаменить(Ответ, "<text>", "</font><font color=blue>");
	Ответ = СтрЗаменить(Ответ, "<str>", "</font><font color=black>");
	Ответ = СтрЗаменить(Ответ, "<num>", "</font><font color=black>");
	Ответ = СтрЗаменить(Ответ, "<unwn>", "</font><font color=black>");
	Ответ = СтрЗаменить(Ответ, "<symb>", "</font><font color=red>");
	Ответ = СтрЗаменить(Ответ, "<cmnt>", "</font><font color=green>");
	Ответ = СтрЗаменить(Ответ, "<dir>", "</font><font color=brown>");	
	Ответ = СтрЗаменить(Ответ, Символы.Таб, "&nbsp;&nbsp;&nbsp;&nbsp;");
	
	Возврат Ответ;
	
КонецФункции

Процедура ПолучитьСписокВыбранныхСтатейИзРеквизитовФормы(Форма, СписокСтатей) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.Решения.Количество() > 0 Тогда
		Для Каждого СтрокаРешение Из Объект.Решения Цикл
			Если ЗначениеЗаполнено(СтрокаРешение.СтатьяБазыЗнаний) Тогда
				Если СписокСтатей.НайтиПоЗначению(СтрокаРешение.СтатьяБазыЗнаний) = Неопределено Тогда
					СписокСтатей.Добавить(СтрокаРешение.СтатьяБазыЗнаний);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла; 	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПолучитьМассивОбъектовПоРеквизитамФормы(Форма, МассивОбъектов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.Проблема.Форма.ФормаДокумента" Тогда
		
		ЗаполнитьМассивОбъектовДокументПроблема(Форма.Объект, МассивОбъектов);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.Задание.Форма.ФормаДокумента" Тогда
		
		ЗаполнитьМассивОбъектовДокументЗадание(Форма.Объект, МассивОбъектов);
		
	КонецЕсли;	
		
КонецПроцедуры

// Получает картинку из буфера обмена.
//
// Параметры:
//	ДействиеПослеПодключения
//
Процедура ПолучитьКартинкуИзБуфераОбмена(ДействиеПослеПодключения) Экспорт
		
	Если ОбщегоНазначенияКлиент.ЭтоLinuxКлиент() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В Linux данный функционал не доступен!'"));
		Возврат;
	КонецЕсли;
	
	Если ЗаданияСервер.ПроверитьНеобходимостьУстановкиUniNative() Тогда
		
		УстановкаUniNative(, ДействиеПослеПодключения);
		
	Иначе
		
		ПодключениеUniNative(ДействиеПослеПодключения);
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановкаUniNativeЗавершение(ДополнительныеПараметры) Экспорт
		
	НачатьПодключениеВнешнейКомпоненты(Новый ОписаниеОповещения("ПодключениеUniNativeЗавершение", ЭтотОбъект,
		ДополнительныеПараметры), "ОбщийМакет.UniNative", "GraphicsNative", ТипВнешнейКомпоненты.Native);	
	
КонецПроцедуры

Процедура ПодключениеUniNativeЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Если ДополнительныеПараметры.Свойство("Повторно") Тогда
			Если ДополнительныеПараметры["Повторно"] = Истина Тогда
				ПоказатьПредупреждение(, 
					НСтр("ru = 'Ошибка установки и подключения внешней компоненты для создания скриншотов (UniNative)'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		УстановкаUniNative(Истина, ДополнительныеПараметры.ДействиеПослеПодключения);
		Возврат;
	КонецЕсли;	
	
	ВК = Новый ("AddIn.GraphicsNative.GraphicsNative");
	
	// Получаем скриншот из памяти.	
	ДвоичныеДанные = ВК.ПолучитьСкриншотИзПамяти();
	
	Если ДвоичныеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'По всей видимости, не был сделан скриншот (снимок экрана)...
			|Нажмите на клавиатуре кнопку ''Print Screen'' (PtScr), только после этого нажмите кнопку ""Добавить скриншот""'"));
	Иначе
		
		Оп = ДополнительныеПараметры.ДействиеПослеПодключения;
		Если ПустаяСтрока(Оп.ИмяПроцедурыОбработкиОшибки) 
			ИЛИ Оп.МодульОбработкиОшибки = Неопределено
			ИЛИ Оп.МодульОбработкиОшибки = "" Тогда
			Оп = Новый ОписаниеОповещения(Оп.ИмяПроцедуры, Оп.Модуль, ДвоичныеДанные);
		Иначе
			Оп = Новый ОписаниеОповещения(Оп.ИмяПроцедуры, Оп.Модуль, ДвоичныеДанные, Оп.ИмяПроцедурыОбработкиОшибки, 
				Оп.МодульОбработкиОшибки);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Оп, Подключено);
		
	КонецЕсли;
	
	ЗаданияСервер.УстановитьВерсиюUniNative();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановкаUniNative(Повторно = Ложь, ДействиеПослеПодключения)
	
	ДП = Новый Структура("Повторно,ДействиеПослеПодключения", Повторно, ДействиеПослеПодключения);
	
	// Установка
	НачатьУстановкуВнешнейКомпоненты(Новый ОписаниеОповещения("УстановкаUniNativeЗавершение", ЭтотОбъект, ДП), 
		"ОбщийМакет.UniNative");	
	
КонецПроцедуры

Процедура ПодключениеUniNative(ДействиеПослеПодключения)
	
	ДП = Новый Структура("ДействиеПослеПодключения", ДействиеПослеПодключения);
	
	НачатьПодключениеВнешнейКомпоненты(Новый ОписаниеОповещения("ПодключениеUniNativeЗавершение", ЭтотОбъект, ДП), "ОбщийМакет.UniNative", "GraphicsNative", ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

// Вспомогательная, используется в "РаскраситьКод1С8".
//
// Параметры:
//  Код
//	Слово
//	ТекТипСлова
//	СписокКлючевыхСлов
//	ДопустимыеЗнаки
//	мОписаниеТипаЧисло
//	ТипСлова = Неопределено
//
Процедура ДобавитьСлово(Код, Слово, ТекТипСлова, СписокКлючевыхСлов, ДопустимыеЗнаки, мОписаниеТипаЧисло, 
	ТипСлова = Неопределено)
	
	Если ПустаяСтрока(Слово) Тогда
		
		Код = Код + СтрЗаменить(СтрЗаменить(СтрЗаменить(Слово, " ", "&nbsp;"), Символы.НПП, "&nbsp;"),
						Символы.Таб, "&nbsp;&nbsp;&nbsp;&nbsp;");
		Возврат;
		
	ИначеЕсли ТипСлова = Неопределено Тогда
		
		нсл = НРег(СокрП(Слово));
		Если СтрНайти(СписокКлючевыхСлов, нсл)>0 Тогда
			ТипСлова = "<keywrd>";
		ИначеЕсли Слово = "0" ИЛИ мОписаниеТипаЧисло.ПривестиЗначение(Слово) <> 0 Тогда
			ТипСлова = "<num>";
		Иначе
			ТипСлова = "<text>";
			ЭтоЧисло = Истина;
			Для сч = 1 по СтрДлина(нсл) Цикл
				ТекСимв = Сред(нсл, сч, 1);
				Если СтрНайти(ДопустимыеЗнаки, ТекСимв) = 0 Тогда
					ТипСлова = "<unwn>";
					Прервать;
				ИначеЕсли ТекСимв<>"0" Тогда
					ЭтоЧисло = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если ЭтоЧисло Тогда
				ТипСлова = "<num>";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Код = Код + ?(ТекТипСлова = ТипСлова, "", ТипСлова) 
		+ СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Слово, "<", "&lt;"), ">", "&gt;"), " ", "&nbsp;"), 
			Символы.НПП, "&nbsp;"), Символы.Таб, "&nbsp;&nbsp;&nbsp;&nbsp;");
	ТекТипСлова = ТипСлова;
	Слово 		= "";
	
КонецПроцедуры

Процедура ЗаполнитьМассивОбъектовДокументПроблема(Объект, МассивОбъектов)
	
	ДобавитьВМассив(МассивОбъектов, Объект.Ссылка);
	ДобавитьВМассив(МассивОбъектов, Объект.Категория);
	ДобавитьВМассив(МассивОбъектов, Объект.Сервис);
	
	Если Объект.Задания.Количество() > 0 Тогда
		Для Каждого СтрокаЗадания Из Объект.Задания Цикл
			Если ЗначениеЗаполнено(СтрокаЗадания.Задание) Тогда
				ЗаполнитьМассивОбъектовДокументЗадание(СтрокаЗадания.Задание, МассивОбъектов);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМассивОбъектовДокументЗадание(ОбъектСсылка, МассивОбъектов)
	
	Если ТипЗНЧ(ОбъектСсылка) = Тип("ДокументСсылка.Задание") Тогда	
		
		ЗаданияСервер.ЗаполнитьМассивПредметовСтатейПоДокументуЗадание(МассивОбъектов, ОбъектСсылка); 
		
	Иначе		
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.Ссылка);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.SLA);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.Сервис);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.Процесс);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.Проект);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.Инициатор);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.ТекущийЭтап);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.ТекущийИсполнитель);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.Организация);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.Клиент);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.Подразделение);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.МестоХранения);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.КарточкаНоменклатуры);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.Родитель);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.ГруппаЗадания);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.Категория);
		ДобавитьВМассив(МассивОбъектов, ОбъектСсылка.Спринт);
		Если ОбъектСсылка.Теги.Количество() > 0 Тогда
			Для Каждого СтрокаТег Из ОбъектСсылка.Теги Цикл
				ДобавитьВМассив(МассивОбъектов, СтрокаТег.Тег);
			КонецЦикла;	
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектСсылка.Ссылка) Тогда
			ЗаданияСервер.ЗаполнитьПроблемыПоДокументуЗадание(МассивОбъектов, ОбъектСсылка.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВМассив(Массив, Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Если Массив.Найти(Значение) = Неопределено Тогда
			Массив.Добавить(Значение);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти