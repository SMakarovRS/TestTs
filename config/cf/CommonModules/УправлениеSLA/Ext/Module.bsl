
////////////////////////////////////////////////////////////////////////////////
// Модуль управления SLA в системе.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция проверяет возможность права на изменение дат SLA для текущего пользователя.
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Булево - возращает Истина, если можно изменять даты.
//
Функция ДоступноИзменениеДатSLA() Экспорт

	Возврат УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskДоступноИзменениеДатSLA");
	
КонецФункции

// Выполняет проверку принадлежности сервиса и услуги к выбранному SLA.
//
// Параметры:
//	ЗаданиеОбъект - ДокументОбъект.Задание - исходное задание.
//
// Возвращаемое значение:
//	Булево - Истина, если услуга входит в SLA
//
Функция ПроверитьСервисИУслугуSLA(Знач ЗаданиеОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ЗаданиеОбъект.SLA) 
		И ЗначениеЗаполнено(ЗаданиеОбъект.Услуга) 
		И ЗначениеЗаполнено(ЗаданиеОбъект.Клиент) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	УслугиСервисов.Услуга КАК Услуга
			|ИЗ
			|	РегистрСведений.УслугиСервисов КАК УслугиСервисов
			|ГДЕ
			|	УслугиСервисов.Регистратор = &Регистратор
			|	И УслугиСервисов.Услуга = &Услуга
			|	И УслугиСервисов.Клиент = &Клиент";
		
		Запрос.УстановитьПараметр("Регистратор", ЗаданиеОбъект.SLA);
		Запрос.УстановитьПараметр("Клиент", ЗаданиеОбъект.Клиент);
		Запрос.УстановитьПараметр("Услуга", ЗаданиеОбъект.Услуга);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает данные услуги.
//
// Параметры:
//	Услуга - СправочникСсылка.Услуги - предоставляемая услуга.
//
// Возвращаемое значение:
//	Структура
//		* Процесс - СправочникСсылка.Процессы - процесс в услуге.
//		* УровеньРеакцииИВыполнения - СправочникСсылка.УровниРеакцииИВыполнения - уровни предоставления услуги.
//
Функция ДанныеУслуги(Знач Услуга) Экспорт
	
	Структура = Новый Структура;
	
	Если ЗначениеЗаполнено(Услуга) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Услуга, "Процесс, УровеньРеакцииИВыполнения");
		Структура.Вставить("Процесс", Реквизиты.Процесс);
		Структура.Вставить("УровеньРеакцииИВыполнения", Реквизиты.УровеньРеакцииИВыполнения);
		Возврат Структура;
	Иначе
		Возврат Неопределено;		
	КонецЕсли;
		
КонецФункции

// Расчитывает дату по календарю с учетом графика.
//
// Параметры:
//	Дата - Дата - дата начала.
//	ВремяВСекундах - Число - сколько надо отсчитать от этой даты с учетом графика.
//  График - СправочникСсылка.Календари - график по которому нужно посчитать.
//  ДатаОкончания - Дата - дата окончания (крайняя дата) расчетов.
//
// Возвращаемое значение:
//	Дата - дата с учетом графика.
//
Функция РассчитатьДатуПоКалендарю(Знач Дата, Знач ВремяВСекундах, Знач График, Знач ДатаОкончания) Экспорт
	
	Результат = Дата;
	МассивГрафиков = Новый Массив;
	МассивГрафиков.Добавить(График);
	ТЗ = ГрафикиРаботы.РасписанияРаботыНаПериод(МассивГрафиков, НачалоДня(Дата), КонецДня(ДатаОкончания));
	Сек = 0;
	Для Каждого Строки Из ТЗ Цикл
		
		ДатаГрафика		= Строки.ДатаГрафика;
		ВремяНачала		= Строки.ВремяНачала;
		ВремяОкончания	= Строки.ВремяОкончания;
		
		Если Не ЗначениеЗаполнено(ВремяНачала) Тогда
			ВремяНачала = Дата(1, 1, 1);
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ВремяОкончания) ИЛИ ВремяОкончания = Дата(1, 1, 1, 23, 59, 0) Тогда
			ВремяОкончания = Дата(1, 1, 1, 23, 59, 59) + 1;
		КонецЕсли;
		
		Если ДатаГрафика + Час(ВремяНачала) * 3600 < Дата Тогда
			ВремяНачала = Дата(1, 1, 1, Час(Дата), Минута(Дата), Секунда(Дата));
		КонецЕсли;
		
		Если ВремяНачала > ВремяОкончания Тогда
			Продолжить;
		КонецЕсли;
				
		Если ВремяОкончания - ВремяНачала < ВремяВСекундах - Сек Тогда			
			Сек = Сек + Число(ВремяОкончания - ВремяНачала);
			Результат = ДатаГрафика + Час(ВремяОкончания) * 3600;
		Иначе
			Результат = ДатаГрафика + Час(ВремяНачала) * 3600 + Минута(ВремяНачала) * 60 + Секунда(ВремяНачала) 
				+ ВремяВСекундах - Сек;
			Сек = 0;
			Прервать;
		КонецЕсли;		
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Занимается вычислением срока с учетом графика и интервала предоставления услуг по SLA.
//
// Параметры:
//	ВычисляемыйСрок - СправочникСсылка.ВычисляемыеСроки - механизм вычисления сроков.
//	ДатаНачала - Дата - дата начала предоставления SLA.
//	ДатаОкончания - Дата - дата окончания предоставления SLA.
//	ГрафикУслуги - СправочникСсылка.Календари - график услуги.
//
// Возвращаемое значение:
//	Дата - дата вычисленная с учетом графика предоставления услуги и начала и окончания предоставления услуг по SLA.
//
Функция РассчитатьВычисляемыйСрок(Знач ВычисляемыйСрок, Знач ДатаНачала, Знач ДатаОкончания, Знач ГрафикУслуги) Экспорт
	                                                                  
	Если ТипЗнч(ВычисляемыйСрок) = Тип("СправочникСсылка.ВычисляемыеСроки") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВычисляемыйСрок, 
			"Периодичность, Операция, ВариантВычисляемойСтроки, Месяцев, Недель, Дней, Часов, Минут");
	Иначе
		Реквизиты = ВычисляемыйСрок;
	КонецЕсли;
	
	Операция 	= ?(Реквизиты.Операция = Перечисления.ОперацииВычисляемыхСроков.Вычесть, -1, 1);
	Результат 	= ДатаНачала;
	
	Если Реквизиты.Месяцев > 0 Тогда
		Результат = ДобавитьМесяц(Результат, Операция * Реквизиты.Месяцев);
	КонецЕсли;
	Если Реквизиты.Недель > 0 Тогда
		Результат = Результат + Операция * 60 * 60 * 24 * 7 * Реквизиты.Недель;
	КонецЕсли;
	Если Реквизиты.Дней > 0 Тогда
		Результат = Результат + Операция * 60 * 60 * 24 * Реквизиты.Дней;
	КонецЕсли;	
	Если Реквизиты.Часов > 0 Тогда
		Результат = Результат + Операция * 60 * 60 * Реквизиты.Часов;
	КонецЕсли;	
	Если Реквизиты.Минут > 0 Тогда
		Результат = Результат + Операция * 60 * Реквизиты.Минут;
	КонецЕсли;
	
	ВариантыСроков = Перечисления.ВариантыПериодичностиВычисляемыхСроков;
	
	Если Реквизиты.ВариантВычисляемойСтроки = Перечисления.ВариантыВычисляемойСтроки.НачалоПериода Тогда
		
		Если Реквизиты.Периодичность = ВариантыСроков.Месяц Тогда
			Результат = НачалоМесяца(Результат);
		ИначеЕсли Реквизиты.Периодичность = ВариантыСроков.Неделя Тогда
			Результат = НачалоНедели(Результат);
		ИначеЕсли Реквизиты.Периодичность = ВариантыСроков.День Тогда
			Результат = НачалоДня(Результат);
		ИначеЕсли Реквизиты.Периодичность = ВариантыСроков.Час Тогда
			Результат = НачалоЧаса(Результат);
		ИначеЕсли Реквизиты.Периодичность = ВариантыСроков.Минута Тогда
			Результат = НачалоМинуты(Результат);
		КонецЕсли;
		
	ИначеЕсли Реквизиты.ВариантВычисляемойСтроки = Перечисления.ВариантыВычисляемойСтроки.КонецПериода Тогда
		
		Если Реквизиты.Периодичность = ВариантыСроков.Месяц Тогда
			Результат = КонецМесяца(Результат);
		ИначеЕсли Реквизиты.Периодичность = ВариантыСроков.Неделя Тогда
			Результат = КонецНедели(Результат);
		ИначеЕсли Реквизиты.Периодичность = ВариантыСроков.День Тогда
			Результат = КонецДня(Результат);
		ИначеЕсли Реквизиты.Периодичность = ВариантыСроков.Час Тогда
			Результат = КонецЧаса(Результат);
		ИначеЕсли Реквизиты.Периодичность = ВариантыСроков.Минута Тогда
			Результат = КонецМинуты(Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат < ДатаНачала Тогда
		Результат = ДатаНачала;
	КонецЕсли;
	
	// Считаем по графику, если он заполнен.
	Если ЗначениеЗаполнено(ГрафикУслуги) Тогда
		
		Секунд = Результат - ДатаНачала;
		
		// Теперь высчитываем по графику.
		Результат = РассчитатьДатуПоКалендарю(ДатаНачала, Секунд, ГрафикУслуги, ДатаОкончания);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет расчет крайних дат реакции и выполнения.
//
// Параметры:
//	Параметры - Структура
//		* Дата - Дата - дата начала.
//		* Приоритет - ПеречислениеСсылка.ПриоритетЗадания - приоритет самого задания.
//	УровеньРеакцииИВыполнения - СправочникСсылка.УровниРеакцииИВыполнения - как вычислить даты в пределах графика.
//	ГрафикУслуги - СправочникСсылка.Календари - график SLA.
//	ДатаОкончанияSLA - Дата - дата, когда будет окончен SLA.
//
// Возвращаемое значение:
//	Структура
//		* КрайняяДатаРеакции - Дата - дата реакции.
//		* КрайняяДатаВыполнения - Дата - дата выполнения.
//
Функция РассчитатьДатыSLA(Знач Параметры, Знач УровеньРеакцииИВыполнения, Знач ГрафикУслуги, Знач ДатаОкончанияSLA) Экспорт
	
	Результат = Новый Структура("КрайняяДатаРеакции, КрайняяДатаВыполнения", Дата(1, 1, 1), Дата(1, 1, 1));
	
	// Нельзя рассчитать.
	Если НЕ ЗначениеЗаполнено(УровеньРеакцииИВыполнения) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	Справочник.УровниРеакцииИВыполнения КАК УровниРеакцииИВыполнения
		|ГДЕ
		|	УровниРеакцииИВыполнения.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", УровеньРеакцииИВыполнения);
	
	ДатаДокументаЗадание = Параметры.Дата;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		// Независимый расчет
		Если Выборка.ВариантРасчета = Перечисления.ВариантыРасчетаВремениРеакцииИРешения.Независимый Тогда
			
			ВремяРеакцииСек = Выборка.ВремяРеакции * 3600;
			ВремяРешенияСек = Выборка.ВремяРешения * 3600;
			
			Если ЗначениеЗаполнено(ГрафикУслуги) Тогда				
				Результат.КрайняяДатаРеакции 	= РассчитатьДатуПоКалендарю(ДатаДокументаЗадание, 
					ВремяРеакцииСек, ГрафикУслуги, ДатаОкончанияSLA);
				Результат.КрайняяДатаВыполнения = РассчитатьДатуПоКалендарю(ДатаДокументаЗадание, 
					ВремяРеакцииСек + ВремяРешенияСек, ГрафикУслуги, ДатаОкончанияSLA);				
			Иначе
				Результат.КрайняяДатаРеакции 	= ДатаДокументаЗадание + ВремяРеакцииСек;
				Результат.КрайняяДатаВыполнения = ДатаДокументаЗадание + ВремяРеакцииСек + ВремяРешенияСек;				
			КонецЕсли;
			
		// Вычисляемый расчет
		ИначеЕсли Выборка.ВариантРасчета = Перечисления.ВариантыРасчетаВремениРеакцииИРешения.Вычисляемый Тогда
			
			Результат.КрайняяДатаРеакции 		= РассчитатьВычисляемыйСрок(Выборка.ВычисляемоеВремяРеакции,
				ДатаДокументаЗадание, ДатаОкончанияSLA, ГрафикУслуги);
			Результат.КрайняяДатаВыполнения		= РассчитатьВычисляемыйСрок(Выборка.ВычисляемоеВремяРешения,
				ДатаДокументаЗадание, ДатаОкончанияSLA, ГрафикУслуги);
			
		// Зависит от времени поступившего задания
		ИначеЕсли Выборка.ВариантРасчета 
			= Перечисления.ВариантыРасчетаВремениРеакцииИРешения.ЗависитОтВремениПоступившегоЗадания Тогда
			
			НачалоДняЗадания 	= НачалоДня(ДатаДокументаЗадание);
			ВремяЗадания		= ДатаДокументаЗадание - НачалоДня(ДатаДокументаЗадание);
			ДопВыборка 			= Выборка.Время.Выбрать();
			Пока ДопВыборка.Следующий() Цикл
				Если ДопВыборка.ВремяНачала - Дата(1, 1, 1) < ВремяЗадания И ДопВыборка.ВремяОкончания - Дата(1, 1, 1) Тогда
					
					ВремяРеакцииСек = ДопВыборка.ВремяРеакции * 3600;
					ВремяРешенияСек = ДопВыборка.ВремяРешения * 3600;
					
					Если ЗначениеЗаполнено(ГрафикУслуги) Тогда				
						Результат.КрайняяДатаРеакции 	= РассчитатьДатуПоКалендарю(ДатаДокументаЗадание, 
							ВремяРеакцииСек, ГрафикУслуги, ДатаОкончанияSLA);
						Результат.КрайняяДатаВыполнения = РассчитатьДатуПоКалендарю(ДатаДокументаЗадание, 
							ВремяРеакцииСек + ВремяРешенияСек, ГрафикУслуги, ДатаОкончанияSLA);				
					Иначе
						Результат.КрайняяДатаРеакции 	= ДатаДокументаЗадание + ВремяРеакцииСек;
						Результат.КрайняяДатаВыполнения = ДатаДокументаЗадание + ВремяРеакцииСек + ВремяРешенияСек;				
					КонецЕсли;
			
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		// Зависит от дня месяца поступившего задания 
		ИначеЕсли Выборка.ВариантРасчета 
			= Перечисления.ВариантыРасчетаВремениРеакцииИРешения.ЗависитОтДняМесяцаПоступившегоЗадания Тогда
			
			ДеньЗадания = День(ДатаДокументаЗадание);
			ДопВыборка = Выборка.ДниМесяца.Выбрать();
			Пока ДопВыборка.Следующий() Цикл
				Если ДопВыборка.ДеньНачала < ДеньЗадания И ДеньЗадания <= ДопВыборка.ДеньОкончания Тогда
					
					ВремяРеакцииСек = ДопВыборка.ВремяРеакции * 3600;
					ВремяРешенияСек = ДопВыборка.ВремяРешения * 3600;
					
					Если ЗначениеЗаполнено(ГрафикУслуги) Тогда				
						Результат.КрайняяДатаРеакции 	= РассчитатьДатуПоКалендарю(ДатаДокументаЗадание, 
							ВремяРеакцииСек, ГрафикУслуги, ДатаОкончанияSLA);
						Результат.КрайняяДатаВыполнения = РассчитатьДатуПоКалендарю(ДатаДокументаЗадание, 
							ВремяРеакцииСек + ВремяРешенияСек, ГрафикУслуги, ДатаОкончанияSLA);				
					Иначе
						Результат.КрайняяДатаРеакции 	= ДатаДокументаЗадание + ВремяРеакцииСек;
						Результат.КрайняяДатаВыполнения = ДатаДокументаЗадание + ВремяРеакцииСек + ВремяРешенияСек;				
					КонецЕсли;
			
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		// Зависит от дня недели поступившего задания
		ИначеЕсли Выборка.ВариантРасчета 
			= Перечисления.ВариантыРасчетаВремениРеакцииИРешения.ЗависитОтДняНеделиПоступившегоЗадания Тогда
			
			ДеньЗадания = Перечисления.ДниНедели.Получить(ДеньНедели(ДатаДокументаЗадание));
			ДопВыборка = Выборка.ДниНедели.Выбрать();
			Пока ДопВыборка.Следующий() Цикл
				Если ДопВыборка.ДеньНедели = ДеньЗадания Тогда
					
					ВремяРеакцииСек = ДопВыборка.ВремяРеакции * 3600;
					ВремяРешенияСек = ДопВыборка.ВремяРешения * 3600;
					
					Если ЗначениеЗаполнено(ГрафикУслуги) Тогда				
						Результат.КрайняяДатаРеакции 	= РассчитатьДатуПоКалендарю(ДатаДокументаЗадание, 
							ВремяРеакцииСек, ГрафикУслуги, ДатаОкончанияSLA);
						Результат.КрайняяДатаВыполнения = РассчитатьДатуПоКалендарю(ДатаДокументаЗадание, 
							ВремяРеакцииСек + ВремяРешенияСек, ГрафикУслуги, ДатаОкончанияSLA);				
					Иначе
						Результат.КрайняяДатаРеакции 	= ДатаДокументаЗадание + ВремяРеакцииСек;
						Результат.КрайняяДатаВыполнения = ДатаДокументаЗадание + ВремяРеакцииСек + ВремяРешенияСек;				
					КонецЕсли;
			
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		// Зависит от приоритета поступившего задания 
		ИначеЕсли Выборка.ВариантРасчета 
			= Перечисления.ВариантыРасчетаВремениРеакцииИРешения.ЗависитОтПриоритетаПоступившегоЗадания Тогда
			
			Приоритет 	= Параметры.Приоритет;
			ДопВыборка 	= Выборка.Приоритеты.Выбрать();
			Пока ДопВыборка.Следующий() Цикл
				Если ДопВыборка.Приоритет = Приоритет Тогда
					
					ВремяРеакцииСек = ДопВыборка.ВремяРеакции * 3600;
					ВремяРешенияСек = ДопВыборка.ВремяРешения * 3600;
					
					Если ЗначениеЗаполнено(ГрафикУслуги) Тогда				
						Результат.КрайняяДатаРеакции 	= РассчитатьДатуПоКалендарю(ДатаДокументаЗадание, 
							ВремяРеакцииСек, ГрафикУслуги, ДатаОкончанияSLA);
						Результат.КрайняяДатаВыполнения = РассчитатьДатуПоКалендарю(ДатаДокументаЗадание, 
							ВремяРеакцииСек + ВремяРешенияСек, ГрафикУслуги, ДатаОкончанияSLA);				
					Иначе
						Результат.КрайняяДатаРеакции 	= ДатаДокументаЗадание + ВремяРеакцииСек;
						Результат.КрайняяДатаВыполнения = ДатаДокументаЗадание + ВремяРеакцииСек + ВремяРешенияСек;				
					КонецЕсли;
			
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает крайнюю дату реакции и крайнюю дату выполнения.
//
// Параметры:
//	Задание - ДокументыСсылка.Задание или ДокументОбъект.Задание - документ основание для расчета SLA.
//
// Возвращаемое значение:
//	Структура
//
Функция РассчитатьSLA(Знач Задание) Экспорт
	
	Возврат СЛС.РассчитатьSLA(Задание);
	
КонецФункции

// Возвращает на дату для указанного клиента данные по указанной услуге.
//
// Параметры:
//	ДатаАктуальности - Дата - дата услуги.
//	Клиент - СправочникСсылка.Контрагенты, ... - клиент техподдержки.
//	Услуга - СправочникСсылка.Услуги - СправочникСсылка.Услуги - оказываемая услуга.
//
// Возвращаемое значение:
//	Структура
//		* Тариф - СправочникСсылка.Тарифы - тариф услуги клиента.
//		* УровеньРеакцииИВыполнения - СправочникСсылка.УровниРеакцииИВыполнения - уровень реакции.
//		* Контрагент - СправочникСсылка.Контрагенты - контрагент клиента.
//		* ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - договор контрагента клиента.
//		* Организация - СправочникСсылка.Организация, СправочникСсылка.Контрагент - организация оказывающая услугу.
//		* График - СправочникСсылка.Календари - график предоставления услуги.
//
Функция УслугаСервиса(Знач ДатаАктуальности, Знач Клиент, Знач Услуга) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УслугиСервисов.Регистратор КАК Регистратор,
		|	УслугиСервисов.ДатаНачала КАК ДатаНачала,
		|	УслугиСервисов.ДатаОкончания КАК ДатаОкончания,
		|	УслугиСервисов.Процесс КАК Процесс,
		|	УслугиСервисов.Тариф КАК Тариф,
		|	УслугиСервисов.УровеньРеакцииИВыполнения КАК УровеньРеакцииИВыполнения,
		|	УслугиСервисов.Контрагент КАК Контрагент,
		|	УслугиСервисов.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	УслугиСервисов.Организация КАК Организация,
		|	УслугиСервисов.График КАК График
		|ИЗ
		|	РегистрСведений.УслугиСервисов КАК УслугиСервисов
		|ГДЕ
		|	УслугиСервисов.Услуга = &Услуга
		|	И УслугиСервисов.Клиент = &Клиент
		|	И &ДатаАктуальности МЕЖДУ УслугиСервисов.ДатаНачала И УслугиСервисов.ДатаОкончания
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала УБЫВ";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Услуга", Услуга);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура();
	Результат.Вставить("Тариф", Справочники.Тарифы.ПустаяСсылка());
	Результат.Вставить("УровеньРеакцииИВыполнения", Справочники.УровниРеакцииИВыполнения.ПустаяСсылка());
	Результат.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Результат.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("График", Справочники.Календари.ПустаяСсылка());
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает на дату цену услуги по тарифу.
//
// Параметры:
//	ДатаАктуальности - Дата - дата на которую необходимо получить цену.
//	Клиент - ОпределяемыйТип.КлиентSLA - наш клиент.
//	Услуга - СправочникСсылка.Услуги - услуга по которой получаем цену.
//
// Возвращаемое значение:
//	Число - цена.
//
Функция ЦенаУслугиКлиента(Знач ДатаАктуальности, Знач Клиент, Знач Услуга) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Услуга) ИЛИ НЕ ЗначениеЗаполнено(Клиент) Тогда
		Возврат 0;
	КонецЕсли;
	
	Структура = УслугаСервиса(ДатаАктуальности, Клиент, Услуга);
	Возврат ЦенаУслугиПоТарифу(ДатаАктуальности, Структура.Тариф, Услуга);
	
КонецФункции

// Возвращает на дату цену услуги по тарифу.
//
// Параметры:
//	ДатаАктуальности - Дата - дата на которую необходимо получить цену.
//	Тариф - СправочникСсылка.Тарифы - тариф цены.
//	Услуга - СправочникСсылка.Услуги - услуга по которой получаем цену.
//
// Возвращаемое значение:
//	Число - цена.
//
Функция ЦенаУслугиПоТарифу(Знач ДатаАктуальности, Знач Тариф, Знач Услуга) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Услуга) ИЛИ НЕ ЗначениеЗаполнено(Тариф) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦеныУслугСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныУслуг.СрезПоследних(
		|			&ДатаАктуальности,
		|			Тариф = &Тариф
		|				И Услуга = &Услуга) КАК ЦеныУслугСрезПоследних";
	
	Запрос.УстановитьПараметр("Тариф", Тариф);
	Запрос.УстановитьПараметр("Услуга", Услуга);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	КонецЕсли;
	
	Возврат 0;	
	
КонецФункции

#КонецОбласти