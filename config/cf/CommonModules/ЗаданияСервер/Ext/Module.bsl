////////////////////////////////////////////////////////////////////////////////
// Модуль по управлению заданиями на сервере.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСДокументомЗадание

// Вычисляет приоритет задания по влиянию и срочности.
// Расчет согласно ITIL
// https://www.intuit.ru/studies/courses/2323/623/lecture/13578?page=2
// Таблица 12.1
//
// Параметры:
//	Влияние - ПеречислениеСсылка.Влияение
//	Срочность - ПеречислениеСсылка.Срочность
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ПриоритетЗадания
//
Функция РассчитатьПриоритет(Знач Влияние, Знач Срочность) Экспорт
	
	Если ЗначениеЗаполнено(Влияние) И ЗначениеЗаполнено(Срочность) Тогда
		ИндексПриоритета = Перечисления.Влияние.Индекс(Влияние) + Перечисления.Срочность.Индекс(Срочность);
		Возврат Перечисления.ПриоритетЗадания[ИндексПриоритета];
	КонецЕсли;
	
	// Если что-то не заполнено, пусть приоритет будет средним
	Возврат Перечисления.ПриоритетЗадания.Средний;	
	
КонецФункции

// Функция возвращает Истина в случае, когда хотя бы одно из подчиненных заданий имеет статус "Выполнено".
//
// Параметры:
//	ДокЗадание - ссылка на задание - родитель.
//
// Возвращаемое значение:
//	Истина, Ложь - среди подчиненных заданий есть "выполненные".
//
Функция ВыполненПодпроцесс(Знач ДокЗадание) Экспорт
	
	Если ТипЗнч(ДокЗадание.ТекущийЭтап) <> Тип("СправочникСсылка.Процессы")	Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоПодзадач
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	Задание.Родитель = &Родитель
		|	И Задание.Процесс = &Процесс
		|	И Задание.Выполнено = ИСТИНА";

	Запрос.УстановитьПараметр("Родитель", ДокЗадание.Ссылка);
	Запрос.УстановитьПараметр("Процесс", ДокЗадание.ТекущийЭтап);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоПодзадач > 0;
	
КонецФункции

// Функция возвращает структуру этапа по переданному УИД.
//
// Параметры:
//	ВидЭтапа - число: 0 - этап, 1 - подпроцесс.
//	УИД - уникальный идентификатор.
//
// Возвращаемое значение:
//	Структура - структура, содержащая реквизиты этапа.
//
Функция ПолучитьСтруктуруЭтапаПоУИД(Знач ВидЭтапа, Знач УИД) Экспорт
	
	Если ВидЭтапа = 0 Тогда
		Этап = Справочники.ЭтапыПроцессов.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	Иначе
		Этап = Справочники.Процессы.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Этап) Тогда
		Результат = Новый Структура();
		Результат.Вставить("Этап", 		   	 Этап);
		Результат.Вставить("Наименование", 	 Этап.Наименование);
		Результат.Вставить("НавСсылка",	   	 Этап.НавСсылка);
		Результат.Вставить("СостояниеЭтапа", Этап.СостояниеЭтапа);
		
		Возврат Результат;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает структуру этапа по переданной текстовой строке.
//
// Параметры:
//	КомандаИмя - строка (имя команды).
//
// Возвращаемое значение:
//	Структура - структура, содержащая реквизиты этапа.
//
Функция ПолучитьСтруктуруЭтапаПоИмениКоманды(Знач КомандаИмя) Экспорт
	
	ВидЭтапа = Число(Сред(КомандаИмя, 6, 1)); // 0 - этап, 1 - подпроцесс
	УИД		 = Сред(КомандаИмя, 8);
	УИД		 = Лев(УИД, 8) + "-" + Сред(УИД, 9, 4) + "-" + Сред(УИД, 13, 4) + "-" 
		+ Сред(УИД, 17, 4) + "-" + Сред(УИД, 21);
	Возврат ПолучитьСтруктуруЭтапаПоУИД(ВидЭтапа, УИД);
	
КонецФункции

// Функция возвращает структуру, содержащую реквизиты для этапа в процессе, а также дополнительные реквизиты.
//
// Параметры:
//	Объект 		 - ДокументСсылка.Задание либо структура, содержащая реквизиты задания.
//	КонечныйЭтап - СправочникСсылка.ЭтапыПроцесса - этап, на который требуется перевести задание.
//	ВернутьСтруктуруПоУмолчанию - Булево.
//
// Возвращаемое значение:
//	Структура - структура, содержащая реквизиты этапа.
//
Функция ПолучитьСтруктуруПриПереходеЗаданияНаЭтап(Знач Объект, Знач КонечныйЭтап, 
	Знач ВернутьСтруктуруПоУмолчанию = Ложь) Экспорт
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПроцессыЭтапыПроцесса.ТребоватьПриПереводеНаСледующийЭтапИсполнителя,
		|	ПроцессыЭтапыПроцесса.ИсполнительПоУмолчанию		
		|ИЗ
		|	Справочник.Процессы.Этапы КАК ПроцессыЭтапыПроцесса
		|ГДЕ
		|	ПроцессыЭтапыПроцесса.Ссылка = &Ссылка
		|	И ПроцессыЭтапыПроцесса.Этап = &КонечныйЭтап";
	
	Запрос.УстановитьПараметр("Ссылка", 		Объект.Процесс);
	Запрос.УстановитьПараметр("КонечныйЭтап", 	КонечныйЭтап);

	Выборка = Запрос.Выполнить().Выбрать();	
	Результат = Новый Структура();
	Если Выборка.Следующий() Тогда
		Результат.Вставить("ТребоватьПриПереводеНаСледующийЭтапИсполнителя",
			Выборка.ТребоватьПриПереводеНаСледующийЭтапИсполнителя);
		Результат.Вставить("ИсполнительПоУмолчанию", Выборка.ИсполнительПоУмолчанию);
	ИначеЕсли ВернутьСтруктуруПоУмолчанию И (ТипЗнч(КонечныйЭтап) = Тип("СправочникСсылка.ЭтапыПроцессов") 
		ИЛИ ТипЗнч(КонечныйЭтап) = Тип("СправочникСсылка.Процессы")) Тогда
		Результат.Вставить("ТребоватьПриПереводеНаСледующийЭтапИсполнителя", Ложь);
		Результат.Вставить("ИсполнительПоУмолчанию", Справочники.Пользователи.ПустаяСсылка());
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ТипЗнч(КонечныйЭтап) = Тип("СправочникСсылка.ЭтапыПроцессов") Тогда
		Результат.Вставить("СостояниеЭтапа", 			КонечныйЭтап.СостояниеЭтапа);
		Результат.Вставить("ЗапрашиватьКомментарий", 	КонечныйЭтап.ЗапрашиватьКомментарий);
		Результат.Вставить("МояНастройкаЗапрашиватьКомментарий",
			ХранилищеОбщихНастроек.Загрузить("ТехподдержкаЗаявки", "ПоказыватьЗапросКомментария"));
		Если Результат.ЗапрашиватьКомментарий <> 2 Тогда
			// 0 - не запрашивать // 1 - необязат // 2 - обязат.
			Если Результат.МояНастройкаЗапрашиватьКомментарий = 1 Тогда
				Результат.Вставить("ЗапрашиватьКомментарий", 1); // Всегда.
			ИначеЕсли Результат.МояНастройкаЗапрашиватьКомментарий = 2 Тогда
				Результат.Вставить("ЗапрашиватьКомментарий", 0); // Только обязательные.
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат.Вставить("СостояниеЭтапа", Перечисления.СостоянияЭтаповПроцесса.Подпроцесс);
		Результат.Вставить("ЗапрашиватьКомментарий", 0);
	КонецЕсли;
	
	Результат.Вставить("КартинкаЭтапа", 			КонечныйЭтап.Картинка.Получить());
	Результат.Вставить("НаименованиеЭтапа", 		СокрЛП(КонечныйЭтап.Наименование));
	Результат.Вставить("НаименованиеТекущегоЭтапа", СокрЛП(Объект.ТекущийЭтап.Наименование));
	
	Если Объект.Процесс.НеИспользоватьКомментарии И Результат.МояНастройкаЗапрашиватьКомментарий<>1 Тогда
		Результат.Вставить("ЗапрашиватьКомментарий", Ложь);
	КонецЕсли;
	
	Результат.Вставить("РазрешеныПриватныеКомментарии",
		ЗаданияСервер.ПроверитьТекущийИсполнительЗадания(Объект, Пользователи.ТекущийПользователь()));
	Результат.Вставить("ТекущийИсполнитель", 	 Объект.ТекущийИсполнитель);
	
	Возврат Результат;
	
КонецФункции

// Функция СоздатьЗадание(Реквизиты, ДокОснование = Неопределено).
// Параметры:
//		Реквизиты - Структура, содержащая значения для заполнения реквизитов документа.
//		Основание - (необязательный) Основание, для заполнения создаваемого задания.
//
// Создаёт новое задание, записывает его и возвращает на него ссылку.
//
// Пример:
//		ДокСсылка = Результат = РедактированиеКодаСервер.СоздатьЗадание(, ДокОснование);
Функция СоздатьЗадание(Знач Реквизиты = Неопределено, Знач Основание = Неопределено) Экспорт
    
    НачатьТранзакцию();
    Попытка
    	Док 				= Документы.Задание.СоздатьДокумент();
    	Док.ДатаСоздания 	= ТекущаяДатаСеанса();
    	Док.Автор 			= Пользователи.ТекущийПользователь();
    	Если Основание <> Неопределено Тогда
    		Док.Заполнить(Основание);
    	КонецЕсли;
    	Если ТипЗнч(Реквизиты) = Тип("Структура") Тогда
    		ЗаполнитьЗначенияСвойств(Док, Реквизиты);
    	КонецЕсли;
    	Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
    	ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
    КонецПопытки;
	
	Возврат Док.Ссылка;
	
КонецФункции

// Получаем последние реквизиты инициатора по заданию.
Функция ПолучитьРеквизитыПоПоследнемуЗаданию(Знач Пользователь) Экспорт
	
	Результат = Новый Структура("Организация,Инициатор,Проект,Клиент");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Задание.Инициатор,
		|	Задание.Проект,
		|	Задание.Клиент,
		|	Задание.Организация
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	Задание.Автор = &Пользователь
		|	И Задание.Проведен = ИСТИНА
		|	И НЕ Задание.Инициатор В (&МассивПустыхСсылок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задание.Дата УБЫВ";
	
	МассивПустыхСсылок = Новый Массив;
	МассивПустыхСсылок.Добавить(Справочники.ФизическиеЛица.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Справочники.КонтактныеЛица.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Справочники.Подразделения.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Справочники.Пользователи.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Справочники.Сотрудники.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Справочники.ПотенциальныеКлиенты.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивПустыхСсылок.Добавить(Неопределено);
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("МассивПустыхСсылок", МассивПустыхСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Если ХранилищеОбщихНастроек.Загрузить("ТехподдержкаЗаявки", "ЗаполнятьПроект") = Ложь Тогда
			Результат.Проект = Неопределено;
		КонецЕсли;
		
		Если ХранилищеОбщихНастроек.Загрузить("ТехподдержкаЗаявки", "ЗаполнятьИнициатор") = Ложь Тогда
			Результат.Инициатор = Неопределено;
		КонецЕсли;
		
		Если ХранилищеОбщихНастроек.Загрузить("ТехподдержкаЗаявки", "ЗаполнятьКлиента") = Ложь Тогда
			Результат.Клиент = Неопределено;
		КонецЕсли;

		Если ХранилищеОбщихНастроек.Загрузить("ТехподдержкаЗаявки", "ЗаполнятьОрганизация") = Ложь Тогда
			Результат.Организация = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция вызывается из "ЗаданияКлиент.ПеревестиЗаданиеНаЭтап", возвращает Истина, 
// если в задании установлен новый этап НовЭтап.
//
// Параметры:
//	Док 			   - ДокументСсылка.Задание либо ДокументОбъект.Задание.
//	НовЭтап 		   - СправочникСсылка.ЭтапыПроцесса - этап, на который требуется перевести задание.
//	НеПроверятьПроцесс - Булево.
//	мТекДата 		   - Дата.
//
// Возвращаемое значение:
//	Истина - заданию установлен новый этап; если была передана ссылка, то задание записано.
//
Функция ПеревестиЗаданиеНаЭтапНаСервере(Док, Знач НовЭтап, Знач НеПроверятьПроцесс = Ложь, 
	Знач мТекДата = Неопределено) Экспорт
	
	// Служебные.
	мТекущаяДата = ?(мТекДата = Неопределено, ТекущаяДатаСеанса(), мТекДата);
	
	Если ТипЗнч(Док) = Тип("ДокументСсылка.Задание") Тогда
		Объект = Док.ПолучитьОбъект();
	Иначе
		Объект = Док;
	КонецЕсли;
	
	// (иначе не работает автозакрытие).
	Если Объект.ДатаСоздания = Дата(1, 1, 1) Тогда
		Объект.ДатаСоздания = мТекущаяДата;
	Иначе
		Объект.ДатаКорректировки = мТекущаяДата;
	КонецЕсли; 
	
	// Определяем на какой этап переходим.
	Если ТипЗнч(НеПроверятьПроцесс) = Тип("Структура") Тогда
		СтруктураПриПереходе = НеПроверятьПроцесс;
	Иначе
		СтруктураПриПереходе = ПолучитьСтруктуруПриПереходеЗаданияНаЭтап(Объект, НовЭтап, НеПроверятьПроцесс);
	
		Если СтруктураПриПереходе = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Этап не найден.'"), Объект);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПриПереходе.Свойство("ИсполнительПоУмолчанию")
		И ЗначениеЗаполнено(СтруктураПриПереходе.ИсполнительПоУмолчанию) Тогда
		Объект.ТекущийИсполнитель = СтруктураПриПереходе.ИсполнительПоУмолчанию;
	КонецЕсли;
	
	// Проверка исполнителя.
	Если СтруктураПриПереходе.ТребоватьПриПереводеНаСледующийЭтапИсполнителя
		И НЕ ЗначениеЗаполнено(Объект.ТекущийИсполнитель) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для перехода на этап необходимо указать исполнителя'"), 
			Объект);
		Возврат Ложь;
	КонецЕсли;
		
	// Установка процента.
	Если СтруктураПриПереходе.СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Выполнен
		ИЛИ СтруктураПриПереходе.СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцесса.Закрыт Тогда
		Объект.ПроцентВыполнения = 100;
	КонецЕсли;
	
	// Изменяем текущий этап.
	Объект.ТекущийЭтап = НовЭтап;
	
	Если ТипЗнч(Док) = Тип("ДокументСсылка.Задание") Тогда
		Объект.Записать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверка прав для открытия объекта
Функция ПравоОткрытияЗадания(Знач Объект) Экспорт
	
	мТекущийПользователь 	= Пользователи.ТекущийПользователь();
	СписокПодчиненных 		= УправлениеITОтделом8УФПовтИсп.СписокПодчиненныхСотрудников(мТекущийПользователь);
	МассивГрупп 			= УправлениеITОтделом8УФПовтИсп.ГруппыТекущегоПользователя();
	ПараметрыПоиска			= Новый Структура("Адресат", мТекущийПользователь);
	
	Возврат УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") 
		ИЛИ СписокПодчиненных.Найти(Объект.Автор) <> Неопределено
		ИЛИ СписокПодчиненных.Найти(Объект.ТекущийИсполнитель) <> Неопределено
		ИЛИ СписокПодчиненных.Найти(Объект.Инициатор) <> Неопределено
		ИЛИ Объект.Наблюдатели.НайтиСтроки(ПараметрыПоиска) <> Неопределено
		ИЛИ (ТипЗнч(Объект.ТекущийИсполнитель) = Тип("СправочникСсылка.ГруппыПользователей")
			И МассивГрупп.Найти(Объект.ТекущийИсполнитель) <> Неопределено)
		ИЛИ (УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий") 
			И НЕ ЗначениеЗаполнено(Объект.ТекущийИсполнитель))
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий");
	
КонецФункции

// Получает массив руководителей пользователя (включая вышестоящих руководителей).
// 	 Пользователь - СправочникСсылка.Пользователи ИЛИ Массив таких ссылок.
Функция ПолучитьРуководителейПользователя(Знач Пользователь) Экспорт
	
	ПользователейНесколько 	= ТипЗнч(Пользователь) = Тип("Массив");
	мОтвет 					= Новый Массив;
	мНайденныеРуководители 	= Новый Соответствие;	
	ЗапросРуководителей 	= Новый Запрос();
	ЗапросРуководителей.Текст =
		"ВЫБРАТЬ
		|	ПользователиПодчиненные.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи.Подчиненные КАК ПользователиПодчиненные
		|ГДЕ
		|	ПользователиПодчиненные.Подчиненный В(&Подчиненный)";
	
	Если ПользователейНесколько Тогда
		ЗапросРуководителей.УстановитьПараметр("Подчиненный", Пользователь);
		Для Каждого Элемент Из Пользователь Цикл 
			мНайденныеРуководители.Вставить(Элемент, Истина) 
		КонецЦикла;
	Иначе
		мПользователь = Новый Массив;
		мПользователь.Добавить(Пользователь);
		ЗапросРуководителей.УстановитьПараметр("Подчиненный", мПользователь);
		мНайденныеРуководители.Вставить(Пользователь, Истина);
	КонецЕсли;
	
	Результат = ЗапросРуководителей.Выполнить();
	
	// Пока не достигнем пользователя, у которого нет подчиненных.
	Пока НЕ Результат.Пустой() Цикл
		
		мТекРуководители = Результат.Выгрузить().ВыгрузитьКолонку(0);
		сч = мТекРуководители.Количество();
		
		Пока сч > 0 Цикл
			сч = сч - 1;
			Элемент = мТекРуководители[сч];
			Если мНайденныеРуководители[Элемент]=Истина Тогда
				мТекРуководители.Удалить(сч)
			Иначе
				мНайденныеРуководители[Элемент] = Истина;
				мОтвет.Вставить(0, Элемент);
			КонецЕсли;
		КонецЦикла;
		
		Если мТекРуководители.Количество() > 0 Тогда
			ЗапросРуководителей.УстановитьПараметр("Подчиненный", мТекРуководители);
			Результат = ЗапросРуководителей.Выполнить();
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат мОтвет;
	
КонецФункции

// Проверяет, что "Пользователь" подчинен "Руководитель".
// 	 Пользователь - СправочникСсылка.Пользователи ИЛИ Массив таких ссылок.
//	 Руководитель - СправочникСсылка.Пользователи (всегда только один)
Функция ПроверитьПодчиненность(Знач Пользователь, Знач Руководитель) Экспорт
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		
		Для Каждого Строки Из Пользователь.Состав Цикл
			Если Строки.Пользователь = Руководитель Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Если Пользователь = Руководитель Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПолучитьРуководителейПользователя(Пользователь).Найти(Руководитель) <> Неопределено;
	
КонецФункции

// Функция проверяет для текущего пользователя право изменения задания.
//
// Параметры:
//	Объект - ДокументСсылка.Задание.
//
// Возвращаемое значение:
//	Истина - текущий пользователь имеет право вносить изменения в задание.
//
Функция ПравоРедактированияТекущийПользователь(Знач Объект) Экспорт
	
	мТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Завершенные всегда только для чтения (если их нельзя менять).
	Если Объект.Завершено И УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИзменятьЗавершенныеЗадания") = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Для полных прав.
	// Для текущего исполнителя.
	// Для автора задание доступно в полном объеме всегда, кроме когда нельзя изменять завершенные.
	// В любом случае есть право распределения.
	Если УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") 
		ИЛИ (ТипЗнч(Объект) = Тип("ДокументОбъект.Задание") И Объект.Ссылка.Пустая())
		ИЛИ Объект.ТекущийИсполнитель = мТекущийПользователь 
		ИЛИ Объект.Автор = мТекущийПользователь 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskРаспределениеЗаданий") Тогда
		
		Возврат Истина;
		
	КонецЕсли;	
					
	// Текущий исполнитель - группа пользователей, а в эту группу пользователей входит текущий пользователь.
	Если ТипЗнч(Объект.ТекущийИсполнитель) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		МассивГруппПользователя = УправлениеITОтделом8УФ.ГруппыТекущегоПользователя();
		Если МассивГруппПользователя.Найти(Объект.ТекущийИсполнитель) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция - Сервис принадлежит проекту.
//
// Параметры:
//  Проект	 - 	СправочникСсылка.Проекты - проект у котрого проверяется если ли сервис.
//  Сервис	 - 	СправочникСсылка.Сервисы - указанный сервис
// 
// Возвращаемое значение:
//  Булево - принадлежит проекту или нет.
//
Функция СервисПринадлежитПроекту(Знач Проект, Знач Сервис) Экспорт
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПроектыСервисы.Ссылка
			|ИЗ
			|	Справочник.Проекты.Сервисы КАК ПроектыСервисы
			|ГДЕ
			|	ПроектыСервисы.Ссылка = &Проект
			|	И ПроектыСервисы.Сервис = &Сервис";
			
		Запрос.УстановитьПараметр("Проект", Проект);
		Запрос.УстановитьПараметр("Сервис", Сервис);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат НЕ РезультатЗапроса.Пустой();
			
	КонецЕсли;
	
	// Если проект не указан, то считаем, что сервис принадлежит проекту и не очищается.	
	Возврат Истина;
	
КонецФункции

// Возвращает сервисы, в которых указан проект.
//
// Параметры:
//	Проект - СправочникСсылка.Проекты - проект, который проверяем.
//	ВключатьНедоступные - Булево - включает/отключает недоступлные сервисы. По умолчанию Ложь.
//
// Возвращаемое значение:
//	Массив - сервисы.
//
Функция СервисыПроекта(Знач Проект, Знач ВключатьНедоступные = Ложь) Экспорт
	
	Массив = Новый Массив;
	
	Если ЗначениеЗаполнено(Проект) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПроектыСервисы.Сервис КАК Сервис
			|ИЗ
			|	Справочник.Проекты.Сервисы КАК ПроектыСервисы
			|ГДЕ
			|	ПроектыСервисы.Ссылка = &Проект
			|	И ПроектыСервисы.Сервис.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСервисов.ВРаботе)
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Проект", Проект);
		Если ВключатьНедоступные = Истина Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ПроектыСервисы.Сервис.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСервисов.ВРаботе)", "Истина");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Массив.Добавить(ВыборкаДетальныеЗаписи.Сервис);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

// Функция - Форматировать описание задания из HTML.
//
// Параметры:
//  ТекстHTML	 - Строка	 - текст в формате HTML.
// 
// Возвращаемое значение:
//  Строка - текстовое описание.
//
Функция ФорматироватьОписаниеЗаданияИзHTML(Знач ТекстHTML) Экспорт
	
	Результат = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекстHTML);
	Результат = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Результат);
	
	Пока СтрНайти(Результат, Символы.НПП) > 0 Цикл
		Результат = СтрЗаменить(Результат, Символы.НПП, " ");
	КонецЦикла;
	
	Пока СтрНайти(Результат, Символы.Таб) > 0 Цикл
		Результат = СтрЗаменить(Результат, Символы.Таб, " ");
	КонецЦикла;
	
	Пока СтрНайти(Результат, "  ") > 0 Цикл
		Результат = СтрЗаменить(Результат, "  ", " ");
	КонецЦикла;
	                      
	// Удаляем множество Символы.ПС и пустые <p></p>
	Пока СтрНайти(Результат, Символы.ПС + Символы.ПС) > 0 Цикл
		Результат = СтрЗаменить(Результат, Символы.ПС + Символы.ПС, Символы.ПС);
	КонецЦикла;
	
	Пока СтрНайти(Результат, " " + Символы.ПС) > 0 Цикл
		Результат = СтрЗаменить(Результат, " " + Символы.ПС, "");
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

// Функция - Получить цвета просроченного задания.
// 
// Возвращаемое значение:
//  Структура - 
//		* ЦветФона - Цвет - цвет фона.
//		* ЦветТекста - Цвет - цвет текста.
//
Функция ПолучитьЦветаПросроченногоЗадания() Экспорт
	
	Результат = Новый Структура();
	
	// ПРОСРОЧЕННЫЕ.
	Попытка
		ЦветФонаПросрочено 		= РаботаСЦветомКлиентСервер.HexВЦвет(Константы.ЦветФонаПросроченнойЗадачи.Получить());
		ЦветТекстаПросрочено 	= РаботаСЦветомКлиентСервер.HexВЦвет(Константы.ЦветТекстаПросроченнойЗадачи.Получить());
	Исключение
		ЦветФонаПросрочено 		= Новый Цвет(255, 153, 153);
		ЦветТекстаПросрочено	= WebЦвета.Черный;
	КонецПопытки;	
	
	Результат.Вставить("ЦветФона", 	ЦветФонаПросрочено);
	Результат.Вставить("ЦветТекста",ЦветТекстаПросрочено);
	
	Возврат Результат;
	
КонецФункции

// Функция - Получить цвета помеченного задания.
// 
// Возвращаемое значение:
//  Структура - 
//		* ЦветФона - цвет фона.
//		* ЦветТекста - цвет текста.
//
Функция ПолучитьЦветаПомеченногоЗадания() Экспорт
	
	Результат = Новый Структура();
	
	// ПРОСРОЧЕННЫЕ.
	Попытка
		ЦветФонаПодсвечено		= РаботаСЦветомКлиентСервер.HexВЦвет(
			УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ЦветФонаПомеченнойЗадачи"));
		ЦветТекстаПодсвечено	= РаботаСЦветомКлиентСервер.HexВЦвет(
			УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ЦветТекстаПомеченнойЗадачи"));
	Исключение
		ЦветФонаПодсвечено 		= Новый Цвет(255, 255, 204);
		ЦветТекстаПодсвечено	= WebЦвета.Черный;
	КонецПопытки;
	
	Результат.Вставить("ЦветФона", 	ЦветФонаПодсвечено);
	Результат.Вставить("ЦветТекста",ЦветТекстаПодсвечено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает организацию инициатора, если это возможно.
//
// Параметры:
//	Инициатор - ОпределяемыйТип.ИнициаторЗадания - инциатор задания.
//
// Возвращаемое значение:
//	СправочникСсылка.Организации - результат работы функции.
//
Функция ОрганизацияИнициатора(Знач Инициатор) Экспорт
	
	Если ЗначениеЗаполнено(Инициатор) Тогда
				
		Если ТипЗнч(Инициатор) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ЗначениеЗаполнено(Инициатор.Сотрудник) Тогда
				Возврат Инициатор.Сотрудник.Организация;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Сотрудники") Тогда
			Возврат Инициатор.Организация;
		ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Подразделения") Тогда
			Возврат Инициатор.Организация;
		ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос = Новый Запрос();
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Сотрудники.Организация
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники
				|ГДЕ
				|	Сотрудники.Физлицо = &Физлицо
				|	И Сотрудники.Актуальность = ИСТИНА
				|	И Сотрудники.ЭтоГруппа = ЛОЖЬ
				|
				|УПОРЯДОЧИТЬ ПО
				|	Сотрудники.Код УБЫВ";
			Запрос.УстановитьПараметр("Физлицо", Инициатор);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Организация;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции // ОрганизацияИнициатора

// Возвращает массив предметов статей базы знаний
//
// Параметры:
//	МассивОбъектов - Массив - элементы типа ДокументСсылка.Задание или ДокументСсылка.Проблема.
//
// Возвращаемое значение:
//	Массив - массив предметов.
//
Функция МассивПредметовСтатейБазыЗнаний(Знач МассивОбъектов) Экспорт
	
	МассивПредметы = Новый Массив;
	
	Для Каждого ОбъектСсылка Из МассивОбъектов Цикл
		
		Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Задание") Тогда
			ЗаполнитьМассивПредметовСтатейПоДокументуЗадание(МассивПредметы, ОбъектСсылка);
		ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Проблема") Тогда
			ЗаполнитьМассивПредметовСтатейПоДокументуПроблема(МассивПредметы, ОбъектСсылка)
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПредметы;
	
КонецФункции	

// Заполняет переденный документ по шаблону
//
// Параметры:
//	Шаблон - СправочникСсылка.ШаблоныРегламентныхЗаданий - выбранный шаблон.
//	ДокументОбъект - 
//
Процедура ЗаполнитьЗаданиеПоШаблону(Знач Шаблон, ДокументОбъект) Экспорт
	
	мТекДата 	= ТекущаяДатаСеанса();
	Реквизиты	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "Сервис,Услуга,Категория,ГруппаЗадания,
		|Инициатор,Клиент,МестоХранения,Организация,Подразделение,Срочность,Влияние,Приоритет,Процесс,
		|КарточкаНоменклатуры,Описание,ОписаниеХранилище,Проект,ЗаданиеРодитель,ТипПроцесса,Теги,Тема,
		|ТекущийИсполнитель,Наблюдатели,ЧекЛист,КодОбработки,ТекущийЭтап,Баллы");
	
	// Реквизиты
	Если ЗначениеЗаполнено(Реквизиты.Услуга) Тогда
		ДокументОбъект.Услуга					= Реквизиты.Услуга;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Категория) Тогда
		ДокументОбъект.Категория                = Реквизиты.Категория;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.ГруппаЗадания) Тогда
		ДокументОбъект.ГруппаЗадания			= Реквизиты.ГруппаЗадания;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Клиент) Тогда
		ДокументОбъект.Клиент	= Реквизиты.Клиент;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Инициатор) Тогда
		ДокументОбъект.Инициатор				= Реквизиты.Инициатор;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.МестоХранения) Тогда
		ДокументОбъект.МестоХранения			= Реквизиты.МестоХранения;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Организация) Тогда
		ДокументОбъект.Организация				= Реквизиты.Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Подразделение) Тогда
		ДокументОбъект.Подразделение			= Реквизиты.Подразделение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Срочность) Тогда
		ДокументОбъект.Срочность				= Реквизиты.Срочность;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Влияние) Тогда
		ДокументОбъект.Влияние					= Реквизиты.Влияние;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Приоритет) Тогда
		ДокументОбъект.Приоритет				= Реквизиты.Приоритет;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.КарточкаНоменклатуры) Тогда
		ДокументОбъект.КарточкаНоменклатуры		= Реквизиты.КарточкаНоменклатуры;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Сервис) Тогда
		ДокументОбъект.Сервис					= Реквизиты.Сервис;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.ТекущийИсполнитель) Тогда
		ДокументОбъект.ТекущийИсполнитель		= Реквизиты.ТекущийИсполнитель;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.ТекущийЭтап) Тогда
		ДокументОбъект.ТекущийЭтап		        = Реквизиты.ТекущийЭтап;
	КонецЕсли;
	Если Реквизиты.Баллы > 0 Тогда
		ДокументОбъект.Баллы		        	= Реквизиты.Баллы;
	КонецЕсли;
	
	ОписаниеИзменено = Ложь;
	Вложения		 = Новый Структура;
	Если НЕ ПустаяСтрока(СокрЛП(Реквизиты.Описание)) Тогда
		ДокументОбъект.Описание					= Реквизиты.Описание;
		// Описание
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ИдентификаторСообщения) Тогда
			ФД 						 = Реквизиты.ОписаниеХранилище.Получить();
			ТекстHTML 				 = "";
			ФД.ПолучитьHTML(ТекстHTML, Вложения);
			ДокументОбъект.ТекстHTML = ТекстHTML;
			ОписаниеИзменено         = Истина;
		КонецЕсли;		
	КонецЕсли;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОписаниеИзменено", ОписаниеИзменено);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ВложенияОписания", Вложения);
	
	// SLA.
	Попытка
		Структура = УправлениеSLA.РассчитатьSLA(ДокументОбъект);
		Если НЕ Структура.Свойство("Ошибки") Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, Структура);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Реквизиты.Процесс) Тогда
		ДокументОбъект.Процесс					= Реквизиты.Процесс;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		ДокументОбъект.Проект					= Реквизиты.Проект;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.ЗаданиеРодитель) Тогда
		ДокументОбъект.Родитель					= Реквизиты.ЗаданиеРодитель;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.ТипПроцесса) Тогда
		ДокументОбъект.ТипПроцесса				= Реквизиты.ТипПроцесса;
	КонецЕсли;
	Если ДокументОбъект.Дата = Дата(1, 1, 1) Тогда
		ДокументОбъект.Дата 	= мТекДата;
	КонецЕсли;
	
	// Теги
	Теги = Реквизиты.Теги.Выгрузить();
	Если Теги.Количество() > 0 Тогда
		ДокументОбъект.Теги.Загрузить(Теги);
	КонецЕсли;
	
	// Тема
	Если ПустаяСтрока(ДокументОбъект.Тема) И НЕ ПустаяСтрока(Реквизиты.Тема) Тогда
		ДокументОбъект.Тема = Реквизиты.Тема;
    КонецЕсли;
    
	// Этап
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ТекущийЭтап) Тогда
		ДокументОбъект.ТекущийЭтап	= Справочники.ЭтапыПроцессов.Новый;
	КонецЕсли;
	      
	// Наблюдатели.
	Наблюдатели = Реквизиты.Наблюдатели.Выгрузить();
	Если Наблюдатели.Количество() > 0 Тогда
		ДокументОбъект.Наблюдатели.Загрузить(Наблюдатели);
	КонецЕсли;
	
	// Чек-лист.
	ЧекЛист = Реквизиты.ЧекЛист.Выгрузить();
	Если ЧекЛист.Количество() > 0 Тогда
		ДокументОбъект.ЧекЛист.Загрузить(ЧекЛист);
		Если ДокументОбъект.ЧекЛист.Количество() > 0 Тогда
			Для Каждого Строки Из ДокументОбъект.ЧекЛист Цикл
				Если Строки.Дата = Дата(1, 1, 1) Тогда
					Строки.Дата = мТекДата;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Произвольный код.
	Попытка
		Выполнить(Реквизиты.КодОбработки);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Задание заполнено по шаблону, но произвольный код при заполнении %1 не выполнен. Ошибка: %2'"),
				Шаблон, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

// Возвращает код возвращаемый по умолчанию при создании элемента справочника "ШаблоныЗаданий".
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка - строка по умолчанию.
//
Функция КодОбработкиШаблонаЗаданияПоУмолчанию() Экспорт
	
	Возврат 
		"// Установка реквизитов документа ""Задание"" (переменная ДокументОбъект)
		|// Доступ к шаблону заполнения задания через переменную Шаблон
		|// ДокументОбъект.Тема 	 = ""Пример установки темы"";
		|// ДокументОбъект.Инициатор = Пользователи.ТекущийПользователь();
		|// ДокументОбъект.Категория = Шаблон.Категория;";
	
КонецФункции

// Выполняется с параметром Интерактивно.
Процедура АвтоматическоеСозданиеРегламентныхЗаданийИнтерактивно(Интерактивно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	мТекДата 	= ТекущаяДатаСеанса();
	мПустаяДата = Дата(1, 1, 1);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныЗаданий.Ссылка КАК Ссылка,
		|	ШаблоныЗаданий.ДатаПоследнегоЗапуска КАК ДатаПоследнегоЗапуска,
		|	ШаблоныЗаданий.Наименование КАК Наименование,
		|	ШаблоныЗаданий.РасписаниеШаблона КАК Расписание,
		|	ШаблоныЗаданий.РегламентноеЗаданиеИспользоватьПериод КАК РегламентноеЗаданиеИспользоватьПериод,
		|	ШаблоныЗаданий.РегламентноеЗаданиеДатаНачала КАК РегламентноеЗаданиеДатаНачала,
		|	ШаблоныЗаданий.РегламентноеЗаданиеДатаОкончания КАК РегламентноеЗаданиеДатаОкончания
		|ИЗ
		|	Справочник.ШаблоныЗаданий КАК ШаблоныЗаданий
		|ГДЕ
		|	ШаблоныЗаданий.ЭтоГруппа = ЛОЖЬ
		|	И ШаблоныЗаданий.Активность = ИСТИНА
		|	И ШаблоныЗаданий.ТипШаблона = ЗНАЧЕНИЕ(Перечисление.ТипыШаблоновЗаданий.РегламентноеЗадание)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШаблоныЗаданий.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоСозданных = 0;
	Пока Выборка.Следующий() Цикл
		
		Попытка
			Расписание = Выборка.Расписание.Получить();
		Исключение
			Продолжить;
		КонецПопытки;
		
		// Создавать нужно, создаем.
		Если Расписание.ТребуетсяВыполнение(мТекДата, 
			Выборка.ДатаПоследнегоЗапуска, Выборка.ДатаПоследнегоЗапуска) Тогда
			
			// Пропускаем, если включена настройка использования периода,
			// а так же даты не попадают в интервал срабатывания.
			Если Выборка.РегламентноеЗаданиеИспользоватьПериод Тогда
				
				ДН = Выборка.РегламентноеЗаданиеДатаНачала;
				ДК = Выборка.РегламентноеЗаданиеДатаОкончания;
				
				Если ДН <> мПустаяДата И ДК <> мПустаяДата Тогда
					Если мТекДата < ДН ИЛИ мТекДата > ДК Тогда 
						Продолжить;
					КонецЕсли;
				ИначеЕсли ДН = мПустаяДата И ДК < мТекДата Тогда
					Продолжить;
				ИначеЕсли мТекДата < ДН И ДК = мПустаяДата Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			// Записываем новый документ Задание.
			Документ				= Документы.Задание.СоздатьДокумент();
			
			ОписаниеИзменено = Ложь;
			Вложения		 = Новый Структура;
			
			ЗаполнитьЗаданиеПоШаблону(Выборка.Ссылка, Документ);
			
			Документ.ДополнительныеСвойства.Свойство("ОписаниеИзменено", ОписаниеИзменено);
			Документ.ДополнительныеСвойства.Свойство("ВложенияОписания", Вложения);
	
			Документ.ДатаСоздания	= мТекДата;
			Документ.Комментарий	= СтрШаблон(
				НСтр("ru = 'Создано автоматически по шаблону ""%1"" регламентного (повторяющегося) задания'"),
				Выборка.Наименование);
			Документ.СпособСоздания	= Справочники.СпособыСозданияЗаданий.РегламентнымЗаданиемПоРасписанию;
			
			Попытка
				ТекущееЗадание  = Документы.Задание.ПолучитьСсылку(Новый УникальныйИдентификатор());
				Документ.УстановитьСсылкуНового(ТекущееЗадание);
			Исключение
				Продолжить;
			КонецПопытки;	
			
			Если ОписаниеИзменено И Вложения.Количество() > 0 Тогда
				
				ТаблицаСоответствийИменВложенийИдентификаторам = Новый ТаблицаЗначений;
				ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИмяФайла");
				ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИдентификаторФайлаДляHTML");
				ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("Картинка");
				
				Для Каждого КлючИЗначение Из Вложения Цикл
					НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
					НоваяСтрока.ИмяФайла = КлючИЗначение.Ключ;
					НоваяСтрока.ИдентификаторФайлаДляHTML = "docimg_" + Строка(Новый УникальныйИдентификатор);
					НоваяСтрока.Картинка = КлючИЗначение.Значение;
				КонецЦикла;	
				
				Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
					ТекстHTML    = Документ.ТекстHTML;
					ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
					Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(ДокументHTML,
						ТаблицаСоответствийИменВложенийИдентификаторам);
					ТекстHTML    = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
				КонецЕсли;
				
				Если СтрНайти(НРег(ТекстHTML), "<body>") > 0 Тогда
					ТекстHTML = СтрЗаменить(ТекстHTML, Сред(ТекстHTML,
						СтрНайти(НРег(ТекстHTML), "<body>"), 6), "<body style=""font-family:Arial;font-size:10pt;"">");
				КонецЕсли;				
				ТекстHTML = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстHTML);				
				
				Для Каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
					
					ДвоичныеДанныеКартинки 	= Вложение.Картинка.ПолучитьДвоичныеДанные();
					АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки,
						Новый УникальныйИдентификатор);
						
					ПараметрыВложения = Новый Структура;
					ПараметрыВложения.Вставить("ИмяФайла", 
						"_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + ".png");
					ПараметрыВложения.Вставить("Размер", ДвоичныеДанныеКартинки.Размер());
					ПараметрыВложения.Вставить("ИДФайлаЭлектронногоПисьма", Вложение.ИдентификаторФайлаДляHTML);
	
					//@skip-warning
					ПрисоединенныйФайл =
						УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
							ТекущееЗадание,	АдресКартинкиВоВременномХранилище, ПараметрыВложения);					
					
				КонецЦикла;
				
				Документ.ТекстHTML = ТекстHTML;
				
			КонецЕсли;
			
			Попытка
				Документ.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Документ.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
			
			// Записываем, дату последнего запуска.
            НачатьТранзакцию();
			Попытка
				Об = Выборка.Ссылка.ПолучитьОбъект();
				Об.ДатаПоследнегоЗапуска = мТекДата;
				Об.Записать();
                ЗафиксироватьТранзакцию();
            Исключение
                ОтменитьТранзакцию();
			КонецПопытки;
			
			КоличествоСозданных = КоличествоСозданных + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Интерактивно Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Автоматически создано заданий: %1 из %2'"),
			Строка(КоличествоСозданных), Строка(Выборка.Количество())));
	КонецЕсли;
	
КонецПроцедуры // АвтоматическоеСозданиеРегламентныхЗаданийИнтерактивно

// Функция - Получить список выбора инициатора.
//
// Параметры:
//  СтрокаПоиска - Строка	 - фрагмент начала строки.
// 
// Возвращаемое значение:
//  СписокЗначений - список элементов подбора.
//
Функция ПолучитьСписокВыбораИнициатора(Знач СтрокаПоиска) Экспорт
	
	СписокВыбораИнициатора = Новый СписокЗначений;

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	
    ДанныеВыбораИнициатораПользователи 	= Справочники.Пользователи.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораИнициатораФизЛица 		= Справочники.ФизическиеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораСотрудника				= Справочники.Сотрудники.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораКонтактныеЛица			= Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораИнициатораКонтрагенты	= Справочники.Контрагенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораИнициатораПодразделения	= Справочники.Подразделения.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораОрганизации				= Справочники.Организации.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораПотенциальногоКлиента	= Справочники.ПотенциальныеКлиенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	ДанныеВыбораОрганизации				= Справочники.Организации.ПолучитьДанныеВыбора(ПараметрыВыбора);
		
	Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораПользователи Цикл
		Постфикс = НСтр("ru = '(пользователь)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение,
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораФизЛица Цикл
		Постфикс = НСтр("ru = '(физлицо)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение,
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактныеЛица Цикл
		Постфикс = НСтр("ru = '(контактное лицо)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение,
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
			+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;	
	Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораКонтрагенты Цикл
		Постфикс = НСтр("ru = '(контрагент)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение,
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораСотрудника Цикл
		Постфикс = НСтр("ru = '(сотрудник)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
    Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораПодразделения Цикл
		Постфикс = НСтр("ru = '(подразделение)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораОрганизации Цикл
		Постфикс = НСтр("ru = '(организация)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораПотенциальногоКлиента Цикл
		Постфикс = НСтр("ru = '(потенциальный клиент)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	
    Возврат СписокВыбораИнициатора;
    
КонецФункции

// Функция - Получить список выбора наблюдателя.
//
// Параметры:
//  СтрокаПоиска - Строка	 - фрагмент начала строки.
// 
// Возвращаемое значение:
//  СписокЗначений - список элементов подбора.
//
Функция ПолучитьСписокВыбораНаблюдателя(Знач СтрокаПоиска) Экспорт

	СписокВыбораИнициатора = Новый СписокЗначений;

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);

	ДанныеВыбораИнициатораПользователи 			= Справочники.Пользователи.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораИнициатораФизЛица 				= Справочники.ФизическиеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораИнициатораКонтрагенты			= Справочники.Контрагенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораИнициатораГруппыПользователей	= Справочники.ГруппыПользователей.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораИнициатораКонтактныеЛица		= Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораИнициатораПодразделения 		= Справочники.Подразделения.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораПотенциальногоКлиента			= Справочники.ПотенциальныеКлиенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
		
	Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораПользователи Цикл
		Постфикс = НСтр("ru = '(пользователь)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораФизЛица Цикл
		Постфикс = НСтр("ru = '(физлицо)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораКонтрагенты Цикл
		Постфикс = НСтр("ru = '(контрагент)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
    Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораГруппыПользователей Цикл
		Постфикс = НСтр("ru = '(группа пользователей)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораКонтактныеЛица Цикл
		Постфикс = НСтр("ru = '(контактное лицо)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;	
	Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораПодразделения Цикл
		Постфикс = НСтр("ru = '(подразделение)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораПотенциальногоКлиента Цикл
		Постфикс = НСтр("ru = '(потенциальный клиент)'");
		СписокВыбораИнициатора.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	
    Возврат СписокВыбораИнициатора;
    
КонецФункции

// Функция - Получить список выбора клиента.
//
// Параметры:
//  СтрокаПоиска - Строка	 - фрагмент начала строки.
// 
// Возвращаемое значение:
//  СписокЗначений - список элементов подбора.
//
Функция ПолучитьСписокВыбораКлиента(Знач СтрокаПоиска) Экспорт
	
	СписокВыбораКлиента = Новый СписокЗначений;

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	
    ДанныеВыбораИнициатораПользователи 	= Справочники.Пользователи.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораИнициатораФизЛица 		= Справочники.ФизическиеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораСотрудника				= Справочники.Сотрудники.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораКонтактныеЛица			= Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораИнициатораКонтрагенты	= Справочники.Контрагенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораИнициатораПодразделения	= Справочники.Подразделения.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ДанныеВыбораОрганизации				= Справочники.Организации.ПолучитьДанныеВыбора(ПараметрыВыбора);		
		
	Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораПользователи Цикл
		Постфикс = НСтр("ru = '(пользователь)'");
		СписокВыбораКлиента.Добавить(ЭлементСписка.Значение,
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораФизЛица Цикл
		Постфикс = НСтр("ru = '(физлицо)'");
		СписокВыбораКлиента.Добавить(ЭлементСписка.Значение,
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактныеЛица Цикл
		Постфикс = НСтр("ru = '(контактное лицо)'");
		СписокВыбораКлиента.Добавить(ЭлементСписка.Значение,
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
			+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;	
	Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораКонтрагенты Цикл
		Постфикс = НСтр("ru = '(контрагент)'");
		СписокВыбораКлиента.Добавить(ЭлементСписка.Значение,
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораСотрудника Цикл
		Постфикс = НСтр("ru = '(сотрудник)'");
		СписокВыбораКлиента.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
    Для Каждого ЭлементСписка Из ДанныеВыбораИнициатораПодразделения Цикл
		Постфикс = НСтр("ru = '(подразделение)'");
		СписокВыбораКлиента.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДанныеВыбораОрганизации Цикл
		Постфикс = НСтр("ru = '(организация)'");
		СписокВыбораКлиента.Добавить(ЭлементСписка.Значение, 
			УправлениеITОтделом8УФ.ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) 
				+ " " + Постфикс, СтрокаПоиска));
	КонецЦикла;	
	
    Возврат СписокВыбораКлиента;
    
КонецФункции

// Возвращает массив доступных этапов для пользователя в процессе.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - пользователь, для которого возвращаем результат.
//	Процесс - СправочникСсылка.Процессы - процесс
//
// Возвращаемое значение:
//	Массив
//
Функция МассивДоступныхЭтаповДляПеревода(Знач Пользователь, Знач Процесс) Экспорт
	
//	Результат = Новый Массив;
//	
//	Если НЕ ЗначениеЗаполнено(Процесс) ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") Тогда
//		Возврат Неопределено;		
//	КонецЕсли;
	
	Возврат Неопределено;
	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	ПроцессыИсполнителиЭтапов.Этап КАК Этап,
//		|	ПроцессыИсполнителиЭтапов.Исполнитель КАК Исполнитель
//		|ИЗ
//		|	Справочник.Процессы.ИсполнителиЭтапов КАК ПроцессыИсполнителиЭтапов
//		|ГДЕ
//		|	ПроцессыИсполнителиЭтапов.Ссылка = &Процесс";
//	Запрос.УстановитьПараметр("Процесс", Процесс);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		Выборка = РезультатЗапроса.Выбрать();
//		Пока Выборка.Следующий() Цикл
//			Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
//				Этап = Неопределено;
//				Если ТипЗнч(Выборка.Исполнитель) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
//					Если Выборка.Исполнитель.Состав.Найти(Пользователь, "Пользователь") <> Неопределено Тогда
//						Этап = Выборка.Этап;
//					КонецЕсли;
//				Иначе
//					Если Выборка.Исполнитель = Пользователь Тогда
//						Этап = Выборка.Этап;
//					КонецЕсли;
//				КонецЕсли;
//				Если Этап <> Неопределено Тогда
//					Если Результат.Найти(Этап) = Неопределено Тогда
//						Результат.Добавить(Этап);
//					КонецЕсли;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	Возврат Результат;
	
КонецФункции

// Выполняет перенос всех комментариев одного задания в другое.
//
// Параметры:
//	ЗаданиеОснование - ДокументСсылка.Задание - документ куда переносим.
//	НастройкаПереноса - Структура
//		* Задание - ДокументСсылка.Задание - документ откуда переносим.
//		* ПеренестиОписаниеЗаданияВКомментарий - Булево - переносить описание задания в том числе.
//		* ПометитьНаУдалениеЗадание - Булево - пометить или нет задание откуда переносим.
//
Функция ПеренестиПерепискуПоЗаданию(ЗаданиеОснование, НастройкаПереноса) Экспорт
	
	Результат = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Источник = НастройкаПереноса.Задание.ПолучитьОбъект();
	
	// Переносим Описание в комментарий (если необходимо)
	Если НастройкаПереноса.ПеренестиОписаниеЗаданияВКомментарий = Истина Тогда
		
		// Загружаем текст.
		ТекстHTML			= Источник.ТекстHTML;
		
		// Обработка приложенных файлов.
		ЗапросВложений = Новый Запрос();
		ЗапросВложений.Текст =
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	Справочник.ЗаданиеПрисоединенныеФайлы КАК ЗаданиеПрисоединенныеФайлы
			|ГДЕ
			|	ЗаданиеПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
		ЗапросВложений.УстановитьПараметр("ВладелецФайла", Источник.Ссылка);
		Вложения = ЗапросВложений.Выполнить().Выгрузить();
		
		ПараметрыКомментария = Новый Структура();
		ПараметрыКомментария.Вставить("СсылкаНаОбъект", 	ЗаданиеОснование);
		ПараметрыКомментария.Вставить("ТекстСообщения", 	ТекстHTML);
		ПараметрыКомментария.Вставить("ДатаСообщения", 		Источник.Дата);
		ПараметрыКомментария.Вставить("Автор", 				Источник.Автор);
		ПараметрыКомментария.Вставить("ИдентификаторСообщения", Источник.ИдентификаторСообщения);
		ПараметрыКомментария.Вставить("ЗаписыватьДокументОснование", Истина);
		ПараметрыКомментария.Вставить("ПриложенныеФайлы", 	Вложения);
		ПараметрыКомментария.Вставить("УчетнаяЗаписьЭлектроннойПочты", Источник.УчетнаяЗаписьЭлектроннойПочты);
		
		Попытка
			Комментарии.Добавить(ЗаданиеОснование, ПараметрыКомментария);
		Исключение
		    ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не удалось перенести основание в комментарий по причине %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
		
	КонецЕсли;
	
	// Переносим комментарии.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Комментарии.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Комментарии КАК Комментарии
		|ГДЕ
		|	Комментарии.ВладелецКомментария = &ВладелецКомментария";
	Запрос.УстановитьПараметр("ВладелецКомментария", Источник.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
        
        НачатьТранзакцию();
        Попытка
    		КомментарийОбъект = Выборка.Ссылка.ПолучитьОбъект();
    		КомментарийОбъект.ВладелецКомментария = ЗаданиеОснование;
    		КомментарийОбъект.Записать();
        	ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
        КонецПопытки;
		
	КонецЦикла;
	
	Наблюдатели = Новый Массив;
	
	// Добавляем из источника наблюдателей и автора в наблюдатели нового задания.
	АвторДругогоЗадания = Источник.Инициатор;
	Если АвторДругогоЗадания <> ЗаданиеОснование.Инициатор 
		И ЗаданиеОснование.Наблюдатели.НайтиСтроки(Новый Структура("Адресат", 
			АвторДругогоЗадания)).Количество() = 0 Тогда
		Наблюдатели.Добавить(АвторДругогоЗадания);
		
	КонецЕсли;
	Для Каждого Наблюдатель Из Источник.Наблюдатели Цикл
		Если ТипЗнч(Наблюдатель.Адресат) = Тип("СправочникСсылка.Пользователи")
			И Наблюдатель.Адресат <> ЗаданиеОснование.Инициатор 
			И ЗаданиеОснование.Наблюдатели.НайтиСтроки(Новый Структура("Адресат", 
				Наблюдатель.Адресат)).Количество() = 0 Тогда 
			Наблюдатели.Добавить(Наблюдатель.Адресат);
			
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("Наблюдатели", Наблюдатели);
		
	// Помечаем на удаление не нужный документ.
	Если НастройкаПереноса.ПометитьНаУдалениеЗадание = Истина Тогда
		
		Попытка
			Источник.УстановитьПометкуУдаления(Истина);
		Исключение
		    ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не удалось пометить на удаление основание по причине %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаПоСтрокеПоиска(СтрокаПоиска, Запрос, ДопУсловия) Экспорт
	
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		ИскомаяСтрока = СокрЛП(СтрокаПоиска);
		ЗапрещенныеСимволы = ".,:;-+/\|" + Символы.НПП + Символы.ВТаб;
		Для Индекс = 1 По СтрДлина(ЗапрещенныеСимволы) Цикл
			Пока СтрНайти(ИскомаяСтрока, Сред(ЗапрещенныеСимволы, Индекс, 1)) > 0 Цикл
				ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, Сред(ЗапрещенныеСимволы, Индекс, 1), " ");
			КонецЦикла;
		КонецЦикла;
		
		Пока СтрНайти(ИскомаяСтрока, "  ") > 0 Цикл
			ИскомаяСтрока = СтрЗаменить(ИскомаяСтрока, "  ", " ");
		КонецЦикла;
		Если НЕ ПустаяСтрока(ИскомаяСтрока) Тогда
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИскомаяСтрока, " ", Истина, 
				Истина);
				
			Если МассивСтрок[0] <> "" Тогда
				Индекс = 0;
				Для Каждого Элемент Из МассивСтрок Цикл
					Если ПустаяСтрока(Элемент) Тогда
						Продолжить;
					КонецЕсли;
					ИмяПеременной = "&Поиск" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
					ДопУсловия = ДопУсловия
						+ " И (Задание.Тема ПОДОБНО " + ИмяПеременной
						+ " ИЛИ Задание.Описание ПОДОБНО " + ИмяПеременной
						+ " ИЛИ Задание.Инициатор.Наименование ПОДОБНО " + ИмяПеременной
						+ " ИЛИ Задание.ТекущийИсполнитель.Наименование ПОДОБНО " + ИмяПеременной
						+ " ИЛИ Задание.Номер ПОДОБНО " + ИмяПеременной
						+ " ИЛИ Задание.Ссылка В 
							|	(ВЫБРАТЬ Комментарии.ВладелецКомментария КАК ВладелецКомментария
				            |     ИЗ
				            |     	Справочник.Комментарии КАК Комментарии
				            |     ГДЕ
				            |     	Комментарии.Заголовок ПОДОБНО " + ИмяПеременной + "
				            |     	ИЛИ Комментарии.Текст ПОДОБНО " + ИмяПеременной + "
				            |     	ИЛИ Комментарии.Автор.Наименование ПОДОБНО " + ИмяПеременной + ")"
						+ ")" + Символы.ПС;
					Запрос.УстановитьПараметр("Поиск" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="), "%" + Элемент + "%");
					Индекс = Индекс + 1;					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПустаяСтрока(ДопУсловия) Тогда
		Запрос.УстановитьПараметр("ДопУсловия", Истина);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловия", ДопУсловия); 
	КонецЕсли;
	
КонецПроцедуры

// Получает вложения комментария с пустым ИД.
//
// Параметры:
//  КомментарийСсылка  - СправочникСсылка.Комментарии,
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица с информацией о вложениях с пустым ИД.
//
Функция ПолучитьВложения(Знач ОбъектСсылка, Знач ВключаяПустыеИД = Ложь) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДанныеФормыСтруктура") Тогда
		ИмяОбъекта = "Задание";
		ОбъектСсылка = ОбъектСсылка.Ссылка;
	Иначе
		ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.Размер КАК Размер,
		|	Файлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма,
		|	Файлы.Расширение КАК Расширение,		
		|	Файлы.Автор КАК Автор
		|ИЗ
		|	Справочник." + ИмяОбъекта + "ПрисоединенныеФайлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И &УсловиеПустыеИД
		|	И НЕ Файлы.ПометкаУдаления";
	
	Если ВключаяПустыеИД = Ложь Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПустыеИД", "Файлы.ИДФайлаЭлектронногоПисьма <> """"");
	Иначе
		Запрос.УстановитьПараметр("УсловиеПустыеИД", Истина);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладелецФайла", ОбъектСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает все вложения задания.
//
// Параметры:
//	Задание
//
// Возвращаемое значение:
//	
//
Функция ПолучитьВложенияЗадания(Знач Задание) Экспорт
	
	Если Задание.Ссылка.Пустая() Тогда
		ВладелецФайлов       = Документы.Задание.ПустаяСсылка();
	Иначе
		ВладелецФайлов       = Задание.Ссылка;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаданиеПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ЗаданиеПрисоединенныеФайлы.Наименование КАК Наименование,
		|	ЗаданиеПрисоединенныеФайлы.Размер КАК Размер,
		|	ЗаданиеПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма,
		|	ЗаданиеПрисоединенныеФайлы.Автор КАК Автор
		|ИЗ
		|	Справочник.ЗаданиеПрисоединенныеФайлы КАК ЗаданиеПрисоединенныеФайлы
		|ГДЕ
		|	ЗаданиеПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайлов
		|	И НЕ ЗаданиеПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Осуществляет проверку является ли исполнитель текущим исполнителем задания.
//
// Параметры:
//	Объект - ДокументОбъект.Задание - документ задание.
//	Исполнитель - ОпределяемыйТип.ИсполнительЗадания - проверяемый исполнитель.
//
// Возвращаемое значение:
//   Булево - Истина, если является текущим исполнителем.
//
Функция ПроверитьТекущийИсполнительЗадания(Знач Объект, Знач Исполнитель) Экспорт
	
	Если Объект.ТекущийИсполнитель = Исполнитель Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи")
		И ТипЗнч(Объект.ТекущийИсполнитель) = Тип("СправочникСсылка.ГруппыПользователей") 
		И ЗначениеЗаполнено(Объект.ТекущийИсполнитель) Тогда
		
		Если Объект.ТекущийИсполнитель.Состав.Найти(Исполнитель, "Пользователь") <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Осуществляет проверку является ли пользователь наблюдателем задания.
//
// Параметры:
//	Объект - ДокументОбъект.Задание - документ задание.
//	Исполнитель - ОпределяемыйТип.ИсполнительЗадания - проверяемый исполнитель.
//
// Возвращаемое значение:
//   Булево - Истина, если является текущим исполнителем.
//
Функция ПроверитьНаблюдателяЗадания(Знач Объект, Знач Наблюдатель) Экспорт
		
	Возврат Объект.Наблюдатели.НайтиСтроки(Новый Структура("Адресат", Наблюдатель)).Количество() > 0;
	
КонецФункции

// Заполняет список выбора статусов заданий для переданного элемента формы.
//
// Параметры:
//	СписокВыбора - СписокЗначений - список выбора.
//
Процедура ЗаполнитьСписокВыбораСтатусовЗаданий(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("Новые", 						НСтр("ru = 'Новые'"));
	СписокВыбора.Добавить("Измененные", 				НСтр("ru = 'Измененные'"));
	СписокВыбора.Добавить("ВРаботе", 					НСтр("ru = 'В работе'"));
	СписокВыбора.Добавить("НовыеВРаботе", 				НСтр("ru = 'Новые + В работе'"));	
	СписокВыбора.Добавить("Выполненные", 				НСтр("ru = 'Выполненные'"));
	СписокВыбора.Добавить("Завершенные", 				НСтр("ru = 'Завершенные'"));
	СписокВыбора.Добавить("ВыполненныНоНеЗавершенные", 	НСтр("ru = 'Выполненные, но не завершенные'"));
	СписокВыбора.Добавить("ВыполненныеЗаНеделю",		НСтр("ru = 'Выполненные за неделю'"));
	СписокВыбора.Добавить("Приостановлено", 			НСтр("ru = 'Приостановлено'"));
	СписокВыбора.Добавить("Просрочено", 				НСтр("ru = 'Просрочено (Все)'"));
	СписокВыбора.Добавить("ПросроченоНовыеВРаботе", 	НСтр("ru = 'Просрочено (Новые + В работе)'"));
	СписокВыбора.Добавить("ПросроченоВыполненные", 		НСтр("ru = 'Просрочено (Выполненные)'"));
	СписокВыбора.Добавить("СрокСегодня", 				НСтр("ru = 'Срок: сегодня'"));
	СписокВыбора.Добавить("СрокЗавтра", 				НСтр("ru = 'Срок: завтра'"));
	СписокВыбора.Добавить("СрокНеделя", 				НСтр("ru = 'Срок: 7 дней'"));
	
КонецПроцедуры

// Заполняет список выбора исполнителей для переданного элемента формы.
//
// Параметры:
//	СписокВыбора - СписокЗначений - список выбора.
//
Процедура ЗаполнитьСписокВыбораИсполнителей(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Очистить();	
	СписокВыбора.Добавить(НСтр("ru = 'Я'"));	
	СписокВыбора.Добавить(НСтр("ru = 'Мои группы'"));
	СписокВыбора.Добавить(НСтр("ru = 'Подчиненные'"));
	СписокВыбора.Добавить(НСтр("ru = '<Не выбран>'"));
	СписокПодчиненных   = УправлениеITОтделом8УФ.СписокПодчиненныхСотрудников(Пользователи.ТекущийПользователь(), Ложь);
	Для Каждого Элемент Из СписокПодчиненных Цикл
		Если ТипЗнч(Элемент) = Тип("СправочникСсылка.Пользователи") Тогда
			СписокВыбора.Добавить(Элемент, Строка(Элемент));
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Удаляет элементы из талицы отборов с заданным именем.
//
// Параметры:
//	ТаблицаОтборов - ТаблицаЗначение - таблица с отборами.
//	ГруппаЭлементов - Строка - какие отборы удалить.
//
Процедура УдалитьЭлементВТаблицеОтборов(ТаблицаОтборов, Знач ГруппаЭлементов) Экспорт
	
	Индекс = ТаблицаОтборов.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если ТаблицаОтборов[Индекс].ИмяГруппыЭлементов = ГруппаЭлементов Тогда
			ТаблицаОтборов.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

// Добавить элементы в таблицу отборов.
//
// Параметры:
//	ТаблицаОтборов - ТаблицаЗначений - таблица с отборами.
//	ОтборСсылка - ЛюбаяСсылка - значение отбора.
//	ГруппаЭлементов - Строка - какой отбор добавить в таблицу.
//
Процедура ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, Знач ОтборСсылка, Знач ГруппаЭлементов) Экспорт
		
	НайденныеСтроки = ТаблицаОтборов.НайтиСтроки(Новый Структура("ЭлементОтбора, ИмяГруппыЭлементов", 
		ОтборСсылка, ГруппаЭлементов));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТаблицаОтборов.Удалить(НайденныеСтроки[0]);
	КонецЕсли;
	
	НоваяСтрока 	               = ТаблицаОтборов.Добавить();
	НоваяСтрока.ЭлементОтбора      = ОтборСсылка;
	НоваяСтрока.ИмяГруппыЭлементов = ГруппаЭлементов;
	
КонецПроцедуры

// Заполняет запрос по таблице отборов для документа "Задание".
//
// Параметры:
//	Запрос - Запрос - исходный запрос
//
// Возвращаемое значение:
//	
//
Процедура ЗаполнитьЗапросЗаданийПоОтборам(Запрос, Знач ТаблицаОтборов) Экспорт
	
	СписокСостоянийЭтапа= ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов", 
		"ОтборыГруппыСостоянияЭтапа")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокСпринтовСоздания = ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов", 
		"ОтборыГруппыСпринтСоздания")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокСпринтов		= ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов", 
		"ОтборыГруппыСпринт")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокКлиентов		= ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов",
		"ОтборыГруппыКлиент")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокИнициаторов	= ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов",
		"ОтборыГруппыИнициатор")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокТегов			= ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов",
		"ОтборыГруппыТег")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокГруппЗаданий  = ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов",
		"ОтборыГруппыЗаданий")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокОрганизаций	= ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов",
		"ОтборыГруппыОрганизация")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокМестХранения	= ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов",
		"ОтборыГруппыМестоХранения")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокКарточек		= ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов",
		"ОтборыГруппыКарточкаНоменклатуры")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокСтрокаПоиска	= ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов",
		"ОтборыСтрокаПоиска")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокИсполнителей	= ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов",
		"ОтборыГруппыИсполнителей")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокСтатусов		= ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов",
		"ОтборыГруппыСтатус")).ВыгрузитьКолонку("ЭлементОтбора");
	
	СписокПериодов		= ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов",
		"ОтборыПериоды")).ВыгрузитьКолонку("ЭлементОтбора");
	
	ОтборыГруппыПроекты = ТаблицаОтборов.Выгрузить(Новый Структура("ИмяГруппыЭлементов",
		"ОтборыГруппыПроекты")).ВыгрузитьКолонку("ЭлементОтбора");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Задание КАК Задание
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыЗаданийПоПользователям КАК РеквизитыЗаданийПоПользователям
		|		ПО (РеквизитыЗаданийПоПользователям.Объект = Задание.Ссылка)
		|		И (РеквизитыЗаданийПоПользователям.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыЗаданий КАК РеквизитыЗаданий
		|		ПО Задание.Ссылка = РеквизитыЗаданий.Объект
		|ГДЕ
		|	(&ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПолныеПрава
		|			ИЛИ (&ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ)
		|			ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И &ДопУсловия";
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава",
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
		
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекПользователь));
		
	Запрос.УстановитьПараметр("ТекущийПользователь",
		ТекПользователь);
	
	ДопУсловия 			= "";
	Статус				= "";
	ЕстьОтборПоСтатусу	= Ложь;
	
	Если СписокСтатусов.Количество() > 0 Тогда
		Статус = СписокСтатусов[0];
		ЕстьОтборПоСтатусу = Истина; 
	КонецЕсли;	
	
	#Область ОтборПоСостояниюЭтапов
	
	// Отбор по Состоянию этапа и Статусу задания (при пересечении состояний этапов и статуса задания).
	Если СписокСостоянийЭтапа.Количество() > 0
		ИЛИ Статус = "Новые"
		ИЛИ Статус = "ВРаботе"
		ИЛИ Статус = "НовыеВРаботе"
		ИЛИ Статус = "ПросроченоНовыеВРаботе"
		ИЛИ Статус = "Приостановлено" Тогда
		
		Если СписокСостоянийЭтапа.Количество() = 1 И ПустаяСтрока(Статус) Тогда
			ДопУсловия = ДопУсловия + " И Задание.ТекущийЭтап.СостояниеЭтапа = &СписокСостоянийЭтапа";
			Запрос.УстановитьПараметр("СписокСостоянийЭтапа", СписокСостоянийЭтапа[0]);
			
		ИначеЕсли ПустаяСтрока(Статус) Тогда
			ДопУсловия = ДопУсловия + " И Задание.ТекущийЭтап.СостояниеЭтапа В(&СписокСостоянийЭтапа)";
			Запрос.УстановитьПараметр("СписокСостоянийЭтапа", СписокСостоянийЭтапа);
			
		ИначеЕсли Статус = "Новые" Тогда
			Если СписокСостоянийЭтапа.Найти(Перечисления.СостоянияЭтаповПроцесса.Новый) = Неопределено Тогда
				СписокСостоянийЭтапа.Добавить(Перечисления.СостоянияЭтаповПроцесса.Новый);
			КонецЕсли;	
			Если СписокСостоянийЭтапа.Найти(Перечисления.СостоянияЭтаповПроцесса.Бэклог) = Неопределено Тогда
				СписокСостоянийЭтапа.Добавить(Перечисления.СостоянияЭтаповПроцесса.Бэклог);
			КонецЕсли;
			ДопУсловия = ДопУсловия + " И Задание.ТекущийЭтап.СостояниеЭтапа В(&СписокСостоянийЭтапа)";
			Запрос.УстановитьПараметр("СписокСостоянийЭтапа", СписокСостоянийЭтапа);
			
		ИначеЕсли Статус = "ВРаботе" Тогда
			Если СписокСостоянийЭтапа.Найти(Перечисления.СостоянияЭтаповПроцесса.Подготовка) = Неопределено Тогда
				СписокСостоянийЭтапа.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подготовка);
			КонецЕсли;	
			Если СписокСостоянийЭтапа.Найти(Перечисления.СостоянияЭтаповПроцесса.ВРаботе) = Неопределено Тогда
				СписокСостоянийЭтапа.Добавить(Перечисления.СостоянияЭтаповПроцесса.ВРаботе);
			КонецЕсли;
			Если СписокСостоянийЭтапа.Найти(Перечисления.СостоянияЭтаповПроцесса.Подпроцесс) = Неопределено Тогда
				СписокСостоянийЭтапа.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подпроцесс);
			КонецЕсли;
			ДопУсловия = ДопУсловия + " И Задание.ТекущийЭтап.СостояниеЭтапа В(&СписокСостоянийЭтапа)";
			Запрос.УстановитьПараметр("СписокСостоянийЭтапа", СписокСостоянийЭтапа);
			
		ИначеЕсли Статус = "НовыеВРаботе" ИЛИ Статус = "ПросроченоНовыеВРаботе" Тогда
			Если СписокСостоянийЭтапа.Найти(Перечисления.СостоянияЭтаповПроцесса.Новый) = Неопределено Тогда
				СписокСостоянийЭтапа.Добавить(Перечисления.СостоянияЭтаповПроцесса.Новый);
			КонецЕсли;	
			Если СписокСостоянийЭтапа.Найти(Перечисления.СостоянияЭтаповПроцесса.Бэклог) = Неопределено Тогда
				СписокСостоянийЭтапа.Добавить(Перечисления.СостоянияЭтаповПроцесса.Бэклог);
			КонецЕсли;
			Если СписокСостоянийЭтапа.Найти(Перечисления.СостоянияЭтаповПроцесса.Подготовка) = Неопределено Тогда
				СписокСостоянийЭтапа.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подготовка);
			КонецЕсли;	
			Если СписокСостоянийЭтапа.Найти(Перечисления.СостоянияЭтаповПроцесса.ВРаботе) = Неопределено Тогда
				СписокСостоянийЭтапа.Добавить(Перечисления.СостоянияЭтаповПроцесса.ВРаботе);
			КонецЕсли;
			Если СписокСостоянийЭтапа.Найти(Перечисления.СостоянияЭтаповПроцесса.Подпроцесс) = Неопределено Тогда
				СписокСостоянийЭтапа.Добавить(Перечисления.СостоянияЭтаповПроцесса.Подпроцесс);
			КонецЕсли;
			Если Статус = "НовыеВРаботе" Тогда
				ДопУсловия = ДопУсловия + " И Задание.ТекущийЭтап.СостояниеЭтапа В(&СписокСостоянийЭтапа)";
			Иначе
				ТекущаяДатаСеанса 	= ТекущаяДатаСеанса();
				ДопУсловия 			= ДопУсловия + " И (Задание.КрайняяДатаВыполнения <> ДатаВремя(1,1,1,0,0,0) 
									| И Задание.Выполнено = ЛОЖЬ И Задание.КрайняяДатаВыполнения < &ТекущаяДатаСеанса)";
				Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса);

			КонецЕсли;	
			Запрос.УстановитьПараметр("СписокСостоянийЭтапа", СписокСостоянийЭтапа);
			
		ИначеЕсли Статус = "Приостановлено" Тогда
			Если СписокСостоянийЭтапа.Найти(Перечисления.СостоянияЭтаповПроцесса.Приостановка) = Неопределено Тогда
				СписокСостоянийЭтапа.Добавить(Перечисления.СостоянияЭтаповПроцесса.Приостановка);
			КонецЕсли;	
			ДопУсловия = ДопУсловия + " И Задание.ТекущийЭтап.СостояниеЭтапа В(&СписокСостоянийЭтапа)";
			Запрос.УстановитьПараметр("СписокСостоянийЭтапа", СписокСостоянийЭтапа);

	    КонецЕсли;
		
	КонецЕсли;		

	#КонецОбласти
		
	#Область ОтборПоСтатусам
		
	Если ЕстьОтборПоСтатусу Тогда
		
		Если Статус = "Завершенные" Тогда			
			ДопУсловия = ДопУсловия + " И Задание.Завершено = ИСТИНА";
			
		ИначеЕсли Статус = "Выполненные" Тогда
			ДопУсловия = ДопУсловия + " И Задание.Выполнено = ИСТИНА";
			
		ИначеЕсли Статус = "ВыполненныНоНеЗавершенные" Тогда
	        ДопУсловия = ДопУсловия + " И Задание.Выполнено = ИСТИНА И Задание.Завершено = Ложь";
			
		ИначеЕсли Статус = "Просрочено" Тогда			
			ДопУсловия = ДопУсловия + " И (Задание.КрайняяДатаВыполнения <> ДатаВремя(1,1,1,0,0,0) 
					| И (Задание.КрайняяДатаВыполнения < &ТекущаяДатаСеанса 
					| ИЛИ Задание.КрайняяДатаВыполнения < Задание.ДатаВыполнения))";
			ТекущаяДатаСеанса 	= ТекущаяДатаСеанса();
			Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса);
			
		ИначеЕсли Статус = "ПросроченоВыполненные" Тогда
			ДопУсловия = ДопУсловия + " И (Задание.КрайняяДатаВыполнения <> ДатаВремя(1,1,1,0,0,0) 
					| И Задание.Выполнено = ИСТИНА И Задание.КрайняяДатаВыполнения < Задание.ДатаВыполнения)";
			
		ИначеЕсли Статус = "СрокСегодня" Тогда			
			ДопУсловия 	= ДопУсловия + " И (Задание.КрайняяДатаВыполнения <> ДатаВремя(1,1,1,0,0,0) 
					| И Задание.КрайняяДатаВыполнения МЕЖДУ &НачалоДня И &КонецДня)";
			мСтандартныйПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
			Запрос.УстановитьПараметр("НачалоДня", 	мСтандартныйПериод.ДатаНачала);						
			Запрос.УстановитьПараметр("КонецДня", 	мСтандартныйПериод.ДатаОкончания);
			
		ИначеЕсли Статус = "СрокЗавтра" Тогда			
			ДопУсловия 	= ДопУсловия + " И (Задание.КрайняяДатаВыполнения <> ДатаВремя(1,1,1,0,0,0) 
					| И Задание.КрайняяДатаВыполнения МЕЖДУ &НачалоДня И &КонецДня)";
			мСтандартныйПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.Завтра);
			Запрос.УстановитьПараметр("НачалоДня", 	мСтандартныйПериод.ДатаНачала);						
			Запрос.УстановитьПараметр("КонецДня", 	мСтандартныйПериод.ДатаОкончания);
			
		ИначеЕсли Статус = "СрокНеделя" Тогда			
			ДопУсловия 	= ДопУсловия + " И (Задание.КрайняяДатаВыполнения <> ДатаВремя(1,1,1,0,0,0) 
					| И Задание.КрайняяДатаВыполнения МЕЖДУ &НачалоДня И &КонецДня)";
			мСтандартныйПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.Следующие7Дней);
			Запрос.УстановитьПараметр("НачалоДня", 	мСтандартныйПериод.ДатаНачала);						
			Запрос.УстановитьПараметр("КонецДня", 	мСтандартныйПериод.ДатаОкончания);
		ИначеЕсли Статус = "Измененные" Тогда
			ДопУсловия = ДопУсловия 
				+ " И ЕСТЬNULL(РеквизитыЗаданийПоПользователям.ДатаОткрытия, ДатаВремя(1, 1, 1, 0, 0, 
				|	0)) < ЕСТЬNULL(РеквизитыЗаданий.ДатаПоследнегоИзменения, ДатаВремя(1, 1, 1, 0, 0, 0)) = ИСТИНА";
					
		КонецЕсли;		
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтборПоПроектам

	// Отбор по проектам.
	Если ОтборыГруппыПроекты.Количество() > 0 Тогда
		Если ОтборыГруппыПроекты.Количество() = 1 Тогда
			ДопУсловия = ДопУсловия + " И Задание.Проект = &ОтборыГруппыПроекты";
			Запрос.УстановитьПараметр("ОтборыГруппыПроекты", ОтборыГруппыПроекты[0]);
		Иначе	
			ДопУсловия = ДопУсловия + " И Задание.Проект В(&ОтборыГруппыПроекты)";
			Запрос.УстановитьПараметр("ОтборыГруппыПроекты", ОтборыГруппыПроекты);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтборПоСпринтамСоздания
	
	// Отбор по спринту.
	Если СписокСпринтовСоздания.Количество() > 0 Тогда
		Если СписокСпринтовСоздания.Количество() = 1 Тогда
			ДопУсловия = ДопУсловия + " И Задание.СпринтСоздания = &СписокСпринтовСоздания";
			Запрос.УстановитьПараметр("СписокСпринтовСоздания", СписокСпринтовСоздания[0]);
		Иначе
			ДопУсловия = ДопУсловия + " И Задание.СпринтСоздания В(&СписокСпринтовСоздания)";
			Запрос.УстановитьПараметр("СписокСпринтовСоздания", СписокСпринтовСоздания);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтборПоСпринтам
	
	// Отбор по спринту.
	Если СписокСпринтов.Количество() > 0 Тогда
		Если СписокСпринтов.Количество() = 1 Тогда
			ДопУсловия = ДопУсловия + " И Задание.Спринт = &СписокСпринтов";
			Запрос.УстановитьПараметр("СписокСпринтов", СписокСпринтов[0]);
		Иначе
			ДопУсловия = ДопУсловия + " И Задание.Спринт В(&СписокСпринтов)";
			Запрос.УстановитьПараметр("СписокСпринтов", СписокСпринтов);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти	
	
	#Область ОтборПоКлиенту
	
	// Отбор по клиенту.
	Если СписокКлиентов.Количество() > 0 Тогда
		Если СписокКлиентов.Количество() = 1 Тогда
			ДопУсловия = ДопУсловия + " И Задание.Клиент = &СписокКлиентов";
			Запрос.УстановитьПараметр("СписокКлиентов", СписокКлиентов[0]);
		Иначе
			ДопУсловия = ДопУсловия + " И Задание.Клиент В(&СписокКлиентов)";
			Запрос.УстановитьПараметр("СписокКлиентов", СписокКлиентов);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтборПоИнициатору
	
	// Отбор по инициатору.
	Если СписокИнициаторов.Количество() > 0 Тогда
		Если СписокИнициаторов.Количество() = 1 Тогда
			ДопУсловия = ДопУсловия + " И Задание.Инициатор = &СписокИнициаторов";
			Запрос.УстановитьПараметр("СписокИнициаторов", СписокИнициаторов[0]);
		Иначе
			ДопУсловия = ДопУсловия + " И Задание.Инициатор В(&СписокИнициаторов)";
			Запрос.УстановитьПараметр("СписокИнициаторов", СписокИнициаторов);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтборПоТегам
	
	// Отбор по тегу.
	Если СписокТегов.Количество() > 0 Тогда
		Если СписокТегов.Количество() = 1 Тогда
			ДопУсловия = ДопУсловия + " И Задание.Теги.Тег = &СписокТегов";
			Запрос.УстановитьПараметр("СписокТегов", СписокТегов[0]);
		Иначе
			ДопУсловия = ДопУсловия + " И Задание.Теги.Тег В(&СписокТегов)";
			Запрос.УстановитьПараметр("СписокТегов", СписокТегов);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтборПоГруппамЗаданий
	
	// Отбор по группе задания.
	Если СписокГруппЗаданий.Количество() > 0 Тогда
		Если СписокГруппЗаданий.Количество() = 1 Тогда
			ДопУсловия = ДопУсловия + " И Задание.ГруппаЗадания = &СписокГруппЗаданий";
			Запрос.УстановитьПараметр("СписокГруппЗаданий", СписокГруппЗаданий[0]);
		Иначе
			ДопУсловия = ДопУсловия + " И Задание.ГруппаЗадания В(&СписокГруппЗаданий)";
			Запрос.УстановитьПараметр("СписокГруппЗаданий", СписокГруппЗаданий);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтборПоОрганизациям
	
	// Отбор по организации.
	Если СписокОрганизаций.Количество() > 0 Тогда
		Если СписокОрганизаций.Количество() = 1 Тогда
			ДопУсловия = ДопУсловия + " И Задание.Организация = &СписокОрганизаций";
			Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций[0]);
		Иначе
			ДопУсловия = ДопУсловия + " И Задание.Организация В(&СписокОрганизаций)";
			Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтборПоМестамХранения
	
	// Отбор по месту хранения.
	Если СписокМестХранения.Количество() > 0 Тогда
		Если СписокМестХранения.Количество() = 1 Тогда
			ДопУсловия = ДопУсловия + " И Задание.МестоХранения = &СписокМестХранения";
			Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения[0]);
		Иначе
			ДопУсловия = ДопУсловия + " И Задание.МестоХранения В(&СписокМестХранения)";
			Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтборПоКарточкамНоменклатуры
	
	// Отбор по карточке номенклатуры.
	Если СписокКарточек.Количество() > 0 Тогда
		Если СписокКарточек.Количество() = 1 Тогда
			ДопУсловия = ДопУсловия + " И Задание.КарточкаНоменклатуры = &СписокКарточек";
			Запрос.УстановитьПараметр("СписокКарточек", СписокКарточек[0]);
		Иначе
			ДопУсловия = ДопУсловия + " И Задание.КарточкаНоменклатуры В(&СписокКарточек)";
			Запрос.УстановитьПараметр("СписокКарточек", СписокКарточек);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтборПоИсполнителям
	
	Если СписокИсполнителей.Количество() > 0 Тогда
		
		Номер = 0;
		ДопУсловияЦикла = "";
		Для Каждого Исполнитель Из СписокИсполнителей Цикл
			Если ЗначениеЗаполнено(Исполнитель) Тогда
				
				СтрокаНомер = Формат(Номер, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
				
				Если Исполнитель = НСтр("ru = 'Я'") Тогда
					ДопУсловияЦикла = ДопУсловияЦикла 
						+ ?(ПустаяСтрока(ДопУсловияЦикла),""," ИЛИ ")
						+ "Задание.ТекущийИсполнитель = &ТекущийПользователь";
					
				ИначеЕсли Исполнитель = НСтр("ru = 'Подчиненные'") Тогда
					ДопУсловияЦикла = ДопУсловияЦикла 
						+ ?(ПустаяСтрока(ДопУсловияЦикла),""," ИЛИ ")
						+ " Задание.ТекущийИсполнитель В(&СписокПодчиненныхСотрудников" + СтрокаНомер + ")";
					Запрос.УстановитьПараметр("СписокПодчиненныхСотрудников" + СтрокаНомер,
						УправлениеITОтделом8УФ.СписокПодчиненныхСотрудников(Пользователи.ТекущийПользователь(), Ложь));
					
				ИначеЕсли Исполнитель = НСтр("ru = 'Мои группы'") Тогда
					ДопУсловияЦикла = ДопУсловияЦикла 
						+ ?(ПустаяСтрока(ДопУсловияЦикла),""," ИЛИ ")
						+ " Задание.ТекущийИсполнитель В(&СписокПодчиненныхГрупп" + СтрокаНомер + ")";
					Запрос.УстановитьПараметр("СписокПодчиненныхГрупп" + СтрокаНомер,
						УправлениеITОтделом8УФ.ГруппыТекущегоПользователя());
					
				ИначеЕсли Исполнитель = НСтр("ru = '<Не выбран>'") Тогда
					ДопУсловияЦикла = ДопУсловияЦикла 
						+ ?(ПустаяСтрока(ДопУсловияЦикла),""," ИЛИ ")
						+ " Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL";
					
				Иначе
					ДопУсловияЦикла = ДопУсловияЦикла
						+ ?(ПустаяСтрока(ДопУсловияЦикла),""," ИЛИ ")
						+ " Задание.ТекущийИсполнитель = &УказанныйИсполнитель" + СтрокаНомер;
					Запрос.УстановитьПараметр("УказанныйИсполнитель" + СтрокаНомер, Исполнитель);
					
				КонецЕсли;
				
				Номер = Номер + 1;
				
			КонецЕсли;
				
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ДопУсловияЦикла) Тогда
			ДопУсловия = ДопУсловия + " И (" + ДопУсловияЦикла + ")";
		КонецЕсли;
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтборПоПериоду
	
	Если СписокПериодов.Количество() > 0 Тогда
		
		Номер = 0;
		ДопУсловияЦикла = "";
		Для Каждого ОтборПериод Из СписокПериодов Цикл
			Если ЗначениеЗаполнено(ОтборПериод) Тогда
				
				СтрокаНомер = Формат(Номер, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
				
				// Отбор по периоду.
				Если ЗначениеЗаполнено(ОтборПериод) Тогда
					ДопУсловияЦикла = ДопУсловияЦикла 
						+ ?(ПустаяСтрока(ДопУсловияЦикла),""," ИЛИ ")
						+ " (Задание.ДатаСоздания >= &ДатаНачала" + СтрокаНомер 
						+ " И Задание.ДатаСоздания <= &ДатаОкончания" + СтрокаНомер + ")";
					Запрос.УстановитьПараметр("ДатаНачала" + СтрокаНомер,    НачалоДня(ОтборПериод.ДатаНачала));
					Запрос.УстановитьПараметр("ДатаОкончания" + СтрокаНомер, КонецДня(ОтборПериод.ДатаОкончания));
				КонецЕсли;
				
				Номер = Номер + 1;
				
			КонецЕсли;
				
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ДопУсловияЦикла) Тогда
			ДопУсловия = ДопУсловия + " И (" + ДопУсловияЦикла + ")";
		КонецЕсли;
		
	КонецЕсли;
		
	#КонецОбласти
	
	#Область ОтборПоСтрокеПоиска
	
	// Отбор по тегу.
	Если СписокСтрокаПоиска.Количество() > 0 Тогда
		Для Каждого СтрокаПоиска Из СписокСтрокаПоиска Цикл
			ЗаданияСервер.УстановитьПараметрыЗапросаПоСтрокеПоиска(СтрокаПоиска, Запрос, ДопУсловия);
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
	Если СтрНайти(Запрос.Текст, "&ДопУсловия") > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловия", ДопУсловия);
	Иначе
		Запрос.УстановитьПараметр("ДопУсловия", Истина);
	КонецЕсли;	
		
КонецПроцедуры

// Возвращает массив ссылок документов "Задание" по переденным отборам.
//
// Параметры:
//	ТаблицаОтборов - ТаблицаЗначений - таблица с отборами.
//		* ЭлементОтбора - Строка, Ссылка, Период - значение отбора.
//		* ИмяГруппыЭлементов - Строка - имя отбора.
//
// Возвращаемое значение:
//	Массив - массив документов по отбору.
//
Функция МассивЗаданийПоОтборам(Знач ТаблицаОтборов) Экспорт	
	
	Если ТаблицаОтборов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	ЗаполнитьЗапросЗаданийПоОтборам(Запрос, ТаблицаОтборов);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

// Функция проверяет необходмость установки ВК UniNative.
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Истина - требуется установка.
//
Функция ПроверитьНеобходимостьУстановкиUniNative() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Платформа = "";
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Платформа = "Windows_x86";
	ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Платформа = "Windows_x86_64";
	Иначе
		Платформа = "";
	КонецЕсли;
	//@skip-warning
	ВерсияИзНастроек = ХранилищеОбщихНастроек.Загрузить("UniNative_Версия" + Платформа, ИмяПользователя(), "");
	ВстроеннаяВерсия = УправлениеITОтделом8УФПовтИсп.ПолучитьВерсиюИнтегрированнойКомпоненты("UniNative");
	
	Возврат ВстроеннаяВерсия <> ВерсияИзНастроек;
	
КонецФункции

// Функция устанавливает версию ВК UniNative.
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет.
//
Процедура УстановитьВерсиюUniNative() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Платформа = "";
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Платформа = "Windows_x86";
	ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Платформа = "Windows_x86_64";
	Иначе
		Платформа = "";
	КонецЕсли;	
	ХранилищеОбщихНастроек.Сохранить("UniNative_Версия" + Платформа, ИмяПользователя(),
		УправлениеITОтделом8УФПовтИсп.ПолучитьВерсиюИнтегрированнойКомпоненты("UniNative"));
	
КонецПроцедуры

// Функция возвращает общий вес задания.
//
// Параметры:
//	ЗаданиеОбъект - ДокументОбъект.Задание.
//
// Возвращаемое значение:
//	Число - общий вес задания.
//
Функция ОбщийВесЗадания(Знач ЗаданиеОбъект) Экспорт
	
	Результат = 0;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДинамическиеПриоритеты") <> Истина Тогда	
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокРеквизитов = Новый Массив;
	СписокРеквизитов.Добавить("ГруппаЗадания");
	СписокРеквизитов.Добавить("Инициатор");
	СписокРеквизитов.Добавить("КарточкаНоменклатуры");
	СписокРеквизитов.Добавить("Категория");
	СписокРеквизитов.Добавить("Клиент");
	СписокРеквизитов.Добавить("МестоХранения");
	СписокРеквизитов.Добавить("Организация");
	СписокРеквизитов.Добавить("Подразделение");
	СписокРеквизитов.Добавить("Проект");
	СписокРеквизитов.Добавить("Процесс");	
	СписокРеквизитов.Добавить("Сервис");
	СписокРеквизитов.Добавить("СпособСоздания");
	СписокРеквизитов.Добавить("ТекущийЭтап");
	СписокРеквизитов.Добавить("Услуга");
	СписокРеквизитов.Добавить("ТипПроцесса");
	
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		Если ЗначениеЗаполнено(ЗаданиеОбъект[Реквизит]) Тогда
			Результат = Результат + ЗаданиеОбъект[Реквизит].Вес;
		КонецЕсли;	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗаданиеОбъект.Приоритет) Тогда
		СоответствиеВесов	= УправлениеITОтделом8УФПовтИсп.ВесПриоритетовЗадания();
		Результат			= Результат + СоответствиеВесов[ЗаданиеОбъект.Приоритет];				
	КонецЕсли;	
	
	Если ЗаданиеОбъект.Вес <> 0 Тогда
		Результат = Результат + ЗаданиеОбъект.Вес;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

// Процедура устанавливает шаг корректировки веса в реквизит формы.
//
// Параметры:
//	РеквизитФормы - Реквизит формы.
//
Процедура УстановитьШагКорректировкиВеса(РеквизитФормы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДинамическиеПриоритеты") = Истина Тогда
		РеквизитФормы = Константы.ШагКорректировкиВеса.Получить();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает клиента по переданному инициатору. Или неопределено, если что-то не так.
//
// Параметры:
//	Инициатор - ОпределяемыйТип.ИнициаторЗадания - инициатор в задании.
//
// Возвращаемое значение:
// 	ОпределяемыйТип.ИнициаторЗадания - клиент для инициатора.
//
Функция КлиентИнициатора(Знач Инициатор) Экспорт

	КлиентИнициатора = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Инициатор) Тогда
		Возврат КлиентИнициатора;
	КонецЕсли;	
	
	Если ТипЗнч(Инициатор) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		 
		КлиентИнициатора = Инициатор.Владелец;
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		КлиентИнициатора = Инициатор;
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Организации") Тогда 
		
		КлиентИнициатора = Инициатор;
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Подразделения") Тогда
		
		Если ЗначениеЗаполнено(Инициатор.Организация) Тогда
			КлиентИнициатора = Инициатор.Организация;
		Иначе
			КлиентИнициатора = Инициатор;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Пользователи") Тогда 
		
		Если ЗначениеЗаполнено(Инициатор.Подразделение) Тогда
			КлиентИнициатора = Инициатор.Подразделение;
		Иначе
			КлиентИнициатора = Инициатор;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.ПотенциальныеКлиенты") Тогда 
		
		Если ЗначениеЗаполнено(КлиентИнициатора) Тогда 
			КлиентИнициатора = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Сотрудники") Тогда 
		
		Если ЗначениеЗаполнено(Инициатор.Подразделение) Тогда
			КлиентИнициатора = Инициатор.Подразделение;
		ИначеЕсли ЗначениеЗаполнено(Инициатор.Организация) Тогда
			КлиентИнициатора = Инициатор.Организация;
		Иначе
			КлиентИнициатора = Инициатор;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		
		КлиентИнициатора = Инициатор;
		
	КонецЕсли;	
	
	Возврат КлиентИнициатора;
	
КонецФункции

// Возвращает описание типов доступных типов в зависимости от того какой выбран инициатор
//
// Параметры (название, тип, дифференцированное значение)
//	Инициатор - ОпределяемыйТип.ИнициаторЗадания - инициатор в задании.
//	
// Возвращаемое значение: 
//	ОписаниеТипов - описание с типами возможных клиентов.
//
Функция ДопустимыеТипыКлиентаИнициатора(Знач Инициатор) Экспорт
	
	МассивКлиент	= Новый Массив();
	
	Если ТипЗнч(Инициатор) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			
		МассивКлиент.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Контрагенты"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Контрагенты") Тогда 
		
		МассивКлиент.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Контрагенты"));
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Организации") Тогда 
		
		МассивКлиент.Добавить(Тип("СправочникСсылка.Организации"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Подразделения"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Сотрудники"));
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Подразделения") Тогда
		
		МассивКлиент.Добавить(Тип("СправочникСсылка.Организации"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Подразделения"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Сотрудники"));
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Пользователи") Тогда 
		
		МассивКлиент.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Контрагенты"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Организации"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Подразделения"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Пользователи"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Сотрудники"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.Сотрудники") Тогда 
		
		МассивКлиент.Добавить(Тип("СправочникСсылка.Организации"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Подразделения"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Сотрудники"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		
	ИначеЕсли ТипЗнч(Инициатор) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		
		МассивКлиент.Добавить(Тип("СправочникСсылка.Пользователи"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.Сотрудники"));
		МассивКлиент.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		
	КонецЕсли;
		
	ДопустимыеТипы = Новый ОписаниеТипов(МассивКлиент, , );
	Возврат ДопустимыеТипы; 
    
КонецФункции

// Устанавливает условное оформление списка документов заданий.
//
// Параметры:
//	Список - ДинамическийСписок - список, который нужно раскрасить. 
//
Процедура УстановитьУсловноеОформлениеСпискаЗаданий(Список) Экспорт

	УО = Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы;
	УО.Очистить();

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭтапыПроцессов.Ссылка,
		|	ЭтапыПроцессов.ЦветФона,
		|	ЭтапыПроцессов.ЦветТекста
		|ИЗ
		|	Справочник.ЭтапыПроцессов КАК ЭтапыПроцессов
		|ГДЕ
		|	ЭтапыПроцессов.ЭтоГруппа = ЛОЖЬ";

	мWebЦветаБелый	= WebЦвета.Белый;
	мWebЦветаЧерный = WebЦвета.Черный;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ЦветФона 	= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ЦветФона);
			ЦветТекста 	= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ЦветТекста);
		Исключение
			ЦветФона 	= мWebЦветаБелый;
			ЦветТекста 	= мWebЦветаЧерный;
		КонецПопытки;
		
		Если ЦветФона <> мWebЦветаБелый ИЛИ ЦветТекста <> мWebЦветаЧерный Тогда
			ЭлементУО 						= УО.Добавить();
			Если ЦветФона <> мWebЦветаБелый Тогда
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
			КонецЕсли;
			Если ЦветТекста <> мWebЦветаЧерный Тогда
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
			КонецЕсли;
			ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТекущийЭтап");
			ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение 	= Выборка.Ссылка;
			
			ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Подсвечено");
			ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение 	= Ложь;
			
			ЭлементУО.РежимОтображения		= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
						
		КонецЕсли;
	КонецЦикла;
	
	// ПОМЕЧЕННЫЕ.
	ЦветаПомеченнойЗадачи			= ЗаданияСервер.ПолучитьЦветаПомеченногоЗадания();
	ЭлементУО 						= УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаПомеченнойЗадачи.ЦветФона);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаПомеченнойЗадачи.ЦветТекста);
	ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Подсвечено");
	ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение 	= Истина;
	ЭлементУО.РежимОтображения		= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	// ПРОСРОЧЕНО.
	ЦветаПросроченнойЗадачи 		= ЗаданияСервер.ПолучитьЦветаПросроченногоЗадания();
	ЭлементУО 						= УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаПросроченнойЗадачи.ЦветФона);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаПросроченнойЗадачи.ЦветТекста);
	ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Просрочено");
	ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение 	= Истина;
	ЭлементУО.РежимОтображения		= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	// ПРОЧИТАНО / НЕ ПРОЧИТАНО.
	ЭлементУО 						= УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт( , , Истина, ));
	ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Изменено");
	ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение 	= Истина;
	ЭлементУО.РежимОтображения		= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
КонецПроцедуры

// Возвращает интервал проверки изменений в форме списка заданий
// 
// Возвращаемое значение:
//	Число - интервал в секундах из настроек пользователя. Если -1, то проверка отключена, 
//	если меньше 30, то устанавливается раной 30 секундам. Если не задана то равна 5 мин.
//	
Функция ИнтервалПроверкиИзмененийЗаданийДляВсплывающихОповещений() Экспорт
		
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Результат = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, 
		"ИнтервалПроверкиИзмененийЗаданийДляВсплывающихОповещений");
		
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("Число") Тогда
		Результат = 0;		
	КонецЕсли;
		
	Если Результат = 0 Тогда
		Результат = 300;
	КонецЕсли;
	Если Результат <> -1 И Результат < 30 Тогда
		Результат = 30;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Универсальные

// Устарела. Использовать РаботаСHTML.УдалитьТегиИСпецСимволыИзТекста
// Удаляет теги и специальные символы из текста.
//
// Параметры:
//	Текст - Строка - исходный текст.
//	ФорматHTML - Булево - текст в формате HTML
//
// Возвращаемое значение:
//	Строка - строка с замененными тегами
//
Функция УдалитьТегиИСпецСимволыИзТекста(Знач Текст, Знач ФорматHTML = Истина) Экспорт
	
	Возврат РаботаСHTML.УдалитьТегиИСпецСимволыИзТекста(Текст, ФорматHTML);
	
КонецФункции // УдалитьТегиИСпецСимволыИзТекста

// Конвертация из 10-чной в любую систему счисления.
//
// Параметры:
//	Значение - Строка,Число - исходное значение.
//	Нотация - Число - основание системы счисления.
//
// Возвращаемое значение:
//	Строка - значение в нужной системе счисления.
//
Функция Из_10_В_Любую(Знач Значение = 0, Знач Нотация = 16) Экспорт
	
	Если Нотация <= 0 Тогда Возврат("") КонецЕсли;
	Значение = Число(Значение);
	Если Значение <= 0 Тогда Возврат("0") КонецЕсли;
	Значение = Цел(Значение);
	Результат = "";
	Пока Значение > 0 Цикл
		Результат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Значение % Нотация + 1, 1) + Результат;
		Значение = Цел(Значение / Нотация);		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Конвертация из любой системы счисления в 10-чную.
//
// Параметры:
//	Значение - Строка,Число - исходное значение в любой системе счисление.
//	Нотация - Число - основание системы счисления.
//
// Возвращаемое значение:
//	Строка - значение в 10-ричной системе счисления.
//
Функция Из_Любой_В_10(Знач Значение = "0", Знач Нотация = 16) Экспорт
	
	Если Нотация <= 0 Тогда Возврат(0) КонецЕсли;
	Значение = СокрЛП(Значение);
	Если Значение="0" Тогда Возврат(0) КонецЕсли;
	Результат = 0;
	Длина = СтрДлина(Значение);
	Для Х = 1 По Длина Цикл
		М = 1;
		Для У = 1 По Длина - Х Цикл М = М * Нотация КонецЦикла;
		Результат = Результат + (СтрНайти("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Сред(Значение, Х, 1)) - 1) * М;
	КонецЦикла;
	
	Возврат Окр(Результат);
	
КонецФункции

// Функция - Форматировать дату для вывода.
//
// Параметры:
//  ДатаВремя	 - 	Дата - преобразуемая дата.
// 
// Возвращаемое значение:
//  Строка - результирующая строка.
//
Функция ФорматироватьДату(Знач ДатаВремя) Экспорт
	
	Если ДатаВремя = Дата(1, 1, 1) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ДатаВремя = НачалоДня(ДатаВремя) Тогда
		Возврат Формат(ДатаВремя, "ДФ=dd.MM.yy");
	Иначе
		Возврат Формат(ДатаВремя, "ДФ='dd.MM.yy HH:mm'");
	КонецЕсли;
	
КонецФункции

// Функция переводит число из формата Dec в формат Hex.
//
Функция ЧислоDecToHex(Знач Число) Экспорт	
	
	ЧислаHex 	= "0123456789ABCDEF";
	Результат 	= "";
	Пока Число <> 0 Цикл
		Поз 		= Число % 16;
		Результат 	= Сред(ЧислаHex, Поз + 1, 1) + Результат;
		Число 		= Цел(Число / 16);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // DecToHex()

// Функция переводит шестнадцатеричное число в десятичное
// Параметры: _Hex     - Строка              - Шестнадцатеричное число
// Возвращаемое значение: Число   - Десятичное число
//
Функция HexToDecЧисло(Знач _Hex) Экспорт
	
	Если _Hex = "0" Тогда 
		Возврат 0;
	КонецЕсли;
	
	ЧислаHex 		= "0123456789ABCDEF";
	_Hex 			= СокрЛП(_Hex);
	СтаршаяСтепень 	= СтрДлина(_Hex) - 1;
	Результат 		= 0;
	счСимволов 		= 1;
	Пока СтаршаяСтепень >= 0 Цикл
		_HexСимвол 		= Сред(_Hex, счСимволов, 1);
		Представление 	= СтрНайти(ЧислаHex, _HexСимвол) - 1;
		Результат 		= Результат + Представление * Pow(16, СтаршаяСтепень);
		СтаршаяСтепень 	= СтаршаяСтепень - 1;
		СчСимволов 		= СчСимволов + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // HexToDec()   

#Область Удалить_Цвета

// Устарела. Использовать РаботаСЦветомКлиентСервер.ЦветВHex Функция - Цвет в шестнадцатиричный вид.
//
// Параметры:
//  Цвет - Цвет	 - исходный цвет.
// 
// Возвращаемое значение:
//  Строка - строка вида #AABBCC.
//
Функция ЦветВHex(Знач Цвет) Экспорт
	
	Возврат РаботаСЦветомКлиентСервер.ЦветВHex(Цвет);
	
КонецФункции

// Устарела. Использовать РаботаСЦветомКлиентСервер.HexВЦвет Возвращает из сторки в HEX-виде ее цвет.
//
// Параметры:
//	СтрокаHex - Строка - вида #RRGGBB - где RR - красный, GG - зеленый, BB - синий
//
// Возвращаемое значение:
//	Цвет - цвет.
//
Функция HexВЦвет(Знач СтрокаHex) Экспорт
    
    Возврат РаботаСЦветомКлиентСервер.HexВЦвет(СтрокаHex);
	
КонецФункции

// Устарела. Использовать РаботаСЦветомКлиентСервер.СлучайныйЦвет Создает и возвращает случайный цвет.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Цвет - случайный цвет.
//
Функция СлучайныйЦвет() Экспорт
	
	Возврат РаботаСЦветомКлиентСервер.СлучайныйЦвет();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Спринты

// Функция - Количество активных спринтов.
// 
// Возвращаемое значение:
//  Массив - массив элементов СправочникСсылка.Спринты.
//
Функция АктивныеСпринты() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Спринты.Ссылка КАК Спринт
		|ИЗ
		|	Справочник.Спринты КАК Спринты
		|ГДЕ
		|	Спринты.Завершен = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Спринты.ДатаНачала";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Спринт");
	
КонецФункции

// Возвращает массив текущих спринтов.
//
// Параметры:
//	ДатаАктуальности - Дата или Неопределено - дата на какую необходимо получить активные спринты.
//
// Возвращаемое значение:
//  Массив - массив элементов СправочникСсылка.Спринты.
//
Функция ТекущиеСпринты(Знач ДатаАктуальности = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Спринты.Ссылка КАК Спринт
		|ИЗ
		|	Справочник.Спринты КАК Спринты
		|ГДЕ
		|	Спринты.Завершен = ЛОЖЬ
		|	И Спринты.ДатаНачала <= &ДатаАктуальности
		|	И Спринты.ДатаОкончания > &ДатаАктуальности
		|
		|УПОРЯДОЧИТЬ ПО
		|	Спринты.ДатаНачала";
	
	Если ДатаАктуальности = Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	Иначе
		Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Спринт"); 	
	
КонецФункции

// Включает массив заданий в спринт.
//
// Параметры:
//	МассивЗаданий - Массив - задания.
//	Спринт - СправочникСсылка.Спринты - куда включить задания.
//
// Возвращаемое значение:
//	Булево
//
Функция ВключитьЗаданияВСпринт(Знач МассивЗаданий, Знач Спринт) Экспорт
	
	Для Каждого Элемент Из МассивЗаданий Цикл
        
        НачатьТранзакцию();
        Попытка
    		ДокОбъект 			= Элемент.Ссылка.ПолучитьОбъект();
    		ДокОбъект.Спринт 	= Спринт;
    		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
        	ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
        КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Исключает массив заданий из спринтов.
//
// Параметры:
//	МассивЗаданий - Массив - задания.
//
// Возвращаемое значение:
//	Булево
//
Функция ИсключитьЗаданияИзСпринтов(Знач МассивЗаданий) Экспорт
	
	Для Каждого Элемент Из МассивЗаданий Цикл
        
        НачатьТранзакцию();
        Попытка        
    		ДокОбъект 			= Элемент.Ссылка.ПолучитьОбъект();
    		ДокОбъект.Спринт 	= Справочники.Спринты.ПустаяСсылка();
    		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
            ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
        КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Открывает/завершает спринты.
//
// Параметры:
//	МассивСпринтов - Массив - массив спринтов.
//	Завершен - Булево - какой признак спринтам необходимо установить.
//
// Возвращаемое значение:
//	Булево - если все успешно, то возвращает Истина.
//
Функция ОткрытьИлиЗавершитьСпринты(Знач МассивСпринтов, Знач Завершен = Ложь) Экспорт
	
	Для Каждого Спринт Из МассивСпринтов Цикл
		
        НачатьТранзакцию();
        Попытка
    		СпрОбъект 			= Спринт.ПолучитьОбъект();
    		СпрОбъект.Завершен 	= Завершен;
    		СпрОбъект.Записать();
        	ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
        КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

// Возвращает массив активных заданий в спринте (не выполненных).
//
// Параметры:
//	Спринт - СправочникСсылка.Спринты - спринт по которому хотим узнать.
//
// Возвращаемое значение:
//	Массив - массив заданий.
//
Функция АктивныеЗаданияВСпринте(Знач Спринт) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.Ссылка КАК Задание
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	Задание.Спринт = &Спринт
		|	И Задание.Выполнено = ЛОЖЬ";
	Запрос.УстановитьПараметр("Спринт", Спринт);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задание");
	
КонецФункции

// Выполняет перенос заданий старого спринта в новый.
//
// Параметры:
//	СтарыйСпринт - СправочникСсылка.Спринты - старый спринт из которого необходимо перенести задания.
//	НовыйСпринт - СправочникСсылка.Спринты - новый спринт в который необходимо перенести задания.
//
Процедура ВыполнитьПереносВНовыйСпринт(Знач СтарыйСпринт, Знач НовыйСпринт) Экспорт
	
	МассивЗаданий = АктивныеЗаданияВСпринте(СтарыйСпринт);
	ВключитьЗаданияВСпринт(МассивЗаданий, НовыйСпринт);
	Для Каждого Задание Из МассивЗаданий Цикл
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'В %1 установлен спринт <%2>'"), Задание, НовыйСпринт));
	КонецЦикла;
	
КонецПроцедуры

// Возвращает последнюю дату из всех спринтов.
//
// Возвращаемое значение:
//	Дата - дата.
//
Функция ПоследняяДатаВСпринтах() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Спринты.Ссылка КАК Ссылка,
		|	Спринты.ДатаНачала КАК ДатаНачала,
		|	Спринты.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Справочник.Спринты КАК Спринты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала УБЫВ,
		|	ДатаОкончания УБЫВ";
	
	Результат 	= Дата(1, 1, 1);
	Выборка 	= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ДатаОкончания <> Дата(1, 1, 1) Тогда
			Результат = Выборка.ДатаОкончания;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(Результат = Дата(1, 1, 1), ТекущаяДатаСеанса(), Результат);
	
КонецФункции

#КонецОбласти

#Область Оценки

// Возвращает адрес веб-сервера который предназначен для оценки заданий при переходе из письма
//
// Возвращаемое значение:
//	Строка;
//
Функция АдресВебСервераДляОткрытияЗаданияИзПисьмаДляОценкиЗаданий() Экспорт
	
	АдресПубликацииИнформационнойБазыВИнтернетеДляОценкиЗаданий	= 
		УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("АдресПубликацииИнформационнойБазыВИнтернетеДляОценкиЗаданий");
	
	Если ПустаяСтрока(АдресПубликацииИнформационнойБазыВИнтернетеДляОценкиЗаданий) Тогда
		АдресВебСервераДляОткрытияЗаданияИзПисьмаДляОценкиЗаданий = 
			НСтр("ru = 'Не указан адрес веб-сервера в настройках параметров учета'");
			
	Иначе
		АдресВебСервераДляОткрытияЗаданияИзПисьмаДляОценкиЗаданий = 
			АдресПубликацииИнформационнойБазыВИнтернетеДляОценкиЗаданий;
			
		Если Прав(АдресВебСервераДляОткрытияЗаданияИзПисьмаДляОценкиЗаданий, 1) = "/" Тогда
			АдресВебСервераДляОткрытияЗаданияИзПисьмаДляОценкиЗаданий = 
				Лев(АдресВебСервераДляОткрытияЗаданияИзПисьмаДляОценкиЗаданий, 
					СтрДлина(АдресВебСервераДляОткрытияЗаданияИзПисьмаДляОценкиЗаданий) - 1);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат АдресВебСервераДляОткрытияЗаданияИзПисьмаДляОценкиЗаданий; 
	
КонецФункции

// Возвращает оформление оценок.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с оформлением.
//
Функция ПолучитьТаблицуОценок(Знач ИсточникСсылка) Экспорт
	
	ТаблицаОценок = Новый ТаблицаЗначений;
	ТаблицаОценок.Колонки.Добавить("Оценка");
	ТаблицаОценок.Колонки.Добавить("Наименование");
	ТаблицаОценок.Колонки.Добавить("УникальныйИдентификатор");
	ТаблицаОценок.Колонки.Добавить("ЦветТекста");
	ТаблицаОценок.Колонки.Добавить("ЦветТекстаHTML");
	ТаблицаОценок.Колонки.Добавить("ЦветФона");
	ТаблицаОценок.Колонки.Добавить("ЦветФонаHTML");
	ТаблицаОценок.Колонки.Добавить("ВнешнийВидОценки");
	ТаблицаОценок.Колонки.Добавить("Картинка");
	
	ТаблицаОценок.Колонки.Добавить("ТекстHTML");
	ТаблицаОценок.Колонки.Добавить("Текст");

	// Оценка строится следующим образом:
	// http://Адрес/hs/score/ЛичныйКабинетСтраницаУстановкиОценокПоЗаданию?id=ИсточникСсылка.УникальныйИдентификатор()&scoreid=СтрокаОценки.УникальныйИдентификатор
	
	АдресВебСервераДляОткрытияЗаданияИзПисьмаДляОценкиЗаданий = АдресВебСервераДляОткрытияЗаданияИзПисьмаДляОценкиЗаданий();
			
	ОтносительныйУРЛСтраницыОценок = 
		УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ЛичныйКабинетСтраницаУстановкиОценокПоЗаданию");
	Если ПустаяСтрока(ОтносительныйУРЛСтраницыОценок) Тогда
		ОтносительныйУРЛСтраницыОценок = 
			НСтр("ru = 'Не указана страница установки оценок по заданию в настройках личного кабинета'");
    Иначе
		ОтносительныйУРЛСтраницыОценок = HTTPСервисы.ОтносительныйURLСтраницы(ОтносительныйУРЛСтраницыОценок);
	КонецЕсли;
	ОтносительныйУРЛСтраницыЗадания = УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ЛичныйКабинетСтраницаЗадания");
	Если ПустаяСтрока(ОтносительныйУРЛСтраницыЗадания) Тогда
		ОтносительныйУРЛСтраницыЗадания = НСтр("ru = 'Не указана страница документа задания в настройках личного кабинета'");
    Иначе
		ОтносительныйУРЛСтраницыЗадания = HTTPСервисы.ОтносительныйURLСтраницы(ОтносительныйУРЛСтраницыЗадания);
	КонецЕсли;
	СпособУстановкиОценки = УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("СпособУстановкиОценкиЗаданияВПисьме");
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникСсылка, "Номер, Ссылка, УчетнаяЗаписьЭлектроннойПочты");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОценкиЗаданий.Ссылка КАК Оценка,
		|	ОценкиЗаданий.Наименование КАК Наименование,
		|	ОценкиЗаданий.ЦветТекста КАК ЦветТекста,
		|	ОценкиЗаданий.ЦветФона КАК ЦветФона,
		|	ОценкиЗаданий.ВнешнийВидОценки КАК ВнешнийВидОценки,
		|	ОценкиЗаданий.Картинка КАК Картинка
		|ИЗ
		|	Справочник.ОценкиЗаданий КАК ОценкиЗаданий
		|ГДЕ
		|	ОценкиЗаданий.ВыводитьВТекстеПисьма = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОценкиЗаданий.Порядок,
		|	ОценкиЗаданий.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока					= ТаблицаОценок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ЦветТекстаHTML	= Выборка.ЦветТекста;
		НоваяСтрока.ЦветФонаHTML	= Выборка.ЦветФона;
		НоваяСтрока.Картинка		= Выборка.Картинка.Получить();
		НоваяСтрока.УникальныйИдентификатор = Строка(Выборка.Оценка.УникальныйИдентификатор());
		
		АдресОценкиДляЗаданияHTML = "";
		АдресОценкиДляЗаданияТекст = "";
		Если СпособУстановкиОценки = Перечисления.СпособУстановкиОценкиЗаданияВПисьме.ЧерезЛичныйКабинет Тогда
			
			АдресОценкиДляЗаданияHTML =	АдресВебСервераДляОткрытияЗаданияИзПисьмаДляОценкиЗаданий
				+ "/hs/score/" + ОтносительныйУРЛСтраницыОценок + "?id=" + Строка(ИсточникСсылка.УникальныйИдентификатор()) 
				+ "&scoreid=" + НоваяСтрока.УникальныйИдентификатор;
			АдресОценкиДляЗаданияТекст = НСтр("ru = 'ссылка'") + ": " + АдресОценкиДляЗаданияHTML;
				
		ИначеЕсли СпособУстановкиОценки = Перечисления.СпособУстановкиОценкиЗаданияВПисьме.ОтветнымПисьмом Тогда
			
			УчетнаяЗапись = РеквизитыЗадания.УчетнаяЗаписьЭлектроннойПочты;
			Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
				УчетнаяЗапись = УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("УчетнаяЗаписьЭлектроннойПочтыПоУмолчанию");
			КонецЕсли;
			АдресПочты = ?(ЗначениеЗаполнено(УчетнаяЗапись), УчетнаяЗапись.АдресЭлектроннойПочты, "");
				
			АдресОценкиДляЗаданияHTML = СтрШаблон("mailto:%1?subject=RE: ID#%2 %3 (score %4)",
				АдресПочты, 
				УправлениеITОтделом8УФ.ДокументНомерЧислом(РеквизитыЗадания.Номер),
				РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(Выборка.Наименование),
				НоваяСтрока.УникальныйИдентификатор);
			АдресОценкиДляЗаданияТекст = СтрШаблон(НСтр("ru = 'написать письмо на %1 с темой: ""RE: ID#%2 %3 (score %4)""'"), 
				АдресПочты, 
				УправлениеITОтделом8УФ.ДокументНомерЧислом(РеквизитыЗадания.Номер),
				РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(Выборка.Наименование),
				НоваяСтрока.УникальныйИдентификатор);				
				
		КонецЕсли;
		
		ТекстКартинки = "";
		Если ТипЗнч(НоваяСтрока.Картинка) = Тип("ДвоичныеДанные") Тогда
			ТекстКартинки = СтрЗаменить(Base64Строка(НоваяСтрока.Картинка), Символы.ВК + Символы.ПС, "");
		ИначеЕсли ТипЗнч(НоваяСтрока.Картинка) = Тип("Картинка") Тогда
			ДД = НоваяСтрока.Картинка.ПолучитьДвоичныеДанные();
			ТекстКартинки = СтрЗаменить(Base64Строка(ДД), Символы.ВК + Символы.ПС, "");
		КонецЕсли;
		
		НоваяСтрока.ТекстHTML = "";
		Если Выборка.ВнешнийВидОценки = Перечисления.ВнешнийВидОценки.ТолькоИзображение Тогда
			
			НоваяСтрока.ТекстHTML = "<a target=""_blank"" href=""" + АдресОценкиДляЗаданияHTML + """>"
				+ "<img style=""border:0px;margin-right:5px;"" alt='" 
				+ РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(Выборка.Наименование) + "' "
				+ "title='" + РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(Выборка.Наименование) + "' "
				+ "src=""data:image/png;base64," + ТекстКартинки + """ /></a>";
				
		Иначе
			
			НоваяСтрока.ТекстHTML = "<span style=""margin-right:5px;""><!--[if mso]>"
				+ "<v:roundrect xmlns:v=""urn:schemas-microsoft-com:vml"" xmlns:w=""urn:schemas-microsoft-com:office:word"" target=""_blank"" href="""
				+ АдресОценкиДляЗаданияHTML + """ style=""v-text-anchor:middle;width:100px;height:40px;"" arcsize=""5%"" strokecolor="""
				+ НоваяСтрока.ЦветФонаHTML + """ fillcolor=""" + НоваяСтрока.ЦветФонаHTML + """>"
				+ "<w:anchorlock/><center style=""color:" + НоваяСтрока.ЦветТекстаHTML + ";font-weight:bold;"">"
				+ РаботаСHTML.ОбработатьТеги(Выборка.Наименование) + "</center>"
				+ "</v:roundrect><![endif]--><a target=""_blank"" href=""" + АдресОценкиДляЗаданияHTML
				+ """ style=""background-color:" + НоваяСтрока.ЦветФонаHTML + ";border-radius:3px;color:"
				+ НоваяСтрока.ЦветТекстаHTML + ";display:inline-block;font-weight:700;text-align:center;text-decoration:none;padding: .8em 1em;-webkit-text-size-adjust:none;mso-hide:all;transition: 0.2s;"">"
				+ РаботаСHTML.ОбработатьТеги(Выборка.Наименование) + "</a></span>";
			
		КонецЕсли;
				
		НоваяСтрока.Текст = СокрЛП(Выборка.Наименование) + ", " + АдресОценкиДляЗаданияТекст + Символы.ПС;
			
	КонецЦикла;
	
	Возврат ТаблицаОценок;
	
КонецФункции

#КонецОбласти

#Область Канбан

// Функция - Вывести канбан доску
//
// Параметры:
//	Доска - СправочникСсылка.КанбанДоски - доска на которой будет все выведено.
//	ПредыдущийHTML - Строка - предыдущий код.
//	ТаблицаОтборов - ТаблицаЗначений - отборы.
// 
// Возвращаемое значение:
//  Строка - сформированный HTML-документ.
//
Функция ВывестиКанбанДоску(Знач Доска, Знач ПредыдущийHTML, Знач ТаблицаОтборов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Попытка
		Стр = ПредыдущийHTML;
		Стр = Сред(Стр, СтрНайти(Стр, "scrollpos", НаправлениеПоиска.СКонца) + СтрДлина("scrollpos"));
		Стр = Сред(Стр, СтрНайти(Стр, ">") + 1, СтрНайти(Стр, "</div>") -  СтрНайти(Стр, ">") - 1);
		ПозицияСкрола = Число(Стр);
	Исключение
		ПозицияСкрола = 0;
	КонецПопытки;
	
	#Область Настройки
	
	#Область ПроверкаЗаполненностиРеквизитаДоскиКанбан
    
	Если НЕ ЗначениеЗаполнено(Доска) Тогда
		
		СообщениеДляВывода = НСтр("ru = 'Выберите канбан доску на панели отборов.'");

		Возврат
			"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" 
			|	""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
			|<html xmlns=""http://www.w3.org/1999/xhtml"">
			|	<head>
			|		<title>" + НСтр("ru = 'Канбан'") + "</title>
			|		" + БазаЗнанийВызовСервера.ПолучитьТекстыСкриптов() + "
			|		" + БазаЗнанийCSSКлиентСервер.ПолучитьТаблицуСтилей() + "
			|	</head>
			|	<body style='background:#FAFAFA;'>	
			|		<div id='content' class='tasks'>
			|			" + СообщениеДляВывода + "
			|		</div>
			|	</body>
			|</html>";
		
	КонецЕсли;
	
	#КонецОбласти
	
	НастройкиДоски = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Доска, "Изображение, ТипФона, ЦветФона");
	Если НастройкиДоски.ТипФона = Перечисления.ТипФонаКанбанДоски.Изображение Тогда
		Попытка
			Картинка = НастройкиДоски.Изображение.Получить();
			СтрокаФона = "background-image:url(data:image/png;base64," 
				+ СтрЗаменить(Base64Строка(Картинка), 
				Символы.ВК + Символы.ПС, "") + ");background-position:50%;background-size:cover;"
		Исключение
			СтрокаФона = "background:#FAFAFA;";
		КонецПопытки;
	Иначе
		СтрокаФона = "background:" + НастройкиДоски.ЦветФона + ";";
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КанбанДоскиГруппы.Группа КАК Группа,
		|	КанбанДоскиГруппы.Группа.Наименование КАК Наименование,
		|	КанбанДоскиГруппы.НомерСтроки КАК Порядок,
		|	КанбанДоскиГруппы.ЛимитЗадач КАК ЛимитЗадач,
		|	КанбанДоскиГруппы.ИспользоватьЛимитЗадач КАК ИспользоватьЛимитЗадач,
		|	КанбанДоскиГруппы.Сортировка КАК Сортировка,
		|	КанбанДоскиГруппы.Группа.Код КАК Код,
		|	КанбанДоскиГруппы.Группа.ВидГруппы КАК ВидГруппы,
		|	КанбанДоскиГруппы.Группа.УсловиеОтбора КАК УсловиеОтбора,
		|	КанбанДоскиГруппы.Группа.ЦветТекста КАК ЦветТекста
		|ИЗ
		|	Справочник.КанбанДоски.Группы КАК КанбанДоскиГруппы
		|ГДЕ
		|	КанбанДоскиГруппы.Ссылка = &Доска
		|	И КанбанДоскиГруппы.Группа.Отображать = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	КанбанДоскиГруппы.НомерСтроки";
	Запрос.УстановитьПараметр("Доска", Доска);
	РезультатВыборкаГруппыКанбанДоски = Запрос.Выполнить();
    
	#Область ПроверкаЗаполненостиТабличнойЧастиКанбанДоски
	
	Если РезультатВыборкаГруппыКанбанДоски.Пустой() Тогда
		
		СообщениеДляВывода = НСтр("ru = 'Не найдены столбцы канбан-доски.
                                   |Заполните табличную часть 
                                   |<a href=''opengroupkanbanformlist''><b>Канбан доски</b></a> 
                                   |для отображения данных.'");
		
		Возврат
			"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" 
			|	""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
			|<html xmlns=""http://www.w3.org/1999/xhtml"">
			|	<head>
			|		<title>" + НСтр("ru = 'Канбан'") + "</title>
			|		" + БазаЗнанийВызовСервера.ПолучитьТекстыСкриптов() + "
			|		" + БазаЗнанийCSSКлиентСервер.ПолучитьТаблицуСтилей() + "
			|	</head>
			|	<body style='" + СтрокаФона + "'>	
			|		<div id='content' class='tasks'>
			|			" + СообщениеДляВывода + "
			|		</div>
			|	</body>
			|</html>";
		
	КонецЕсли;
	
	#КонецОбласти
	
	ВыборкаГруппыКанбанДоски 			= РезультатВыборкаГруппыКанбанДоски.Выбрать();
		
	// ПЕРЕМЕННЫЕ.
	мТекущийПользователь				= Пользователи.ТекущийПользователь();
		
	// ИЗОБРАЖЕНИЯ.
	ИзображениеОписания 				= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ВыравниваниеПоШирине,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f351"));
	ИзображениеПроцентВыполнения 		= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПроцентВыполнения,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f352"));
	ИзображениеЕстьФайлы				= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.СкрепкаКанбан,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f353"));
	ИзображениеОтметкаЧерная			= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.КнопкаЧерная,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f354"));
	ИзображениеОтметкаСиняя				= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.КнопкаСиняя,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f355"));
	ИзображениеОтметкаЗеленая			= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.КнопкаЗеленая,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f356"));
	ИзображениеОтметкаКрасная			= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.КнопкаКрасная,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f357"));
	ИзображениеОтметкаЖелтая			= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.КнопкаЖелтая,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f358"));
	ИзображениеСообщения				= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Сообщения,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f359"));
	ИзображениеНазначитьИсполнителя		= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ИсполнительВыбор,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f360"));
	ИзображениеВключитьВСпринт			= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.сстШарБелый,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f361"));
	ИзображениеИсключитьИзСпринта		= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.сстШарЗеленый,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f362"));
	ИзображениеБаллы 					= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Баллы,
		Новый УникальныйИдентификатор("a763cfbb-f94f-4c67-8e13-0e96a3a7f363"));
		
	// Текстовые константы.
	мВключитьВСпринт 		= НСтр("ru = 'Включить в спринт'");
	мПроцентВыполнения 		= НСтр("ru = 'Процент выполнения'");	
	мДобавитьСообщение 		= НСтр("ru = 'Добавить сообщение'");
	мБаллы 					= НСтр("ru = 'Баллы'");
	мЕстьФайлы 				= НСтр("ru = 'Есть файлы'");
	мТекущийИсполнитель 	= НСтр("ru = 'Текущий исполнитель'");
	мНазначитьИсполнителя 	= НСтр("ru = 'Назначить исполнителя'");
	мИсключитьИзСпринта		= НСтр("ru = 'Исключить из спринта %1'");

	// ПОДСВЕЧЕННЫЕ.
	ЦветаПомеченногоЗадания				= ПолучитьЦветаПомеченногоЗадания();
	//@skip-warning
	ЦветаПомеченногоЗадания.ЦветФона 	= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветаПомеченногоЗадания.ЦветФона);
	//@skip-warning
	ЦветаПомеченногоЗадания.ЦветТекста 	= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветаПомеченногоЗадания.ЦветТекста);

	// ПРОСРОЧЕННЫЕ.
	ЦветаПросроченногоЗадания			= ПолучитьЦветаПросроченногоЗадания();
	//@skip-warning
	ЦветаПросроченногоЗадания.ЦветФона 	= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветаПросроченногоЗадания.ЦветФона);
	//@skip-warning
	ЦветаПросроченногоЗадания.ЦветТекста= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветаПросроченногоЗадания.ЦветТекста);
    
    #Область ЦветаЭтапов
    
	ТаблицаЭтапов = Новый ТаблицаЗначений;
	ТаблицаЭтапов.Колонки.Добавить("Этап");
	ТаблицаЭтапов.Колонки.Добавить("ЦветФона");
	ТаблицаЭтапов.Колонки.Добавить("ЦветТекста");
	ТаблицаЭтапов.Колонки.Добавить("ЦветРамкиКанбанДоски");
	ТаблицаЭтапов.Колонки.Добавить("Картинка");
	
	мWebЦветаБелый			= WebЦвета.Белый;
	мWebЦветаЧерный 		= WebЦвета.Черный;
	мСортировкаКанбанДоски 	= Перечисления.СортировкаКанбанДоски;
		
	ВыборкаЭтапов = Справочники.ЭтапыПроцессов.Выбрать();
	Пока ВыборкаЭтапов.Следующий() Цикл
		
		Попытка
			ЦветФона 					= РаботаСЦветомКлиентСервер.HexВЦвет(ВыборкаЭтапов.ЦветФона);
			ЦветТекста 					= РаботаСЦветомКлиентСервер.HexВЦвет(ВыборкаЭтапов.ЦветТекста);
			ЦветРамкиКанбанДоски		= РаботаСЦветомКлиентСервер.HexВЦвет(ВыборкаЭтапов.ЦветРамкиКанбанДоски);
		Исключение
			ЦветФона 					= мWebЦветаБелый;
			ЦветТекста 					= мWebЦветаЧерный;
			ЦветРамкиКанбанДоски		= мWebЦветаЧерный;
		КонецПопытки;
		
		НоваяСтрока 					= ТаблицаЭтапов.Добавить();
		НоваяСтрока.Этап	 			= ВыборкаЭтапов.Ссылка;		
		НоваяСтрока.ЦветФона 			= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветФона);
		НоваяСтрока.ЦветТекста 			= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветТекста);
		НоваяСтрока.ЦветРамкиКанбанДоски= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветРамкиКанбанДоски);
		НоваяСтрока.Картинка 			= ВыборкаЭтапов.НавСсылка;
		
    КонецЦикла;
    
    #КонецОбласти
	
	#КонецОбласти
	
	#Область Запрос
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.Ссылка КАК Задание,
		|	Задание.Номер КАК Номер,
		|	Задание.Дата КАК Дата,
		|	Задание.КрайняяДатаВыполнения КАК КрайняяДатаВыполнения,
		|	Задание.Инициатор КАК Инициатор,
		|	Задание.Процесс КАК Процесс,
		|	Задание.ТекущийИсполнитель КАК ТекущийИсполнитель,
		|	Задание.ТекущийЭтап КАК ТекущийЭтап,
		|	Задание.Тема КАК Тема,
		|	Задание.Спринт КАК Спринт,
		|	Задание.СпринтСоздания КАК СпринтСоздания,
		|	ВЫБОР
		|		КОГДА Задание.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.Критический)
		|			ТОГДА 0
		|		КОГДА Задание.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.Высокий)
		|			ТОГДА 1
		|		КОГДА Задание.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.Средний)
		|			ТОГДА 2
		|		КОГДА Задание.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.Низкий)
		|			ТОГДА 3
		|		КОГДА Задание.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетЗадания.ОченьНизкий)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК СрочностьПриоритет,
		|	ВЫБОР
		|		КОГДА Задание.КрайняяДатаВыполнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА 0
		|		КОГДА Задание.КрайняяДатаВыполнения <= &Сегодня
		|			ТОГДА 1000 * РАЗНОСТЬДАТ(Задание.КрайняяДатаВыполнения, &Сегодня, МИНУТА)
		|		КОГДА РАЗНОСТЬДАТ(&Сегодня, Задание.КрайняяДатаВыполнения, МИНУТА) = 0
		|			ТОГДА 1
		|		ИНАЧЕ 1000 / РАЗНОСТЬДАТ(&Сегодня, Задание.КрайняяДатаВыполнения, МИНУТА)
		|	КОНЕЦ КАК СрочностьВажность,
		|	Задание.Описание КАК Описание,
		|	Задание.Проект КАК Проект,
		|	Задание.Приоритет КАК Приоритет,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(Задание.Описание, 1, 10) <> """"
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОписание,
		|	Задание.ПроцентВыполнения КАК ПроцентВыполнения,
		|	ВЫБОР
		|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьФайлы,
		|	ВЫБОР
		|		КОГДА ОтметкиОбъектов.Отметка = ЗНАЧЕНИЕ(Перечисление.ОтметкиОбъектов.Черная)
		|			ТОГДА 1
		|		КОГДА ОтметкиОбъектов.Отметка = ЗНАЧЕНИЕ(Перечисление.ОтметкиОбъектов.Синяя)
		|			ТОГДА 2
		|		КОГДА ОтметкиОбъектов.Отметка = ЗНАЧЕНИЕ(Перечисление.ОтметкиОбъектов.Зеленая)
		|			ТОГДА 3
		|		КОГДА ОтметкиОбъектов.Отметка = ЗНАЧЕНИЕ(Перечисление.ОтметкиОбъектов.Красная)
		|			ТОГДА 4
		|		КОГДА ОтметкиОбъектов.Отметка = ЗНАЧЕНИЕ(Перечисление.ОтметкиОбъектов.Желтая)
		|			ТОГДА 5
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Отметка,
		|	ЕСТЬNULL(ОтметкиОбъектов.Подсветка, ЛОЖЬ) КАК Подсвечено,
		|	ВЫБОР
		|		КОГДА Задание.КрайняяДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		И (Задание.Выполнено = ЛОЖЬ
		|		И Задание.КрайняяДатаВыполнения < &Сегодня
		|		ИЛИ Задание.Выполнено = ИСТИНА
		|		И Задание.КрайняяДатаВыполнения < Задание.ДатаВыполнения)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Просрочено,
		|	ЕСТЬNULL(ПодсчетСообщений.КоличествоСообщений, 0) КАК КоличествоСообщений,
		|	Задание.Выполнено КАК Выполнено,
		|	Задание.Баллы КАК Баллы,
		|	Задание.ГруппаЗадания КАК ГруппаЗадания,
		|	ВЫБОР
		|		КОГДА Задание.ДатаКорректировки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА Задание.ДатаСоздания
		|		ИНАЧЕ Задание.ДатаКорректировки
		|	КОНЕЦ КАК ДатаИзменения,
		|	Задание.Влияние КАК Влияние,
		|	Задание.Срочность КАК Срочность,
		|	Задание.ДатаВыполнения КАК ДатаВыполнения,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Задание.Инициатор) КАК ИнициаторПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Задание.ТекущийЭтап) КАК ТекущийЭтапПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Задание.ТекущийИсполнитель) КАК ТекущийИсполнительПредставление,
		|	Задание.Спринт.Завершен КАК СпринтЗавершен,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Задание.Проект) КАК ПроектПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Задание.Процесс) КАК ПроцессПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Задание.Спринт) КАК СпринтПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Задание.СпринтСоздания) КАК СпринтСозданияПредставление,
		|	Задание.Теги.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тег КАК Тег,
		|		Тег.Наименование КАК Наименование,
		|		Тег.ЦветФона КАК ЦветФона,
		|		Тег.ЦветТекста КАК ЦветТекста) КАК Теги
		|ИЗ
		|	Документ.Задание КАК Задание
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеПрисоединенныхФайлов
		|		ПО Задание.Ссылка = НаличиеПрисоединенныхФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыЗаданийПоПользователям КАК ОтметкиОбъектов
		|		ПО Задание.Ссылка = ОтметкиОбъектов.Объект
		|		И (ОтметкиОбъектов.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Комментарии.ВладелецКомментария КАК ЗаданиеСообщения,
		|			СУММА(1) КАК КоличествоСообщений
		|		ИЗ
		|			Справочник.Комментарии КАК Комментарии
		|		СГРУППИРОВАТЬ ПО
		|			Комментарии.ВладелецКомментария) КАК ПодсчетСообщений
		|		ПО Задание.Ссылка = ПодсчетСообщений.ЗаданиеСообщения
		|ГДЕ
		|	(&ДоступностьРолиПросмотраЧужихЗаданий
		|	ИЛИ &ДоступностьРолиПолныеПрава
		|	ИЛИ (&ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|	И ВЫБОР
		|		КОГДА Задание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ)
		|	ИЛИ Задание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И Задание.ПометкаУдаления = ЛОЖЬ
		|	И &ДопУсловияТаблицаОтборов
		|	И &ДопУсловия
		|УПОРЯДОЧИТЬ ПО
		|	Выполнено,
		|	СрочностьПриоритет,
		|	СрочностьВажность УБЫВ,
		|	Дата";
				
	Запрос.УстановитьПараметр("Сегодня", 				ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", 	мТекущийПользователь);
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий", 	
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий",
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава",	
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));	
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей",
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(мТекущийПользователь));	
		
	ДопУсловияТаблицаОтборов = "Истина";
	Если ТаблицаОтборов.Количество() <> 0 Тогда
		МассивОтборов = МассивЗаданийПоОтборам(ТаблицаОтборов);
		Если МассивОтборов <> Неопределено Тогда
			ДопУсловияТаблицаОтборов = "Задание.Ссылка В (&МассивЗаданийТаблицаОтборов)";
			Запрос.УстановитьПараметр("МассивЗаданийТаблицаОтборов", МассивОтборов);
		КонецЕсли;
    КонецЕсли;
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловияТаблицаОтборов", ДопУсловияТаблицаОтборов);
	
	#КонецОбласти

	#Область ВыводHTML     
	                       
	Результат = Новый ТекстовыйДокумент;
	Результат.ДобавитьСтроку("<table style='width:100%;table-layout:fixed;'><tbody><tr>");
	
	Пока ВыборкаГруппыКанбанДоски.Следующий() Цикл
        
        ВидГруппы               = ВыборкаГруппыКанбанДоски.ВидГруппы;
		Группа 					= ВыборкаГруппыКанбанДоски.Группа;
		ИспользоватьЛимитЗадач 	= ВыборкаГруппыКанбанДоски.ИспользоватьЛимитЗадач;
		ЛимитЗадач 				= ВыборкаГруппыКанбанДоски.ЛимитЗадач;
		
		#Область УстановкаСортировки
		
		Запрос.Текст = Лев(Запрос.Текст, СтрНайти(Запрос.Текст, "УПОРЯДОЧИТЬ ПО") - 1) + "УПОРЯДОЧИТЬ ПО ";
		Если ВыборкаГруппыКанбанДоски.Сортировка = мСортировкаКанбанДоски.ПоВыполнениюСрочностиИДате Тогда
			Запрос.Текст = Запрос.Текст + "Выполнено,СрочностьПриоритет,Дата";
		ИначеЕсли ВыборкаГруппыКанбанДоски.Сортировка = мСортировкаКанбанДоски.ПоВыполнениюСрочностиИДатеПоУбыванию Тогда
			Запрос.Текст = Запрос.Текст + "Выполнено,СрочностьПриоритет,Дата УБЫВ";
		ИначеЕсли ВыборкаГруппыКанбанДоски.Сортировка = мСортировкаКанбанДоски.ПоДатеПоВозрастанию Тогда
			Запрос.Текст = Запрос.Текст + "Дата";
		ИначеЕсли ВыборкаГруппыКанбанДоски.Сортировка = мСортировкаКанбанДоски.ПоДатеПоУбыванию Тогда
			Запрос.Текст = Запрос.Текст + "Дата УБЫВ";
		ИначеЕсли ВыборкаГруппыКанбанДоски.Сортировка = мСортировкаКанбанДоски.ПоИнициаторуИДате Тогда
			Запрос.Текст = Запрос.Текст + "Инициатор, Дата";
		ИначеЕсли ВыборкаГруппыКанбанДоски.Сортировка = мСортировкаКанбанДоски.ПоИнициаторуИДатеПоУбыванию Тогда
			Запрос.Текст = Запрос.Текст + "Инициатор, Дата УБЫВ";
		ИначеЕсли ВыборкаГруппыКанбанДоски.Сортировка = мСортировкаКанбанДоски.ПоИсполнителюИДате Тогда
			Запрос.Текст = Запрос.Текст + "ТекущийИсполнитель, Дата";
		ИначеЕсли ВыборкаГруппыКанбанДоски.Сортировка = мСортировкаКанбанДоски.ПоИсполнителюИДатеПоУбыванию Тогда
			Запрос.Текст = Запрос.Текст + "ТекущийИсполнитель, Дата Убыв";
		ИначеЕсли ВыборкаГруппыКанбанДоски.Сортировка = мСортировкаКанбанДоски.ПоДатеПоследнегоИзменения Тогда
			Запрос.Текст = Запрос.Текст + "ДатаИзменения";
		ИначеЕсли ВыборкаГруппыКанбанДоски.Сортировка = мСортировкаКанбанДоски.ПоДатеПоследнегоИзмененияПоУбыванию Тогда
			Запрос.Текст = Запрос.Текст + "ДатаИзменения Убыв";
        ИначеЕсли ВыборкаГруппыКанбанДоски.Сортировка = мСортировкаКанбанДоски.ПоДатеВыполненияПоВозрастанию Тогда
			Запрос.Текст = Запрос.Текст + "ДатаВыполнения Возр";
		ИначеЕсли ВыборкаГруппыКанбанДоски.Сортировка = мСортировкаКанбанДоски.ПоДатеВыполненияПоУбыванию Тогда
			Запрос.Текст = Запрос.Текст + "ДатаВыполнения Убыв";            
		Иначе
			Запрос.Текст = Запрос.Текст + "Выполнено,СрочностьПриоритет,СрочностьВажность УБЫВ,Дата";
		КонецЕсли;
		
		#КонецОбласти
        
        ДопУсловия = "Истина";
        Если ВидГруппы = Перечисления.ВидыГруппКанбанДоски.Отборы Тогда
            
            НастройкиСКД = ВыборкаГруппыКанбанДоски.УсловиеОтбора.Получить();
            Если НастройкиСКД <> Неопределено Тогда
                
                СКД = Документы.Задание.ПолучитьМакет("СКД_Канбан");
                
                Если СтрНайти(ВРег(НастройкиСКД.Отбор), ВРег("ТекущийИсполнитель В группе из списка")) > 0 Тогда
					
					мСписок = Новый СписокЗначений;
					МассивСсылок = Новый Массив;
					
					Для Каждого Строка Из НастройкиСКД.Отбор.Элементы Цикл
						Если СтрНайти(Строка.ЛевоеЗначение, "ТекущийИсполнитель") > 0 
							И Строка.Использование = Истина Тогда
								мСписок = Строка.ПравоеЗначение;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого Строка Из мСписок Цикл
						ГруппаПользователей = Справочники.ГруппыПользователей.ПустаяСсылка();
						ГруппаПользователей = Строка.Значение;
						МассивСсылок.Добавить(ГруппаПользователей);						
					КонецЦикла;
					
					ТекстЗапроса = СКД.НаборыДанных.НаборДанных1.Запрос;
					ТекстЗапроса = ТекстЗапроса + Символы.ПС + 
						"ГДЕ
						|	Задание.ТекущийИсполнитель В
						|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ГруппыПользователей.Ссылка КАК ГруппаПользователей
						|ИЗ
						|	Справочник.ГруппыПользователей КАК ГруппыПользователей
						|ГДЕ
						|	ГруппыПользователей.Ссылка В (&МассивСсылок)
						|		
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ГруппыПользователейСостав.Пользователь
						|ИЗ
						|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
						|ГДЕ
						|	ГруппыПользователейСостав.Ссылка В (&МассивСсылок))";

					СКД.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;

					КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
					КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
					КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
					КомпоновщикНастроек.Восстановить();
					КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("МассивСсылок",
						МассивСсылок);

					КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
					МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(), , ,
						Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

					Если СтрНайти(МакетКомпоновки.НаборыДанных.НаборДанных1.Запрос,
						"И Задание.ТекущийИсполнитель В ИЕРАРХИИ (&П)") Тогда
						мТекст = МакетКомпоновки.НаборыДанных.НаборДанных1.Запрос;
						мТекст = СтрЗаменить(мТекст, "И Задание.ТекущийИсполнитель В ИЕРАРХИИ (&П)", "");
						МакетКомпоновки.НаборыДанных.НаборДанных1.Запрос = мТекст;
					КонецЕсли;

					ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
					ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Ложь);

					РезультатСКД 		= Новый ТаблицаЗначений;
					ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
					ПроцессорВывода.УстановитьОбъект(РезультатСКД);
					ПроцессорВывода.Вывести(ПроцессорКомпоновки);

					Если РезультатСКД.Количество() = 0 Тогда
						МассивСсылкок   = Новый Массив;
					Иначе
						МассивСсылкок   = РезультатСКД.ВыгрузитьКолонку("Ссылка");
					КонецЕсли;

					Запрос.УстановитьПараметр("МассивСсылкок", МассивСсылкок);
					ДопУсловия  = "Задание.Ссылка В(&МассивСсылкок)";
					
				ИначеЕсли СтрНайти(ВРег(НастройкиСКД.Отбор), ВРег("ТекущийИсполнитель В группе")) > 0 Тогда

					мГруппаПользователей = Справочники.ГруппыПользователей.ПустаяСсылка();

					Для Каждого Строка Из НастройкиСКД.Отбор.Элементы Цикл
						Если СтрНайти(Строка.ЛевоеЗначение, "ТекущийИсполнитель") > 0 
							И Строка.Использование = Истина Тогда
								мГруппаПользователей = Строка.ПравоеЗначение;
						КонецЕсли;
					КонецЦикла;

					ТекстЗапроса = СКД.НаборыДанных.НаборДанных1.Запрос;
					ТекстЗапроса = ТекстЗапроса + Символы.ПС + 
						"ГДЕ
						|	Задание.ТекущийИсполнитель В
						|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ГруппыПользователей.Ссылка КАК ГруппаПользователей
						|ИЗ
						|	Справочник.ГруппыПользователей КАК ГруппыПользователей
						|ГДЕ
						|	ГруппыПользователей.Ссылка = &Ссылка
						|		
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ГруппыПользователейСостав.Пользователь
						|ИЗ
						|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
						|ГДЕ
						|	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ (&Ссылка))";

					СКД.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;

					КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
					КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
					КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
					КомпоновщикНастроек.Восстановить();
					КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка",
						мГруппаПользователей);

					КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
					МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(), , ,
						Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

					Если Найти(МакетКомпоновки.НаборыДанных.НаборДанных1.Запрос,
						"И Задание.ТекущийИсполнитель В ИЕРАРХИИ (&П)") Тогда
						мТекст = МакетКомпоновки.НаборыДанных.НаборДанных1.Запрос;
						мТекст = СтрЗаменить(мТекст, "И Задание.ТекущийИсполнитель В ИЕРАРХИИ (&П)", "");
						МакетКомпоновки.НаборыДанных.НаборДанных1.Запрос = мТекст;
					КонецЕсли;

					ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
					ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Ложь);

					РезультатСКД 		= Новый ТаблицаЗначений;
					ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
					ПроцессорВывода.УстановитьОбъект(РезультатСКД);
					ПроцессорВывода.Вывести(ПроцессорКомпоновки);

					Если РезультатСКД.Количество() = 0 Тогда
						МассивСсылкок   = Новый Массив;
					Иначе
						МассивСсылкок   = РезультатСКД.ВыгрузитьКолонку("Ссылка");
					КонецЕсли;

					Запрос.УстановитьПараметр("МассивСсылкок", МассивСсылкок);
					ДопУсловия  = "Задание.Ссылка В(&МассивСсылкок)";
					
				Иначе
                
    	            КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
       		        КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
                	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
    	            КомпоновщикНастроек.Восстановить();
                
        	        КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
           	    	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СКД,
                    	КомпоновщикНастроек.ПолучитьНастройки(),,,
                    	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
                
              		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
          		    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Ложь);
                
             		РезультатСКД 		= Новый ТаблицаЗначений;
            	    ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
               		ПроцессорВывода.УстановитьОбъект(РезультатСКД);
               		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
                
             		Если РезультатСКД.Количество() = 0 Тогда
                   		МассивСсылкок   = Новый Массив;
                	Иначе
                    	МассивСсылкок   = РезультатСКД.ВыгрузитьКолонку("Ссылка");
                	КонецЕсли; 
                
    		    	Запрос.УстановитьПараметр("МассивСсылкок", МассивСсылкок);
                	ДопУсловия  = "Задание.Ссылка В(&МассивСсылкок)";
                
                КонецЕсли;
                                                 
			КонецЕсли;                                                  
            
        Иначе
            
            МассивЭтапов	= Группа.ЭтапыПроцессов.ВыгрузитьКолонку("ЭтапПроцесса");
		    Запрос.УстановитьПараметр("МассивЭтапов", МассивЭтапов);
            ДопУсловия      = "Задание.ТекущийЭтап В(&МассивЭтапов)";
            
        КонецЕсли;
        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия", ДопУсловия);
        
		ВыборкаЗадания = Запрос.Выполнить().Выбрать();
				
		Результат.ДобавитьСтроку("<td>" 
			+ СтрШаблон("<div class='kanbangroup' style='color:%1;'><span class='flt_r'>%2</span>%3</div>",
				ВыборкаГруппыКанбанДоски.ЦветТекста,
				?(ИспользоватьЛимитЗадач И ЛимитЗадач < ВыборкаЗадания.Количество(), 
				Строка(ЛимитЗадач) + " / ", "") + ВыборкаЗадания.Количество(),
				РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(ВыборкаГруппыКанбанДоски.Наименование)));
		
		ИндексЗадачСтолбца = 0;
		Пока ВыборкаЗадания.Следующий() Цикл
						
			Этап = ТаблицаЭтапов.Найти(ВыборкаЗадания.ТекущийЭтап, "Этап");
			Если Этап <> Неопределено Тогда
				КартинкаЭтапа 			= Этап.Картинка;
				ЦветРамкиКанбанДоски 	= Этап.ЦветРамкиКанбанДоски;
			Иначе
				КартинкаЭтапа 			= "";
				ЦветРамкиКанбанДоски 	= "black";
			КонецЕсли;
			
			Попытка
				НомерЧислом = УправлениеITОтделом8УФ.ДокументНомерЧислом(ВыборкаЗадания.Номер);
			Исключение
				НомерЧислом = "";
			КонецПопытки;
			
			// Вывод шапки
			Результат.ДобавитьСтроку("<div class='task' style='border-left-color:" + ЦветРамкиКанбанДоски + ";"
				+ ?(ВыборкаЗадания.Подсвечено = Истина И ВыборкаЗадания.Просрочено = Ложь,
					"background-color:" + ЦветаПомеченногоЗадания.ЦветФона + ";" + "color:" 
						+ ЦветаПомеченногоЗадания.ЦветТекста + ";", "")
				+ ?(ВыборкаЗадания.Просрочено = Истина,
					"background-color:" + ЦветаПросроченногоЗадания.ЦветФона + ";" + "color:" 
					+ ЦветаПросроченногоЗадания.ЦветТекста + ";", "")
				+ "'>");
						
			// Вывод верхней полоски.
			НавигационнаяСсылкаЗадания = ПолучитьНавигационнуюСсылку(ВыборкаЗадания.Задание);
			Результат.ДобавитьСтроку("<div class='title'><div class='flt_r'>"
				+ "<a href='movetotask_" + НавигационнаяСсылкаЗадания + "'>"
				+ "<img title='" + РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(ВыборкаЗадания.ТекущийЭтапПредставление)
				+ "' src='" + КартинкаЭтапа + "'></a></div>");
			Результат.ДобавитьСтроку("<div class='flt_r'>");
			Если ЗначениеЗаполнено(ВыборкаЗадания.ТекущийИсполнитель) Тогда
				Результат.ДобавитьСтроку("<a href='change_" + НавигационнаяСсылкаЗадания
					+ "' title='" + мТекущийИсполнитель + "'>" 
					+ РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(ВыборкаЗадания.ТекущийИсполнительПредставление) 
					+ "</a>&nbsp;");
			Иначе
				Результат.ДобавитьСтроку("<a href='change_" + НавигационнаяСсылкаЗадания + "' title='"
					+ мНазначитьИсполнителя + "'><img src='" + ИзображениеНазначитьИсполнителя + "'></a>&nbsp;");
			КонецЕсли;
			Результат.ДобавитьСтроку("</div>");
			Если ВыборкаЗадания.Отметка > 0 Тогда
				Подсказка = "";
				Картинка  = "";
				Если ВыборкаЗадания.Отметка = 1 Тогда
					Подсказка = НСтр("ru = 'Черная отметка'");
					Картинка = ИзображениеОтметкаЧерная;
				ИначеЕсли ВыборкаЗадания.Отметка = 2 Тогда
					Подсказка = НСтр("ru = 'Синяя отметка'");
					Картинка = ИзображениеОтметкаСиняя;					
				ИначеЕсли ВыборкаЗадания.Отметка = 3 Тогда
					Подсказка = НСтр("ru = 'Зеленая отметка'");
					Картинка = ИзображениеОтметкаЗеленая;					
				ИначеЕсли ВыборкаЗадания.Отметка = 4 Тогда
					Подсказка = НСтр("ru = 'Красная отметка'");
					Картинка = ИзображениеОтметкаКрасная;					
				ИначеЕсли ВыборкаЗадания.Отметка = 5 Тогда
					Подсказка = НСтр("ru = 'Желтая отметка'");
					Картинка = ИзображениеОтметкаЖелтая;					
				КонецЕсли;
				Если НЕ ПустаяСтрока(Картинка) Тогда
					Результат.ДобавитьСтроку("<div class='flt_l'><img align='left' title='" + Подсказка + "' src='" 
						+ Картинка + "'></div>");
				КонецЕсли;
			КонецЕсли;
			
			Результат.ДобавитьСтроку("<a href='" + НавигационнаяСсылкаЗадания
				+ "' target='_blank' title='" 
				+ РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(ВыборкаЗадания.ИнициаторПредставление)
				+ "'>#" + НомерЧислом + "</a> " + "<span style='color:#666;'>"
				+ РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(ВыборкаЗадания.ПроцессПредставление)
				+ ?(ЗначениеЗаполнено(ВыборкаЗадания.Проект), " ["
				+ РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(ВыборкаЗадания.ПроектПредставление) + "]", "")
				+ "</span></div>");
			
			// Вывод тела.
			Результат.ДобавитьСтроку("<div class='taskbody'>" 
				+ РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(ВыборкаЗадания.Тема)
				+ "</div>");
			
			// Вывод тегов.
			Если НЕ ВыборкаЗадания.Теги.Пустой() Тогда
				Результат.ДобавитьСтроку("<div class='tags'>");
				ВыборкаТегов = ВыборкаЗадания.Теги.Выбрать();
				Пока ВыборкаТегов.Следующий() Цикл
					// background-color: #818a91;
					// color:#fff;
					Результат.ДобавитьСтроку(
						СтрШаблон("<span class='tag' style='background-color:%1;color:%2;'>", ВыборкаТегов.ЦветФона, 
							ВыборкаТегов.ЦветТекста)
						+ РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(ВыборкаТегов.Наименование)
						+ "</span>");
				КонецЦикла;
				Результат.ДобавитьСтроку("</div>");
			КонецЕсли;
			
			// Вывод нижней полоски.
			Результат.ДобавитьСтроку("<div class='info'>");
			
			// Крайняя дата выполнения.
			Если ВыборкаЗадания.Просрочено = Истина Тогда
				Результат.ДобавитьСтроку("<div class='expired'>" 
					+ ФорматироватьДату(ВыборкаЗадания.КрайняяДатаВыполнения) 
					+ "</div>");
			ИначеЕсли ВыборкаЗадания.КрайняяДатаВыполнения <> Дата(1, 1, 1) Тогда
				Результат.ДобавитьСтроку("<div class='flt_r'>" + ФорматироватьДату(ВыборкаЗадания.КрайняяДатаВыполнения) 
					+ "</div>");
			КонецЕсли;
			
			// Спринт.
			Если ВыборкаЗадания.Выполнено = Ложь Тогда
				Если НЕ ЗначениеЗаполнено(ВыборкаЗадания.Спринт)
					ИЛИ (ЗначениеЗаполнено(ВыборкаЗадания.Спринт) И ВыборкаЗадания.СпринтЗавершен = Истина) Тогда
					Результат.ДобавитьСтроку("<div class='imgtext'><a href='includesprint_" + НавигационнаяСсылкаЗадания
						+ "' target='_blank'><img align='middle' title='" + мВключитьВСпринт + "' src='" 
						+ ИзображениеВключитьВСпринт + "'></a></div>");
				Иначе
					Результат.ДобавитьСтроку("<div class='imgtext'><a href='excludesprint_" + НавигационнаяСсылкаЗадания 
						+ "' target='_blank'><img align='middle' title='" + СтрШаблон(мИсключитьИзСпринта,
						РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(ВыборкаЗадания.СпринтПредставление)) 
						+ "' src='" + ИзображениеИсключитьИзСпринта + "'></a></div>");
				КонецЕсли;
			КонецЕсли;
			
			// Есть ли текст.
			Если НЕ ПустаяСтрока(ВыборкаЗадания.Описание) Тогда
				Результат.ДобавитьСтроку("<img align='middle' title='"
					+ РаботаСHTML.УдалитьТегиИСпецСимволыИзСтроки(Лев(ВыборкаЗадания.Описание, 1024)) + "' src='" 
			        + ИзображениеОписания + "'>");
			КонецЕсли;
				
			// Вложения (если есть).
			Если ВыборкаЗадания.ЕстьФайлы = Истина Тогда
				Результат.ДобавитьСтроку("<img align='middle' title='" + мЕстьФайлы + "' src='" 
					+ ИзображениеЕстьФайлы + "'>");
			КонецЕсли;
				
			// Процент выполнения (если есть).
			Если ВыборкаЗадания.ПроцентВыполнения > 0 Тогда
				Результат.ДобавитьСтроку("<div class='imgtext'><img align='middle' title='" + мПроцентВыполнения
					+ "' src='" + ИзображениеПроцентВыполнения + "'><span class='text'>" 
					+ Строка(ВыборкаЗадания.ПроцентВыполнения) + "% </span></div>");
			КонецЕсли;
			
			// Сообщения (если есть).	
			Результат.ДобавитьСтроку("<div class='imgtext'><a href='sendmess_" 
				+ НавигационнаяСсылкаЗадания + "'><img align='middle' title='" + мДобавитьСообщение + "' src='" 
				+ ИзображениеСообщения + "'></a>");
			Если ВыборкаЗадания.КоличествоСообщений > 0 Тогда
				Результат.ДобавитьСтроку("<span class='text'>" 
					+ Формат(ВыборкаЗадания.КоличествоСообщений, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") 
					+ "</span>");
			КонецЕсли;
			Результат.ДобавитьСтроку("</div>");
			
			// Баллы
			Если ВыборкаЗадания.Баллы > 0 Тогда
				Результат.ДобавитьСтроку("<div class='imgtext'><img align='middle' title='" + мБаллы 
					+ "' src='" + ИзображениеБаллы + "'><span class='text'>" 
					+ Строка(ВыборкаЗадания.Баллы) + "</span></div>");
			КонецЕсли;
			
			// Вывод подвала.
			Результат.ДобавитьСтроку("</div></div>");
			                          
			ИндексЗадачСтолбца = ИндексЗадачСтолбца + 1;
			Если ИспользоватьЛимитЗадач И ИндексЗадачСтолбца >= ЛимитЗадач Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.ДобавитьСтроку("</td>");
		
	КонецЦикла;
	
	Результат.ДобавитьСтроку("</tr></tbody></table>");
	Результат = 
		"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN""
		|	""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
		|<html xmlns=""http://www.w3.org/1999/xhtml"">
		|	<head>
		|		<title>" + НСтр("ru = 'Канбан'") + "</title>
		|		" + БазаЗнанийCSSКлиентСервер.ПолучитьТаблицуСтилей() + "
		|		" + БазаЗнанийВызовСервера.ПолучитьТекстыСкриптов() + "
		|	</head>
		|	<body style='" + СтрокаФона + "' onscroll='fonscroll()'
		|		onload='scrollBottom(" + Формат(ПозицияСкрола, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + ")'>
		|		<div id='content' class='tasks'>
		|			<div id='categories'>
		|			" + Результат.ПолучитьТекст() + "
		|			</div>
		|		</div>
		|		<div class='scrollvalue' id='scrollpos'>" + Формат(ПозицияСкрола, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + "</div>
		|		<div id='message_name' style='display: none'></div>
		|		<div id='message_data' style='display: none'></div>
		|	</body>
		|</html>";
	
	#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СозданиеЗаданийПоВходящимПисьмам

// Устанавливает оценку к заданию.
//
// Параметры:
//	Задание - ДокументСсылка.Задание - исходное задание.
//	Оценка - СправочникСсылка.ОценкиЗаданий - устанавливаемая оценка.
//
Процедура УстановитьОценкуЗаданию(Знач Задание, Знач Оценка) Экспорт
	
	Если ЗначениеЗаполнено(Задание) И ЗначениеЗаполнено(Оценка) 
		И СтрНайти(Строка(Оценка), "<Объект не найден") = 0 Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Объект 					= Задание.ПолучитьОбъект();
			Объект.ОценкаВыполнения = Оценка;
			Если Объект.ДатаВыполнения = Дата(1, 1, 1) Тогда
				Объект.ДатаВыполнения = ТекущаяДатаСеанса();
			КонецЕсли;
			Если Объект.Выполнено 	= Ложь Тогда
				Объект.Выполнено 	= Истина;
			КонецЕсли;
			
			Объект.ДатаЗавершения 	= ТекущаяДатаСеанса();
			Объект.Завершено		= Истина;
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
			// Добавляем комментарий к установленной оценке?
			// ...
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось установить оценку по заданию <%1>. %2'"), 
				Строка(Задание), 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Правила событий'"), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ДействияПравилСобытий,
				ТекстОшибки);
				
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверка есть ли в теме письма признаки, что это ответ по письму-ответу или оценке задания.
// Признаки письму ответу:
//	1. Подстрока содержит "RE:" или "HA:" (русская и ангийская раскладка).
//	2. Строка не содержит текст в кавычках "[TID#"..."]".
//	3. Строка содержит любой из маркеров начала номера задания.
//	4. Сразу после номера идет число и по такому номеру в базе есть задание.
// Признаки оценки задания
//	1. Подстрока содержит "RE:" или "HA:" (русская и ангийская раскладка).
//	2. Строка не содержит текст в кавычках "[TID#"..."]".
//	3. Строка содержит любой из маркеров начала номера задания.
//	4. Сразу после номера идет число и по такому номеру в базе есть задание.
//	5. Есть маркер " score (" + uid оценки + ")" и письмо длинее 40 символов.
//
// Параметры:
//	Тема - Строка - исходная строка.
//
// Возвращаемое значение:
//	Структура
//		* ЭтоОтветПользователя - Булево - Истина, если это ответ по уже существующему заданию.
//		* Задание - ДокументСсылка.Задание - возвращает родительское задание, если оно завершено.
//					В настройках разрешено изменять завершенные задания. 
//		* РодительскоеЗадание ДокументСсылка.Задание - возвращает родительское задание в любом другому случае.
//
Функция ПроверитьТемуПисьмаНаОтвет(Знач Тема) Экспорт
	
	// Пример: RE: [#256] Не работает принтер
	Структура = Новый Структура("ЭтоОтветПользователя, ЭтоОценкаЗадания, Задание, РодительскоеЗадание, Оценка", 
		Ложь, Ложь, Документы.Задание.ПустаяСсылка(), Документы.Задание.ПустаяСсылка(), 
		Справочники.ОценкиЗаданий.ПустаяСсылка());
		
	ВремСтрока = ВРег(СокрЛП(Тема));
	
	// Нет одной из строк "RE:" или "HA:" (англ.) или "НА:" (рус.)
	Если ПустаяСтрока(ВремСтрока) ИЛИ СтрНайти(ВРег(ВремСтрока), "RE:") = 0 
		И СтрНайти(ВРег(ВремСтрока), "HA:") = 0 И СтрНайти(ВРег(ВремСтрока), "НА:") = 0
		И СтрНайти(ВРег(ВремСтрока), "FW:") = 0 И СтрНайти(ВРег(ВремСтрока), "FWD:") = 0 Тогда
		
		Возврат Структура;
		
	КонецЕсли;
	
	// Пропускаем зависимость от Битрикс-трекера.
	Если СтрНайти(ВРег(ВремСтрока), "[TID#") > 0 И СтрНайти(ВРег(ВремСтрока), "] ") > 0 Тогда
		
		Возврат Структура;
		
	КонецЕсли;
	
	//*************************************
	// Новый механизм работы
	//*************************************
	МассивНачала = УправлениеITОтделом8УФПовтИсп.МассивМаркеровНачалаНомераЗадания();
	
	Для Каждого Маркер Из МассивНачала Цикл
		ПозицияНомер = СтрНайти(ВремСтрока, Маркер);
		Если ПозицияНомер > 0 Тогда
			ВремСтрока = Сред(ВремСтрока, ПозицияНомер + СтрДлина(Маркер));
			Индекс =  1;
			НомерЗадания = "";
			Пока Индекс <= СтрДлина(ВремСтрока) Цикл
				Если СтрНайти("0123456789", Сред(ВремСтрока, Индекс, 1)) = 0 Тогда
					Прервать;
				КонецЕсли;
				НомерЗадания = НомерЗадания + Сред(ВремСтрока, Индекс, 1);
				Индекс = Индекс + 1;
			КонецЦикла;
			
			НомерЗаданияСНулями = ?(СтрДлина(НомерЗадания) < 11,
				СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерЗадания, 11, "0", "Слева"), НомерЗадания);
			
			// Смотрим в периоде, который найден выше.
			// Сначала поищем номер с нулям.
			НовоеЗаданиеСсылка			= Документы.Задание.НайтиПоНомеру(НомерЗаданияСНулями);
			Если НЕ ЗначениеЗаполнено(НовоеЗаданиеСсылка) Тогда
				Если НЕ ПустаяСтрока(НомерЗадания) Тогда
					// Номер с нулями не найден, поищем номер без нулей.
					НовоеЗаданиеСсылка		= Документы.Задание.НайтиПоНомеру(НомерЗадания);
				КонецЕсли;
			КонецЕсли;
			
			// Нашли задание, которое указано в теме письма.			
			Если ЗначениеЗаполнено(НовоеЗаданиеСсылка) Тогда
				
				// Проверка это оценка по заданию? "ID#1234 Отлично (score ...)"
				Если СтрДлина(Тема) > 40 И СтрНайти(Тема, " (score ") > 0 И Прав(Тема, 1) = ")" Тогда
					
					Старт = СтрНайти(Тема, " (score ") + 8;
					Длина = СтрДлина(Тема) - Старт;
					ИдентификаторОценка = Сред(Тема, Старт, Длина);
					Структура.Оценка = Справочники.ОценкиЗаданий.ПолучитьСсылку(
						Новый УникальныйИдентификатор(ИдентификаторОценка));
					
					Структура.ЭтоОценкаЗадания	 	= Истина;
					Структура.Задание 				= НовоеЗаданиеСсылка;					
					Прервать;
					
				КонецЕсли;				
				
				// Если задание завершено, то не добавляем новое сообщение к переписке, а открываем новое.
				Если НовоеЗаданиеСсылка.Завершено = Ложь 
					ИЛИ УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИзменятьЗавершенныеЗадания") = Истина Тогда
					Структура.ЭтоОтветПользователя 	= Истина;
					Структура.Задание 				= НовоеЗаданиеСсылка;
				Иначе
					Структура.ЭтоОтветПользователя 	= Ложь;
					Структура.РодительскоеЗадание 	= НовоеЗаданиеСсылка;
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьКомментарийРодительИзТемыПисьма(Знач Тема) Экспорт
	
	ВремСтрока			= ВРег(СокрЛП(Тема));
	МассивНачала		= УправлениеITОтделом8УФПовтИсп.МассивМаркеровНачалаНомераКомментария();
	КомментарийСсылка	= Справочники.Комментарии.ПустаяСсылка();
	
	Для Каждого Маркер Из МассивНачала Цикл
		
		ПозицияНомер = СтрНайти(ВремСтрока, Маркер);
		Если ПозицияНомер > 0 Тогда
			ВремСтрока = Сред(ВремСтрока, ПозицияНомер + СтрДлина(Маркер));
			Индекс =  1;
			НомерКомментария = "";
			Пока Индекс <= СтрДлина(ВремСтрока) Цикл
				Если СтрНайти("0123456789", Сред(ВремСтрока, Индекс, 1)) = 0 Тогда
					Прервать;
				КонецЕсли;
				НомерКомментария = НомерКомментария + Сред(ВремСтрока, Индекс, 1);
				Индекс = Индекс + 1;
			КонецЦикла;
			
			НомерКомментарияСНулями = ?(СтрДлина(НомерКомментария) < 12, 
				СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерКомментария, 12, "0", "Слева"), НомерКомментария);
				
			КомментарийСсылка		= Справочники.Комментарии.НайтиПоКоду(НомерКомментарияСНулями);
			Если НЕ ЗначениеЗаполнено(КомментарийСсылка) Тогда
				Если НЕ ПустаяСтрока(НомерКомментария) Тогда
					КомментарийСсылка = Справочники.Комментарии.НайтиПоКоду(НомерКомментария);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КомментарийСсылка) Тогда
				Возврат КомментарийСсылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат КомментарийСсылка;
	
КонецФункции	

Функция ПриоритетОпределенияКлиентовИИнициаторовПоУмолчанию() Экспорт
	
	Возврат
		"Сотрудники" + Символы.ПС
		+ "Подразделения" + Символы.ПС
		+ "Организации" + Символы.ПС
		+ "КонтактныеЛица" + Символы.ПС
		+ "Контрагенты" + Символы.ПС
		+ "Пользователи" + Символы.ПС
		+ "ФизическиеЛица" + Символы.ПС
		+ "ПотенциальныеКлиенты";
	
КонецФункции

Функция ПриоритетОпределенияКлиентовИИнициаторов(Знач СсылкаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Стр = СсылкаОбъект.ПриоритетОпределенияКлиентовИИнициаторов;
	Если ПустаяСтрока(Стр) Тогда
		Стр = ПриоритетОпределенияКлиентовИИнициаторовПоУмолчанию();
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции

Функция СписокПриоритетовОпределенияКлиентовИИнициаторов(Знач СсылкаОбъект) Экспорт
	
	ПриоритетОпределения 			= Новый СписокЗначений;
	ПриоритетОпределенияСтрокой 	= ПриоритетОпределенияКлиентовИИнициаторов(СсылкаОбъект);
	Для Индекс = 1 По СтрЧислоСтрок(ПриоритетОпределенияСтрокой) Цикл
		Стр = СтрПолучитьСтроку(ПриоритетОпределенияСтрокой, Индекс);
		Если Стр = "Сотрудники" Тогда
			ПриоритетОпределения.Добавить(Стр, НСтр("ru = 'Сотрудники'"));
		ИначеЕсли Стр = "КонтактныеЛица" Тогда
			ПриоритетОпределения.Добавить(Стр, НСтр("ru = 'Контактные лица'"));
		ИначеЕсли Стр = "Контрагенты" Тогда
			ПриоритетОпределения.Добавить(Стр,	НСтр("ru = 'Контрагенты'"));
		ИначеЕсли Стр = "Подразделения" Тогда
			ПриоритетОпределения.Добавить(Стр,	НСтр("ru = 'Подразделения'"));
		ИначеЕсли Стр = "Организации" Тогда
			ПриоритетОпределения.Добавить(Стр,	НСтр("ru = 'Организации'"));
		ИначеЕсли Стр = "Пользователи" Тогда
			ПриоритетОпределения.Добавить(Стр,	НСтр("ru = 'Пользователи'"));
		ИначеЕсли Стр = "ФизическиеЛица" Тогда
			ПриоритетОпределения.Добавить(Стр,	НСтр("ru = 'Физические лица'"));
		ИначеЕсли Стр = "ПотенциальныеКлиенты" Тогда
			ПриоритетОпределения.Добавить(Стр, НСтр("ru = 'Потенциальные клиенты'"));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПриоритетОпределения;
	
КонецФункции

Функция ТекстЗапросаИнициаторовСУчетомПриоритета(Знач ПриоритетОпределенияСтрокой) Экспорт
	
	Текст = "";
	Для Индекс = 1 По СтрЧислоСтрок(ПриоритетОпределенияСтрокой) Цикл
		
		ИмяСправочника = СтрПолучитьСтроку(ПриоритетОпределенияСтрокой, Индекс);
				
		Текст = Текст + ?(НЕ ПустаяСтрока(Текст), " ОБЪЕДИНИТЬ ВСЕ ", " ") + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|		Спр.Ссылка КАК Ссылка,
				|		" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + " КАК Порядок
				|	ИЗ
				|		Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК Спр
				|	ГДЕ
				|		&АдресЭП <> """"
				|		И Спр.Тип = Значение(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
				|		И Спр.АдресЭП = &АдресЭП";
		
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Порядок КАК Порядок
		|ИЗ
		|	(" + Текст + ") КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";	
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает текущего исполнителя для задания.
Функция ПолучитьИсполнителяЗаданияПоУмолчанию(Знач Процесс, Знач Этап = Неопределено) Экспорт
	
	мЭтапы = Процесс.Этапы;
	Для Каждого Строки Из мЭтапы Цикл
		Если Этап = Неопределено Тогда
			Если Строки.Этап = Справочники.ЭтапыПроцессов.Новый Тогда
				Возврат Строки.ИсполнительПоУмолчанию;
			КонецЕсли;
		
		Иначе
			Если Строки.Этап = Этап Тогда
				Возврат Строки.ИсполнительПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

// Добавляет наблюдателей, которые подписаны на новые задания.
//
// Параметры:
//	ДокументЗаданиеОбъект
//
Процедура ДобавитьНаблюдателейКоторыеПодписаныНаВсеНовыеЗадания(ДокументЗаданиеОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Выбираем только тех, кто с включенной настройкой для добавления себя в списки наблюдателей.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиПользователей.Пользователь
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Настройка = 
		|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ДобавлятьСебяВНаблюдателиДляВсехНовыхЗадания)
		|	И НастройкиПользователей.Значение = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			Выборка.Пользователь.ИдентификаторПользователяИБ);
			
		Если Пользователь <> Неопределено Тогда
			// Есть право просмотра чужих заданий.
			Если Пользователь.Роли.Содержит(Метаданные.Роли.ServiceDeskПросмотрЧужихЗаданий)
				ИЛИ Пользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
				// Еще нет в списке наблюдателей.
				Если ДокументЗаданиеОбъект.Наблюдатели.НайтиСтроки(
					Новый Структура("Адресат", Выборка.Пользователь)).Количество() = 0 Тогда
					
					НоваяСтрока 					= ДокументЗаданиеОбъект.Наблюдатели.Добавить();
					НоваяСтрока.Адресат		 		= Выборка.Пользователь;
					
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаСобытия

Процедура УправлениеITОтделом8УФПередЗаписьюЗадания(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Помечаем на удаление присоединеннные файлы.
	Если Источник.ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления") Тогда
		РаботаСФайлами.УстановитьПометкуУдаленияФайловПередЗаписью(Источник, Отказ);
	КонецЕсли;
		
КонецПроцедуры

Процедура УправлениеITОтделом8УФПередУдалениемЗаданияПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда 
	     Возврат; 
	КонецЕсли;
		
	РегистрыСведений.СостоянияПредметовВзаимодействий.УдалитьЗаписьИзРегистра(Источник.Ссылка);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПредметыПапкиВзаимодействий.Взаимодействие
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.Предмет = &Предмет";
	Запрос.УстановитьПараметр("Предмет", Источник.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Взаимодействие.Установить(Выборка.Взаимодействие);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.Предмет = Документы.ТелефонныйЗвонок.ПустаяСсылка();
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Выполняет автоматическое выполнение заданий (перевод на этап "Выполнено").
//
// Параметры:
//	Интерактивно - Булево - запуск был вручную (Истина) или автоматически (Ложь).
//
Процедура АвтоматическоеВыполнениеЗаданий(Интерактивно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.Ссылка,
		|	Процессы.АвтоматическоеВыполнениеЗаданияЧасов,
		|	Процессы.АвтоматическоеВыполнениеЗаданияЭтап
		|ИЗ
		|	Документ.Задание КАК Задание
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Процессы КАК Процессы
		|		ПО Задание.Процесс = Процессы.Ссылка
		|			И (Задание.ТекущийЭтап В
		|				(ВЫБРАТЬ
		|					ПроцессыАвтоматическоеЗакрытие.Этап
		|				ИЗ
		|					Справочник.Процессы.АвтоматическоеВыполнение КАК ПроцессыАвтоматическоеЗакрытие
		|				ГДЕ
		|					ПроцессыАвтоматическоеЗакрытие.Ссылка = Процессы.Ссылка))
		|ГДЕ
		|	Процессы.АвтоматическоеВыполнениеЗадания = ИСТИНА
		|	И Задание.Проведен = ИСТИНА
		|	И Задание.ДатаКорректировки <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ДОБАВИТЬКДАТЕ(Задание.ДатаКорректировки, ЧАС, Процессы.АвтоматическоеВыполнениеЗаданияЧасов) <= &ТекущаяДата
		|	И Задание.ТекущийЭтап <> Процессы.АвтоматическоеВыполнениеЗаданияЭтап
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задание.Дата";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗакрытых = 0;
	Ошибки = 0;
	Пока Выборка.Следующий() Цикл
        
        НачатьТранзакцию();
		Попытка

            Объект 				= Выборка.Ссылка.ПолучитьОбъект();
    		Объект.ТекущийЭтап 	= Выборка.АвтоматическоеВыполнениеЗаданияЭтап;
    		
    		Если Выборка.АвтоматическоеВыполнениеЗаданияЧасов < 24 Тогда
    			Стр = СтрШаблон(НСтр("ru = '%1 ч.'"), 
    				Формат(Выборка.АвтоматическоеВыполнениеЗаданияЧасов, "ЧДЦ=0; ЧН=0"));
    		Иначе
    			Стр = СтрШаблон(НСтр("ru = '%1 д.'"), 
    				Формат(Выборка.АвтоматическоеВыполнениеЗаданияЧасов / 24, "ЧДЦ=0; ЧН=0"));
    			Если Выборка.АвтоматическоеВыполнениеЗаданияЧасов % 24 <> 0 Тогда
    				Стр = Стр + СтрШаблон(НСтр("ru = '%1 ч.'"), 
    					Формат(Выборка.АвтоматическоеВыполнениеЗаданияЧасов % 24, "ЧДЦ=0; ЧН=0"));
    			КонецЕсли;
    			Стр = СокрЛП(Стр);
    		КонецЕсли;		
    		Объект.Комментарий = ?(ПустаяСтрока(Объект.Комментарий), "", Объект.Комментарий + ". ") 
    			+ СтрШаблон(НСтр("ru = 'Задание закрыто выполнено в связи с отсутствием активности более %1'"), Стр);
		
			Объект.Записать(РежимЗаписиДокумента.Проведение);
            ЗафиксироватьТранзакцию();
			КоличествоЗакрытых = КоличествоЗакрытых + 1;
            
        Исключение
            
            ОтменитьТранзакцию();
			Ошибки = Ошибки + 1;
			Если Интерактивно Тогда
				ОбщегоНазначения.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка автоматического выполнения заданий'"),
				УровеньЖурналаРегистрации.Ошибка,, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
                
		КонецПопытки;
		
	КонецЦикла;
	
	Если Интерактивно Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Автоматическое выполнение заданий выполнена успешно. Выполнено заданий - %1, ошибок - %2'"),
					Формат(КоличествоЗакрытых, "ЧН=0"), Формат(Ошибки, "ЧН=0")));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // АвтоматическоеВыполнениеЗаданий.

// Выполняет автоматическое завершение заданий (установка флага "Завершено").
//
// Параметры:
//	Интерактивно - Булево - запуск был вручную (Истина) или автоматически (Ложь).
//
Процедура АвтоматическоеЗавершениеЗаданий(Интерактивно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задание.Ссылка
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	Задание.Проведен = ИСТИНА
		|	И Задание.Выполнено = ИСТИНА
		|	И Задание.Завершено = ЛОЖЬ
		|	И Задание.ДатаКорректировки <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ДОБАВИТЬКДАТЕ(Задание.ДатаКорректировки, ЧАС, &КоличествоЧасов) <= &ТекущаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задание.Дата";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("КоличествоЧасов", 
		Константы.ИнтервалАвтоматическогоЗавершенияВыполненыхЗаданий.Получить());
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗавершенных = 0;
	Ошибки = 0;
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
    		Объект = Выборка.Ссылка.ПолучитьОбъект();
    		Объект.Завершено = Истина;
    		Объект.ДатаЗавершения = ТекущаяДатаСеанса();
			Объект.Записать(РежимЗаписиДокумента.Проведение);
            ЗафиксироватьТранзакцию();
			КоличествоЗавершенных = КоличествоЗавершенных + 1;            
        Исключение
            ОтменитьТранзакцию();
			Ошибки = Ошибки + 1;
			Если Интерактивно Тогда
				ОбщегоНазначения.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка автоматического завершения заданий'"),
				УровеньЖурналаРегистрации.Ошибка,, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	Если Интерактивно Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Автоматическое закрытие заданий выполнена успешно. Закрыто заданий - %1, ошибок - %2'"),
					Формат(КоличествоЗавершенных, "ЧН=0"), Формат(Ошибки, "ЧН=0")));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // АвтоматическоеЗавершениеЗаданий

// Автоматическое выполнение заданий (запускается регламентным заданием).
//
// Параметры:
//	Нет.
//
Процедура АвтоматическоеВыполнениеЗаданийИзРегламентногоЗадания() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьServiceDesk") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.АвтоматическоеВыполнениеЗаданий);
		
	АвтоматическоеВыполнениеЗаданий(Ложь);
	
КонецПроцедуры // АвтоматическоеВыполнениеЗаданийИзРегламентногоЗадания

// Автоматическое заершение заданий (запускается регламентным заданием).
//
// Параметры:
//	Нет.
//
Процедура АвтоматическоеЗавершениеЗаданийИзРегламентногоЗадания() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьServiceDesk") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.АвтоматическоеЗавершениеЗаданий);
	
	АвтоматическоеЗавершениеЗаданий(Ложь);
	
КонецПроцедуры

// Выполняется из фонового задания создание регламентных заданий в подсистеме Service Desk.
Процедура АвтоматическоеСозданиеРегламентныхЗаданий() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьServiceDesk") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.АвтоматическоеСозданиеРегламентныхЗаданийПоШаблонам);
		
	АвтоматическоеСозданиеРегламентныхЗаданийИнтерактивно(Ложь);
	
КонецПроцедуры // АвтоматическоеСозданиеРегламентныхЗаданий

// Удаляет из HTML лишний текст.
Функция ОчиститьHTMLПерепискуОтвета(Знач Текст) Экспорт
	
	ПропускаемыеТеги = Новый Массив;
	ПропускаемыеТеги.Добавить("br");
	ПропускаемыеТеги.Добавить("img");
	ПропускаемыеТеги.Добавить("hr");
	ПропускаемыеТеги.Добавить("meta");
	ПропускаемыеТеги.Добавить("!doctype");
	ПропускаемыеТеги.Добавить("!--[if");
	ПропускаемыеТеги.Добавить("![endif]--");
	ПропускаемыеТеги.Добавить("!--");
	ПропускаемыеТеги.Добавить("!--" + Символы.ПС + "/*");
	
	Результат = Текст;
	
	МассивМаркеровОкончанияПисьма = УправлениеITОтделом8УФПовтИсп.МассивМаркеровОкончанияЭлектронногоПисьма();
	
	Для Каждого Строки Из МассивМаркеровОкончанияПисьма Цикл
		СтрокаПоиска = НРег(Строки);
		
		Позиция = СтрНайти(НРег(Результат), СтрокаПоиска);
		Если Позиция > 0 Тогда
			
			Теги = Новый Массив;
			Результат = Лев(Результат, Позиция - 1);			
			
			// Считаем теги.
			//@skip-warning
			КоличествоТегов = СтрЧислоВхождений(НРег(Текст), "<");
			ТекущаяПозиция = 1;
			ТегОткрывается 	= СтрНайти(Результат, "<", НаправлениеПоиска.СНачала, ТекущаяПозиция, );
			ТегЗакрывается 	= СтрНайти(Результат, ">", НаправлениеПоиска.СНачала, ТекущаяПозиция, );
			Пока ТегОткрывается > 0 И ТегЗакрывается > 0 И ТекущаяПозиция < СтрДлина(Результат) Цикл
				
				ТегОткрывается 	= СтрНайти(Результат, "<", НаправлениеПоиска.СНачала, ТекущаяПозиция);
				ТегЗакрывается 	= СтрНайти(Результат, ">", НаправлениеПоиска.СНачала, ТекущаяПозиция);
								
				ИмяТега			= СокрЛП(Сред(Результат, ТегОткрывается + 1, ТегЗакрывается - ТегОткрывается - 1));
				// Открылся и сразу закрылся.
				Если СтрНайти(ИмяТега, "/") = СтрДлина(ИмяТега) Тогда
					ТекущаяПозиция = ТегЗакрывается + 1; 
					Продолжить;
				КонецЕсли;				
				ТегЗаканчивается= СтрНайти(ИмяТега, " ");
				Если ТегЗаканчивается > 0 Тогда
					ИмяТега		= Лев(ИмяТега, ТегЗаканчивается - 1); 
				КонецЕсли;
				Открытие        = СтрНайти(ИмяТега, "/") <> 1;
								
				Если НЕ Открытие Тогда
					ИмяТега = СтрЗаменить(ИмяТега, "/", "");
				КонецЕсли;
				
				Если ПропускаемыеТеги.Найти(НРег(ИмяТега)) <> Неопределено Тогда
					ТекущаяПозиция = ТегЗакрывается + 1; 
					Продолжить;					
				КонецЕсли;
								
				ИндексТега = 0;
				Пока ИндексТега < Теги.Количество() Цикл
					
					Структура = Теги.Получить(ИндексТега);
					Если Структура.ИмяТега = ИмяТега Тогда
						Прервать;
					КонецЕсли;
					ИндексТега = ИндексТега + 1;
					
				КонецЦикла;
				
				Если ИндексТега = Теги.Количество() Тогда
					
					Структура = Новый Структура;
					Структура.Вставить("ИмяТега", ИмяТега);
					Структура.Вставить("Количество", ?(Открытие, 1, 0));
					Структура.Вставить("Текст", Сред(Результат, ТегОткрывается, ТегЗакрывается - ТегОткрывается) 
						+ Символы.ПС);
					Теги.Добавить(Структура);
					
				Иначе
					
					Структура.Количество = Структура.Количество + ?(Открытие, 1, -1);
					Структура.Текст	= Структура.Текст + Сред(Результат, ТегОткрывается, ТегЗакрывается - ТегОткрывается) 
						+ Символы.ПС;
					Теги.Установить(ИндексТега, Структура);
					
				КонецЕсли;
								
				ТекущаяПозиция = ТегЗакрывается + 1; 
				
			КонецЦикла;
			
			// Закрываем не закрытые теги в обратном порядке в котором мы их встретили.
			Если Теги.Количество() > 0 Тогда
				Индекс = Теги.Количество() - 1;
				Пока Индекс >= 0 Цикл
					
					Структура = Теги.Получить(Индекс);
					
					Если Структура.Количество > 0 Тогда
						Для Индекс2 = 1 По Структура.Количество Цикл
							Результат = Результат + "</" + Структура.ИмяТега + ">";
						КонецЦикла;
					КонецЕсли;
					
					Индекс = Индекс - 1;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Описание задания в формате HTML.
//
// Параметры:
//	Задание - ДокументыСсылка.Задание - документ основание.
//	УникальныйИдентификатор - УникальныйИдентификатор - УИД формы.
//	ВыводитьРеквизиты - Булево - 
//  ВыводитьОписание - Булево -
//	ВыводитьКомментарии - Булево -
//	ДобавлятьНавигационнуюСсылку - Булево -
//
// Возвращаемое значение:
//	Строка - HTML-представление документа
//
Функция СформироватьОписаниеЗадачи(Знач Задание, Знач УникальныйИдентификатор, 
	Знач ВыводитьРеквизиты = Истина, Знач ВыводитьОписание = Истина,
	Знач ВыводитьКомментарии = Ложь, Знач ДобавлятьНавигационнуюСсылку = Истина) Экспорт

	Возврат СЛС.СформироватьОписаниеЗадачи(Задание, УникальныйИдентификатор, ВыводитьРеквизиты, ВыводитьОписание, 
		ВыводитьКомментарии, ДобавлятьНавигационнуюСсылку);
	
КонецФункции

Процедура ЭлектронноеПисьмоИсходящееПриСозданииНаСервере(Форма, Параметры) Экспорт
	
	// Видимость страницы "Статья базы знаний".
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Если Форма.Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
			Если НЕ ПустаяСтрока(Форма.Объект.ЭкспортируемыйТекстHTML) Тогда
				Форма.Элементы.СтраницаЭкспортируемыеДанные.Видимость = Истина;
			Иначе
				Форма.Элементы.СтраницаЭкспортируемыеДанные.Видимость = Ложь;
			КонецЕсли;
		Иначе				
			Форма.Элементы.СтраницаЭкспортируемыеДанные.Видимость = Ложь;
		КонецЕсли;	
	Иначе
		Форма.Элементы.СтраницаЭкспортируемыеДанные.Видимость = Истина;
	КонецЕсли;	
	
	Если Параметры.Свойство("ЭкспортируемыйТекстHTML") Тогда
		Форма.Объект.ЭкспортируемыйТекстHTML = Параметры.ЭкспортируемыйТекстHTML;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.Объект.ЭкспортируемыйТекстHTML) Тогда
		Форма.Элементы.СтраницаЭкспортируемыеДанные.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Форма.ФорматСообщения  = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
	Форма.Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
	
КонецПроцедуры

Процедура ЭлектронноеПисьмоИсходящееПередЗаписьюНаСервере(Форма, ТекстПисьма) Экспорт
	
	Если ПустаяСтрока(Форма.Объект.ЭкспортируемыйТекстHTML) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если Не Форма.ВыполняетсяОтправка Тогда
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	ТаблицаСтилей        = БазаЗнанийCSSКлиентСервер.ПолучитьТаблицуСтилей();
			
	ТекстHTML 			 = Форма.Объект.ЭкспортируемыйТекстHTML;
	ТекстПисьмаHTML		 = РаботаСHTML.ТекстТелаДокумента(ТекстПисьма);
	ТекстПисьмаHTML 	 = "<div>" + Символы.ПС + СокрЛП(ТекстПисьмаHTML) + Символы.ПС + "</div>";
	
	ВложенияСтатьиБазыЗнаний = Новый Соответствие;
	ДокументHTML   = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	
	// Картинки из временного хранилища.
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		Если Не ЭтоАдресВременногоХранилища(АтрибутИсточникКартинки.ТекстовоеСодержимое) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеВложения = Новый Структура("ДвоичныеДанные, Идентификатор");
		ОписаниеВложения.ДвоичныеДанные = ПолучитьИзВременногоХранилища(АтрибутИсточникКартинки.ТекстовоеСодержимое);
		ОписаниеВложения.Идентификатор = Новый УникальныйИдентификатор;
		ВложенияСтатьиБазыЗнаний.Вставить(
			СтрШаблон("cid%1", СтрЗаменить(ОписаниеВложения.Идентификатор, "-", "")),
			ОписаниеВложения);
		
		НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
		НовыйАтрибутКартинки.ТекстовоеСодержимое = СтрШаблон("cid:%1", ОписаниеВложения.Идентификатор);
		//@skip-warning
		Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
		
	КонецЦикла;
	
	Если ВложенияСтатьиБазыЗнаний.Количество() > 0 Тогда
		ИндексИмениКартинки = 1;
		Для Каждого СтрокаВложение Из ВложенияСтатьиБазыЗнаний Цикл
			НоваяСтрока = Форма.ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();			
			НоваяСтрока.ИмяФайла 				  = "imagekb" + Строка(ИндексИмениКартинки);
			НоваяСтрока.ИдентификаторФайлаДляHTML = СтрокаВложение.Значение.Идентификатор;
			НоваяСтрока.Картинка 				  = Новый Картинка(СтрокаВложение.Значение.ДвоичныеДанные);
			ИндексИмениКартинки                   = ИндексИмениКартинки + 1;
		КонецЦикла;	
	КонецЕсли;	

	СтатьяБазыЗнанийHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);	
	СтатьяБазыЗнанийHTML = СокрЛП(РаботаСHTML.ТекстТелаДокумента(СтатьяБазыЗнанийHTML));
	
	ПолныйТекстПисьма = 
	"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN""
	|	""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
	|<html xmlns=""http://www.w3.org/1999/xhtml"">
	|	<head>	
	|		" + ТаблицаСтилей + "
	|	</head>
	|	<body>
	|       [[КонтентПисьма]]
	|		<div id='content' class='content_main'>
	|			<hr>
	|			[[ОсновнойКонтент]]
	|		</div>
	|	</body>
	|</html>";
	
	ТекстПисьма = СтрЗаменить(ПолныйТекстПисьма, "[[КонтентПисьма]]",   ТекстПисьмаHTML);
	ТекстПисьма = СтрЗаменить(ТекстПисьма,       "[[ОсновнойКонтент]]", ТекстHTML);	
	
КонецПроцедуры

#КонецОбласти

#Область СтатьиБазыЗнаний

Процедура ЗаполнитьМассивПредметовСтатейПоДокументуЗадание(МассивПредметы, Знач ОбъектСсылка) Экспорт
	
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Ссылка);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.SLA);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Сервис);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Процесс);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Проект);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Инициатор);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.ТекущийЭтап);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.ТекущийИсполнитель);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Организация);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Клиент);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Подразделение);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.МестоХранения);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.КарточкаНоменклатуры);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Родитель);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.ГруппаЗадания);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Категория);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Спринт);
	Если ОбъектСсылка.Теги.Количество() > 0 Тогда
		Для Каждого СтрокаТег Из ОбъектСсылка.Теги Цикл
			ДобавитьВМассив(МассивПредметы, СтрокаТег.Тег);
		КонецЦикла;	
	КонецЕсли;
	
	ЗаполнитьПроблемыПоДокументуЗадание(МассивПредметы, ОбъектСсылка.Ссылка);
	
КонецПроцедуры

Процедура ЗаполнитьМассивПредметовСтатейПоДокументуПроблема(МассивПредметы, Знач ОбъектСсылка) Экспорт
	
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Ссылка);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Категория);
	ДобавитьВМассив(МассивПредметы, ОбъектСсылка.Сервис);
	
	Если ОбъектСсылка.Задания.Количество() > 0 Тогда
		Для Каждого СтрокаЗадания Из ОбъектСсылка.Задания Цикл
			Если ЗначениеЗаполнено(СтрокаЗадания.Задание) Тогда
				ЗаполнитьМассивПредметовСтатейПоДокументуЗадание(МассивПредметы, СтрокаЗадания.Задание);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьСвязиОбъектовСтатьиБазыЗнанийПриПроведенииДокумента(ОбъектСсылка, 
	Событие = "ПроведениеДокумента") Экспорт
	
	Если Событие = "ПроведениеДокумента" Тогда
		
		Если ТипЗНЧ(ОбъектСсылка) = Тип("ДокументСсылка.Проблема") Тогда
			МассивСтатей = Новый Массив;			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ПроблемаРешения.СтатьяБазыЗнаний КАК СтатьяБазыЗнаний
				|ИЗ
				|	Документ.Проблема.Решения КАК ПроблемаРешения
				|ГДЕ
				|	ПроблемаРешения.Ссылка = &Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЗаданиеРешения.СтатьяБазыЗнаний
				|ИЗ
				|	Документ.Задание.Решения КАК ЗаданиеРешения
				|ГДЕ
				|	ЗаданиеРешения.Ссылка В
				|			(ВЫБРАТЬ
				|				ПроблемаЗадания.Задание КАК Задание
				|			ИЗ
				|				Документ.Проблема.Задания КАК ПроблемаЗадания
				|			ГДЕ
				|				ПроблемаЗадания.Ссылка = &Ссылка)";
			
			Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
			МассивСтатей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтатьяБазыЗнаний");
			Если МассивСтатей.Количество() > 0 Тогда
				УстановитьСвязьОбъектаИСтатейБазыЗнаний(ОбъектСсылка, МассивСтатей);
			КонецЕсли;
			
		ИначеЕсли ТипЗНЧ(ОбъектСсылка) = Тип("ДокументСсылка.Задание") Тогда
			МассивСтатей = Новый Массив;
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ЗаданиеРешения.СтатьяБазыЗнаний КАК СтатьяБазыЗнаний
				|ИЗ
				|	Документ.Задание.Решения КАК ЗаданиеРешения
				|ГДЕ
				|	ЗаданиеРешения.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
			МассивСтатей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтатьяБазыЗнаний");
			Если МассивСтатей.Количество() > 0 Тогда
				УстановитьСвязьОбъектаИСтатейБазыЗнаний(ОбъектСсылка, МассивСтатей);
			КонецЕсли;
		КонецЕсли;	
		
	ИначеЕсли Событие = "УдалениеПроведенияДокумента" Тогда
		УдалитьСвязьОбъектаИСтатейБазыЗнаний(ОбъектСсылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвязьОбъектаИСтатейБазыЗнаний(Знач Объект, Знач МассивСтатей) Экспорт
	
	мТекущаяДата	= ТекущаяДатаСеанса();
	НаборЗаписей 	= РегистрыСведений.СвязьСтатейБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Для Каждого СтатьяМассива Из МассивСтатей Цикл
		СтрокаНабора 				= НаборЗаписей.Добавить();
		СтрокаНабора.Статья 		= СтатьяМассива;
		СтрокаНабора.Объект 		= Объект;
		СтрокаНабора.Дата   		= мТекущаяДата;
		СтрокаНабора.Пользователь 	= ТекущийПользователь;
	КонецЦикла;
    
    НачатьТранзакцию();
	Попытка
		НаборЗаписей.Записать();
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьСвязьОбъектаИСтатейБазыЗнаний(Знач Объект) Экспорт
    
    НачатьТранзакцию();
    Попытка
    	НаборЗаписей = РегистрыСведений.СвязьСтатейБазыЗнаний.СоздатьНаборЗаписей();
    	НаборЗаписей.Отбор.Объект.Установить(Объект);
    	НаборЗаписей.Записать(Истина);
    	ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
    КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьПроблемыПоДокументуЗадание(МассивОбъектов, Знач ОбъектСсылка) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПроблемаЗадания.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Проблема.Задания КАК ПроблемаЗадания
		|ГДЕ
		|	ПроблемаЗадания.Задание = &Задание";
	
	Запрос.УстановитьПараметр("Задание", ОбъектСсылка);
	РезультатЗапроса       = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДобавитьВМассив(МассивОбъектов, ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область ОчередьВыполненияЗаданий

// Добавляет задание в очередь либо удаляет задание из очереди при записи задания.
//
// Параметры:
//	ЗаданиеОбъект - ДокументОбъект.Задание.
//
Процедура ПоставитьСнятьСОчередиЗадание(Знач ЗаданиеОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПометкаУдаления			= ЗаданиеОбъект.ПометкаУдаления;
	ЗаданиеВыполнено		= ЗаданиеОбъект.Выполнено;
	ЗаданиеСсылка			= ЗаданиеОбъект.Ссылка;		
	
	// Если пометка на удаление или задание выполнено, 
	// удалить задание из очереди и выполнить пересчет очереди.
	Если ПометкаУдаления ИЛИ ЗаданиеВыполнено Тогда
		
		УдалитьЗаданиеИзОчереди(ЗаданиеСсылка);
		Возврат;
		
	КонецЕсли;
	
	// Проверка изменения исполнителя,
	// сначала удалить задание из всех очередей, 
	// текущему исполнителю - поставить в очередь.	
	ТекущийИсполнитель		= ЗаданиеОбъект.ТекущийИсполнитель;
	ПредыдущийИсполнитель	= Справочники.Пользователи.ПустаяСсылка();
	
	Если ЗаданиеОбъект.ДополнительныеСвойства.Свойство("ПредыдущийИсполнитель") Тогда
		ПредыдущийИсполнитель = ЗаданиеОбъект.ДополнительныеСвойства.ПредыдущийИсполнитель;
	КонецЕсли;	
	
	Если ТекущийИсполнитель <> ПредыдущийИсполнитель Тогда
		
		УдалитьЗаданиеИзОчереди(ЗаданиеСсылка);
		Если ЗначениеЗаполнено(ТекущийИсполнитель) Тогда
			ПоставитьЗаданиеВОчередь(ТекущийИсполнитель, ЗаданиеСсылка);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;	
		
	// Новое либо возвращенное к выполнению задание ставим в очередь.	
	Если ЗначениеЗаполнено(ЗаданиеОбъект.ТекущийИсполнитель) Тогда
		ПоставитьЗаданиеВОчередь(ЗаданиеОбъект.ТекущийИсполнитель, ЗаданиеСсылка);
	КонецЕсли;
		
КонецПроцедуры

// Выполняет пересчет очереди выполнения заданий.
//
// Параметры:
//	Исполнитель - СправочникСсылка.Пользователь или СправочникСсылка.ГруппыПользователей - текущий исполнитель.
//
Процедура ВыполнитьПересчетОчередиЗаданий(Знач Исполнитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьВыполненияЗаданий.Исполнитель КАК Исполнитель,
		|	ОчередьВыполненияЗаданий.Задание КАК Задание,
		|	ОчередьВыполненияЗаданий.НомерВОчереди КАК НомерВОчереди
		|ИЗ
		|	РегистрСведений.ОчередьВыполненияЗаданий КАК ОчередьВыполненияЗаданий
		|ГДЕ
		|	ОчередьВыполненияЗаданий.Исполнитель = &Исполнитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерВОчереди";
	
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);		
	Выборка = Запрос.Выполнить().Выбрать();
	Номер	= 1;
	
	Пока Выборка.Следующий() Цикл	
		
		Запись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
		Запись.Исполнитель		= Исполнитель;
		Запись.Задание			= Выборка.Задание;
		Запись.НомерВОчереди	= Номер;
		Запись.Записать(Истина);
		Номер = Номер + 1;
		
	КонецЦикла;	
	
КонецПроцедуры	

// Добавляет задание в очередь.
//
// Параметры:
//	Исполнитель - СправочникСсылка.Пользователь или СправочникСсылка.ГруппыПользователей - текущий исполнитель.
//	ЗаданиеСсылка - ДокументСсылка.Задание - задание, которое добавляется в очередь.
//
Процедура ПоставитьЗаданиеВОчередь(Знач Исполнитель, Знач ЗаданиеСсылка) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Если задание уже присутствует в очереди - выход.		
	Запись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
	Запись.Исполнитель 	= Исполнитель;
	Запись.Задание		= ЗаданиеСсылка;
	Запись.Прочитать();
	
	Если Запись.Выбран() Тогда
		Возврат;
	КонецЕсли;	
	
	// Добавляем задание в очередь для переданного пользователя.
	НомерВОчереди = 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ОчередьВыполненияЗаданий.НомерВОчереди), 0) КАК НомерВОчереди
		|ИЗ
		|	РегистрСведений.ОчередьВыполненияЗаданий КАК ОчередьВыполненияЗаданий
		|ГДЕ
		|	ОчередьВыполненияЗаданий.Исполнитель = &Исполнитель";
	
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);	
	РезультатЗапроса		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();	
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда		
		
		НомерВОчереди = ВыборкаДетальныеЗаписи.НомерВОчереди + 1;
		
	КонецЕсли;
	
	Запись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
	Запись.Исполнитель 	= Исполнитель;
	Запись.Задание		= ЗаданиеСсылка;
	Запись.НомерВОчереди= НомерВОчереди;
	
	Попытка		
		Запись.Записать(Истина);		
	Исключение		
		мОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не удалось добавить задание в очередь по причине: '")
				+ мОписаниеОшибки);				
	КонецПопытки;	
	
КонецПроцедуры

// Удаляет задание из очереди.
//
// Параметры:
//	ЗаданиеСсылка - ДокументСсылка.Задание - задание, которое удаляется из очереди.
//
Процедура УдалитьЗаданиеИзОчереди(Знач ЗаданиеСсылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задание.Установить(ЗаданиеСсылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда		
		МассивИсполнителей = Новый Массив;
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если ЗначениеЗаполнено(Запись.Исполнитель) Тогда
				Если МассивИсполнителей.Найти(Запись.Исполнитель) = Неопределено Тогда
					МассивИсполнителей.Добавить(Запись.Исполнитель);
				КонецЕсли;	
			КонецЕсли;
			
			НаборЗаписей.Удалить(Запись);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		Для Каждого Элем Из МассивИсполнителей Цикл
			ВыполнитьПересчетОчередиЗаданий(Элем);
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет все очереди по всем заданиям в фоне.
//
// Параметры:
//	ПараметрыПроверки - Структура, см. ДлительныеОперации.
//	АдресХранилища	- адрес временного хранилища. 	
//
Процедура ЗаполнитьОчередьВыполненияПоВсемЗаданиямВФоне(Знач ПараметрыПроверки, 
	АдресХранилища = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задание.Ссылка КАК ЗаданиеСсылка,
		|	Задание.ТекущийИсполнитель КАК ТекущийИсполнитель
		|ИЗ
		|	Документ.Задание КАК Задание
		|ГДЕ
		|	НЕ Задание.ПометкаУдаления
		|	И НЕ Задание.Выполнено
		|	И НЕ Задание.Завершено
		|	И НЕ Задание.ТекущийИсполнитель ЕСТЬ NULL
		|	И Задание.ТекущийИсполнитель <> НЕОПРЕДЕЛЕНО
		|	И Задание.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка)
		|	И Задание.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задание.ДатаСоздания";
	
	РезультатЗапроса		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	ТаблицаКлючей = Новый ТаблицаЗначений;
	ТаблицаКлючей.Колонки.Добавить("Исполнитель");
	ТаблицаКлючей.Колонки.Добавить("ПоследнийНомер");
	
	// Очистим регистр.
	НаборЗаписей = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл								
		
		Запись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
		Запись.Исполнитель	= ВыборкаДетальныеЗаписи.ТекущийИсполнитель;
		Запись.Задание		= ВыборкаДетальныеЗаписи.ЗаданиеСсылка;
		Запись.Прочитать();
				
		Если Запись.Выбран() Тогда
			Продолжить;
		КонецЕсли;	
		
		// Номер в очереди.
		ОтборИсполнитель = Новый Структура;
		ОтборИсполнитель.Вставить("Исполнитель", ВыборкаДетальныеЗаписи.ТекущийИсполнитель);
		МассивСтрок = ТаблицаКлючей.НайтиСтроки(ОтборИсполнитель);
		
		Если МассивСтрок.Количество() = 0 Тогда
			ТекущийНомер				= 1;
			НоваяСтрока					= ТаблицаКлючей.Добавить();
			НоваяСтрока.Исполнитель		= ВыборкаДетальныеЗаписи.ТекущийИсполнитель;
			НоваяСтрока.ПоследнийНомер	= ТекущийНомер;
			
		Иначе
			ТекущийНомер = МассивСтрок[0].ПоследнийНомер + 1;
			МассивСтрок[0].ПоследнийНомер = ТекущийНомер;
			
		КонецЕсли;		
		
		Запись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
		Запись.Исполнитель	= ВыборкаДетальныеЗаписи.ТекущийИсполнитель;
		Запись.Задание		= ВыборкаДетальныеЗаписи.ЗаданиеСсылка;
		Запись.НомерВОчереди= ТекущийНомер;
		
		Попытка
			Запись.Записать(Истина);			
		Исключение
			мОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(мОписаниеОшибки);
		КонецПопытки;	
		
	КонецЦикла;	
	
КонецПроцедуры

// Перемещает задание на один номер выше в очереди.
//
// Параметры:
//	ЗаданиеСсылка - ДокументСсылка.Задание - документ Задание.
//
Функция ПереместитьЗаданиеВверхВОчереди(Знач ЗаданиеСсылка) Экспорт
	
	Результат = Ложь;
	
	ТекущийИсполнитель = ЗаданиеСсылка.ТекущийИсполнитель;
	Если Не ЗначениеЗаполнено(ТекущийИсполнитель) Тогда
		Возврат Результат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
	Запись.Задание		= ЗаданиеСсылка;
	Запись.Исполнитель	= ТекущийИсполнитель;
	Запись.Прочитать();
	
	Если Не Запись.Выбран() 	
		ИЛИ Запись.НомерВОчереди = 1 Тогда
		Возврат Результат;
	КонецЕсли;	
	
	ТекущийНомерВОчереди	= Запись.НомерВОчереди;
	НовыйНомерВОчереди		= ТекущийНомерВОчереди - 1;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьВыполненияЗаданий.Задание КАК Задание
		|ИЗ
		|	РегистрСведений.ОчередьВыполненияЗаданий КАК ОчередьВыполненияЗаданий
		|ГДЕ
		|	ОчередьВыполненияЗаданий.Исполнитель = &Исполнитель
		|	И ОчередьВыполненияЗаданий.НомерВОчереди <= &НомерВОчереди
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьВыполненияЗаданий.НомерВОчереди УБЫВ";
	
	Запрос.УстановитьПараметр("Исполнитель", ТекущийИсполнитель);
	Запрос.УстановитьПараметр("НомерВОчереди", НовыйНомерВОчереди);
	
	РезультатЗапроса		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		НоваяЗапись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
		НоваяЗапись.Исполнитель		= ТекущийИсполнитель;
		НоваяЗапись.Задание			= ВыборкаДетальныеЗаписи.Задание;
		НоваяЗапись.Прочитать();		
		НоваяЗапись.НомерВОчереди	= ТекущийНомерВОчереди;
		
		Попытка
			НоваяЗапись.Записать(Истина);
		Исключение
			мОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(мОписаниеОшибки);
			
			Возврат Результат;
			
		КонецПопытки;	
		
		Запись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
		Запись.Задание		= ЗаданиеСсылка;
		Запись.Исполнитель	= ТекущийИсполнитель;
		Запись.НомерВОчереди= НовыйНомерВОчереди;
		
		Попытка			
			Запись.Записать(Истина);
		Исключение			
			мОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(мОписаниеОшибки);
			
			Возврат Результат;

		КонецПопытки;	
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перемещает задание на один номер ниже в очереди.
//
// Параметры:
//	ЗаданиеСсылка - ДокументСсылка.Задание - документ Задание.
//
Функция ПереместитьЗаданиеВнизВОчереди(Знач ЗаданиеСсылка) Экспорт
	
	Результат = Ложь;
	
	ТекущийИсполнитель = ЗаданиеСсылка.ТекущийИсполнитель;
	Если Не ЗначениеЗаполнено(ТекущийИсполнитель) Тогда
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
	Запись.Задание		= ЗаданиеСсылка;
	Запись.Исполнитель	= ТекущийИсполнитель;
	Запись.Прочитать();
	
	Если Не Запись.Выбран() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекущийНомерВОчереди= Запись.НомерВОчереди;
	НовыйНомерВОчереди	= ТекущийНомерВОчереди + 1;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ОчередьВыполненияЗаданий.НомерВОчереди), 0) КАК ПоследнийНомер
		|ИЗ
		|	РегистрСведений.ОчередьВыполненияЗаданий КАК ОчередьВыполненияЗаданий
		|ГДЕ
		|	ОчередьВыполненияЗаданий.Исполнитель = &Исполнитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьВыполненияЗаданий.Задание КАК Задание
		|ИЗ
		|	РегистрСведений.ОчередьВыполненияЗаданий КАК ОчередьВыполненияЗаданий
		|ГДЕ
		|	ОчередьВыполненияЗаданий.Исполнитель = &Исполнитель
		|	И ОчередьВыполненияЗаданий.НомерВОчереди >= &НомерВОчереди
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьВыполненияЗаданий.НомерВОчереди";
	
	Запрос.УстановитьПараметр("Исполнитель", ТекущийИсполнитель);
	Запрос.УстановитьПараметр("НомерВОчереди", НовыйНомерВОчереди);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатЗапроса = МассивРезультатов[0].Выбрать();
	РезультатЗапроса.Следующий();
	
	Если РезультатЗапроса.ПоследнийНомер = ТекущийНомерВОчереди Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатЗапроса1 = МассивРезультатов[1].Выбрать();
	Если РезультатЗапроса1.Следующий() Тогда
		
		НоваяЗапись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
		НоваяЗапись.Исполнитель		= ТекущийИсполнитель;
		НоваяЗапись.Задание			= РезультатЗапроса1.Задание;
		НоваяЗапись.Прочитать();
		
		НоваяЗапись.НомерВОчереди	= ТекущийНомерВОчереди;
		Попытка
			НоваяЗапись.Записать(Истина);
		Исключение
			мОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(мОписаниеОшибки);
			
			Возврат Результат;
			
		КонецПопытки;	
		
		Запись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
		Запись.Задание		= ЗаданиеСсылка;
		Запись.Исполнитель	= ТекущийИсполнитель;
		Запись.НомерВОчереди= НовыйНомерВОчереди;
		Попытка
			Запись.Записать(Истина);
		Исключение
			мОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(мОписаниеОшибки);
			
			Возврат Результат;

		КонецПопытки;	
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перемещает задание в начало очереди.
//
// Параметры:
//	ЗаданиеСсылка - ДокументСсылка.Задание - документ Задание.
//
Функция ПереместитьЗаданиеВНачалоОчереди(Знач ЗаданиеСсылка) Экспорт
	
	Результат = Ложь;
	
	ТекущийИсполнитель = ЗаданиеСсылка.ТекущийИсполнитель;
	Если Не ЗначениеЗаполнено(ТекущийИсполнитель) Тогда
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
	Запись.Исполнитель	= ТекущийИсполнитель;
	Запись.Задание		= ЗаданиеСсылка;
	Запись.Прочитать();
	
	Если Запись.Выбран() Тогда
		Запись.НомерВОчереди = 0;
		
		Попытка
			Запись.Записать(Истина);
		Исключение
			мОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(мОписаниеОшибки);
			
			Возврат Результат;
			
		КонецПопытки;	
		
		ЗаданияСервер.ВыполнитьПересчетОчередиЗаданий(ТекущийИсполнитель);
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перемещает задание в конец очереди.
//
// Параметры:
//	ЗаданиеСсылка - ДокументСсылка.Задание - документ Задание.
//
Функция ПереместитьЗаданиеВКонецОчереди(Знач ЗаданиеСсылка) Экспорт
	
	Результат = Ложь;
	
	ТекущийИсполнитель = ЗаданиеСсылка.ТекущийИсполнитель;
	Если Не ЗначениеЗаполнено(ТекущийИсполнитель) Тогда
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
	Запись.Задание		= ЗаданиеСсылка;
	Запись.Исполнитель	= ТекущийИсполнитель;
	Запись.Прочитать();
	
	Если Не Запись.Выбран() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекущийНомерВОчереди= Запись.НомерВОчереди;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ОчередьВыполненияЗаданий.НомерВОчереди), 0) КАК ПоследнийНомер
		|ИЗ
		|	РегистрСведений.ОчередьВыполненияЗаданий КАК ОчередьВыполненияЗаданий
		|ГДЕ
		|	ОчередьВыполненияЗаданий.Исполнитель = &Исполнитель";
	
	Запрос.УстановитьПараметр("Исполнитель", ТекущийИсполнитель);
	ВыборкаДетальныеЗаписи	= Запрос.Выполнить().Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	НовыйНомерВОчереди		= ВыборкаДетальныеЗаписи.ПоследнийНомер + 1;
	
	Если НовыйНомерВОчереди <> ТекущийНомерВОчереди Тогда
		
		Запись = РегистрыСведений.ОчередьВыполненияЗаданий.СоздатьМенеджерЗаписи();
		Запись.Задание		= ЗаданиеСсылка;
		Запись.Исполнитель	= ТекущийИсполнитель;
		Запись.НомерВОчереди= НовыйНомерВОчереди;
		
		Попытка
			Запись.Записать(Истина);
		Исключение
			мОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(мОписаниеОшибки);
			
			Возврат Результат;
			
		КонецПопытки;
		
		ЗаданияСервер.ВыполнитьПересчетОчередиЗаданий(ТекущийИсполнитель);		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВМассив(Массив, Знач Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Если Массив.Найти(Значение) = Неопределено Тогда
			Массив.Добавить(Значение);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти