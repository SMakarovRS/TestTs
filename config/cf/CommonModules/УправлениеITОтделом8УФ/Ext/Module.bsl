////////////////////////////////////////////////////////////////////////////////
// Модуль "Управление IT-отделом 8".
//
////////////////////////////////////////////////////////////////////////////////

#Область Системные

//////////////////////////////////////////////////////////////////////////////// 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Возвращает структуру параметров, необходимых для работы клиентского кода,
// при запуске конфигурации, т.е. в обработчиках событий.
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Параметры.Вставить("СтруктураОписанияОбновлений", ПолучитьСтруктуруОписанияОбновлений());
	Параметры.Вставить("ПризнакСбросаПовторноИспользуемыхЗначений", ПризнакСбросаПовторноИспользуемыхЗначений());
	
КонецПроцедуры

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, 
	Поле = Неопределено, Отказ = Ложь) Экспорт
		
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;

	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
	ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;

	Сообщение.УстановитьДанные(ЭтотОбъект);
	Сообщение.Сообщить();

	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибке()

// Позволяет определить есть ли среди реквизитов шапки документа,
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево - Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(Знач ИмяРеквизита, Знач МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Позволяет определить есть ли среди реквизитов шапки справочника,
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеСправочника - объект описания метаданных справочника, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево - Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитСправочника(ИмяРеквизита, МетаданныеСправочника) Экспорт

	Возврат НЕ (МетаданныеСправочника.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Позволяет определить есть ли среди табличных частей документа,
// табличная часть с переданным именем.
//
// Параметры: 
//  ИмяТабличнойЧасти - строковое имя искомой табличной части, 
//  МетаданныеДокумента - объект описания метаданных документа, среди табличных частей которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли табличную часть с таким именем, Ложь - не нашли.
//
Функция ЕстьТабличнаяЧастьДокумента(ИмяТабличнойЧасти, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти) = Неопределено);

КонецФункции // ЕстьТабличнаяЧастьДокумента()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	НайденныйРеквизит = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
		ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()

// Процедура устанавливает условное оформление.
//
Процедура ВыделитьЖирнымОсновнойЭлемент(ВыбранныйЭлемент, Список, ИмяНастройки = "ОсновнойЭлемент") Экспорт
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для Каждого ЭлементУсловногоОформления Из Список.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВыбранныйЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ВыбранныйЭлемент;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки;
	ЭлементУсловногоОформления.Представление = НСтр("ru = 'Выделение основного элемента'");
	
КонецПроцедуры

// Процедура записывает новую настройку пользователя.
Процедура УстановитьНастройкуПользователя(ЗначениеНастройки, ИмяНастройки, ПользовательНастройки = Неопределено) Экспорт
	
	Если ПользовательНастройки = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	Иначе
		Пользователь = ПользовательНастройки;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Пользователь.Использование 	= Истина;
	НаборЗаписей.Отбор.Пользователь.Значение      	= Пользователь;
	НаборЗаписей.Отбор.Настройка.Использование 		= Истина;
	НаборЗаписей.Отбор.Настройка.Значение      		= ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки];

	Запись = НаборЗаписей.Добавить();

	Запись.Пользователь = Пользователь;
	Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки];
	Запись.Значение     = 
		ПланыВидовХарактеристик.НастройкиПользователей[ИмяНастройки].ТипЗначения.ПривестиЗначение(ЗначениеНастройки);
	
	НаборЗаписей.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры // УстановитьНастройкуПользователя()

// Функция выделяет первое слово в предложении.
Функция ВыделитьСлово(ИсходнаяСтрока) Экспорт
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = СтрНайти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

// Возвращает владельца лицензии.
//
// Возвращаемое значение:
//   Строка - владелец.
//
Функция ВладелецЛицензии() Экспорт
	
	Результат = ?(СЛС.СвязьУстановлена(), НСтр("ru = 'КОНФИГУРАЦИЯ НЕ АКТИВИРОВАНА'"), 
		НСтр("ru = 'НЕ НАЙДЕН СЕРВЕР ЛИЦЕНЗИРОВАНИЯ'"));
	Если СЛС.СвязьУстановлена() Тогда
		Результат = СЛС.ВладелецЛицензии();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает редакцию конфигурации (СТАНДАРТ/ПРОФ/КОРП).
//
// Возвращаемое значение:
//   ПеречислениеСсылка.РедакцияКонфигурации - редакция.
//
Функция РедакцияКонфигурации() Экспорт
	
	Результат = "";
	Если СЛС.СвязьУстановлена() Тогда
		Результат = СЛС.РедакцияКонфигурации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, запуск на демо-сервере или нет под ограниченными правами.
//
// Возвращаемое значение: 
//	Булево - Если запуск на демо-сервере с ограниченными правами
//
Функция ЭтоДемоСерверОграниченныеПрава() Экспорт
    
    УстановитьПривилегированныйРежим(Истина);
        
    Стр = ВРег(СокрЛП(ВладелецЛицензии()));
    Стр = СтрЗаменить(Стр, " ", "");
	Стр = СтрЗаменить(Стр, "-", "");
	
	Если ПустаяСтрока(Стр) Тогда
		Возврат Истина;
	Иначе		
		Если (Стр = "ДЕМО" ИЛИ Стр = "ДЕМОВЕРСИЯ") И ИмяПользователя() <> "Администратор"
			И СтрНайти(СтрокаСоединенияИнформационнойБазы(), "itdemo") > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;	
	    
	Возврат Ложь;
    
КонецФункции

// Формирует строку представления номенклатуры с учетом характеристики и серий.
//
// Параметры:
//  НоменклатураПредставление - Строка - представление номенклатуры.
//  ХарактеристикаПредставление - Строка - представление характеристики.
//  ПартияПредставление - Строка - представление партии.
//
// Возвращаемое значение:
//  Строка - строка с представлением номенклатуры.
//
Функция ПредставлениеНоменклатуры(НоменклатураПредставление,
								  ЗаказПокупателяПредставление = "") Экспорт
	
	СтрПредставление = """" + СокрЛП(НоменклатураПредставление) + """";
		
	Если  ЗначениеЗаполнено(ЗаказПокупателяПредставление) Тогда
		СтрПредставление = СтрПредставление + " | """ + СокрЛП(ЗаказПокупателяПредставление) + """";
	КонецЕсли;
	
	Возврат СтрПредставление;
	
КонецФункции // ПредставлениеНоменклатуры()

// Функция создает компоновщик настроек отчета и переопределяет заданные параметры и отборы
//
// Параметры:
//  СвойстваОтчета			 - Структура	 - ключи: "ИмяОтчета" - имя отчета как задано в конфигураторе, "КлючВарианта" (необязательный) - имя варианта отчета
//  ПараметрыИОтборы	 - Массив - массив структур для задания изменяемых параметров и отборов. Ключи структуры:
//									"ИмяПоля" (обязательный) - имя параметра или поле компоновки данных по которому задается отбор,
//									"ПравоеЗначение" (обязательный) - устанавливаемое значение параметра или отбора,
//									"ВидНастройки" (необязательный) - определяет контейнер для помещения параметра или отбора, варианты: "Настройки", "ФиксированныеНастройки",
//									прочие ключи структуры являются необязательными и задают свойства элемента отбора.
// Возвращаемое значение:
//  КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек с измененными параметрами и отборами.
Функция ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы) Экспорт
	Перем ИмяОтчета, КлючВарианта;
	
	СвойстваОтчета.Свойство("ИмяОтчета", ИмяОтчета);
	СвойстваОтчета.Свойство("КлючВарианта", КлючВарианта);
	
	СхемаКомпоновкиДанных = Отчеты[ИмяОтчета].ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Если КлючВарианта <> Неопределено И НЕ ПустаяСтрока(КлючВарианта) Тогда
		ИскомыйВариантОтчета = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючВарианта);
		Если ИскомыйВариантОтчета <> Неопределено Тогда
			Настройки = ИскомыйВариантОтчета.Настройки;
		КонецЕсли;
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(Настройки);
	
	Для Каждого ПараметрОтбор Из ПараметрыИОтборы Цикл
		
		Если ПараметрОтбор.Свойство("ВидНастройки") Тогда
			Если ПараметрОтбор.ВидНастройки = "Настройки" Тогда
				Контейнер = КомпоновщикНастроекКомпоновкиДанных.Настройки;
			ИначеЕсли ПараметрОтбор.ВидНастройки = "ФиксированныеНастройки" Тогда
				Контейнер = КомпоновщикНастроекКомпоновкиДанных.ФиксированныеНастройки;
			КонецЕсли;
		Иначе
			Контейнер = КомпоновщикНастроекКомпоновкиДанных.Настройки;
		КонецЕсли;
		
		НайденныйПараметр = Контейнер.ПараметрыДанных.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных(ПараметрОтбор.ИмяПоля));
		Если НайденныйПараметр <> Неопределено Тогда
			Контейнер.ПараметрыДанных.УстановитьЗначениеПараметра(НайденныйПараметр.Параметр, ПараметрОтбор.ПравоеЗначение);
		КонецЕсли;
		
		НайденныеОтборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Контейнер.Отбор, ПараметрОтбор.ИмяПоля);
		Для Каждого НайденныйОтбор Из НайденныеОтборы Цикл
			
			Если ТипЗнч(НайденныйОтбор) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НайденныйОтбор, ПараметрОтбор);
			
			Если НЕ ПараметрОтбор.Свойство("ВидСравнения") Тогда
				НайденныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			Если НЕ ПараметрОтбор.Свойство("Использование") Тогда
				НайденныйОтбор.Использование = Истина;
			КонецЕсли;
			Если НЕ ПараметрОтбор.Свойство("РежимОтображения") Тогда
				НайденныйОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденныеОтборы.Количество() = 0 И НайденныйПараметр = Неопределено Тогда
			ДобавленныйЭлемент = ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Контейнер.Отбор, ПараметрОтбор.ИмяПоля,
				ВидСравненияКомпоновкиДанных.Равно);
			ЗаполнитьЗначенияСвойств(ДобавленныйЭлемент, ПараметрОтбор);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КомпоновщикНастроекКомпоновкиДанных;
	
КонецФункции // ПолучитьПереопределенныйКомпоновщикНастроек()

// Возвращает имя соединителя не зависимо от версии 1С
Функция ИмяCOMСоединителя() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	ПодстрокиВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СисИнфо.ВерсияПриложения, ".");
	Возврат "v" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + ".Application";
	
КонецФункции

// Возвращает Истину, если клиентское приложение является веб клиентом,
// иначе Ложь.
//
Функция ПриложениеЯвляетсяВебКлиентом() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат ЗначениеЗаполнено(СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	
КонецФункции

// ТЗИсх - какая таблица была
// ТЗКон - какая таблица стала
// Названия колонок должны совпадать
// Ключи - массив ключей
Функция СравнитьПоКлючамТЗ(ТЗНач, ТЗКон, Ключи, НазваниеКолонкиРезультата = "Статус") Экспорт
    ТЗРез = Новый ТаблицаЗначений();
    КолРез = Новый Массив();
    
    // Ищем общие колонки в обоих таблицах.
    Для Каждого Эл Из ТЗНач.Колонки Цикл
        Если ТЗКон.Колонки.Найти(Эл.Имя) <> Неопределено Тогда
            КолРез.Добавить(Эл.Имя);
        КонецЕсли;
    КонецЦикла;
    
    // Добавляем эти колонки в таблицу-результат.
    Для Каждого Эл Из КолРез Цикл
        ТЗРез.Колонки.Добавить(Эл);
    КонецЦикла;
    
    // Добавляем служебные колонки.
    ТЗРез.Колонки.Добавить("___ТЗНачИндекс");
    ТЗРез.Колонки.Добавить("___ТЗКонИндекс");
    ТЗРез.Колонки.Добавить("___ТЗНачКонтроль");
    ТЗРез.Колонки.Добавить("___ТЗКонКонтроль");
    
    
    Для Каждого Стр Из ТЗНач Цикл
        НовСтр=ТЗРез.Добавить();
        НовСтр.___ТЗНачИндекс=ТЗНач.Индекс(Стр)+1;
        НовСтр.___ТЗКонИндекс=0;
        НовСтр.___ТЗНачКонтроль=1;
        НовСтр.___ТЗКонКонтроль=0;
        Для Каждого Эл Из Ключи Цикл
            НовСтр[Эл]=Стр[Эл];
        КонецЦикла;
    КонецЦикла;
    
    Для Каждого Стр Из ТЗКон Цикл
        НовСтр=ТЗРез.Добавить();
        НовСтр.___ТЗНачИндекс=0;
        НовСтр.___ТЗКонИндекс=ТЗКон.Индекс(Стр)+1;
        НовСтр.___ТЗНачКонтроль=0;
        НовСтр.___ТЗКонКонтроль=1;
        Для Каждого Эл Из Ключи Цикл
            НовСтр[Эл]=Стр[Эл];
        КонецЦикла;
    КонецЦикла;
    
    
    СтрокаСвертки = "";
    Для Каждого Эл Из Ключи Цикл
        СтрокаСвертки=СтрокаСвертки+?(СтрокаСвертки="","",",")+Эл;
    КонецЦикла;
    
    СтрокаИтогов="___ТЗНачИндекс,___ТЗКонИндекс,___ТЗНачКонтроль,___ТЗКонКонтроль";
    
    // Сворачиваем.
    ТЗРез.Свернуть(СтрокаСвертки, СтрокаИтогов);
    
    // Восстанавливаем общие колонки.
    ЗнКол=Новый Массив();
    Для Каждого Эл Из КолРез Цикл
        Если ТЗРез.Колонки.Найти(Эл)=Неопределено Тогда
            ТЗРез.Колонки.Добавить(Эл);
            ЗнКол.Добавить(Эл);
        КонецЕсли;
    КонецЦикла;
    
    ТЗРез.Колонки.Добавить(НазваниеКолонкиРезультата);
    
    // Формируем таблицу результата.
    Для Каждого Стр Из ТЗРез Цикл
        Если Стр.___ТЗНачКонтроль>1 ИЛИ Стр.___ТЗКонКонтроль>1 Тогда
            Возврат Новый Структура("КодОшибки", "ДублированиеКлюча");
        ИначеЕсли Стр.___ТЗНачИндекс=0 Тогда
            Стр[НазваниеКолонкиРезультата]=+1; // Добавлена.
            Для Каждого Эл Из ЗнКол Цикл
                Зн=ТЗКон.Получить(Стр.___ТЗКонИндекс-1)[Эл];
                Стр[Эл]=Зн;
            КонецЦикла;
        ИначеЕсли Стр.___ТЗКонИндекс=0 Тогда
            Стр[НазваниеКолонкиРезультата]=-1; // Удалена.
            Для Каждого Эл Из ЗнКол Цикл
                Зн=ТЗНач.Получить(Стр.___ТЗНачИндекс-1)[Эл];
                Стр[Эл]=Зн;
            КонецЦикла;
        Иначе
            Р = Новый Структура();
            Для Каждого Эл Из ЗнКол Цикл
                ЗнНач=ТЗНач.Получить(Стр.___ТЗНачИндекс-1)[Эл];
                ЗнКон=ТЗКон.Получить(Стр.___ТЗКонИндекс-1)[Эл];
                Если ЗнНач<>ЗнКон Тогда
                    Р.Вставить(Эл, ЗнНач);
                КонецЕсли;
                Стр[Эл]=ЗнКон;
            КонецЦикла;
            Стр[НазваниеКолонкиРезультата] = Р; // Структура изменений.
        КонецЕсли;
	КонецЦикла;
	
    Возврат ТЗРез;
	
КонецФункции

// Вычисляет выражение по переданным параметрам
// Формула выражение вида "Изменение по задаче: %Тема% №%Номер% от %Дата%"
// Параметры - это структура с:
// ключем Номер значением 111
// ключем Дата значением ТекущаяДатаСеанса();
Функция ВычислитьВыражениеПоФормуле(Знач Формула, Параметры) Экспорт
	
	Результат = Формула;
	
	Для Каждого Элемент Из Параметры Цикл
		Стр = "";
		Если ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			Если Элемент.Значение = Дата(1, 1, 1) Тогда
				Стр = НСтр("ru = '<Пустая дата>'");
			КонецЕсли;			
		КонецЕсли;
		
		Если ПустаяСтрока(Стр) Тогда
			Стр = СокрЛП(Строка(Элемент.Значение));
		КонецЕсли;
		
		Результат = СтрЗаменить(Результат, Элемент.Ключ, Стр);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет удаление символов из СМС рассылки.
//
// Параметры:
//   Стр - Строка - строка для удаления.
//
// Возвращаемое значение:
//   Строка - строка без лишних символов.
//
//@skip-warning
Функция УдалитьЛишниеСимволыВСМС(Стр)
	
	Результат = Стр;
	
	// Убираем жирность если есть.
	Результат = СтрЗаменить(Результат, "<b>", "");
	Результат = СтрЗаменить(Результат, "</b>", "");
	// Заменяем два пробела на один.
	Пока СтрНайти(Результат, "  ") > 0 Цикл
		Результат = СтрЗаменить(Результат, "  ", " ");
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, ИмяРеквизита) Экспорт
	
	Таблица = ТаблицаРеквизитыДокументов.Скопировать();
	Таблица.Свернуть(ИмяРеквизита);
	Возврат Таблица;
	
КонецФункции // СвернутьТаблицуЗначенийПоРеквизиту()

// Помещает константу хранилище значений во временное хранилище
Функция ПоместитьКонстантуХранилищеЗначенийВоВременноеХранилище(ИмяКонстанты) Экспорт
	
	ХЗ = Константы[ИмяКонстанты].Получить().Получить();
	Если ХЗ = Неопределено Тогда
		Возврат Неопределено;	
	Иначе
		ИмяВременногоФайла = КаталогВременныхФайлов() + "radmin.exe";
		ХЗ.Записать(ИмяВременногоФайла);	
		Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый УникальныйИдентификатор());
		УдалитьФайлы(КаталогВременныхФайлов(), "radmin.exe");
		Возврат Адрес;
	КонецЕсли;
		
КонецФункции

// При копировании документов ключевые поля ЭДО требуют очистки.
//
Процедура ОчиститьДатуНомерВходящегоДокумента(ДокументОбъект) Экспорт
	
	МассивИменРеквизитов	= ПолучитьМассивИменРеквизитовКОчистке();
	МетаданныеДокумента 	= ДокументОбъект.Метаданные();
	
	Для Каждого ЭлементМассива Из МассивИменРеквизитов Цикл
		
		Если НЕ МетаданныеДокумента.Реквизиты.Найти(ЭлементМассива) = Неопределено Тогда
			
			ДокументОбъект[ЭлементМассива] = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьДатуНомерВходящегоДокумента()

Функция ПолучитьМассивИменРеквизитовКОчистке() Экспорт
	
	МассивИмен = Новый Массив;
	
	МассивИмен.Добавить("НомерВходящегоДокумента");
	МассивИмен.Добавить("ДатаВходящегоДокумента");
	
	МассивИмен.Добавить("НомерИсходногоДокумента");
	МассивИмен.Добавить("ДатаИсходногоДокумента");
	
	Возврат МассивИмен;
	
КонецФункции

Процедура ЗаписьВЖурналРегистрации(Знач ИмяСобытия, Знач Уровень = Неопределено, Знач Данные = "", 
	Знач Комментарий = "") Экспорт
	
	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, , Данные, Комментарий);
	
КонецПроцедуры

Функция ТекущаяДатаСистемная() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

Функция ПризнакСбросаПовторноИспользуемыхЗначений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ПризнакСбросаПовторноИспользуемыхЗначений.Получить();
	
КонецФункции

#КонецОбласти

#Область Обновления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ОБНОВЛЕНИЙ.

// По переданной версии возвращает ее числовое значение (вес).
// Чем больше версия тем больше вес.
//
// Параметры:
//   РазрядыВерсииСтроками - Строка - версия вида 3.0.36.5.
//
// Возвращаемое значение:
//   Число - вес версии.
//
Функция ВесВерсииИзМассиваСтрок(Знач РазрядыВерсииСтроками)
	
	Возврат 0
		+ Число(РазрядыВерсииСтроками[0]) * 1000000000
		+ Число(РазрядыВерсииСтроками[1]) * 1000000
		+ Число(РазрядыВерсииСтроками[2]) * 1000
		+ Число(РазрядыВерсииСтроками[3]);
	
КонецФункции

// Находит по представлению в списке значений значение.
//
// Параметры:
//  СЗ - СписокЗначений - список, в котором ищем.
//	Представление - Строка - строка представление в списке.
//
// Возвращаемое значение:
//   Произвольный - значение в списке значений.
//
Функция НайтиПоПредставлениюВСпискеЗначений(Знач СЗ, Знач Представление) Экспорт
	
	Для Каждого Элемент Из СЗ Цикл
		Если ВРег(Элемент.Представление) = ВРег(Представление) Тогда
			Возврат Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Возвращает числовой вес версии для сравнения версий между собой
//
// Параметры:
//  Версия - Строка - Версия в строковом формате
//
// Возвращаемое значение:
//  Число - вес версии
//
Функция ВесВерсии(Знач Версия) Экспорт
	
	Если Версия = "" Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ВесВерсииИзМассиваСтрок(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Версия, "."));
	
КонецФункции

// Декодирует из веса версию числом, версию строкой.
//
// Параметры:
//	Вес - Число - вес версии.
//
// Возвращаемое значение:
//	Строка - версия строкой.
//
// Пример:
//	3000000001 -> 3.0.0.1
Функция ДекодироватьВерсиюИзВесаВерсии(Знач Вес) Экспорт
	
	Попытка
		мВес = Вес;
		Результат = "." + Формат(мВес % 1000, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
		мВес = Цел(мВес / 1000);
		Результат = "." + Формат(мВес % 1000, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + Результат;
		мВес = Цел(мВес / 1000);
		Результат = "." + Формат(мВес % 1000, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + Результат;
		мВес = Цел(мВес / 1000);
		Результат = Формат(мВес, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + Результат;
	Исключение
		Результат = "";
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текущую версию конфигурации/разработки.
//
// Возвращаемое значение:
//   Строка - возвращаемая версия.
//
Функция ПолучитьТекущуюВерсию() Экспорт
	
	// Версия может жестко вшиваться в код.
	Возврат Метаданные.Версия;
	
КонецФункции

// Заменяет в строке подстроку без учета регистра.
//
// Параметры:
//  Стр - Строка - строка основание.
//	ПодстрокаПоиска - Строка - строка, которую ищем.
//	ПодстрокаЗамены - Строка - строка, которую будем вставлять вместо ПодстрокаПоиска.
//
// Возвращаемое значение:
//   Строка - строка замены без учета регистра.
//
Функция СтрЗаменитьБезУчетаРегистра(Стр, ПодстрокаПоиска, ПодстрокаЗамены) Экспорт
	
	Результат = Стр;
	
	Индекс = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска));
	Пока Индекс > 0 Цикл
		
		Результат = Лев(Результат, Индекс - 1) + ПодстрокаЗамены + Сред(Результат, Индекс + СтрДлина(ПодстрокаПоиска));
		Индекс = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует BBCode в HTML.
//
// Параметры:
//   Текст - Строка - BBCode с текстом.
//
// Возвращаемое значение:
//   Строка - HTML текст.
//
// Пример:
//	"[b]Жирный текст[/b], [img]site[/img]" => "<b>Жирный текст</b>, <img src="site" />".
//
Функция ПреобразоватьТекстВHTML(Знач Текст)
	
	Результат = Текст;
	
	Результат = СтрЗаменить(Результат, "[+]", "<span class=""new"">[+]</span>");
	Результат = СтрЗаменить(Результат, "[*]", "<span class=""edt"">[*]</span>");
	Результат = СтрЗаменить(Результат, "[-]", "<span class=""err"">[-]</span>");
	Результат = СтрЗаменить(Результат, "[!]", "<span class=""err"">[!]</span>");
	Результат = СтрЗаменить(Результат, "[#]", "<span class=""nws"">[#]</span>");

	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[br]", 		"<br>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[b]", 		"<b>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/b]", 		"</b>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[i]", 		"<i>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/i]", 		"</i>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[u]", 		"<u>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/u]", 		"</u>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[s]", 		"<s>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/s]", 		"</s>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[quote]", 	"<blockquote>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/quote]", 	"</blockquote>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[code]", 	"<pre>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/code]", 	"</pre>");
	
	Результат = СтрЗаменить(Результат, Символы.ПС, "<br>");
		
	// [url=site]name[/url]
	ПодстрокаПоиска1 = "[url=";
	ПодстрокаПоиска2 = "[/url]";
	Индекс1 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходнаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходнаяСтрока, СтрНайти(ИсходнаяСтрока, "]") - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		Если СтрНайти(ВРег(СсылкаСайта), ВРег("http://")) = 0 И СтрНайти(ВРег(СсылкаСайта), ВРег("https://")) = 0 Тогда
			СсылкаСайта = "http://" + СсылкаСайта;
		КонецЕсли;
					 
		Стр = "<a href=""" + СсылкаСайта + """ target=""_blank"">" + Сред(ИсходнаяСтрока, СтрНайти(ИсходнаяСтрока, "]") + 1,
			СтрНайти(ВРег(ИсходнаяСтрока), ВРег(ПодстрокаПоиска2)) - СтрНайти(ИсходнаяСтрока, "]") - 1) + "</a>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;
	
	// [url]site[/url]
	ПодстрокаПоиска1 = "[url]";
	ПодстрокаПоиска2 = "[/url]";
	Индекс1 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходнаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходнаяСтрока, СтрНайти(ВРег(ИсходнаяСтрока), ВРег(ПодстрокаПоиска2)) - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		Если СтрНайти(ВРЕГ(СсылкаСайта), ВРег("http://")) = 0 И СтрНайти(ВРег(СсылкаСайта), ВРег("https://")) = 0 Тогда
			СсылкаСайта = "http://" + СсылкаСайта;
		КонецЕсли;
					 
		Стр = "<a href=""" + СсылкаСайта + """ target=""_blank"">" + СсылкаСайта + "</a>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;
	
	// [img]site[/img]
	ПодстрокаПоиска1 = "[img]";
	ПодстрокаПоиска2 = "[/img]";
	Индекс1 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходнаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходнаяСтрока, СтрНайти(ВРег(ИсходнаяСтрока), ВРег(ПодстрокаПоиска2)) - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		Если СтрНайти(ВРЕГ(СсылкаСайта), ВРег("http://")) = 0 И СтрНайти(ВРег(СсылкаСайта), ВРег("https://")) = 0 Тогда
			СсылкаСайта = "http://" + СсылкаСайта;
		КонецЕсли;
					 
		Стр = "<img src=""" + СсылкаСайта + """/>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;
	
	// [color=red]Цветной текст[/color]
	ПодстрокаПоиска1 = "[color=";
	ПодстрокаПоиска2 = "[/color]";
	Индекс1 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходнаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходнаяСтрока, СтрНайти(ИсходнаяСтрока, "]") - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		СсылкаСайта = "color:" + СсылкаСайта;
					 
		Стр = "<span style=""" + СсылкаСайта + """>" + Сред(ИсходнаяСтрока, СтрНайти(ИсходнаяСтрока, "]")+ 1,
			СтрНайти(ВРег(ИсходнаяСтрока), ВРег(ПодстрокаПоиска2)) - СтрНайти(ИсходнаяСтрока, "]") - 1) + "</span>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;	

	// [size=15]Размер текста[/size]
	ПодстрокаПоиска1 = "[size=";
	ПодстрокаПоиска2 = "[/size]";
	Индекс1 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходнаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходнаяСтрока, СтрНайти(ИсходнаяСтрока, "]") - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		СсылкаСайта = "font-size:" + СсылкаСайта + "px";
					 
		Стр = "<span style=""" + СсылкаСайта + """>" + Сред(ИсходнаяСтрока, СтрНайти(ИсходнаяСтрока, "]") + 1, 
			СтрНайти(ВРег(ИсходнаяСтрока), ВРег(ПодстрокаПоиска2)) - СтрНайти(ИсходнаяСтрока, "]") - 1) + "</span>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = СтрНайти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает структуру описания для обновления. Основная функция обновления.
// Скачивает с сайта файл версий и проверяет текущую версию и версию на сайте,
// если необходимо обновление, строит список обновлений и текст для них.
//
// Параметры:
//   Принудительно - Булево - выполнить принудительную проверку, или с учетом интервала проверки (раз в N-дней).
//		по умолчанию Ложь.
//
// Возвращаемое значение:
//   Структура -
//		* НеобходимоОбновление - Булево - необходимо ли обновить конфигурацию.
//		* ТекстПриОбновлении - Строка - HTML текст обновления.
//
Функция ПолучитьСтруктуруОписанияОбновлений(Принудительно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Структура("НеобходимоОбновление,ТекстПриОбновлении", Ложь, "");
	
	// Не делаем ничего, если это сеанс внешнего пользователя.
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат Результат;
	КонецЕсли;
	
	// SM 16/07/2022 отключаем обновления
	Возврат Результат;
	
	// НАЧАЛО КОНСТАНТЫ.
	Сайт								= "softonit.ru";
	ДиректорияНаСайте					= "/upd/";
	ФайлОбновлений						= "updates.zip";
	Продукт								= "it";                 // Имя продукта.
	ПериодичностьПроверкиОбновлений 	= 7; 					// Дней между проверками.	
	//@skip-warning
	Производитель						= "SoftOnIT.RU";
	//@skip-warning
	Таймаут								= 5;	
	ЗаписыватьОшибку					= Истина;
	// КОНЕЦ КОНСТАНТЫ.
	
	ДанныеТехподдержки = ДанныеТехподдержки();
	Если ДанныеТехподдержки <> Неопределено Тогда
		СрокДействияТехподдержки 	= ДанныеТехподдержки["ДатаОкончанияТехподдержки"];
		Если СрокДействияТехподдержки < ТекущаяДатаСеанса() Тогда
			Принудительно = Истина;
		ИначеЕсли СрокДействияТехподдержки >= ТекущаяДатаСеанса() 
			И СрокДействияТехподдержки < ДобавитьМесяц(ТекущаяДатаСеанса(), 1) Тогда			
			ПериодичностьПроверкиОбновлений = 3;
		КонецЕсли;
	КонецЕсли;
	
	URLФайлОбновлений					= Сайт + ДиректорияНаСайте + ФайлОбновлений; 
	КаталогИнсталляции 					= КаталогВременныхФайлов() + Продукт + "\";
	ФайлИнсталяции						= КаталогИнсталляции + "updates.xml";
	
	// Проверка необходимости обновления (при автоматическом запуске).
	Если Принудительно = Ложь Тогда
		                                
		// Получаем дату для пользователя.
		Попытка
			//@skip-warning
			ДатаПоследнейПроверкиОбновления = ХранилищеОбщихНастроек.Загрузить("ДатаПоследнейПроверкиОбновления", 
				ИмяПользователя(), Дата(1, 1, 1));
			Если ДатаПоследнейПроверкиОбновления = Неопределено Тогда
				ДатаПоследнейПроверкиОбновления = Дата(1, 1, 1);
			КонецЕсли;
		Исключение
			ДатаПоследнейПроверкиОбновления = Дата(1, 1, 1);
		КонецПопытки;
		ДатаТекущейПроверкиОбновления	= ТекущаяДатаСеанса();
		
		// Необходимо ли обновлять или нет?
		Если ДатаТекущейПроверкиОбновления - ДатаПоследнейПроверкиОбновления < 
			ПериодичностьПроверкиОбновлений * 86400 Тогда
			Возврат Результат;
		КонецЕсли;
		
		// Установка новой даты.
		Попытка
			ХранилищеОбщихНастроек.Сохранить("ДатаПоследнейПроверкиОбновления", ИмяПользователя(), 
				ДатаТекущейПроверкиОбновления); 
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	НастройкиПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
	НастройкиПолучения.ЗащищенноеСоединение = Истина;
	НастройкиПолучения.Заголовки.Вставить("Content-Type", "application/zip");
			
	Данные = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(URLФайлОбновлений, НастройкиПолучения, ЗаписыватьОшибку);

	Если НЕ Данные.Статус Тогда
		Возврат Результат;
	КонецЕсли;                    
	
	ИмяАрхивногоФайла = Данные.Путь;
	
	Попытка
		ФайлАрхива = Новый ЧтениеZipФайла(ИмяАрхивногоФайла);
		ФайлАрхива.ИзвлечьВсе(КаталогИнсталляции, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ФайлАрхива.Закрыть();
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	// Сведения о текущей версии.
	ТекущаяВерсия		= ПолучитьТекущуюВерсию();
	ВесТекущейВерсии	= ВесВерсии(ТекущаяВерсия);
	
	ТаблицаВерсий		= Новый ТаблицаЗначений;
	ТаблицаВерсий.Колонки.Добавить("ИмяФайла");
	ТаблицаВерсий.Колонки.Добавить("Дата");
	ТаблицаВерсий.Колонки.Добавить("Размер");
	ТаблицаВерсий.Колонки.Добавить("НовостьURL");
	ТаблицаВерсий.Колонки.Добавить("НовостьURLТекст");
	ТаблицаВерсий.Колонки.Добавить("ВерсияТекущая");
	ТаблицаВерсий.Колонки.Добавить("ВерсияПерехода");
	ТаблицаВерсий.Колонки.Добавить("ВесВерсии");
	
	// Разбор XML.
	ЧтениеXML			= Новый ЧтениеXML();
	Попытка
		ЧтениеXML.ОткрытьФайл(ФайлИнсталяции);
		ЧтениеXML.Прочитать();	
	Исключение
		Возврат Результат;
	КонецПопытки;
	ПостроительDOM		= Новый ПостроительDOM;
	ДокументДОМ			= ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	// Перебираем все обновления.
	ЭлементыДОМ			= ДокументДОМ.ПолучитьЭлементыПоИмени("update");
	Для Каждого Элемент Из ЭлементыДОМ Цикл
		
		// Определяем продукт.
		ИмяПродукта		= "";
		Атрибуты 		= Элемент.Атрибуты;
		Для Каждого Атрибут Из Атрибуты Цикл
			Если НРег(Атрибут.ИмяУзла) = "product" Тогда
				ИмяПродукта = СокрЛП(Атрибут.ТекстовоеСодержимое);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Обновление не для текущего продукта.
		Если НРег(ИмяПродукта) <> НРег(Продукт) Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполняем список значений для обновления со всеми значениями тегов.
		СЗ = Новый СписокЗначений;
		ДочерниеУзлы = Элемент.ДочерниеУзлы;
		Для Каждого Узел Из ДочерниеУзлы Цикл
			СЗ.Добавить(СокрЛП(Узел.ТекстовоеСодержимое), НРег(СокрЛП(Узел.ИмяУзла)));
		КонецЦикла;
		
		// Пропускаем для старых версий.
		ВерсияТекущая		= НайтиПоПредставлениюВСпискеЗначений(СЗ, "version");
		ВесПредыдущейВерсии	= ВесВерсии(ВерсияТекущая);
		Если ВесПредыдущейВерсии <= ВесТекущейВерсии Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаОбновления				= НайтиПоПредставлениюВСпискеЗначений(СЗ, "date");
		
		// Пропускаем для тех версий, дата которой находится в будущем (например, когда выложили обновление на завтра).
		Попытка
			Если НачалоДня(СтрокаВДату(ДатаОбновления)) > НачалоДня(ТекущаяДатаСеанса()) Тогда
				Продолжить;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		НоваяСтрока					= ТаблицаВерсий.Добавить();
		НоваяСтрока.ИмяФайла		= НайтиПоПредставлениюВСпискеЗначений(СЗ, "file");
		НоваяСтрока.Дата			= ДатаОбновления;
		НоваяСтрока.Размер			= НайтиПоПредставлениюВСпискеЗначений(СЗ, "size");
		НоваяСтрока.НовостьURL		= НайтиПоПредставлениюВСпискеЗначений(СЗ, "newsurl");
		
		// Определяем текст новости.
		ТекстНовости				= НайтиПоПредставлениюВСпискеЗначений(СЗ, "newstext");
		Если ПустаяСтрока(ТекстНовости) Тогда
			// Значит надо загрузить новости из файла на сервере.
			СсылкаНаСодержание		= НайтиПоПредставлениюВСпискеЗначений(СЗ, "newstexturl");
			Если НЕ ПустаяСтрока(СсылкаНаСодержание) Тогда
				НастройкиПолучения	= ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
				НастройкиПолучения.ЗащищенноеСоединение = Истина;
					
				URLОбновления		= Сайт + ДиректорияНаСайте + Продукт + "/" + СсылкаНаСодержание; 
				
				Данные = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(URLОбновления, НастройкиПолучения, 
					ЗаписыватьОшибку);

				Если Данные.Статус Тогда
					ТД				= Новый ТекстовыйДокумент();
					ТД.Прочитать(Данные.Путь, КодировкаТекста.UTF8);
					ТекстНовости	= ТД.ПолучитьТекст();
				КонецЕсли;				                         
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.НовостьURLТекст = ПреобразоватьТекстВHTML(ТекстНовости);
		НоваяСтрока.ВерсияТекущая	= ВерсияТекущая;
		НоваяСтрока.ВерсияПерехода	= НайтиПоПредставлениюВСпискеЗначений(СЗ, "target");
		НоваяСтрока.ВесВерсии		= ВесПредыдущейВерсии;
		
	КонецЦикла;		
	
	ТаблицаВерсий.Сортировать("ВесВерсии Убыв");
	
	// Проверка таблицы надо ли обновлять текущую обработку.
	Если ТаблицаВерсий.Количество() > 0 Тогда
		Результат.НеобходимоОбновление	= Истина;

		Содержание						= "";
		Для Каждого Строки Из ТаблицаВерсий Цикл

			Содержание = Содержание 
				+ ?(ПустаяСтрока(Содержание)			, "", "<hr>")
				+ "<b>" + СтрШаблон(НСтр("ru = 'Версия обновления: %1 от %2'"), Строки.ВерсияТекущая, Строки.Дата) 
				+ "</b><br>"
				+ ?(ПустаяСтрока(Строки.НовостьURLТекст), "", Символы.ПС + Строки.НовостьURLТекст + "<br>")
				+ ?(ПустаяСтрока(Строки.ВерсияПерехода)	, "", ?(Строки.ВерсияПерехода = "*", 
					НСтр("ru = 'Обновление устанавливается на любую версию'"), 
					СтрШаблон(НСтр("ru = 'Обновление устанавливается на версии: <b>%1</b>'"), Строки.ВерсияПерехода)) 
				+ "<br>")
				+ ?(ПустаяСтрока(Строки.НовостьURL)		, "", "<a href=""" + Строки.НовостьURL +""" target=""_blank"">" 
					+ НСтр("ru = 'Новость на сайте'") + "</a><br>")
				+ ?(ПустаяСтрока(Строки.ИмяФайла)		, "", "<a href=""" + Строки.ИмяФайла + """ target=""_blank"">" 
					+ НСтр("ru = 'Скачать обновление'") + " (" + Строки.Размер + ")</a><br>");
				
		КонецЦикла;
		
		// Отображаем срок действия техподдержки
		ДополнитьСодержаниеСрокомДействияТехподдержки(Содержание, ДанныеТехподдержки);
		
		// Текст полностью 
		Результат.ТекстПриОбновлении = 
			"<html><head><style type=""text/css"">
			|.new {font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;color:#090;} 
			|.edt {font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;color:#005EF9;}
			|.err {font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;color:#FF0000;}
			|.nws {font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;color:#810A0A;}
			|</style></head><body>		
			|<p style=""font-family:Arial;font-size:10pt;"">" + Содержание + "</p></body></html>";
		
	КонецЕсли;
	
	Результат.Вставить("КоличествоОбновлений",  ТаблицаВерсий.Количество());
	
	Возврат Результат;
	
КонецФункции

// Преобразует строку в дату.
//
// Параметры:
//	ДатаСтрока - Строка - строка в формате 23.12.83 или 23.12.1983
//
// Возвращаемое значение:
//	
//
Функция СтрокаВДату(Знач ДатаСтрока) Экспорт
    
    ПозицияПробела = СтрНайти(ДатаСтрока, " ", НаправлениеПоиска.СНачала);
    Если ПозицияПробела > 0 Тогда
        ДатаСтрока = Лев(ДатаСтрока, ПозицияПробела - 1);
    КонецЕсли;
    ДатаСтрока = СокрЛП(СтрЗаменить(ДатаСтрока, ".", ""));
    ДатаСтрока = Сред(ДатаСтрока, 5) + Сред(ДатаСтрока, 3, 2) + Лев(ДатаСтрока, 2);
    Если СтрДлина(ДатаСтрока) = 6 Тогда
        ДатаСтрока = "20" + ДатаСтрока;
    КонецЕсли;
    
    ОписаниеТипа = Новый ОписаниеТипов("Дата");
    Результат    = ОписаниеТипа.ПривестиЗначение(ДатаСтрока);
    
    Возврат Результат;
    
КонецФункции 

// Дополняет текст информацией о сроке действия техподдержки.
//
// Параметры:
//	Содержание - Строка - текст, который необходимо дополнить.
//
Процедура ДополнитьСодержаниеСрокомДействияТехподдержки(Содержание, Знач ДанныеТехподдержки)
	
	Если ДанныеТехподдержки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СрокДействияТехподдержки 	= ДанныеТехподдержки["ДатаОкончанияТехподдержки"];
	
	Текст =
		"<b>" + НСтр("ru = 'Владелец лицензии:'") + "</b>&nbsp;" + ВладелецЛицензии() + "<br>" +
		"<b>" + НСтр("ru = 'Редакция конфигурации:'") + "</b>&nbsp;" + РедакцияКонфигурации() + "<br>";
	
	ЦветТекста = "Black";
	ДопТекст = "";
	Если СрокДействияТехподдержки >= ДобавитьМесяц(ТекущаяДатаСеанса(), 1) Тогда
		ЦветТекста = "#009646";
		ДопТекст = СтрШаблон(НСтр("ru = '<span style=""color:%1;"">%2</span>'"), ЦветТекста, 
			НСтр("ru = '<h3>Найдены новые версии! Ваша подписка актуальна.</h3>'"));
	ИначеЕсли СрокДействияТехподдержки <= ТекущаяДатаСеанса() Тогда
		ЦветТекста = "#FF0000";
		ДопТекст = СтрШаблон(НСтр("ru = '<a href=""%1"" style=""color:%2;"" target=""_blank"">%3</a>'"), 
			"https://softonit.ru/catalog/updateit/?id=it3&referrer=utm_source&utm_campaign=from1c_itnews&utm_content=monitor",
			ЦветТекста,
			НСтр("ru = '<h3>Найдены новые версии! К сожалению, Вы больше не можете использовать новые версии ПО и задавать вопросы техподдержке.
                  |Рекомендуем Вам продлить техподдержку (щелкните для продолжения).</h3>'"));
	Иначе
		ЦветТекста = "#E34234";
		ДопТекст = СтрШаблон(НСтр("ru = '<a href=""%1"" style=""color:%2;"" target=""_blank"">%3</a>'"), 
			"https://softonit.ru/catalog/updateit/?id=it3&referrer=utm_source&utm_campaign=from1c_itnews&utm_content=monitor", 
			ЦветТекста,
			НСтр("ru = '<h3>Найдены новые версии! Обратите внимание, что техподдержка и получение новых версий скоро закончится!
                  |При непрерывном продлении цена на техподдержку ниже (щелкните для продолжения).</h3>'"));
	КонецЕсли;
	Текст = Текст + "<b>" + НСтр("ru = 'Срок действия техподдержки:'") + "</b>&nbsp;<span style='color:" 
		+ ЦветТекста + "'>" 
		+ Формат(СрокДействияТехподдержки, "ДФ=dd.MM.yyyy") + "</span><br>"
		+ ДопТекст;
			
	Содержание = Текст + Содержание;
	
КонецПроцедуры

Функция ДанныеТехподдержки()
	
	Попытка
		Данные = СЛС.ДанныеТехподдержки();
		СрокДействияТехподдержки = Данные["ДатаОкончанияТехподдержки"];
		Если ТипЗнч(СрокДействияТехподдержки) <> Тип("Дата") Тогда
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументов

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ШАПКИ ДОКУМЕНТА.

// Возвращает структуру для печати Шапки/Подвала документов.
Функция СтруктураЗаполненияПечатнойФормы(Знач ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Результат = Новый Структура;	
	
	Результат.Вставить("СамДокумент"	, ДокументСсылка);
	Результат.Вставить("Ссылка"			, ДокументСсылка);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Документ." + МетаданныеДокумента.Имя + " КАК Док
		|ГДЕ
		|	Док.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Основные реквизиты.	
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		Результат.Вставить(Реквизит.Имя, Выборка[Реквизит.Имя]);
		Попытка 
			НаборСтандартныхРеквизитов = Выборка[Реквизит.Имя].Метаданные().СтандартныеРеквизиты;
			Для Каждого СтандартныйРеквизит Из  НаборСтандартныхРеквизитов Цикл
				Результат.Вставить(Реквизит.Имя + СтандартныйРеквизит.Имя, 
					Выборка[Реквизит.Имя][СтандартныйРеквизит.Имя]);
			КонецЦикла;
		Исключение
			Продолжить;
		КонецПопытки;
		Попытка 
			НаборРеквизитов = Выборка[Реквизит.Имя].Метаданные().Реквизиты;
			Для Каждого РеквизитОбъекта Из  НаборРеквизитов Цикл
				Результат.Вставить(Реквизит.Имя + РеквизитОбъекта.Имя, Выборка[Реквизит.Имя][РеквизитОбъекта.Имя]);
			КонецЦикла;
		Исключение
			Продолжить;
		КонецПопытки;		
	КонецЦикла;
	
	Результат.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Результат.Вставить("ДатаДокумента"	 , Формат(Выборка.Дата, "ДЛФ=DD"));
	Результат.Вставить("Дата"			 , Выборка.Дата);
	Результат.Вставить("НомерДокумента"  , ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, 
		Истина));
	Результат.Вставить("Номер" 			 , Выборка.Номер);
	Результат.Вставить("ДатаИВремяПечати", ТекущаяДатаСеанса());
	Попытка
		Результат.Вставить("Проведен" 	, Выборка.Проведен);
	Исключение
	КонецПопытки;
	Результат.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
	
	Если ЕстьРеквизитДокумента("Комментарий", МетаданныеДокумента) Тогда
		Результат.Вставить("Комментарий", Выборка["Комментарий"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Автор", МетаданныеДокумента) Тогда
		Результат.Вставить("Автор", Выборка["Автор"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("АвторКорректировки", МетаданныеДокумента) Тогда
		Результат.Вставить("АвторКорректировки", Выборка["АвторКорректировки"]);
	КонецЕсли;	
	Если ЕстьРеквизитДокумента("ДатаСоздания", МетаданныеДокумента) Тогда
		Результат.Вставить("ДатаСоздания", Выборка["ДатаСоздания"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ДатаКорректировки", МетаданныеДокумента) Тогда
		Результат.Вставить("ДатаКорректировки", Выборка["ДатаКорректировки"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Основание", МетаданныеДокумента) Тогда
		Результат.Вставить("Основание", Выборка["Основание"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
		Результат.Вставить("Ответственный", Выборка["Ответственный"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Бюджет", МетаданныеДокумента) Тогда
		Результат.Вставить("Бюджет", Выборка["Бюджет"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ПериодБюджета", МетаданныеДокумента) Тогда
		Результат.Вставить("ПериодБюджета", Выборка["ПериодБюджета"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("СтатьяДоходовРасходов", МетаданныеДокумента) Тогда
		Результат.Вставить("СтатьяДоходовРасходов", Выборка["СтатьяДоходовРасходов"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		Результат.Вставить("Организация", Выборка["Организация"]);
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеОрганизации("Организация", Выборка.Дата, Выборка["Организация"]), 
			Результат);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ОрганизацияРасхода", МетаданныеДокумента) Тогда
		Результат.Вставить("ОрганизацияРасхода", Выборка["ОрганизацияРасхода"]);
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеОрганизации("ОрганизацияРасхода", Выборка.Дата, 
			Выборка["ОрганизацияРасхода"]), Результат);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ОрганизацияПрихода", МетаданныеДокумента) Тогда
		Результат.Вставить("ОрганизацияПрихода", Выборка["ОрганизацияПрихода"]);
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеОрганизации("ОрганизацияПрихода", Выборка.Дата, 
			Выборка["ОрганизацияПрихода"]), Результат);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда
		Результат.Вставить("Контрагент", Выборка["Контрагент"]);
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеКонтрагента("Контрагент", Выборка.Дата, 
			Выборка["Контрагент"]), Результат);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("МестоХранения", МетаданныеДокумента) Тогда
		Результат.Вставить("МестоХранения", Выборка["МестоХранения"]);
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеМестаХранения("МестоХранения", Выборка.Дата, 
			Выборка["МестоХранения"]), Результат);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("МестоХраненияНаСклад", МетаданныеДокумента) Тогда
		Результат.Вставить("МестоХраненияНаСклад", Выборка["МестоХраненияНаСклад"]);
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеМестаХранения("МестоХраненияНаСклад", Выборка.Дата, 
			Выборка["МестоХраненияНаСклад"]), Результат);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("МестоХраненияСоСклада", МетаданныеДокумента) Тогда
		Результат.Вставить("МестоХраненияСоСклада", Выборка["МестоХраненияСоСклада"]);
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеМестаХранения("МестоХраненияСоСклада", Выборка.Дата, 
			Выборка["МестоХраненияСоСклада"]), Результат);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("МестоХраненияПрихода", МетаданныеДокумента) Тогда
		Результат.Вставить("МестоХраненияПрихода", Выборка["МестоХраненияПрихода"]);
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеМестаХранения("МестоХраненияПрихода", Выборка.Дата, 
			Выборка["МестоХраненияПрихода"]), Результат);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("МестоХраненияРасхода", МетаданныеДокумента) Тогда
		Результат.Вставить("МестоХраненияРасхода", ДокументСсылка["МестоХраненияРасхода"]);
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеМестаХранения("МестоХраненияРасхода", Выборка.Дата,
			Выборка["МестоХраненияРасхода"]), Результат);
	КонецЕсли;	
	Если ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) Тогда
		Результат.Вставить("Подразделение", Выборка["Подразделение"]);
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеПодразделения("Подразделение", Выборка.Дата, 
			Выборка["Подразделение"]), Результат);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("СуммаДокумента", МетаданныеДокумента) Тогда
		Результат.Вставить("СуммаДокумента", Выборка["СуммаДокумента"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		Результат.Вставить("ВалютаДокумента", Выборка["ВалютаДокумента"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		Результат.Вставить("ВидОперации", Выборка["ВидОперации"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ВидДокумента", МетаданныеДокумента) Тогда
		Результат.Вставить("ВидДокумента", Выборка["ВидДокумента"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ДатаВходящегоДокумента", МетаданныеДокумента) Тогда
		Результат.Вставить("ДатаВходящегоДокумента", Выборка["ДатаВходящегоДокумента"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("НомерВходящегоДокумента", МетаданныеДокумента) Тогда
		Результат.Вставить("НомерВходящегоДокумента", Выборка["НомерВходящегоДокумента"]);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("СостояниеЗаказа", МетаданныеДокумента) Тогда
		Результат.Вставить("СостояниеЗаказа", Выборка["СостояниеЗаказа"]);
	КонецЕсли;	
	Если ЕстьРеквизитДокумента("ФизЛицо", МетаданныеДокумента) Тогда
		Результат.Вставить("ФизЛицо", Выборка["ФизЛицо"]);
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеФизЛицо("ФизЛицо", Выборка["Организация"], 
			Выборка["ФизЛицо"], Выборка.Дата), Результат);
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Комиссия", МетаданныеДокумента) Тогда
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеКомиссия(Выборка["Комиссия"]), Результат);
	КонецЕсли;
	
	// Дополнительные реквизиты.
	ТаблицаСвойствЗначений = УправлениеСвойствами.ЗначенияСвойств(ДокументСсылка);
	Для Каждого Строки Из ТаблицаСвойствЗначений Цикл
		Результат.Вставить("ДополнительноеСвойство" + ПолучитьИдентификаторПоСтроке(Строки.Свойство.Наименование), 
			Строки.Значение);		
	КонецЦикла;
	
	// Табличные части.	
	Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Результат.Вставить(ТабличнаяЧасть.Имя, МассивСтруктурИзРезультатаЗапроса(Выборка[ТабличнаяЧасть.Имя]));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // СтруктураЗаполненияПечатнойФормы

// Возвращает структуру для печати Шапки/Подвала документов.
Функция СтруктураЗаполненияПечатнойФормыСправочника(Знач СправочникСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеСправочника = СправочникСсылка.Метаданные();
	
	Результат = Новый Структура;	
	
	Результат.Вставить("СамСправочник"	, СправочникСсылка);
	Результат.Вставить("Ссылка"			, СправочникСсылка);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Справочник." + МетаданныеСправочника.Имя + " КАК Спр
		|ГДЕ
		|	Спр.Ссылка = &СправочникСсылка";
	Запрос.УстановитьПараметр("СправочникСсылка", СправочникСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Основные реквизиты.	
	Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		Результат.Вставить(Реквизит.Имя, Выборка[Реквизит.Имя]);
		Попытка 
			НаборСтандартныхРеквизитов = Выборка[Реквизит.Имя].Метаданные().СтандартныеРеквизиты;
			Для Каждого СтандартныйРеквизит Из  НаборСтандартныхРеквизитов Цикл
				Результат.Вставить(Реквизит.Имя + СтандартныйРеквизит.Имя, 
					Выборка[Реквизит.Имя][СтандартныйРеквизит.Имя]);
			КонецЦикла;
		Исключение
			Продолжить;
		КонецПопытки;
		Попытка 
			НаборРеквизитов = Выборка[Реквизит.Имя].Метаданные().Реквизиты;
			Для Каждого РеквизитОбъекта Из  НаборРеквизитов Цикл
				Результат.Вставить(Реквизит.Имя + РеквизитОбъекта.Имя, Выборка[Реквизит.Имя][РеквизитОбъекта.Имя]);
			КонецЦикла;
		Исключение
			Продолжить;
		КонецПопытки;		
	КонецЦикла;
	
	Результат.Вставить("ДатаИВремяПечати", ТекущаяДатаСеанса());
	
	Если ЕстьРеквизитСправочника("ФизЛицо", МетаданныеСправочника) Тогда
		Результат.Вставить("ФизЛицо", Выборка["ФизЛицо"]);
		ДобавитьСтруктуруВСтруктуру(СтруктураДанныеФизЛицо("ФизЛицо", Выборка["Организация"], Выборка["ФизЛицо"], 
			Выборка.Дата), Результат);
	КонецЕсли;
		
	// Дополнительные реквизиты.
	ТаблицаСвойствЗначений = УправлениеСвойствами.ПолучитьЗначенияСвойств(СправочникСсылка);
	Для Каждого Строки Из ТаблицаСвойствЗначений Цикл
		
		Результат.Вставить("ДополнительноеСвойство" + ПолучитьИдентификаторПоСтроке(Строки.Свойство.Наименование), 
			Строки.Значение);
		
	КонецЦикла;
	
	// Табличные части.	
	Для Каждого ТабличнаяЧасть Из МетаданныеСправочника.ТабличныеЧасти Цикл
		
		Результат.Вставить(ТабличнаяЧасть.Имя, МассивСтруктурИзРезультатаЗапроса(Выборка[ТабличнаяЧасть.Имя]));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // СтруктураЗаполненияПечатнойФормы

Функция МассивСтруктурИзРезультатаЗапроса(РезультатЗапроса) Экспорт
	
	Результат 	= Новый Массив;	
	Выборка		= РезультатЗапроса.Выгрузить();
	
	Если Выборка.Колонки.Найти("НомерСтроки") <> Неопределено Тогда
		Выборка.Сортировать("НомерСтроки Возр");
	КонецЕсли;	
	
	Для Каждого СтрокаВыборки Из Выборка Цикл	
		СтруктураРезультата = Новый Структура();
		Для Каждого Колонка Из Выборка.Колонки Цикл			
			КолонкаИмя = Колонка.Имя;			
			СтруктураРезультата.Вставить(КолонкаИмя, СтрокаВыборки[КолонкаИмя]);
			Попытка 
				НаборСтандартныхРеквизитов = СтрокаВыборки[КолонкаИмя].Метаданные().СтандартныеРеквизиты;
				Для Каждого СтандартныйРеквизит Из  НаборСтандартныхРеквизитов Цикл
					СтруктураРезультата.Вставить(КолонкаИмя + СтандартныйРеквизит.Имя, 
						СтрокаВыборки[КолонкаИмя][СтандартныйРеквизит.Имя]);
				КонецЦикла;
			Исключение
				Продолжить;
			КонецПопытки;			
			Попытка 
				НаборРеквизитов = СтрокаВыборки[КолонкаИмя].Метаданные().Реквизиты;
				Для Каждого РеквизитОбъекта Из НаборРеквизитов Цикл
					СтруктураРезультата.Вставить(КолонкаИмя + РеквизитОбъекта.Имя, 
						СтрокаВыборки[КолонкаИмя][РеквизитОбъекта.Имя]);
				КонецЦикла;
			Исключение
				Продолжить;
			КонецПопытки;			
		КонецЦикла;
		
		Если СтруктураРезультата.Свойство("НоменклатураВидНоменклатуры") Тогда
			СтруктураРезультата.Вставить("ВидНоменклатуры",СтруктураРезультата.НоменклатураВидНоменклатуры); 
		КонецЕсли;
		
		Если СтруктураРезультата.Свойство("КарточкаНоменклатурыСерийныйНомер") Тогда
			СтруктураРезультата.Вставить("СерийныйНомер",СтруктураРезультата.КарточкаНоменклатурыСерийныйНомер); 
		КонецЕсли;
		
		Если СтруктураРезультата.Свойство("КарточкаНоменклатурыИнвентарныйНомер") Тогда
			СтруктураРезультата.Вставить("ИнвентарныйНомер",СтруктураРезультата.КарточкаНоменклатурыИнвентарныйНомер); 
		КонецЕсли;
		
		Результат.Добавить(СтруктураРезультата);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

// Выбрасывает из строки все символы, которые не позволяют привести строку к идентификатору.
Функция ПолучитьИдентификаторПоСтроке(Знач Строка) Экспорт
	
	Результат = "";
	Для Индекс = 1 По СтрДлина(Строка) Цикл
		
		Символ = Сред(Строка, Индекс, 1);
		Если Символ >= "0" И Символ <= "9" ИЛИ Символ >= "А" И Символ <= "Я" ИЛИ Символ >= "а" И Символ <= "я" 
			ИЛИ Символ >= "A" И Символ <= "Z" ИЛИ Символ >= "a" И Символ <= "z" ИЛИ Символ = "_" Тогда
			Результат = Результат + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьИдентификаторПоСтроке

Функция СтруктураДанныеОрганизации(Знач Префикс, Знач ДатаДокумента, Знач Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Сведения = СведенияОЮрФизЛице(Организация, ДатаДокумента, ,);
	
	Для Каждого КлючЗначение Из Сведения Цикл
		
		Результат.Вставить(Префикс + КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
	СтруктураРуководители 	= УправлениеITОтделом8УФ.ОтветственныеЛицаОрганизационнойЕдиницы(Организация, 
		ДатаДокумента);
	
	Для Каждого КлючЗначение Из СтруктураРуководители Цикл
		
		Результат.Вставить(Префикс + КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
	
	Возврат Результат;
	
КонецФункции // СтруктураДанныеОрганизации

Функция СтруктураДанныеКонтрагента(Знач Префикс, Знач ДатаДокумента, Знач Контрагент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Сведения  = СведенияОЮрФизЛице(Контрагент, ДатаДокумента, ,);
	
	Для Каждого КлючЗначение Из Сведения Цикл
		
		Результат.Вставить(Префикс + КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // СтруктураДанныеКонтрагента

Функция СтруктураДанныеМестаХранения(Знач Префикс, Знач ДатаДокумента, Знач МестоХранения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	
	Результат.Вставить(Префикс + "Наименование", 
		?(ЗначениеЗаполнено(МестоХранения), МестоХранения.Наименование, ""));
	Результат.Вставить(Префикс + "Представление", 
		?(ЗначениеЗаполнено(МестоХранения), МестоХранения.Наименование, ""));
	Результат.Вставить(Префикс + "Подразделение", 
		?(ЗначениеЗаполнено(МестоХранения), МестоХранения.Подразделение, ""));
	Результат.Вставить(Префикс + "Организация", 
		?(ЗначениеЗаполнено(МестоХранения), МестоХранения.Организация, ""));
	Результат.Вставить(Префикс + "Комментарий", 
		?(ЗначениеЗаполнено(МестоХранения), МестоХранения.Комментарий, ""));
	Результат.Вставить(Префикс + "СетевоеИмя",
		?(ЗначениеЗаполнено(МестоХранения), МестоХранения.СетевоеИмя, ""));
	Результат.Вставить(Префикс + "СетевойПользователь"
		, ?(ЗначениеЗаполнено(МестоХранения), 
		МестоХранения.СетевойПользователь, ""));
	Результат.Вставить(Префикс + "Местоположение", 
		?(ЗначениеЗаполнено(МестоХранения), МестоХранения.Местоположение, ""));
	Результат.Вставить(Префикс + "ПоследнийОтветственный",
		?(ЗначениеЗаполнено(МестоХранения),	МестоХранения.ПоследнийОтветственный, ""));
	Результат.Вставить(Префикс + "Код", 
		?(ЗначениеЗаполнено(МестоХранения), МестоХранения.Код, ""));
	
	Если ЗначениеЗаполнено(МестоХранения) Тогда
		МОЛ 	= УправлениеITОтделом8УФ.ПолучитьОтветственногоСотрудникаМестаХранения(ДатаДокумента, МестоХранения);
		Результат.Вставить(Префикс + "МОЛ"	, МОЛ);
		МОЛИТ 	= УправлениеITОтделом8УФ.ПолучитьОтветственногоСотрудникаИТОтделаМестаХранения(ДатаДокумента, 
			МестоХранения);
		Результат.Вставить(Префикс + "МОЛИТ", МОЛИТ);
	КонецЕсли;
	Возврат Результат;                                              
	
КонецФункции // СтруктураДанныеМестаХранения

Функция СтруктураДанныеПодразделения(Знач Префикс, Знач ДатаДокумента, Знач Подразделение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	
	Результат.Вставить(Префикс + "Наименование"	, 
		?(ЗначениеЗаполнено(Подразделение), Подразделение.Наименование, ""));
	Результат.Вставить(Префикс + "Код"			, 
		?(ЗначениеЗаполнено(Подразделение), Подразделение.Код, ""));
	Результат.Вставить(Префикс + "Организация"	, 
		?(ЗначениеЗаполнено(Подразделение), Подразделение.Организация, ""));
	Результат.Вставить(Префикс + "Комментарий"	, 
		?(ЗначениеЗаполнено(Подразделение), Подразделение.Комментарий, ""));
	Результат.Вставить(Префикс + "Руководитель"	, 
		?(ЗначениеЗаполнено(Подразделение), Подразделение.Руководитель, ""));
	
	Возврат Результат;                                              
	
КонецФункции // СтруктураДанныеПодразделения

Функция СтруктураДанныеФизЛицо(Знач Префикс, Знач Организация, Знач ФизЛицо, Знач ДатаДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат= Новый Структура;
	Сведения = УправлениеITОтделом8УФ.ДанныеФизЛица(Организация, ФизЛицо, ДатаДокумента);
	
	Для Каждого КлючЗначение Из Сведения Цикл
		
		Результат.Вставить(Префикс + КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // СтруктураДанныеФизЛицо

// Возвращает структуру с данными комиссии.
//
// Параметры:
//  ДокументСсылка  - ДокументСсылка - документ основание.
//  Комиссия  - СправочникСсылка.Комиссии - комиссия по которой хотим получить членов.
//
// Возвращаемое значение:
//   Структура   - результирующая структура.
//
Функция СтруктураДанныеКомиссия(Знач Комиссия) Экспорт

	Результат = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомиссииПодписиКомиссии.НомерСтроки КАК НомерСтроки,
		|	КомиссииПодписиКомиссии.ЭтоПодписьПредседателяКомиссии,
		|	КомиссииПодписиКомиссии.ПодписьЧленаКомиссии
		|ИЗ
		|	Справочник.Комиссии.ПодписиКомиссии КАК КомиссииПодписиКомиссии
		|ГДЕ
		|	КомиссииПодписиКомиссии.Ссылка = &Комиссия
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("Комиссия", Комиссия);
	
	КоличествоЧленовКомиссии = Запрос.Выполнить().Выбрать().Количество();
	Результат.Вставить("КоличествоЧленовКомиссии", КоличествоЧленовКомиссии);
	
	НомерЧленаКомиссии = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
				
		Если Выборка.ЭтоПодписьПредседателяКомиссии Тогда
			
			Результат.Вставить("ПредседательКомиссии", Выборка.ПодписьЧленаКомиссии.ФизическоеЛицо);
			Результат.Вставить("ФИОПредседателяКомиссии", Выборка.ПодписьЧленаКомиссии.РасшифровкаПодписи);
			Результат.Вставить("ПредседательКомиссииДолжностьСсылка", Выборка.ПодписьЧленаКомиссии.Должность);
			Результат.Вставить("ПредседательКомиссииДолжность", Строка(Выборка.ПодписьЧленаКомиссии.Должность));
			Результат.Вставить("ДолжностьПредседателяКомиссии", Строка(Выборка.ПодписьЧленаКомиссии.Должность));
			
		Иначе
			
			НомерВФормате = Формат(НомерЧленаКомиссии, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
			
			Результат.Вставить("ЧленКомиссии" + НомерВФормате, Выборка.ПодписьЧленаКомиссии.ФизическоеЛицо);
			Результат.Вставить("ФИОЧленаКомиссии" + НомерВФормате, Выборка.ПодписьЧленаКомиссии.РасшифровкаПодписи);
			Результат.Вставить("ЧленКомиссии" + НомерВФормате + "Ссылка", Выборка.ПодписьЧленаКомиссии.Должность);
			Результат.Вставить("ЧленКомиссии" + НомерВФормате + "Должность", Строка(Выборка.ПодписьЧленаКомиссии.Должность));
			Результат.Вставить("ДолжностьЧленаКомиссии" + НомерВФормате, Строка(Выборка.ПодписьЧленаКомиссии.Должность));
			
			НомерЧленаКомиссии = НомерЧленаКомиссии + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // СтруктураДанныеКомиссия()

Процедура ДобавитьСтруктуруВСтруктуру(Знач Источник, Приемник) Экспорт
	
	Для Каждого КлючЗначение Из Источник Цикл
		
		Приемник.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Функция МассивНоменклатуры(РезультатЗапроса) Экспорт	
	
	Результат			= Новый Массив;
	Выборка 			= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураРезультата = Новый Структура();
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			СтруктураРезультата.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		
		Если СтруктураРезультата.Свойство("Номенклатура") 
			И УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтруктураРезультата.Номенклатура)
			И СтруктураРезультата.Свойство("КарточкаНоменклатуры") 
			И ЗначениеЗаполнено(СтруктураРезультата.КарточкаНоменклатуры) Тогда
			
			ДобавитьСтруктуруВСтруктуру(СтруктураДанныеКарточкаНоменклатуры("КарточкаНоменклатуры", 
				СтруктураРезультата.КарточкаНоменклатуры), СтруктураРезультата);
				
		КонецЕсли;	
		
		Результат.Добавить(СтруктураРезультата);		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныеКарточкаНоменклатуры(Знач Префикс, Знач КарточкаНоменклатуры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Структура;
	
	Результат.Вставить(Префикс + "ИнвентарныйНомер"			, ?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
		КарточкаНоменклатуры.ИнвентарныйНомер	, ""));
	Результат.Вставить(Префикс + "СерийныйНомер"			, ?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
		КарточкаНоменклатуры.СерийныйНомер		, ""));
	Результат.Вставить(Префикс + "БухНомер"					, ?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
		КарточкаНоменклатуры.БухНомер			, ""));
	Результат.Вставить(Префикс + "ЕстьОграниченияПоСрокуДействияЛицензии", ?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
		КарточкаНоменклатуры.ЕстьОграниченияПоСрокуДействияЛицензии, Ложь));
	Результат.Вставить(Префикс + "ДатаНачалаЛицензии"		, ?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
		КарточкаНоменклатуры.ДатаНачалаЛицензии, Дата(1,1,1)));
	Результат.Вставить(Префикс + "ДатаОкончанияЛицензии"	, ?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
		КарточкаНоменклатуры.ДатаОкончанияЛицензии, Дата(1,1,1)));
	Результат.Вставить(Префикс + "ЕстьОграниченияПоСрокуДействияОбновлений", ?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
		КарточкаНоменклатуры.ЕстьОграниченияПоСрокуДействияОбновлений, Ложь));
	Результат.Вставить(Префикс + "ДатаНачалаПодпискиОбновлений", ?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
		КарточкаНоменклатуры.ДатаНачалаПодпискиОбновлений, Дата(1,1,1)));
	Результат.Вставить(Префикс + "ДатаОкончанияПодпискиОбновлений", ?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
		КарточкаНоменклатуры.ДатаОкончанияПодпискиОбновлений, Дата(1,1,1)));
	Результат.Вставить(Префикс + "КоличествоПользователейЛицензии", ?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
		КарточкаНоменклатуры.КоличествоПользователейЛицензии, 0));
	Результат.Вставить(Префикс + "ЕстьОграниченияПоКоличествуПользователейЛицензии", 
		?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
			КарточкаНоменклатуры.ЕстьОграниченияПоКоличествуПользователейЛицензии,	Ложь));
	Результат.Вставить(Префикс + "ВерсияПО"					, ?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
		КарточкаНоменклатуры.ВерсияПО			, ""));
	Результат.Вставить(Префикс + "ДатаУстановкиПО"			, ?(ЗначениеЗаполнено(КарточкаНоменклатуры), 
		КарточкаНоменклатуры.ДатаУстановкиПО	, Дата(1,1,1)));
	Результат.Вставить(Префикс + "КлючАктивации"			, ?(ЗначениеЗаполнено(КарточкаНоменклатуры),
		КарточкаНоменклатуры.КлючАктивации		, ""));
	Результат.Вставить(Префикс + "ДокументПоступления"		, ?(ЗначениеЗаполнено(КарточкаНоменклатуры),
		КарточкаНоменклатуры.ДокументПоступления, ""));
	Результат.Вставить(Префикс + "ЕстьГарантия"				, ?(ЗначениеЗаполнено(КарточкаНоменклатуры),
		КарточкаНоменклатуры.ЕстьГарантия		,	Ложь));
	Результат.Вставить(Префикс + "ВидНоменклатуры"			, ?(ЗначениеЗаполнено(КарточкаНоменклатуры),
		КарточкаНоменклатуры.ВидНоменклатуры	,	""));
	Результат.Вставить(Префикс + "ГарантияМесяцев"			, ?(ЗначениеЗаполнено(КарточкаНоменклатуры),
		КарточкаНоменклатуры.ГарантияМесяцев	,	0));
	Результат.Вставить(Префикс + "СрокПолезногоИспользования", ?(ЗначениеЗаполнено(КарточкаНоменклатуры),
		КарточкаНоменклатуры.СрокПолезногоИспользования,0));
	Результат.Вставить(Префикс + "ПервоначальнаяСтоимость"	, ?(ЗначениеЗаполнено(КарточкаНоменклатуры),
		КарточкаНоменклатуры.ПервоначальнаяСтоимость,0));
	Результат.Вставить(Префикс + "ДатаВводаВЭксплуатацию"	, ?(ЗначениеЗаполнено(КарточкаНоменклатуры),
		КарточкаНоменклатуры.ДатаВводаВЭксплуатацию, Дата(1,1,1)));
	Результат.Вставить(Префикс + "СетевоеИмя"				, ?(ЗначениеЗаполнено(КарточкаНоменклатуры),
		КарточкаНоменклатуры.СетевоеИмя		,	""));
	Результат.Вставить(Префикс + "СетевойПользователь"		, ?(ЗначениеЗаполнено(КарточкаНоменклатуры),
		КарточкаНоменклатуры.СетевойПользователь,	""));
	Результат.Вставить(Префикс + "ПорядковыйНомер"			, ?(ЗначениеЗаполнено(КарточкаНоменклатуры),
		КарточкаНоменклатуры.ПорядковыйНомер,	""));
	
	Возврат Результат;
	
КонецФункции	

// Процедура определяет ситуацию, когда при изменении своей даты документ оказывается в другом периоде нумерации,
// документов, и в это м случае присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка - ссылка на документ,из которого вызвана процедура.
//  НоваяДатаДокумента - новая дата документа.
//  НачальнаяДатаДокумента - начальная дата документа.
//
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()

// Устанавливает префикс источника подписки в соответствии с префиксом информационной базы и префиксом организации.
// Источник подписки должен содержать
// обязательный реквизит шапки "Организация", с типом "СправочникСсылка.Организации".
//
// Параметры:
//  Источник - Источник события подписки.
//             Любой объект из множества [Справочник, Документ, План видов характеристик, Бизнес процесс, Задача].
// СтандартнаяОбработка - Булево - флаг стандартной обработки подписки.
// Префикс - Строка - префикс объекта, который нужно изменить.
//
Процедура УстановитьПрефиксИнформационнойБазыИОрганизацииУИТ(Источник, СтандартнаяОбработка, Префикс) Экспорт
		
	УстановитьПрефиксУИТ(Источник, Префикс, Истина, Истина);
	
КонецПроцедуры

Процедура УстановитьПрефиксУИТ(Источник, Префикс, УстановитьПрефиксИнформационнойБазы, УстановитьПрефиксОрганизации)
	
	ПрефиксИнформационнойБазы = "";
	ПрефиксОрганизации        = "";
	
	Если УстановитьПрефиксИнформационнойБазы Тогда		
		ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаИнформационнойБазы(ПрефиксИнформационнойБазы);		
		ПрефиксИнформационнойБазы = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксИнформационнойБазы, 2, "0", 
			"Слева");
	КонецЕсли;
	
	Если УстановитьПрефиксОрганизации Тогда		
		Если РеквизитОрганизацияДоступенУИТ(Источник) Тогда			
			ПриОпределенииПрефиксаОрганизацииУИТ(
				Источник[ПрефиксацияОбъектовСобытия.ИмяРеквизитаОрганизация(Источник.Метаданные())], ПрефиксОрганизации);
			// Если задана пустая ссылка на организацию.
			Если ПрефиксОрганизации = Ложь Тогда				
				ПрефиксОрганизации = "";				
			КонецЕсли;			
		КонецЕсли;				
		ПрефиксОрганизации = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксОрганизации, 2, "0", "Слева");
	КонецЕсли;
	
	ШаблонПрефикса = "[ОР][ИБ]-[Префикс]";
	ШаблонПрефикса = СтрЗаменить(ШаблонПрефикса, "[ОР]", ПрефиксОрганизации);
	ШаблонПрефикса = СтрЗаменить(ШаблонПрефикса, "[ИБ]", ПрефиксИнформационнойБазы);
	ШаблонПрефикса = СтрЗаменить(ШаблонПрефикса, "[Префикс]", Префикс);
	
	Префикс = ШаблонПрефикса;
	
КонецПроцедуры

//@skip-warning
Функция РеквизитОрганизацияДоступенУИТ(Объект)
	
	// Возвращаемое значение функции.
	Результат = Истина;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	Если   (ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта)
		ИЛИ ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеОбъекта))
		И МетаданныеОбъекта.Иерархический Тогда
		
		ИмяРеквизитаОрганизация = ПрефиксацияОбъектовСобытия.ИмяРеквизитаОрганизация(МетаданныеОбъекта);
		
		РеквизитОрганизация = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизитаОрганизация);
		
		Если РеквизитОрганизация = Неопределено Тогда
			
			Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, 
				ИмяРеквизитаОрганизация) Тогда
				
				// Стандартный реквизит всегда доступен и для элемента и для группы.
				Возврат Истина;
				
			КонецЕсли;
			
			СтрокаСообщения = НСтр("ru = 'Для объекта метаданных %1 не определен реквизит с именем %2.'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, 
				МетаданныеОбъекта.ПолноеИмя(), ИмяРеквизитаОрганизация);
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
			
		//@skip-warning
		Если РеквизитОрганизация.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы 
			И НЕ Объект.ЭтоГруппа Тогда
			
			Результат = Ложь;
			
		ИначеЕсли РеквизитОрганизация.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента 
			И Объект.ЭтоГруппа Тогда
			
			Результат = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПриОпределенииПрефиксаОрганизацииУИТ(Знач Организация, ПрефиксОрганизации)
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ИмяФункциональнойОпции 			= "ПрефиксыОрганизаций";
		ИмяПараметраФункциональнойОпции = "Организация";	
		ПрефиксОрганизации = ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции, 
		Новый Структура(ИмяПараметраФункциональнойОпции, Организация));
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПрефиксОрганизации = Организация.Префикс;
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область ДвиженияИПроведение

// Функция получает таблицу из временной таблицы.
//
Функция ТаблицаИзВременнойТаблицы(МенеджерВременныхТаблиц, Таблица) Экспорт
	
	Запрос 			= Новый Запрос();
	Запрос.Текст 	= "ВЫБРАТЬ * ИЗ " + Таблица + " КАК Таблица";
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ТаблицаИзВременнойТаблицы()

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ПРОВЕДЕНИЕМ.

// Выполняет инициализацию дополнительных свойств для проведения документа.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения", 
	// "УчетнаяПолитика".
	
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	СтруктураДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	СтруктураДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", 
		Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента", ДокументСсылка.Метаданные());
	
	// "УчетнаяПолитика" - структура, содержащая значения всех параметров учетной политики на момент времени документа
	// и по выбранной в документе организации или по компании (в случае ведения учета по компании).
	СтруктураДополнительныеСвойства.Вставить("УчетнаяПолитика", Новый Структура);
	
	// Запрос, получающий данные документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Документ_.Ссылка КАК Ссылка,
	|	_Документ_.Номер КАК Номер,
	|	_Документ_.Дата КАК Дата,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("Организация") <> 
		Неопределено,
		"_Документ_.Организация" , "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)") + " КАК Организация,
	|	_Документ_.МоментВремени КАК МоментВремени,
	|	_Документ_.Представление КАК Представление
	|ИЗ
	|	Документ." + СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Имя + " КАК _Документ_
	|ГДЕ
	|	_Документ_.Ссылка = &ДокументСсылка");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Формирование ключей, содержащих данные документа.
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		
		СтруктураДополнительныеСвойства.ДляПроведения.Вставить(Колонка.Имя);
		
	КонецЦикла;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Заполнение значений для ключей, содержащих данные документа.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.ДляПроведения, ВыборкаИзРезультатаЗапроса);
	
	// Определение и установка значения момента, на который должен быть выполнен контроль документа.
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МоментКонтроля", Дата('00010101'));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ПериодКонтроля", Дата("39991231"));
	
	// Заполнение учетной политики
	// ...
	
КонецПроцедуры // ИнициализироватьДополнительныеСвойстваДляПроведения()

// Формирует массив имен регистров, по которым есть движения документа.
//
Функция ПолучитьМассивИменИспользуемыхРегистров(Регистратор, МетаданныеДокумента)
	
	МассивРегистров = Новый Массив;
	ТекстЗапроса 	= "";
	СчетчикТаблиц 	= 0;
	СчетчикЦикла 	= 0;
	ВсегоРегистров 	= МетаданныеДокумента.Движения.Количество();
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если СчетчикТаблиц > 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
		КонецЕсли;
		
		СчетчикТаблиц = СчетчикТаблиц + 1;
		СчетчикЦикла = СчетчикЦикла + 1;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|""" + Движение.Имя + """ КАК ИмяРегистра
		|
		|ИЗ " + Движение.ПолноеИмя() + "
		|
		|ГДЕ Регистратор = &Регистратор
		|";
		
		Если СчетчикТаблиц = 256 ИЛИ СчетчикЦикла = ВсегоРегистров Тогда
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;
			
			Если МассивРегистров.Количество() = 0 Тогда
				
				МассивРегистров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				
			Иначе
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					МассивРегистров.Добавить(Выборка.ИмяРегистра);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРегистров;
	
КонецФункции // ПолучитьМассивИменИспользуемыхРегистров()

// Выполняет подготовку наборов записей документа.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(СтруктураОбъект) Экспорт
	
	Для Каждого НаборЗаписей Из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НаборЗаписей.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРегистров = ПолучитьМассивИменИспользуемыхРегистров(СтруктураОбъект.Ссылка, 
		СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента);
	
	Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
		
		СтруктураОбъект.Движения[ИмяРегистра].Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает наборы записей документа.
//
Процедура ЗаписатьНаборыЗаписей(СтруктураОбъект) Экспорт
	
	Для Каждого НаборЗаписей Из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Записывать Тогда
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
				
			КонецЕсли;
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", 
					СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
				
			КонецЕсли;
			
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
			
		Иначе
				
			Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
				
				Попытка
					РегистрыНакопления[НаборЗаписей.Метаданные().Имя].СоздатьПустуюВременнуюТаблицуИзменение(
						СтруктураОбъект.ДополнительныеСвойства);
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ РЕГИСТРОВ.

// Функция возвращает значение константы КонтролироватьОстаткиПриПроведении.
// 
Функция ВыполнитьКонтрольОстатков() Экспорт
	
	Возврат Истина;
	
КонецФункции // ВыполнитьКонтрольОстатков()

#КонецОбласти

#Область РаботаССотрудниками

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ЗУП

// Функция формирует фамилию, имя и отчество одной строкой.
//
// Параметры
//  Фамилия      - фамилия физ. лица
//  Имя          - имя физ. лица
//  Отчество     - отчество физ. лица
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица
//                 включает фамилию и инициалы, если Ложь - фамилию и полностью
//                 имя и отчество.
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт
	
	Если ФИОКратко Тогда
		Возврат ?(НЕ ПустаяСтрока(Фамилия), СокрЛП(Фамилия) + ?(НЕ ПустаяСтрока(Имя)," " 
			+ Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество), Лев(Отчество,1)+".", ""), ""), "");
	Иначе
		Возврат ?(НЕ ПустаяСтрока(Фамилия), СокрЛП(Фамилия) + ?(НЕ ПустаяСтрока(Имя)," " + СокрЛП(Имя) 
			+ ?(НЕ ПустаяСтрока(Отчество) , " " + СокрЛП(Отчество), ""), ""), "");
	КонецЕсли;

КонецФункции // ПолучитьФамилиюИмяОтчество()

///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ПЕЧАТНЫХ ФОРМ.

// Функция возвращает совокупность данных о физическом лице в виде структуры, 
// В совокупность данных входит ФИО, должность в заданной организации, 
// паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                 по которому возвращается совокупность данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица
//                 включает фамилию и инициалы, если Ложь - фамилию и полностью
//                 имя и отчество.
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 "Фамилия",
//                 "Имя"
//                 "Отчество"
//                 "Представление (Фамилия И.О.)"
//                 "Подразделение"
//                 "ДокументВид"
//                 "ДокументСерия"
//                 "ДокументНомер"
//                 "ДокументДатаВыдачи"
//                 "ДокументКемВыдан"
//                 "ДокументКодПодразделения".
//
Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) Экспорт
	
	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза", ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.Текст =
		"ВЫБРАТЬ
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество,
		|	Сотрудники.Код КАК ТабельныйНомер,
		|	Сотрудники.Организация,
		|	Сотрудники.Подразделение,
		|	Сотрудники.Должность,
		|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ДокументВид,
		|	ДокументыФизическихЛицСрезПоследних.Серия КАК ДокументСерия,
		|	ДокументыФизическихЛицСрезПоследних.Номер КАК ДокументНомер,
		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДокументДатаВыдачи,
		|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК ДокументКемВыдан,
		|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК ДокументКодПодразделения
		|ИЗ
		|	(ВЫБРАТЬ
		|		ФизическиеЛица.Ссылка КАК ФизЛицо
		|	ИЗ
		|		Справочник.ФизическиеЛица КАК ФизическиеЛица
		|	ГДЕ
		|		ФизическиеЛица.Ссылка = &ФизЛицо) КАК ФизЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
		|		ПО ФизЛица.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ФизЛица.ФизЛицо = Сотрудники.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|				&ДатаСреза,
		|				ФизЛицо = &ФизЛицо
		|					И ЯвляетсяДокументомУдостоверяющимЛичность) КАК ДокументыФизическихЛицСрезПоследних
		|		ПО ФизЛица.ФизЛицо = ДокументыФизическихЛицСрезПоследних.Физлицо";
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Данные.Следующий();
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
								|ТабельныйНомер, Должность, Подразделение, 
								|ДокументВид, ДокументСерия, ДокументНомер,  
								|ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, 
								|ПредставлениеДокумента");

	ЗаполнитьЗначенияСвойств(Результат, Данные);

	Результат.Представление = ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество, ФИОКратко);
	Результат.ПредставлениеДокумента = ПолучитьПредставлениеДокументаФизЛица(Данные);
	
	Возврат Результат;
	
КонецФункции // ДанныеФизЛица()

// Получение представления для документа, удостоверяющего личность.
//
// Параметры
//  ДанныеФизЛица - Коллекция данных физ. лица (структура, строка таблицы, ...),
//                 содержащая значения: ДокументВид, ДокументСерия,
//                 ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан.  
//
// Возвращаемое значение:
//   Строка      - Представление документа, удостоверяющего личность.
//
Функция ПолучитьПредставлениеДокументаФизЛица(ДанныеФизЛица) Экспорт

	Возврат Строка(ДанныеФизЛица.ДокументВид) + " серия "
			+ ДанныеФизЛица.ДокументСерия       + ", номер "
			+ ДанныеФизЛица.ДокументНомер       + ", выданный "
			+ Формат(ДанныеФизЛица.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")  + " "
			+ ДанныеФизЛица.ДокументКемВыдан;

КонецФункции // ПолучитьПредставлениеДокументаФизЛица()

// Возвращает структуру данных со сводным описанием контрагента.
//
// Параметры: 
//  СписокСведений - список значений со значениями параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организации
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли; 

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование",		" ");
	СоответствиеПараметров.Вставить("ИНН",						" ИНН ");
	СоответствиеПараметров.Вставить("КПП",						" КПП ");
	СоответствиеПараметров.Вставить("Свидетельство",			" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			" ");
	СоответствиеПараметров.Вставить("Телефоны",					" тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",				" р/с ");
	СоответствиеПараметров.Вставить("Банк",               		" в банке ");
	СоответствиеПараметров.Вставить("БИК",                		" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           		" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          		" Код по ОКПО ");

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 По ЧислоПараметров Цикл

		ПозЗапятой = СтрНайти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;

			Исключение

				Сообщение = Новый СообщениеПользователю();
		        Сообщение.Текст = СтрШаблон(НСтр("ru = 'Не удалось определить значение параметра организации: %1'"), 
					ИмяПараметра);
				Сообщение.Сообщить();

			КонецПопытки;

		КонецЕсли; 

	КонецЦикла;

	Возврат Результат;

КонецФункции // ОписаниеОрганизации()

// Стандартная функция форматирования прописи количества.
//
// Параметры:
//  Количество   - число, которое мы хотим форматировать.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
   	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
   	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
   	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
    КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо    - организация или физическое лицо, о котором собираются
//                 сведения
//  ДатаПериода  - дата, на которую выбираются сведения о ЮрФизЛице
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и
//                 отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, 
	БанковскийСчет = Неопределено) Экспорт

	Поля = "Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны,"
		+ "ПочтовыйАдрес, ЮридическийАдрес, ФактическийАдрес,  Банк, БИК, КоррСчет, НомерСчета, АдресБанка";
	
	Сведения = Новый Структура(Поля);
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	КонецЕсли;

	Если БанковскийСчет = Неопределено ИЛИ БанковскийСчет.Пустая() Тогда
		ТекБанковскийСчет = ЮрФизЛицо.БанковскийСчетПоУмолчанию;
	Иначе
		ТекБанковскийСчет = БанковскийСчет;
	КонецЕсли;
	
	// Выберем основные сведения о контрагентеЮрФизЛицо.ОсновнойБанковскийСчет.БанкДляРасчетов.Пустая.
	Если ТекБанковскийСчет.БанкРасчетов.Пустая() Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкРасчетов";
	КонецЕсли;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарЮрФизЛицо",      ЮрФизЛицо);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Представление КАК Наименование,
	|	Организации.НаименованиеПолное КАК ПолноеНаименование,
	|	Организации.ИНН,
	|	Организации.КПП,
	|	Организации.КодПоОКПО КАК КодПоОКПО,";
	
	Если ИмяСправочника = "Организации" Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	Организации.СвидетельствоСерияНомер,
		|	Организации.СвидетельствоДатаВыдачи,";
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	"""" КАК НомерСчета,
		|	"""" КАК Банк,
		|	"""" КАК БИК,
		|	"""" КАК КоррСчет,
		|	"""" КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮрФизЛицо";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчета.НомерСчета                     КАК НомерСчета,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+"          КАК Банк,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Код      КАК БИК,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Адрес    КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации,
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮрФизЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
		
	КонецЕсли;
	
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Сведения.Вставить("КодПоОКПО", 		"");
	Сведения.Вставить("КПП",       		"");
	Сведения.Вставить("Свидетельство",	"");
	
	Если НЕ (ЮрФизЛицо.Метаданные().Реквизиты.Найти("ВидКонтрагента") = Неопределено) Тогда

		Сведения.КодПоОКПО = Данные.КодПоОКПО;
		
		Если ЮрФизЛицо.ВидКонтрагента = Перечисления.ВидКонтрагента.ЮридическоеЛицо Тогда
			
			Сведения.КПП = Данные.КПП;
			
		ИначеЕсли ИмяСправочника = "Организации" Тогда
			
			Сведения.Свидетельство = "свидетельство " + Данные.СвидетельствоСерияНомер + " от " 
				+ Формат(Данные.СвидетельствоДатаВыдачи, "ДФ=dd.MM.yyyy");
			
		КонецЕсли;

	ИначеЕсли ИмяСправочника = "Организации" Тогда
		
		Сведения.КодПоОКПО = Данные.КодПоОКПО;
		Сведения.КПП       = Данные.КПП;
		
	КонецЕсли;
	
	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);

	Если Данные <> Неопределено Тогда

		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
			Email = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке;
			Email = Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица;
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			Email = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		Иначе
			Телефон = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			Email = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		КонецЕсли; 
		
		Сведения.Вставить("Представление",		Данные.Наименование);
		Сведения.Вставить("ИНН",				Данные.ИНН);
		Сведения.Вставить("Телефоны",			ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, Телефон));
		Сведения.Вставить("EMail",				ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, Email));
		Сведения.Вставить("НомерСчета",			Данные.НомерСчета);
		Сведения.Вставить("Банк",				Данные.Банк);
		Сведения.Вставить("БИК",				Данные.БИК);
		Сведения.Вставить("АдресБанка",			Данные.АдресБанка);
		Сведения.Вставить("КоррСчет",			Данные.КоррСчет);
		Сведения.Вставить("ЮридическийАдрес",	ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ЮрАдрес));
		Сведения.Вставить("ФактическийАдрес",	ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ФактАдрес));
		Сведения.Вставить("ПочтовыйАдрес",		ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ПочтАдрес));
		
		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;

	КонецЕсли;

	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контактной информации.
//
// Параметры:
//  Объект       - СправочникСсылка, объект контактной информации
//  ТипАдреса    - тип контактной информации.
//
// Возвращаемое значение
//  Строка - представление найденного адреса.
//                                          
Функция ПолучитьКонтактнуюИнформацию(ОбъектКонтактнойИнформации, ВидИнформации) Экспорт
    
	Если ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Организации") Тогда 		
		ТаблицаИсточник = "Организации";		
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда		
		ТаблицаИсточник = "ФизическиеЛица";
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Контрагенты") Тогда		
		ТаблицаИсточник = "Контрагенты";
	Иначе 
		Возврат "";	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", ОбъектКонтактнойИнформации);
	Запрос.УстановитьПараметр("Вид"   , ВидИнформации);
	
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник." + ТаблицаИсточник + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Вид = &Вид
		|	И КонтактнаяИнформация.Ссылка = &Объект";

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Стандартная для данной конфигурации функция форматирования сумм.
//
// Параметры: 
//  Сумма        - число, которое мы хотим форматировать 
//  Валюта       - ссылка на элемент справочника валют, если задан, то к в
//                 результирующую строку будет добавлено представление валюты
//  ЧН           - строка, представляющая нулевое значение числа
//  ЧРГ          - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2"
					+ ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
					+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);

	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

// Функция формирует представление суммы прописью в указанной валюте.
//
// Возвращаемое значение:
//  Строка - сумма прописью.
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, , Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

Функция ТекущийСотрудник() Экспорт
	
	Если ЗначениеЗаполнено(Пользователи.ТекущийПользователь()) Тогда
		Сотрудник = Пользователи.ТекущийПользователь().Сотрудник;
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			Возврат Сотрудник;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает список подчиненных сотрудников.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому хотим получить подчиненных сотрудников.
//	ДобавлятьПользователя - Булево - добавлять или нет самого пользователя, по умолчанию Истина.
//
// Возвращаемое значение:
//   Массив - массив пользователей.
//
Функция СписокПодчиненныхПользователей(Знач Пользователь, Знач ДобавлятьПользователя = Истина) Экспорт
	
	Массив = УправлениеITОтделом8УФПовтИсп.СписокПодчиненныхПользователей(Пользователь, ДобавлятьПользователя);
	
	// Добавляем тех пользователей, которых замещает переданный пользователь.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтсутствияПользователей.Объект КАК Пользователь
		|ИЗ
		|	РегистрСведений.ОтсутствияПользователей КАК ОтсутствияПользователей
		|ГДЕ
		|	ОтсутствияПользователей.Замещающий = &ТекущийПользователь
		|	И &ТекущаяДата МЕЖДУ ОтсутствияПользователей.ДатаНачала И ОтсутствияПользователей.ДатаОкончания";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Массив.Найти(Выборка.Пользователь) = Неопределено Тогда
			Массив.Добавить(Выборка.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	// Удалим, если нужно текущего пользователя.
	Если ДобавлятьПользователя = Ложь Тогда
		Если Массив.Найти(Пользователь) <> Неопределено Тогда
			Массив.Удалить(Массив.Найти(Пользователь));
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Массив;
		
КонецФункции

// Возвращает список подчиненных физ.лиц/пользователей.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому хотим получить подчиненных сотрудников.
//	ДобавлятьСотрудника - Булево - добавлять или нет самого сотрудника, по умолчанию Истина.
//
// Возвращаемое значение:
//   Массив - массив физ.лиц/пользователей.
//
Функция СписокПодчиненныхСотрудников(Знач Пользователь, Знач ДобавлятьСотрудника = Истина) Экспорт
	
	Возврат УправлениеITОтделом8УФПовтИсп.СписокПодчиненныхСотрудников(Пользователь, ДобавлятьСотрудника);
	
КонецФункции

// Возвращает группы текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив.
//
Функция ГруппыТекущегоПользователя() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГруппыПользователейСостав.Ссылка КАК Группа
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Группа");
	
КонецФункции

// Возвращает группы текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив.
//
Функция ГруппыПользователя(Знач Пользователь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГруппыПользователейСостав.Ссылка КАК Группа
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Группа");
	
КонецФункции

// Функция возвращает паспортные данные физического лица строкой, используемые в печатных формах.
//
// Параметры
//  СтруктураДанных - Структура – ссылка на ФизЛицо и дата
//                 
// Возвращаемое значение:
//   Строка      - Строка, содержащая паспортные данные
//
Функция ПолучитьПаспортныеДанныеСтрокой(СтруктураДанных) Экспорт

	Если НЕ ЗначениеЗаполнено(СтруктураДанных.ФизЛицо) Тогда
		Возврат НСтр("ru = 'Отсутствуют данные об удостоверении личности.'");
	КонецЕсли; 
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
		|	ДокументыФизическихЛицСрезПоследних.Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер,
		|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
		|	ДокументыФизическихЛицСрезПоследних.КодПодразделения,
		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			&НаДату,
		|			Физлицо = &Физлицо
		|				И ЯвляетсяДокументомУдостоверяющимЛичность) КАК ДокументыФизическихЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("НаДату", СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("Физлицо", СтруктураДанных.ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат НСтр("ru = 'Отсутствуют данные об удостоверении личности.'");
	Иначе
		ПаспортныеДанные = РезультатЗапроса.Выгрузить()[0];
		ВидДокумента       = ПаспортныеДанные.ВидДокумента;
		Серия              = ПаспортныеДанные.Серия;
		Номер              = ПаспортныеДанные.Номер;
		ДатаВыдачи         = ПаспортныеДанные.ДатаВыдачи;
		КемВыдан           = ПаспортныеДанные.КемВыдан;
		НомерПодразделения = ПаспортныеДанные.КодПодразделения;
		
		Если НЕ (НЕ ЗначениеЗаполнено(ДатаВыдачи)
			И НЕ ЗначениеЗаполнено(ВидДокумента)
			И НЕ ЗначениеЗаполнено(Серия + Номер + КемВыдан + НомерПодразделения)) Тогда

			СтрокаПаспортныеДанные = 
				НСтр("ru = '%ВидДокумента% Серия: %Серия%, № %Номер%, Выдан: %ДатаВыдачи% года, %КемВыдан%; № подр. %НомерПодразделения%'");
			
			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%ВидДокумента%", 
				?(ВидДокумента.Пустая(),"","" + ВидДокумента + ", "));
			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%Серия%", Серия);
			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%Номер%", Номер);
			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%ДатаВыдачи%", Формат(ДатаВыдачи,"ДЛФ=DD"));
			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%КемВыдан%", КемВыдан);
			СтрокаПаспортныеДанные = СтрЗаменить(СтрокаПаспортныеДанные, "%НомерПодразделения%", НомерПодразделения);
			
			Возврат СтрокаПаспортныеДанные;

		Иначе
			Возврат НСтр("ru = 'Отсутствуют данные об удостоверении личности.'");
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьПаспортныеДанныеСтрокой()

// Функция - Получить руководителей пользователя.
//
// Параметры:
//  Пользователь		 - СправочникСсылка.Пользователи	 - пользователь
//  ВсехРуководителей	 - Булево	 - если Ложь, то только непосредственных руководителей, 
//  						иначе всех возможных руководителей руководителей и т.д.
// 
// Возвращаемое значение:
//  Массив - массив руководителей.
//
Функция РуководителиПользователя(Знач Пользователь, Знач ВсехРуководителей = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПользователиПодчиненные.Ссылка КАК Руководитель
			|ИЗ
			|	Справочник.Пользователи.Подчиненные КАК ПользователиПодчиненные
			|ГДЕ
			|	ПользователиПодчиненные.Подчиненный = &Пользователь
			|	И ПользователиПодчиненные.Ссылка.Недействителен = ЛОЖЬ";
			
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Результат.Найти(Выборка.Руководитель) = Неопределено Тогда
				Результат.Добавить(Выборка.Руководитель);
				Если ВсехРуководителей = Истина Тогда
					МассивРуководителей = РуководителиПользователя(Выборка.Руководитель);
					Для Каждого Руководитель Из МассивРуководителей Цикл
						Если Результат.Найти(Руководитель) = Неопределено Тогда
							Результат.Добавить(Руководитель);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает руководителя для пользователя.
//
// Параметры
//	Пользователь - Справочник.Пользователи или Справочник.Сотрудники - пользователь у которого хотим получить руководителя.
//
// Возвращаемое значение: 
//	Ссылка на пользователя-руководителя, или Неопределено, если не найдено.
//
Функция РуководительАдресата(Знач Пользователь) Экспорт
	
	// Находим подразделение, по нему находим руководителя,
	// сотрудника и уже по нему находим пользователя, если не получается находим сотрудника.
	
	Если ЗначениеЗаполнено(Пользователь) Тогда

		Подразделение = Справочники.Подразделения.ПустаяСсылка();
		
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			Подразделение = Пользователь.Подразделение;
		ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.Сотрудники") Тогда
			Подразделение = Пользователь.Подразделение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			Сотрудник = Подразделение.Руководитель;
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				
				Запрос = Новый Запрос();
				Запрос.Текст =
					"ВЫБРАТЬ
					|	Пользователи.Ссылка КАК Руководитель
					|ИЗ
					|	Справочник.Пользователи КАК Пользователи
					|ГДЕ
					|	Пользователи.Сотрудник = &Сотрудник";
				Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Возврат Выборка.Руководитель;
				Иначе
					Возврат Сотрудник;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции //РуководительСотрудника

// Возвращает список подчиненных и групп пользователей, включая самого польователя.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - пользователь.
//
// Возвращаемое значение:
//	Массив - массив подчиненных и групп пользователей, включая самого польователя.
//
Функция СписокПодчиненныхИГруппПользователя(Знач Пользователь) Экспорт
	
	СписокПодчиненных         = УправлениеITОтделом8УФ.СписокПодчиненныхСотрудников(Пользователь);
	СписокГруппПользователя   = УправлениеITОтделом8УФ.ГруппыТекущегоПользователя();
	
	МассивПользователейИГрупп = Новый Массив;
	Для Каждого Подчиненный Из СписокПодчиненных Цикл
		Если МассивПользователейИГрупп.Найти(Подчиненный) = Неопределено Тогда
			МассивПользователейИГрупп.Добавить(Подчиненный);	
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого ГруппаПользователей Из СписокГруппПользователя Цикл
		Если МассивПользователейИГрупп.Найти(ГруппаПользователей) = Неопределено Тогда
			МассивПользователейИГрупп.Добавить(ГруппаПользователей);	
		КонецЕсли;	
	КонецЦикла;

	Если МассивПользователейИГрупп.Найти(Пользователь) = Неопределено Тогда
		МассивПользователейИГрупп.Добавить(Пользователь);
	КонецЕсли;	
	
	Возврат МассивПользователейИГрупп;
	
КонецФункции

// Формирует пароль по заданным настройкам безопасности.
//
// Параметры:
//	Настройки - Структура, Объект - которая содержит настройки.
//
// Возвращаемое значение:
//	Строка - результат сформированный по настройкам пароль.
//
Функция СформироватьПароль(Знач Настройки, НачальныйГСЧ = Неопределено) Экспорт
	
	Пароль = "";
	
	МаскаПароля = "";
	Если Настройки.ВключатьЦифры Тогда
		МаскаПароля = МаскаПароля + "0123456789";
	КонецЕсли;
	Если Настройки.ВключатьМаленькиеЛатинскиеБуквы Тогда
		МаскаПароля = МаскаПароля + "abcdefghijklmnopqrstuvwxyz";
	КонецЕсли;
	Если Настройки.ВключатьБольшиеЛатинскиеБуквы Тогда
		МаскаПароля = МаскаПароля + "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	КонецЕсли;
	Если Настройки.ВключатьМаленькиеРусскиеБуквы Тогда
		МаскаПароля = МаскаПароля + "абвгдежзийклмнопрстуфхцчшщъыьэюя";
	КонецЕсли;
	Если Настройки.ВключатьБольшиеРусскиеБуквы Тогда
		МаскаПароля = МаскаПароля + "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	КонецЕсли;
	Если Настройки.ВключатьДругиеСимволы Тогда
		МаскаПароля = МаскаПароля + "!@#$%^&*-+=/<>[]{}";
	КонецЕсли;
	
	Если НачальныйГСЧ = Неопределено Тогда
		ГСЧ = Новый ГенераторСлучайныхЧисел();
	Иначе
		ГСЧ = НачальныйГСЧ;
	КонецЕсли;
	
	Для Индекс = 1 По Настройки.КоличествоСимволов Цикл
		Пароль = Пароль + Сред(МаскаПароля, ГСЧ.СлучайноеЧисло(1, СтрДлина(МаскаПароля)), 1);
	КонецЦикла;	
	
	Возврат Пароль;
	
КонецФункции

#КонецОбласти

#Область ОтветственныеЛица

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ОТВЕТСТВЕННЫЕ ЛИЦА.

Функция ПолучитьМассивМестХраненияСотрудника(ДатаАктуальности, Сотрудник) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеСотрудникиСрезПоследних.МестоХранения
		|ИЗ
		|	РегистрСведений.ОтветственныеСотрудники.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК ОтветственныеСотрудникиСрезПоследних
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МестоХранения");
КонецФункции

Функция ПолучитьТаблицуМестХраненияСотрудников(ДатаАктуальности, СписокСотрудников) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеСотрудникиСрезПоследних.МестоХранения,
		|	ОтветственныеСотрудникиСрезПоследних.Сотрудник
		|ИЗ
		|	РегистрСведений.ОтветственныеСотрудники.СрезПоследних(&ДатаАктуальности, Сотрудник В (&СписокСотрудников)) КАК ОтветственныеСотрудникиСрезПоследних
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает ответственного сотрудника за место хранения.
Функция ПолучитьОтветственногоСотрудникаМестаХранения(ДатаАктуальности, МестоХранения) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеСотрудникиСрезПоследних.Сотрудник
		|ИЗ
		|	РегистрСведений.ОтветственныеСотрудники.СрезПоследних(&ДатаАктуальности, МестоХранения = &МестоХранения) КАК ОтветственныеСотрудникиСрезПоследних
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("МестоХранения", МестоХранения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сотрудник;
	Иначе
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает ответственного сотрудника ИТ за место хранения.
Функция ПолучитьОтветственногоСотрудникаИТОтделаМестаХранения(ДатаАктуальности, МестоХранения) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеСотрудникиИТОтделаСрезПоследних.Сотрудник
		|ИЗ
		|	РегистрСведений.ОтветственныеСотрудникиИТОтдела.СрезПоследних(&ДатаАктуальности, МестоХранения = &МестоХранения) КАК ОтветственныеСотрудникиИТОтделаСрезПоследних
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("МестоХранения", МестоХранения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сотрудник;
	Иначе
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Функция возвращает информацию об ответственных лицах организации и их должностях.
//
// Параметры:
//  Организация - Составной тип: СправочникСсылка.Организации,
//                 СправочникСсылка.Кассы, СправочникСсылка.МестаХранения,
//                 организационная единица, для которой необходимо получить
//                 информацию об ответственных лицах
//  ДатаСреза    - Дата - дата, на которую считываются данные.
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физических лицах
//                 структурной единицы.
//
Функция ОтветственныеЛицаОрганизационнойЕдиницы(ОрганизационнаяЕдиница, ДатаСреза) Экспорт
	
	Результат = Новый Структура("ФИОРуководителя, ФИОГлавногоБухгалтера, ФИОКассира, ФИОКладовщика");
	
	// Ссылки
	Результат.Вставить("Руководитель");
	Результат.Вставить("ГлавныйБухгалтер");
	Результат.Вставить("Кассир");
	Результат.Вставить("Кладовщик");
	
	// Представление ФИО (кратко)
	Результат.Вставить("ФИОРуководителя");
	Результат.Вставить("ФИОГлавногоБухгалтера");
	Результат.Вставить("ФИОКассира");
	Результат.Вставить("ФИОКладовщика");
    
    // Представление ФИО (полное)
	Результат.Вставить("ФИОРуководителяПолное");
	Результат.Вставить("ФИОГлавногоБухгалтераПолное");
	Результат.Вставить("ФИОКассираПолное");
	Результат.Вставить("ФИОКладовщикаПолное");
    
	// Представление должностей (ссылка)
	Результат.Вставить("РуководительДолжностьСсылка");
	Результат.Вставить("ГлавныйБухгалтерДолжностьСсылка");
	Результат.Вставить("КассирДолжностьСсылка");
	Результат.Вставить("КладовщикДолжностьСсылка");
	
	// Представление должностей
	Результат.Вставить("РуководительДолжность");
	Результат.Вставить("ГлавныйБухгалтерДолжность");
	Результат.Вставить("КассирДолжность");
	Результат.Вставить("КладовщикДолжность");
	
	Если ОрганизационнаяЕдиница <> Неопределено Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
		Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизационнаяЕдиница);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаСрезПоследних.Организация КАК ОрганизационнаяЕдиница,
		|	ОтветственныеЛицаСрезПоследних.ТипОтветственногоЛица КАК ТипОтветственногоЛица,
		|	ОтветственныеЛицаСрезПоследних.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ОтветственныеЛицаСрезПоследних.Сотрудник.Наименование
		|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
		|	КОНЕЦ КАК ФизическоеЛицоНаименование,
		|	ОтветственныеЛицаСрезПоследних.Должность КАК Должность,
		|	ОтветственныеЛицаСрезПоследних.Должность.Наименование КАК НазваниеДолжности
		|ИЗ
		|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, Организация = &ОрганизационнаяЕдиница) КАК ОтветственныеЛицаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ТипОтветственногоЛица 	= Перечисления.ТипыОтветственныхЛиц.Руководитель Тогда
				
				Результат.Руководитель				= Выборка.Сотрудник;
				Результат.ФИОРуководителя			= ФизическиеЛица.ФамилияИнициалыФизЛица(
					Выборка.ФизическоеЛицоНаименование);
                Результат.ФИОРуководителяПолное 	= Выборка.ФизическоеЛицоНаименование;
				Результат.РуководительДолжностьСсылка	= Выборка.Должность;
				Результат.РуководительДолжность		= Выборка.НазваниеДолжности;
				
			ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц.ГлавныйБухгалтер Тогда
				
				Результат.ГлавныйБухгалтер			= Выборка.Сотрудник;                
                Результат.ФИОГлавногоБухгалтера		= ФизическиеЛица.ФамилияИнициалыФизЛица(
                	Выборка.ФизическоеЛицоНаименование);
				Результат.ФИОГлавногоБухгалтераПолное	= Выборка.ФизическоеЛицоНаименование;
				Результат.ГлавныйБухгалтерДолжностьСсылка = Выборка.Должность;
				Результат.ГлавныйБухгалтерДолжность	= Выборка.НазваниеДолжности;
				
			ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц.Кассир Тогда
				
				Результат.Кассир					= Выборка.Сотрудник;
                Результат.ФИОКассира        		= ФизическиеЛица.ФамилияИнициалыФизЛица(
                	Выборка.ФизическоеЛицоНаименование);
				Результат.ФИОКассираПолное			= Выборка.ФизическоеЛицоНаименование;
				Результат.КассирДолжностьСсылка 	= Выборка.Должность;
				Результат.КассирДолжность			= Выборка.НазваниеДолжности;
				
			ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц.Кладовщик Тогда
				
				Результат.Кладовщик					= Выборка.Сотрудник;
                Результат.ФИОКладовщика             = ФизическиеЛица.ФамилияИнициалыФизЛица(
                	Выборка.ФизическоеЛицоНаименование);
				Результат.ФИОКладовщикаПолное		= Выборка.ФизическоеЛицоНаименование;
				Результат.КладовщикДолжностьСсылка	= Выборка.Должность;
				Результат.КладовщикДолжность		= Выборка.НазваниеДолжности;
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции // ОтветственныеЛицаОрганизационнойЕдиницы()

#КонецОбласти

#Область Бюджеты

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ БЮДЖЕТЫ.

// Поиск для данной организации на дату актуальности бюджета.
Функция НайтиБюджетНаДату(ДатаАктуальности, Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДатаАктуальности = Дата(1, 1, 1) Тогда
		ДатаАктуальности = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БюджетыОрганизации.Ссылка
		|ИЗ
		|	Справочник.Бюджеты.Организации КАК БюджетыОрганизации
		|ГДЕ
		|	БюджетыОрганизации.Организация = &Организация
		|	И БюджетыОрганизации.Ссылка.ДатаНачала <= &ДатаАктуальности
		|	И БюджетыОрганизации.Ссылка.ДатаОкончания >= &ДатаАктуальности
		|	И БюджетыОрганизации.Ссылка.ЭтоГруппа = ЛОЖЬ
		|	И БюджетыОрганизации.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Результат = Запрос.Выполнить();
	                         
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Поиск для бюджета периода в справочнике "Периоды бюджета" на дату актуальности.
Функция НайтиПериодБюджета(ДатаАктуальности, Бюджет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Бюджет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыБюджетов.Ссылка
		|ИЗ
		|	Справочник.ПериодыБюджетов КАК ПериодыБюджетов
		|ГДЕ
		|	ПериодыБюджетов.Владелец = &Бюджет
		|	И ПериодыБюджетов.ДатаНачала <= &ДатаАктуальности
		|	И ПериодыБюджетов.ДатаОкончания >= &ДатаАктуальности
		|	И ПериодыБюджетов.ПометкаУдаления = ЛОЖЬ
		|	И ПериодыБюджетов.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	Запрос.УстановитьПараметр("ДатаАктуальности", НачалоДня(ДатаАктуальности));
	
	Результат = Запрос.Выполнить();
	                         
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Цены

///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ЦЕНООБРАЗОВАНИЕ.

// Возвращает курсы валют на дату.
//
// Параметры:
//  Валюта       - СправочникСсылка.Валюты - Валюта (элемент справочника "Валюты").
//  ДатаКурса    - Дата - дата, на которую следует получить курс.
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс        - Число - курс валюты,
//   Кратность   - Число - кратность валюты.
//
Функция ПолучитьКурсыВалют(ВалютаНач, ВалютаКон, ДатаКурса) Экспорт
	
	СтруктураНач = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаНач));
	СтруктураКон = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаКон));
	
	СтруктураКон.Курс 		= ?(СтруктураКон.Курс = 0, 1, СтруктураКон.Курс);
	СтруктураКон.Кратность 	= ?(СтруктураКон.Кратность = 0, 1, СтруктураКон.Кратность);
	СтруктураКон.Вставить("КурсНач", ?(СтруктураНач.Курс = 0, 1, СтруктураНач.Курс));
	СтруктураКон.Вставить("КратностьНач", ?(СтруктураНач.Кратность = 0, 1, СтруктураНач.Кратность));
	
	Возврат СтруктураКон;
	
КонецФункции // ПолучитьКурсыВалют()

// Функция пересчитывает сумму из одной валюты в другую.
//
// Параметры:      
//	Сумма         - Число - сумма, которую следует пересчитать.
// 	КурсНач       - Число - курс из которого надо пересчитать.
// 	КурсКон       - Число - курс в который надо пересчитать.
// 	КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
// 	КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0 ИЛИ КурсКон = 0 ИЛИ КратностьНач = 0 ИЛИ КратностьКон = 0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'");
		Сообщение.Сообщить();
		Возврат Сумма;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции // ПересчитатьИзВалютыВВалюту()

// Округляет число по заданному порядку.
//
// Параметры:
//  Число        - Число, которое необходимо округлить
//  ПорядокОкругления - Перечисления.ПорядкиОкругления - порядок округления
//  ОкруглятьВБольшуюСторону - Булево - округления в большую сторону.
//
// Возвращаемое значение:
//  Число        - результат округления.
//
Функция ОкруглитьЦену(Число, ПравилоОкругления, ОкруглятьВБольшуюСторону) Экспорт
	
	Перем Результат; // Возвращаемый результат.
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПравилоОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	Иначе
		ПорядокОкругления = ПравилоОкругления;
	КонецЕсли;
	Порядок = Число(Строка(ПорядокОкругления));
	
	// вычислим количество интервалов, входящих в число.
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4.
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦену()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма        - Число - сумма НДС
//  СуммаВключаетНДС - Булево - признак включения НДС в сумму
//  СтавкаНДС    - СправочникСсылка.СтавкиНДС - ссылка на ставку НДС.
//
// Возвращаемое значение:
//  Число        - пересчитанная сумма НДС.
//
Функция ПересчитатьСуммуПриИзмененииФлаговНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Ставка = СтавкаНДС.Ставка;
	
	Если СуммаВключаетНДС Тогда
		
		Сумма = (Сумма * (100 + Ставка)) / 100;
		
	Иначе
		
		Сумма = (Сумма * 100) / (100 + Ставка);
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьСуммуПриИзмененииФлаговНДС()

// Получить сумму номенклатуры.
Функция ЦенаНоменклатуры(ДатаКон, Номенклатура, Организация = Неопределено, МестоХранения = Неопределено, 
	Партия = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ОстаткиОстатки.КоличествоОстаток, 0)
		|	КОНЕЦ КАК ЦенаОстаток
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(
		|			&ДатаКон,
		|			Организация = &Организация
		|				И МестоХранения = &МестоХранения
		|				И Номенклатура = &Номенклатура
		|				И Партия = &Партия) КАК ОстаткиОстатки";
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "Истина");
	КонецЕсли;
	Если ЗначениеЗаполнено(МестоХранения) Тогда
		Запрос.УстановитьПараметр("МестоХранения", МестоХранения);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МестоХранения = &МестоХранения", "Истина");
	КонецЕсли;
	Если ЗначениеЗаполнено(Партия) Тогда
		Запрос.УстановитьПараметр("Партия", Партия);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Партия = &Партия", "Истина");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЦенаОстаток;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревомЗначений

////////////////////////////////////////////////////////////////////////////////

// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДЕРЕВОМ ЗНАЧЕНИЙ.

// Функция формирует значение нового ключа строки табличной части.
//
// Параметры:
// Дерево - дерево значений
//
Функция ПолучитьНовыйКлючСтрокиДерева(Дерево, СписокКлючей = Неопределено) Экспорт

    Если СписокКлючей = Неопределено Тогда
        СписокКлючей = Новый СписокЗначений;
        СписокКлючей.Добавить(0);
    КонецЕсли;
    Для Каждого СтрокаДерева Из Дерево.Строки Цикл
        СписокКлючей.Добавить(СтрокаДерева.КлючСтроки);
        ПолучитьНовыйКлючСтрокиДерева(СтрокаДерева, СписокКлючей);
        СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
        МаксКлюч = СписокКлючей[0].Значение + 1;
	КонецЦикла;
	
    Возврат МаксКлюч;

КонецФункции // ПолучитьНовыйКлючСтрокиДерева()

// Процедура обновляет ключи связи в дереве значений.
//
Процедура ОбновитьКлючиСтрокВДеревеЗначений(Дерево, КлючСтроки = 1) Экспорт

    Для Каждого СтрокаДерева Из Дерево.Строки Цикл
        СтрокаДерева.КлючСтроки = КлючСтроки;
        КлючСтроки = КлючСтроки + 1;
        ОбновитьКлючиСтрокВДеревеЗначений(СтрокаДерева, КлючСтроки);
    КонецЦикла;

КонецПроцедуры // ОбновитьКлючиСвязиВДеревеЗначений()

// Процедура устанавливает значение во всем дереве значений.
//
Процедура УстановитьЗначениеКолонкиДерева(Дерево, Колонка, Значение) Экспорт

    Для Каждого СтрокаДерева Из Дерево.Строки Цикл
        СтрокаДерева[Колонка] = Значение;
        УстановитьЗначениеКолонкиДерева(СтрокаДерева, Колонка, Значение);
    КонецЦикла;

КонецПроцедуры //УстановитьЗначениеКолонкиДерева()

// Процедура копирует подчиненные строки дерева значений.
//
Процедура СкопироватьПодчиненныеСтроки(СтрокаПриемник, СтрокаИсточник)

    Для Каждого Строка Из СтрокаИсточник.Строки Цикл
        НоваяСтрока = СтрокаПриемник.Строки.Добавить();
        НоваяСтрока.КлючСвязи = СтрокаПриемник.КлючСтроки;
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
        СкопироватьПодчиненныеСтроки(НоваяСтрока, Строка);
    КонецЦикла;

КонецПроцедуры // СкопироватьПодчиненныеСтроки()

// Процедура переносит выделенные строки дерева значений в указанную ветку.
//
Процедура ПеренестиСтрокиДереваЗначений(СтрокаПриемник, ВыделенныеСтроки) Экспорт

    Если НЕ СтрокаПриемник = Неопределено Тогда
        МассивСтрок = Новый Массив;
        Для Каждого СтрокаПереноса Из ВыделенныеСтроки Цикл
            МассивСтрок.Добавить(СтрокаПереноса);
            НоваяСтрока = СтрокаПриемник.Строки.Добавить();
            СкопироватьПодчиненныеСтроки(НоваяСтрока, СтрокаПереноса);
            ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПереноса);
            НоваяСтрока.КлючСвязи = СтрокаПриемник.КлючСтроки;
		КонецЦикла;
		
        Для Каждого СтрокаДерева Из МассивСтрок Цикл
            Если СтрокаДерева.Родитель = Неопределено Тогда
                СтрокаДерева.Строки.Удалить(СтрокаДерева);
            Иначе
                СтрокаДерева.Родитель.Строки.Удалить(СтрокаДерева);
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;

КонецПроцедуры //ПеренестиСтрокиДереваЗначений()

// Процедура обновляет нумерацию элементов в дереве.
Процедура ОбновитьНумерациюВДеревеЗначений(СтрокаДерева, ИндексСтроки = 1) Экспорт
	
	ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
		
	Для Каждого Строки Из ЭлементыДерева Цикл
		Строки.КлючСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки + 1;
		ОбновитьНумерациюВДеревеЗначений(Строки, ИндексСтроки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьИнвентарныеИСерийныеНомера(СтрокаДерева) Экспорт

	Для Каждого Строки Из СтрокаДерева.Строки Цикл
		Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			Строки.ИнвентарныйНомер = Строки.КарточкаНоменклатуры.ИнвентарныйНомер;
			Строки.СерийныйНомер 	= Строки.КарточкаНоменклатуры.СерийныйНомер;
		КонецЕсли;

		ОбновитьИнвентарныеИСерийныеНомера(Строки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДатуПриобретения(СтрокаДерева) Экспорт

	Для Каждого Строки Из СтрокаДерева.Строки Цикл
		Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
			Строки.ДатаПриобретения = Строки.КарточкаНоменклатуры.ДатаПриобретения;
		КонецЕсли;

		ОбновитьДатуПриобретения(Строки);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруХарактеристикОбъекта(Знач Объект) Экспорт
	
	Результат = Новый Массив();
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Характеристики.ВидХарактеристики,
		|	ВЫБОР
		|		КОГДА Характеристики.ВидХарактеристики.ИспользоватьПредставлениеВАвтоНаименовании
		|			ТОГДА Характеристики.ВидХарактеристики.ПредставлениеВАвтоНаименовании
		|		ИНАЧЕ Характеристики.ВидХарактеристики.Представление
		|	КОНЕЦ КАК Представление,
		|	Характеристики.Значение
		|ИЗ
		|	РегистрСведений.Характеристики КАК Характеристики
		|ГДЕ
		|	Характеристики.Объект = &Объект
		|	И Характеристики.ВидХарактеристики.ИспользоватьВАвтоНаименовании = ИСТИНА
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Структура = Новый Структура("ВидХарактеристики,Значение,Представление");
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
		Результат.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет наименование карточки номенклатуры в соответствии с формулой.
Процедура ЗаполнитьНаименованиеКарточкиПоВыражению(Объект) Экспорт
	                
	Выражение = Константы.ВыражениеПредставленияКарточкиНоменклатурыПоУмолчанию.Получить();
	Если ПустаяСтрока(Выражение) ИЛИ НЕ Объект.АвтоНаименование Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Объект.Наименование;
	
	Попытка
		
		// Заполнение переменных для выражения.
		ВидНоменклатуры									= Объект.ВидНоменклатуры;
		КарточкаНоменклатуры							= Объект.Ссылка;
		Номенклатура									= Объект.Владелец;
		//@skip-warning
		НаименованиеНоменклатуры						= Объект.Владелец.Наименование;
		//@skip-warning
		ИнвентарныйНомер								= Объект.ИнвентарныйНомер;
		//@skip-warning
		СерийныйНомер									= Объект.СерийныйНомер;
		//@skip-warning
		БухНомер										= Объект.БухНомер;
		//@skip-warning
		Комментарий										= Объект.Комментарий;
		//@skip-warning
		ЕстьОграниченияПоСрокуДействияЛицензии			= Объект.ЕстьОграниченияПоСрокуДействияЛицензии;
		//@skip-warning
		ДатаНачалаЛицензии								= Объект.ДатаНачалаЛицензии;
		//@skip-warning
		ДатаОкончанияЛицензии							= Объект.ДатаОкончанияЛицензии;
		//@skip-warning
		ЕстьОграниченияПоСрокуДействияОбновлений		= Объект.ЕстьОграниченияПоСрокуДействияОбновлений;
		//@skip-warning
		ДатаНачалаПодпискиОбновлений					= Объект.ДатаНачалаПодпискиОбновлений;
		//@skip-warning
		ДатаОкончанияПодпискиОбновлений					= Объект.ДатаОкончанияПодпискиОбновлений;
		//@skip-warning
		КоличествоПользователейЛицензии					= Объект.КоличествоПользователейЛицензии;
		//@skip-warning
		ЕстьОграниченияПоКоличествуПользователейЛицензии= Объект.ЕстьОграниченияПоКоличествуПользователейЛицензии;
		//@skip-warning
		ВерсияПО										= Объект.ВерсияПО;
		//@skip-warning
		ДатаУстановкиПО									= Объект.ДатаУстановкиПО;
		//@skip-warning
		КлючАктивации									= Объект.КлючАктивации;
		//@skip-warning
		ДокументПоступления								= Объект.ДокументПоступления;
		//@skip-warning
		ЕстьГарантия									= Объект.ЕстьГарантия;
		//@skip-warning
		ГарантияМесяцев									= Объект.ГарантияМесяцев;
		//@skip-warning
		ДатаОкончанияГарантии							= Объект.ДатаОкончанияГарантии;
		//@skip-warning
		ДатаПриобретения								= Объект.ДатаПриобретения;		
		//@skip-warning
		АвтоНаименование								= Объект.АвтоНаименование;
		//@skip-warning
		ПорядковыйНомер									= Объект.ПорядковыйНомер;
		
		// Вычисляем характеристики вида номенклатуры.
		ХарактеристикиВидаНоменклатуры					= ПолучитьСтруктуруХарактеристикОбъекта(ВидНоменклатуры);
				
		// Вычисляем характеристики номенклатуры.
		ХарактеристикиНоменклатуры						= ПолучитьСтруктуруХарактеристикОбъекта(Номенклатура);
		
		// Вычисляем характеристики карточки номенклатуры.
		ХарактеристикиКарточкиНоменклатуры				= ПолучитьСтруктуруХарактеристикОбъекта(КарточкаНоменклатуры);
		
		// Характеристики сводные
		Характеристики = Новый Массив;
		
		// Сначала по видам номенклатуры.
		Для Каждого Структура Из ХарактеристикиВидаНоменклатуры Цикл
			Добавить = Истина;
			
			Если ТипЗнч(Структура.Значение) <> Тип("Булево") Тогда
				Если НЕ ЗначениеЗаполнено(Структура.Значение) Тогда
					Добавить = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Добавить Тогда
				Характеристики.Добавить(Структура);
			КонецЕсли;
		КонецЦикла;
		
		// Потом по номенклатуре.
		Для Каждого Структура Из ХарактеристикиНоменклатуры Цикл
			Добавить = Истина;
			
			Для Каждого Структура2 Из Характеристики Цикл
				Если Структура.ВидХарактеристики = Структура2.ВидХарактеристики Тогда
					Если ТипЗнч(Структура.Значение) <> Тип("Булево") Тогда
						Если НЕ ЗначениеЗаполнено(Структура.Значение) Тогда
							Добавить = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Если Добавить Тогда
						ЗаполнитьЗначенияСвойств(Структура2, Структура);
						Добавить = Ложь;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТипЗнч(Структура.Значение) <> Тип("Булево") Тогда
				Если НЕ ЗначениеЗаполнено(Структура.Значение) Тогда
					Добавить = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Добавить Тогда
				Характеристики.Добавить(Структура);
			КонецЕсли;
		КонецЦикла;
		
		// Потом по карточке номенклатуры.
		Для Каждого Структура Из ХарактеристикиКарточкиНоменклатуры Цикл
			Добавить = Истина;
			
			Для Каждого Структура2 Из Характеристики Цикл
				Если Структура.ВидХарактеристики = Структура2.ВидХарактеристики Тогда
					Если ТипЗнч(Структура.Значение) <> Тип("Булево") Тогда
						Если НЕ ЗначениеЗаполнено(Структура.Значение) Тогда
							Добавить = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Если Добавить Тогда
						ЗаполнитьЗначенияСвойств(Структура2, Структура);
						Добавить = Ложь;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТипЗнч(Структура.Значение) <> Тип("Булево") Тогда
				Если НЕ ЗначениеЗаполнено(Структура.Значение) Тогда
					Добавить = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Добавить Тогда
				Характеристики.Добавить(Структура);
			КонецЕсли;
		КонецЦикла;		
		
		Выполнить(Выражение);
		
		Объект.Наименование = Результат;
		
	Исключение
		                   
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Ошибка вычисления автоматического наименования: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
	КонецПопытки;
	
КонецПроцедуры

// Новое дерево значений.
Процедура ВывестиДеревоНоменклатуры(ДеревоНоменклатуры, Знач Номенклатура) Экспорт
	
	// Временно оставим для замера производительности.
	// Время = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВТ_КарточкиНоменклатуры", Номенклатура.Скопировать(,
		"Номенклатура,КарточкаНоменклатуры"));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_КарточкиНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВТ_КарточкиНоменклатуры.КарточкаНоменклатуры КАК КарточкаНоменклатуры
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ВТ_КарточкиНоменклатуры КАК ВТ_КарточкиНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.КарточкаНоменклатуры КАК КарточкаНоменклатуры,
		|	ВТ.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры КАК ВестиУчетПоКарточкам,
		|	ВТ.КарточкаНоменклатуры.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ВТ.КарточкаНоменклатуры.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	ВТ.КарточкаНоменклатуры <> Значение(Справочник.КарточкиНоменклатуры.ПустаяСсылка)";
		
	ТаблицаНомеров = Запрос.Выполнить().Выгрузить();
	ТаблицаНомеров.Индексы.Добавить("КарточкаНоменклатуры");
		
	ДеревоНоменклатуры.Строки.Очистить();
	Нпп = 1;
	
	Для Каждого Строки Из Номенклатура Цикл
		Если НЕ ЗначениеЗаполнено(Строки.Партия) Тогда
			СтрокаДерева 			= ДеревоНоменклатуры.Строки.Добавить();
			КарточкаНоменклатуры	= Строки.КарточкаНоменклатуры;
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Строки);
			СтрокаДерева.КлючСтроки = Нпп;
			Нпп 					= Нпп + 1;
			СтрокаДерева.УчетПоКарточкам = 
				УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Строки.Номенклатура);
			
			Если СтрокаДерева.УчетПоКарточкам = Истина Тогда
				СтрокаТаблицыНомеров = ТаблицаНомеров.Найти(КарточкаНоменклатуры);
				Если СтрокаТаблицыНомеров <> Неопределено Тогда
					Попытка
						СтрокаДерева.ИнвентарныйНомер	= СтрокаТаблицыНомеров.ИнвентарныйНомер;
						СтрокаДерева.СерийныйНомер		= СтрокаТаблицыНомеров.СерийныйНомер;					
					Исключение
					КонецПопытки;					
				КонецЕсли;
			КонецЕсли;
			
			ВывестиПодчиненнуюНоменклатуру(СтрокаДерева, Номенклатура, КарточкаНоменклатуры, Нпп, ТаблицаНомеров);
		КонецЕсли;
	КонецЦикла;
	
	// Сообщить(ТекущаяУниверсальнаяДатаВМиллисекундах() - Время);

КонецПроцедуры

Процедура ВывестиПодчиненнуюНоменклатуру(СтрокаДерева, Знач Номенклатура, Комплект, Нпп, Знач ТаблицаНомеров)
	
	Если ЗначениеЗаполнено(СтрокаДерева.КарточкаНоменклатуры) Тогда
		ПараметрыОтбора = Новый Структура("Партия", СтрокаДерева.КарточкаНоменклатуры);
		МассивСтрок = Номенклатура.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого Строки Из МассивСтрок Цикл
			НоваяСтрокаДерева 					= СтрокаДерева.Строки.Добавить();
			КарточкаНоменклатуры 				= Строки.КарточкаНоменклатуры;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Строки);			
			НоваяСтрокаДерева.Комплект			= Комплект;
			НоваяСтрокаДерева.КлючСтроки		= Нпп;

			Если НоваяСтрокаДерева.УчетПоКарточкам = Истина Тогда
				СтрокаТаблицыНомеров = ТаблицаНомеров.Найти(КарточкаНоменклатуры);
				Если СтрокаТаблицыНомеров <> Неопределено Тогда
					Попытка
						НоваяСтрокаДерева.ИнвентарныйНомер	= СтрокаТаблицыНомеров.ИнвентарныйНомер;
						НоваяСтрокаДерева.СерийныйНомер		= СтрокаТаблицыНомеров.СерийныйНомер;					
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;

			Нпп = Нпп + 1;
			ВывестиПодчиненнуюНоменклатуру(НоваяСтрокаДерева, Номенклатура, Комплект, Нпп, ТаблицаНомеров);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область Удалить_Медленная_Версия_ВыводаДерева

Процедура УдалитьВывестиДеревоНоменклатуры(ДеревоНоменклатуры, Номенклатура) Экспорт
	
	//Время = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ДеревоНоменклатуры.Строки.Очистить();
	Нпп = 1;
	Для Каждого Строки Из Номенклатура Цикл
		Если НЕ ЗначениеЗаполнено(Строки.Партия) Тогда
			СтрокаДерева 			= ДеревоНоменклатуры.Строки.Добавить();
			КарточкаНоменклатуры	= Строки.КарточкаНоменклатуры;
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Строки);
			СтрокаДерева.КлючСтроки = Нпп;
			Нпп = Нпп + 1;
			Попытка
				Если ЗначениеЗаполнено(КарточкаНоменклатуры) 
					И Строки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда				
					СтрокаДерева.ИнвентарныйНомер	= КарточкаНоменклатуры.ИнвентарныйНомер;
					СтрокаДерева.СерийныйНомер		= КарточкаНоменклатуры.СерийныйНомер;					
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			СтрокаДерева.УчетПоКарточкам = 
				УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаДерева.Номенклатура);
			
			УдалитьВывестиПодчиненнуюНоменклатуру(СтрокаДерева, Номенклатура, КарточкаНоменклатуры, Нпп);
		КонецЕсли;
	КонецЦикла;
	
	//Сообщить(ТекущаяУниверсальнаяДатаВМиллисекундах() - Время);
	
КонецПроцедуры

Процедура УдалитьВывестиПодчиненнуюНоменклатуру(СтрокаДерева, Номенклатура, Комплект, Нпп)
	
	Для Каждого Строки Из Номенклатура Цикл
		Если СтрокаДерева.КарточкаНоменклатуры = Строки.Партия 
			И ЗначениеЗаполнено(СтрокаДерева.КарточкаНоменклатуры) Тогда			
			НоваяСтрокаДерева 					= СтрокаДерева.Строки.Добавить();
			КарточкаНоменклатуры 				= Строки.КарточкаНоменклатуры;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Строки);			
			НоваяСтрокаДерева.Комплект			= Комплект;
			НоваяСтрокаДерева.КлючСтроки		= Нпп;
			НоваяСтрокаДерева.УчетПоКарточкам	= 
				УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(НоваяСтрокаДерева.Номенклатура);
				
			Попытка
				Если ЗначениеЗаполнено(КарточкаНоменклатуры) И НоваяСтрокаДерева.УчетПоКарточкам = Истина Тогда				
					НоваяСтрокаДерева.ИнвентарныйНомер	= КарточкаНоменклатуры.ИнвентарныйНомер;
					НоваяСтрокаДерева.СерийныйНомер		= КарточкаНоменклатуры.СерийныйНомер;					
				КонецЕсли;
			Исключение
			КонецПопытки;

			Нпп = Нпп + 1;
			УдалитьВывестиПодчиненнуюНоменклатуру(НоваяСтрокаДерева, Номенклатура, Комплект, Нпп);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Сохранения дерева номенклатуры.
Процедура СохранитьДеревоНоменклатуры(ДеревоНоменклатуры, Номенклатура) Экспорт
	
	Номенклатура.Очистить();
	Для Каждого Строки Из ДеревоНоменклатуры.Строки Цикл
		НоваяСтрока 						= Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
		
		СохранитьПодчиненнуюНоменклатуру(Строки, Номенклатура, НоваяСтрока.КарточкаНоменклатуры);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьПодчиненнуюНоменклатуру(СтрокаДерева, Номенклатура, Комплект)
	
	Для Каждого Строки Из СтрокаДерева.Строки Цикл
		НоваяСтрока 						= Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);		
		Если ЗначениеЗаполнено(Строки.Родитель) Тогда
			НоваяСтрока.Партия 				= Строки.Родитель.КарточкаНоменклатуры;
		Иначе
			НоваяСтрока.Партия 				= Справочники.КарточкиНоменклатуры.ПустаяСсылка();		
		КонецЕсли;
		НоваяСтрока.Комплект				= Комплект;
		
		СохранитьПодчиненнуюНоменклатуру(Строки, Номенклатура, Комплект);
	КонецЦикла;
	
КонецПроцедуры

Функция ОтображатьИнвентарныеСерийныеНомера() Экспорт
	
	Результат = ХранилищеОбщихНастроек.Загрузить("НастройкиУИТ", "ОтображатьИнвентарныеСерийныеНомера");
	Если Результат = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьНастройкуОтображатьИнвентарныеСерийныеНомера(Значение) Экспорт
	
	ХранилищеОбщихНастроек.Сохранить("НастройкиУИТ", "ОтображатьИнвентарныеСерийныеНомера", Значение); 
	
КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаСобытия

///////////////////////////////////////////////////////////////////////////////// 
// ПОДПИСКИ НА СОБЫТИЯ.

Процедура ПередЗаписьюДокументаКорректировкаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим редакторов документов
	Если НЕ Источник.ЭтоНовый() Тогда
		Если ЕстьРеквизитДокумента("АвторКорректировки", Источник.Метаданные()) Тогда
			Источник.АвторКорректировки = Пользователи.ТекущийПользователь();
		КонецЕсли;
		Если ЕстьРеквизитДокумента("ДатаКорректировки", Источник.Метаданные()) Тогда
			Источник.ДатаКорректировки = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеITОтделом8УФОбновитьКарточкиНоменклатурыПриЗаписиДокументаПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаДокумента = Источник.Ссылка;
	ПометкаУдаления = Источник.Ссылка.ПометкаУдаления;	
	НачалоДняДата   = НачалоДня(СсылкаДокумента.Дата);	
	
	Если ТипЗнч(СсылкаДокумента) = Тип("ДокументСсылка.Поступление") Тогда
		Запрос 		  = Новый Запрос();	
		ТекстЗапроса  =
			"ВЫБРАТЬ
			|	ПоступлениеНоменклатура.КарточкаНоменклатуры КАК КарточкаНоменклатуры,
			|	ПоступлениеНоменклатура.Всего КАК Всего
			|ИЗ
			|	Документ.Поступление.Номенклатура КАК ПоступлениеНоменклатура
			|ГДЕ
			|	ПоступлениеНоменклатура.Ссылка = &Ссылка
			|	И ПоступлениеНоменклатура.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры = ИСТИНА";
		
		Если Не ПометкаУдаления Тогда
			
			ТекстЗапроса = ТекстЗапроса + 
				"	И (ПоступлениеНоменклатура.КарточкаНоменклатуры.ДокументПоступления <> &Ссылка
				|	ИЛИ ПоступлениеНоменклатура.КарточкаНоменклатуры.ДатаВводаВЭксплуатацию <> &Дата
				|	ИЛИ ПоступлениеНоменклатура.КарточкаНоменклатуры.ПервоначальнаяСтоимость <> ПоступлениеНоменклатура.Всего
				|	ИЛИ ПоступлениеНоменклатура.КарточкаНоменклатуры.СрокПолезногоИспользования = 0)";
			
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", СсылкаДокумента);
		Запрос.УстановитьПараметр("Дата",   НачалоДняДата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл			
			Попытка
				ОбъектКарточка = Выборка.КарточкаНоменклатуры.ПолучитьОбъект();
				Если ПометкаУдаления Тогда // очищаем реквизиты.
					ОбъектКарточка.ДокументПоступления 		  = Документы.Поступление.ПустаяСсылка();
					ОбъектКарточка.ДатаВводаВЭксплуатацию 	  = Дата(1,1,1);
					ОбъектКарточка.ПервоначальнаяСтоимость 	  = 0;					
					ОбъектКарточка.СрокПолезногоИспользования = 0;						
				Иначе
					ОбъектКарточка.ДокументПоступления 		= СсылкаДокумента;
					ОбъектКарточка.ДатаВводаВЭксплуатацию 	= НачалоДняДата;
					ОбъектКарточка.ПервоначальнаяСтоимость 	= Выборка.Всего;
					Если ОбъектКарточка.СрокПолезногоИспользования = 0 Тогда
						ОбъектКарточка.СрокПолезногоИспользования = 
							УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("СрокПолезногоИспользованияКомплектующих");
						Если ОбъектКарточка.СрокПолезногоИспользования = 0 Тогда
							ОбъектКарточка.СрокПолезногоИспользования = 60;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				ОбъектКарточка.Записать();
			Исключение
			КонецПопытки;	
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СсылкаДокумента) = Тип("ДокументСсылка.ОкончаниеОбслуживания") Тогда
		
		НоменклатураВыгрузка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаДокумента, "Номенклатура");		
		Если НоменклатураВыгрузка <> Неопределено Тогда
			Номенклатура = НоменклатураВыгрузка.Выгрузить();
		Иначе
			Возврат;
		КонецЕсли;
		
		Для Каждого Строки Из Номенклатура Цикл			
			
			Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры)				
				И Строки.Событие = Перечисления.СобытиеОбслуживания.Добавление Тогда				
				Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Строки.Номенклатура) Тогда					
					Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры.ДокументПоступления) // была оприходована ранее.
						И Строки.КарточкаНоменклатуры.ДокументПоступления <> СсылкаДокумента Тогда
						Продолжить;
					КонецЕсли;					
					
					Попытка
						ОбъектКарточка = Строки.КарточкаНоменклатуры.ПолучитьОбъект();
						Если ПометкаУдаления Тогда // очищаем реквизиты.
							ОбъектКарточка.ДокументПоступления 	      = Документы.Поступление.ПустаяСсылка();
							ОбъектКарточка.ПервоначальнаяСтоимость    = 0;
							ОбъектКарточка.ДатаВводаВЭксплуатацию     = Дата(1, 1, 1); 
							ОбъектКарточка.СрокПолезногоИспользования = 0; 
						Иначе
							ОбъектКарточка.ДокументПоступления 	   = СсылкаДокумента;
							ОбъектКарточка.ПервоначальнаяСтоимость = Строки.Всего;
							ОбъектКарточка.ДатаВводаВЭксплуатацию  = НачалоДняДата;							
							Если ОбъектКарточка.СрокПолезногоИспользования = 0 Тогда
								ОбъектКарточка.СрокПолезногоИспользования = 
									УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("СрокПолезногоИспользованияКомплектующих");
								Если ОбъектКарточка.СрокПолезногоИспользования = 0 Тогда
									ОбъектКарточка.СрокПолезногоИспользования = 60;
								КонецЕсли;
							КонецЕсли;							
						КонецЕсли;							
						ОбъектКарточка.Записать();
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СсылкаДокумента) = Тип("ДокументСсылка.Инвентаризация") Тогда
		
		НоменклатураВыгрузка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаДокумента, "Номенклатура");		
		Если НоменклатураВыгрузка <> Неопределено Тогда
			Номенклатура = НоменклатураВыгрузка.Выгрузить();
		Иначе
			Возврат;
		КонецЕсли;
		
		Для Каждого Строки Из Номенклатура Цикл			
			
			Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда				
				Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(Строки.Номенклатура) Тогда					
					Если ЗначениеЗаполнено(Строки.КарточкаНоменклатуры.ДокументПоступления) // была оприходована ранее.
						И Строки.КарточкаНоменклатуры.ДокументПоступления <> СсылкаДокумента Тогда
						Продолжить;
					КонецЕсли;					
					
					Попытка
						ОбъектКарточка = Строки.КарточкаНоменклатуры.ПолучитьОбъект();
						Если ПометкаУдаления Тогда // очищаем реквизиты.
							ОбъектКарточка.ДокументПоступления 	      = Документы.Поступление.ПустаяСсылка();
							ОбъектКарточка.ПервоначальнаяСтоимость    = 0;
							ОбъектКарточка.ДатаВводаВЭксплуатацию     = Дата(1, 1, 1); 
							ОбъектКарточка.СрокПолезногоИспользования = 0; 
						Иначе
							ОбъектКарточка.ДокументПоступления 	   = СсылкаДокумента;
							ОбъектКарточка.ПервоначальнаяСтоимость = Строки.Сумма;
							ОбъектКарточка.ДатаВводаВЭксплуатацию  = НачалоДняДата;							
							Если ОбъектКарточка.СрокПолезногоИспользования = 0 Тогда
								ОбъектКарточка.СрокПолезногоИспользования = 
									УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("СрокПолезногоИспользованияКомплектующих");
								Если ОбъектКарточка.СрокПолезногоИспользования = 0 Тогда
									ОбъектКарточка.СрокПолезногоИспользования = 60;
								КонецЕсли;
							КонецЕсли;							
						КонецЕсли;							
						ОбъектКарточка.Записать();
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область НоменклатураИКарточки

// Создать карточку номенклатуры по номенклатуре.
Функция СоздатьКарточкуНоменклатуры(Номенклатура, СерийныйНомер = "", ИнвентарныйНомер = "",
	ДокументПоступления = Неопределено) Экспорт
	
	Объект							= Справочники.КарточкиНоменклатуры.СоздатьЭлемент();
	Объект.Наименование				= Номенклатура.Наименование;
	Объект.ВидНоменклатуры			= Номенклатура.ВидНоменклатуры;
	Объект.Владелец 				= Номенклатура;
	Если Номенклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПрограммноеОбеспечение 
		ИЛИ Номенклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.Лицензия Тогда
		
		Объект.КлючАктивации		= СерийныйНомер;
		Объект.СерийныйНомер		= "";
		
	Иначе
		
		Объект.КлючАктивации		= "";
		Объект.СерийныйНомер		= СерийныйНомер;
		
	КонецЕсли;	
	Объект.ИнвентарныйНомер			= ИнвентарныйНомер;
	Объект.ГарантияМесяцев			= Номенклатура.ГарантияМесяцев;		
	Объект.АвтоНаименование			= Истина;
	Если ДокументПоступления <> Неопределено Тогда
		Объект.ДокументПоступления		= ДокументПоступления;
		Объект.ДатаВводаВЭксплуатацию	= ДокументПоступления.Дата;
	Иначе
		Объект.ДатаВводаВЭксплуатацию	= ТекущаяДатаСеанса();
	КонецЕсли;	
	Объект.Записать();
	
	// Заполняем характеристики.
	СЛС.ЗаполнитьХарактеристикиПоВидуНоменклатуры(Объект.Ссылка);
	
	ЗаполнитьНаименованиеКарточкиПоВыражению(Объект);
	Объект.Записать();
		
	Возврат Объект.Ссылка;
КонецФункции

Процедура ЗаписатьТекущиеДанныеМестХранения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МестаХранения.Ссылка КАК МестоХранения,
		|	ОтветственныеСотрудникиСрезПоследних.Сотрудник КАК Сотрудник,
		|	МестаХранения.ПоследнийОтветственный
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеСотрудники.СрезПоследних(, ) КАК ОтветственныеСотрудникиСрезПоследних
		|		ПО МестаХранения.Ссылка = ОтветственныеСотрудникиСрезПоследних.МестоХранения
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ОтветственныеСотрудникиСрезПоследних.Сотрудник ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|		ИНАЧЕ ОтветственныеСотрудникиСрезПоследних.Сотрудник
		|	КОНЕЦ <> МестаХранения.ПоследнийОтветственный";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.МестоХранения.ПолучитьОбъект();
		
		Попытка	
			Объект.Заблокировать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = '%1 заблокирован. Закройте его и повторите.'"), 
				Строка(Выборка.МестоХранения)));
			Возврат;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Выборка.Сотрудник) Тогда
			Объект.ПоследнийОтветственный = Выборка.Сотрудник;
		Иначе
			Объект.ПоследнийОтветственный = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		Объект.Записать();
		
		Объект.Разблокировать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Функция возвращает структуру для создания документа из карточки номенклатуры.
//
Функция ПолучитьСтруктуруНоменклатураМестоХранения(СсылкаНаНоменклатуру, МестоХранения = Неопределено, 
	Партия = Неопределено, Период = Неопределено) Экспорт
	
	ТЗНоменклатуры 			= ПолучитьТаблицуНоменклатурыСОстатками(СсылкаНаНоменклатуру, МестоХранения, Партия, 
		Период);
	АдресНоменклатуры 		= ПоместитьВоВременноеХранилище(ТЗНоменклатуры, Новый УникальныйИдентификатор()); 
	Если Не ЗначениеЗаполнено(МестоХранения) Тогда
		МестоХранения 		= ТЗНоменклатуры[0].МестоХранения;
		мОрганизация 		= ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	Иначе
		мОрганизация		= МестоХранения.Организация;		
	КонецЕсли;
	
	Возврат Новый Структура("МестоХранения,АдресНоменклатуры,Организация",МестоХранения,АдресНоменклатуры,мОрганизация);
	
КонецФункции

// Функция возвращает ТЗ номенклатуры с остатками.
//
Функция ПолучитьТаблицуНоменклатурыСОстатками(ВерхняяНоменклатура, МестоХранения = Неопределено, 
	Партия = Неопределено, Период = Неопределено) Экспорт
	
	НайденнаяНоменклатура 	= Новый Структура;	
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("КарточкаНоменклатуры");
	ТЗ.Колонки.Добавить("ВидНоменклатуры");
	ТЗ.Колонки.Добавить("Партия");
	ТЗ.Колонки.Добавить("Комплект");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("МестоХранения");
	ТЗ.Колонки.Добавить("Примечание");
	
	Если ТипЗНЧ(ВерхняяНоменклатура) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
		НоменклатураВид = ВерхняяНоменклатура.Владелец.ВидНоменклатуры
	Иначе 
		НоменклатураВид = ВерхняяНоменклатура.ВидНоменклатуры;	
	КонецЕсли;	
	
	ПериодДляЗапроса 			= ?(ЗначениеЗаполнено(Период),Период,КонецДня(ТекущаяДатаСеанса()));
	
	СтруктураКоличество 		= ПолучитьОстаткиПоНоменклатуре(ВерхняяНоменклатура, ПериодДляЗапроса, МестоХранения,
		Партия);
	
	// Нет на остатках
	Если СтруктураКоличество = Неопределено Тогда		
		СтруктураКоличество = Новый Структура;		
		СтруктураКоличество.Вставить("Комплект",
			ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
		СтруктураКоличество.Вставить("Партия", 
			ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
		Если ТипЗнч(ВерхняяНоменклатура) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
			СтруктураКоличество.Вставить("Номенклатура", 	ВерхняяНоменклатура.Владелец);
			СтруктураКоличество.Вставить("КарточкаНоменклатуры",ВерхняяНоменклатура);
			СтруктураКоличество.Вставить("ВидНоменклатуры",	ВерхняяНоменклатура.Владелец.ВидНоменклатуры);
			СтруктураКоличество.Вставить("ЕдиницаИзмерения",ВерхняяНоменклатура.Владелец.ЕдиницаИзмерения);
			
		Иначе
			СтруктураКоличество.Вставить("Номенклатура", 	ВерхняяНоменклатура);
			СтруктураКоличество.Вставить("КарточкаНоменклатуры",
				ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
			СтруктураКоличество.Вставить("ВидНоменклатуры",	ВерхняяНоменклатура.ВидНоменклатуры);
			СтруктураКоличество.Вставить("ЕдиницаИзмерения",ВерхняяНоменклатура.ЕдиницаИзмерения);

		КонецЕсли;		
		СтруктураКоличество.Вставить("Количество", 			0);
		СтруктураКоличество.Вставить("Сумма", 				0);
		СтруктураКоличество.Вставить("МестоХранения",		
			ПредопределенноеЗначение("Справочник.МестаХранения.ПустаяСсылка"));
		СтруктураКоличество.Вставить("Примечание",			НСтр("ru = 'Нет на остатках'"));	
		СвернутьТаблицуНоменклатуры(СтруктураКоличество,ТЗ);				
		Возврат ТЗ;
	КонецЕсли;	
	
	НайденнаяНоменклатура.Вставить("Партия", 				СтруктураКоличество.Партия);				
	НайденнаяНоменклатура.Вставить("Комплект", 				СтруктураКоличество.Комплект);				
	НайденнаяНоменклатура.Вставить("МестоХранения",			СтруктураКоличество.МестоХранения);						
	
	// Это "свернутый" комплект
	Если ЗначениеЗаполнено(НайденнаяНоменклатура.Комплект) Тогда			
		
		ОстаткиПоКомплекту = ПолучитьОстаткиПоНоменклатуре(СтруктураКоличество.Комплект, ПериодДляЗапроса, 
			Неопределено, Неопределено);
		НайденнаяНоменклатура.Вставить("СвернутыйКомплект",	Истина);
		НайденнаяНоменклатура.Вставить("Номенклатура",		СтруктураКоличество.Комплект.Владелец);
		НайденнаяНоменклатура.Вставить("ВидНоменклатуры",	СтруктураКоличество.Комплект.ВидНоменклатуры);
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры", СтруктураКоличество.Комплект);
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 	СтруктураКоличество.Комплект.Владелец.ЕдиницаИзмерения);
		НайденнаяНоменклатура.Вставить("Количество",		ОстаткиПоКомплекту.Количество);
		НайденнаяНоменклатура.Вставить("Сумма",				ОстаткиПоКомплекту.Сумма);			
		НайденнаяНоменклатура.Вставить("Партия", 			ОстаткиПоКомплекту.Партия);				
		НайденнаяНоменклатура.Вставить("Комплект", 			ОстаткиПоКомплекту.Комплект);
		НайденнаяНоменклатура.Вставить("МестоХранения",		ОстаткиПоКомплекту.МестоХранения);
		СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура,ТЗ);		
		ТЗ.Сортировать("Партия,Номенклатура");
		
		Возврат ТЗ;
		
	КонецЕсли;		
	
	// Подчиненная номенклатура.
	Если ЗначениеЗаполнено(НайденнаяНоменклатура.Партия) Тогда			
		
		НоменклатураВерхнегоУровня = ПолучитьВерхнююНоменклатуруПоКомплектующей(НайденнаяНоменклатура.Партия,
			ПериодДляЗапроса);
		Если ЗначениеЗаполнено(НоменклатураВерхнегоУровня) Тогда 
			ОстаткиПоКомплекту = ПолучитьОстаткиПоНоменклатуре(НоменклатураВерхнегоУровня,ПериодДляЗапроса, 
				Неопределено, Неопределено);
			Если ТипЗНЧ(НоменклатураВерхнегоУровня)= Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
				НайденнаяНоменклатура.Вставить("Номенклатура",			НоменклатураВерхнегоУровня.Владелец);
				НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	НоменклатураВерхнегоУровня);
				НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		НоменклатураВерхнегоУровня.Владелец.ЕдиницаИзмерения);
				НайденнаяНоменклатура.Вставить("ВидНоменклатуры", 		НоменклатураВерхнегоУровня.Владелец.ВидНоменклатуры);	
			Иначе
				НайденнаяНоменклатура.Вставить("Номенклатура",			НоменклатураВерхнегоУровня);				
				НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",
				УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(НоменклатураВерхнегоУровня));
				НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		НоменклатураВерхнегоУровня.ЕдиницаИзмерения);
				НайденнаяНоменклатура.Вставить("ВидНоменклатуры", 		НоменклатураВерхнегоУровня.ВидНоменклатуры);	
			КонецЕсли;
			НайденнаяНоменклатура.Вставить("Количество",				ОстаткиПоКомплекту.Количество);		
			НайденнаяНоменклатура.Вставить("Сумма",						ОстаткиПоКомплекту.Сумма);
			НайденнаяНоменклатура.Вставить("Партия", 					ОстаткиПоКомплекту.Партия);				
			НайденнаяНоменклатура.Вставить("Комплект", 					ОстаткиПоКомплекту.Комплект);
			СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура,ТЗ);		
			НайденнаяНоменклатура.Вставить("СвернутыйКомплект",		Ложь);		
			ЗаполнитьПодчиненнуюНоменклатуру(ПериодДляЗапроса,НоменклатураВерхнегоУровня,ТЗ);
			ТЗ.Сортировать("Партия,Номенклатура");
		КонецЕсли;
	
		Возврат ТЗ;
		
	КонецЕсли;
		
	Если Не ВерхняяНоменклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
		НайденнаяНоменклатура.Вставить("Номенклатура",			ВерхняяНоменклатура);			
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",
		УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(ВерхняяНоменклатура));
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		ВерхняяНоменклатура.ЕдиницаИзмерения);
	Иначе	
		НайденнаяНоменклатура.Вставить("Номенклатура",			ВерхняяНоменклатура.Владелец);
		НайденнаяНоменклатура.Вставить("КарточкаНоменклатуры",	ВерхняяНоменклатура);
		НайденнаяНоменклатура.Вставить("ЕдиницаИзмерения", 		ВерхняяНоменклатура.Владелец.ЕдиницаИзмерения);
	КонецЕсли;	
	НайденнаяНоменклатура.Вставить("ВидНоменклатуры", 		НоменклатураВид);	
	НайденнаяНоменклатура.Вставить("Количество", 			СтруктураКоличество.Количество);					
	НайденнаяНоменклатура.Вставить("Сумма",	 				СтруктураКоличество.Сумма);
	
	СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура,ТЗ);	
	Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(НайденнаяНоменклатура.Номенклатура) Тогда
		ЗаполнитьПодчиненнуюНоменклатуру(ПериодДляЗапроса, 
			?(ЗначениеЗаполнено(НайденнаяНоменклатура.КарточкаНоменклатуры), 
			НайденнаяНоменклатура.КарточкаНоменклатуры,	НайденнаяНоменклатура.Номенклатура),ТЗ);
	КонецЕсли;
	
	ТЗ.Сортировать("Партия,Номенклатура");	
	
	Возврат ТЗ;
	
КонецФункции

// Получает номенклатуру самого верхнего уровня в комплекте.
//
Функция ПолучитьВерхнююНоменклатуруПоКомплектующей(Комплектующая, Период) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиОстатки.Партия
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Номенклатура = &Номенклатура) КАК ОстаткиОстатки";
	
	Запрос.УстановитьПараметр("Номенклатура", Комплектующая);
	Запрос.УстановитьПараметр("Период"		, Период);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Партия) Тогда			
			Возврат ПолучитьВерхнююНоменклатуруПоКомплектующей(ВыборкаДетальныеЗаписи.Партия, Период);
		Иначе 
			Возврат Комплектующая;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Функция возвращает всю подчиненную номенклатуру.
//
Функция ЗаполнитьПодчиненнуюНоменклатуру(Период, НоменклатураВладелец,ТЗ)	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомплектацияОстатки.Комплект,
		|	КомплектацияОстатки.Партия КАК Партия,
		|	КомплектацияОстатки.Номенклатура КАК Номенклатура,
		|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
		|	ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.Комплектация.Остатки(&Период, Комплект = &Партия) КАК КомплектацияОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.КоличествоОстаток,
		|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0)
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Партия = &Партия) КАК ОстаткиОстатки";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Партия", НоменклатураВладелец);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Комплект) Тогда Возврат Неопределено КонецЕсли;
		
		Если ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
			
			Номенклатура			= Выборка.Номенклатура.Владелец;
			КарточкаНоменклатуры	= Выборка.Номенклатура;
			
		Иначе
			
			Номенклатура			= Выборка.Номенклатура;
			КарточкаНоменклатуры	= 
				УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Выборка.Номенклатура);
			
		КонецЕсли;
		
		ПодчиненнаяНоменклатура = Новый Структура;
		ПодчиненнаяНоменклатура.Вставить("Номенклатура",		Номенклатура);		
		ПодчиненнаяНоменклатура.Вставить("Партия", 				НоменклатураВладелец);
		ПодчиненнаяНоменклатура.Вставить("КарточкаНоменклатуры",КарточкаНоменклатуры);
		ПодчиненнаяНоменклатура.Вставить("Комплект",			?(НоменклатураВладелец = Номенклатура, 
			Справочники.КарточкиНоменклатуры.ПустаяСсылка(), НоменклатураВладелец));
		ПодчиненнаяНоменклатура.Вставить("Сумма",				Выборка.Сумма);
		ПодчиненнаяНоменклатура.Вставить("ЕдиницаИзмерения", 	Номенклатура.ЕдиницаИзмерения);
		ПодчиненнаяНоменклатура.Вставить("ВидНоменклатуры", 	Номенклатура.ВидНоменклатуры);
		
		МассивСтрокТЧ = ТЗ.НайтиСтроки(
			Новый Структура("Номенклатура,Партия,КарточкаНоменклатуры", 
				ПодчиненнаяНоменклатура.Номенклатура,
				ПодчиненнаяНоменклатура.Партия, 
				ПодчиненнаяНоменклатура.КарточкаНоменклатуры));
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока					= ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ПодчиненнаяНоменклатура);
			НоваяСтрока.Количество		= Выборка.Количество;			
		Иначе
			НайденнаяСтрока				= МассивСтрокТЧ[0];
			НайденнаяСтрока.Количество	= НайденнаяСтрока.Количество + Выборка.Количество;						
		КонецЕсли;
		Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(ПодчиненнаяНоменклатура.Номенклатура) Тогда
			ЗаполнитьПодчиненнуюНоменклатуру(Период, ПодчиненнаяНоменклатура.КарточкаНоменклатуры,ТЗ);
		КонецЕсли;	
	КонецЦикла;
	
КонецФункции

// Функция возвращает остатки по номенклатуре.
//
Функция ПолучитьОстаткиПоНоменклатуре(мНоменклатура, ПериодДляЗапроса, МестоХранения = Неопределено, 
	Партия = Неопределено) Экспорт
	
	Период = ?(ЗначениеЗаполнено(ПериодДляЗапроса), ПериодДляЗапроса, КонецДня(ТекущаяДатаСеанса()));
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", Период);
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомплектацияОстатки.Комплект,
		|	КомплектацияОстатки.Партия КАК Партия,
		|	КомплектацияОстатки.Номенклатура КАК Номенклатура,
		|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
		|	ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) КАК Сумма,
		|	"""" КАК МестоХранения
		|ИЗ
		|	РегистрНакопления.Комплектация.Остатки(
		|			&Период,
		|			ВЫБОР
		|					КОГДА ТИПЗНАЧЕНИЯ(Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|				И Номенклатура = &Номенклатура) КАК КомплектацияОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.КоличествоОстаток,
		|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0),
		|	ОстаткиОстатки.МестоХранения
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Номенклатура = &Номенклатура) КАК ОстаткиОстатки"; 
	
	Запрос.УстановитьПараметр("Номенклатура", мНоменклатура);
	Если ЗначениеЗаполнено(МестоХранения) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&Период, Номенклатура = &Номенклатура",
		"&Период,Номенклатура = &Номенклатура И МестоХранения = &МестоХранения");	
		Запрос.УстановитьПараметр("МестоХранения", МестоХранения);
	КонецЕсли;
	
	Если НЕ Партия = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"Номенклатура = &Номенклатура",
		"Номенклатура = &Номенклатура И Партия = &Партия");	
		Запрос.УстановитьПараметр("Партия", Партия);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка			  = Запрос.Выполнить().Выбрать();	
	СтруктураВозврата = Неопределено;
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Комплект", 		Выборка.Комплект);
		СтруктураВозврата.Вставить("Партия", 		Выборка.Партия);
		СтруктураВозврата.Вставить("Номенклатура", 	Выборка.Номенклатура);
		СтруктураВозврата.Вставить("Количество", 	Выборка.Количество);
		СтруктураВозврата.Вставить("Сумма", 		Выборка.Сумма);
		СтруктураВозврата.Вставить("МестоХранения",	Выборка.МестоХранения);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает состояние карточки номенклатуры, если не найдено то Неопределено.
Функция ПолучитьСостояниеКарточкиНоменклатуры(Знач КарточкаНоменклатуры, Знач Период) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостояниеКарточекНоменклатурыСрезПоследних.Состояние
		|ИЗ
		|	РегистрСведений.СостояниеКарточекНоменклатуры.СрезПоследних(&Период, КарточкаНоменклатуры = &КарточкаНоменклатуры) КАК СостояниеКарточекНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("КарточкаНоменклатуры", КарточкаНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Состояние;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Служебная процедура добавляет номенклатуру в ТЗ.
//
Процедура СвернутьТаблицуНоменклатуры(НайденнаяНоменклатура,ТЗ)
	
	МассивСтрокТЧ = ТЗ.НайтиСтроки(Новый Структура("Номенклатура,Партия,КарточкаНоменклатуры",
		НайденнаяНоменклатура.Номенклатура,
		НайденнаяНоменклатура.Партия,
		НайденнаяНоменклатура.КарточкаНоменклатуры));
		
	Если МассивСтрокТЧ.Количество() = 0 Тогда
		НоваяСтрока = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяНоменклатура);
		НоваяСтрока.Количество = НайденнаяНоменклатура.Количество;				
	Иначе		
		НайденнаяСтрока = МассивСтрокТЧ[0];
		НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + НайденнаяНоменклатура.Количество;				
	КонецЕсли;
	
КонецПроцедуры

Функция ПартияСоСклада(ДатаАктуальности, Организация, МестоХранения, Номенклатура) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОстаткиОстатки.Партия
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(
		|			&ДатаАктуальности,
		|			Организация = &Организация
		|				И МестоХранения = &МестоХранения
		|				И Номенклатура = &Номенклатура) КАК ОстаткиОстатки
		|ГДЕ
		|	ОстаткиОстатки.КоличествоОстаток > 0";
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("МестоХранения"	, МестоХранения);
	Запрос.УстановитьПараметр("Номенклатура"	, Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Партия;
	Иначе
		Возврат Справочники.КарточкиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВыражениеНаименованияКарточкиПоУмолчанию() Экспорт
	
	М = ПолучитьОбщийМакет("ВыражениеНаименованияКарточкиПоУмолчанию");
	Результат = М.ПолучитьТекст();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВыражениеНаименованияМестаХраненияПоУмолчанию() Экспорт
	
	СимволДК = """"; // Двойная кавычка
	
	Результат =	"Объект.Наименование + ?(ЗначениеЗаполнено(Объект.ПоследнийОтветственный), " + СимволДК 
		+ " (" + СимволДК + "+Строка(Объект.ПоследнийОтветственный)  + " + СимволДК + ")" 
		+ СимволДК + ", " + СимволДК + СимволДК + ")";
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Штрихкодирование

// Проверяет есть ли штрихкод у карточки.
Функция ЕстьШтрихКод(Номенклатура) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ШтрихкодыНоменклатуры.Штрихкод) КАК КоличествоШтрихкодов
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоШтрихкодов > 0;
	
КонецФункции

Функция ПреобразоватьДанныеСоСканераВМассив(Параметр) Экспорт
	
	Данные = Новый Массив;
	Данные.Добавить(ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
	
	Возврат Данные;
	
КонецФункции

Функция ПреобразоватьДанныеСоСканераВСтруктуру(Параметр) Экспорт
	
	Если Параметр[1] = Неопределено Тогда
		Данные = Новый Структура("Штрихкод, Количество", Параметр[0], 1); 	 // Достаем штрихкод из основных данных.
	Иначе
		Данные = Новый Структура("Штрихкод, Количество", Параметр[1][1], 1); // Достаем штрихкод из дополнительных данных.
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область Задания

#Область Заполнение

// Сотрудник по физ лицу и организации.
Функция СотрудникПоОрганизацииИФизЛицу(Организация, ФизЛицо) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Организация = &Организация
		|	И Сотрудники.Физлицо = &Физлицо
		|	И Сотрудники.Актуальность = ИСТИНА";

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Физлицо", ФизЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ВЫборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат  Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
КонецФункции // СотрудникПоОрганизацииИФизЛицу

#КонецОбласти

#КонецОбласти

#Область РаботаСТипами

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТИПАМИ.

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
//
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));

	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);

	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);

КонецФункции // ПолучитьОписаниеТиповСтроки()

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
//
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//  ЗнакЧисла				- ДопустимыйЗнак, знак числа
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт

	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла()

// Служебная функция, предназначенная для получения описания типов даты.
//
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
//
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));

	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);

	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);

КонецФункции // ПолучитьОписаниеТиповДаты()

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент       - Табличный документ
//  ВыводимыеОбласти  - Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   - умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Невозможно получить информацию о текущем принтере (возможно, в системе не установлено ни одного принтера)'"), 
				УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()

#КонецОбласти

#Область РаботаAD

Процедура ВыполнитьИмпортИзАДРегламентнымЗаданием()
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииИмпортИзAD(),
		УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Начало импорта объектов из АД'"));
	ЕстьОшибки = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиИмпортаИзActiveDirectory.Ссылка
		|ИЗ
		|	Справочник.ПрофилиИмпортаИзActiveDirectory КАК ПрофилиИмпортаИзActiveDirectory
		|ГДЕ
		|	НЕ ПрофилиИмпортаИзActiveDirectory.ПометкаУдаления
		|	И НЕ ПрофилиИмпортаИзActiveDirectory.ЭтоГруппа
		|	И ПрофилиИмпортаИзActiveDirectory.ИспользоватьВРегламентномЗадании = ИСТИНА";
	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПрофильИмпортаИзAD 		= ВыборкаДетальныеЗаписи.Ссылка;
		ТаблицаПользователейАД 	= ТаблицаПользователейAD(Ложь, ПрофильИмпортаИзAD,, Истина);
		Если ТипЗнч(ТаблицаПользователейАД) = Тип("ТаблицаЗначений") Тогда			
			Если ТаблицаПользователейАД.Количество() > 0 Тогда
				ТаблицаРезультатов = ВыполнитьИмпортИзАД(ТаблицаПользователейАД, ПрофильИмпортаИзAD);
				Если ТаблицаРезультатов.Количество() > 0 Тогда
					Для Каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
						Если СтрокаТаблицы.ВидОперации = "Ошибка" Тогда
							ТекстСообщенияЖурналаРегистрации= СтрокаТаблицы.Описание; 
							ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииИмпортИзAD(),
								УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщенияЖурналаРегистрации);
							ЕстьОшибки = Истина;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТаблицаПользователейАД) = Тип("Строка") Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииИмпортИзAD(),
				УровеньЖурналаРегистрации.Ошибка,,, ТаблицаПользователейАД);
			ЕстьОшибки = Истина;
			Продолжить;
		ИначеЕсли ТипЗнч(ТаблицаПользователейАД) = Тип("ИнформацияОбОшибке") Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииИмпортИзAD(),
				УровеньЖурналаРегистрации.Ошибка,,, КраткоеПредставлениеОшибки(ТаблицаПользователейАД));
			ЕстьОшибки = Истина;
			Продолжить;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЕстьОшибки Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииИмпортИзAD(), 
			УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Импорт объектов из АД завершен с ошибками!'"));
	Иначе	
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииИмпортИзAD(), 
			УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Окончание импорта объектов из АД'"));
	КонецЕсли;
	
КонецПроцедуры	

Функция СобытиеЖурналаРегистрацииИмпортИзAD()
	
	Возврат НСтр("ru = 'Регламентное задание Создание объектов АД'");
	
КонецФункции

Функция ТаблицаПользователейAD(ВызовИзФормы = Ложь, ПрофильИмпортаИзAD = Неопределено, LDAPText = "", 
	Рекурсивно = Ложь) Экспорт	
	
	ТаблицаПользователейАД 	= СтруктураТаблицыПользователейАД();
	АтрибутДР 				= "";
	
	Если НЕ ВызовИзФормы Тогда //вызов из регламентного задания.		
		Если ПрофильИмпортаИзAD.ПодключениеИспользоватьУчетнуюЗапись Тогда	
			Порт			= ?(ЗначениеЗаполнено(ПрофильИмпортаИзAD.ПодключениеПорт), 
				СокрЛП(ПрофильИмпортаИзAD.ПодключениеПорт), "389");
			Если ЗначениеЗаполнено(ПрофильИмпортаИзAD.ПодключениеКореньДерева) Тогда			
				LDAPText = "LDAP://" + ПрофильИмпортаИзAD.ПодключениеКонтроллерДомена + ":" + Порт + "/" 
					+ ПрофильИмпортаИзAD.ПодключениеКореньДерева;
			Иначе
				LDAPText = "LDAP://" + ПрофильИмпортаИзAD.ПодключениеКонтроллерДомена + ":" + Порт;
			КонецЕсли;	
		Иначе		
			Попытка
				DSE		 = ПолучитьCOMОбъект("LDAP://rootDSE");  //определяем домен, к которому принадлежит компьютер.
				LDAP_DNC = DSE.Get("defaultNamingContext");      //имя текущего домена.
				LDAPText = "GC://" + LDAP_DNC; 					 //используем глобальный каталог для поиска.
			Исключение
				ТекстОшибки = ИнформацияОбОшибке();
				Возврат ТекстОшибки;
			КонецПопытки;		
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(LDAPText) Тогда
		Возврат ТаблицаПользователейАД;
	КонецЕсли;
	
	ПодстрокаЗапроса = ">;(&(objectCategory=person)(objectClass=user));ADsPath,DisplayName,mail,telephoneNumber,sAMAccountName,department,company,title,UserAccountControl,thumbnailPhoto;";
	
	Если ЗначениеЗаполнено(ПрофильИмпортаИзAD) Тогда
		Если ПрофильИмпортаИзAD.ФизЛицаЗагружатьДатуРождения 
			И ЗначениеЗаполнено(СокрЛП(ПрофильИмпортаИзAD.ФизЛицаИмяАтрибутаДатаРождения)) Тогда
			
			АтрибутДР =  СокрЛП(ПрофильИмпортаИзAD.ФизЛицаИмяАтрибутаДатаРождения);
			ПодстрокаЗапроса = Сред(ПодстрокаЗапроса,1,СтрДлина(ПодстрокаЗапроса) - 1) + "," + АтрибутДР + ";";
			
		КонецЕсли;	
	КонецЕсли;	
	
	Если ПрофильИмпортаИзAD.ПодключениеИспользоватьУчетнуюЗапись Тогда
		
		Попытка			
			Порт				= ?(ЗначениеЗаполнено(ПрофильИмпортаИзAD.ПодключениеПорт), 
				СокрЛП(ПрофильИмпортаИзAD.ПодключениеПорт), "389");			
			СтрокаПодключения 	= "Provider=ADSDSOObject;User Id=" + ПрофильИмпортаИзAD.ПодключениеДомен + "\" 
				+ ПрофильИмпортаИзAD.ПодключениеУчетнаяЗапись + ";Password=" 
				+ ПрофильИмпортаИзAD.ПодключениеПароль + ";";			
			
			conn				= Новый COMОбъект("ADODB.Connection");
			conn.cursorLocation = 3;
			conn.Open(СтрокаПодключения);			
			cmd = Новый COMОбъект("ADODB.Command");
			cmd.ActiveConnection 				  = conn;
			cmd.Properties("Page Size").Value     = 100;
			cmd.Properties("Cache Results").Value = True;						
			cmd.CommandText = "<" + СокрЛП(LDAPText) + ПодстрокаЗапроса + ?(Рекурсивно, "subtree", "onelevel");		
			rs = cmd.Execute();			
		Исключение			
			ТекстОшибки = ИнформацияОбОшибке();			
			Возврат ТекстОшибки;			
		КонецПопытки;
		
	Иначе	
		
		Попытка 
			conn = Новый COMОбъект("ADODB.Connection");
			conn.Provider 		= "ADSDSOObject";
			conn.cursorLocation = 3;
			conn.Open("ADs Provider");
			cmd = Новый COMОбъект("ADODB.Command");
			cmd.ActiveConnection 				  = conn;
			cmd.Properties("Page Size").Value 	  = 100;
			cmd.Properties("Cache Results").Value = True;						
			cmd.CommandText = "<" + СокрЛП(LDAPText) + ПодстрокаЗапроса + ?(Рекурсивно, "subtree", "onelevel");		
			rs = cmd.Execute();			
		Исключение
			ТекстОшибки = ИнформацияОбОшибке();
			Возврат ТекстОшибки;
		КонецПопытки;
		
	КонецЕсли;
		
	Сч = 0;
	Если rs.RecordCount > 0 Тогда
		Пока Не rs.EOF Цикл  
			
			Попытка
				АккаунтИмя 		= rs.Fields("sAMAccountName").Value;
				СтрПочта 		= rs.Fields("mail").Value;
				Представление 	= ?(ПустаяСтрока(rs.Fields("DisplayName").Value), АккаунтИмя, 
					rs.Fields("DisplayName").Value);
				СтрТелефон 		= rs.Fields("telephoneNumber").Value;
				Подразделение	= rs.Fields("department").Value;
				ADsPath			= rs.Fields("ADsPath").Value;				
				Организация		= rs.Fields("company").Value;
				Должность		= rs.Fields("title").Value;
				Если ЗначениеЗаполнено(АтрибутДР) Тогда
					Попытка
						ДатаРождения	= rs.Fields(АтрибутДР).Value;
					Исключение
					КонецПопытки;	
				КонецЕсли;					
				
				Попытка
					Статус = СтатусУчетнойЗаписи(rs.Fields("UserAccountControl").value);					
				Исключение
					Статус = 0;
				КонецПопытки;
				
			Исключение
				rs.MoveNext();
				Сч = Сч + 1;
				Продолжить;
			КонецПопытки;
			
			пСуществует = ложь;
			        
			Пользователь		= НайтиПользователяИБ(АккаунтИмя);
			пСуществует			= Пользователь <> Неопределено;
						
			Поз					= СтрНайти(ADsPath, "DC=");
			Если Поз > 0 Тогда
				АккаунтДомен = Сред(ADsPath, Поз+3);
				Поз = СтрНайти(АккаунтДомен, ",");
				Если Поз >  0 Тогда
					АккаунтДомен = Лев(АккаунтДомен, Поз-1);
				КонецЕсли;			
			КонецЕсли;
			
			Если Не ПустаяСтрока(АккаунтИмя) Тогда
				
				НоваяСтрока					= ТаблицаПользователейАД.Добавить();
				НоваяСтрока.Логин			= АккаунтИмя;
				НоваяСтрока.Имя				= ?(ПустаяСтрока(Представление), АккаунтИмя, Представление);
				НоваяСтрока.Домен			= АккаунтДомен;				
				НоваяСтрока.Почта			= СтрПочта;
				НоваяСтрока.Телефон 		= СтрТелефон;
				НоваяСтрока.Существует		= пСуществует;
				НоваяСтрока.Подразделение 	= Подразделение;
				НоваяСтрока.Организация 	= Организация;
				НоваяСтрока.Должность	 	= Должность;
				НоваяСтрока.ADsPath			= ADsPath;								
				НоваяСтрока.ДатаРождения 	= ПолучитьДатуИзСтроки(ДатаРождения);
				НоваяСтрока.Статус			= Статус;
				Если Пользователь <> Неопределено Тогда
					НоваяСтрока.ИдентификаторПользователяИБ = Пользователь;  
				КонецЕсли;
				
			КонецЕсли;
			
			Попытка				
				rs.MoveNext();
				Сч = Сч + 1;				
			Исключение				
				// делаем заглушку на ограничение MaxPageSize в политике ADSI.
				Прервать;				
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	rs.Close();
	rs = Неопределено;
	
	conn.Close();
	conn = Неопределено;
	
	ТаблицаПользователейАД.Сортировать("Имя Возр");
	
	Возврат ТаблицаПользователейАД;
	
КонецФункции

Функция НайтиПользователяИБ(АккаунтИмя)Экспорт
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		Пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(АккаунтИмя);
		Если Пользователь.Имя <> "" Тогда
			Возврат Пользователь.УникальныйИдентификатор;
		КонецЕсли;
		
	Исключение				
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДатуИзСтроки(ИсхСтр) Экспорт 
	
	Если ПустаяСтрока(ИсхСтр) Тогда
		Возврат Дата(1,1,1,0,0,0);
	КонецЕсли;
	
	Стр = СокрЛП(ИсхСтр);
	Попытка    
	    ЭтоДата = СтрНайти(Стр,".") ИЛИ СтрНайти(Стр,"-") ИЛИ СтрНайти(Стр,"/");
	    ЭтоВремя = СтрНайти(Стр,":");
		
	    Если НЕ ЭтоДата И НЕ ЭтоВремя Тогда
	        Возврат Дата(1,1,1,0,0,0);
	    КонецЕсли;
	    МассивДат = Новый Массив;
	    МассивВремени = Новый Массив;
	    врСтр = "";
	    Для а = 1 По СтрДлина(Стр) Цикл
	        Если (Сред(Стр,а,1) = "." ИЛИ Сред(Стр,а,1) = "-" ИЛИ Сред(Стр,а,1) = "/") и ЭтоДата Тогда
	            МассивДат.Добавить(Число(врСтр));
	            врСтр = "";
	        ИначеЕсли Сред(Стр,а,1) = ":" И Не ЭтоДата Тогда
	            МассивВремени.Добавить(Число(врСтр));
	            врСтр = "";
	        ИначеЕсли Сред(Стр,а,1) = " " ИЛИ КодСимвола(Сред(Стр,а,1))<48 ИЛИ КодСимвола(Сред(Стр,а,1))>57 Тогда
	            Если МассивДат.Количество()>0 И МассивДат.Количество()<3 И врСтр <> "" Тогда
	                МассивДат.Добавить(Число(врСтр));
	            КонецЕсли;
	            ЭтоДата = Ложь;
	            врСтр = "";
	        Иначе
	            врСтр = врСтр + Сред(Стр,а,1);
	        КонецЕсли;
	    КонецЦикла;
	    Если МассивВремени.Количество()>0 И МассивВремени.Количество()<3 И врСтр <> "" Тогда
	        МассивВремени.Добавить(Число(врСтр));
	    ИначеЕсли МассивДат.Количество()>0 И МассивДат.Количество()<3 И врСтр <> "" Тогда
	        МассивДат.Добавить(Число(врСтр));
	    КонецЕсли;
	    врДень = 0;
	    врМесяц = 0;
	    врГод = 0;
	    Для Каждого дСтр из МассивДат Цикл
	        Если врДень <> 0 И врМесяц <> 0 Тогда
	            врГод = дСтр;
	        ИначеЕсли врГод <> 0 И врМесяц <> 0 Тогда
	            врДень = дСтр;
	        ИначеЕсли врГод <> 0 ИЛИ врДень <> 0 Тогда
	            врМесяц = дСтр;
	        КонецЕсли;
	        Если дСтр / 100 > 1 Тогда
	            врГод = дСтр;
	        КонецЕсли;
	        Если врГод = 0 И врДень = 0 Тогда
	            врДень = дСтр;
	        КонецЕсли;
	    КонецЦикла;
	    врЧас = 0;
	    врМин = 0;
	    врСек = 0;
	    Для Каждого вСтр Из МассивВремени Цикл
	        Если врЧас = 0 Тогда
	            врЧас = вСтр;
	        ИначеЕсли врМин = 0 Тогда
	            врМин = вСтр;
	        ИначеЕсли врСек = 0 Тогда
	            врСек = вСтр;
	        КонецЕсли;
	    КонецЦикла;
	    Если врГод = 0 ИЛИ врГод > 9999 Тогда
	        врГод = 1;
	    ИначеЕсли врГод/100<1 Тогда
	        врГод = врГод + 2000;
	    КонецЕсли;
	    
	    Если врМесяц = 0 ИЛИ врМесяц>12 Тогда
	        врМесяц = 1;
	    КонецЕсли;
	    Если врДень = 0 ИЛИ врДень>31 Тогда
	        врДень = 1;
	    КонецЕсли;
	    Если врЧас>23 Тогда
	        врЧас = 0;
	    КонецЕсли;
	    Если врМин>59 Тогда
	        врМин = 0;
	    КонецЕсли;
	    Если врСек>59 Тогда
	        врСек = 0;
		КонецЕсли;
		                   
	    Возврат Дата(врГод, врМесяц, врДень, врЧас, врМин, врСек);
	Исключение
	КонецПопытки;
	
	Д = Дата("00010101000000");
	Стр = ИсхСтр;
	
	Если СтрНайти(Стр,".") > 0 Тогда
		
		Если СтрНайти(Стр,":") > 0 И СтрНайти(Стр," ") > 0 Тогда 
			М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр," ");
			Возврат ПолучитьДатуИзСтроки(М[0]);
		КонецЕсли;
		
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,".");
		
	ИначеЕсли СтрНайти(Стр,"/")>0 Тогда
		
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,"/");
		
	ИначеЕсли СтрНайти(Стр,",")>0 Тогда
		
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,",");
		
	ИначеЕсли СтрНайти(Стр,"-")>0 Тогда
		
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,"-");
		
	КонецЕсли; 
	
	Попытка
		
		Если М.Количество() = 3 Тогда 
			Год = ?(СтрДлина(М[2]) = 2,2000 + М[2],М[2]);
			Д = Дата(Год,М[1],М[0]);
		ИначеЕсли М.Количество() = 2 Тогда 
			Год = ?(СтрДлина(М[1]) = 2,2000 + М[1],М[1]);
			Д = Дата(Год,М[0],1);
		КонецЕсли;
		
	Исключение
	КонецПопытки; 

	Возврат Д; 

КонецФункции

Функция СтруктураТаблицыПользователейАД()Экспорт
	
	ТаблицаПользователейАД 	= Новый ТаблицаЗначений;
	ТаблицаПользователейАД.Колонки.Добавить("Логин", 		Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("Имя", 			Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("Домен", 		Новый ОписаниеТипов("Строка"));	
	ТаблицаПользователейАД.Колонки.Добавить("Почта", 		Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("Телефон", 		Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("Существует",	Новый ОписаниеТипов("Булево"));
	ТаблицаПользователейАД.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("Организация",  Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("Должность", 	Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("ADsPath", 		Новый ОписаниеТипов("Строка"));
	ТаблицаПользователейАД.Колонки.Добавить("ДатаРождения", Новый ОписаниеТипов("Дата"));
	ТаблицаПользователейАД.Колонки.Добавить("ИдентификаторПользователяИБ", 
		Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаПользователейАД.Колонки.Добавить("Статус", 		Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаПользователейАД;
	
КонецФункции

Функция СтатусУчетнойЗаписи(Знач Значение)Экспорт
	
	// http://www.netvision.com/ad_useraccountcontrol.php.
	// за блокировку пользователя отвечает второй бит атрибута userAccountControl.
	// возможные значения:
	// 512		Enabled Account 					(1000000000).
	// 514		Disabled Account					(1000000010).
	// 544		Enabled, Password Not Required 		(1000100000).
	// 546		Disabled, Password Not Required		(1000100010).
	// 66048	Enabled, Password Doesn't Expire 	(10000001000000000).
	// 66050	Disabled, Password Doesn't Expire 	(10000001000000010).
	// 66080	Enabled, Password Doesn't Expire & Not Required.
	// 66082	Disabled, Password Doesn't Expire & Not Required.
	// 262656	Enabled, Smartcard Required.
	// 262658	Disabled, Smartcard Required.
	// 262688	Enabled, Smartcard Required, Password Not Required.
	// 262690	Disabled, Smartcard Required, Password Not Required.
	// 328192	Enabled, Smartcard Required, Password Doesn't Expire.
	// 328194	Disabled, Smartcard Required, Password Doesn't Expire.
	// 328224	Enabled, Smartcard Required, Password Doesn't Expire & Not Required.
	// 328226	Disabled, Smartcard Required, Password Doesn't Expire & Not Required.
	
	Попытка		
		Значение = Число(Значение);
	Исключение
		Значение = 0;
	КонецПопытки;
	
	Если Значение <= 0 Тогда
		Результат = "00";		
	Иначе
		Значение 	= Цел(Значение);
		Результат 	= "";
		Пока Значение > 0 Цикл
			Результат 	= Строка(Значение % 2) + Результат;
			Значение 	= Цел(Значение / 2);
		КонецЦикла;
	КонецЕсли;
	
	// 0 - активный, 1 - заблокированный.
	Статус = Лев(Прав(Результат, 2), 1);	
	
	Возврат Статус;
	
КонецФункции

Функция ВыполнитьИмпортИзАД(ТаблицаПользователейАД, ПрофильИмпортаИзAD, Интерактивно = Ложь) Экспорт
	
	РезультатТЗ = Новый ТаблицаЗначений;
	РезультатТЗ.Колонки.Добавить("Дата");
	РезультатТЗ.Колонки.Добавить("ВидОперации");
	РезультатТЗ.Колонки.Добавить("ТипОбъекта");
	РезультатТЗ.Колонки.Добавить("Ссылка");
	РезультатТЗ.Колонки.Добавить("Описание");
	РезультатТЗ.Колонки.Добавить("ТекущаяСтрока");
	
	Для Каждого Строка Из ТаблицаПользователейАД Цикл
				
		ЕстьОшибкиВСтроке 		= Ложь;		
		СоответствиеЗаполнения 	= Новый Соответствие;
		СоответствиеЗаполнения.Вставить("ПрофильИмпортаИзAD", ПрофильИмпортаИзAD);
		СоответствиеЗаполнения.Вставить("СтрокаТаблицыПользователейAD", Строка);		
		СоответствиеЗаполнения.Вставить("Результат", РезультатТЗ);
		
		Если ПрофильИмпортаИзAD.ПользователиИзменятьРанееСозданных = Ложь 
			И ЗначениеЗаполнено(Строка.ИдентификаторПользователяИБ) Тогда
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "ДобавлениеИзменение";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Пользователи""";
			СтрокаРезультат.Ссылка			= Строка.Имя;
			СтрокаРезультат.Описание		= 
				СтрШаблон("Изменение пользователя ""%1"" отменено в соответствии с настройками профиля импорта", 
					Строка.Имя);
			СтрокаРезультат.ТекущаяСтрока 	= Строка;			
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		// Обработка организации.
		ОрганизацияСсылка = Справочники.Организации.ПустаяСсылка();
		Если ПрофильИмпортаИзAD.ОрганизацииСоздаватьОрганизации Тогда			
			ОрганизацияСтрока = СокрЛП(Строка.Организация);			
			Если ЗначениеЗаполнено(ОрганизацияСтрока) Тогда
				ОрганизацияСсылка = ИмпортАДНайтиСоздатьОрганизацию(ОрганизацияСтрока, СоответствиеЗаполнения);
			Иначе				
				Если ЗначениеЗаполнено(ПрофильИмпортаИзAD.ОрганизацииОрганизацияПоУмолчанию) Тогда
					ОрганизацияСсылка = ПрофильИмпортаИзAD.ОрганизацииОрганизацияПоУмолчанию;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;	
		ОрганизацияЗаполнения = ОрганизацияСсылка;
		СоответствиеЗаполнения.Вставить("ОрганизацияЗаполнения", ОрганизацияЗаполнения);
		
		// Обработка подразделения.
		ПодразделениеСсылка = Справочники.Подразделения.ПустаяСсылка();
		Если ПрофильИмпортаИзAD.ПодразделенияСоздаватьПодразделения Тогда
			ПодразделениеСтрока = СокрЛП(Строка.Подразделение);
			Если ЗначениеЗаполнено(ПодразделениеСтрока) Тогда
				ПодразделениеСсылка = ИмпортАДНайтиСоздатьПодразделение(ПодразделениеСтрока, СоответствиеЗаполнения);				
			Иначе
				Если ЗначениеЗаполнено(ПрофильИмпортаИзAD.ПодразделенияПодразделениеПоУмолчанию) Тогда
					ПодразделениеСсылка = ПрофильИмпортаИзAD.ПодразделенияПодразделениеПоУмолчанию;
				КонецЕсли;	
			КонецЕсли;			
		КонецЕсли;	
		ПодразделениеЗаполнения = ПодразделениеСсылка;
		СоответствиеЗаполнения.Вставить("ПодразделениеЗаполнения", ПодразделениеЗаполнения);
		
		// Обработка физ.лица.
		ФизЛицоСсылка = Справочники.ФизическиеЛица.ПустаяСсылка();
		Если ПрофильИмпортаИзAD.ФизЛицаСоздаватьФизЛицо Тогда
			ФизЛицоСтрока = СокрЛП(Строка.Имя);
			Если ЗначениеЗаполнено(ФизЛицоСтрока) Тогда
				ФизЛицоСсылка = ИмпортАДНайтиСоздатьФизЛицо(ФизЛицоСтрока, СоответствиеЗаполнения);
			КонецЕсли;	
		КонецЕсли;
		ФизЛицоЗаполнения = ФизЛицоСсылка;
		СоответствиеЗаполнения.Вставить("ФизЛицоЗаполнения", ФизЛицоЗаполнения);
		
		// Обработка должности.
		ДолжностьСсылка = Справочники.Должности.ПустаяСсылка();
		Если ПрофильИмпортаИзAD.СотрудникиСоздаватьСотрудников И ПрофильИмпортаИзAD.СотрудникиСоздаватьДолжности Тогда
			ДолжностьСтрока = СокрЛП(Строка.Должность);
			Если ЗначениеЗаполнено(ДолжностьСтрока) Тогда
				ДолжностьСсылка = ИмпортАДНайтиСоздатьДолжность(ДолжностьСтрока, СоответствиеЗаполнения);
			КонецЕсли;	
		КонецЕсли;	
		ДолжностьЗаполнения = ДолжностьСсылка;
		СоответствиеЗаполнения.Вставить("ДолжностьЗаполнения", ДолжностьЗаполнения);
		
		// Обработка сотрудника.
		СотрудникСсылка = Справочники.Сотрудники.ПустаяСсылка();
		Если ПрофильИмпортаИзAD.СотрудникиСоздаватьСотрудников Тогда
			СотрудникСтрока = СокрЛП(Строка.Имя);
			Если ЗначениеЗаполнено(СотрудникСтрока) Тогда
				СотрудникСсылка = ИмпортАДНайтиСоздатьСотрудника(СотрудникСтрока, СоответствиеЗаполнения);
			КонецЕсли;	
		КонецЕсли; 	
		СотрудникЗаполнения = СотрудникСсылка;
		СоответствиеЗаполнения.Вставить("СотрудникЗаполнения", СотрудникЗаполнения);
		
		// Обработка мест хранения.
		МестоХраненияСсылка = Справочники.МестаХранения.ПустаяСсылка();
		Если ПрофильИмпортаИзAD.МестаХраненияСоздаватьМестаХранения Тогда
			МестоХраненияСтрока = СокрЛП(Строка.Имя);
			Если ЗначениеЗаполнено(МестоХраненияСтрока) Тогда
				МестоХраненияСсылка = ИмпортАДНайтиСоздатьМестоХранения(МестоХраненияСтрока, СоответствиеЗаполнения);
			КонецЕсли;	
		КонецЕсли; 	
		МестоХраненияЗаполнения = МестоХраненияСсылка;
		СоответствиеЗаполнения.Вставить("МестоХраненияЗаполнения", МестоХраненияЗаполнения);
		
		// Обработка пользователей.
		ПользовательСсылка = Справочники.Пользователи.ПустаяСсылка();
		Если ПрофильИмпортаИзAD.ПользователиСоздаватьПользователей Тогда
			ПользовательСтрока = СокрЛП(Строка.Имя);
			Если ЗначениеЗаполнено(ПользовательСтрока) Тогда
				ПользовательСсылка = ИмпортАДНайтиСоздатьПользователя(ПользовательСтрока, СоответствиеЗаполнения, 
					Интерактивно);
			КонецЕсли;
			ПользовательЗаполнения	= ПользовательСсылка;
		КонецЕсли;	
		СоответствиеЗаполнения.Вставить("ПользовательЗаполнения", ПользовательЗаполнения);
		
		Если ЕстьОшибкиВСтроке ИЛИ СоответствиеЗаполнения.Получить("ЕстьОшибкиВСтроке") <> Неопределено Тогда
			Если СоответствиеЗаполнения[РезультатТЗ].Количество() > 0 Тогда			
				ОтборСтрок 	= Новый Структура("ВидОперации, ТекущаяСтрока", "ДобавлениеИзменение", Строка);
				МассивСтрок = СоответствиеЗаполнения[РезультатТЗ].НайтиСтроки(ОтборСтрок);
				Если МассивСтрок.Количество()>0 Тогда
					Для Каждого УдаляемаяСтрока Из МассивСтрок Цикл
						СоответствиеЗаполнения[РезультатТЗ].Удалить(УдаляемаяСтрока);
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеЗаполнения["Результат"];
	
КонецФункции

Функция ИмпортАДНайтиСоздатьОрганизацию(НаименованиеОрганизации, СоответствиеЗаполнения) Экспорт
	
	ОрганизацияСсылка = Справочники.Организации.ПустаяСсылка();	
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И Организации.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеОрганизации);	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОрганизацияСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ПрофильИмпортаИзAD 				= СоответствиеЗаполнения["ПрофильИмпортаИзAD"];
		СтрокаТаблицыПользователейАД 	= СоответствиеЗаполнения["СтрокаТаблицыПользователейAD"];
		Попытка
			ОрганизацияОбъект 						= Справочники.Организации.СоздатьЭлемент();
			ОрганизацияОбъект.Наименование 			= НаименованиеОрганизации;
			ОрганизацияОбъект.ВидКонтрагента 			= Перечисления.ВидКонтрагента.ЮридическоеЛицо;
			Если ЗначениеЗаполнено(ПрофильИмпортаИзAD.ОрганизацииСтавкаНДС) Тогда
				//@skip-warning
				ОрганизацииСтавкаНДС = ПрофильИмпортаИзAD.ОрганизацииСтавкаНДС;
			Иначе
				ОрганизацияСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("18%");
			КонецЕсли;
			ОрганизацияОбъект.СтавкаНДСПоУмолчанию 	= ОрганизацияСтавкаНДС;
			ОрганизацияОбъект.Записать();
			ОрганизацияСсылка 				= ОрганизацияОбъект.Ссылка;			
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "ДобавлениеИзменение";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Организации""";
			СтрокаРезультат.Ссылка			= ОрганизацияОбъект.Ссылка;
			СтрокаРезультат.Описание		= "Создан";
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейАД;
		Исключение			
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "Ошибка";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Организации""";
			СтрокаРезультат.Ссылка			= НаименованиеОрганизации;
			СтрокаРезультат.Описание		= СтрШаблон(НСтр("ru = 'Ошибка при создании организации <%1>: %2'"),
				НаименованиеОрганизации, ОписаниеОшибки());
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейАД;
			СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);			
		КонецПопытки;		
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОрганизацияСсылка;
	
КонецФункции

Функция ИмпортАДНайтиСоздатьПодразделение(НаименованиеПодразделения, СоответствиеЗаполнения)Экспорт
	
	ПодразделениеСсылка = Справочники.Подразделения.ПустаяСсылка();	
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подразделения.Ссылка
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	НЕ Подразделения.ПометкаУдаления
		|	И Подразделения.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеПодразделения);	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПодразделениеСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПодразделениеСсылка) Тогда
		ОрганизацияЗаполнения 			= СоответствиеЗаполнения["ОрганизацияЗаполнения"];
		СтрокаТаблицыПользователейАД 	= СоответствиеЗаполнения["СтрокаТаблицыПользователейAD"];
		Попытка
			ПодразделениеОбъект 			= Справочники.Подразделения.СоздатьЭлемент();
			ПодразделениеОбъект.Наименование= НаименованиеПодразделения;
			ПодразделениеОбъект.Организация	= ОрганизацияЗаполнения;			
			ПодразделениеОбъект.Записать();
			ПодразделениеСсылка 			= ПодразделениеОбъект.Ссылка;			
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "ДобавлениеИзменение";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Подразделения""";
			СтрокаРезультат.Ссылка			= ПодразделениеСсылка.Ссылка;
			СтрокаРезультат.Описание		= "Создан";
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейАД;
		Исключение			
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "Ошибка";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Подразделения""";
			СтрокаРезультат.Ссылка			= НаименованиеПодразделения;
			СтрокаРезультат.Описание		= "Ошибка при создании подразделения """ 
				+ НаименованиеПодразделения + """: "+ ОписаниеОшибки();
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейАД;
			СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);
		КонецПопытки;		
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПодразделениеСсылка;
	
КонецФункции

Функция ИмпортАДНайтиСоздатьФизЛицо(ФизЛицоСтрока, СоответствиеЗаполнения)Экспорт
	
	ФизЛицоСсылка 			 = Справочники.ФизическиеЛица.ПустаяСсылка();
	ЭтоНовыйФизЛицо 		 = Ложь;
	ТребуетсяИзменитьФизЛицо = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	НЕ ФизическиеЛица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ЭтоГруппа
	|	И ФизическиеЛица.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ФизЛицоСтрока);	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ФизЛицоСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	ПрофильИмпортаИзAD 			= СоответствиеЗаполнения["ПрофильИмпортаИзAD"];
	СтрокаТаблицыПользователейAD= СоответствиеЗаполнения["СтрокаТаблицыПользователейAD"];	
	
	Если ЗначениеЗаполнено(ФизЛицоСсылка) Тогда
		Если ПрофильИмпортаИзAD.ФизЛицаЗагружатьДатуРождения 
			И ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.ДатаРождения)
			И ФизЛицоСсылка.ДатаРождения <> СтрокаТаблицыПользователейAD.ДатаРождения Тогда
			ТребуетсяИзменитьФизЛицо = Истина;
		КонецЕсли;	
		Если ПрофильИмпортаИзAD.ФизЛицаЗагружатьФото Тогда
			ТребуетсяИзменитьФизЛицо = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.Почта) Тогда
			СтруктураОтбора = Новый Структура("Вид, АдресЭП", Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица, 
				СтрокаТаблицыПользователейAD.Почта);
			СтрокиEmail 	= ФизЛицоСсылка.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
			Если СтрокиEmail.Количество() = 0 Тогда
				ТребуетсяИзменитьФизЛицо = Истина;
			КонецЕсли;	
		КонецЕсли;	
		Если ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.Телефон) Тогда						
			СтруктураОтбора = Новый Структура("Вид, НомерТелефона", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица,
				СтрокаТаблицыПользователейAD.Телефон);
			СтрокиТелефон 	= ФизЛицоСсылка.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
			Если СтрокиТелефон.Количество() = 0 Тогда
				ТребуетсяИзменитьФизЛицо = Истина;
			КонецЕсли;	
		КонецЕсли;		
	Иначе	
		Попытка
			ФизЛицоОбъект 				= Справочники.ФизическиеЛица.СоздатьЭлемент();
			ФизЛицоОбъект.Наименование 	= ФизЛицоСтрока;
			Если ЗначениеЗаполнено(ПрофильИмпортаИзAD.ФизЛицаГруппаПоУмолчанию) Тогда
				ФизЛицоОбъект.Родитель = ПрофильИмпортаИзAD.ФизЛицаГруппаПоУмолчанию;
			КонецЕсли;	
			ФизЛицоОбъект.Записать();			
			ФизЛицоСсылка 					= ФизЛицоОбъект.Ссылка;
			ЭтоНовыйФизЛицо					= Истина;
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "ДобавлениеИзменение";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Физические лица""";
			СтрокаРезультат.Ссылка			= ФизЛицоОбъект.Ссылка;
			СтрокаРезультат.Описание		= "Создан";
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;			
		Исключение						
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "Ошибка";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Физические лица""";
			СтрокаРезультат.Ссылка			= ФизЛицоСтрока;
			СтрокаРезультат.Описание		= "Ошибка при создании Физ.лица """ + ФизЛицоСтрока + """: " 
				+ ОписаниеОшибки();
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
			СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);
			УстановитьПривилегированныйРежим(Ложь);
			
			Возврат ФизЛицоСсылка;
			
		КонецПопытки;		
	КонецЕсли;
	
	// Физ.лицо создано ранее и изменять не нужно.
	Если Не ЭтоНовыйФизЛицо И НЕ ТребуетсяИзменитьФизЛицо Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ФизЛицоСсылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицоСсылка) Тогда
		Попытка
			ФизЛицоОбъект = ФизЛицоСсылка.ПолучитьОбъект();			
			
			Если ПрофильИмпортаИзAD.ФизЛицаЗагружатьДатуРождения 
				И ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.ДатаРождения) Тогда
				
				ФизЛицоОбъект.ДатаРождения = СтрокаТаблицыПользователейAD.ДатаРождения;
				
			КонецЕсли;
			
			Если ПрофильИмпортаИзAD.ФизЛицаЗагружатьФото Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.ADsPath) Тогда
					ВременныйАдрес = ИмпортАДПолучитьКартинкуФизЛица(СтрокаТаблицыПользователейAD.ADsPath,
						СоответствиеЗаполнения, ФизЛицоСсылка);
					Если ЗначениеЗаполнено(ВременныйАдрес) Тогда
						ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
						ПараметрыФайла.ВладелецФайлов	= ФизЛицоОбъект.Ссылка;
						ФизЛицоОбъект.ФайлКартинки		= РаботаСФайлами.ДобавитьФайл(ПараметрыФайла,ВременныйАдрес);						
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			// Контактная информация.
			Если ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.Почта) 
				ИЛИ ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.Телефон) Тогда				
				Если ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.Почта) Тогда					
					СтрокиEmail 	= ФизЛицоОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", 
						Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица));
					Если СтрокиEmail.Количество() > 0 Тогда
						СтрокаEmail 			= СтрокиEmail[0];
					Иначе
						СтрокаEmail 			= ФизлицоОбъект.КонтактнаяИнформация.Добавить();
						СтрокаEmail.Вид 		= Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица;
					КонецЕсли;
					СтрокаEmail.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					СтрокаEmail.Представление 	= СтрокаТаблицыПользователейAD.Почта;
					СтрокаEmail.АдресЭП 		= СтрокаТаблицыПользователейAD.Почта;						
				КонецЕсли;					
				Если ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.Телефон) Тогда						
					СтрокиТелефон 	= ФизлицоОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", 
						Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица));
					Если СтрокиТелефон.Количество() > 0 Тогда
						СтрокаТелефон 			= СтрокиТелефон[0];
					Иначе
						СтрокаТелефон 			= ФизлицоОбъект.КонтактнаяИнформация.Добавить();
						СтрокаТелефон.Вид 		= Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;
					КонецЕсли;
					СтрокаТелефон.Тип 			= Перечисления.ТипыКонтактнойИнформации.Телефон;
					СтрокаТелефон.Представление = СтрокаТаблицыПользователейAD.Телефон;
					СтрокаТелефон.НомерТелефона = СтрокаТаблицыПользователейAD.Телефон;						
				КонецЕсли;							
			КонецЕсли;			
			ФизЛицоОбъект.Записать();
			ФизЛицоСсылка = ФизЛицоОбъект.Ссылка;
			Если Не ЭтоНовыйФизЛицо Тогда
				СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
				СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
				СтрокаРезультат.ВидОперации		= "ДобавлениеИзменение";
				СтрокаРезультат.ТипОбъекта		= "Справочник ""Физические лица""";
				СтрокаРезультат.Ссылка			= ФизЛицоСсылка;
				СтрокаРезультат.Описание		= "Изменен";
				СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
			КонецЕсли;			
		Исключение			
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "Ошибка";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Физические лица""";
			СтрокаРезультат.Ссылка			= ФизЛицоСтрока;
			СтрокаРезультат.Описание		= "Ошибка при изменении физ.лица """ + ФизЛицоСтрока + """: " 
				+ ОписаниеОшибки();
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
			СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);			
		КонецПопытки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ФизЛицоСсылка;
	
КонецФункции

Функция ИмпортАДПолучитьКартинкуФизЛица(СтрокаАдрес, СоответствиеЗаполнения, ФизЛицоСсылка)Экспорт
	
	ПрофильИмпортаИзAD 			= СоответствиеЗаполнения["ПрофильИмпортаИзAD"];
	СтрокаТаблицыПользователейAD= СоответствиеЗаполнения["СтрокаТаблицыПользователейAD"];
	Если ПрофильИмпортаИзAD.ПодключениеИспользоватьУчетнуюЗапись Тогда
		Попытка
			
			//@skip-warning
			Порт				= ?(ЗначениеЗаполнено(ПрофильИмпортаИзAD.ПодключениеПорт), 
				СокрЛП(ПрофильИмпортаИзAD.ПодключениеПорт), "389");
			//@skip-warning
			КореньДерева		= ?(ЗначениеЗаполнено(ПрофильИмпортаИзAD.ПодключениеКореньДерева), 
				СокрЛП(ПрофильИмпортаИзAD.ПодключениеКореньДерева), "");						
			СтрокаПодключения 	= "Provider=ADSDSOObject;User Id=" + ПрофильИмпортаИзAD.ПодключениеДомен + "\" 
				+ ПрофильИмпортаИзAD.ПодключениеУчетнаяЗапись + ";Password=" + ПрофильИмпортаИзAD.ПодключениеПароль 
				+ ";";			
			conn				= Новый COMОбъект("ADODB.Connection");			
			conn.Open(СтрокаПодключения);			
			
			Query = "SELECT thumbnailPhoto  FROM '" + СтрокаАдрес + "'";
			Records =  Новый COMОбъект("ADODB.recordset");			
			Records = conn.Execute(query);
		Исключение			
			
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "Ошибка";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Физические лица""";
			СтрокаРезультат.Ссылка			= ФизЛицоСсылка;
			СтрокаРезультат.Описание		= "Ошибка подключения при получении изображения """ + ФизЛицоСсылка + """: " 
				+ ОписаниеОшибки();
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
			СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);
			
			Возврат Неопределено;
			
		КонецПопытки;
		
	Иначе	
		Попытка 
			conn = Новый COMОбъект("ADODB.Connection");
			conn.Provider = "ADSDSOObject";
			conn.Open("ADs Provider");			
			Query = "SELECT thumbnailPhoto  FROM '" + СтрокаАдрес + "'";
			Records = conn.Execute(query);			
		Исключение			
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "Ошибка";
		    СтрокаРезультат.ТипОбъекта		= "Справочник ""Физические лица""";
			СтрокаРезультат.Ссылка			= ФизЛицоСсылка;
			СтрокаРезультат.Описание		= "Ошибка подключения при получении изображения """ + ФизЛицоСсылка +""":" 
				+ ОписаниеОшибки();
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
			СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);
			
			Возврат Неопределено;
			
		КонецПопытки;
	КонецЕсли;
	
	Пока НЕ Records.EOF Цикл 
		Если Records.Fields("thumbnailPhoto").Value = Null Тогда            
			Возврат Неопределено;
		Иначе
			Попытка				
				ИмяФайла     = ПолучитьИмяВременногоФайла("jpg");            
				Поток        = Новый COMОбъект("ADODB.Stream");
				Поток.Type   = 1;
				Поток.Mode   = 3;
				Поток.Open();
				Поток.Write(Records.Fields("thumbnailPhoto").Value);
				Поток.SaveToFile(ИмяФайла);
				Файл		 = Новый ДвоичныеДанные(ИмяФайла);
				АдресХЗ 	 = ПоместитьВоВременноеХранилище(Файл, Новый УникальныйИдентификатор); 
				Поток.Close();
				УдалитьФайлы(ИмяФайла);				
				conn.Close();
				conn = Неопределено;
				
				Возврат АдресХЗ;
				
			Исключение				
				СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
				СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
				СтрокаРезультат.ВидОперации		= "Ошибка";
				СтрокаРезультат.ТипОбъекта		= "Справочник ""Физические лица""";
				СтрокаРезультат.Ссылка			= ФизЛицоСсылка;
				СтрокаРезультат.Описание		= "Ошибка при получении изображения """ + ФизЛицоСсылка + """: " 
					+ ОписаниеОшибки();
				СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
				СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);				
				conn.Close();
				conn = Неопределено;
				
				Возврат Неопределено;
				
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			Records.MoveNext();
		Исключение
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "Ошибка";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Физические лица""";
			СтрокаРезультат.Ссылка			= ФизЛицоСсылка;
			СтрокаРезультат.Описание		= "Ошибка при получении изображения """ + ФизЛицоСсылка + """:" 
				+ ОписаниеОшибки();
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
			СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);			
			conn.Close();
			conn = Неопределено;
			
			Возврат Неопределено;
			
		КонецПопытки;	
	КонецЦикла;	
	
КонецФункции

Функция ИмпортАДНайтиСоздатьСотрудника(НаименованиеСотрудника, СоответствиеЗаполнения) Экспорт
	
	СотрудникСсылка 			= Справочники.Сотрудники.ПустаяСсылка();
	ЭтоНовыйСотрудник 			= Ложь;
	ТребуетсяИзменитьСотрудника = Ложь;
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	НЕ Сотрудники.ПометкаУдаления
		|	И НЕ Сотрудники.ЭтоГруппа
		|	И Сотрудники.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеСотрудника);	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СотрудникСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	ПрофильИмпортаИзAD 			= СоответствиеЗаполнения["ПрофильИмпортаИзAD"];
	СтрокаТаблицыПользователейAD= СоответствиеЗаполнения["СтрокаТаблицыПользователейAD"];
	
	Если ЗначениеЗаполнено(СотрудникСсылка) Тогда
		
		Если ЗначениеЗаполнено(СоответствиеЗаполнения["ОрганизацияЗаполнения"])  
			И СотрудникСсылка.Организация <> СоответствиеЗаполнения["ОрганизацияЗаполнения"] Тогда
			ТребуетсяИзменитьСотрудника = Истина;		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СоответствиеЗаполнения["ФизЛицоЗаполнения"]) 
			И СотрудникСсылка.Физлицо <> СоответствиеЗаполнения["ФизЛицоЗаполнения"] Тогда
			ТребуетсяИзменитьСотрудника = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СоответствиеЗаполнения["ДолжностьЗаполнения"]) 
			И СотрудникСсылка.Должность	<> СоответствиеЗаполнения["ДолжностьЗаполнения"] Тогда
			ТребуетсяИзменитьСотрудника = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СоответствиеЗаполнения["ПодразделениеЗаполнения"])
			И СотрудникСсылка.Подразделение <> СоответствиеЗаполнения["ПодразделениеЗаполнения"] Тогда
			ТребуетсяИзменитьСотрудника = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.Почта) Тогда
			СтруктураОтбора = Новый Структура("Вид, АдресЭП", Справочники.ВидыКонтактнойИнформации.EmailСотрудника, 
				СтрокаТаблицыПользователейAD.Почта);
				
			СтрокиEmail 	= СотрудникСсылка.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
			Если СтрокиEmail.Количество() = 0 Тогда
				ТребуетсяИзменитьСотрудника = Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.Телефон) Тогда						
			СтруктураОтбора = Новый Структура("Вид, НомерТелефона", 
				Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника, 
				СтрокаТаблицыПользователейAD.Телефон);
				
			СтрокиТелефон 	= СотрудникСсылка.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
			Если СтрокиТелефон.Количество() = 0 Тогда
				ТребуетсяИзменитьСотрудника = Истина;
			КонецЕсли;	
		КонецЕсли;
		
	Иначе	
		
		Попытка
			
			СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
			СотрудникОбъект.Наименование 	= НаименованиеСотрудника;
			СотрудникОбъект.Актуальность 	= Истина;
			
			Если ЗначениеЗаполнено(ПрофильИмпортаИзAD.СотрудникиГруппаНовых) Тогда
				СотрудникОбъект.Родитель = ПрофильИмпортаИзAD.СотрудникиГруппаНовых;
			КонецЕсли;
			
			СотрудникОбъект.Записать();
			СотрудникСсылка 				= СотрудникОбъект.Ссылка;			
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "ДобавлениеИзменение";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Сотрудники""";			
			СтрокаРезультат.Ссылка			= СотрудникОбъект.Ссылка;
			СтрокаРезультат.Описание		= "Создан";
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
			ЭтоНовыйСотрудник				= Истина;
			
		Исключение
			
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "Ошибка";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Сотрудники""";			
			СтрокаРезультат.Ссылка			= НаименованиеСотрудника;
			СтрокаРезультат.Описание		= "Ошибка при создании сотрудника """
				+ НаименованиеСотрудника + """:" + ОписаниеОшибки();
				
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
			СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);			
			УстановитьПривилегированныйРежим(Ложь);
			
			Возврат СотрудникСсылка;
			
		КонецПопытки;	
	КонецЕсли;
	
	// Сотрудник создан ранее и изменять не нужно.
	Если Не ЭтоНовыйСотрудник И НЕ ТребуетсяИзменитьСотрудника Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат СотрудникСсылка;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СотрудникСсылка) Тогда
		
		Попытка
			
			СотрудникОбъект 				= СотрудникСсылка.ПолучитьОбъект();
			Если ЗначениеЗаполнено(СоответствиеЗаполнения["ОрганизацияЗаполнения"]) Тогда
				СотрудникОбъект.Организация = СоответствиеЗаполнения["ОрганизацияЗаполнения"];
			КонецЕсли;
			Если ЗначениеЗаполнено(СоответствиеЗаполнения["ФизЛицоЗаполнения"]) Тогда
				СотрудникОбъект.Физлицо		= СоответствиеЗаполнения["ФизЛицоЗаполнения"];
			КонецЕсли;
			Если ЗначениеЗаполнено(СоответствиеЗаполнения["ДолжностьЗаполнения"]) Тогда
				СотрудникОбъект.Должность	= СоответствиеЗаполнения["ДолжностьЗаполнения"];
			КонецЕсли;	
			Если ЗначениеЗаполнено(СоответствиеЗаполнения["ПодразделениеЗаполнения"]) Тогда
				СотрудникОбъект.Подразделение= СоответствиеЗаполнения["ПодразделениеЗаполнения"];
			КонецЕсли;
			
			// Контактная информация.
			Если ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.Почта) 
				ИЛИ	ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.Телефон) Тогда				
				
				Если ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.Почта) Тогда					
					СтрокиEmail 	= СотрудникОбъект.КонтактнаяИнформация.НайтиСтроки(
						Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.EmailСотрудника));
					
					Если СтрокиEmail.Количество() > 0 Тогда
						СтрокаEmail 			= СтрокиEmail[0];
					Иначе
						СтрокаEmail 			= СотрудникОбъект.КонтактнаяИнформация.Добавить();
						СтрокаEmail.Вид 		= Справочники.ВидыКонтактнойИнформации.EmailСотрудника;
					КонецЕсли;
					
					СтрокаEmail.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					СтрокаEmail.Представление 	= СтрокаТаблицыПользователейAD.Почта;
					СтрокаEmail.АдресЭП 		= СтрокаТаблицыПользователейAD.Почта;					
				КонецЕсли;					
				
				Если ЗначениеЗаполнено(СтрокаТаблицыПользователейAD.Телефон) Тогда						
					СтрокиТелефон 	= СотрудникОбъект.КонтактнаяИнформация.НайтиСтроки(
						Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника));
						
					Если СтрокиТелефон.Количество() > 0 Тогда
						СтрокаТелефон 			= СтрокиТелефон[0];
					Иначе
						СтрокаТелефон 			= СотрудникОбъект.КонтактнаяИнформация.Добавить();
						СтрокаТелефон.Вид 		= Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника;
					КонецЕсли;
					
					СтрокаТелефон.Тип 			= Перечисления.ТипыКонтактнойИнформации.Телефон;
					СтрокаТелефон.Представление = СтрокаТаблицыПользователейAD.Телефон;
					СтрокаТелефон.НомерТелефона = СтрокаТаблицыПользователейAD.Телефон;					
				КонецЕсли;
				
			КонецЕсли;	
			
			СотрудникОбъект.Записать();
			СотрудникСсылка 				= СотрудникОбъект.Ссылка;
			Если Не ЭтоНовыйСотрудник Тогда
				СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
				СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
				СтрокаРезультат.ВидОперации		= "ДобавлениеИзменение";
				СтрокаРезультат.ТипОбъекта		= "Справочник ""Сотрудники""";			
				СтрокаРезультат.Ссылка			= СотрудникОбъект.Ссылка;
				СтрокаРезультат.Описание		= "Изменен";
				СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
			КонецЕсли;
			
		Исключение			
			
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "Ошибка";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Сотрудники""";			
			СтрокаРезультат.Ссылка			= НаименованиеСотрудника;
			СтрокаРезультат.Описание		= "Ошибка при изменении сотрудника """ 
				+ НаименованиеСотрудника + """: " + ОписаниеОшибки();
				
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
			СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);
			УстановитьПривилегированныйРежим(Ложь);
			
			Возврат СотрудникСсылка;
			
		КонецПопытки;	
	КонецЕсли;	
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СотрудникСсылка;
	
КонецФункции

Функция ИмпортАДНайтиСоздатьДолжность(НаименованиеДолжности, СоответствиеЗаполнения)Экспорт
	
	ДолжностьСсылка = Справочники.Должности.ПустаяСсылка();
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Должности.Ссылка
		|ИЗ
		|	Справочник.Должности КАК Должности
		|ГДЕ
		|	НЕ Должности.ПометкаУдаления
		|	И Должности.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеДолжности);	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи  = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДолжностьСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	//@skip-warning
	ПрофильИмпортаИзAD 			= СоответствиеЗаполнения["ПрофильИмпортаИзAD"];
	СтрокаТаблицыПользователейAD= СоответствиеЗаполнения["СтрокаТаблицыПользователейAD"];
	
	Если Не ЗначениеЗаполнено(ДолжностьСсылка) Тогда
		Попытка
			ДолжностьОбъект 				= Справочники.Должности.СоздатьЭлемент();
			ДолжностьОбъект.Наименование	= НаименованиеДолжности;
			ДолжностьОбъект.Записать();
			ДолжностьСсылка					= ДолжностьОбъект.Ссылка;
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "ДобавлениеИзменение";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Должности""";			
			СтрокаРезультат.Ссылка			= ДолжностьОбъект.Ссылка;
			СтрокаРезультат.Описание		= "Создан";
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
		Исключение
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "Ошибка";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Должности""";			
			СтрокаРезультат.Ссылка			= НаименованиеДолжности;
			СтрокаРезультат.Описание		= "Ошибка при создании должности """ + НаименованиеДолжности + """:" 
				+ ОписаниеОшибки();
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейAD;
			СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);
		КонецПопытки;	
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДолжностьСсылка;
	
КонецФункции	

Функция ИмпортАДНайтиСоздатьМестоХранения(МестоХраненияСтрока, СоответствиеЗаполнения)Экспорт
	
	МестоХраненияСсылка 			= Справочники.МестаХранения.ПустаяСсылка();
	ЭтоНовыйМестоХранения 			= Ложь;
	ТребуетсяИзменитьМестоХранения 	= Ложь;
	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МестаХранения.Ссылка
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	НЕ МестаХранения.ПометкаУдаления
		|	И МестаХранения.Наименование = &Наименование";
		
	Запрос.УстановитьПараметр("Наименование", МестоХраненияСтрока);
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		МестоХраненияСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	ПрофильИмпортаИзAD 	= СоответствиеЗаполнения["ПрофильИмпортаИзAD"];
	СтрокаТаблицыАД		= СоответствиеЗаполнения["СтрокаТаблицыПользователейAD"];

	Если ЗначениеЗаполнено(МестоХраненияСсылка) Тогда
		Если ЗначениеЗаполнено(ПрофильИмпортаИзAD.МестаХраненияМестоположениеПоУмолчанию)
			И МестоХраненияСсылка.Местоположение <> ПрофильИмпортаИзAD.МестаХраненияМестоположениеПоУмолчанию Тогда
			ТребуетсяИзменитьМестоХранения = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПрофильИмпортаИзAD.МестаХраненияВерхнееМестоХранения)
			И МестоХраненияСсылка.Родитель <> ПрофильИмпортаИзAD.МестаХраненияВерхнееМестоХранения Тогда
			ТребуетсяИзменитьМестоХранения = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СоответствиеЗаполнения["ОрганизацияЗаполнения"]) 
			И МестоХраненияСсылка.Организация <> СоответствиеЗаполнения["ОрганизацияЗаполнения"] Тогда
			ТребуетсяИзменитьМестоХранения = Истина;
		КонецЕсли;	
		Если ЗначениеЗаполнено(СоответствиеЗаполнения["ПодразделениеЗаполнения"]) 
			И МестоХраненияСсылка.Подразделение <> СоответствиеЗаполнения["ПодразделениеЗаполнения"] Тогда
			ТребуетсяИзменитьМестоХранения = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицыАД.Логин) 
			И МестоХраненияСсылка.СетевоеИмя <> СтрокаТаблицыАД.Логин Тогда
			ТребуетсяИзменитьМестоХранения = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицыАД.Логин) 
			И МестоХраненияСсылка.СетевоеИмя <> СтрокаТаблицыАД.Логин Тогда
			ТребуетсяИзменитьМестоХранения = Истина;
		КонецЕсли;
		СетевойПользователь = "\\" + СтрокаТаблицыАД.Домен + "\" + СтрокаТаблицыАД.Логин;
		Если МестоХраненияСсылка.СетевойПользователь <> СетевойПользователь Тогда
			ТребуетсяИзменитьМестоХранения = Истина;
		КонецЕсли;		
	Иначе	
		Попытка
			МестоХраненияОбъект 					= Справочники.МестаХранения.СоздатьЭлемент();
			МестоХраненияОбъект.Наименование 		= МестоХраненияСтрока;
			МестоХраненияОбъект.ВидМестаХранения 	= Справочники.ВидыМестХранения.РабочееМесто;
			МестоХраненияОбъект.Записать();
			МестоХраненияСсылка 					= МестоХраненияОбъект.Ссылка;
			ЭтоНовыйМестоХранения					= Истина;
			СтрокаРезультат 						= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 					= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации				= "ДобавлениеИзменение";
			СтрокаРезультат.ТипОбъекта				= "Справочник ""Места хранения""";
			СтрокаРезультат.Ссылка					= МестоХраненияСсылка;
			СтрокаРезультат.Описание				= "Создан";
			СтрокаРезультат.ТекущаяСтрока 			= СтрокаТаблицыАД;
		Исключение
			СтрокаРезультат 						= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 					= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации				= "Ошибка";
			СтрокаРезультат.ТипОбъекта				= "Справочник ""Места хранения""";
			СтрокаРезультат.Ссылка					= МестоХраненияСтрока;
			СтрокаРезультат.Описание				= "Ошибка при создании места хранения """ 
				+ МестоХраненияСтрока + """: " + ОписаниеОшибки();
			СтрокаРезультат.ТекущаяСтрока 			= СтрокаТаблицыАД;
			СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);
			
			Возврат МестоХраненияСсылка;
			
		КонецПопытки;	
	КонецЕсли;
	
	// Место хранения создано ранее и изменять не нужно.
	Если Не ЭтоНовыйМестоХранения И НЕ ТребуетсяИзменитьМестоХранения Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат МестоХраненияСсылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МестоХраненияСсылка) Тогда
		Попытка
			МестоХраненияОбъект = МестоХраненияСсылка.ПолучитьОбъект();			
			Если ЗначениеЗаполнено(ПрофильИмпортаИзAD.МестаХраненияМестоположениеПоУмолчанию) Тогда
				МестоХраненияОбъект.Местоположение = ПрофильИмпортаИзAD.МестаХраненияМестоположениеПоУмолчанию;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПрофильИмпортаИзAD.МестаХраненияВерхнееМестоХранения) Тогда
				МестоХраненияОбъект.Родитель = ПрофильИмпортаИзAD.МестаХраненияВерхнееМестоХранения;
			КонецЕсли;
			МестоХраненияОбъект.Картинка 		 	= Новый ХранилищеЗначения(БиблиотекаКартинок.вмхРабочееМесто);
			МестоХраненияОбъект.НавСсылка 		 	= ПолучитьНавигационнуюСсылку(МестоХраненияОбъект, "Картинка");			
			МестоХраненияОбъект.Организация		 	= СоответствиеЗаполнения["ОрганизацияЗаполнения"];
			МестоХраненияОбъект.Подразделение	 	= СоответствиеЗаполнения["ПодразделениеЗаполнения"];
			МестоХраненияОбъект.СетевоеИмя			= СтрокаТаблицыАД.Логин;				
			МестоХраненияОбъект.СетевойПользователь = "\\" + СтрокаТаблицыАД.Домен + "\" + СтрокаТаблицыАД.Логин;
			МестоХраненияОбъект.Записать();
			МестоХраненияСсылка 					= МестоХраненияОбъект.Ссылка;
			Если Не ЭтоНовыйМестоХранения Тогда
				СтрокаРезультат 					= СоответствиеЗаполнения["Результат"].Добавить();
				СтрокаРезультат.Дата 				= ТекущаяДатаСеанса();
				СтрокаРезультат.ВидОперации			= "ДобавлениеИзменение";
				СтрокаРезультат.ТипОбъекта			= "Справочник ""Места хранения""";
				СтрокаРезультат.Ссылка				= МестоХраненияСсылка;
				СтрокаРезультат.Описание			= "Изменен";
				СтрокаРезультат.ТекущаяСтрока 		= СтрокаТаблицыАД;
			КонецЕсли;	
		Исключение			
			СтрокаРезультат 						= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 					= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации				= "Ошибка";
			СтрокаРезультат.ТипОбъекта				= "Справочник ""Места хранения""";
			СтрокаРезультат.Ссылка					= МестоХраненияСтрока;
			СтрокаРезультат.Описание				= "Ошибка при изменении места хранения """
				+ МестоХраненияСтрока + """: " + ОписаниеОшибки();
			СтрокаРезультат.ТекущаяСтрока 			= СтрокаТаблицыАД;
			СоответствиеЗаполнения.Вставить("ЕстьОшибкиВстроке", Истина);
			
			Возврат МестоХраненияСсылка;
			
		КонецПопытки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МестоХраненияСсылка;
	
КонецФункции	

Функция ИмпортАДНайтиСоздатьПользователя(ПользовательСтрока, СоответствиеЗаполнения, Интерактивно = Ложь) Экспорт
	
	ПользовательСсылка 	 = Справочники.Пользователи.ПустаяСсылка();
	ЭтоНовыйПользователь = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	СтрокаТаблицыПользователейАД = СоответствиеЗаполнения["СтрокаТаблицыПользователейAD"];
	ПрофильИмпортаИзАД			 = СоответствиеЗаполнения["ПрофильИмпортаИзAD"];
	
	Если Интерактивно = Истина Тогда
		
		АккаунтОС = "\\" + СтрокаТаблицыПользователейАД.Домен + "\" + СтрокаТаблицыПользователейАД.Логин;
		
	Иначе		
		
		Если Не ПустаяСтрока(ПрофильИмпортаИзАД.ПользователиИмяДомена) Тогда
			АккаунтОС = "\\" + ПрофильИмпортаИзАД.ПользователиИмяДомена + "\" + СтрокаТаблицыПользователейАД.Логин;
		Иначе
			АккаунтОС = "\\" + СтрокаТаблицыПользователейАД.Домен + "\" + СтрокаТаблицыПользователейАД.Логин;
		КонецЕсли;
		
	КонецЕсли;	
					
	Пользователь1С 	= НайтиПользователя1С(СтрокаТаблицыПользователейАД.ИдентификаторПользователяИБ);
	
	// Блокировка пользователя.	
	Попытка
		Если ЗначениеЗаполнено(Пользователь1С) 
			И ПрофильИмпортаИзАД.ПользователиИзменятьРанееСозданных
			И ПрофильИмпортаИзАД.ПользователиБлокироватьПользователя 
			И СтрокаТаблицыПользователейАД.Статус = "1" Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
					Пользователь1С.ИдентификаторПользователяИБ);
			Если ПользовательИБ <> Неопределено Тогда
				Если ПользовательИБ.АутентификацияОС 
					ИЛИ ПользовательИБ.АутентификацияСтандартная 
					ИЛИ ПользовательИБ.ПоказыватьВСпискеВыбора Тогда
					
					ПользовательИБ.АутентификацияОС 		 = Ложь;
					ПользовательИБ.АутентификацияСтандартная = Ложь;
					ПользовательИБ.ПоказыватьВСпискеВыбора 	 = Ложь;
					ПользовательИБ.Записать();
					Пользователь1СОбъект 					 = Пользователь1С.ПолучитьОбъект();
					Пользователь1СОбъект.Недействителен 	 = Истина;
					Пользователь1СОбъект.Записать();
					
					СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
					СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
					СтрокаРезультат.ВидОперации		= "ДобавлениеИзменение";
					СтрокаРезультат.ТипОбъекта		= "Справочник ""Пользователи""";
					СтрокаРезультат.Ссылка			= Пользователь1СОбъект.Ссылка;
					СтрокаРезультат.Описание		= "Установлен признак ""недействителен""";
					СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейАД;
					Возврат Пользователь1С.Ссылка;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		 
		
	Исключение
		
		СтрокаРезультат 			= СоответствиеЗаполнения["Результат"].Добавить();
		СтрокаРезультат.Дата 		= ТекущаяДатаСеанса();
		СтрокаРезультат.ВидОперации	= "Ошибка";
		СтрокаРезультат.ТипОбъекта	= "Справочник ""Пользователи""";
		СтрокаРезультат.Ссылка		= Пользователь1С.Ссылка;
		СтрокаРезультат.Описание	= "Ошибка при установке признака ""недействителен"" пользователю """ 
			+ Пользователь1С.Ссылка + """: " + ОписаниеОшибки();
		СтрокаРезультат.ТекущаяСтрока = СтрокаТаблицыПользователейАД;
		
		Возврат Пользователь1С.Ссылка;
		
	КонецПопытки;
	
	Попытка
		
		Если ЗначениеЗаполнено(Пользователь1С) Тогда
			ПользовательОбъект 		= Пользователь1С.ПолучитьОбъект();
			ЭтоНовыйПользователь	= Ложь;
		Иначе
			ПользовательОбъект 		= Справочники.Пользователи.СоздатьЭлемент();
			ЭтоНовыйПользователь	= Истина;
		КонецЕсли;
		
		ПользовательОбъект.Наименование = СтрокаТаблицыПользователейАД.Имя;		
		
		// Контактная информация пользователя.
		Если ЗначениеЗаполнено(СтрокаТаблицыПользователейАД.Почта) Тогда
			СтрокиEmail = ПользовательОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", 
				Справочники.ВидыКонтактнойИнформации.EmailПользователя));
			Если СтрокиEmail.Количество() > 0 Тогда
				СтрокаEmail 	= СтрокиEmail[0];
			Иначе
				СтрокаEmail 	= ПользовательОбъект.КонтактнаяИнформация.Добавить();
				СтрокаEmail.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
			КонецЕсли;
			СтрокаEmail.Тип 		  = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтрокаEmail.Представление = СтрокаТаблицыПользователейАД.Почта;
			СтрокаEmail.АдресЭП 	  = СтрокаТаблицыПользователейАД.Почта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыПользователейАД.Телефон) Тогда
			СтрокиТелефон = ПользовательОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", 
				Справочники.ВидыКонтактнойИнформации.ТелефонПользователя));
			Если СтрокиТелефон.Количество() > 0 Тогда
				СтрокаТелефон 	  = СтрокиТелефон[0];
			Иначе
				СтрокаТелефон 	  = ПользовательОбъект.КонтактнаяИнформация.Добавить();
				СтрокаТелефон.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
			КонецЕсли;
			СтрокаТелефон.Тип 			= Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтрокаТелефон.Представление = СтрокаТаблицыПользователейАД.Телефон;
			СтрокаТелефон.НомерТелефона = СтрокаТаблицыПользователейАД.Телефон;
		КонецЕсли;				
		
		// Описание пользователя БД.
		Если ЭтоНовыйПользователь = Истина Тогда
			
			ОписаниеПользователяИБ 							= Пользователи.НовоеОписаниеПользователяИБ();	
			ОписаниеПользователяИБ.Имя						= СтрокаТаблицыПользователейАД.Логин;
			ОписаниеПользователяИБ.ПолноеИмя				= СтрокаТаблицыПользователейАД.Имя;
			ОписаниеПользователяИБ.АутентификацияСтандартная= ПрофильИмпортаИзАД.ПользователиАутентификация1С;
			ОписаниеПользователяИБ.АутентификацияOpenID		= Ложь;
			ОписаниеПользователяИБ.АутентификацияОС			= НЕ ПрофильИмпортаИзАД.ПользователиАутентификация1С;
			ОписаниеПользователяИБ.ПользовательОС			= АккаунтОС;
			ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора	= ПрофильИмпортаИзАД.ПользователиПоказыватьВСпискеВыбора;
			ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль	= Истина;
			ОписаниеПользователяИБ.Язык						= ПрофильИмпортаИзАД.ПользователиЯзык;
			ОписаниеПользователяИБ.РежимЗапуска				= ПрофильИмпортаИзАД.ПользователиРежимЗапуска;		
			ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", 
				ПрофильИмпортаИзАД.ПользователиВходВПрограммуРазрешен);
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		
			ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);		
			ПользовательОбъект.Недействителен = Ложь;
		
			ПользовательОбъект.Записать();
			ПользовательСсылка 				= ПользовательОбъект.Ссылка;
			СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
			СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
			СтрокаРезультат.ВидОперации		= "ДобавлениеИзменение";
			СтрокаРезультат.ТипОбъекта		= "Справочник ""Пользователи""";
			СтрокаРезультат.Ссылка			= ПользовательСсылка;
			СтрокаРезультат.Описание		= ?(ЭтоНовыйПользователь, "Создан", "Изменен");
			СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейАД;
		
			// Группа новых пользователей.
			Если ЗначениеЗаполнено(ПрофильИмпортаИзАД.ПользователиГруппаПоУмолчанию) Тогда
				ГруппаОбъект 				 = ПрофильИмпортаИзАД.ПользователиГруппаПоУмолчанию.ПолучитьОбъект();
				НовыйЧленГруппы 			 = ГруппаОбъект.Состав.Добавить();
				НовыйЧленГруппы.Пользователь = ПользовательСсылка;
				ГруппаОбъект.Записать();
			КонецЕсли;
			
			ПользовательОбъект 			 	 = ПользовательСсылка.ПолучитьОбъект();
			
		КонецЕсли;
		
		// Реквизиты пользователя.
		Если ПрофильИмпортаИзАД.ПодразделенияСоздаватьПодразделения = Истина Тогда 
			ПользовательОбъект.Подразделение = СоответствиеЗаполнения["ПодразделениеЗаполнения"];
		КонецЕсли;
		
		Если ПрофильИмпортаИзАД.ФизЛицаСоздаватьФизЛицо = Истина Тогда
			ПользовательОбъект.ФизическоеЛицо= СоответствиеЗаполнения["ФизЛицоЗаполнения"];
		КонецЕсли;
		
		Если ПрофильИмпортаИзАД.СотрудникиСоздаватьСотрудников = Истина Тогда
			ПользовательОбъект.Сотрудник 	 = СоответствиеЗаполнения["СотрудникЗаполнения"];
		КонецЕсли;	
		
		ПользовательОбъект.Записать();
		
		ПользовательСсылка = ПользовательОбъект.Ссылка;
		
		// Группы доступа пользователя.
		Если ЭтоНовыйПользователь = Истина
			ИЛИ (ПрофильИмпортаИзАД.ПользователиИзменятьРанееСозданных = Истина 
					И ПрофильИмпортаИзАД.ПользователиПерезаписыватьПраваПользователей = Истина) Тогда
		
			Для Каждого СтрокаТЧ Из ПрофильИмпортаИзАД.ГруппыДоступа Цикл
				ОтборПользователь = Новый Структура;
				ОтборПользователь.Вставить("Пользователь", ПользовательСсылка);
				МассивСтрок = СтрокаТЧ.ГруппаДоступа.Пользователи.НайтиСтроки(ОтборПользователь);
				Если МассивСтрок.Количество() = 0 Тогда
					ГруппаДоступаОбъект = СтрокаТЧ.ГруппаДоступа.ПолучитьОбъект();
					ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = ПользовательСсылка;
					ГруппаДоступаОбъект.Записать();
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;

	Исключение
		СтрокаРезультат 				= СоответствиеЗаполнения["Результат"].Добавить();
		СтрокаРезультат.Дата 			= ТекущаяДатаСеанса();
		СтрокаРезультат.ВидОперации		= "Ошибка";
		СтрокаРезультат.ТипОбъекта		= "Справочник ""Пользователи""";
		СтрокаРезультат.Ссылка			= СтрокаТаблицыПользователейАД.Имя;
		СтрокаРезультат.Описание		= "Ошибка при добавлении/изменении пользователя """ 
			+ СтрокаТаблицыПользователейАД.Имя + """: " + ОписаниеОшибки();
		СтрокаРезультат.ТекущаяСтрока 	= СтрокаТаблицыПользователейАД;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПользовательСсылка;
	
КонецФункции

Функция НайтиПользователя1С(ИдентификаторПользователяИБ)Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	
КонецФункции

// Процедура создана на базе типовой процедуры ЗаписатьИзмененияНаСервере модуля общей формы ПраваДоступаУпрощенно.
Процедура ОбновитьПраваПользователя(Пользователь, ПрофилиПользователя) Экспорт
	
	// Получение списка изменений.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Профили", ПрофилиПользователя);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Профили.Профиль КАК Ссылка,
	|	Профили.Пометка
	|ПОМЕСТИТЬ Профили
	|ИЗ
	|	&Профили КАК Профили
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Профили.Ссылка,
	|	ЕСТЬNULL(ГруппыДоступа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПерсональнаяГруппаДоступа,
	|	ВЫБОР
	|		КОГДА ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пометка
	|ПОМЕСТИТЬ ТекущиеПрофили
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
	|			И (ГруппыДоступа.Пользователь = &Пользователь
	|				ИЛИ Профили.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
	|			И (ГруппыДоступаПользователи.Пользователь = &Пользователь)
	|ГДЕ
	|	НЕ Профили.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ГруппыДоступаЗначенияДоступа.ВидДоступа,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа
	|ПОМЕСТИТЬ ТекущиеЗначенияДоступа
	|ИЗ
	|	ТекущиеПрофили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаЗначенияДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиИзмененныхГрупп.Профиль
	|ПОМЕСТИТЬ ПрофилиИзмененныхГрупп
	|ИЗ
	|	(ВЫБРАТЬ
	|		Профили.Ссылка КАК Профиль
	|	ИЗ
	|		Профили КАК Профили
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|			ПО Профили.Ссылка = ТекущиеПрофили.Ссылка
	|	ГДЕ
	|		Профили.Пометка <> ТекущиеПрофили.Пометка) КАК ПрофилиИзмененныхГрупп
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	СправочникПрофили.Наименование КАК ПрофильНаименование,
	|	Профили.Пометка КАК Исправить,
	|	ТекущиеПрофили.ПерсональнаяГруппаДоступа
	|ИЗ
	|	ПрофилиИзмененныхГрупп КАК ПрофилиИзмененныхГрупп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Профили КАК Профили
	|		ПО ПрофилиИзмененныхГрупп.Профиль = Профили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|		ПО ПрофилиИзмененныхГрупп.Профиль = ТекущиеПрофили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК СправочникПрофили
	|		ПО (СправочникПрофили.Ссылка = ПрофилиИзмененныхГрупп.Профиль)";
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
				ЗаблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
				ГруппаДоступаОбъект = Выборка.ПерсональнаяГруппаДоступа.ПолучитьОбъект();
			Иначе
				// Создание персональной группы доступа.
				ГруппаДоступаОбъект = Справочники.ГруппыДоступа.СоздатьЭлемент();
				ГруппаДоступаОбъект.Родитель     = Справочники.ГруппыДоступа.РодительПерсональныхГруппДоступа();
				ГруппаДоступаОбъект.Наименование = Выборка.ПрофильНаименование;
				ГруппаДоступаОбъект.Пользователь = Пользователь;
				ГруппаДоступаОбъект.Профиль      = Выборка.Профиль;
			КонецЕсли;
			
			Если Выборка.Профиль = Справочники.ПрофилиГруппДоступа.Администратор Тогда
				
				Если Выборка.Исправить Тогда
					Если ГруппаДоступаОбъект.Пользователи.Найти(
							Пользователь, "Пользователь") = Неопределено Тогда
						
						ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
					КонецЕсли;
				Иначе
					ОписаниеПользователя =  ГруппаДоступаОбъект.Пользователи.Найти(
						Пользователь, "Пользователь");
					
					Если ОписаниеПользователя <> Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Удалить(ОписаниеПользователя);
						
						Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
							// Проверка пустого списка пользователей ИБ в группе доступа Администраторы.
							НайденПользовательИБ = Ложь;
							Для Каждого ОписаниеПользователя Из ГруппаДоступаОбъект.Пользователи Цикл
								Если ЗначениеЗаполнено(ОписаниеПользователя.Пользователь)
								   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
								     	ОписаниеПользователя.Пользователь.ИдентификаторПользователяИБ)
								     	<> Неопределено Тогда
									
									НайденПользовательИБ = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если НЕ НайденПользовательИБ Тогда
								ВызватьИсключение
									НСтр("ru = 'Профиль Администратор должен быть хотя бы у одного пользователя,
									           |которому разрешен доступ к информационной базе.'");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ГруппаДоступаОбъект.Пользователи.Очистить();
				Если Выборка.Исправить Тогда
					ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
				КонецЕсли;
				
			КонецЕсли;
			ГруппаДоступаОбъект.Записать();
			
			Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
				РазблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВызватьИсключение(СтрШаблон(НСтр("ru = 'Ошибка про создании/обновлении прав пользователя %1:
                                          |%2'"), Пользователь, ОписаниеОшибки()));
	КонецПопытки;
	
КонецПроцедуры
 
#КонецОбласти

#Область РегламентныеЗадания

// Регламентое задание по загрузке сотрудников, мест хранения из Active Directory (AD).
//
// Параметры:
//	Нет.
//
Процедура СозданиеОбъектовAD() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СозданиеОбъектовAD);
	ВыполнитьИмпортИзАДРегламентнымЗаданием();
	
КонецПроцедуры // СозданиеОбъектовAD

// Выполняет загрузку сотрудников из других конфигураций.
//
// Параметры:
//	Нет.
//
Процедура ЗагрузкаСотрудников() Экспорт
	
	// Не нужно загружать сотрудников.
	Если НЕ Константы.ИспользоватьЗагрузкуСотрудников.Получить() Тогда
		Возврат;		
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаСотрудников);		
	
	ПрограммаДляЗагрузкиСотрудников = Константы.ПрограммаДляЗагрузкиСотрудников.Получить();
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	// Если ЗУП 2.5.
	Если ПрограммаДляЗагрузкиСотрудников = 
		Перечисления.ПрограммаДляЗагрузкиСотрудников.ЗарплатаИУправлениеПерсоналом25 Тогда
		
		ИмяМакета = "ЗагрузкаСотрудниковЗУП_2_5";		

	ИначеЕсли ПрограммаДляЗагрузкиСотрудников = 
		Перечисления.ПрограммаДляЗагрузкиСотрудников.ЗарплатаИУправлениеПерсоналом31 Тогда 	
		
		ИмяМакета = "ЗагрузкаСотрудниковЗУП_3_1";
		
	ИначеЕсли ПрограммаДляЗагрузкиСотрудников = 
		Перечисления.ПрограммаДляЗагрузкиСотрудников.БухгалтерияПредприятия30 Тогда
		
		ИмяМакета = "ЗагрузкаСотрудниковБП_3_0";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ИмяФайлаПравил = КаталогВременныхФайлов + ИмяМакета + ".xml";
	ИмяФайлаОбмена = КаталогВременныхФайлов + ИмяМакета + "_данные.xml";
	
	СтрокаЗагрузкиИзВнешнейКонфигурации = "";
	Если Константы.ЗагрузкаСотрудниковНаходитсяНаСервере.Получить() Тогда
		// Серверная.
		СтрокаЗагрузкиИзВнешнейКонфигурации = "Srvr=""" 
			+ СокрЛП(Константы.ЗагрузкаСотрудниковСервер.Получить()) 
			+ """;Ref=""" + СокрЛП(Константы.ЗагрузкаСотрудниковИмяИБ.Получить()) + """;";
	Иначе
		// Файловая.
		СтрокаЗагрузкиИзВнешнейКонфигурации = "File=""" + СокрЛП(Константы.ЗагрузкаСотрудниковКаталог.Получить()) 
			+ """;";
	КонецЕсли;
	СтрокаЗагрузкиИзВнешнейКонфигурации = СтрокаЗагрузкиИзВнешнейКонфигурации 
		+ "Usr=""" + СокрЛП(Константы.ЗагрузкаСотрудниковПользователь.Получить()) 
		+ """; Pwd=""" + СокрЛП(Константы.ЗагрузкаСотрудниковПароль.Получить()) + """;";
	
	СтрокаИмяСобытия = НСтр("ru = 'Загрузка сотрудников из типовой конфигурации 1С'");
	ЗаписьЖурналаРегистрации(СтрокаИмяСобытия, УровеньЖурналаРегистрации.Информация, , , 
		НСтр("ru = 'Начало загрузки'"));
	
	Попытка
		cntr = Новый COMObject(ИмяCOMСоединителя());
		//@skip-warning
		База1С = cntr.Connect(СтрокаЗагрузкиИзВнешнейКонфигурации);
	Исключение
		// запись в журнал регистрации об ошибке.
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(СтрокаИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка, , ,				
			"Описание='" + Инфо.Описание + "'" + Символы.ПС +
			"ИмяМодуля='" + Инфо.ИмяМодуля + "'" + Символы.ПС +
			"НомерСтроки=" + Инфо.НомерСтроки + Символы.ПС +
			"ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
		Возврат;
	КонецПопытки;
	
	// Сохраняем правила обмена на диск.
	Макет = ПолучитьОбщийМакет(ИмяМакета);
	Макет.Записать(ИмяФайлаПравил);
		
	// Запускаем выгрузку на сервере.
	Обработка 						= cntr.Обработки.УниверсальныйОбменДаннымиXML.Создать();
	Обработка.РежимОбмена 			= "Выгрузка";
	Обработка.ИмяФайлаПравилОбмена 	= ИмяФайлаПравил;
	Обработка.ИмяФайлаОбмена 		= ИмяФайлаОбмена;
	Обработка.ЗагрузитьПравилаОбмена();
	Попытка
		Обработка.ВыполнитьВыгрузку();
	Исключение
		ЗаписьЖурналаРегистрации("ЗагрузкаСотрудников", УровеньЖурналаРегистрации.Информация,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;		
	
	cntr.ЗавершитьРаботуСистемы(Ложь);		
	
	// Запускаем загрузку на сервере.
	Обработка 														= Обработки.УниверсальныйОбменДаннымиXML.Создать();
	Обработка.РежимОбмена 											= "Загрузка";
	Обработка.ИмяФайлаОбмена 										= ИмяФайлаОбмена;
	Обработка.ЗагружатьДанныеВРежимеОбмена 							= Истина;
	Обработка.ЗаписыватьРегистрыНаборамиЗаписей 					= Истина;
	Обработка.ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты 	= Истина;
	Попытка
		Обработка.ВыполнитьЗагрузку();
	Исключение
		ЗаписьЖурналаРегистрации("ЗагрузкаСотрудников", УровеньЖурналаРегистрации.Информация,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	УдалитьФайлы(КаталогВременныхФайлов, ИмяФайлаОбмена);
	УдалитьФайлы(КаталогВременныхФайлов, ИмяФайлаПравил);	
		
	ЗаписьЖурналаРегистрации(СтрокаИмяСобытия, УровеньЖурналаРегистрации.Информация, , , 
		НСтр("ru = 'Загрузка завершена'"));
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОтметкамиКнопками

Процедура ОтметитьКнопкойОбъекты(Объекты, Кнопка) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого Объект Из Объекты Цикл
		УстановитьОтметкиОбъекту(Объект, Кнопка, ТекущийПользователь);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтметкиОбъекту(Объект, Отметка, ТекущийПользователь) Экспорт
	
	Если ЗначениеЗаполнено(Объект) Тогда
		Если ЗначениеЗаполнено(Отметка) Тогда
			РегистрыСведений.РеквизитыЗаданийПоПользователям.УстановитьОтметки(
				Объект,
				ТекущийПользователь,
				Отметка);
		Иначе
			РегистрыСведений.РеквизитыЗаданийПоПользователям.ОчиститьОтметки(
				Объект,
				ТекущийПользователь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОтметкиВФормеОбъекта(ФормаОбъекта) Экспорт
	
	СсылкаНаОбъект 				 = ФормаОбъекта.Объект.Ссылка;		
	ИнформацияОбОтметкахЗадания  = ПолучитьИнформациюОбОтметкахОбъекта(СсылкаНаОбъект);
	ФормаОбъекта.ОтметкаКнопка   = ИнформацияОбОтметкахЗадания.Отметка;
	
	КомандаОтметка = ФормаОбъекта.Команды.Найти("Отметка");
	Если ЗначениеЗаполнено(ИнформацияОбОтметкахЗадания.Отметка) Тогда
		КомандаОтметка.Заголовок = СтрШаблон(НСтр("ru='%1'"), Строка(ИнформацияОбОтметкахЗадания.Отметка));
		КомандаОтметка.Картинка  = ИнформацияОбОтметкахЗадания.Картинка;
	Иначе
		КомандаОтметка.Заголовок = НСтр("ru='Отметки'");
	КонецЕсли;
	
	// Подсветка задания.	
	Попытка
		ЦветФонаПомеченнойЗадачи 	= РаботаСЦветомКлиентСервер.HexВЦвет(
			УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ЦветФонаПомеченнойЗадачи"));
		ЦветТекстаПомеченнойЗадачи	= РаботаСЦветомКлиентСервер.HexВЦвет(
			УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ЦветТекстаПомеченнойЗадачи"));
	Исключение
		ЦветФонаПомеченнойЗадачи 	= Новый Цвет(255, 255, 204);
		ЦветТекстаПомеченнойЗадачи	= WebЦвета.Черный;
	КонецПопытки;	
	
	Если ИнформацияОбОтметкахЗадания.Подсветка Тогда	
		ФормаОбъекта.Элементы.Тема.ЦветФона  = ЦветФонаПомеченнойЗадачи;
		ФормаОбъекта.Элементы.Тема.ЦветТекста= ЦветТекстаПомеченнойЗадачи;		
	Иначе
		ФормаОбъекта.Элементы.Тема.ЦветФона  = WebЦвета.Белый;
		ФормаОбъекта.Элементы.Тема.ЦветТекста= WebЦвета.Черный;
	КонецЕсли;		
	
	ФормаОбъекта.Элементы.ФормаПодсветитьЗадание.Пометка = ИнформацияОбОтметкахЗадания.Подсветка;
	
КонецПроцедуры

Функция ПолучитьИнформациюОбОтметкахОбъекта(Объект) Экспорт
	
	СтруктураОтметкаПодстветка = РегистрыСведений.РеквизитыЗаданийПоПользователям.ПолучитьОтметкуИПодсветку(Объект,
		Пользователи.ТекущийПользователь());
				
	Отметка 		= СтруктураОтметкаПодстветка.Отметка;
	Подсветка	= СтруктураОтметкаПодстветка.Подсветка;
	Если Отметка = Перечисления.ОтметкиОбъектов.Черная Тогда
		Картинка = БиблиотекаКартинок.КнопкаЧерная;
	ИначеЕсли Отметка = Перечисления.ОтметкиОбъектов.Синяя Тогда
		Картинка = БиблиотекаКартинок.КнопкаСиняя;
	ИначеЕсли Отметка = Перечисления.ОтметкиОбъектов.Зеленая Тогда
		Картинка = БиблиотекаКартинок.КнопкаЗеленая;
	ИначеЕсли Отметка = Перечисления.ОтметкиОбъектов.Красная Тогда
		Картинка = БиблиотекаКартинок.КнопкаКрасная;
	ИначеЕсли Отметка = Перечисления.ОтметкиОбъектов.Желтая Тогда
		Картинка = БиблиотекаКартинок.КнопкаЖелтая;	
	Иначе
		Картинка = БиблиотекаКартинок.КнопкаЧерная;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Отметка",   Отметка);
	Результат.Вставить("Картинка",  Картинка);
	Результат.Вставить("Подсветка", Подсветка);
	Возврат Результат;
	
КонецФункции

Процедура ПодсветитьОбъекты(Объекты) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого Объект Из Объекты Цикл
		ПодсветитьОбъект(Объект, ТекущийПользователь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодсветитьОбъект(Объект, ТекущийПользователь) Экспорт
	
	РегистрыСведений.РеквизитыЗаданийПоПользователям.УстановитьПодсветкуОбъекту(Объект, ТекущийПользователь);
	
КонецПроцедуры	

#КонецОбласти

#Область Оповещения

Функция ФорматироватьНомер(Номер) Экспорт
	
	Результат = "";
	ДопустимыеСимволы = "+1234567890";
	Для Позиция = 1 По СтрДлина(Номер) Цикл
		Символ = Сред(Номер,Позиция,1);
		Если СтрНайти(ДопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(Результат) > 10 Тогда
		ПервыйСимвол = Лев(Результат, 1);
		Если ПервыйСимвол = "8" Тогда
			Результат = "+7" + Сред(Результат, 2);
		ИначеЕсли ПервыйСимвол <> "+" Тогда
			Результат = "+" + Результат;
		КонецЕсли;
	ИначеЕсли СтрДлина(Результат) = 10 Тогда
		Результат = "+7" + Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Документ номер числом.
//
// Параметры:
//  Источник - Документ или Строка	 - откуда должны получить номер.
// 
// Возвращаемое значение:
//  Число - номер числом.
//
Функция ДокументНомерЧислом(Знач Источник) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат "0";
	КонецЕсли;
	
	Если ТипЗнч(Источник) <> Тип("Строка") Тогда
		НомерДок = Источник.Ссылка.Номер;
	Иначе
		НомерДок = Источник;
	КонецЕсли;
		
	Пока НомерДок <> "" И СтрНайти("123456789", Лев(НомерДок, 1)) = 0 Цикл 
		НомерДок = Сред(НомерДок, 2) 
	КонецЦикла;
	Попытка
		//@skip-warning
		НомерВЧисло = Число(НомерДок);
		Возврат НомерДок;
	Исключение
		Возврат "0";
	КонецПопытки;				
	
КонецФункции

Функция ЧислоИзСтроки(Знач Стр) Экспорт
	
	РезультатСтр = "";
	Для Индекс = 1 По СтрДлина(Стр) Цикл
		Если СтрНайти("0123456789.,", Сред(Стр, Индекс, 1)) > 0 Тогда
			РезультатСтр = РезультатСтр + Сред(Стр, Индекс, 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		РезультатСтр = СтрЗаменить(РезультатСтр, ",", ".");
		Возврат Число(РезультатСтр);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСсылкуИзНавигационной(НС) Экспорт
    
    ПерваяТочка = СтрНайти(НС, "e1cib/data/");
    ВтораяТочка = СтрНайти(НС, "?ref=");
    
    ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НС, ВтораяТочка + 5));
    Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
    
КонецФункции

#КонецОбласти

#Область СкладскойУчетКлиентов

Процедура УстановитьОграничениеТипаДляЭлементовФормы(Форма, МассивЭлементов, РеквизитЗаполнен = Истина) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	
	Если УправлениеITОтделом8УФПовтИсп.ВедетсяСкладскойУчетКлиентов() Тогда
		Для Каждого Элемент Из МассивЭлементов Цикл
			Форма.Элементы[Элемент].УстановитьДействие("НачалоВыбора",   "Подключаемый_НачалоВыбора");
			Форма.Элементы[Элемент].УстановитьДействие("АвтоПодбор",     "Подключаемый_АвтоПодбор");
			Форма.Элементы[Элемент].УстановитьДействие("Очистка",        "Подключаемый_Очистка");
			Форма.Элементы[Элемент].УстановитьДействие("ОбработкаВыбора","Подключаемый_ОбработкаВыбора");
			Форма.Элементы[Элемент].КнопкаВыбора 		  = Истина;
			Форма.Элементы[Элемент].ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
			Если Не РеквизитЗаполнен Тогда
				Форма.Элементы[Элемент].ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, 
					Новый КвалификаторыСтроки(200));
			КонецЕсли;	
		КонецЦикла;	
	Иначе		
		Для Каждого Элемент Из МассивЭлементов Цикл
			Форма.Элементы[Элемент].ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, 
				Новый КвалификаторыСтроки(200));
		КонецЦикла; 	
	КонецЕсли;
	
КонецПроцедуры

Функция ОтказСнятьУчетПоКонтрагентам() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПорцияДляПроверки = 3;
	Счетчик = 0;
	Запрос = Новый Запрос;
	ШаблонОбъединения = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Доверенность_1.Организация
		|ИЗ
		|	Документ.Доверенность КАК Доверенность_1
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Доверенность_1.Организация) = ТИП(Справочник.Контрагенты)";
			    
	Для Каждого Документ Из Метаданные.Документы Цикл
		
		Если Документ.Реквизиты.Найти("Организация") = Неопределено Тогда			
			Продолжить;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
		Если Запрос.Текст <> "" Тогда
			Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			
		КонецЕсли;
		
		// Для избежания ошибки неоднозначности полей
		ТекстОбъединения = СтрЗаменить(ШаблонОбъединения, "_1", "_" + Счетчик);
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Доверенность", Документ.Имя);
		
		Запрос.Текст = Запрос.Текст + ТекстОбъединения;
		
		Если Счетчик = ПорцияДляПроверки Тогда
			Счетчик = 0;
			Если Не Запрос.Выполнить().Пустой() Тогда
				Возврат НСтр("ru='Имеются документы, где в качестве организации указан контрагент. Для выключения опции необходимо изменить организацию в таких документах.'");
			КонецЕсли;
			Запрос.Текст = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ОтказОтключитьУчетОстатковПоКонтрагенту(Контрагент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПорцияДляПроверки = 3;
	Счетчик = 0;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	ШаблонОбъединения = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Доверенность_1.Организация
		|ИЗ
		|	Документ.Доверенность КАК Доверенность_1
		|ГДЕ
		|	Доверенность_1.Организация = &Контрагент";	
	    
	Для Каждого Документ Из Метаданные.Документы Цикл
		
		Если Документ.Реквизиты.Найти("Организация") = Неопределено Тогда			
			Продолжить;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
		Если Запрос.Текст <> "" Тогда
			Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			
		КонецЕсли;
		
		ТекстОбъединения = СтрЗаменить(ШаблонОбъединения, "_1", "_" + Счетчик); // Для избежания ошибки неоднозначности полей.
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Доверенность", Документ.Имя);
		
		Запрос.Текст = Запрос.Текст + ТекстОбъединения;
		
		Если Счетчик = ПорцияДляПроверки Тогда
			Счетчик = 0;
			Если Не Запрос.Выполнить().Пустой() Тогда
				Возврат НСтр("ru='Имеются документы, где в качестве организации указан данный контрагент. Для выключения опции необходимо изменить организацию в этих документах.'");
			КонецЕсли;
			Запрос.Текст = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";

КонецФункции	

Функция ПолучитьСписокВыбораОрганизацииКонтрагента(Знач СтрокаПоиска) Экспорт
    
    СписокВыбора = Новый СписокЗначений;
	
    ПараметрыВыбора = Новый Структура;
    ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
    ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
    ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);		
	ДанныеВыбораОрганизации	= Справочники.Организации.ПолучитьДанныеВыбора(ПараметрыВыбора);
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления, УчетОстатков", Ложь, Истина));
	ДанныеВыбораКонтрагенты	= Справочники.Контрагенты.ПолучитьДанныеВыбора(ПараметрыВыбора);	
	
	Для Каждого ЭлементСписка Из ДанныеВыбораОрганизации Цикл
		Постфикс = НСтр("ru = '(организация)'");
		СписокВыбора.Добавить(ЭлементСписка.Значение, 
			ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) + " " + Постфикс, СтрокаПоиска));
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтрагенты Цикл
		Постфикс = НСтр("ru = '(контрагент)'");
		СписокВыбора.Добавить(ЭлементСписка.Значение, 
			ФорматироватьСтрокуНайденнойПодстроки(Строка(ЭлементСписка.Представление) + " " + Постфикс, СтрокаПоиска));
	КонецЦикла;    
	
    Возврат СписокВыбора;
    
КонецФункции

#КонецОбласти

#Область ДоговораКонтрагентов

Функция ПолучитьДанныеОрганизацияПриИзменении(Организация) Экспорт
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Организация);
	
	Возврат СтруктураДанные;
	
КонецФункции

Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация, Дата = Неопределено) Экспорт
	
	Договор 		= ПолучитьДоговорПоУмолчанию(Контрагент, Организация);	
	СтруктураДанные = Новый Структура;	
	СтруктураДанные.Вставить("Договор",		  				Договор);	
	СтруктураДанные.Вставить("НаПолучениеОт", 				?(ЗначениеЗаполнено(Контрагент.НаименованиеПолное), 
		Контрагент.НаименованиеПолное, Контрагент.Наименование));
	СтруктураДанные.Вставить("ВалютаРасчетов", 				Договор.ВалютаРасчетов);
	СтруктураДанные.Вставить("ВалютаРасчетовКурсКратность",	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
		?(Дата = Неопределено, ТекущаяДатаСеанса(), Дата), Новый Структура("Валюта", Договор.ВалютаРасчетов)));
	СтруктураДанные.Вставить("РасчетыВУсловныхЕдиницах", 	Договор.РасчетыВУсловныхЕдиницах);
	СтруктураДанные.Вставить("БанковскийСчет",				Контрагент.БанковскийСчетПоУмолчанию);

	Возврат СтруктураДанные;
	
КонецФункции	

Функция ПолучитьДоговорПоУмолчанию(Контрагент, Организация, СписокВидовДоговора = Неопределено) Экспорт
	
	Запрос       = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
		+?(СписокВидовДоговора <> Неопределено,"
		|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	Запрос.Текст = ТекстЗапроса;
	Результат    = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции	

Функция ПолучитьСписокВидовДоговораДляДокумента(Документ) Экспорт
	
	СписокВидовДоговора = Новый СписокЗначений;	
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.Доверенность") Тогда
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);		
	КонецЕсли;
	
	Возврат СписокВидовДоговора;
	
КонецФункции

Функция ПолучитьДанныеДоговорПриИзменении(Договор, Дата = Неопределено) Экспорт
	
	СтруктураДанные = Новый Структура();	
	СтруктураДанные.Вставить("ВалютаРасчетов",				Договор.ВалютаРасчетов);	
	СтруктураДанные.Вставить("ВалютаРасчетовКурсКратность",	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
		?(Дата = Неопределено, ТекущаяДатаСеанса(), Дата), Новый Структура("Валюта", Договор.ВалютаРасчетов)));
	СтруктураДанные.Вставить("РасчетыВУсловныхЕдиницах", 	Договор.РасчетыВУсловныхЕдиницах);
	СтруктураДанные.Вставить("СуммаВключаетНДС", 			Неопределено);
	
	Возврат СтруктураДанные;
	
КонецФункции

#КонецОбласти

#Область АдреснаяКнига

// Возвращает инициализированную таблицу для адресной книги.
//
// Возвращаемое значение:
//	Таблица - ТаблицаЗначений - пустая таблица значений  в которую вернется результат с колонками 
// (Ссылка, ФИО, Телефоны, Почта, ДолжностьРоли, ОрганизацияПодразделение, Местоположение, АдресФактический, 
// 	АдресЮридический).
//
Функция ИнициалироватьТаблицуВыводаАдреснойКниги() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ссылка");
	Таблица.Колонки.Добавить("ФИО");
	Таблица.Колонки.Добавить("Телефоны"); // << Массив
	Таблица.Колонки.Добавить("Почта"); // << Массив
	Таблица.Колонки.Добавить("ДолжностьРоли");
	Таблица.Колонки.Добавить("ОрганизацияПодразделение");
	Таблица.Колонки.Добавить("Местоположение");
	Таблица.Колонки.Добавить("АдресФактический");
	Таблица.Колонки.Добавить("АдресЮридический");
	
	Возврат Таблица;
	
КонецФункции

// Возвращает таблицу адресной книги по переданным условиям.
//
// Параметры:
//	Таблица - ТаблицаЗначений - пустая таблица значений  в которую вернется результат с колонками 
//		(Ссылка, ФИО, Телефоны, Почта, ДолжностьРоли, ОрганизацияПодразделение, Местоположение, АдресФактический, 
//		АдресЮридический).
//  МассивСсылок - Массив - массив ссылок с объектами по которым нужно получить информацию.
//  ВыводитьСотрудников - Булево - добавить в таблицу сотрудников и пользователей.
//  ВыводитьКонтрагентов - Булево - добавить в таблицу контрагентов и контактных лиц.
//  СтрокаПоиска - Строка - подстрока для фильтрации записей.
//
Процедура ПолучитьТаблицуВыводаАдреснойКниги(Таблица, Знач МассивСсылок = Неопределено,
	Знач ВыводитьСотрудников, Знач ВыводитьКонтрагентов, Знач СтрокаПоиска = "") Экспорт
	
	// АЛГОРИТМ ПОЛУЧЕНИЯ КОНТАКТНОЙ ИНФОРМАЦИИ ПО ПОЛЬЗОВАТЕЛЯМ, СОТРУДНИКАМ, КОНТАКТНЫМ ЛИЦАМ, КОНТРАГЕНТАМ.
	// Входящие переменные:
	//	ВыводитьСотрудников - Булево - получать информации о пользователях и сотрудниках.
	//	ВыводитьКонтрагентов - Булево - получать информации о контактных лицах и контрагентах.
	// 	Таблица - Таблица значений - колонки 
	//	МассивСсылок - ссылки, по которым хотим получить информацию.

	Если ВыводитьСотрудников Тогда
		ЗапросКИБ = Новый Запрос();
		ЗапросКИБ.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Организация КАК Организация,
			|	ПРЕДСТАВЛЕНИЕ(Сотрудники.Подразделение) КАК Подразделение,
			|	Сотрудники.Местоположение КАК Местоположение,
			|	Пользователи.КонтактнаяИнформация.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Тип КАК Тип,
			|		Вид КАК Вид,
			|		Представление КАК Представление,
			|		ЗначенияПолей КАК ЗначенияПолей,
			|		Страна КАК Страна,
			|		Регион КАК Регион,
			|		Город КАК Город,
			|		АдресЭП КАК АдресЭП,
			|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
			|		НомерТелефона КАК НомерТелефона,
			|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
			|		ВидДляСписка КАК ВидДляСписка,
			|		Значение КАК Значение
			|	) КАК ПользователиКонтактнаяИнформация,
			|	Сотрудники.КонтактнаяИнформация.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Тип КАК Тип,
			|		Вид КАК Вид,
			|		Представление КАК Представление,
			|		ЗначенияПолей КАК ЗначенияПолей,
			|		Страна КАК Страна,
			|		Регион КАК Регион,
			|		Город КАК Город,
			|		АдресЭП КАК АдресЭП,
			|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
			|		НомерТелефона КАК НомерТелефона,
			|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
			|		ВидДляСписка КАК ВидДляСписка,
			|		Значение КАК Значение
			|	) КАК СотрудникиКонтактнаяИнформация,
			|	Пользователи.Ссылка КАК Ссылка,
			|	Пользователи.Представление КАК Представление,
			|	Сотрудники.Должность КАК Должность,
			|	ФизическиеЛица.КонтактнаяИнформация.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Тип КАК Тип,
			|		Вид КАК Вид,
			|		Представление КАК Представление,
			|		ЗначенияПолей КАК ЗначенияПолей,
			|		Страна КАК Страна,
			|		Регион КАК Регион,
			|		Город КАК Город,
			|		АдресЭП КАК АдресЭП,
			|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
			|		НомерТелефона КАК НомерТелефона,
			|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
			|		ВидДляСписка КАК ВидДляСписка,
			|		Значение КАК Значение
			|	) КАК ФизическиеЛицаКонтактнаяИнформация
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО Пользователи.Сотрудник = Сотрудники.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО Пользователи.ФизическоеЛицо = ФизическиеЛица.Ссылка
			|ГДЕ
			|	Пользователи.Недействителен = ЛОЖЬ
			|	И Пользователи.ПометкаУдаления = ЛОЖЬ";

		МассивТелефоновСотрудников = Новый Массив;
		МассивСотрудников = Новый Массив;
		Выборка = ЗапросКИБ.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МассивТелефонов = Новый Массив;
			Почта	 = Новый Массив;
			АдресФактический = "";
			АдресЮридический = "";
			
			// Пользователи
			ВыборкаКИ = Выборка.ПользователиКонтактнаяИнформация.Выбрать();
			Пока ВыборкаКИ.Следующий() Цикл
				// Выбираем только нужное.
				Если МассивСсылок <> Неопределено Тогда
					Если МассивСсылок.Найти(ВыборкаКИ.Ссылка) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			
				Если ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Адрес = НРег(ВыборкаКИ.Представление);
					Если Почта.Найти(Адрес) = Неопределено Тогда
						Почта.Добавить(Адрес);
					КонецЕсли;
				ИначеЕсли ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					СтрокаТелефона = ВыборкаКИ.ЗначенияПолей;
					СтрокаОтвета = УправлениеКонтактнойИнформацией.СведенияОТелефоне(СтрокаТелефона);				
					Телефон = СтрокаОтвета.Представление;
					Если МассивТелефоновСотрудников.Найти(СтрокаТелефона) = Неопределено Тогда
						МассивТелефонов.Добавить(ВыборкаКИ.ЗначенияПолей);
						МассивТелефоновСотрудников.Добавить(Телефон);
					КонецЕсли;
				ИначеЕсли ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
					Если ПустаяСтрока(АдресФактический) Тогда
						АдресФактический = ВыборкаКИ.Представление;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Сотрудники
			ВыборкаКИ = Выборка.СотрудникиКонтактнаяИнформация.Выбрать();
			Пока ВыборкаКИ.Следующий() Цикл
				// Выбираем только нужное.
				Если МассивСсылок <> Неопределено Тогда
					Если МассивСсылок.Найти(ВыборкаКИ.Ссылка) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Адрес = НРег(ВыборкаКИ.Представление);
					Если Почта.Найти(Адрес) = Неопределено Тогда
						Почта.Добавить(Адрес);
					КонецЕсли;
				ИначеЕсли ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					СтрокаТелефона = ВыборкаКИ.ЗначенияПолей;
					СтрокаОтвета = УправлениеКонтактнойИнформацией.СведенияОТелефоне(СтрокаТелефона);
					Телефон = СтрокаОтвета.Представление;
					Если МассивТелефоновСотрудников.Найти(СтрокаТелефона) = Неопределено Тогда
						МассивТелефонов.Добавить(ВыборкаКИ.ЗначенияПолей);
						МассивТелефоновСотрудников.Добавить(Телефон);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;		
			
			// Физлица
			ВыборкаКИ = Выборка.ФизическиеЛицаКонтактнаяИнформация.Выбрать();
			Пока ВыборкаКИ.Следующий() Цикл
				// Выбираем только нужное.
				Если МассивСсылок <> Неопределено Тогда
					Если МассивСсылок.Найти(ВыборкаКИ.Ссылка) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Адрес = НРег(ВыборкаКИ.Представление);
					Если Почта.Найти(Адрес) = Неопределено Тогда
						Почта.Добавить(Адрес);
					КонецЕсли;
				ИначеЕсли ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					СтрокаТелефона = ВыборкаКИ.ЗначенияПолей;
					СтрокаОтвета = УправлениеКонтактнойИнформацией.СведенияОТелефоне(СтрокаТелефона);
					Телефон = СтрокаОтвета.Представление;
					Если МассивТелефоновСотрудников.Найти(СтрокаТелефона) = Неопределено Тогда
						МассивТелефонов.Добавить(ВыборкаКИ.ЗначенияПолей);
						МассивТелефоновСотрудников.Добавить(Телефон);
					КонецЕсли;
				ИначеЕсли ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
					Если ПустаяСтрока(АдресФактический) Тогда
						АдресФактический = ВыборкаКИ.Представление;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;		
			
			Если Почта.Количество() > 0 ИЛИ МассивТелефонов.Количество() > 0 Тогда
				НоваяСтрока 		= Таблица.Добавить();
				НоваяСтрока.ФИО 	= Выборка.Представление;
				НоваяСтрока.Ссылка 	= Выборка.Ссылка;
				НоваяСтрока.Телефоны = МассивТелефонов;
				НоваяСтрока.Почта 	= Почта;
				НоваяСтрока.ДолжностьРоли = Выборка.Должность;
				НоваяСтрока.ОрганизацияПодразделение = Выборка.Подразделение;
				НоваяСтрока.Местоположение = Выборка.Местоположение;
				НоваяСтрока.АдресФактический = АдресФактический;
				НоваяСтрока.АдресЮридический = АдресЮридический;
				Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.Сотрудники") Тогда
					МассивСотрудников.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Выбираем из справочника "Сотрудники"
		ЗапросКИБ = Новый Запрос();
		ЗапросКИБ.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Организация КАК Организация,
			|	Сотрудники.Ссылка КАК Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(Сотрудники.Подразделение) КАК Подразделение,
			|	Сотрудники.Местоположение КАК Местоположение,
			|	Сотрудники.Представление КАК Представление,
			|	Сотрудники.Должность КАК Должность,
			|	Сотрудники.КонтактнаяИнформация.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Тип КАК Тип,
			|		Вид КАК Вид,
			|		Представление КАК Представление,
			|		ЗначенияПолей КАК ЗначенияПолей,
			|		Страна КАК Страна,
			|		Регион КАК Регион,
			|		Город КАК Город,
			|		АдресЭП КАК АдресЭП,
			|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
			|		НомерТелефона КАК НомерТелефона,
			|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
			|		ВидДляСписка КАК ВидДляСписка,
			|		Значение КАК Значение
			|	) КАК СотрудникиКонтактнаяИнформация,
			|	Сотрудники.Физлицо.КонтактнаяИнформация.(
			|		Ссылка КАК ФизлицоСсылка,
			|		НомерСтроки КАК ФизлицоНомерСтроки,
			|		Тип КАК ФизлицоТип,
			|		Вид КАК ФизлицоВид,
			|		Представление КАК ФизлицоПредставление,
			|		ЗначенияПолей КАК ФизлицоЗначенияПолей,
			|		Страна КАК ФизлицоСтрана,
			|		Регион КАК ФизлицоРегион,
			|		Город КАК ФизлицоГород,
			|		АдресЭП КАК ФизлицоАдресЭП,
			|		ДоменноеИмяСервера КАК ФизлицоДоменноеИмяСервера,
			|		НомерТелефона КАК ФизлицоНомерТелефона,
			|		НомерТелефонаБезКодов КАК ФизлицоНомерТелефонаБезКодов,
			|		ВидДляСписка КАК ФизлицоВидДляСписка,
			|		Значение КАК ФизлицоЗначение
			|	) КАК ФизлицоКонтактнаяИнформация
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Актуальность = ИСТИНА
			|	И Сотрудники.ПометкаУдаления = ЛОЖЬ
			|	И НЕ Сотрудники.Ссылка В (&МассивСотрудников)";
		ЗапросКИБ.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
		Выборка = ЗапросКИБ.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МассивТелефонов = Новый Массив;
			Почта	 = Новый Массив;
			АдресФактический = "";
			АдресЮридический = "";
			
			// Сотрудники
			ВыборкаКИ = Выборка.СотрудникиКонтактнаяИнформация.Выбрать();
			Пока ВыборкаКИ.Следующий() Цикл
				// Выбираем только нужное.
				Если МассивСсылок <> Неопределено Тогда
					Если МассивСсылок.Найти(ВыборкаКИ.Ссылка) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Адрес = НРег(ВыборкаКИ.Представление);
					Если Почта.Найти(Адрес) = Неопределено Тогда
						Почта.Добавить(Адрес);
					КонецЕсли;
				ИначеЕсли ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					СтрокаТелефона = ВыборкаКИ.ЗначенияПолей;
					СтрокаОтвета = УправлениеКонтактнойИнформацией.СведенияОТелефоне(СтрокаТелефона);
					Телефон = СтрокаОтвета.Представление;
					Если МассивТелефоновСотрудников.Найти(СтрокаТелефона) = Неопределено Тогда
						МассивТелефонов.Добавить(СтрокаТелефона);
						МассивТелефоновСотрудников.Добавить(Телефон);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Физлица
			ВыборкаКИ = Выборка.ФизлицоКонтактнаяИнформация.Выбрать();
			Пока ВыборкаКИ.Следующий() Цикл
				// Выбираем только нужное.
				Если МассивСсылок <> Неопределено Тогда
					Если МассивСсылок.Найти(ВыборкаКИ.ФизлицоСсылка) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ВыборкаКИ.ФизлицоТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Адрес = НРег(ВыборкаКИ.ФизлицоПредставление);
					Если Почта.Найти(Адрес) = Неопределено Тогда
						Почта.Добавить(Адрес);
					КонецЕсли;
				ИначеЕсли ВыборкаКИ.ФизлицоТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					СтрокаТелефона = ВыборкаКИ.ФизлицоЗначенияПолей;
					СтрокаОтвета = УправлениеКонтактнойИнформацией.СведенияОТелефоне(СтрокаТелефона);
					Телефон = СтрокаОтвета.Представление;
					Если МассивТелефоновСотрудников.Найти(СтрокаТелефона) = Неопределено Тогда
						МассивТелефонов.Добавить(СтрокаТелефона);
						МассивТелефоновСотрудников.Добавить(Телефон);
					КонецЕсли;
				ИначеЕсли ВыборкаКИ.ФизлицоТип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
					Если ПустаяСтрока(АдресФактический) Тогда
						АдресФактический = ВыборкаКИ.ФизлицоПредставление;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;		
			
			Если Почта.Количество() > 0 ИЛИ МассивТелефонов.Количество() > 0 Тогда
				НоваяСтрока 		= Таблица.Добавить();
				НоваяСтрока.ФИО 	= Выборка.Представление;
				НоваяСтрока.Ссылка 	= Выборка.Ссылка;
				НоваяСтрока.Телефоны = МассивТелефонов;
				НоваяСтрока.Почта 	= Почта;
				НоваяСтрока.ДолжностьРоли = Выборка.Должность;
				НоваяСтрока.ОрганизацияПодразделение = Выборка.Подразделение;
				НоваяСтрока.Местоположение = Выборка.Местоположение;
				НоваяСтрока.АдресФактический = АдресФактический;
				НоваяСтрока.АдресЮридический = АдресЮридический;
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;

	Если ВыводитьКонтрагентов Тогда
		
		ЗапросКИБ = Новый Запрос();
		ЗапросКИБ.Текст =
			"ВЫБРАТЬ
			|	КонтактныеЛица.Местоположение КАК Местоположение,
			|	КонтактныеЛица.Представление КАК Представление,
			|	КонтактныеЛица.Владелец КАК Владелец,
			|	КонтактныеЛица.КонтактнаяИнформация.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Тип КАК Тип,
			|		Вид КАК Вид,
			|		Представление КАК Представление,
			|		ЗначенияПолей КАК ЗначенияПолей,
			|		Страна КАК Страна,
			|		Регион КАК Регион,
			|		Город КАК Город,
			|		АдресЭП КАК АдресЭП,
			|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
			|		НомерТелефона КАК НомерТелефона,
			|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
			|		ВидДляСписка КАК ВидДляСписка,
			|		Значение КАК Значение
			|	) КАК КонтактныеЛицаКонтактнаяИнформация,
			|	КонтактныеЛица.Ссылка КАК Ссылка,
			|	КонтактныеЛица.Ссылка.Владелец КАК Контрагент,
			|	КонтактныеЛица.РолиКонтактногоЛица.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		РольКонтактногоЛица КАК РольКонтактногоЛица
			|	) КАК РолиКонтактногоЛица
			|ИЗ
			|	Справочник.КонтактныеЛица КАК КонтактныеЛица
			|ГДЕ
			|	КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Контрагенты.Местоположение КАК Местоположение,
			|	Контрагенты.Ссылка КАК Ссылка,
			|	Контрагенты.Представление КАК Представление,
			|	Контрагенты.КонтактнаяИнформация.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Тип КАК Тип,
			|		Вид КАК Вид,
			|		Представление КАК Представление,
			|		ЗначенияПолей КАК ЗначенияПолей,
			|		Страна КАК Страна,
			|		Регион КАК Регион,
			|		Город КАК Город,
			|		АдресЭП КАК АдресЭП,
			|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
			|		НомерТелефона КАК НомерТелефона,
			|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
			|		ВидДляСписка КАК ВидДляСписка,
			|		Значение КАК Значение
			|	) КАК КонтрагентыКонтактнаяИнформация
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ПометкаУдаления = ЛОЖЬ";

		МассивТелефоновКонтрагентов = Новый Массив;
		Пакет = ЗапросКИБ.ВыполнитьПакет();
		Выборка = Пакет[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МассивТелефонов = Новый Массив;
			Почта	 = Новый Массив;
			АдресФактический = "";
			АдресЮридический = "";
			
			// КонтактныеЛицаКонтактнаяИнформация.
			ВыборкаКИ = Выборка.КонтактныеЛицаКонтактнаяИнформация.Выбрать();
			Пока ВыборкаКИ.Следующий() Цикл
				// Выбираем только нужное.
				Если МассивСсылок <> Неопределено Тогда
					Если МассивСсылок.Найти(ВыборкаКИ.Ссылка) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Адрес = НРег(ВыборкаКИ.Представление);
					Если Почта.Найти(Адрес) = Неопределено Тогда
						Почта.Добавить(Адрес);
					КонецЕсли;
				ИначеЕсли ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					СтрокаТелефона = ВыборкаКИ.ЗначенияПолей;
					СтрокаОтвета = УправлениеКонтактнойИнформацией.СведенияОТелефоне(СтрокаТелефона);
					Телефон = СтрокаОтвета.Представление;
					Если МассивТелефоновКонтрагентов.Найти(СтрокаТелефона) = Неопределено Тогда
						МассивТелефонов.Добавить(ВыборкаКИ.ЗначенияПолей);
						МассивТелефоновКонтрагентов.Добавить(Телефон);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			УказанныеРоли = "";
			ВыборкаРоли = Выборка.РолиКонтактногоЛица.Выбрать();
			Пока ВыборкаРоли.Следующий() Цикл
				Если НЕ ПустаяСтрока(УказанныеРоли) Тогда
					УказанныеРоли = УказанныеРоли + ", ";
				КонецЕсли;
				УказанныеРоли = УказанныеРоли + Строка(ВыборкаРоли.РольКонтактногоЛица);
			КонецЦикла;
			
			Если Почта.Количество() > 0 ИЛИ МассивТелефонов.Количество() > 0 Тогда
				НоваяСтрока = Таблица.Добавить();
				НоваяСтрока.ФИО = Выборка.Представление;
				НоваяСтрока.Ссылка = Выборка.Ссылка;
				НоваяСтрока.Телефоны = МассивТелефонов;
				НоваяСтрока.Почта = Почта;
				НоваяСтрока.ДолжностьРоли = УказанныеРоли;
				НоваяСтрока.ОрганизацияПодразделение = Выборка.Контрагент;
				НоваяСтрока.Местоположение = Выборка.Местоположение;
				НоваяСтрока.АдресФактический = АдресФактический;
				НоваяСтрока.АдресЮридический = АдресЮридический;
			КонецЕсли;
		КонецЦикла;	
		
		Выборка = Пакет[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МассивТелефонов = Новый Массив;
			Почта	 = Новый Массив;
			АдресФактический = "";
			АдресЮридический = "";
			
			// Контрагенты.
			ВыборкаКИ = Выборка.КонтрагентыКонтактнаяИнформация.Выбрать();
			Пока ВыборкаКИ.Следующий() Цикл
				// Выбираем только нужное.
				Если МассивСсылок <> Неопределено Тогда
					Если МассивСсылок.Найти(ВыборкаКИ.Ссылка) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Адрес = НРег(ВыборкаКИ.Представление);
					Если Почта.Найти(Адрес) = Неопределено Тогда
						Почта.Добавить(Адрес);
					КонецЕсли;
				ИначеЕсли ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					СтрокаТелефона = ВыборкаКИ.ЗначенияПолей;
					СтрокаОтвета = УправлениеКонтактнойИнформацией.СведенияОТелефоне(СтрокаТелефона);
					Телефон = СтрокаОтвета.Представление;
					Если МассивТелефоновКонтрагентов.Найти(СтрокаТелефона) = Неопределено Тогда
						МассивТелефонов.Добавить(ВыборкаКИ.ЗначенияПолей);
						МассивТелефоновКонтрагентов.Добавить(Телефон);
					КонецЕсли;
				ИначеЕсли ВыборкаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
					Если ВыборкаКИ.Вид =  Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
						Если ПустаяСтрока(АдресФактический) Тогда
							АдресФактический = ВыборкаКИ.Представление;
						КонецЕсли;
					ИначеЕсли ВыборкаКИ.Вид =  Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
						Если ПустаяСтрока(АдресЮридический) Тогда
							АдресЮридический = ВыборкаКИ.Представление;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;		
			
			Если Почта.Количество() > 0 ИЛИ МассивТелефонов.Количество() > 0 Тогда
				НоваяСтрока 			= Таблица.Добавить();
				НоваяСтрока.ФИО 		= Выборка.Представление;
				НоваяСтрока.Ссылка 		= Выборка.Ссылка;
				НоваяСтрока.Телефоны 	= МассивТелефонов;
				НоваяСтрока.Почта 		= Почта;
				НоваяСтрока.ДолжностьРоли = "";
				НоваяСтрока.ОрганизацияПодразделение = Выборка.Ссылка;
				НоваяСтрока.Местоположение = Выборка.Местоположение;
				НоваяСтрока.АдресФактический = АдресФактический;
				НоваяСтрока.АдресЮридический = АдресЮридический;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;

	Если НЕ ПустаяСтрока(СтрокаПоиска) Тогда
		Индекс = Таблица.Количество() - 1;
		СтрокаПоиска = ВРег(СтрокаПоиска);
		Пока Индекс >= 0 Цикл
			
			Стр = Таблица.Получить(Индекс);
			
			Найдено = Ложь;
			Если Найдено = Ложь И СтрНайти(ВРег(Стр.ФИО), СтрокаПоиска) > 0 Тогда
				Найдено = Истина;
			КонецЕсли;
			Если Найдено = Ложь И СтрНайти(ВРег(Стр.АдресФактический), СтрокаПоиска) > 0 Тогда
				Найдено = Истина;
			КонецЕсли;
			Если Найдено = Ложь И СтрНайти(ВРег(Стр.АдресЮридический), СтрокаПоиска) > 0 Тогда
				Найдено = Истина;
			КонецЕсли;
			Если Найдено = Ложь И СтрНайти(ВРег(Строка(Стр.ДолжностьРоли)), СтрокаПоиска) > 0 Тогда
				Найдено = Истина;
			КонецЕсли;
			Если Найдено = Ложь И СтрНайти(ВРег(Строка(Стр.ОрганизацияПодразделение)), СтрокаПоиска) > 0 Тогда
				Найдено = Истина;
			КонецЕсли;
			Если Найдено = Ложь И СтрНайти(ВРег(Строка(Стр.Местоположение)), СтрокаПоиска) > 0 Тогда
				Найдено = Истина;
			КонецЕсли;
			Если Найдено = Ложь И Стр.Телефоны.Количество() > 0 Тогда
				Для Каждого ВремСтр Из Стр.Телефоны Цикл
					Если СтрНайти(ВРег(ВремСтр), СтрокаПоиска) > 0 Тогда
						Найдено = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;				
			КонецЕсли;
			Если Найдено = Ложь И Стр.Почта.Количество() > 0 Тогда
				Для Каждого ВремСтр Из Стр.Почта Цикл
					Если СтрНайти(ВРег(ВремСтр), СтрокаПоиска) > 0 Тогда
						Найдено = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ Найдено Тогда
				Таблица.Удалить(Индекс);
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Таблица.Сортировать("ФИО");

КонецПроцедуры

#КонецОбласти

#Область Прочие

// Получает значение по имение из структуры
//
// Параметры:
//	Параметры - Структура - исходные параметры.
//	Имя - Строка - имя в структуре
//	ЗначениеПоУмолчанию - если в структуре не найдено значение по имени, будет возвращено
//
// Возвращаемое значение:
//	Произволньное значение из структуры или значение по умолчанию.
//
Функция ПолучитьПараметр(Знач Параметры, Знач Имя, Знач ЗначениеПоУмолчанию) Экспорт
	
	Перем Ответ;
	
	Если Параметры.Свойство(Имя, Ответ) Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции //ПолучитьПараметр

// Запускает выполнение процедуры в фоновом задании.
// По аналогии с ДлительныеОперации.ЗапуститьВыполнениеВФоне() БСП 2.2.5. Добавлен параметр "ОжидатьЗавершения".
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//  ОжидатьЗавершения       - Булево - признак ожидания завершения задания за время вызова 
//                           (2 сек. для обычной скорости клиентского соединения, 4 сек. для низкой)
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь, 
	ОжидатьЗавершения = Истина) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	Если ОбщегоНазначения.РежимОтладки() Тогда
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
	Иначе
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
		ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		Задание = ДлительныеОперации.ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяЭкспортнойПроцедуры,
			ПараметрыВыполнения, ПараметрыЭкспортнойПроцедуры);
		
		Если ОжидатьЗавершения Тогда
			ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
			Попытка
				Задание.ОжидатьЗавершения(ВремяОжидания);
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
			КонецПопытки;
		КонецЕсли;
		
		Результат.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор);
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматироватьСтрокуНайденнойПодстроки(Знач ИсходнаяСтрока, Знач СтрокаПоиска) Экспорт
	
	ЗеленыйЦвет = Новый Цвет(0, 153, 13);
	ЖирныйШрифт = Новый Шрифт(,,Истина);

	Если СтрНайти(НРег(ИсходнаяСтрока), НРег(СтрокаПоиска)) = 1 Тогда
		Попытка
			Массив = Новый Массив;
			Массив.Добавить(Новый ФорматированнаяСтрока(Лев(ИсходнаяСтрока, СтрДлина(СтрокаПоиска)), 
				ЖирныйШрифт, ЗеленыйЦвет,,));
			Стр2 = Сред(ИсходнаяСтрока, СтрНайти(НРег(ИсходнаяСтрока), НРег(СтрокаПоиска)) + СтрДлина(СтрокаПоиска));
			Если НЕ ПустаяСтрока(Стр2) Тогда
				Массив.Добавить(Стр2);
			КонецЕсли;
			ФС = Новый ФорматированнаяСтрока(Массив);
		Исключение
			ФС = Новый ФорматированнаяСтрока(ИсходнаяСтрока);
		КонецПопытки;
	Иначе
		ФС = Новый ФорматированнаяСтрока(ИсходнаяСтрока);
	КонецЕсли;
	
	Возврат ФС;
	
КонецФункции

// Выбрасывает из строки все лишнее
Функция ПолучитьПриведенныйНомер(Номер) Экспорт
	
	Результат = "";
	Для Индекс = 1 По СтрДлина(Номер) Цикл
		Если Найти("0123456789", Сред(Номер, Индекс, 1)) > 0 Тогда
			Результат = Результат + Сред(Номер, Индекс, 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает по переданной строке список телефонных номеров приведенных к одному виду.
//
// Параметры:
//	Телефоны - Строка
//
// Возвращаемое значение:
//	СписокЗначений - список приведенных к одному виду телефонных номеров.
//
Функция ПолучитьСписокПривденныхНомеров(Знач Телефоны) Экспорт
	
	// Получаем список телефонов
	СЗ = Новый СписокЗначений;
	Номер = "";
	Для Индекс = 1 По СтрДлина(Телефоны) Цикл
		Символ = Сред(Телефоны, Индекс, 1);
		Если Найти("+-() 0123456789", Символ) > 0 Тогда
			Номер = Номер + Сред(Телефоны, Индекс, 1);
		Иначе					
			Если Символ = ";" ИЛИ Символ = "," Тогда
				ПриведенныйНомер = ПолучитьПриведенныйНомер(Номер);						
				Если Лев(ПриведенныйНомер, 2) = "89" Тогда
					СЗ.Добавить(СокрЛП(ПриведенныйНомер));
				ИначеЕсли Лев(ПриведенныйНомер, 1) = "9" Тогда
					СЗ.Добавить("8" + СокрЛП(ПриведенныйНомер));
				ИначеЕсли Лев(ПриведенныйНомер, 2) = "79" Тогда
					СЗ.Добавить("8" + Сред(СокрЛП(ПриведенныйНомер), 2));
				КонецЕсли;
				Номер = "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если СтрДлина(Номер) >= 10 Тогда
		ПриведенныйНомер = ПолучитьПриведенныйНомер(Номер);						
		Если Лев(ПриведенныйНомер, 2) = "89" Тогда
			СЗ.Добавить(СокрЛП(ПриведенныйНомер));
		ИначеЕсли Лев(ПриведенныйНомер, 1) = "9" Тогда
			СЗ.Добавить("8" + СокрЛП(ПриведенныйНомер));
		ИначеЕсли Лев(ПриведенныйНомер, 2) = "79" Тогда
			СЗ.Добавить("8" + Сред(СокрЛП(ПриведенныйНомер), 2));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СЗ;
	
КонецФункции

// Возвращает по расширению картинка это или нет.
//
// Параметры:
//	Расширение - Строка
//
// Возвращаемое значение:
//	Булево - Истина, если это картинка.
//
Функция ЭтоКартинка(Знач Расширение) Экспорт
    
	нРасширение = НРег(Расширение);
	Возврат СтрНайти(";png;gif;jpg;jpeg;jp2;jpe;bmp;dib;ico;wmf;emf;tif;tiff;", ";" + нРасширение + ";") <> 0;
    
КонецФункции

// Раскладывает имя файла на составляющие.
//
// Параметры:
//	ИмяФайла - Строка - исходное имя файла.
//
// Возвращаемое значение:
//	Структура
//		* ИмяБезРасширения - Строка - имя файла.
//		* РасширениеБезТочки - Строка - расширение без точки.
//		* Расширение - Строка - расширение с точкой.
//		* ПолноеИмя - Строка - исходное имя файла.
//
Функция РазложитьИмяФайла(Знач ИмяФайла) Экспорт
	
	РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
	ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	Расширение = ?(ПустаяСтрока(РасширениеБезТочки), "", "." + РасширениеБезТочки);
	
	Если ПустаяСтрока(ИмяБезРасширения) Тогда
		
		ИмяБезРасширения = НСтр("ru = 'Вложение без имени'");
		
	Иначе
		ИмяБезРасширения =
			?(РасширениеБезТочки = "",
			ИмяБезРасширения,
			Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - СтрДлина(РасширениеБезТочки) - 1));
	КонецЕсли;	
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	Результат.Вставить("РасширениеБезТочки", РасширениеБезТочки);	
	Результат.Вставить("Расширение", Расширение);
	Результат.Вставить("ПолноеИмя", ИмяФайла);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти