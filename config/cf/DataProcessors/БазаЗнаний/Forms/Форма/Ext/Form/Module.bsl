
#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ФОРМЫ.

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоВебКлиент 			= УправлениеITОтделом8УФ.ПриложениеЯвляетсяВебКлиентом();
	Объект.СтатьяБазыЗнаний = Параметры.СтатьяБазыЗнаний;
	Объект.Область			= Параметры.Область;	
	ТекущийПользователь 	= Пользователи.ТекущийПользователь();
	
	Элементы.ФормаПрофильПользователя.Заголовок = Строка(ТекущийПользователь);
	
	Если ЗначениеЗаполнено(Объект.СтатьяБазыЗнаний) Тогда
		ПараметрыСсылки	= Новый Структура;
		ПараметрыСсылки.Вставить("id", Строка(Объект.СтатьяБазыЗнаний.УникальныйИдентификатор()));
		Если НЕ ПустаяСтрока(ПараметрыСсылки) Тогда
			ПараметрыСсылки.Вставить("section", Объект.Область);
		КонецЕсли;
		
		АдресСтраницы	= КонструкторСсылки_page("article", ПараметрыСсылки);
	Иначе 
		АдресСтраницы	= КонструкторСсылки_page("home", Неопределено);
	КонецЕсли;
		
	Элементы.ФормаГруппаСохранить.Видимость	= НЕ ЭтоВебКлиент;	
	Элементы.ОткрытьСписокСтатей.Видимость  = УправлениеITОтделом8УФПовтИсп.Право("ДобавлениеИзменениеБазыЗнаний") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава");
	ЭтотОбъект.ТекущийЭлемент               = Элементы.ДокументHTML;
	НаправлениеПоиска                       = 0;
	ЗагрузитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    Элементы.ГруппаПоиск.Видимость = Ложь;	
	УстановитьДоступность();
	
	Если ЗначениеЗаполнено(АдресСтраницы) Тогда
		ПараметрыВывода = Новый Структура("Обновление", Истина);
		ПерейтиНаСтраницу(АдресСтраницы, ПараметрыВывода);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработатьОповещенияПользователя", 5, Ложь);
	КаталогВременныхФайловПользователя = РабочийКаталогТекущегоПользователяНаСервере();
	
КонецПроцедуры

&НаСервере
Функция РабочийКаталогТекущегоПользователяНаСервере()
	
	Возврат РаботаСФайлами.НастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
КонецФункции	

//FIXME: При обновлении страницы из-вне, необходимо обновлять текущую страницу. 
&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	//ОбновитьСтраницу(Неопределено);
	//
	//Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Комментарии") Тогда
	//	Идентификатор	= НовыйОбъект.УникальныйИдентификатор();
	//	ОбластьПерехода	= "comment_" + Строка(Идентификатор);
	//	ПерейтиНаОбластьСтраницы(ОбластьПерехода);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
			
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Попытка
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("СтрокаПоискаСписокВыбора", Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());
	СохранитьНастройкиФормы(СтруктураНастроек);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Основная страница

&НаКлиенте
Процедура ДокументHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Anchor = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрСсылки = ДанныеСобытия.Href;
	
	Если СтрДлина(ПараметрСсылки) > 7 И НРег(Лев(ПараметрСсылки, 7)) = "mailto:" Тогда
		НавигационнаяСсылка_mailto(ПараметрСсылки);
		
	ИначеЕсли СтрДлина(ПараметрСсылки) > 9 И НРег(Лев(ПараметрСсылки, 9)) = "kb://api/" Тогда
		НавигационнаяСсылка_kbapi(ПараметрСсылки);
		
	ИначеЕсли СтрДлина(ПараметрСсылки) > 5 И НРег(Лев(ПараметрСсылки, 5)) = "file:" Тогда
		НавигационнаяСсылка_file(ПараметрСсылки);
		
	ИначеЕсли СтрДлина(ПараметрСсылки) > 4 И НРег(Лев(ПараметрСсылки, 4)) = "http" Тогда
		Если СтрНайти(ПараметрСсылки, "e1cib") Тогда
			НавигационнаяСсылка_e1c(ПараметрСсылки);
		ИначеЕсли СтрНайти(ПараметрСсылки, "fileid=") > 0 Тогда
			НавигационнаяСсылка_fileid(ПараметрСсылки);	
		Иначе	
			ОткрытьВнешнююСсылку(ПараметрСсылки);
		КонецЕсли;		
		
	ИначеЕсли СтрДлина(ПараметрСсылки) > 7 И НРег(Лев(ПараметрСсылки, 4)) = "tel:" Тогда
		ПерейтиПоНавигационнойСсылке(ПараметрСсылки);
		
	ИначеЕсли СтрДлина(ПараметрСсылки) > 6 И НРег(Лев(ПараметрСсылки, 6)) = "e1c://" 
		И СтрНайти(ПараметрСсылки, "fileid=") = 0 Тогда
		НавигационнаяСсылка_e1c(ПараметрСсылки);
		
	ИначеЕсли СтрНайти(ПараметрСсылки, "e1cib") > 0 Тогда
		НавигационнаяСсылка_e1c(ПараметрСсылки);
	
	ИначеЕсли СтрНайти(ПараметрСсылки, "fileid=") > 0 Тогда
		НавигационнаяСсылка_fileid(ПараметрСсылки);
				
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(ПараметрСсылки);
		
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументHTMLДокументСформирован(Элемент)
	Если НЕ ПустаяСтрока(Объект.Область) Тогда
		ПерейтиНаОбластьСтраницы(Объект.Область);
		
		Объект.СтатьяБазыЗнаний = Неопределено;
		Объект.Область			= "";
	КонецЕсли;
	
	Попытка
		ИмяСайта = Элементы.ДокументHTML.Документ.nameProp;
	Исключение
		ИмяСайта = ЭтотОбъект.Заголовок;
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(ИмяСайта) И НЕ ИмяСайта = ЭтотОбъект.Заголовок Тогда
		ЭтотОбъект.АвтоЗаголовок	= Ложь;
		ЭтотОбъект.Заголовок		= ИмяСайта;
		
		Если ТекущаяСтраница > 0 И ТекущаяСтраница <= Объект.История.Количество() Тогда
			Объект.История[ТекущаяСтраница-1].Представление = ИмяСайта;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументHTMLПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

// Поиск.

&НаКлиенте
Процедура СтрокаПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Элементы.ГруппаПоиск.Видимость Тогда
		Элементы.ГруппаПоиск.Видимость = Истина;
		Элементы.ФормаПоиск.Пометка    = Истина;
	КонецЕсли;	
	СтрокаПоиска = Текст;	
	ВыполнитьПоиск(0);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПоискаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Лев(ДанныеСобытия.Href, 9) = "kb://api/" Тогда
		НавигационнаяСсылка_kbapi(ДанныеСобытия.Href, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА КОМАНД ФОРМЫ

&НаКлиенте
Процедура ИнформацияОСистеме(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	Элементы.ГруппаПоиск.Видимость = НЕ Элементы.ГруппаПоиск.Видимость;	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяСтраница(Команда)
	
	АдресСтраницы	= КонструкторСсылки_page("home", Неопределено);
	НавигационнаяСсылка_kbapi(АдресСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВперед(Команда)
	
	НоваяСтраница = ТекущаяСтраница + 1;
	
	Если НоваяСтраница >= 1 И НоваяСтраница <= Объект.История.Количество() Тогда
		ЭтотОбъект.ДокументHTML = Объект.История[НоваяСтраница-1].ТекстСтраницы;
		
		ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаНазад(Команда)
	
	НоваяСтраница = ТекущаяСтраница - 1;
	
	Если НоваяСтраница >= 1 И НоваяСтраница <= Объект.История.Количество() Тогда
		ЭтотОбъект.ДокументHTML		= Объект.История[НоваяСтраница-1].ТекстСтраницы;
		
		ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтраницу(Команда)
	
	АдресСтраницы = ПолучитьТекущийАдресСсылки(Объект.История, ТекущаяСтраница);
	
	ПараметрыСтраницы = Новый Структура;
	ПараметрыСтраницы.Вставить("Обновление", Истина);
	
	ПерейтиНаСтраницу(АдресСтраницы, ПараметрыСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Диалог 			   = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);	
	Диалог.Заголовок   = НСтр("ru = 'Выберите каталог для сохранения'");
	Если Команда.Имя = "Сохранить" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьФрагмент", ЭтотОбъект);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьСКартинкамиФрагмент", ЭтотОбъект);
	КонецЕсли;	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФрагмент(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущаяСсылка	= ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	ИмяФайла		= ЭтотОбъект.Заголовок;
	ИмяФайла		= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = НСтр("ru = 'СтатьяБазыЗнаний'");
	КонецЕсли;	
	ПутьКФайлу		= Результат[0] + "\" + ИмяФайла + ".html";	
	
	ТекстСтатьиHTML = "";
	Если ЗначениеЗаполнено(Объект.СтатьяБазыЗнаний) Тогда
		ТекстСтатьиHTML = ПолучитьТекстСтатьиHTMLНаСервере();
	КонецЕсли; 
	
	Если Не ПустаяСтрока(ТекстСтатьиHTML) Тогда
		ТекстСтраницы = ТекстСтатьиHTML; 
	Иначе	
		ТекстСтраницы = ЭтотОбъект.ДокументHTML;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Метод не доступен в web-клиенте'"));
			
	#Иначе	
	
	ЗаписьТекста  = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ПутьКФайлу);
	ЗаписьТекста.Записать(ТекстСтраницы);
	ЗаписьТекста.Закрыть();	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьОкончание", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, ПутьКФайлу);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОкончание(Результат, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСКартинками(Команда)
	
	Диалог 			   = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);	
	Диалог.Заголовок   = НСтр("ru = 'Выберите каталог для сохранения'");
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьСКартинкамиФрагмент", ЭтотОбъект);	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСКартинкамиФрагмент(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ИмяФайла		= ЭтотОбъект.Заголовок;
	ИмяФайла		= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	
	МестоСохранения = Результат[0] + "\";
	КаталогКартинок = МестоСохранения + ИмяФайла + "_files";
	КаталогКартинокОтносительный = "./" + ИмяФайла + "_files/";
	СоздатьКаталог(КаталогКартинок);	
	АдресаКартинок	= Новый Соответствие;
	
	ТекстСтатьиHTML = "";
	Если ЗначениеЗаполнено(Объект.СтатьяБазыЗнаний) Тогда
		ТекстСтатьиHTML = ПолучитьТекстСтатьиHTMLНаСервере();
	КонецЕсли; 
	
	Если Не ПустаяСтрока(ТекстСтатьиHTML) Тогда
		ТекстСтраницы = ТекстСтатьиHTML; 
	Иначе	
		ТекстСтраницы = ЭтотОбъект.ДокументHTML;
	КонецЕсли;	
	
	КопияСтроки		= ТекстСтраницы;
	ОстатокСтроки	= ТекстСтраницы;	
	Позиция			= СтрНайти(ОстатокСтроки, "src=""e1cib/tempstorage/");
	Пока Позиция > 0 Цикл
		СтрокаДокумента = Сред(ОстатокСтроки, Позиция);
		КонецИмени		= СтрНайти(СтрокаДокумента, """", , 6);
		АдресФайла		= Сред(СтрокаДокумента, 6, КонецИмени - 6);
		Попытка
			ДвоичныеДаные    = ПолучитьИзВременногоХранилища(АдресФайла);
			ИмяФайлаКартинки = КаталогКартинок + "\" + Сред(АдресФайла, 19) + ".png"; 
			ДвоичныеДаные.Записать(ИмяФайлаКартинки);
			ИмяФайлаКартинкиОтносительное = КаталогКартинокОтносительный + Сред(АдресФайла, 19) + ".png";			
			АдресаКартинок.Вставить(АдресФайла, ИмяФайлаКартинкиОтносительное)
		Исключение
		КонецПопытки;							
		ОстатокСтроки	= Сред(СтрокаДокумента, КонецИмени + 1);
		Позиция			= СтрНайти(ОстатокСтроки, "src=""e1cib/tempstorage/");
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из АдресаКартинок Цикл		
		АдресВДокументе	= """" + КлючИЗначение.Ключ + """";
		НовыйАдресФайла = "'" + КлючИЗначение.Значение + "'";
		КопияСтроки     = СтрЗаменить(КопияСтроки, АдресВДокументе, НовыйАдресФайла);
	КонецЦикла;		
	
	#Если НЕ ВебКлиент Тогда
		
	ПутьКФайлу	 = МестоСохранения + ИмяФайла + ".html";	
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ПутьКФайлу);
	ЗаписьТекста.Записать(КопияСтроки);
	ЗаписьТекста.Закрыть();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьОкончание", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, ПутьКФайлу);
	
	#Иначе
			
	ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Метод не доступен в web-клиенте'"));
	Возврат;
		
	#КонецЕсли		
		
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстСтатьиHTMLНаСервере()
	
	Если Объект.СтатьяБазыЗнаний.РазделИмпортирован Тогда
		Возврат БазаЗнанийHTMLВызовСервера.ПолучитьТекстСтатьиИмпортированнойИзФайла(Объект.СтатьяБазыЗнаний, Истина);
	Иначе
		Возврат БазаЗнанийHTMLВызовСервера.ПолучитьТекстСтатьиБазыЗнаний(Объект.СтатьяБазыЗнаний, Истина);
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура ЗакрытьОкноПоиска(Команда)
	
	Элементы.ГруппаПоиск.Видимость = Ложь;
	Элементы.ФормаПоиск.Пометка    = Ложь;
	СтрокаПоиска        = "";
	РезультатПоискаHTML = "";
	НаправлениеПоиска   = 0;
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтраницаПоиска(Команда)
	
	ВыполнитьПоиск(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтраницаПоиска(Команда)
	
	ВыполнитьПоиск(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуWiki(Команда)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Адрес", БазаЗнанийКлиентСерверПовтИсп.ПолучитьЗначениеОбщейНастройки("АдресMediaWiki"));
	ОткрытьВнешнююСсылкуВыполнить(КодВозвратаДиалога.Нет, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПрофильПользователя(Команда)
	
	ПараметрыСсылки	= Новый Структура;
	ПараметрыСсылки.Вставить("id", Строка(ТекущийПользователь.УникальныйИдентификатор()));
	АдресСтраницы = КонструкторСсылки_page("user", ПараметрыСсылки);
	
	ПерейтиНаСтраницу(АдресСтраницы); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокСтатей(Команда)
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаEmail(Команда)
	
	Если ЗначениеЗаполнено(Объект.СтатьяБазыЗнаний) Тогда
		ФормаПараметры     = Новый Структура;
		ФормаПараметры.Вставить("СтатьяБазыЗнаний", Объект.СтатьяБазыЗнаний);
		ФормаПараметры.Вставить("Вложения", 		Новый Массив);
		ФормаПараметры.Вставить("СтатьяВАрхивеZIP", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтправкиСтатьиНаПочту", ЭтотОбъект);
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.УправлениеITОтделом8УФФормаДокумента", ФормаПараметры,,,,,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаEmailВоВложении(Команда)
	
	#Если НЕ ВебКлиент Тогда 
	Если Не ЗначениеЗаполнено(Объект.СтатьяБазыЗнаний) Тогда
		Возврат;
	КонецЕсли;
	
	РабочийКаталогТекущегоПользователя = РабочийКаталогТекущегоПользователяНаСервере();
	ИмяФайла = "article_knowledge_base";
		
	МестоСохранения       = РабочийКаталогТекущегоПользователя + "kb\" 
		+ СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_") + "\";
	КаталогПутьСохранения = Новый Файл(МестоСохранения);
	
	Если НЕ КаталогПутьСохранения.Существует() Тогда
		СоздатьКаталог(МестоСохранения);
	КонецЕсли;
		
	КаталогПутьСохранения = Неопределено;
	
	КаталогКартинок = МестоСохранения + ИмяФайла + "_files";
	КаталогКартинокОтносительный = "./" + ИмяФайла + "_files/";
	Попытка
		СоздатьКаталог(КаталогКартинок);
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось создать архивный файл статьи (Ошибка при создании каталога).'"));
		Возврат;
	КонецПопытки;	
	
	АдресаКартинок	= Новый Соответствие;
	ТекстСтатьиHTML = ПолучитьТекстСтатьиHTMLНаСервере();
	КопияСтроки		= ТекстСтатьиHTML;
	ОстатокСтроки	= ТекстСтатьиHTML;
	Позиция			= СтрНайти(ОстатокСтроки, "src=""e1cib/tempstorage/");
	Пока Позиция > 0 Цикл
		СтрокаДокумента = Сред(ОстатокСтроки, Позиция);
		КонецИмени		= СтрНайти(СтрокаДокумента, """", , 6);
		АдресФайла		= Сред(СтрокаДокумента, 6, КонецИмени - 6);
		Попытка
			ДвоичныеДаные    = ПолучитьИзВременногоХранилища(АдресФайла);
			ИмяФайлаКартинки = КаталогКартинок + "\" + Сред(АдресФайла, 19) + ".png";			
			ДвоичныеДаные.Записать(ИмяФайлаКартинки);
			ИмяФайлаКартинкиОтносительное = КаталогКартинокОтносительный + Сред(АдресФайла, 19) + ".png";			
			АдресаКартинок.Вставить(АдресФайла, ИмяФайлаКартинкиОтносительное)
		Исключение
		КонецПопытки;							
		ОстатокСтроки	= Сред(СтрокаДокумента, КонецИмени + 1);
		Позиция			= СтрНайти(ОстатокСтроки, "src=""e1cib/tempstorage/");
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из АдресаКартинок Цикл		
		АдресВДокументе	= """" + КлючИЗначение.Ключ + """";
		НовыйАдресФайла = "'" + КлючИЗначение.Значение + "'";
		КопияСтроки     = СтрЗаменить(КопияСтроки, АдресВДокументе, НовыйАдресФайла);
	КонецЦикла;
	
	МассивПрисоедененныхФайлов = ПолучитьПрисоединенныеФайлыНаСервере();
	Если МассивПрисоедененныхФайлов.Количество() > 0 Тогда
		Для Каждого СтрокаМассива Из МассивПрисоедененныхФайлов Цикл
			Попытка
				ДвоичныеДаные    = ПолучитьИзВременногоХранилища(СтрокаМассива.АдресВоВременномХранилище);
				ИмяПрисоединенногоФайла = КаталогКартинок + "\" + СтрокаМассива.Представление;			
				ДвоичныеДаные.Записать(ИмяПрисоединенногоФайла);
			Исключение
				Продолжить;
			КонецПопытки;	
		КонецЦикла;	
	КонецЕсли;	
	
	ПутьКФайлу	 = МестоСохранения + ИмяФайла + ".html";	
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ПутьКФайлу);
	ЗаписьТекста.Записать(КопияСтроки);
	ЗаписьТекста.Закрыть();
	
	Попытка
		ЗаписьZIP = Новый ЗаписьZipФайла(МестоСохранения + ИмяФайла + ".zip");		
		ЗаписьZIP.Добавить(МестоСохранения + "*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, 
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);			
		ЗаписьZIP.Записать();
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать архивный файл статьи.'"));
		Возврат;
	КонецПопытки;	
	
	ФайлАрхива = Новый Файл(МестоСохранения + ИмяФайла + ".zip");
	Если ФайлАрхива.Существует() Тогда		
		НачатьПомещениеФайла(Новый ОписаниеОповещения("ПослеПомещенияФайлаАрхиваСтатьи", ЭтотОбъект,
			Новый Структура("МестоСохранения", МестоСохранения)), , МестоСохранения + ИмяФайла + ".zip", Ложь, 
				УникальныйИдентификатор);
	КонецЕсли;
	#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ФОРМОЙ

&НаКлиенте
Процедура УстановитьДоступность()
	
	КолСтрокИстории = Объект.История.Количество();
	
	КнопкаНазад 	= (КолСтрокИстории > 1 И ТекущаяСтраница > 1);
	КнопкаВперед	= (КолСтрокИстории > 1 И ТекущаяСтраница < КолСтрокИстории);
	
	Элементы.ФормаСтраницаНазад.Доступность		= КнопкаНазад;
	Элементы.КонтекстноеМенюНазад.Доступность	= КнопкаНазад;
	Элементы.ФормаСтраницаВперед.Доступность	= КнопкаВперед;
	Элементы.ФормаСтраницаВперед.Доступность	= КнопкаВперед;
	
	Элементы.ФормаПоиск.Пометка = Элементы.ГруппаПоиск.Видимость;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАВИГАЦИОННЫЕ ССЫЛКИ

&НаКлиенте
Процедура ОткрытьВнешнююСсылку(АдресСсылки)
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да		, НСтр("ru = 'Да (в браузере)'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Нет	, НСтр("ru = 'Нет (в окне 1С)'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена	, НСтр("ru = 'Отмена (не открывать)'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВнешнююСсылкуВыполнить", ЭтотОбъект,
		Новый Структура("Адрес", АдресСсылки));
	ПоказатьВопрос(ОписаниеОповещения,
		НСтр("ru='Открыть внешнюю ссылку в окне браузера по умолчанию?
		|" + АдресСсылки + "'"),
		СписокКнопок,
		,
		КодВозвратаДиалога.Отмена,
		,
		КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_create(Знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если ПараметрыСсылки.name = "category" Тогда
		ИДКомментарий		= ?(ПараметрыСсылки.Свойство("parent"), ПараметрыСсылки.parent, "");
		КомментарийСсылка	= ПолучитьСсылкуПоИдентификатору("Комментарии", ИДКомментарий);
		ЗначенияЗаполнения	= Новый Структура("Родитель", КомментарийСсылка);
		ПараметрыФормы		= Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ИмяФормыСсылки		= "Справочник.КатегорииБазыЗнаний.ФормаОбъекта";
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеИзмененияДанныхКатегории", ЭтотОбъект,
			Новый Структура("ЭтоНовый", Истина));
	ИначеЕсли ПараметрыСсылки.name = "article" Тогда
		ИДКатегория			= ?(ПараметрыСсылки.Свойство("category"), ПараметрыСсылки.category, "");
		КатегорияСсылка		= ПолучитьСсылкуПоИдентификатору("КатегорииБазыЗнаний", ИДКатегория);
		
		ЗначенияЗаполнения	= Новый Структура;
		ЗначенияЗаполнения.Вставить("Категория", КатегорияСсылка);
		
		ПараметрыФормы		= Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ИмяФормыСсылки		= "Справочник.СтатьиБазыЗнаний.Форма.РедактированиеСтатьи";
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеИзмененияДанныхСтатьи", ЭтотОбъект,
			Новый Структура("ЭтоНовый", Истина));
	ИначеЕсли ПараметрыСсылки.name = "comment" Тогда
		ИДКомментарий	= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
		ИДСтатья		= ?(ПараметрыСсылки.Свойство("article"), ПараметрыСсылки.article, "");
		ИДАвтор			= ?(ПараметрыСсылки.Свойство("user"), ПараметрыСсылки.user, "");
		
		КомментарийСсылка	= ПолучитьСсылкуПоИдентификатору("Комментарии", ИДКомментарий);
		СтатьяСсылка		= ПолучитьСсылкуПоИдентификатору("СтатьиБазыЗнаний", ИДСтатья);
		ПользовательСсылка	= ПолучитьСсылкуПоИдентификатору("Пользователи", ИДАвтор);
		
		ЗначенияЗаполнения	= Новый Структура;
		ЗначенияЗаполнения.Вставить("ВладелецКомментария"	, ?(ЗначениеЗаполнено(СтатьяСсылка), СтатьяСсылка, ТекущаяСсылка));
		ЗначенияЗаполнения.Вставить("Автор"					,
			?(ЗначениеЗаполнено(ПользовательСсылка), ЭтотОбъект.ТекущийПользователь, ПользовательСсылка));
		
		ПараметрыФормы		= Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("Родитель"			, КомментарийСсылка);
		
		ИмяФормыСсылки		= "Справочник.Комментарии.Форма.ФормаРедактирования";
		
		ПараметрыОповещения	= Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка"	, КомментарийСсылка);
		ПараметрыОповещения.Вставить("Статья"	, ТекущаяСсылка);
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеИзмененияДанныхКомментария", ЭтотОбъект, ПараметрыОповещения);
		РежимОткрытия 		= РежимОткрытияОкнаФормы.Независимый;
	Иначе 
		Возврат;
	КонецЕсли;
		
	ОткрытьФорму(ИмяФормыСсылки, ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_edit(Знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	
	Если ПараметрыСсылки.name = "category" Тогда
		Идентификатор		= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
		ЭлементСсылка		= ПолучитьСсылкуПоИдентификатору("КатегорииБазыЗнаний", Идентификатор);
		ИмяФормыСсылки		= "Справочник.КатегорииБазыЗнаний.ФормаОбъекта";
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеИзмененияДанныхКатегории", ЭтотОбъект,
			Новый Структура("Категория", ЭлементСсылка));
	ИначеЕсли ПараметрыСсылки.name = "article" Тогда
		Идентификатор		= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
		ЭлементСсылка		= ПолучитьСсылкуПоИдентификатору("СтатьиБазыЗнаний", Идентификатор);
		ИмяФормыСсылки		= "Справочник.СтатьиБазыЗнаний.Форма.РедактированиеСтатьи";
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеИзмененияДанныхСтатьи", ЭтотОбъект,
			Новый Структура("Статья", ЭлементСсылка));
	ИначеЕсли ПараметрыСсылки.name = "comment" Тогда
		Идентификатор		= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
		ЭлементСсылка		= ПолучитьСсылкуПоИдентификатору("Комментарии", Идентификатор);
		ИмяФормыСсылки		= "Справочник.Комментарии.Форма.ФормаРедактирования";
		
		ПараметрыОповещения	= Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка"	, ЭлементСсылка);
		ПараметрыОповещения.Вставить("Статья"	, ТекущаяСсылка);
		
		ОписаниеОповещения	= Новый ОписаниеОповещения("ПослеИзмененияДанныхКомментария", ЭтотОбъект, ПараметрыОповещения);
	Иначе 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ссылка не определена.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ЭлементСсылка);		
	ОткрытьФорму(ИмяФормыСсылки, ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_delete(Знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьПерехода = "";
	
	Если ПараметрыСсылки.name = "comment" Тогда
		Идентификатор		= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
		КомментарийСсылка	= ПолучитьСсылкуПоИдентификатору("Комментарии", Идентификатор);
		УдалитьКомментарийНаСервере(КомментарийСсылка);
		ОбластьПерехода		= "comments";
	Иначе 
		Возврат;
	КонецЕсли;
	
	ОбновитьСтраницу(Неопределено);
	
	Если НЕ ПустаяСтрока(ОбластьПерехода) Тогда
		ПерейтиНаОбластьСтраницы(ОбластьПерехода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_rating(Знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
//	ИмяОбласти		= ?(ПараметрыСсылки.Свойство("name"), ПараметрыСсылки.name, "");
	Идентификатор	= ?(ПараметрыСсылки.Свойство("id"), ПараметрыСсылки.id, "");
	Если НЕ ПараметрыСсылки.name = "article" Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСсылка	= ПолучитьСсылкуПоИдентификатору("СтатьиБазыЗнаний", Идентификатор);
	Если НЕ ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ссылка не определена.'"));
		Возврат;
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ПослеИзмененияДанныхСтатьи", ЭтотОбъект,
		Новый Структура("Статья", ЭлементСсылка));
	
	ПараметрыФормы = Новый Структура("Статья, Пользователь", ЭлементСсылка, ТекущийПользователь);
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеРейтинга", ПараметрыФормы, ЭтотОбъект,,,,
		ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_refresh(Знач ДанныеСсылки)
	
	Если ТипЗнч(ДанныеСсылки) = Тип("Строка") Тогда
		ДанныеСсылки = РазобратьАдресСсылкиНаСервере(ДанныеСсылки);
	КонецЕсли;
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти	= ПараметрыСсылки.name;
	ТекстHTML	= БазаЗнанийHTMLКлиент.ПолучитьЧастьСтраницыОбновления(ДанныеСсылки);

	НачПозиция = СтрНайти(ДокументHTML, "id='" + ИмяОбласти + "'");
	Если НачПозиция > 0 Тогда
		ТекстHTMLУдалить = БазаЗнанийHTMLКлиентСервер.ВыделитьЭлементHTMLПоТегу(ДокументHTML, НачПозиция, "div");
		ДокументHTML = СтрЗаменить(ДокументHTML, ТекстHTMLУдалить, ТекстHTML);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_search(Знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	ТекстПоиска	= ?(ПараметрыСсылки.Свойство("text"), ПараметрыСсылки.text, "");
	Если ПустаяСтрока(ТекстПоиска) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Значение для поиска не определено.'"));
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаПоиск.Видимость = Истина;
	УстановитьДоступность();
	
	СтрокаПоиска = ТекстПоиска;
	
	ВыполнитьПоиск(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_subscribe(Знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПараметрыСсылки.name = "category" Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияСсылка = ПолучитьСсылкуПоИдентификатору("КатегорииБазыЗнаний", ПараметрыСсылки.id);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь"			, ЭтотОбъект.ТекущийПользователь);
	ПараметрыФормы.Вставить("КатегорияБазыЗнаний"	, КатегорияСсылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИзмененияДанныхПодписки", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("РегистрСведений.ИзбранноеБазыЗнаний.Форма.ФормаРедактирования", ПараметрыФормы, ЭтотОбъект,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресСсылки_getlink(Знач ДанныеСсылки)
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	
	СтатьяСсылка = ПолучитьСсылкуПоИдентификатору("СтатьиБазыЗнаний", ПараметрыСсылки.id);
	
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("СсылкаНаОбъект", СтатьяСсылка);
	ОткрытьФорму("Обработка.БазаЗнаний.Форма.ФормаПолучитьСсылкуНаОбъект", ПараметрыФормы, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_mailto(ПараметрСсылки)
	ПочтовыйАдрес = Сред(ПараметрСсылки, 8);
	
	МассивКонтакты = ПолучитьКонтактыПоEMailНаСервере(ПочтовыйАдрес);
	ВзаимодействияКлиент.СоздатьНовоеВзаимодействие(
		"ЭлектронноеПисьмоИсходящее",
		Новый Структура("ЗначенияЗаполнения", Новый Структура("Контакт", МассивКонтакты[0].Контакт)));
		
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_file(ПараметрСсылки)
	
	ПутьКФайлу	= Сред(ПараметрСсылки, 6);
	Если Лев(ПутьКФайлу, 3) = "///" Тогда
		ПутьКФайлу = Сред(ПутьКФайлу, 4);
	КонецЕсли;
	
	// Уберем пробелы.
	ПутьКФайлу	= СтрЗаменить(ПутьКФайлу, "%20", " ");
	
	ОбъектФайл	= Новый Файл(ПутьКФайлу);
	Если НЕ ОбъектФайл.Существует() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Файл не найден. Открыть его не представляется возможным.'"));
		Возврат;
	КонецЕсли;
	
	ИмяФайла	= ОбъектФайл.ИмяБезРасширения;
	Расширение	= ОбъектФайл.Расширение;
	
	Если НЕ ЗначениеЗаполнено(Расширение) И Лев(ИмяФайла, 5) = "pict_" Тогда
		ПутьКФайлу     = СтрЗаменить(ПутьКФайлу, "/", "\");
		ПараметрыФормы = Новый Структура("СтрокаHTML", "<html><body><img src='" + ПутьКФайлу + "'></body></html>");
		ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.ПросмотрHTML", ПараметрыФормы);
	Иначе
		#Если НЕ ВебКлиент Тогда
		ПутьКФайлу     = СтрЗаменить(ПутьКФайлу, "/", "\");
		#КонецЕсли
		НачатьЗапускПриложения(Новый ОписаниеОповещения("НавигационнаяСсылка_file_Окончание", ЭтотОбъект), ПутьКФайлу); 		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_fileid(ПараметрСсылки)
	
	ФайлИД		= Сред(ПараметрСсылки, СтрНайти(ПараметрСсылки, "fileid=") + 7);	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(ФайлИД);
	Если НЕ ДанныеФайла = Неопределено И ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
		Если ДанныеФайла.Зашифрован Тогда
			Возврат;
		КонецЕсли;		
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Ошибка получения файла'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФайлаНаСервере(ФайлИД)
	
	Попытка
		СсылкаНаФайл = Справочники.СтатьиБазыЗнанийПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ФайлИД));
		Возврат РаботаСФайлами.ДанныеФайла(СсылкаНаФайл, Новый Структура("ИдентификаторФормы", УникальныйИдентификатор));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура НавигационнаяСсылка_e1c(ПараметрСсылки)
	
	Если СтрНайти(ПараметрСсылки, "e1cib") > 0 Тогда  
		Если СтрНайти(ПараметрСсылки, "tempstorage") > 0 Тогда
			НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/tempstorage"));
			Если НомерНачало > 0 Тогда
				Попытка
					АдресХранилище 	= Сред(ПараметрСсылки, НомерНачало);		    
					ПараметрыФормы = Новый Структура("СтрокаHTML", "<html><body><img src='" + АдресХранилище + "'></body></html>");
					ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.ПросмотрHTML", ПараметрыФормы, ЭтотОбъект,
						Новый УникальныйИдентификатор);
				Исключение
					Возврат;
				КонецПопытки;	
			Иначе	
				Возврат;
			КонецЕсли;
		ИначеЕсли СтрНайти(ПараметрСсылки, "data") > 0 Тогда
			НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/data"));
			Если НомерНачало > 0 Тогда
				Попытка
					Адрес = Сред(ПараметрСсылки, НомерНачало);	
					ПерейтиПоНавигационнойСсылке(Адрес); 
				Исключение					
					Возврат;
				КонецПопытки;	
			Иначе
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;	
		
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура НавигационнаяСсылка_file_Окончание(Результат, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры	

&НаКлиенте
Процедура НавигационнаяСсылка_kbapi(ПараметрСсылки, ВыделятьКлючевыеСлова = Ложь)
	
	АдресСтраницы	= ПараметрСсылки;
	ДанныеСсылки	= РазобратьАдресСсылкиНаСервере(АдресСтраницы);
	
	Если ДанныеСсылки.Команда = "page" Тогда
		ПерейтиНаСтраницу(ДанныеСсылки, ВыделятьКлючевыеСлова);
	ИначеЕсли ДанныеСсылки.Команда = "create" Тогда
		ОбработатьАдресСсылки_create(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "edit" Тогда
		ОбработатьАдресСсылки_edit(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "delete" Тогда
		ОбработатьАдресСсылки_delete(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "rating" Тогда
		ОбработатьАдресСсылки_rating(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "refresh" Тогда
		ОбработатьАдресСсылки_refresh(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "search" Тогда
		ОбработатьАдресСсылки_search(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "subscribe" Тогда
		ОбработатьАдресСсылки_subscribe(ДанныеСсылки);
	ИначеЕсли ДанныеСсылки.Команда = "getlink" Тогда
		ОбработатьАдресСсылки_getlink(ДанныеСсылки);	
	ИначеЕсли ДанныеСсылки.Команда = "openfile" Тогда
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(КомментарийВложениеПоID(ДанныеСсылки.Параметры.id),
			УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	Иначе 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ПараметрСсылки);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОПОВЕЩЕНИЙ

&НаКлиенте
Процедура ОбработатьОповещенияПользователя()
	
	ОтключитьОбработчикОжидания("ОбработатьОповещенияПользователя");
	ПодключитьОбработчикОжидания("ОбработатьОповещенияПользователя", 5, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ МЕТОДЫ

&НаКлиенте
Процедура ОткрытьВнешнююСсылкуВыполнить(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        УправлениеITОтделом8УФКлиент.ЗапуститьПрограмму(ДопПараметры.Адрес);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтрокаHTML", ДопПараметры.Адрес);
		ПараметрыФормы.Вставить("Заголовок"	, ДопПараметры.Адрес);
		
		ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.ПросмотрHTML", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияДанныхКатегории(Результат, ДопПараметры) Экспорт
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	
	Если ДопПараметры.Свойство("ЭтоНовый") И ДопПараметры.ЭтоНовый Тогда
		ОбновитьСтраницу(Неопределено);
	ИначеЕсли ДопПараметры.Свойство("Категория") И ДопПараметры.Категория = ТекущаяСсылка Тогда
		ОбновитьСтраницу(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияДанныхСтатьи(Результат, ДопПараметры) Экспорт
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	
	Если ДопПараметры.Свойство("ЭтоНовый") И ДопПараметры.ЭтоНовый Тогда
		ОбновитьСтраницу(Неопределено);
	ИначеЕсли ДопПараметры.Свойство("Статья") И ДопПараметры.Статья = ТекущаяСсылка Тогда
		ОбновитьСтраницу(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияДанныхКомментария(Результат, ДопПараметры) Экспорт
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	
	КомментарийСсылка	= ?(ДопПараметры.Свойство("Ссылка"), ДопПараметры.Ссылка, Неопределено);
	СтатьяСсылка		= ?(ДопПараметры.Свойство("Статья"), ДопПараметры.Статья, Неопределено);
	
	Если ЗначениеЗаполнено(КомментарийСсылка) Тогда
		Объект.Область = "comment_" + Строка(КомментарийСсылка.УникальныйИдентификатор());
	Иначе 
		Объект.Область = "comments";
	КонецЕсли;
	
	Если СтатьяСсылка = ТекущаяСсылка Тогда
		ПараметрыСсылки = Новый Структура("name, article",
			"comments",
			Строка(СтатьяСсылка.УникальныйИдентификатор()));
		ДанныеСсылки	= Новый Структура("Команда, Параметры", "refresh", ПараметрыСсылки);
		ОбработатьАдресСсылки_refresh(ДанныеСсылки);
	Иначе 
		ОбновитьСтраницу(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПослеИзмененияДанныхПодписки(Результат, ДопПараметры) Экспорт
	
	// ничего делать не будем пока
	
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура ПриЗакрытииНаСервере()
	БазаЗнаний.ЗавершитьСессииПользователя(КлючСессии);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьКомментарийНаСервере(КомментарийСсылка)
	Справочники.Комментарии.УдалитьКомментарий(КомментарийСсылка);
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазобратьАдресСсылкиНаСервере(АдресСсылки)
	
	Возврат БазаЗнанийAPIКлиентСервер.РазобратьАдресСсылки(АдресСсылки);
	
КонецФункции

&НаСервереБезКонтекста
Функция КонструкторСсылки_page(ИмяСтраницы, Параметры)
	
	Возврат БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page(ИмяСтраницы, Параметры);
	
КонецФункции

// Основное окно портала

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекущуюСсылку(ТаблицаИстория, ТекущаяСтрока)
	
	Если ТекущаяСтрока <= 0 ИЛИ ТекущаяСтрока > ТаблицаИстория.Количество() Тогда
		ТекущаяСтрока = ТаблицаИстория.Количество();
	КонецЕсли;
	
	Если ТекущаяСтрока = 0 Тогда
		Возврат "";
	Иначе 
		Возврат ТаблицаИстория[ТекущаяСтрока - 1].СсылкаСтраницы;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекущийАдресСсылки(ТаблицаИстория, ТекущаяСтрока)
	
	Если ТекущаяСтрока <= 0 ИЛИ ТекущаяСтрока > ТаблицаИстория.Количество() Тогда
		ТекущаяСтрока = ТаблицаИстория.Количество();
	КонецЕсли;
	
	Если ТекущаяСтрока = 0 Тогда
		Возврат "";
	Иначе 
		Возврат ТаблицаИстория[ТекущаяСтрока - 1].АдресСсылки;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьПоследующиеСтрокиИстории(ТекСтраница, История)
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаИстории Из История Цикл
		Если СтрокаИстории.НомерСтроки > ТекСтраница Тогда
			МассивСтрок.Добавить(СтрокаИстории);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		История.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

//@skip-warning
&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьКлючевыеСловаПоСтрокеПоиска(КлючевыеСлова, ЗначениеСтроки)
	
	ОператорыПП = Новый Массив;
	ОператорыПП.Добавить("И");
	ОператорыПП.Добавить("AND");
	ОператорыПП.Добавить("#");
	ОператорыПП.Добавить("ИЛИ");
	ОператорыПП.Добавить("OR");
	ОператорыПП.Добавить("|");
	ОператорыПП.Добавить("НЕ");
	ОператорыПП.Добавить("NOT");
	ОператорыПП.Добавить("~");
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗначениеСтроки, " ");
	Для Каждого Слово Из МассивСлов Цикл
		Если ОператорыПП.Найти(Слово) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Слово = СокрЛП(Слово);
		
		Если Лев(Слово, 5) = "РЯДОМ" ИЛИ Лев(Слово, 4) = "NEAR" Тогда
			Продолжить;
		ИначеЕсли Лев(Слово, 1) = "/" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(Слово, 2, 1)) Тогда
			Продолжить;
		ИначеЕсли Слово = "(" ИЛИ Слово = ")" Тогда
			Продолжить;
		ИначеЕсли Лев(Слово, 1) = "#" Тогда
			Слово = Сред(Слово, 2);
		ИначеЕсли СтрНайти(Слово, "#") Тогда
			Позиция = СтрНайти(Слово, "#");
			Слово	= Лев(Слово, Позиция - 1);
		ИначеЕсли Лев(Слово, 1) = "!" Тогда
			Слово = Сред(Слово, 2);
		ИначеЕсли Прав(Слово, 1) = "*" Тогда
			Слово = Лев(Слово, СтрДлина(Слово) - 1);
		КонецЕсли;
		
		КлючевыеСлова.Добавить(Слово);
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуПоИдентификатору(ВидСправочника, Идентификатор)
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Справочники[ВидСправочника].ПустаяСсылка();
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(Идентификатор);
	Возврат Справочники[ВидСправочника].ПолучитьСсылку(УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьКонтактыПоEMailНаСервере(ПочтовыйАдрес, Представление = "")
	
	Массив = Новый Массив;
	
	Если Взаимодействия.НайтиПоEmail(ПочтовыйАдрес, Ложь, НайденныеКонтакты) = Истина Тогда
		Для Каждого СтрокаТаблицы Из НайденныеКонтакты Цикл
			Массив.Добавить(
				Новый Структура("Адрес, Представление, Контакт",
					ПочтовыйАдрес, СтрокаТаблицы.НаименованиеКонтакта, СтрокаТаблицы.Ссылка));
		КонецЦикла;
	КонецЕсли;
	
	Если Массив.Количество() = 0 Тогда
		Массив.Добавить(
			Новый Структура("Адрес, Представление, Контакт",
				ПочтовыйАдрес, ?(ПустаяСтрока(Представление), ПочтовыйАдрес, Представление), Неопределено));
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

//@skip-warning
&НаСервереБезКонтекста
Функция ДобавитьИнформациюОПросмотреНаСервере(ЭлементСсылка, ТекущийПользователь = Неопределено)
	
	ТипСсылки = ТипЗнч(ЭлементСсылка);
	Если ТипСсылки = Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда
		БазаЗнаний.ДобавитьПросмотрСтатьи(ЭлементСсылка);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.НовостиБазыЗнаний") Тогда
		БазаЗнаний.ДобавитьПросмотрНовости(ЭлементСсылка, ТекущийПользователь);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиНаСтраницу(знач ДанныеСсылки, знач ПараметрыВывода = Неопределено)
	
	Если ТипЗнч(ДанныеСсылки) = Тип("Строка") Тогда
		ДанныеСсылки = РазобратьАдресСсылкиНаСервере(АдресСтраницы);
	КонецЕсли;
	
	ПараметрыСсылки = ДанныеСсылки.Параметры;
	Если НЕ ПараметрыСсылки.Свойство("name") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ПараметрыВывода) = Тип("Структура") Тогда
		ПараметрыВывода = Новый Структура;
	КонецЕсли;
	
	Обновление				= ?(ПараметрыВывода.Свойство("Обновление"), ПараметрыВывода.Обновление, Ложь);
	ВыделятьКлючевыеСлова	= ?(ПараметрыВывода.Свойство("ВыделятьКлючевыеСлова"),
		ПараметрыВывода.ВыделятьКлючевыеСлова, Ложь);
	
	ТекущийАдрес = ПолучитьТекущийАдресСсылки(Объект.История, ТекущаяСтраница);
	Если ТекущийАдрес = АдресСтраницы И НЕ Обновление Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСсылки.name = "article" Тогда
		Идентификатор	= ПараметрыСсылки.id;
		ЭлементСсылка	= ПолучитьСсылкуПоИдентификатору("СтатьиБазыЗнаний", Идентификатор);
		ТекущаяСсылка	= ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
		
		РазделИд = ?(ПараметрыСсылки.Свойство("section"), ПараметрыСсылки.section, "");
		Если ЭлементСсылка = ТекущаяСсылка И ЗначениеЗаполнено(РазделИд) Тогда
			ПерейтиНаОбластьСтраницы(РазделИд);			
			Объект.СтатьяБазыЗнаний = Неопределено;
			Объект.Область			= "";			
			Возврат;			
		КонецЕсли;
		
		Объект.СтатьяБазыЗнаний = ЭлементСсылка;
		Объект.Область			= РазделИд;
		
		Если ЗначениеЗаполнено(ЭлементСсылка) 
			И ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.СтатьиБазыЗнаний")
			И ТипЗнч(ДанныеСсылки)  = Тип("Структура") Тогда
			ДанныеСсылки.Вставить("СтатьяБазыЗнанийСсылка", ЭлементСсылка);			
			ДанныеСсылки.Вставить("КаталогВременныхФайлов", КаталогВременныхФайловПользователя);
		КонецЕсли;	
		
		ПараметрыВывода.Вставить("ВыделятьКлючевыеСлова", ВыделятьКлючевыеСлова);

		ДобавитьИнформациюОПросмотреНаСервере(ЭлементСсылка);
	ИначеЕсли ПараметрыСсылки.name = "category" Тогда
		Идентификатор	= ПараметрыСсылки.id;
		ЭлементСсылка	= ПолучитьСсылкуПоИдентификатору("КатегорииБазыЗнаний", Идентификатор);
	ИначеЕсли ПараметрыСсылки.name = "tag" Тогда
		Идентификатор	= ПараметрыСсылки.id;
		ЭлементСсылка	= ПолучитьСсылкуПоИдентификатору("Теги", Идентификатор);
	ИначеЕсли ПараметрыСсылки.name = "news_item" Тогда
		Идентификатор	= ПараметрыСсылки.id;
		ЭлементСсылка	= ПолучитьСсылкуПоИдентификатору("НовостиБазыЗнаний", Идентификатор);

		ДобавитьИнформациюОПросмотреНаСервере(ЭлементСсылка, ТекущийПользователь);
	Иначе 
		ЭлементСсылка	= Неопределено;
	КонецЕсли;
	
	Если ТекущаяСтраница > 0 Тогда
		УдалитьПоследующиеСтрокиИстории(ТекущаяСтраница, Объект.История);
	КонецЕсли;
	
	ЭтотОбъект.ДокументHTML = БазаЗнанийHTMLКлиент.ПолучитьТекстСтраницы(ДанныеСсылки);
	
	Если ТекущийАдрес <> АдресСтраницы Тогда
		НоваяСтрока = Объект.История.Добавить();
		НоваяСтрока.ТекстСтраницы	= ЭтотОбъект.ДокументHTML;
		НоваяСтрока.АдресСсылки		= АдресСтраницы;
		НоваяСтрока.СсылкаСтраницы	= ЭлементСсылка;
	КонецЕсли;
	
	ЭтотОбъект.ТекущаяСтраница	= Объект.История.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияКаталогаВременныхФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	КаталогВременныхФайловПользователя = Результат;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПерейтиНаОбластьСтраницы(ОбластьПерехода);
	
	Попытка
		Элементы.ДокументHTML.Документ.parentWindow.eval("scroller.goto('#" + ОбластьПерехода + "');");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск(Направление)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда		
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда		
		НайденныйЭлемент = Элементы.СтрокаПоиска.СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.СтрокаПоиска.СписокВыбора.Удалить(НайденныйЭлемент);
		КонецЕсли;		
		Элементы.СтрокаПоиска.СписокВыбора.Вставить(0, СтрокаПоиска);
		Если Элементы.СтрокаПоиска.СписокВыбора.Количество() > 10 Тогда
			Элементы.СтрокаПоиска.СписокВыбора.Удалить(10);
		КонецЕсли;		
	КонецЕсли;
	
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется поиск ""%1""...'"),
		СтрокаПоиска);
	Состояние(ТекстСостояния, , , БиблиотекаКартинок.Лупа);
	
	Результат = ВыполнитьПоискНаСервере(Направление, СтрокаПоиска);
	
	РезультатыПоиска		= Результат.РезультатПоиска;
	HTMLТекст				= Результат.HTMLТекст;	
	ПолноеКоличество		= Результат.ПолноеКоличество;	
	
	Если РезультатыПоиска.Количество() > 0 Тогда		
		ПоказаныРезультатыСПо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Показаны %1 - %2 из %3'"),
			Формат(ТекущаяПозицияПоиска - РезультатыПоиска.Количество() + 1, "ЧН=0; ЧГ="),
			Формат(ТекущаяПозицияПоиска, "ЧН=0; ЧГ="),
			Формат(ПолноеКоличество, "ЧН=0; ЧГ="));
		
		Элементы.СледующаяСтраницаПоиска.Доступность	= 
			(ПолноеКоличество - ТекущаяПозицияПоиска) > РезультатыПоиска.Количество();
		Элементы.ПредыдущаяСтраницаПоиска.Доступность	= (ТекущаяПозицияПоиска - 20 > 0);
		
	Иначе
		
		ПоказаныРезультатыСПо = НСтр("ru = 'Не найдено'");		
		Элементы.СледующаяСтраницаПоиска.Доступность	= Ложь;
		Элементы.ПредыдущаяСтраницаПоиска.Доступность	= Ложь;
		
		ТекстПоиска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Комбинация слов ""%1"" нигде не встречается.<br><br>
			|<b>Рекомендации:</b>
			|<li>Убедитесь, что все слова написаны без ошибок.
			|<li>Попробуйте использовать другие ключевые слова.
			|<li>Попробуйте уменьшить количество искомых слов.'"),
			СокрЛП(СтрокаПоиска));
		
		HTMLТекст = 
		"<html>
		|<head>
		|</head>
		|<body>
		|" + ТекстПоиска + "
		|</body>
		|</html>";
		
	КонецЕсли;
	
	РезультатПоискаHTML = БазаЗнанийКлиент.ОбработатьРезультатПолнотекстовогоПоиска(HTMLТекст, РезультатыПоиска);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПоискНаСервере(Направление, СтрокаПоиска)
	
	Если Направление = 0 Тогда
		ТаблицаРезультатовПоиска.Очистить();
		ТекПользователь = Пользователи.ТекущийПользователь();	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СтатьиБазыЗнаний.Ссылка КАК Статья
			|ИЗ
			|	Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
			|ГДЕ
			|	ИСТИНА
			|	И СтатьиБазыЗнаний.Категории.Категория В
			|			(ВЫБРАТЬ
			|				СправочникКатегорииБазыЗнаний.Ссылка КАК Ссылка
			|			ИЗ
			|				Справочник.КатегорииБазыЗнаний КАК СправочникКатегорииБазыЗнаний
			|			ГДЕ
			|				ВЫБОР
			|					КОГДА СправочникКатегорииБазыЗнаний.ТипКатегории = ЗНАЧЕНИЕ(Перечисление.ТипыКатегорийСтатейБазыЗнаний.Приватная)
			|						ТОГДА ВЫБОР
			|								КОГДА СправочникКатегорииБазыЗнаний.Автор = &ТекущийПользователь
			|									ТОГДА ИСТИНА
			|								ИНАЧЕ ЛОЖЬ
			|							КОНЕЦ
			|					ИНАЧЕ ИСТИНА
			|				КОНЕЦ)
			|	И &ДопУсловия";
			
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);	
		БазаЗнанийВызовСервера.УстановитьПараметрыЗапросаПоСтрокеПоиска(СтрокаПоиска, Запрос, "");	
		ТаблицаРезультатовПоиска.Загрузить(Запрос.Выполнить().Выгрузить());
		ПолноеКоличество = ТаблицаРезультатовПоиска.Количество();
		ИндексЭлемента   = 0;
		ГраницаИндекса   = ?(ПолноеКоличество > 20, 20, ПолноеКоличество);  
		
	ИначеЕсли Направление = 1 Тогда // Следующая страница.
		
		ПолноеКоличество = ТаблицаРезультатовПоиска.Количество();
		ИндексЭлемента   = ТекущаяПозицияПоиска;
		ГраницаИндекса   = ?(ТекущаяПозицияПоиска + 20 > ПолноеКоличество, ПолноеКоличество - 1, ТекущаяПозицияПоиска + 20);
		
	ИначеЕсли Направление = -1 Тогда // Предыдущая страница.
		
		ПолноеКоличество = ТаблицаРезультатовПоиска.Количество();
		ИндексЭлемента   = ?(ТекущаяПозицияПоиска - 40 < 0, 0, ТекущаяПозицияПоиска - 40);
		ГраницаИндекса   = ?(ИндексЭлемента + 20 > ПолноеКоличество, ПолноеКоличество - 1, ИндексЭлемента + 20);
		
	КонецЕсли;	
	
	ТекстHtmlРезультат  = "";	
	ТекстHtmlНачало     = "<body><div class=""main"">" + Символы.ПС;				
	ТекстHtmlОкончание  = "</div></body>";
	ТекстHtmlРезультат  = ТекстHtmlНачало;	
	МассивЭлементов		= Новый Массив;
	Пока ИндексЭлемента < ГраницаИндекса Цикл	
		ТекстЭлемента = "<div class=""presentation"">
						|<a id=""FullTextSearchListItem"" href=""#"" sel_num=""" + ИндексЭлемента + """>" 
                        + СтрШаблон(НСтр("ru = 'Статьи базы знаний: %1'"), 
                            ВыделитьТекст(Строка(ТаблицаРезультатовПоиска[ИндексЭлемента].Статья), СтрокаПоиска))
						+ "</a>
						|</div>
						|<div class=""textPortion"">" + Символы.ПС
           				+ ВыделитьТекст(ТаблицаРезультатовПоиска[ИндексЭлемента].Статья.КраткоеОписание, СтрокаПоиска) + "
       					|</div>";
        ТекстHtmlРезультат = ТекстHtmlРезультат + ТекстЭлемента + Символы.ПС;
		МассивЭлементов.Добавить(ТаблицаРезультатовПоиска[ИндексЭлемента].Статья);				
		ИндексЭлемента     = ИндексЭлемента + 1;		
	КонецЦикла;
	
	ТекущаяПозицияПоиска = ИндексЭлемента;
	ТекстHtmlРезультат   = ТекстHtmlРезультат + ТекстHtmlОкончание;			
	Результат 		     = Новый Структура;
	Результат.Вставить("РезультатПоиска"		, МассивЭлементов);		
	Результат.Вставить("ПолноеКоличество"		, ТаблицаРезультатовПоиска.Количество());
	Результат.Вставить("HTMLТекст"				, ТекстHtmlРезультат);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыделитьТекст(Знач ИсходнаяСтрока, Знач Текст)

	Результат = СокрЛП(ИсходнаяСтрока);
	
	ЗапрещенныеСимволы = ".,:;-+/\|" + Символы.НПП + Символы.ВТаб;
	РезультатВрем = Текст;
	Для Индекс = 1 По СтрДлина(ЗапрещенныеСимволы) Цикл
		Пока СтрНайти(РезультатВрем, Сред(ЗапрещенныеСимволы, Индекс, 1)) > 0 Цикл
			РезультатВрем = СтрЗаменить(РезультатВрем, Сред(ЗапрещенныеСимволы, Индекс, 1), " ");
		КонецЦикла;
	КонецЦикла;
	
	Пока СтрНайти(РезультатВрем, "  ") > 0 Цикл
		РезультатВрем = СтрЗаменить(РезультатВрем, "  ", " ");
	КонецЦикла;
	Если НЕ ПустаяСтрока(РезультатВрем) Тогда
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РезультатВрем, " ", Истина, Истина);
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Текст);
	КонецЕсли;	
	
	ИндексЦвета = 1;
	
	Для Каждого ПодстрокаТекста Из МассивСтрок Цикл
		
		ИндексПоиска = СтрНайти(ВРег(Результат), ВРег(ПодстрокаТекста));
		Пока ИндексПоиска > 0 Цикл
			
			Подстрока = "<span class='bold high" + Формат(ИндексЦвета, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + "'>" 
				+ Сред(Результат, ИндексПоиска, СтрДлина(ПодстрокаТекста)) + "</span>";			
			Результат = Лев(Результат, ИндексПоиска - 1) 
				+ Подстрока
				+ Сред(Результат, ИндексПоиска + СтрДлина(ПодстрокаТекста));
				
			Если СтрДлина(Результат) > ИндексПоиска + СтрДлина(Подстрока) Тогда
				ИндексПоиска = СтрНайти(ВРег(Результат), ВРег(ПодстрокаТекста), НаправлениеПоиска.СНачала, 
					ИндексПоиска + СтрДлина(Подстрока));
			Иначе
				ИндексПоиска = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		ИндексЦвета = Мин(ИндексЦвета + 1, 6);
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ВыделитьТекст()

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	УстановитьПривилегированныйРежим(Истина);	
	НастройкиТекущегоПользователя 	= "БазаЗнаний_ОсновнаяФорма_Настройки_" 
		+ Пользователи.ТекущийПользователь().Наименование;
	Настройки 						= ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы, НастройкиТекущегоПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Настройки <> Неопределено Тогда
        Попытка 
            Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(Настройки.СтрокаПоискаСписокВыбора);
        Исключение
            ЗаписьЖурналаРегистрации("БазаЗнаний", УровеньЖурналаРегистрации.Ошибка,,,
                НСтр("ru = 'Ошибка загрузки настроек'"),);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы(СтруктураНастроек)
	
	УстановитьПривилегированныйРежим(Истина);	
	НастройкиТекущегоПользователя 	= "БазаЗнаний_ОсновнаяФорма_Настройки_" 
		+ Пользователи.ТекущийПользователь().Наименование;
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, НастройкиТекущегоПользователя, СтруктураНастроек);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)	
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;		
	Если Не Элементы.ГруппаПоиск.Видимость Тогда
		Элементы.ГруппаПоиск.Видимость = Истина;
		Элементы.ФормаПоиск.Пометка	   = Истина;	
	КонецЕсли;
	
	ВыполнитьПоиск(0);

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПослеОтправкиСтатьиНаПочту(Результат, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеПомещенияФайлаАрхиваСтатьи(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(Адрес) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать архивный файл статьи.'"));
		Возврат;
	КонецЕсли;
	
	ФормаПараметры = Новый Структура;
	ФормаПараметры.Вставить("СтатьяБазыЗнаний", Объект.СтатьяБазыЗнаний);
	ФормаПараметры.Вставить("СтатьяВАрхивеZIP", Истина);	
	МассивВложений = Новый Массив;	
	МассивВложений.Добавить(Новый Структура("АдресВоВременномХранилище, Представление", 
		Адрес, "article_knowledge_base.zip"));
	ФормаПараметры.Вставить("Вложения", МассивВложений);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтправкиСтатьиВАрхивеНаПочту", 
		ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.УправлениеITОтделом8УФФормаДокумента", ФормаПараметры,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиСтатьиВАрхивеНаПочту(Результат, ДополнительныеПараметры) Экспорт
	
	Попытка
		УдалитьФайлы(ДополнительныеПараметры.МестоСохранения);
    Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПрисоединенныеФайлыНаСервере()
	
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.СтатьяБазыЗнаний) Тогда
		СтатьяСсылка = Объект.СтатьяБазыЗнаний;
		Если СтатьяСсылка.Файлы.Количество() > 0 Тогда
			Для Каждого СтрокаФайл Из СтатьяСсылка.Файлы Цикл
				Попытка
					ДанныеФайла       = РаботаСФайлами.ДанныеФайла(СтрокаФайл.Файл,
						Новый Структура("ИдентификаторФормы", ЭтотОбъект.УникальныйИдентификатор));
					СтруктураВозврата = Новый Структура("АдресВоВременномХранилище, Представление",
						ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
					Результат.Добавить(СтруктураВозврата);
				Исключение
					Продолжить;
				КонецПопытки;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

&НаСервереБезКонтекста
Функция КомментарийВложениеПоID(Знач ID)
	
	Возврат Справочники.КомментарииПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ID));
	
КонецФункции

#КонецОбласти