
#Область ОбработчикиСобытийФормы

// Обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	Если ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		
		Объект.ИсходныеДанные.Загрузить(СтруктураДанных.Штрихкоды);
		
		Если ЗначениеЗаполнено(СтруктураДанных.СтруктураДействий) Тогда
			
			ПараметрДействия = Неопределено;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьОрганизацию", ПараметрДействия) Тогда
				УстановитьЭлементОтбораСКД(КомпоновщикНастроек, "Организация", ПараметрДействия, ЗначениеЗаполнено(ПараметрДействия));
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьСклад", ПараметрДействия) Тогда
				УстановитьЭлементОтбораСКД(КомпоновщикНастроек, "МестоХранения", ПараметрДействия, ЗначениеЗаполнено(ПараметрДействия));
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежимПечатиИзДокумента", ПараметрДействия) Тогда
				ПечатьИзДокумента = Истина;
				Элементы.Настройки.Видимость = Ложь;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьТаблицуТоваров", ПараметрДействия) Тогда
				ЗаполнитьТаблицуТоваровНаСервере(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Вызов обработки из интерфейса
		ЗначениеНастройки = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонЭтикеткиШтрихкода) Тогда
		Объект.ШаблонЭтикеткиШтрихкода = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойШаблонЭтикетки");
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриСохраненииДанныхВНастройкахНаСервере" формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если СохраненныеНастройки <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из СохраненныеНастройки Цикл
			// Обратное преобразование имени для хранения ключа соответствия для хранения в структуре
			ИмяКлюча = СтрЗаменить(КлючИЗначение.Ключ,"_QTQ_",".");
			ИмяКлюча = СтрЗаменить(ИмяКлюча,"_QPQ_"," ");
			Если ИмяКлюча = "_QQQ_" Тогда
				ИмяКлюча = "";
			КонецЕсли;
			Настройки.Вставить(ИмяКлюча, КлючИЗначение.Значение);
		КонецЦикла;
		
	Иначе
		
		// Сохранение отбора выполняется только если это не печать из документа
		Настройки.Вставить("НастройкиОтбора",Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки));
		
	КонецЕсли;
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("АдресВХранилище") И ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		
		СохраненныеНастройки = Новый Структура;
		Для Каждого КлючИЗначение Из Настройки Цикл
			// Преобразование имени для хранения ключа соответствия для хранения в структуре
			ИмяКлюча = СтрЗаменить(КлючИЗначение.Ключ,".","_QTQ_");
			ИмяКлюча = СтрЗаменить(ИмяКлюча," ","_QPQ_");
			Если ИмяКлюча = "" Тогда
				ИмяКлюча = "_QQQ_";
			КонецЕсли;
			СохраненныеНастройки.Вставить(ИмяКлюча, КлючИЗначение.Значение);
		КонецЦикла;
		
		Настройки.Очистить();
		
	Иначе
			
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

// Процедура - обработчик события "НачалоВыбора" поля "Номенклатура" табличной части "Штрихкоды".
//
&НаКлиенте
Процедура ЗапасыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ЗапасыНоменклатураНачалоВыбора()

// Процедура - обработчик события "Очистка" поля "Номенклатура" табличной части "Запасы".
//
&НаКлиенте
Процедура ЗапасыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ЗапасыНоменклатураОчистка()

// Процедура - обработчик события "НачалоВыбора" поля "Характеристика" табличной части "Запасы".
//
&НаКлиенте
Процедура ЗапасыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ЗапасыХарактеристикаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля "Характеристика" табличной части "Запасы".
//
&НаКлиенте
Процедура ЗапасыХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ЗапасыХарактеристикаОчистка()

// Процедура - обработчик события "НачалоВыбора" поля "Партия" табличной части "Запасы".
//
&НаКлиенте
Процедура ЗапасыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ЗапасыПартияНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля "Партия" табличной части "Запасы".
//
&НаКлиенте
Процедура ЗапасыПартияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ЗапасыПартияОчистка()

// Процедура - обработчик события "ПриИзменении" поля "КоличествоЦенников" табличной части "Запасы".
//
&НаКлиенте
Процедура ЗапасыКоличествоЦенниковПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	ТекущиеДанные.Выбран = Истина;
	
КонецПроцедуры // ЗапасыКоличествоЦенниковПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "КоличествоЭтикеток" табличной части "Запасы".
//
&НаКлиенте
Процедура ЗапасыКоличествоЭтикетокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	ТекущиеДанные.Выбран = Истина;
	
КонецПроцедуры // ЗапасыКоличествоЭтикетокПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "Выбран" табличной части "Запасы".
//
&НаКлиенте
Процедура ЗапасыВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	ТекущаяСтрока = ТекущиеДанные.НомерСтроки - 1;
	
	Если НЕ ТекущиеДанные.Выбран Тогда
		
	Иначе
		
		ОчиститьСообщения();
		
		ТекущиеДанные.Выбран = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыВыбранПриИзменении()


#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура КомандаОткрытьШаблоныЭтикетокИЦенников(Команда)
	
	ОткрытьФорму("Справочник.ШаблоныЭтикеток.ФормаСписка");

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтбор(Команда)
	
	ВидимостьОтбора = НЕ ВидимостьОтбора;
	Элементы.ГруппаОтбор.Видимость = ВидимостьОтбора;
	Элементы.ФормаПоказатьОтбор.Заголовок = ?(ВидимостьОтбора, НСтр("ru = 'Скрыть отбор'"), НСтр("ru = 'Показать отбор'"));
	
КонецПроцедуры

// Процедура - обработчик команды "ЗаполнитьТаблицуТоваров".
//
&НаКлиенте
Процедура ЗаполнитьТаблицуЗапасов(Команда)
	
	Если Объект.Штрихкоды.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'При перезаполнении все введенные вручную данные будут потеряны, продолжить?'");
		Результат = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьТаблицуЗапасовЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
	Иначе
		
		ЗаполнитьТаблицуТоваровНаСервере();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуЗапасовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатВопроса;
    Если Объект.Штрихкоды.Количество() = 0 ИЛИ КодВозвратаДиалога.Да = Результат Тогда
        ЗаполнитьТаблицуТоваровНаСервере();
    КонецЕсли;

КонецПроцедуры // ЗаполнитьТаблицуТоваров()

// Процедура - обработчик команды "Печать".
//
&НаКлиенте
Процедура Печать(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонЭтикеткиШтрихкода) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите шаблон этикетки.'"));
		Возврат;		
	КонецЕсли;
	
	Если Объект.Штрихкоды.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрано ни одного товара'"));
		Возврат;		
	КонецЕсли;
		
	Если ПроверитьЗаполнение() Тогда
		
		ПараметрКоманды = Новый Массив;   // Добавим объект обработки печати ценников и этикеток в массив параметров печати.
		ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")); // В дальнейшем будем обращаться к объекту через ПараметрКоманды[0].
				
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикеток", // Для вызова метода менеджера обработки "Печать".
			"Этикетки",
			ПараметрКоманды,
			ЭтаФорма, // Форма владелец.
			ПолучитьПараметры());
		
		
	КонецЕсли;
	
КонецПроцедуры // Печать()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость элементов в зависимости от настройки параметров формы.
//
&НаСервере
Процедура ОбновитьВидимостьЭлементов()
		
КонецПроцедуры // ОбновитьВидимостьЭлементов()

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция УстановитьЭлементОтбораСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, Использование = Истина)

	НайденныйЭлемент = Неопределено;
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПараметра);
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			НайденныйЭлемент = ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденныйЭлемент = Неопределено Тогда
		НайденныйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(ЗначениеПараметра);
		ПравоеЗначение = СписокЗначений;
	Иначе
		НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПравоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	НайденныйЭлемент.Использование  = Использование;
	НайденныйЭлемент.ЛевоеЗначение  = Поле;
	НайденныйЭлемент.ПравоеЗначение = ПравоеЗначение;
	
	Возврат НайденныйЭлемент;

КонецФункции // НайтиЭлементОтбораСКД()

// Процедура выполняет загрузку настроек отбора из настроек по умолчанию.
//
&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	СхемаКомпоновкиДанных = Обработки.ПечатьЭтикеток.ПолучитьМакет("ПоляШаблона");
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,
			УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры // ЗагрузитьНастройкиОтбораПоУмолчанию()

&НаСервере
Функция ПолучитьПараметры()
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Товары.Колонки.Добавить("МестоХранения", Новый ОписаниеТипов("СправочникСсылка.МестаХранения"));
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("КарточкаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.КарточкиНоменклатуры"));	
	Товары.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число"));
	КС = Новый КвалификаторыСтроки(200);
	Товары.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка", ,, , КС));
	Товары.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикеток"));
	Товары.Колонки.Добавить("ОтветственныйСотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Товары.Колонки.Добавить("ОтветственныйСотрудникITОтдела", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));	
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТЧ Из Объект.Штрихкоды Цикл
		Если Не СтрокаТЧ.Выбран Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ШаблонЭтикетки) Тогда
			НоваяСтрока.ШаблонЭтикетки = Объект.ШаблонЭтикеткиШтрихкода;
		КонецЕсли;
	КонецЦикла;
	
	Товары.Сортировать("Номенклатура Возр, КарточкаНоменклатуры Возр");
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Штрихкоды", ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор));
	ПараметрыПечати.Вставить("СтруктураМакетаШаблона", Неопределено);
	
	Возврат ПараметрыПечати;
	
КонецФункции

// Процедура выполняет заполнение табличной части "Штрихкоды".
//
&НаСервере
Процедура ЗаполнитьТаблицуТоваровНаСервере(ПроверятьЗаполнение = Истина)
	
	Если ПроверятьЗаполнение И ПроверитьЗаполнение() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// Поля необходимые для вывода в таблицу товаров на форме.
	СтруктураНастроек = Обработки.ПечатьЭтикеток.ПолучитьПустуюСтруктуруНастроек();
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Организация");
	СтруктураНастроек.ОбязательныеПоля.Добавить("МестоХранения");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ОтветственныйСотрудник");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ОтветственныйСотрудникITОтдела");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КарточкаНоменклатуры");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоОстаток");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Сумма");
	
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроек;
	
	Если Объект.ИсходныеДанные.Количество() > 0 ИЛИ ПечатьИзДокумента Тогда
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
		СтруктураНастроек.ИсходныеДанные = Объект.ИсходныеДанные.Выгрузить();
	Иначе
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБД";
	КонецЕсли;
	
	Объект.Штрихкоды.Очистить();
	
	// Загрузка сформированного списка товаров.
	СтруктураРезультата = Обработки.ПечатьЭтикеток.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	Для Каждого СтрокаТЧ Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.Штрихкоды.Добавить();
		НоваяСтрока.Номенклатура        = СтрокаТЧ.Номенклатура;
		НоваяСтрока.КарточкаНоменклатуры= СтрокаТЧ.КарточкаНоменклатуры;
		НоваяСтрока.Штрихкод            = СтрокаТЧ.Штрихкод;
		НоваяСтрока.КоличествоЭтикеток	= 1;
		НоваяСтрока.Организация			= СтрокаТЧ.Организация;
		НоваяСтрока.МестоХранения		= СтрокаТЧ.МестоХранения;
		НоваяСтрока.ОтветственныйСотрудник= СтрокаТЧ.ОтветственныйСотрудник;
		НоваяСтрока.ОтветственныйСотрудникITОтдела= СтрокаТЧ.ОтветственныйСотрудникITОтдела;
		НоваяСтрока.Количество 			= СтрокаТЧ.Количество;
		НоваяСтрока.Сумма  				= СтрокаТЧ.Сумма;
		
		НоваяСтрока.Выбран = Истина;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьТаблицуТоваровНаСервере()

&НаКлиенте
Функция ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего)
	
	Если Количество < КоличествоВсего Тогда
		
		Текст = Текст
		        + ?(Текст <> "", Символы.ПС, "")
		        + НСтр("ru = 'Отметка выбора установлена для %КоличествоВыбранных% строк из %КоличествоВсего%.'");
	
		Текст = Текст
		        + Символы.ПС
		        + НСтр("ru = 'Проверьте: не заполнены либо количество, либо не задан шаблон ценника (этикетки). В этом случае отметка выбора для строк не может быть установлена.'");
	
		Текст = СтрЗаменить(Текст, "%КоличествоВыбранных%", Количество);
		Текст = СтрЗаменить(Текст, "%КоличествоВсего%", КоличествоВсего);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Операция выполнена'"), ,Текст);
	
	КонецЕсли;
	
КонецФункции // ПолучитьТекстПроверки()

// Процедура вызывается при нажатии на кнопку "Выбрать платежи".
//
&НаКлиенте
Процедура ВыбратьСтроки()
	
	Количество = 0;
	
	Для Каждого СтрокаТЧ Из Объект.Штрихкоды Цикл
		
		СтрокаТЧ.Выбран = Истина;
		
		Если СтрокаТЧ.Выбран Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВсего = Объект.Штрихкоды.Количество();
	
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, КоличествоВсего);
	
КонецПроцедуры // ВыбратьСтроки()

// Процедура вызывается при нажатии на кнопку "Исключить платежки".
//
&НаКлиенте
Процедура ИсключитьСтроки()
	
	Для Каждого СтрокаТЧ Из Объект.Штрихкоды Цикл
		СтрокаТЧ.Выбран = Ложь
	КонецЦикла;
	
КонецПроцедуры // ИсключитьСтроки()


#КонецОбласти