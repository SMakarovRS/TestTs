
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ОбращенияКлиента.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	ОбращенияКлиента.Параметры.УстановитьЗначениеПараметра("ДоступностьРолиПолныеПрава", 
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
	
	ОбращенияКлиента.Параметры.УстановитьЗначениеПараметра("ДоступностьРолиПросмотраЧужихЗаданий", 			
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	ОбращенияКлиента.Параметры.УстановитьЗначениеПараметра("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	ОбращенияКлиента.Параметры.УстановитьЗначениеПараметра("СписокПользователейИГруппПользователей",			
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекущийПользователь));
	
	ОбращенияКлиента.Параметры.УстановитьЗначениеПараметра("Клиент", Неопределено);
	ОбращенияКлиента.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	
	ПоискКлиентНаименование = Справочники.Пользователи.ПустаяСсылка();
	Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Принять обращение'");
	Элементы.СтраницаПринятьОбращение.Видимость = Ложь;
	Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
	
	УстановитьУсловноеОформление();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПоискКлиентНаименованиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
    СтандартнаяОбработка)
	
	ИзменитьПараметрыПоиска(Элемент.Имя, Текст, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентНаименованиеОчистка(Элемент, СтандартнаяОбработка)
	
	ИзменитьПараметрыПоиска(Элемент.Имя, "", Ложь);
	Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
	Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Принять обращение'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентТелефонОчистка(Элемент, СтандартнаяОбработка)
	
	ИзменитьПараметрыПоиска(Элемент.Имя, "", Ложь);
	Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
	Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Принять обращение'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентТелефонИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		ИзменитьПараметрыПоиска(Элемент.Имя, "", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентТелефонОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, 
										ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("ВыполнитьПоиск", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентEmailОчистка(Элемент, СтандартнаяОбработка)
	
	ИзменитьПараметрыПоиска(Элемент.Имя, "", Ложь);
	Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
	Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Принять обращение'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентEmailИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		ИзменитьПараметрыПоиска(Элемент.Имя, "", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентEmailОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, 
										ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("ВыполнитьПоиск", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентИННОчистка(Элемент, СтандартнаяОбработка)
	
	ИзменитьПараметрыПоиска(Элемент.Имя, "", Ложь);
	Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
	Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Принять обращение'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентИННИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		ИзменитьПараметрыПоиска(Элемент.Имя, "", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентИННОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, 
										ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("ВыполнитьПоиск", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура СтраницыМастераПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Элементы.ПерейтиК.Доступность = Истина;
	
	Если Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
		Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Принять обращение'");	
	ИначеЕсли Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение Тогда
		Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Зарегистрировать новое обращение'");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОтображенияИнформацииПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
    
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Anchor = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрСсылки = ДанныеСобытия.Href;
		
	Если СтрДлина(ПараметрСсылки) > 4 И (Лев(ПараметрСсылки, 4) = "http" ИЛИ СтрНайти(ПараметрСсылки, "e1cib")) Тогда
		Если СтрНайти(ПараметрСсылки, "data") > 0 Тогда
			НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/data"));
			Если НомерНачало > 0 Тогда
				Попытка
					Адрес = Сред(ПараметрСсылки, НомерНачало);	
					ПерейтиПоНавигационнойСсылке(Адрес); 
				Исключение					
					Возврат;
				КонецПопытки;	
			Иначе
				НачатьЗапускПриложения(,ПараметрСсылки);
			КонецЕсли;	
		Иначе	
			НачатьЗапускПриложения(,ПараметрСсылки);
		КонецЕсли;
		
	ИначеЕсли СтрДлина(ПараметрСсылки) > 7 И Лев(ПараметрСсылки, 7) = "mailto:" Тогда
		
		ТекущиеДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВзаимодействияКлиент.СоздатьНовоеВзаимодействие(
			"ЭлектронноеПисьмоИсходящее",
			Новый Структура("ЗначенияЗаполнения", Новый Структура("Контакт", ТекущиеДанные.Ссылка)));
				
	ИначеЕсли СтрДлина(ПараметрСсылки) > 4 И Лев(ПараметрСсылки, 4) = "tel:" Тогда
		ПерейтиПоНавигационнойСсылке(ПараметрСсылки);
		
	ИначеЕсли СтрДлина(ПараметрСсылки) > 6 И Лев(ПараметрСсылки, 6) = "e1c://" Тогда
		НавигационнаяСсылка_e1c(ПараметрСсылки);
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(ПараметрСсылки);
		
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СервисПриИзменении(Элемент)
	
	ПриИзмененииСервиса();
		
КонецПроцедуры

&НаКлиенте
Процедура СервисНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтборПараметры		 = Новый Структура();
	Если ЗначениеЗаполнено(Проект) Тогда
		ОтборПараметры.Вставить("Проект", Проект);
	КонецЕсли;
		
	ОписаниеОповещения 	 = Новый ОписаниеОповещения("СервисПослеВыбора", ЭтотОбъект);
	ОткрытьФорму("Справочник.Сервисы.Форма.ФормаВыбора", ОтборПараметры, ЭтаФорма,,,, ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
	
&НаКлиенте
Процедура СервисОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверитьВозможностьВыбора(ВыбранноеЗначение, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Сервис <%1> запрещено использовать.'"),
			ВыбранноеЗначение));
		КонецЕсли;
		
КонецПроцедуры
	
&НаСервере
Процедура ПроверитьВозможностьВыбора(ВыбранноеЗначение, СтандартнаяОбработка, ТекстСообщения = "");
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сервисы") Тогда
			Если ВыбранноеЗначение.Статус <> Перечисления.СтатусыСервисов.ВРаботе Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Проекты") Тогда
			Если ВыбранноеЗначение.Статус <> Перечисления.СтатусыПроекта.ВРаботе Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		Иначе
			Если ВыбранноеЗначение.НеИспользовать = Истина Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Инициатор) Тогда 
		ПриИзмененииИнициатораНаСервере();
		ЗаполнениеКлиентаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Клиент) Тогда 
		Клиент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
			СтандартнаяОбработка = Ложь;
			Модифицированность   = Истина;
			Инициатор 	= ВыбранноеЗначение;
			ПриИзмененииИнициатораНаСервере();
			ЗаполнениеКлиентаНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Инициатор) Тогда 
		МассивКлиент	= Новый Массив();
		ДопустимыеТипы = Новый ОписаниеТипов(МассивКлиент, , );
		Элементы.Клиент.ОграничениеТипа = ДопустимыеТипы;
	Иначе
		ПриИзмененииИнициатораНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Оп = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);
	ЗаданияКлиент.ПолучитьКартинкуИзБуфераОбмена(Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Подключено, ДвоичныеДанные) Экспорт
	
	Если Подключено = Истина Тогда
		ВставитьКартинкуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзДвоичныхДанных(Знач ДвоичныеДанные)
	
	НП=0;
	КП=0;
	//@skip-warning
	Элементы.ОписаниеФорматированныйДокумент.ПолучитьГраницыВыделения(НП, КП);
	Элементы.ОписаниеФорматированныйДокумент.ВыделенныйТекст = "";
	ВставитьКартинкуВОписаниеНаСервере(ДвоичныеДанные, НП);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьКартинкуВОписаниеНаСервере(ДвоичныеДанные, НП)
	
	Картинка = Новый Картинка(ДвоичныеДанные);
	ОписаниеФорматированныйДокумент.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	//@skip-warning
	ОписаниеФорматированныйДокумент.Вставить(НП, Картинка, ТипЭлементаФорматированногоДокумента.Картинка); 
	//@skip-warning
	ОписаниеФорматированныйДокумент.Вставить(НП, Символы.ПС, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьФрагментКода(Команда)
	
	Если Элементы.ОписаниеФорматированныйДокумент.ВыделенныйТекст="" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите фрагмент для раскраски как кода встроенного языка 1С...'"));
	Иначе
		мТекст = Элементы.ОписаниеФорматированныйДокумент.ВыделенныйТекст;
		Элементы.ОписаниеФорматированныйДокумент.ВыделенныйТекст = ЗаданияКлиент.РаскраситьКод1С8(мТекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПоиска

&НаКлиенте
Процедура ДеревоПоискаПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбновитьДанныеПоАктивнойСтроке", 0.1, Истина);
	                                                                                       	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    ТекДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
    Если ТекДанные <> Неопределено Тогда 
        ПоказатьЗначение(, ТекДанные.Ссылка);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    
    Отказ = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаПередНачаломИзменения(Элемент, Отказ)
    
    Отказ = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаПередУдалением(Элемент, Отказ)
    
    Отказ = Истина;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьКлиента(Команда)
	
    СписокВыбора = ПолучитьСписокВыбора();
    СписокВыбора.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ОработатьРезультатВыгрузки", ЭтотОбъект, ), 
		НСтр("ru = 'Выберите тип данных'",));
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПоиск(Команда)
	
	Если ЗначениеЗаполнено(ПоискКлиентНаименование) Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПоискКлиентНаименование;
	ИначеЕсли ЗначениеЗаполнено(ПоискКлиентТелефон) Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПоискКлиентТелефон;
	ИначеЕсли ЗначениеЗаполнено(ПоискКлиентEmail) Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПоискКлиентEmail;
	Иначе
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПоискКлиентНаименование;
	КонецЕсли;
	
	ИзменитьПараметрыПоиска(Неопределено, Неопределено, Неопределено);
	
	Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
	Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Принять обращение'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиК(Команда)
	
	Если Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск Тогда		
		Элементы.СтраницыМастера.ТекущаяСтраница 	= Элементы.СтраницаПринятьОбращение;
		Элементы.ПерейтиК.Заголовок 				= НСтр("ru = 'Зарегистрировать новое обращение'");
        ТекущийЭлемент 								= Элементы.Тема;
		
	Иначе
		ФормаЗадания 					= ОткрытьФорму("Документ.Задание.Форма.ФормаДокумента",,
			ЭтаФорма, Новый УникальныйИдентификатор);
		ФормаЗадания.Объект.Сервис		= Сервис; 
		ФормаЗадания.Объект.Услуга		= Услуга;
		ФормаЗадания.Объект.Процесс		= Процесс;
		ФормаЗадания.Объект.Проект     	= Проект;
		ФормаЗадания.Объект.Инициатор	= Инициатор;
		ФормаЗадания.Объект.Клиент      = Клиент;
		ФормаЗадания.Объект.Тема        = Тема;
		ФормаЗадания.Объект.ТекущийЭтап = ПредопределенноеЗначение("Справочник.ЭтапыПроцессов.Новый");
		ФормаЗадания.МодифицированностьОписаниеФорматированныйДокумент = Истина;
		ФормаЗадания.ОписаниеФорматированныйДокумент = ОписаниеФорматированныйДокумент;
		ФормаЗадания.ОбновитьПереводНаЭтапы();
		ФормаЗадания.Открыть();
		
		Тема	= "";
		Сервис	= ПредопределенноеЗначение("Справочник.Сервисы.ПустаяСсылка");
		Услуга	= ПредопределенноеЗначение("Справочник.Услуги.ПустаяСсылка");
		Проект	= ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		ОписаниеФорматированныйДокумент = ОчиститьФорматированныйДокумент();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ОчиститьФорматированныйДокумент()
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	Возврат ФорматированныйДокумент; 
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменитьПараметрыПоиска(ЭлементИмя, ЭлементЗначение, Использование, ПриОткрытии = Ложь)
	
	Если ЗначениеЗаполнено(ЭлементИмя) Тогда
		ЭтотОбъект[ЭлементИмя] = СокрЛП(ЭлементЗначение);
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ПоискКлиентНаименование) И НЕ ЗначениеЗаполнено(ПоискКлиентТелефон) 
			И НЕ ЗначениеЗаполнено(ПоискКлиентEmail) И НЕ ЗначениеЗаполнено(ПоискКлиентИНН))  Тогда
		ДеревоПоиска.ПолучитьЭлементы().Очистить();
		ОбращенияКлиента.Параметры.УстановитьЗначениеПараметра("Клиент", Неопределено);
		Элементы.ПерейтиК.Доступность = Ложь;
		Элементы.СтраницаПринятьОбращение.Видимость = Ложь;
		Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Принять обращение'");
		Возврат;
	Иначе
		Элементы.ГруппаВыполняетсяПоиск.Видимость = Истина;
		ПодключитьОбработчикОжидания("ВыполнитьПоиск", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	Элементы.ГруппаВыполняетсяПоиск.Видимость = Истина;	
	
	СформироватьДанныеПоПоиску();
	
	Если КоличествоНайденныхКлиентов > 0 Тогда 
		Элементы.ПерейтиК.Доступность				= Истина;
		Элементы.СтраницаПринятьОбращение.Видимость	= Истина;
	КонецЕсли;
	
	Элементы.ГруппаВыполняетсяПоиск.Видимость = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВыборкуДляОбоработкиДанных(Знач ТекстЗапроса, Таблица)
	
	мПеречисленияТипыКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		
		МассивТелефонов = Новый Массив;
		МассивПочты = Новый Массив;
		
		ВыборкаКИ = Выборка.КонтактнаяИнформация.Выбрать();
		Пока ВыборкаКИ.Следующий() Цикл
			
			Если ВыборкаКИ.Тип = мПеречисленияТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				Адрес = НРег(ВыборкаКИ.Представление);
				Если МассивПочты.Найти(Адрес) = Неопределено Тогда
					МассивПочты.Добавить(Адрес);
				КонецЕсли;
			ИначеЕсли ВыборкаКИ.Тип = мПеречисленияТипыКонтактнойИнформации.Телефон Тогда
				СтрокаТелефона = ВыборкаКИ.ЗначенияПолей;
				СтрокаОтвета = УправлениеКонтактнойИнформацией.СведенияОТелефоне(СтрокаТелефона);
				Телефон = УдалитьСимволыИзТелефона(СтрокаОтвета.Представление);
				Если НЕ ПустаяСтрока(Телефон) Тогда
					МассивТелефонов.Добавить(Телефон);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока					= Таблица.Добавить();
		НоваяСтрока.Ссылка			= Выборка.Ссылка;
		НоваяСтрока.Телефоны		= МассивТелефонов;
		НоваяСтрока.Почта			= МассивПочты;
		НоваяСтрока.ИНН				= Выборка.ИНН;
		НоваяСтрока.Наименование	= Выборка.Наименование;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеПоПоиску()
	
	#Область ПодготовкаПоиска
		
	ДеревоПоиска.ПолучитьЭлементы().Очистить();
	ЗаполнитьПанельИнформацииПоДанным(Неопределено);
	ПоискКлиентНаименование = СтрЗаменить(ПоискКлиентНаименование,"""","""""");	
	
	ПриведенныйНомерТелефона = УдалитьСимволыИзТелефона(ПоискКлиентТелефон);
	
	ИскатьНаименование 		= НЕ ПустаяСтрока(ПоискКлиентНаименование);
	ИскатьТелефон 			= НЕ ПустаяСтрока(ПриведенныйНомерТелефона);
	ИскатьПочту 			= НЕ ПустаяСтрока(ПоискКлиентEmail);
	ИскатьИНН 				= НЕ ПустаяСтрока(ПоискКлиентИНН);
		
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ссылка");
	Таблица.Колонки.Добавить("Наименование");
	Таблица.Колонки.Добавить("Телефоны");
	Таблица.Колонки.Добавить("Почта");
	Таблица.Колонки.Добавить("ИНН");
	
	#КонецОбласти
	
	#Область Запрос
	
	#Область КонтактныеЛица
	
	// Выборка из справочника Контактные лица
	Если Не ПустаяСтрока(ПоискКлиентНаименование) Тогда
		Условие = "";
		Условие = Условие + "
		|	И КонтактныеЛица.Наименование ПОДОБНО ""%" + ПоискКлиентНаименование + "%""";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка КАК Ссылка,
		|	КонтактныеЛица.КонтактнаяИнформация.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей,
		|		Страна КАК Страна,
		|		Регион КАК Регион,
		|		Город КАК Город,
		|		АдресЭП КАК АдресЭП,
		|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|		НомерТелефона КАК НомерТелефона,
		|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|		ВидДляСписка КАК ВидДляСписка,
		|		Значение КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	"""" КАК ИНН,
		|	КонтактныеЛица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.ПометкаУдаления = ЛОЖЬ" + Условие + "";
	
	ДобавитьВыборкуДляОбоработкиДанных(ТекстЗапроса, Таблица);
	
	#КонецОбласти	
	
	#Область Контрагенты
	
	// Выборка из справочника Контрагенты
	Если Не ПустаяСтрока(ПоискКлиентНаименование) Тогда
		Условие = "";
		Условие = Условие + "
		|	И Контрагенты.Наименование ПОДОБНО ""%" + ПоискКлиентНаименование + "%""";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.КонтактнаяИнформация.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей,
		|		Страна КАК Страна,
		|		Регион КАК Регион,
		|		Город КАК Город,
		|		АдресЭП КАК АдресЭП,
		|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|		НомерТелефона КАК НомерТелефона,
		|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|		ВидДляСписка КАК ВидДляСписка,
		|		Значение КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ПометкаУдаления = ЛОЖЬ" + Условие + "";
	
	ДобавитьВыборкуДляОбоработкиДанных(ТекстЗапроса, Таблица);
	
	#КонецОбласти
	
	#Область Организации
	
	// Выборка из справочника Организации	
	Если Не ПустаяСтрока(ПоискКлиентНаименование) Тогда
		Условие = "";
		Условие = Условие + "
		|	И Организации.Наименование ПОДОБНО ""%" + ПоискКлиентНаименование + "%""";
	КонецЕсли;
	
	ТекстЗапроса =  
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.КонтактнаяИнформация.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей,
		|		Страна КАК Страна,
		|		Регион КАК Регион,
		|		Город КАК Город,
		|		АдресЭП КАК АдресЭП,
		|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|		НомерТелефона КАК НомерТелефона,
		|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|		ВидДляСписка КАК ВидДляСписка,
		|		Значение КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	Организации.ИНН КАК ИНН,
		|	Организации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ПометкаУдаления = ЛОЖЬ" + Условие + ""; 
	
	ДобавитьВыборкуДляОбоработкиДанных(ТекстЗапроса, Таблица);
	
	#КонецОбласти
	
	#Область Подразделения
	
	// Выборка из справочника Подразделения	
	Если Не ПустаяСтрока(ПоискКлиентНаименование) Тогда
		Условие = "";
		Условие = Условие + "
		|	И Подразделения.Наименование ПОДОБНО ""%" + ПоискКлиентНаименование + "%""";
	КонецЕсли;
	
	ТекстЗапроса =  
		"ВЫБРАТЬ
		|	Подразделения.Ссылка КАК Ссылка,
		|	Подразделения.КонтактнаяИнформация.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей,
		|		Страна КАК Страна,
		|		Регион КАК Регион,
		|		Город КАК Город,
		|		АдресЭП КАК АдресЭП,
		|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|		НомерТелефона КАК НомерТелефона,
		|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|		ВидДляСписка КАК ВидДляСписка,
		|		Значение КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	"""" КАК ИНН,
		|	Подразделения.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	Подразделения.ПометкаУдаления = ЛОЖЬ" + Условие + "";  
	
	ДобавитьВыборкуДляОбоработкиДанных(ТекстЗапроса, Таблица);
	
	#КонецОбласти
	
	#Область Пользователи
	
	// Выборка из справочника Пользователи	
	Если Не ПустаяСтрока(ПоискКлиентНаименование) Тогда
		Условие = "";
		Условие = Условие + "
		|	И Пользователи.Наименование ПОДОБНО ""%" + ПоискКлиентНаименование + "%""";
	КонецЕсли;
	
	ТекстЗапроса =  
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка,
		|	Пользователи.КонтактнаяИнформация.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей,
		|		Страна КАК Страна,
		|		Регион КАК Регион,
		|		Город КАК Город,
		|		АдресЭП КАК АдресЭП,
		|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|		НомерТелефона КАК НомерТелефона,
		|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|		ВидДляСписка КАК ВидДляСписка,
		|		Значение КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	"""" КАК ИНН,
		|	Пользователи.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ПометкаУдаления = ЛОЖЬ
		|	И Пользователи.Недействителен = ЛОЖЬ" + Условие + "";
	
	ДобавитьВыборкуДляОбоработкиДанных(ТекстЗапроса, Таблица);
	
	#КонецОбласти
	
	#Область ПотенциальныеКлиенты 
	
	// Выборка из справочника Потенциальные клиенты	
	Если Не ПустаяСтрока(ПоискКлиентНаименование) Тогда
		Условие = "";
		Условие = Условие + "
		|	И ПотенциальныеКлиенты.Наименование ПОДОБНО ""%" + ПоискКлиентНаименование + "%""";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПотенциальныеКлиенты.Ссылка КАК Ссылка,
		|	ПотенциальныеКлиенты.КонтактнаяИнформация.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей,
		|		Страна КАК Страна,
		|		Регион КАК Регион,
		|		Город КАК Город,
		|		АдресЭП КАК АдресЭП,
		|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|		НомерТелефона КАК НомерТелефона,
		|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|		ВидДляСписка КАК ВидДляСписка,
		|		Значение КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	"""" КАК ИНН,
		|	ПотенциальныеКлиенты.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПотенциальныеКлиенты КАК ПотенциальныеКлиенты
		|ГДЕ
		|	ПотенциальныеКлиенты.ПометкаУдаления = ЛОЖЬ" + Условие + "";
		
	ДобавитьВыборкуДляОбоработкиДанных(ТекстЗапроса, Таблица);
	
	#КонецОбласти
	
	#Область Сотрудники
	
	// Выборка из справочника Сотрудники	
	Если Не ПустаяСтрока(ПоискКлиентНаименование) Тогда
		Условие = "";
		Условие = Условие + "
		|	И Сотрудники.Наименование ПОДОБНО ""%" + ПоискКлиентНаименование + "%""";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.КонтактнаяИнформация.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей,
		|		Страна КАК Страна,
		|		Регион КАК Регион,
		|		Город КАК Город,
		|		АдресЭП КАК АдресЭП,
		|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|		НомерТелефона КАК НомерТелефона,
		|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|		ВидДляСписка КАК ВидДляСписка,
		|		Значение КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	"""" КАК ИНН,
		|	Сотрудники.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.Актуальность = ИСТИНА" + Условие + "";	
	
	ДобавитьВыборкуДляОбоработкиДанных(ТекстЗапроса, Таблица);
	
	#КонецОбласти
	
	#Область ФизическиеЛица 
	
	// Выборка из справочника ФизическиеЛица	
	Если Не ПустаяСтрока(ПоискКлиентНаименование) Тогда
		Условие = "";
		Условие = Условие + "
		|	И ФизическиеЛица.Наименование ПОДОБНО ""%" + ПоискКлиентНаименование + "%""";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка,
		|	ФизическиеЛица.КонтактнаяИнформация.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей,
		|		Страна КАК Страна,
		|		Регион КАК Регион,
		|		Город КАК Город,
		|		АдресЭП КАК АдресЭП,
		|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|		НомерТелефона КАК НомерТелефона,
		|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|		ВидДляСписка КАК ВидДляСписка,
		|		Значение КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	"""" КАК ИНН,
		|	ФизическиеЛица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.ПометкаУдаления = ЛОЖЬ" + Условие + "";	
	
	ДобавитьВыборкуДляОбоработкиДанных(ТекстЗапроса, Таблица);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область Поиск
	
	#Область ПоНаименованию
	
	Если ИскатьНаименование Тогда
		
		Индекс = Таблица.Количество() - 1;
		СтрокаПоискаНаименование = ВРег(ПоискКлиентНаименование);		
		
		Пока Индекс >= 0 Цикл
			Стр = Таблица.Получить(Индекс);
			Найдено = Ложь;
			Если Найдено = Ложь И СтрНайти(ВРег(Стр.Наименование), СтрокаПоискаНаименование) > 0 Тогда
				Найдено = Истина;
			КонецЕсли;
			Если НЕ Найдено Тогда
				Таблица.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоТелефону
	
	Если ИскатьТелефон Тогда
		
		Индекс = Таблица.Количество() - 1;
		
		Пока Индекс >= 0 Цикл
			Стр = Таблица.Получить(Индекс);
			Найдено = Ложь;
			Если Найдено = Ложь И Стр.Телефоны.Количество() > 0 Тогда
				Для Каждого ВремСтр Из Стр.Телефоны Цикл
					Если СтрНайти(ВремСтр, ПриведенныйНомерТелефона) > 0 Тогда
						Найдено = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;				
			КонецЕсли;
			Если НЕ Найдено Тогда
				Таблица.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоПочте
	
	Если ИскатьПочту Тогда
		
		Индекс = Таблица.Количество() - 1;
		СтрокаПоискаПочта	= ВРег(ПоискКлиентEmail);		
		
		Пока Индекс >= 0 Цикл
			Стр = Таблица.Получить(Индекс);
			Найдено = Ложь;
			Если Найдено = Ложь И Стр.Почта.Количество() > 0 Тогда
				Для Каждого ВремСтр Из Стр.Почта Цикл
					Если СтрНайти(ВРег(ВремСтр), СтрокаПоискаПочта) > 0 Тогда
						Найдено = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НЕ Найдено Тогда
				Таблица.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоИНН
	
	Если ИскатьИНН Тогда
		
		Индекс = Таблица.Количество() - 1;
		СтрокаПоискаИНН	= ВРег(ПоискКлиентИНН);		
		
		Пока Индекс >= 0 Цикл
			Стр = Таблица.Получить(Индекс);
			Найдено = Ложь;
			Если Найдено = Ложь И СтрНайти(ВРег(Стр.ИНН), СтрокаПоискаИНН) > 0 Тогда
				Найдено = Истина;
			КонецЕсли;
			Если НЕ Найдено Тогда
				Таблица.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ОбработкаДанных
	
	Таблица.Сортировать("Ссылка");
	ОбработатьВыборкуДанных(Таблица);
	
	#КонецОбласти
				
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборкуДанных(ВыборкаКлиентов)
	
	Если ВыборкаКлиентов.Количество() > 0 Тогда 
		
		КоличествоНайденныхКлиентов = ВыборкаКлиентов.Количество();
		
		СписокКлиентов = РеквизитФормыВЗначение("ДеревоПоиска");
		СписокКлиентов.Строки.Очистить();
		
		Для Каждого Строка Из ВыборкаКлиентов Цикл
			мСсылка					= Строка.Ссылка;
			НоваяСтрока				= СписокКлиентов.Строки.Добавить();
			НоваяСтрока.Ссылка		= мСсылка;
			
			Если ТипЗнч(мСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
				НоваяСтрока.ИндексКартинки = 1;
			ИначеЕсли ТипЗнч(мСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
				НоваяСтрока.ИндексКартинки = 0;
			ИначеЕсли ТипЗнч(мСсылка) = Тип("СправочникСсылка.Организации") Тогда
				НоваяСтрока.ИндексКартинки = 4;
			ИначеЕсли ТипЗнч(мСсылка) = Тип("СправочникСсылка.Подразделения") Тогда
				НоваяСтрока.ИндексКартинки = 3;
			ИначеЕсли ТипЗнч(мСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
				НоваяСтрока.ИндексКартинки = 2;
			ИначеЕсли ТипЗнч(мСсылка) = Тип("СправочникСсылка.ПотенциальныеКлиенты") Тогда
				НоваяСтрока.ИндексКартинки = 5;
			ИначеЕсли ТипЗнч(мСсылка) = Тип("СправочникСсылка.Сотрудники") Тогда
				НоваяСтрока.ИндексКартинки = 7;
			ИначеЕсли ТипЗнч(мСсылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				НоваяСтрока.ИндексКартинки = 6;
			КонецЕсли;
			
		КонецЦикла;
        
        СписокКлиентов.Строки.Сортировать("Ссылка");
		ЗначениеВРеквизитФормы(СписокКлиентов, "ДеревоПоиска");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбора()
    
    СписокТипов = Новый СписокЗначений;
    СписокТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛица"),		НСтр("ru = 'Контактное лицо'"));
    СписокТипов.Добавить(Тип("СправочникСсылка.Контрагенты"),			НСтр("ru = 'Контрагент'"));
	СписокТипов.Добавить(Тип("СправочникСсылка.Организации"),			НСтр("ru = 'Организация'"));
	СписокТипов.Добавить(Тип("СправочникСсылка.Подразделения"),			НСтр("ru = 'Подразделение'"));
	СписокТипов.Добавить(Тип("СправочникСсылка.Пользователи"),			НСтр("ru = 'Пользователь'"));
	СписокТипов.Добавить(Тип("СправочникСсылка.ПотенциальныеКлиенты"),	НСтр("ru = 'Потенциальный клиент'"));
	СписокТипов.Добавить(Тип("СправочникСсылка.Сотрудники"),			НСтр("ru = 'Сотрудник'"));
	СписокТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"),		НСтр("ru = 'Физическое лицо'"));
    
    Возврат СписокТипов;
    
КонецФункции

&НаКлиенте
Процедура ОработатьРезультатВыгрузки(ВыбранныйЭлемент,ДополнительныеПараметры) Экспорт
    
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли; 
	
	ИмяОбъекта = ПолучитьИмяПоТипу(ВыбранныйЭлемент.Значение);
		
	ОткрытьФорму("Справочник." + ИмяОбъекта + ".ФормаВыбора");       
    
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяПоТипу(Тип)
    
    Возврат Метаданные.НайтиПоТипу(Тип).Имя;
    
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЗаданияСервер.УстановитьУсловноеОформлениеСпискаЗаданий(ОбращенияКлиента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДанным(Знач Ссылка)
	
	Содержание = ПолучитьИнформацию(Ссылка);
	
	Если Содержание <> ПолеОтображенияИнформации Тогда
        ПолеОтображенияИнформации = Содержание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьТегиИСпецСимволыИзТекста(Знач Текст, Знач ФорматHTML = Истина) Экспорт
	
	Результат = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(Текст);
	
	Если ФорматHTML = Истина Тогда
		Результат = СтрЗаменить(Результат, "&", "&amp;");
		Результат = СтрЗаменить(Результат, "'", "&#8216;");
		Результат = СтрЗаменить(Результат, "<", "&lt;");
		Результат = СтрЗаменить(Результат, ">", "&gt;");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеПоАктивнойСтроке()
        
	Если Элементы.СтраницыМастера.ТекущаяСтраница.Имя = "СтраницаПоиск" Тогда
		ТекДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда 
			мСсылка = ТекДанные.Ссылка;
			ОбращенияКлиента.Параметры.УстановитьЗначениеПараметра("Клиент", мСсылка);
			Если ТипЗнч(мСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда 
				Владелец	= ПолучитьВладельцаНаСервере(мСсылка);
				Инициатор	= мСсылка;
				Клиент		= ?(ЗначениеЗаполнено(Владелец), Владелец, мСсылка);
			Иначе
				Инициатор	= мСсылка;
				Клиент		= мСсылка;
			КонецЕсли;   			
			Процесс			= УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиент.ТекущийПользователь(), "ОсновнойПроцесс");
            Если НЕ ЗначениеЗаполнено(Процесс) Тогда
            	Процесс = ПредопределенноеЗначение("Справочник.Процессы.Обращение");
            КонецЕсли; 
			ЗаполнитьПанельИнформацииПоДанным(Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка); 
		Иначе
			ЗаполнитьПанельИнформацииПоДанным(Неопределено);
		КонецЕсли;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_e1c(Знач ПараметрСсылки)
	
	Если СтрНайти(ПараметрСсылки, "e1cib") > 0 Тогда  
		Если СтрНайти(ПараметрСсылки, "data") > 0 Тогда
			НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/data"));
			Если НомерНачало > 0 Тогда
				Попытка
					Адрес = Сред(ПараметрСсылки, НомерНачало);	
					ПерейтиПоНавигационнойСсылке(Адрес); 
				Исключение					
					Возврат;
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформацию(Знач Ссылка)
	
    Возврат СЛС.ПолучитьИнформациюОКлиентеHTML(Ссылка);    
	
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьСимволыИзТелефона(Знач Телефон)
	
	ЗапрещенныеСимволы = "()+-,. " + Символы.ПС + Символы.НПП + Символы.Таб;
	Для Индекс = 1 По СтрДлина(ЗапрещенныеСимволы) Цикл
		Пока СтрНайти(Телефон, Сред(ЗапрещенныеСимволы, Индекс, 1)) > 0 Цикл
			Телефон = СтрЗаменить(Телефон, Сред(ЗапрещенныеСимволы, Индекс, 1), "");
		КонецЦикла;
	КонецЦикла;
	
	Возврат Телефон;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВладельцаНаСервере(Ссылка)
	
	 Возврат Ссылка.Владелец;
	
КонецФункции

&НаКлиенте
Процедура СервисПослеВыбора(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ПроверитьВозможностьВыбора(Результат, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Сервис <%1> запрещено использовать.'"), Результат));
		Возврат;
	КонецЕсли;
	
	Сервис = Результат;
	ПриИзмененииСервиса();
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСервиса()
	
	Если НЕ ЗначениеЗаполнено(Сервис) И ЗначениеЗаполнено(Услуга) Тогда
		Услуга = Справочники.Услуги.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сервис) И ЗначениеЗаполнено(Услуга) Тогда
		Если Сервис <> Услуга.Владелец Тогда
			Услуга = Справочники.Услуги.ПустаяСсылка();
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеКлиентаНаСервере()
	
	мКлиент = ЗаданияСервер.КлиентИнициатора(Инициатор);
	Если ЗначениеЗаполнено(мКлиент) Тогда
		Клиент = мКлиент;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИнициатораНаСервере()
	
	Элементы.Клиент.ОграничениеТипа = ЗаданияСервер.ДопустимыеТипыКлиентаИнициатора(Инициатор);
	
КонецПроцедуры

#КонецОбласти