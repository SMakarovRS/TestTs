
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокИсполнителей();	
	УстановитьВидимостьДоступность(); 
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФормуСпискаЗаданий" Тогда		
		
		ОбновитьФормуНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыИсполнители

&НаКлиенте
Процедура ИсполнителиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиПанелиНавигации", 0.2, Истина);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыЗаданий

&НаКлиенте
Процедура ТаблицаЗаданийПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиТаблицыЗаданий", 0.2, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаданийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Задание) Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ТаблицаЗаданийЗадание 
		ИЛИ Поле = Элементы.ТаблицаЗаданийНомерВОчереди
		ИЛИ Поле = Элементы.ТаблицаЗаданийНомер
		ИЛИ Поле = Элементы.ТаблицаЗаданийДата
		ИЛИ Поле = Элементы.ТаблицаЗаданийТема
		ИЛИ Поле = Элементы.ТаблицаЗаданийЗаданиеИнициатор
		ИЛИ Поле = Элементы.ТаблицаЗаданийЗаданиеКлиент		
		ИЛИ Поле = Элементы.ТаблицаЗаданийИндикаторПереписки
		ИЛИ Поле = Элементы.ТаблицаЗаданийИндексКартинкиФайлов
		ИЛИ Поле = Элементы.ТаблицаЗаданийНавСсылка
		ИЛИ Поле = Элементы.ТаблицаЗаданийТекущийЭтап
		ИЛИ Поле = Элементы.ТаблицаЗаданийТекущийИсполнитель
		ИЛИ Поле = Элементы.ТаблицаЗаданийПлановаяДатаНачала
		ИЛИ Поле = Элементы.ТаблицаЗаданийПлановаяДатаОкончания
		ИЛИ Поле = Элементы.ТаблицаЗаданийОбщийВес Тогда
		
		СтандартнаяОбработка= Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Задание);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаданийПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьСтрокуДляРедактирования(ТекущиеДанные.Задание, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаданийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОтменаРедактирования Тогда 
		РазблокироватьСтрокуДляРедактирования(ТекущиеДанные.Задание, ЭтаФорма.УникальныйИдентификатор);		
		Возврат;
	КонецЕсли;
	
	ЕстьИзменение	= ЗаписатьЗадачуИзСтрокиТаблицы(Элементы.ТаблицаЗаданий.ТекущаяСтрока);			
	ТекущееЗадание	= ТекущиеДанные.Задание;		
	ПодключитьОбработчикОжидания("ОбновитьФормуНаКлиенте", 0.2, Истина);
	
	Если ЕстьИзменение Тогда
		ПоказатьОповещениеПользователя(
			"Изменение:", 
			ПолучитьНавигационнуюСсылку(ТекущиеДанные.Задание),
			Строка(ТекущиеДанные.Задание),
			БиблиотекаКартинок.Информация32);		
	КонецЕсли;
	
КонецПроцедуры		

&НаКлиенте
Процедура ТаблицаЗаданийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаданийПлановаяДлительностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПлановаяДлительность > 0 Тогда
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПлановаяЕдиницаДлительности) Тогда
			ТекущиеДанные.ПлановаяЕдиницаДлительности = 
				ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.Час");
		КонецЕсли;
		
	Иначе
		ТекущиеДанные.ПлановаяЕдиницаДлительности = 
			ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.ПустаяСсылка");
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЗадание(Команда)
		
	ОткрытьФорму("Документ.Задание.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ВверхВОчереди(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Задание) 
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийИсполнитель) 
		ИЛИ ТекущиеДанные.НомерВОчереди = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПереместитьВверхВОчередиНаСервере(ТекущиеДанные.Задание) Тогда
		ОбновитьФормуНаКлиенте();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВнизВОчереди(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Задание) 
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийИсполнитель) 
		ИЛИ ТекущиеДанные.НомерВОчереди = ТаблицаЗаданий.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПереместитьВнизВОчередиНаСервере(ТекущиеДанные.Задание) Тогда
		ОбновитьФормуНаКлиенте();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВНачалоОчереди(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Задание) 
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийИсполнитель) 
		ИЛИ ТекущиеДанные.НомерВОчереди = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПереместитьВНачалоОчередиНаСервере(ТекущиеДанные.Задание) Тогда
		ОбновитьФормуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВКонецОчереди(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Задание) 
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийИсполнитель) 
		ИЛИ ТекущиеДанные.НомерВОчереди = ТаблицаЗаданий.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПереместитьВКонецОчередиНаСервере(ТекущиеДанные.Задание) Тогда
		ОбновитьФормуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаЭтап(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументЗадание = ТекущиеДанные.Задание;
	Если ДокументЗадание <> Неопределено И ТипЗнч(ДокументЗадание) = Тип("ДокументСсылка.Задание") Тогда
		
		Если ИзменениеЗавершенногоЗаданияЗапрещено(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, Нстр("ru = 'Задание завершено. Изменение исполнителя в задании не возможно.'"));
			Возврат;
		КонецЕсли;
		
		Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Вы не можете изменить этап у данного задания.'"));
			Возврат;
		КонецЕсли;		
		
		ДопПараметры		= Новый Структура;
		ДопПараметры.Вставить("ЗаданиеСсылка", 			ДокументЗадание);
		ДопПараметры.Вставить("ОтборТекущийИсполнитель", ОтборТекущийИсполнитель);
		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеревестиНаЭтапЗавершение", ЭтотОбъект, ДопПараметры);
		ПараметрыФормы		= Новый Структура;
		ПараметрыФормы.Вставить("СсылкаНаОбъект", ДокументЗадание);
		ПараметрыФормы.Вставить("ЗаписатьОбъект", Истина);
		ПараметрыФормы.Вставить("ПереданаСсылка", Истина);
		ОткрытьФорму("ОбщаяФорма.ФормаПереводаЗаданияНаЭтап", ПараметрыФормы, ЭтаФорма,,,, 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителя(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументЗадание = ТекущиеДанные.Задание;
	Если ДокументЗадание <> Неопределено И ТипЗнч(ДокументЗадание) = Тип("ДокументСсылка.Задание") Тогда
		
		Если ИзменениеЗавершенногоЗаданияЗапрещено(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, Нстр("ru = 'Задание завершено. Изменение исполнителя в задании не возможно.'"));
			Возврат;
		КонецЕсли;	
		
		Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Вы не можете изменить исполнителя у данного задания.'"));
			Возврат;
		КонецЕсли;		
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ДокументЗадание", ДокументЗадание);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИсполнителяФормаЗавершение", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИсполнителя", Новый Структура("СсылкаНаОбъект", ДокументЗадание),
			ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьФормуНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ИзменениеЗавершенногоЗаданияЗапрещено(Знач ЗаданиеСсылка)
	
	Результат = Ложь;
	Если ЗаданиеСсылка.Завершено 
		И НЕ УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИзменятьЗавершенныеЗадания") Тогда
		Результат = Истина; 
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПеревестиНаЭтапЗавершение(Результат, ДополнительныеПараметры) Экспорт
			
	Если Результат <> Неопределено И Результат.ВыполненПеревод Тогда
		ОбновитьФормуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокИсполнителей(Знач ОтборТекущийИсполнитель = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ДокументЗадание.ТекущийИсполнитель.Ссылка, ""ПустаяСсылка"") КАК Исполнитель,
		|	СУММА(1) КАК Количество
		|ИЗ
		|	Документ.Задание КАК ДокументЗадание
		|ГДЕ
		|	(&ДоступностьРолиПолныеПрава
		|			ИЛИ &ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА ДокументЗадание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|			ИЛИ ДокументЗадание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И НЕ ДокументЗадание.Выполнено
		|	И НЕ ДокументЗадание.Завершено
		|	И НЕ ДокументЗадание.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ДокументЗадание.ТекущийИсполнитель.Ссылка, ""ПустаяСсылка"")
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	Исполнитель
		|АВТОУПОРЯДОЧИВАНИЕ";	
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава", 
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий", 
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей", 
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекущийПользователь));
		
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Исполнители.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ДЗ.Строки Цикл
	
		СтрокиПервыйУровень					= Исполнители.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокиПервыйУровень, Строка); 
		СтрокиПервыйУровень.Представление	= "Исполнители";
		СтрокиПервыйУровень.ИндексКартинки	= 1;
		СтрокиПервыйУровень.ЭтоГруппа 		= Истина;	
		СтрокиПервыйУровень 				= СтрокиПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка2 Из Строка.Строки Цикл			
			
			НоваяСтрока						= СтрокиПервыйУровень.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка2);
			Если Строка2.Исполнитель <> "ПустаяСсылка" Тогда
				НоваяСтрока.Представление 	= Строка2.Исполнитель.Наименование;
			Иначе
				НоваяСтрока.Представление 	= НСтр("ru = '<Не выбран>'");
			КонецЕсли;	
			НоваяСтрока.ИндексКартинки		= 2;
			НоваяСтрока.ЭтоГруппа 			= Ложь;

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиПанелиНавигации()
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЭтоГруппа Тогда
			
			ТаблицаОтбора 				= "Исполнители";
			СтруктураОтбораЗначение 	= НСтр("ru = 'Все'");
			СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", 
				НСтр("ru = 'Все'"), Неопределено);
				
		Иначе
			
			ТаблицаОтбора 				= "Исполнители";
			СтруктураОтбораЗначение 	= ТекущиеДанные.Исполнитель;
			СтруктураОтбора 			= Новый Структура("Значение,ОписаниеТипов", 
				ТекущиеДанные.Исполнитель, Неопределено);			
			
		КонецЕсли;			
	КонецЕсли;
	
	Если СтруктураОтбораЗначение <> ОтборТекущийИсполнитель Тогда
		
		ИзменитьОтборПоПанелиНавигации(СтруктураОтбора);		
		ОтборТекущийИсполнитель = СтруктураОтбораЗначение;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтборПоПанелиНавигации(Знач ДанныеДляОбработки);
		
	Если ДанныеДляОбработки = Неопределено Тогда		
	    Возврат;
	КонецЕсли;
	
	Если ДанныеДляОбработки.Значение = НСтр("ru = 'Все'") Тогда		
		ТаблицаЗаданий.Очистить();
		ЗаполнитьСписокЗаданий();		
		Элементы.План.Видимость = Ложь;		
		Возврат;
	КонецЕсли;	
		
	ИмяПоля = "ТекущийИсполнитель";
	Если ТипЗнч(ДанныеДляОбработки.Значение) = Тип("СписокЗначений") Тогда
		ЗначениеОтбора = ДанныеДляОбработки.Значение;
			
	ИначеЕсли ДанныеДляОбработки.Значение = "ПустаяСсылка" Тогда
		ЗначениеОтбора = "<Не выбран>";		
		Элементы.План.Видимость = Ложь;	
	Иначе	
		ЗначениеОтбора = ДанныеДляОбработки.Значение;		
		Элементы.План.Видимость = Истина;	
	КонецЕсли;			
	ТаблицаЗаданий.Очистить();
	ЗаполнитьСписокЗаданий(ЗначениеОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЗаданий(Знач ОтборТекущийИсполнитель = Неопределено)
	
	ТаблицаЗаданий.Очистить();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументЗадание.Ссылка КАК Задание,
		|	ДокументЗадание.ВерсияДанных КАК ВерсияДанных,
		|	ДокументЗадание.Номер КАК Номер,
		|	ДокументЗадание.Дата КАК Дата,
		|	ДокументЗадание.Тема КАК Тема,
		|	ДокументЗадание.Процесс КАК Процесс,
		|	ДокументЗадание.ТекущийЭтап КАК ТекущийЭтап,
		|	ДокументЗадание.Автор КАК Автор,
		|	ДокументЗадание.ДатаСоздания КАК ДатаСоздания,
		|	ДокументЗадание.КрайняяДатаВыполнения КАК КрайняяДатаВыполнения,
		|	ДокументЗадание.ТекущийЭтап.НавСсылка КАК ТекущийЭтапНавСсылка,
		|	ВЫБОР
		|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИндексКартинкиФайлов,
		|	ДокументЗадание.ТекущийИсполнитель КАК ТекущийИсполнитель,
		|	ДокументЗадание.Инициатор КАК Инициатор,
		|	ДокументЗадание.Клиент КАК Клиент,
		|	ДокументЗадание.Сервис КАК Сервис,
		|	ДокументЗадание.Услуга КАК Услуга,
		|	ДокументЗадание.Комментарий КАК Комментарий,
		|	&ТекущаяДата КАК ТекущаяДата,
		|	ДокументЗадание.ТекущийЭтап.СостояниеЭтапа КАК СостояниеЭтапа,
		|	ВЫБОР
		|		КОГДА ДокументЗадание.КрайняяДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				И (ДокументЗадание.Выполнено = ЛОЖЬ
		|						И ДокументЗадание.КрайняяДатаВыполнения < &ТекущаяДата
		|					ИЛИ ДокументЗадание.Выполнено = ИСТИНА
		|						И ДокументЗадание.КрайняяДатаВыполнения < ДокументЗадание.ДатаВыполнения)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Просрочено,
		|	ВЫБОР
		|		КОГДА ДокументЗадание.Родитель = ЗНАЧЕНИЕ(Документ.Задание.ПустаяСсылка)
		|				ИЛИ ДокументЗадание.Родитель ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ИндексКартинкиПодчиненнаяЗадача,
		|	ДокументЗадание.Спринт КАК Спринт,
		|	ДокументЗадание.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	ДокументЗадание.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ДокументЗадание.Баллы КАК Баллы,
		|	ВЫБОР
		|		КОГДА ДокументЗадание.Выполнено = ИСТИНА
		|				ИЛИ РеквизитыЗаданий.ПоследнийВПереписке ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА ДокументЗадание.ТекущийИсполнитель = &ТекущийПользователь
		|				И РеквизитыЗаданий.ПоследнийВПереписке = &ТекущийПользователь
		|			ТОГДА 1
		|		КОГДА РеквизитыЗаданий.ПоследнийВПереписке = ДокументЗадание.ТекущийИсполнитель
		|				И ДокументЗадание.ТекущийИсполнитель <> &ТекущийПользователь
		|			ТОГДА 2
		|		КОГДА РеквизитыЗаданий.ПоследнийВПереписке = ДокументЗадание.Инициатор
		|				И (ДокументЗадание.ТекущийИсполнитель = &ТекущийПользователь
		|					ИЛИ ДокументЗадание.ТекущийИсполнитель ЕСТЬ NULL
		|					ИЛИ ДокументЗадание.ТекущийИсполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|			ТОГДА 3
		|		КОГДА РеквизитыЗаданий.ПоследнийВПереписке = ДокументЗадание.Инициатор
		|				И ДокументЗадание.ТекущийИсполнитель <> &ТекущийПользователь
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК ИндикаторПереписки,
		|	ДокументЗадание.Срочность КАК Срочность,
		|	ДокументЗадание.Влияние КАК Влияние,
		|	ДокументЗадание.Приоритет КАК Приоритет,
		|	ДокументЗадание.ОбщийВес КАК ОбщийВес,
		|	ДокументЗадание.ТекущийЭтап.НавСсылка КАК НавСсылка,
		|	ДокументЗадание.ПлановаяДлительность КАК ПлановаяДлительность,
		|	ДокументЗадание.ПлановаяЕдиницаДлительности КАК ПлановаяЕдиницаДлительности,
		|	ДокументЗадание.ДатаНачалаВыполненияРабот КАК ДатаНачалаВыполненияРабот,
		|	ВЫБОР
		|		КОГДА &ДоступностьРолиПолныеПрава
		|				ИЛИ &ДоступностьРолиServiceDeskРаспределениеЗаданий
		|				ИЛИ ДокументЗадание.ТекущийИсполнитель В (&СписокПользователейИГруппПользователей)
		|			ТОГДА ЕСТЬNULL(ОчередьВыполненияЗаданий.НомерВОчереди, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерВОчереди
		|ИЗ
		|	Документ.Задание КАК ДокументЗадание
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеПрисоединенныхФайлов
		|		ПО ДокументЗадание.Ссылка = НаличиеПрисоединенныхФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыЗаданий КАК РеквизитыЗаданий
		|		ПО ДокументЗадание.Ссылка = РеквизитыЗаданий.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьВыполненияЗаданий КАК ОчередьВыполненияЗаданий
		|		ПО ДокументЗадание.Ссылка = ОчередьВыполненияЗаданий.Задание
		|ГДЕ
		|	(&ДоступностьРолиПолныеПрава
		|			ИЛИ &ДоступностьРолиПросмотраЧужихЗаданий
		|			ИЛИ &ДоступностьРолиПросмотраНеРаспределенныхЗаданий
		|				И ВЫБОР
		|					КОГДА ДокументЗадание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|			ИЛИ ДокументЗадание.УчастникиЗадания.Участник В (&СписокПользователейИГруппПользователей))
		|	И НЕ ДокументЗадание.Выполнено
		|	И НЕ ДокументЗадание.Завершено
		|	И НЕ ДокументЗадание.ПометкаУдаления
		|	И &ПроизвольноеУсловие
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерВОчереди,
		|	ДатаСоздания";
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Запрос.УстановитьПараметр("ДоступностьРолиПолныеПрава", 
		УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраНеРаспределенныхЗаданий", 
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрНеРаспределенныхЗаданий"));
		
	Запрос.УстановитьПараметр("ДоступностьРолиServiceDeskРаспределениеЗаданий", 
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskРаспределениеЗаданий"));	
		
	Запрос.УстановитьПараметр("ДоступностьРолиПросмотраЧужихЗаданий", 
		УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskПросмотрЧужихЗаданий"));
		
	Запрос.УстановитьПараметр("СписокПользователейИГруппПользователей", 
		УправлениеITОтделом8УФ.СписокПодчиненныхИГруппПользователя(ТекущийПользователь));
		
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.Текст = ТекстЗапроса;
	
	Если ОтборТекущийИсполнитель <> Неопределено Тогда
		Если ТипЗнч(ОтборТекущийИсполнитель) = Тип("СправочникСсылка.Пользователи")
			ИЛИ ТипЗнч(ОтборТекущийИсполнитель) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, 
				"&ПроизвольноеУсловие", 
				"ДокументЗадание.ТекущийИсполнитель = &ТекущийИсполнитель");
			
			Запрос.УстановитьПараметр("ТекущийИсполнитель", ОтборТекущийИсполнитель);
			
		ИначеЕсли ОтборТекущийИсполнитель = "<Не выбран>" Тогда
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, 
				"&ПроизвольноеУсловие",
				"ДокументЗадание.ТекущийИсполнитель.Ссылка ЕСТЬ NULL");
			
		Иначе			
			Запрос.УстановитьПараметр("ПроизвольноеУсловие", Истина)
		КонецЕсли;
		
	Иначе 
		Запрос.УстановитьПараметр("ПроизвольноеУсловие", Истина)
		
	КонецЕсли;	
	
	ВыборкаЗадания			= Запрос.Выполнить().Выбрать();	
	
	// Для расчета плановых дат.	
	ГрафикПользователя	= ТекущийПользователь.График;
	ПустаяДата			= Дата(1, 1, 1, 0, 0, 0); 
	ПланДатаВыполнения	= ПустаяДата;
	ЭтоПерваяСтрока		= Истина;
	
	Пока ВыборкаЗадания.Следующий() Цикл		
		
		НоваяСтрока = ТаблицаЗаданий.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗадания);
		
		Если ОтборТекущийИсполнитель = Неопределено Тогда
			// Для общего списка расчет дат не производим.
			Продолжить;
		КонецЕсли;	
		
		// График работы.
		ГрафикРаботы = ГрафикДляРасчета(ВыборкаЗадания.Задание);
		Если ГрафикРаботы = Неопределено 
			ИЛИ Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
			Продолжить;
		КонецЕсли;		
		
		// Плановая дата начала.		
		Если ЭтоПерваяСтрока Тогда
			Если ВыборкаЗадания.ДатаНачалаВыполненияРабот <> ПустаяДата Тогда
				НоваяСтрока.ПлановаяДатаНачала = ВыборкаЗадания.ДатаНачалаВыполненияРабот;
			Иначе	
				НоваяСтрока.ПлановаяДатаНачала = ВыборкаЗадания.ДатаСоздания;
			КонецЕсли;	
		Иначе	
			НоваяСтрока.ПлановаяДатаНачала = ПланДатаВыполнения;
		КонецЕсли;		
		
		// Плановая дата выполнения.
		// Максимально возможное значение плановой длительности 9999.99 часов ~ 36000000 сек.
		Если ВыборкаЗадания.ПлановаяДлительность > 0 Тогда
		
			ПлановаяДлительностьСек = ?(ВыборкаЗадания.ПлановаяЕдиницаДлительности = Перечисления.ЕдиницыДлительности.Минута,
				ВыборкаЗадания.ПлановаяДлительность * 60, 
				ВыборкаЗадания.ПлановаяДлительность * 3600);
		
			ДатаНачалаРасчета		= НоваяСтрока.ПлановаяДатаНачала;
			ДатаОкончанияРасчета	= ДатаНачалаРасчета + 36000000;	
						
			ПланДатаВыполнения = УправлениеSLA.РассчитатьДатуПоКалендарю(
				ДатаНачалаРасчета,
				ПлановаяДлительностьСек,
				ГрафикРаботы,
				ДатаОкончанияРасчета);
				
			НоваяСтрока.ПлановаяДатаОкончания	= ПланДатаВыполнения;
			
		Иначе
			
			НоваяСтрока.ПлановаяДатаОкончания	= НоваяСтрока.ПлановаяДатаНачала;
		    ПланДатаВыполнения					= НоваяСтрока.ПлановаяДатаНачала;					
			
		КонецЕсли;		
		
		ЭтоПерваяСтрока = Ложь;
		
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Функция ГрафикДляРасчета(Знач ЗаданиеСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(ЗаданиеСсылка.SLA) 
		И ЗначениеЗаполнено(ЗаданиеСсылка.SLA.График) Тогда
		
		Возврат ЗаданиеСсылка.SLA.График;
		
	ИначеЕсли ЗначениеЗаполнено(ЗаданиеСсылка.Организация)
		И ЗначениеЗаполнено(ЗаданиеСсылка.Организация.График) Тогда
		
		Возврат ЗаданиеСсылка.Организация.График;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущийПользователь.График) Тогда	
		
		Возврат ТекущийПользователь.График;
		
	Иначе
		 Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура ОбновитьФормуНаКлиенте()
	
	ОбновитьФормуНаСервере();
	
	Для Каждого Строка Из Исполнители.ПолучитьЭлементы() Цикл
		Элементы.Исполнители.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОтборТекущийИсполнитель) Тогда
		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"Исполнитель",
			ИдентификаторСтроки,
			Исполнители.ПолучитьЭлементы(),
			ОтборТекущийИсполнитель,
			Ложь);
		Элементы.Исполнители.ТекущаяСтрока = ИдентификаторСтроки;		
		
		Если ЗначениеЗаполнено(ТекущееЗадание) Тогда 
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("Задание", ТекущееЗадание);
			МассивСтрок = ТаблицаЗаданий.НайтиСтроки(ОтборСтрок);				
			Если МассивСтрок.Количество() > 0 Тогда
				Элементы.ТаблицаЗаданий.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
			КонецЕсли;		
		КонецЕсли;
	 КонецЕсли;
	
 КонецПроцедуры
 
 &НаСервере
Процедура ОбновитьФормуНаСервере()
	
	ЗаполнитьСписокИсполнителей();		
	ЗаполнитьСписокЗаданий(ОтборТекущийИсполнитель);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Функция ПереместитьВверхВОчередиНаСервере(Знач ЗаданиеСсылка)
	
	Возврат ЗаданияСервер.ПереместитьЗаданиеВверхВОчереди(ЗаданиеСсылка);
	
КонецФункции

&НаСервере
Функция ПереместитьВнизВОчередиНаСервере(Знач ЗаданиеСсылка)
	
	Возврат ЗаданияСервер.ПереместитьЗаданиеВнизВОчереди(ЗаданиеСсылка);
	
КонецФункции

&НаСервере
Функция ПереместитьВНачалоОчередиНаСервере(Знач ЗаданиеСсылка)
	
	Возврат ЗаданияСервер.ПереместитьЗаданиеВНачалоОчереди(ЗаданиеСсылка);
	
КонецФункции

&НаСервере
Функция ПереместитьВКонецОчередиНаСервере(Знач ЗаданиеСсылка)
	
	Возврат ЗаданияСервер.ПереместитьЗаданиеВКонецОчереди(ЗаданиеСсылка);
	
КонецФункции	

&НаСервере
Функция ПроверитьИсполнителяПриПереводеНаЭтап(Знач Задание)
			
	Возврат ЗаданияСервер.ПравоРедактированияТекущийПользователь(Задание);
	
КонецФункции

&НаСервере
Процедура ВыбратьИсполнителяИзДиалогаНаСервере(Знач ЗаданиеСсылка, Знач Результат)
	
	Если ИзменениеЗавершенногоЗаданияЗапрещено(ЗаданиеСсылка) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			Нстр("ru = '%1 завершено. Изменение исполнителя в задании не возможно.'"), 
			Результат));
			
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ЗаданиеСсылка) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Вы не можете изменить текущего исполнителя у %1'"), 
			Результат));
			
		Возврат;
		
	КонецЕсли;
    
    НачатьТранзакцию();
    Попытка
    	ЗаданиеОбъект 						= ЗаданиеСсылка.ПолучитьОбъект();
    	ЗаданиеОбъект.ТекущийИсполнитель 	= Результат;
    	ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
    КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителяФормаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыбратьИсполнителяИзДиалогаНаСервере(ДополнительныеПараметры.ДокументЗадание, Результат);		
		Оповестить("ОбновитьФормуСпискаЗаданий");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителяЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = "ВыбратьПользователяИзСправочника" Тогда
			ВыбратьИсполнителяИзСправочника();
		ИначеЕсли
			ВыбранныйЭлемент.Значение = "НеВыбран" Тогда ИсполнительНеВыбран();
		Иначе
			СтруктураПользователя = Новый Структура;
			СтруктураПользователя.Вставить("Имя", ВыбранныйЭлемент.Значение);
			ВыбратьИсполнителяНаСервере(СтруктураПользователя);
		КонецЕсли;	
	КонецЕсли;
	
	Оповестить("ОбновитьФормуСпискаЗаданий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителяИзСправочника()
	
	// Выбираем исполнителя из справочника "Пользователи".	
	Структура = Новый Структура();
	Структура.Вставить("ЗакрыватьПриВыборе",  Истина);
	Структура.Вставить("РежимВыбора",         Истина);
	
	Результат = Неопределено;
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Структура, ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ВыбратьИсполнителяИзСправочникаЗавершение", ЭтаФорма), 
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителяИзСправочникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда        
		ВыбратьИсполнителяИзСправочникаЗавершениеНаСервере(Результат);        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыбратьИсполнителяИзСправочникаЗавершениеНаСервере(Результат)
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееЗадание = ТекущиеДанные.Задание;
	Если ТекущееЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;	
    
    НачатьТранзакцию();
    Попытка
    	ТекущееЗаданиеОбъект 					= ТекущееЗадание.ПолучитьОбъект(); 
    	ТекущееЗаданиеОбъект.ТекущийИсполнитель = Результат;
    	ТекущееЗаданиеОбъект.Записать();
    	ТекущееЗадание = ТекущееЗаданиеОбъект.Ссылка;
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
    КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНеВыбран()
	
	ИсполнительНеВыбранНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ИсполнительНеВыбранНаСервере()
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееЗадание = ТекущиеДанные.Задание;
	Если ТекущееЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
    НачатьТранзакцию();
    Попытка
    	ТекущееЗаданиеОбъект = ТекущееЗадание.ПолучитьОбъект();
    	ТекущееЗаданиеОбъект.ТекущийИсполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
    	ТекущееЗаданиеОбъект.Записать();
    	ТекущееЗадание = ТекущееЗаданиеОбъект.Ссылка;
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
    КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьИсполнителяНаСервере(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееЗадание = ТекущиеДанные.Задание;
	Если ТекущееЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Выбор исполнителя, определяем кто будет исполнителем.
	УИД = Сред(Команда.Имя, 13);
	УИД = Лев(УИД, 8) + "-" + Сред(УИД, 9, 4) + "-" + Сред(УИД, 13, 4) + "-" + Сред(УИД, 17, 4) + "-" + Сред(УИД, 21);
	
	Структура = ПолучитьСтруктуруИсполнителяПоУИД(УИД);
    
    НачатьТранзакцию();
    Попытка
    	ТекущееЗаданиеОбъект = ТекущееЗадание.ПолучитьОбъект();
    	ТекущееЗаданиеОбъект.ТекущийИсполнитель = Структура.Исполнитель;	
    	ТекущееЗаданиеОбъект.Записать();
    	ТекущееЗадание = ТекущееЗаданиеОбъект.Ссылка;
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
    КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруИсполнителяПоУИД(Знач УИД)
	
	ИсполнительСсылка = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	
	Результат = Новый Структура();
	Результат.Вставить("Исполнитель", ИсполнительСсылка);
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	ВозможностьРаспределения = УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава")
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ServiceDeskРаспределениеЗаданий");
		
	Элементы.ФормаГруппаПереместить.Видимость = ВозможностьРаспределения;	
	Элементы.КонтекстноеМенюГруппаПереместитьЗадание.Видимость = 	
		ВозможностьРаспределения;
	Элементы.ТаблицаЗаданийПлановаяДлительность.ТолькоПросмотр =
		Не ВозможностьРаспределения;
	Элементы.ТаблицаЗаданийПлановаяЕдиницаДлительности.ТолькоПросмотр =
		Не ВозможностьРаспределения;
		
	ДоступностьДатыПоSLA = УправлениеSLA.ДоступноИзменениеДатSLA();
	Элементы.ТаблицаЗаданийКрайняяДатаВыполнения.ТолькоПросмотр = 
		НЕ ДоступностьДатыПоSLA; 
		
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Крайняя дата выполнения.
	ТекущаяДатаСеанса				= ТекущаяДатаСеанса();	
	ЭлУсловноеОформление			= ЭтотОбъект.УсловноеОформление.Элементы;	
	ЭлУсловноеОформление.Очистить();
	
	ЭлементУО						= ЭлУсловноеОформление.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	ГруппаЭлементовОтбораДанных = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаЭлементовОтбораДанных.Использование = Истина;

	ЭлементУсловия = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));		
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТаблицаЗаданий.КрайняяДатаВыполнения");
	ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементУсловия.ПравоеЗначение 	= Новый ПолеКомпоновкиДанных("ТаблицаЗаданий.ПлановаяДатаОкончания");
	
	ЭлементУсловия = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТаблицаЗаданий.КрайняяДатаВыполнения");
	ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементУсловия.ПравоеЗначение 	= ТекущаяДатаСеанса;
	
	ПолеЭлемента 					= ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле				= Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЗаданийКрайняяДатаВыполнения.Имя);
	
	// Этапы процессов.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭтапыПроцессов.Ссылка,
		|	ЭтапыПроцессов.ЦветФона,
		|	ЭтапыПроцессов.ЦветТекста
		|ИЗ
		|	Справочник.ЭтапыПроцессов КАК ЭтапыПроцессов
		|ГДЕ
		|	ЭтапыПроцессов.ЭтоГруппа = ЛОЖЬ";

	мWebЦветаБелый	= WebЦвета.Белый;
	мWebЦветаЧерный = WebЦвета.Черный;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ЦветФона 	= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ЦветФона);
			ЦветТекста 	= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ЦветТекста);
		Исключение
			ЦветФона 	= мWebЦветаБелый;
			ЦветТекста 	= мWebЦветаЧерный;
		КонецПопытки;
		
		Если ЦветФона <> мWebЦветаБелый ИЛИ ЦветТекста <> мWebЦветаЧерный Тогда
			ЭлементУО 						= ЭлУсловноеОформление.Добавить();
			Если ЦветФона <> мWebЦветаБелый Тогда
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
			КонецЕсли;
			Если ЦветТекста <> мWebЦветаЧерный Тогда
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
			КонецЕсли;
			ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТаблицаЗаданий.ТекущийЭтап");
			ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение 	= Выборка.Ссылка;				
			
			ПолеЭлемента 					= ЭлементУО.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле				= Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЗаданий.Имя);
			
		КонецЕсли;
	КонецЦикла;
	
	// ПРОСРОЧЕНО.
	ЦветаПросроченнойЗадачи 		= ЗаданияСервер.ПолучитьЦветаПросроченногоЗадания();	
	ЭлементУО 						= ЭлУсловноеОформление.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаПросроченнойЗадачи.ЦветФона);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаПросроченнойЗадачи.ЦветТекста);
	ЭлементУсловия 					= ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТаблицаЗаданий.Просрочено");
	ЭлементУсловия.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение 	= Истина;
	ПолеЭлемента 					= ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле				= Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЗаданий.Имя);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ЗаблокироватьСтрокуДляРедактирования(Ссылка, УникальныйИдентификатор)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		ЗаблокироватьДанныеДляРедактирования(Ссылка, , УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура РазблокироватьСтрокуДляРедактирования(Ссылка, УникальныйИдентификатор)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		РазблокироватьДанныеДляРедактирования(Ссылка, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьЗадачуИзСтрокиТаблицы(ИндексСтроки)
	
	Результат		= Ложь;
	СтрокаТаблицы	= ТаблицаЗаданий.НайтиПоИдентификатору(ИндексСтроки);
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Задание) Тогда		
		Возврат Результат;		
	КонецЕсли;
	
	ЗаданиеОбъект = СтрокаТаблицы.Задание.ПолучитьОбъект();
	Если СтрокаТаблицы.ВерсияДанных <> СтрокаТаблицы.Задание.ВерсияДанных Тогда 
		
		РазблокироватьСтрокуДляРедактирования(ЗаданиеОбъект.Ссылка, ЭтаФорма.УникальныйИдентификатор);		
		ТекстСообщения = НСтр("ru = 'Данные были изменены другим пользователем'");
		
		ВызватьИсключение ТекстСообщения;		
		Возврат Результат;
		
	КонецЕсли;
	
	ИзменитьЗадание = ЗаданиеОбъект.ДатаНачалаВыполненияРабот <> СтрокаТаблицы.ДатаНачалаВыполненияРабот
		ИЛИ ЗаданиеОбъект.КрайняяДатаВыполнения			<> СтрокаТаблицы.КрайняяДатаВыполнения
		ИЛИ ЗаданиеОбъект.ПлановаяДлительность			<> СтрокаТаблицы.ПлановаяДлительность
		ИЛИ ЗаданиеОбъект.ПлановаяЕдиницаДлительности	<> СтрокаТаблицы.ПлановаяЕдиницаДлительности;
		
	Если ИзменитьЗадание Тогда
			
		ЗаданиеОбъект.ДатаНачалаВыполненияРабот 	= СтрокаТаблицы.ДатаНачалаВыполненияРабот;
		ЗаданиеОбъект.КрайняяДатаВыполнения			= СтрокаТаблицы.КрайняяДатаВыполнения;
		ЗаданиеОбъект.ПлановаяДлительность			= СтрокаТаблицы.ПлановаяДлительность;
		ЗаданиеОбъект.ПлановаяЕдиницаДлительности	= СтрокаТаблицы.ПлановаяЕдиницаДлительности;
		
		Попытка
			ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			СтрокаТаблицы.ВерсияДанных	= ЗаданиеОбъект.ВерсияДанных;
			Результат					= Истина;
		Исключение
			мОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(мОписаниеОшибки);		
		КонецПопытки;
		
	КонецЕсли;
	
	РазблокироватьСтрокуДляРедактирования(ЗаданиеОбъект.Ссылка, ЭтаФорма.УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиТаблицыЗаданий()
	
	ТекущиеДанные = Элементы.ТаблицаЗаданий.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда		
		Если ТекущееЗадание <> ТекущиеДанные.Задание Тогда
			ТекущееЗадание = ТекущиеДанные.Задание;
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти