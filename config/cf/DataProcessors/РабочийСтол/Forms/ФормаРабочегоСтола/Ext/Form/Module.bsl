
#Область ПеременныеФормы

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаСервере
Перем ГСЧ;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Параметры.Свойство("ОткрытаНеНаНачальнойСтранице", ОткрытаНеНаНачальнойСтранице);
	
	Если ОткрытаНеНаНачальнойСтранице Тогда
		Заголовок = НСтр("ru = 'Рабочий стол'");
	КонецЕсли;
	
	МетрикиДоступны = ПолучитьФункциональнуюОпцию("ИспользоватьМетрики") = Истина;
	ОбновитьСписокДоступныхРолейТекущегоПользователя();
	
	Если МетрикиДоступны = Истина Тогда
		ВосстановитьНастройкиТекущегоПользователя();
	КонецЕсли;
	
	Если Параметры.Свойство("РабочийСтолСсылка", РабочийСтолСсылка) Тогда
		
		ОбновитьРабочийСтол();
		
	Иначе
		
		РабочийСтолСсылка = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеНастройки("РабочийСтолПоУмолчанию");
		
		Если Не ЗначениеЗаполнено(РабочийСтолСсылка) Тогда
			РабочийСтолСсылка = Справочники.РабочиеСтолы.НайтиПоРеквизиту("Идентификатор", 
				"РабочийСтолНавигацияМетрики"); 
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(РабочийСтолСсылка) Тогда			
			ОбновитьРабочийСтол();			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если МетрикиДоступны = Истина Тогда
		
		// При старте системы устанавливаем задержку.
		Если ОткрытаНеНаНачальнойСтранице Тогда
			ИнтервалЗапускаФоновогоЗадания = 0.1;
		Иначе
			ИнтервалЗапускаФоновогоЗадания = 3;
		КонецЕсли;
		
		ЗапуститьФоновыйОбработчикОбновления(ИнтервалЗапускаФоновогоЗадания);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	// Запоминем открытые страницы.
	СоответствиеСтраниц = Новый Соответствие;
	Для Каждого Эл Из Элементы Цикл
		Если ТипЗнч(Эл) = Тип("ГруппаФормы") И Эл.Вид = ВидГруппыФормы.Страницы Тогда			
			СоответствиеСтраниц.Вставить(Эл.Имя, Элементы[Эл.Имя].ТекущаяСтраница.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ОтключитьОбработчикОжидания("Подключаемый_ЗапуститьФоновоеЗадание");
	ОбновитьРабочийСтол();	
	ЗапуститьФоновыйОбработчикОбновления(1);
	
	// Восстанавливаем открытые станицы.
	Для Каждого КЗ Из СоответствиеСтраниц Цикл
		Эл = Элементы.Найти(КЗ.Ключ);
		Если Эл <> Неопределено Тогда
			Элементы[Эл.Имя].ТекущаяСтраница = Элементы[КЗ.Значение];
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПерсональныеНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантСтандартногоПериода", 	ВариантСтандартногоПериода);
	ПараметрыФормы.Вставить("ВидСтандартногоПериода", 		ВидСтандартногоПериода);
	ПараметрыФормы.Вставить("ЗаВсеВремя", 					ЗаВсеВремя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПериода", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.РабочийСтол.Форма.ФормаПерсональныеНастройки", ПараметрыФормы, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеВыбораПериода(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВосстановитьНастройкиТекущегоПользователя();
	Обновить(Неопределено);
	
КонецПроцедуры

&НаСервере
Функция ДекорацияТекст(Знач ИсточникРеквизитов, Знач РодительскийЭлемент = Неопределено, Знач Заголовок = Неопределено)
	
	мГиперссылка	= ИсточникРеквизитов["Гиперссылка"];
	мУИДВиджета		= ИсточникРеквизитов["Ссылка"].УникальныйИдентификатор();
	
	Если мГиперссылка = Истина Тогда
		Если ИсточникРеквизитов["ВидОбработчика"] = Перечисления.ВидыОбработчиковВиджетов.ОткрытьФорму Тогда			
			ИмяЭлементаФормы = "ОткрытьФорму_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + "_"
				+ СтрЗаменить(мУИДВиджета, "-", "");
				
		Иначе			
			ИмяЭлементаФормы = "ПроизвольныйАлгоритм_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") 
				+ "_" + СтрЗаменить(мУИДВиджета, "-", "");
				
		КонецЕсли;			
	Иначе
		ИмяЭлементаФормы = ИсточникРеквизитов["Идентификатор"];
	КонецЕсли;	
	
	Если Заголовок = Неопределено Тогда
		мЗаголовок = ИсточникРеквизитов["Заголовок"];
		
	ИначеЕсли Заголовок = 0 Тогда
		мЗаголовок = "—";
		
	Иначе
		мЗаголовок = Заголовок;
		
	КонецЕсли;	
	
	ЭлементФормыДекорацияТекст						= Элементы.Добавить(ИмяЭлементаФормы, Тип("ДекорацияФормы"), 
		РодительскийЭлемент);
	ЭлементФормыДекорацияТекст.Заголовок 			= мЗаголовок;
	ЭлементФормыДекорацияТекст.Вид					= ВидДекорацииФормы.Надпись;
	ЭлементФормыДекорацияТекст.Видимость			= ИсточникРеквизитов["Видимость"];
	ЭлементФормыДекорацияТекст.Доступность			= ИсточникРеквизитов["Доступность"];	
	ЭлементФормыДекорацияТекст.Гиперссылка			= мГиперссылка;
	
	ЭлементФормыДекорацияТекст.ВажностьПриОтображении = 
		ВариантВажностиПриОтображении(ИсточникРеквизитов["ВажностьПриОтображении"]);
		
	ЭлементФормыДекорацияТекст.Подсказка			= ИсточникРеквизитов["Подсказка"];
	ЭлементФормыДекорацияТекст.ОтображениеПодсказки	= ВариантОтображенияПодсказки(
		ИсточникРеквизитов["ОтображениеПодсказки"]);		
	ЭлементФормыДекорацияТекст.ЦветТекста	= ПолучитьЦвет(ИсточникРеквизитов["ЦветТекста"], "ЦветТекста");
	ЭлементФормыДекорацияТекст.ЦветФона		= ПолучитьЦвет(ИсточникРеквизитов["ЦветФона"], "ЦветФона");
	ЭлементФормыДекорацияТекст.ЦветРамки	= ПолучитьЦвет(ИсточникРеквизитов["ЦветРамки"], "ЦветРамки");
	
	Попытка
		мШрифт = ИсточникРеквизитов["Шрифт"].Получить();
		Если мШрифт = Неопределено Тогда
			мШрифт = Новый Шрифт("Arial", 10);
		КонецЕсли;		
	Исключение
		мШрифт = Новый Шрифт("Arial", 10);
	КонецПопытки;
	
	ЭлементФормыДекорацияТекст.Шрифт							= мШрифт;
	
	ЭлементФормыДекорацияТекст.Рамка 							= 
		ПолучитьРамкуДекорацииФормы(ИсточникРеквизитов["ТипРамки"], ИсточникРеквизитов["ТолщинаРамки"]);	
		
	ЭлементФормыДекорацияТекст.Ширина							= ИсточникРеквизитов["Ширина"];
	ЭлементФормыДекорацияТекст.Высота							= ИсточникРеквизитов["Высота"];
	ЭлементФормыДекорацияТекст.АвтоМаксимальнаяШирина			= ИсточникРеквизитов["АвтоМаксимальнаяШирина"];
	ЭлементФормыДекорацияТекст.АвтоМаксимальнаяВысота			= ИсточникРеквизитов["АвтоМаксимальнаяВысота"];
	
	ЭлементФормыДекорацияТекст.ГоризонтальноеПоложениеВГруппе	= 
		ВариантГоризонтальногоПоложенияЭлемента(ИсточникРеквизитов["ГоризонтальноеПоложениеВГруппе"]);
		
	ЭлементФормыДекорацияТекст.ВертикальноеПоложениеВГруппе		= 
		ВариантВертикальногоПоложенияЭлемента(ИсточникРеквизитов["ВертикальноеПоложениеВГруппе"]);
		
	ЭлементФормыДекорацияТекст.ГоризонтальноеПоложение          = 
		ВариантГоризонтальногоПоложенияБезАвто(ИсточникРеквизитов["ГоризонтальноеПоложение"]);
		
	ЭлементФормыДекорацияТекст.ВертикальноеПоложение			= 
		ВариантВертикальногоПоложенияЭлемента(ИсточникРеквизитов["ВертикальноеПоложение"]);
		
	ЭлементФормыДекорацияТекст.РастягиватьПоГоризонтали			= 
		ВариантРастягиватьЭлемент(ИсточникРеквизитов["РастягиватьПоГоризонталиВариант"]);
		
	ЭлементФормыДекорацияТекст.РастягиватьПоВертикали			= 
		ВариантРастягиватьЭлемент(ИсточникРеквизитов["РастягиватьПоВертикалиВариант"]);
		
	ЭлементФормыДекорацияТекст.ВысотаЗаголовка					= ИсточникРеквизитов["ВысотаЗаголовка"];
	
	Если мГиперссылка = Истина Тогда
		ЭлементФормыДекорацияТекст.УстановитьДействие("Нажатие", "Подключаемый_ГиперссылкаНажатие");
	КонецЕсли;

	Возврат  ЭлементФормыДекорацияТекст;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦвет(Знач ЦветЭлемента = "", Знач ВидЦвета = "")
	
	Результат = Новый Цвет();
	Если ПустаяСтрока(ЦветЭлемента) 
		ИЛИ ПустаяСтрока(ВидЦвета) Тогда
		Возврат Результат;
	Иначе
		Попытка
			Результат = РаботаСЦветомКлиентСервер.HexВЦвет(ЦветЭлемента);
		Исключение			
			Если ВидЦвета = "ЦветФона" Тогда
				Результат = WebЦвета.Белый;
			ИначеЕсли ВидЦвета = "ЦветТекста" 
				ИЛИ ВидЦвета = "ЦветТекстаЗаголовка" Тогда
				Результат = WebЦвета.Черный;
			ИначеЕсли ВидЦвета = "ЦветРамки" Тогда
				Результат = WebЦвета.НейтральноСерый;				
			КонецЕсли;	
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ОбычнаяГруппаБезОтображения(Знач ИмяЭлемента = "", Знач РодительскийЭлемент = Неопределено, 
		Знач ВариантГруппировкиПодчиненныхЭлементов = Неопределено)
	
	Если ПустаяСтрока(ИмяЭлемента) Тогда
		ИмяГруппы = "ОбычнаяГруппа" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");	
	Иначе	
		ИмяГруппы = ИмяЭлемента;
	КонецЕсли;
	
	Если РодительскийЭлемент = Неопределено Тогда
		РодительскийЭлемент = Элементы.ОсновнаяГруппаЭлементов;
	КонецЕсли;	
	
	ЭлементФормыГруппа 										= Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), 
		РодительскийЭлемент); 
	ЭлементФормыГруппа.Заголовок							= "";
	ЭлементФормыГруппа.Вид 									= ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементФормыГруппа.Видимость							= Истина;
	ЭлементФормыГруппа.Доступность							= Истина;
	ЭлементФормыГруппа.ТолькоПросмотр						= Ложь;
	ЭлементФормыГруппа.ВажностьПриОтображении 				= ВажностьПриОтображении.Авто;				
	ЭлементФормыГруппа.Поведение	                        = ПоведениеОбычнойГруппы.Обычное;
	ЭлементФормыГруппа.Отображение							= ОтображениеОбычнойГруппы.Нет;
	
	Если ВариантГруппировкиПодчиненныхЭлементов = Неопределено Тогда
		ЭлементФормыГруппа.Группировка						= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Иначе                                                   
		ЭлементФормыГруппа.Группировка						= ВариантГруппировкиПодчиненныхЭлементов;
	КонецЕсли;	
	
	ЭлементФормыГруппа.Объединенная							= Истина;	
	ЭлементФормыГруппа.ОтображатьЗаголовок					= Ложь;		
	ЭлементФормыГруппа.Высота								= 0;
	ЭлементФормыГруппа.Ширина								= 0;
	ЭлементФормыГруппа.ГоризонтальноеПоложениеПодчиненных	= ГоризонтальноеПоложениеЭлемента.Центр;
	ЭлементФормыГруппа.ВертикальноеПоложениеПодчиненных		= ВертикальноеПоложениеЭлемента.Центр;
	
	Возврат ЭлементФормыГруппа;
	
КонецФункции

&НаСервере
Функция ОбычнаяГруппаСтраницы(Знач ИсточникРеквизитов, Знач РодительскийЭлемент = Неопределено)
	
	мИмяЭлемента 											= ИсточникРеквизитов["Идентификатор"];
	ДобавленнаяГруппаФормы 									= Элементы.Добавить(мИмяЭлемента, Тип("ГруппаФормы"), 
		РодительскийЭлемент); 
	ДобавленнаяГруппаФормы.Заголовок						= ИсточникРеквизитов["Заголовок"];
	ДобавленнаяГруппаФормы.Вид 								= ВидГруппыФормы.Страницы;
	ДобавленнаяГруппаФормы.Видимость						= ИсточникРеквизитов["Видимость"];
	ДобавленнаяГруппаФормы.Доступность						= ИсточникРеквизитов["Доступность"];
	ДобавленнаяГруппаФормы.ТолькоПросмотр					= ИсточникРеквизитов["ТолькоПросмотр"];
	
	ДобавленнаяГруппаФормы.ВажностьПриОтображении 			= 
		ВариантВажностиПриОтображении(ИсточникРеквизитов["ВажностьПриОтображении"]);
		
	ДобавленнаяГруппаФормы.Подсказка						= ИсточникРеквизитов["Подсказка"];
	
	ДобавленнаяГруппаФормы.ОтображениеПодсказки				= 
		ВариантОтображенияПодсказки(ИсточникРеквизитов["ОтображениеПодсказки"]);
		
	ДобавленнаяГруппаФормы.ОтображениеСтраниц 				= 
		СпособОтображенияСтраницФормы(ИсточникРеквизитов["ОтображениеСтраниц"]);
		
	Попытка		
		мЦветТекстаЗаголовка	= РаботаСЦветомКлиентСервер.HexВЦвет(ИсточникРеквизитов["ЦветТекстаЗаголовка"]);		
	Исключение
		мЦветТекстаЗаголовка	= WebЦвета.Черный;
	КонецПопытки;	
	
	ДобавленнаяГруппаФормы.ЦветТекстаЗаголовка				= мЦветТекстаЗаголовка;
	
	Попытка
		мШрифтЗаголовка		= ИсточникРеквизитов["ШрифтЗаголовка"].Получить();
		Если мШрифтЗаголовка = Неопределено Тогда
			мШрифтЗаголовка	= Новый Шрифт("Arial", 10);
		КонецЕсли;	
	Исключение
		мШрифтЗаголовка		= Новый Шрифт("Arial", 10);
	КонецПопытки;
	
	ДобавленнаяГруппаФормы.ШрифтЗаголовка					= мШрифтЗаголовка;		
	ДобавленнаяГруппаФормы.Ширина							= ИсточникРеквизитов["Ширина"];
	ДобавленнаяГруппаФормы.Высота							= ИсточникРеквизитов["Высота"];
	
	ДобавленнаяГруппаФормы.ГоризонтальноеПоложениеВГруппе	= 
		ВариантГоризонтальногоПоложенияЭлемента(ИсточникРеквизитов["ГоризонтальноеПоложениеВГруппе"]);
		
	ДобавленнаяГруппаФормы.ВертикальноеПоложениеВГруппе 	= 
		ВариантВертикальногоПоложенияЭлемента(ИсточникРеквизитов["ВертикальноеПоложениеВГруппе"]);
		
	ДобавленнаяГруппаФормы.РастягиватьПоГоризонтали 		= 
		ВариантРастягиватьЭлемент(ИсточникРеквизитов["РастягиватьПоГоризонталиВариант"]);
		
	ДобавленнаяГруппаФормы.РастягиватьПоВертикали 			= 
		ВариантРастягиватьЭлемент(ИсточникРеквизитов["РастягиватьПоВертикалиВариант"]);		
	
	Возврат ДобавленнаяГруппаФормы;
	
КонецФункции

&НаСервере
Функция ОбычнаяГруппаСтраница(Знач ИсточникРеквизитов, Знач РодительскийЭлемент = Неопределено)
	
	мИмяЭлемента 									= ИсточникРеквизитов["Идентификатор"];
	ДобавленнаяГруппаФормы 							= Элементы.Добавить(мИмяЭлемента, Тип("ГруппаФормы"), 
		РодительскийЭлемент); 
	ДобавленнаяГруппаФормы.Заголовок				= ИсточникРеквизитов["Заголовок"];
	ДобавленнаяГруппаФормы.Вид 						= ВидГруппыФормы.Страница;
	ДобавленнаяГруппаФормы.Видимость				= ИсточникРеквизитов["Видимость"];
	ДобавленнаяГруппаФормы.Доступность				= ИсточникРеквизитов["Доступность"];
	ДобавленнаяГруппаФормы.ТолькоПросмотр			= ИсточникРеквизитов["ТолькоПросмотр"];
	
	ДобавленнаяГруппаФормы.ВажностьПриОтображении 	= 
		ВариантВажностиПриОтображении(ИсточникРеквизитов["ВажностьПриОтображении"]);
		
	ДобавленнаяГруппаФормы.Группировка				= ГруппировкаЭлементовФормы(ИсточникРеквизитов["Группировка"]);		
	ДобавленнаяГруппаФормы.Подсказка				= ИсточникРеквизитов["Подсказка"];
	
	ДобавленнаяГруппаФормы.ОтображениеПодсказки		= 
		ВариантОтображенияПодсказки(ИсточникРеквизитов["ОтображениеПодсказки"]);
		
	ДобавленнаяГруппаФормы.ОтображатьЗаголовок		= ИсточникРеквизитов["ОтображатьЗаголовок"];
	мКартинка										= ИсточникРеквизитов["Картинка"].Получить();
	
	Если ТипЗнч(мКартинка) = Тип("Картинка") Тогда
		ДобавленнаяГруппаФормы.Картинка = мКартинка;
	КонецЕсли;	
	
	ДобавленнаяГруппаФормы.ВыравниваниеЭлементовИЗаголовков = 
		ВариантВыравниванияЭлементовИЗаголовков(ИсточникРеквизитов["ВыравниваниеЭлементовИЗаголовков"]);	
		
	Попытка		
		мЦветФона 				= РаботаСЦветомКлиентСервер.HexВЦвет(ИсточникРеквизитов["ЦветФона"]);
		мЦветТекстаЗаголовка	= РаботаСЦветомКлиентСервер.HexВЦвет(ИсточникРеквизитов["ЦветТекстаЗаголовка"]);		
	Исключение
		мЦветФона 				= WebЦвета.Белый;
		мЦветТекстаЗаголовка	= WebЦвета.Черный;
	КонецПопытки;	
	
	ДобавленнаяГруппаФормы.ЦветТекстаЗаголовка = мЦветТекстаЗаголовка;
	
	Попытка
		мШрифтЗаголовка		= ИсточникРеквизитов["ШрифтЗаголовка"].Получить();
		Если мШрифтЗаголовка = Неопределено Тогда
			мШрифтЗаголовка	= Новый Шрифт("Arial", 10);
		КонецЕсли;	
	Исключение
		мШрифтЗаголовка		= Новый Шрифт("Arial", 10);
	КонецПопытки;
	
	ДобавленнаяГруппаФормы.ШрифтЗаголовка					= мШрифтЗаголовка;
	
	ДобавленнаяГруппаФормы.ГоризонтальныйИнтервал 			= 
		ВариантИнтервалаМеждуЭлементамиФормы(ИсточникРеквизитов["ГоризонтальныйИнтервал"]);
		
	ДобавленнаяГруппаФормы.ВертикальныйИнтервал 			= 
		ВариантИнтервалаМеждуЭлементамиФормы(ИсточникРеквизитов["ВертикальныйИнтервал"]);
		
	ДобавленнаяГруппаФормы.ЦветФона							= мЦветФона;	
	ДобавленнаяГруппаФормы.Высота							= ИсточникРеквизитов["Высота"];
	ДобавленнаяГруппаФормы.Ширина							= ИсточникРеквизитов["Ширина"];	
	
	ДобавленнаяГруппаФормы.РастягиватьПоГоризонтали 		= 
		ВариантРастягиватьЭлемент(ИсточникРеквизитов["РастягиватьПоГоризонталиВариант"]);
		
	ДобавленнаяГруппаФормы.РастягиватьПоВертикали 			= 
		ВариантРастягиватьЭлемент(ИсточникРеквизитов["РастягиватьПоВертикалиВариант"]);
		
	ДобавленнаяГруппаФормы.ГоризонтальноеПоложениеПодчиненных= 
		ВариантГоризонтальногоПоложения(ИсточникРеквизитов["ГоризонтальноеПоложениеПодчиненных"]);
		
	ДобавленнаяГруппаФормы.ВертикальноеПоложениеПодчиненных	= 
		ВариантВертикальногоПоложения(ИсточникРеквизитов["ВертикальноеПоложениеПодчиненных"]);
		
	ДобавленнаяГруппаФормы.ВертикальнаяПрокруткаПриСжатии	= ИсточникРеквизитов["ВертикальнаяПрокруткаПриСжатии"];
	
	Возврат ДобавленнаяГруппаФормы;
	
КонецФункции

&НаСервере
Функция ОбычнаяГруппа(Знач ИсточникРеквизитов, Знач РодительскийЭлемент = Неопределено)
		
	ДобавленнаяГруппаФормы = Элементы.Добавить(ИсточникРеквизитов["Идентификатор"], Тип("ГруппаФормы"), 
		РодительскийЭлемент); 
		
	ДобавленнаяГруппаФормы.Заголовок				= ИсточникРеквизитов["Заголовок"];
	ДобавленнаяГруппаФормы.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
	ДобавленнаяГруппаФормы.Видимость				= ИсточникРеквизитов["Видимость"];
	ДобавленнаяГруппаФормы.Доступность				= ИсточникРеквизитов["Доступность"];
	ДобавленнаяГруппаФормы.ТолькоПросмотр			= ИсточникРеквизитов["ТолькоПросмотр"];
	
	ДобавленнаяГруппаФормы.ВажностьПриОтображении 	= 
		ВариантВажностиПриОтображении(ИсточникРеквизитов["ВажностьПриОтображении"]);
		
	ПоведениеГруппы						= ВариантПоведенияОбычнойГруппы(ИсточникРеквизитов["Поведение"]);
	ДобавленнаяГруппаФормы.Поведение    = ПоведениеГруппы;	
	
	Попытка
		мЦветФона 						= РаботаСЦветомКлиентСервер.HexВЦвет(ИсточникРеквизитов["ЦветФона"]);		
		мЦветТекстаЗаголовка			= РаботаСЦветомКлиентСервер.HexВЦвет(ИсточникРеквизитов["ЦветТекстаЗаголовка"]);		
		мЦветФонаЗаголовкаСкрытогоОтображения = 
			РаботаСЦветомКлиентСервер.HexВЦвет(ИсточникРеквизитов["ЦветФонаЗаголовкаСкрытогоОтображения"]);
	Исключение
		мЦветФона 									= WebЦвета.Белый;		
		мЦветТекстаЗаголовка						= WebЦвета.Черный;		
		мЦветФонаЗаголовкаСкрытогоОтображения	 	= WebЦвета.Белый;
	КонецПопытки;	
	
	Попытка
		мШрифтЗаголовка		= ИсточникРеквизитов["ШрифтЗаголовка"].Получить();
		Если мШрифтЗаголовка = Неопределено Тогда
			мШрифтЗаголовка	= Новый Шрифт("Arial", 10);
		КонецЕсли;	
	Исключение
		мШрифтЗаголовка		= Новый Шрифт("Arial", 10);
	КонецПопытки;	
	
	Если ПоведениеГруппы <> ПоведениеОбычнойГруппы.Обычное Тогда
		ДобавленнаяГруппаФормы.ЗаголовокСвернутогоОтображения 	= ИсточникРеквизитов["ЗаголовокСвернутогоОтображения"];
		ДобавленнаяГруппаФормы.Свернута							= ИсточникРеквизитов["Свернута"];
		
//		ДобавленнаяГруппаФормы.ОтображениеУправления = 
//			ВариантОтображенияУправленияОбычнойГруппы(ИсточникРеквизитов["ОтображениеУправления"]);
			
		ДобавленнаяГруппаФормы.ОтображатьОтступСлева			= ИсточникРеквизитов["ОтображатьОтступСлева"];
		ДобавленнаяГруппаФормы.ЦветФонаЗаголовкаСкрытогоОтображения = мЦветФонаЗаголовкаСкрытогоОтображения;
		
	Иначе
		ДобавленнаяГруппаФормы.СквозноеВыравнивание				= 
			ВариантСквозногоВыравнивания(ИсточникРеквизитов["СквозноеВыравнивание"]);
			
	КонецЕсли;
		
	ДобавленнаяГруппаФормы.Отображение		= ВариантОтображенияОбычнойГруппы(ИсточникРеквизитов["Отображение"]);
	ДобавленнаяГруппаФормы.Группировка		= ГруппировкаЭлементовФормы(ИсточникРеквизитов["Группировка"]);
	ДобавленнаяГруппаФормы.Объединенная		= ИсточникРеквизитов["Объединенная"];	
	ДобавленнаяГруппаФормы.Подсказка		= ИсточникРеквизитов["Подсказка"];
	
	ДобавленнаяГруппаФормы.ОтображениеПодсказки	=
		ВариантОтображенияПодсказки(ИсточникРеквизитов["ОтображениеПодсказки"]);
		
	ДобавленнаяГруппаФормы.ОтображатьЗаголовок					= ИсточникРеквизитов["ОтображатьЗаголовок"];
	
	ДобавленнаяГруппаФормы.ВыравниваниеЭлементовИЗаголовков 	= 
		ВариантВыравниванияЭлементовИЗаголовков(ИсточникРеквизитов["ВыравниваниеЭлементовИЗаголовков"]);
		
	ДобавленнаяГруппаФормы.ЦветТекстаЗаголовка					= мЦветТекстаЗаголовка;
	ДобавленнаяГруппаФормы.ШрифтЗаголовка						= мШрифтЗаголовка;
	
	ДобавленнаяГруппаФормы.ГоризонтальныйИнтервал				= 
		ВариантИнтервалаМеждуЭлементамиФормы(ИсточникРеквизитов["ГоризонтальныйИнтервал"]);
		
	ДобавленнаяГруппаФормы.ВертикальныйИнтервал     			= 
		ВариантИнтервалаМеждуЭлементамиФормы(ИсточникРеквизитов["ВертикальныйИнтервал"]);
		
	ДобавленнаяГруппаФормы.ЦветФона								= мЦветФона;	
	ДобавленнаяГруппаФормы.Высота								= ИсточникРеквизитов["Высота"];
	ДобавленнаяГруппаФормы.Ширина								= ИсточникРеквизитов["Ширина"];
	
	ДобавленнаяГруппаФормы.ГоризонтальноеПоложениеВГруппе 		= 
		ВариантГоризонтальногоПоложенияЭлемента(ИсточникРеквизитов["ГоризонтальноеПоложениеВГруппе"]);
		
	ДобавленнаяГруппаФормы.ВертикальноеПоложениеВГруппе 		= 
		ВариантВертикальногоПоложенияЭлемента(ИсточникРеквизитов["ВертикальноеПоложениеВГруппе"]);
		
	ДобавленнаяГруппаФормы.ГоризонтальноеПоложениеПодчиненных 	= 
		ВариантГоризонтальногоПоложения(ИсточникРеквизитов["ГоризонтальноеПоложениеПодчиненных"]);
		
	ДобавленнаяГруппаФормы.ВертикальноеПоложениеПодчиненных		= 
		ВариантВертикальногоПоложения(ИсточникРеквизитов["ВертикальноеПоложениеПодчиненных"]);
		
	ДобавленнаяГруппаФормы.РастягиватьПоГоризонтали 			= 
		ВариантРастягиватьЭлемент(ИсточникРеквизитов["РастягиватьПоГоризонталиВариант"]);
		
	ДобавленнаяГруппаФормы.РастягиватьПоВертикали 				= 
		ВариантРастягиватьЭлемент(ИсточникРеквизитов["РастягиватьПоВертикалиВариант"]);
	
	Возврат ДобавленнаяГруппаФормы;	
	
КонецФункции

&НаСервере
Функция КнопкаФормы(Знач ИсточникРеквизитов, Знач РодительскийЭлемент = Неопределено)
	
	мУИДВиджета	= ИсточникРеквизитов["Ссылка"].УникальныйИдентификатор();	
	Если ИсточникРеквизитов["ВидОбработчика"] = Перечисления.ВидыОбработчиковВиджетов.ОткрытьФорму Тогда				
		ИмяЭлементаФормы = "ОткрытьФорму_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + "_"
			+ СтрЗаменить(мУИДВиджета, "-", "");
	Иначе
		ИмяЭлементаФормы = "ПроизвольныйАлгоритм_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + "_"
			+ СтрЗаменить(мУИДВиджета, "-", "");
	КонецЕсли;	
	ДобавленныйЭлементФормы				= Элементы.Добавить(ИмяЭлементаФормы, Тип("КнопкаФормы"), РодительскийЭлемент);	
	ДобавленныйЭлементФормы.Видимость	= ИсточникРеквизитов["Видимость"];
	ДобавленныйЭлементФормы.Доступность	= ИсточникРеквизитов["Доступность"];
	ДобавленныйЭлементФормы.ВажностьПриОтображении = 
		ВариантВажностиПриОтображении(ИсточникРеквизитов["ВажностьПриОтображении"]);
		
	ДобавленныйЭлементФормы.ОтображениеПодсказки				= 
		ВариантОтображенияПодсказки(ИсточникРеквизитов["ОтображениеПодсказки"]);
		
	Попытка
		мЦветФона 		= РаботаСЦветомКлиентСервер.HexВЦвет(ИсточникРеквизитов["ЦветФона"]);
		мЦветТекста 	= РаботаСЦветомКлиентСервер.HexВЦвет(ИсточникРеквизитов["ЦветТекста"]);
		мЦветРамки      = РаботаСЦветомКлиентСервер.HexВЦвет(ИсточникРеквизитов["ЦветРамки"]);
	Исключение
		мЦветФона 		= WebЦвета.Белый;
		мЦветТекста 	= WebЦвета.Черный;		
		мЦветРамки      = WebЦвета.НейтральноСерый;		
	КонецПопытки;
	Попытка
		мШрифт = ИсточникРеквизитов["Шрифт"].Получить();
		Если мШрифт = Неопределено Тогда
			мШрифт = Новый Шрифт("Arial", 10);
		КонецЕсли;
	Исключение
		мШрифт = Новый Шрифт("Arial", 10);
	КонецПопытки;	
	ДобавленныйЭлементФормы.ЦветТекста							= мЦветТекста;
	ДобавленныйЭлементФормы.Шрифт								= мШрифт;		
	ДобавленныйЭлементФормы.ЦветФона							= мЦветФона;
	ДобавленныйЭлементФормы.ЦветРамки							= мЦветРамки; 	
	ДобавленныйЭлементФормы.ВысотаЗаголовка         			= ИсточникРеквизитов["ВысотаЗаголовка"];	
	ДобавленныйЭлементФормы.Высота								= ИсточникРеквизитов["Высота"];
	ДобавленныйЭлементФормы.Ширина								= ИсточникРеквизитов["Ширина"];
	ДобавленныйЭлементФормы.АвтоМаксимальнаяВысота				= ИсточникРеквизитов["АвтоМаксимальнаяВысота"];
	ДобавленныйЭлементФормы.АвтоМаксимальнаяШирина				= ИсточникРеквизитов["АвтоМаксимальнаяШирина"];
	
	ДобавленныйЭлементФормы.ГоризонтальноеПоложениеВГруппе 		= 
		ВариантГоризонтальногоПоложенияЭлемента(ИсточникРеквизитов["ГоризонтальноеПоложениеВГруппе"]);
		
	ДобавленныйЭлементФормы.ВертикальноеПоложениеВГруппе 		= 
		ВариантВертикальногоПоложенияЭлемента(ИсточникРеквизитов["ВертикальноеПоложениеВГруппе"]);
		
	ДобавленныйЭлементФормы.РастягиватьПоГоризонтали 			= ИсточникРеквизитов["РастягиватьПоГоризонтали"];
	ДобавленныйЭлементФормы.РастягиватьПоВертикали 				= ИсточникРеквизитов["РастягиватьПоВертикали"];	
	ИмяКоманды													= ИмяЭлементаФормы;
	КомандаКнопки												= Команды.Найти(ИмяКоманды);
	
	Если КомандаКнопки = Неопределено Тогда
		КомандаКнопки											= Команды.Добавить(ИмяКоманды);
		КомандаКнопки.Действие									= "Подключаемый_ГиперссылкаНажатие"; 
		КомандаКнопки.Заголовок									= СтрЗаменить(ИсточникРеквизитов["Заголовок"], " ", 
			Символы.НПП);
		мКартинка												= ИсточникРеквизитов["Картинка"].Получить();
		
		Если ТипЗнч(мКартинка) = Тип("Картинка") Тогда
			КомандаКнопки.Картинка = мКартинка;
		КонецЕсли;
		
		КомандаКнопки.Отображение 	= ВариантОтображенияКнопкиФормы(ИсточникРеквизитов["ВидОтображенияКнопки"]);			
		КомандаКнопки.Подсказка		= ИсточникРеквизитов["Подсказка"];
	КонецЕсли;	
	ДобавленныйЭлементФормы.ИмяКоманды = ИмяКоманды;
	
	Возврат ДобавленныйЭлементФормы;	
	
КонецФункции

&НаСервере
Функция ДекорацияКартинка(Знач ИсточникРеквизитов, Знач РодительскийЭлемент = Неопределено)
	
	мГиперссылка	= ИсточникРеквизитов["Гиперссылка"];
	мУИДВиджета		= ИсточникРеквизитов["Ссылка"].УникальныйИдентификатор();
	
	Если мГиперссылка = Истина Тогда
		Если ИсточникРеквизитов["ВидОбработчика"] = Перечисления.ВидыОбработчиковВиджетов.ОткрытьФорму Тогда				
			ИмяЭлементаФормы = "ОткрытьФорму_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + "_"
				+ СтрЗаменить(мУИДВиджета, "-", "");
				
		Иначе
			ИмяЭлементаФормы = "ПроизвольныйАлгоритм_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") 
				+ "_" + СтрЗаменить(мУИДВиджета, "-", "");
				
		КонецЕсли;
			
	Иначе
		ИмяЭлементаФормы = ИсточникРеквизитов["Идентификатор"];
		
	КонецЕсли;	
	
	ДобавленныйЭлементФормы							= Элементы.Добавить(ИмяЭлементаФормы, Тип("ДекорацияФормы"), РодительскийЭлемент);				
	ДобавленныйЭлементФормы.Заголовок 				= ИсточникРеквизитов["Заголовок"];
	ДобавленныйЭлементФормы.Вид						= ВидДекорацииФормы.Картинка;
	ДобавленныйЭлементФормы.Видимость				= ИсточникРеквизитов["Видимость"];
	ДобавленныйЭлементФормы.Доступность				= ИсточникРеквизитов["Доступность"];
	ДобавленныйЭлементФормы.ВажностьПриОтображении 	= ВариантВажностиПриОтображении(ИсточникРеквизитов["ВажностьПриОтображении"]);		
	ДобавленныйЭлементФормы.Гиперссылка				= мГиперссылка;	
	ДобавленныйЭлементФормы.Подсказка				= ИсточникРеквизитов["Подсказка"];
	ДобавленныйЭлементФормы.ОтображениеПодсказки	= ВариантОтображенияПодсказки(ИсточникРеквизитов["ОтображениеПодсказки"]);	
	
	Попытка		
		мЦветТекста 	= РаботаСЦветомКлиентСервер.HexВЦвет(ИсточникРеквизитов["ЦветТекста"]);		
		мЦветРамки      = РаботаСЦветомКлиентСервер.HexВЦвет(ИсточникРеквизитов["ЦветРамки"]);		
	Исключение		
		мЦветТекста 	= WebЦвета.Черный;		
		мЦветРамки      = WebЦвета.НейтральноСерый;		
	КонецПопытки;
	
	Попытка
		мШрифт = ИсточникРеквизитов["Шрифт"].Получить();
		Если мШрифт = Неопределено Тогда
			мШрифт = Новый Шрифт("Arial", 10);
		КонецЕсли;	
	Исключение
		мШрифт = Новый Шрифт("Arial", 10);
	КонецПопытки;
	
	ДобавленныйЭлементФормы.ЦветТекста							= мЦветТекста;
	ДобавленныйЭлементФормы.Шрифт								= мШрифт;	
	мКартинка													= ИсточникРеквизитов["Картинка"].Получить();	
	
	Если ТипЗнч(мКартинка) = Тип("Картинка") Тогда
		ДобавленныйЭлементФормы.Картинка 						= мКартинка;
		ДобавленныйЭлементФормы.Масштабировать  				= ИсточникРеквизитов["Масштабировать"];
		ДобавленныйЭлементФормы.ТекстНевыбраннойКартинки		= ИсточникРеквизитов["ТекстНевыбраннойКартинки"];
		ДобавленныйЭлементФормы.РазмерКартинки = ВариантРазмераКартинки(ИсточникРеквизитов["РазмерКартинки"]);
	КонецЕсли;
	
	ДобавленныйЭлементФормы.Рамка								= 
		ПолучитьРамкуДекорацииФормы(ИсточникРеквизитов["ТипРамки"], ИсточникРеквизитов["ТолщинаРамки"]);
		
	ДобавленныйЭлементФормы.ЦветРамки							= мЦветРамки;
	ДобавленныйЭлементФормы.Высота								= ИсточникРеквизитов["Высота"];
	ДобавленныйЭлементФормы.Ширина								= ИсточникРеквизитов["Ширина"];
	ДобавленныйЭлементФормы.АвтоМаксимальнаяВысота				= ИсточникРеквизитов["АвтоМаксимальнаяВысота"];
	ДобавленныйЭлементФормы.АвтоМаксимальнаяШирина				= ИсточникРеквизитов["АвтоМаксимальнаяШирина"];
	
	ДобавленныйЭлементФормы.ГоризонтальноеПоложениеВГруппе 		= 
		ВариантГоризонтальногоПоложенияЭлемента(ИсточникРеквизитов["ГоризонтальноеПоложениеВГруппе"]);
		
	ДобавленныйЭлементФормы.ВертикальноеПоложениеВГруппе 		= 
		ВариантВертикальногоПоложенияЭлемента(ИсточникРеквизитов["ВертикальноеПоложениеВГруппе"]);
		
	ДобавленныйЭлементФормы.РастягиватьПоГоризонтали 			= 
		ВариантРастягиватьЭлемент(ИсточникРеквизитов["РастягиватьПоГоризонталиВариант"]);
		
	ДобавленныйЭлементФормы.РастягиватьПоВертикали 				= 
		ВариантРастягиватьЭлемент(ИсточникРеквизитов["РастягиватьПоВертикалиВариант"]);
	
	Если мГиперссылка = Истина Тогда
		ДобавленныйЭлементФормы.УстановитьДействие("Нажатие", "Подключаемый_ГиперссылкаНажатие");
	КонецЕсли;
	
	Возврат ДобавленныйЭлементФормы;
	
КонецФункции

&НаСервере
Функция МетрикаСУсловнымОформлением(Знач ИсточникРеквизитов, 
									Знач РодительскийЭлемент= Неопределено, 
									Знач ЗначениеМетрики 	= Неопределено)
	
	// Группа (вертикальная группировка).
	// Группа (горизонтальная группировка).
	// Декорация картинка.
	// Декорация текст (значение метрики).
	// Группа подвал (вертикальная группировка).
	// Декорация текст(заголовок виджета).
	
	мКартинка 					= Неопределено;
	СтрокаНастроек				= Неопределено;
	ЗаголовокЗначенияМетрики	= "—";
	мЦветФона					= WebЦвета.Белый;
	мЦветТекста					= WebЦвета.Черный;
	АвтоЦвет					= Новый Цвет;	
	ЗначениеМетрики				= ?(ЗначениеМетрики = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ЗначениеМетрики), 0, 
		ЗначениеМетрики);
	
	врНастройкиОформления = ИсточникРеквизитов["НастройкиОформления"];
	
	Если ТипЗнч(врНастройкиОформления) = Тип("ТаблицаЗначений") Тогда
		НастройкиОформления = врНастройкиОформления;
	Иначе
		НастройкиОформления = врНастройкиОформления.Выгрузить();
	КонецЕсли;
	
	ПоследняяСтрока	= НастройкиОформления[НастройкиОформления.Количество() - 1];
	
	Для Каждого мСтрока Из НастройкиОформления Цикл
		
		Если мСтрока.НомерСтроки <> ПоследняяСтрока.НомерСтроки
			И ЗначениеМетрики >= мСтрока.От
			И ЗначениеМетрики < мСтрока.До Тогда
			СтрокаНастроек = мСтрока;
			Прервать;
			
		ИначеЕсли мСтрока.НомерСтроки = ПоследняяСтрока.НомерСтроки
			И ЗначениеМетрики >= мСтрока.От
			И ЗначениеМетрики <= мСтрока.До Тогда
			СтрокаНастроек = мСтрока;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаНастроек <> Неопределено Тогда
		
		Если СтрокаНастроек.КартинкаУстановлена Тогда
			
			Попытка
				мКартинка = мСтрока.Картинка.Получить();
			Исключение
				мКартинка = Неопределено;
			КонецПопытки;
			
		КонецЕсли;
		
		ЗаголовокЗначенияМетрики = Формат(ЗначениеМетрики, "ЧРД=; ЧРГ=; ЧН=—; ЧГ=");
		
		Попытка
			мЦветФона	= РаботаСЦветомКлиентСервер.HexВЦвет(СтрокаНастроек.ЦветФона);
			мЦветТекста	= РаботаСЦветомКлиентСервер.HexВЦвет(СтрокаНастроек.ЦветТекста);
		Исключение					
		КонецПопытки;
		
	КонецЕсли;
	
	ИмяГруппыМетрики 	 				= "ГруппаМетрика" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	ВерхняяГруппаВиджета 				= ОбычнаяГруппаБезОтображения(ИмяГруппыМетрики, РодительскийЭлемент, 
		ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
		
	ВерхняяГруппаВиджета.Ширина						= 8;
	ВерхняяГруппаВиджета.РастягиватьПоГоризонтали 	= Ложь;
	ВерхняяГруппаВиджета.ВертикальныйИнтервал 		= ИнтервалМеждуЭлементамиФормы.Нет;
		
	ИмяГруппыМетрики 	 				= "ГруппаКартинкаИТекст" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), 
		"-", "");
	
	ГруппаКартинкаИТекст 				= ОбычнаяГруппаБезОтображения(ИмяГруппыМетрики, ВерхняяГруппаВиджета, 
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
		
	ГруппаКартинкаИТекст.ЦветФона		= мЦветФона;
	
	Если мЦветФона <> WebЦвета.Белый Тогда
		мКрасный 	= Цел(мЦветФона.Красный * 0.9);
		мЗеленый 	= Цел(мЦветФона.Зеленый * 0.95);
		мСиний		= Цел(мЦветФона.Синий 	* 0.95);
		ЦветПодвала	= Новый Цвет(мКрасный, мЗеленый, мСиний);
		
	Иначе
		ЦветПодвала	= WebЦвета.Белый;
	КонецЕсли;	
	
	Если мКартинка = Неопределено Тогда
		ГруппаКартинкаИТекст.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
		
	Иначе	
		ИмяЭлементаФормы			= "ДекорацияКартинка" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		ДекорацияКартинка			= Элементы.Добавить(ИмяЭлементаФормы, Тип("ДекорацияФормы"), ГруппаКартинкаИТекст);					
		ДекорацияКартинка.Вид		= ВидДекорацииФормы.Картинка;		
		ДекорацияКартинка.Картинка 	= мКартинка;
		
	КонецЕсли;	
	
	ИмяЭлементаФормы				= "ДекорацияТекст" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	ДекорацияТекст					= Элементы.Добавить(ИмяЭлементаФормы, Тип("ДекорацияФормы"), ГруппаКартинкаИТекст);					
	ДекорацияТекст.Вид				= ВидДекорацииФормы.Надпись;
	ДекорацияТекст.Заголовок 		= ЗаголовокЗначенияМетрики;	
	ДекорацияТекст.Шрифт			= Новый Шрифт("Arial", 18, Истина);
	ДекорацияТекст.ЦветТекста		= мЦветТекста;
	ДекорацияТекст.ЦветФона			= АвтоЦвет;
	ДекорацияТекст.РастягиватьПоГоризонтали = Истина;
	
	Если мКартинка = Неопределено Тогда
		ДекорацияТекст.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	КонецЕсли;	
	
	ИмяГруппыМетрики 	 				= "ГруппаПодвал" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	ГруппаПодвал						= ОбычнаяГруппаБезОтображения(ИмяГруппыМетрики, ВерхняяГруппаВиджета, 
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
		
	ГруппаПодвал.ЦветФона				= ЦветПодвала;	
	мГиперссылка						= ИсточникРеквизитов["Гиперссылка"];
	мУИДВиджета							= ИсточникРеквизитов["Ссылка"].УникальныйИдентификатор();
	
	Если мГиперссылка = Истина Тогда
		
		Если ИсточникРеквизитов["ВидОбработчика"] = Перечисления.ВидыОбработчиковВиджетов.ОткрытьФорму Тогда				
			ИмяЭлементаФормы = "ОткрытьФорму_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + "_"
				+ СтрЗаменить(мУИДВиджета, "-", "");
				
		Иначе
			ИмяЭлементаФормы = "ПроизвольныйАлгоритм_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") 
				+ "_" + СтрЗаменить(мУИДВиджета, "-", "");
				
		КонецЕсли;
			
	Иначе
		ИмяЭлементаФормы = ИсточникРеквизитов["Идентификатор"];
	КонецЕсли;	
	
	ДекорацияТекстПодвал				= Элементы.Добавить(ИмяЭлементаФормы, Тип("ДекорацияФормы"), ГруппаПодвал);
	ДекорацияТекстПодвал.Вид			= ВидДекорацииФормы.Надпись;
	ДекорацияТекстПодвал.Заголовок 		= ИсточникРеквизитов["Заголовок"];
	ДекорацияТекстПодвал.Шрифт			= Новый Шрифт("Arial", 8);
	ДекорацияТекстПодвал.РастягиватьПоГоризонтали 	= Истина;	
	ДекорацияТекстПодвал.ГоризонтальноеПоложение 	= ГоризонтальноеПоложениеЭлемента.Центр;
	
	Если мГиперссылка = Истина Тогда
		ДекорацияТекстПодвал.Гиперссылка = Истина;
		ДекорацияТекстПодвал.УстановитьДействие("Нажатие", "Подключаемый_ГиперссылкаНажатие");
	КонецЕсли;
	
	Возврат РодительскийЭлемент;
	
КонецФункции

&НаСервере
Функция МетрикаДиаграмма(Знач ИсточникРеквизитов, 
						Знач РодительскийЭлемент= Неопределено, 
						Знач ЗначенияМетрики 	= Неопределено)
						
	ГСЧ												= Новый ГенераторСлучайныхЧисел();
	ИмяГруппыМетрики 	 							= 
		"ГруппаМетрикиДиаграммы" + СтрЗаменить(Строка(ИсточникРеквизитов["Ссылка"].УникальныйИдентификатор()), "-", "");
	
	ВерхняяГруппаВиджета 							= ОбычнаяГруппаБезОтображения(ИмяГруппыМетрики, РодительскийЭлемент,
		ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
		
	ВерхняяГруппаВиджета.Отображение				= ОтображениеОбычнойГруппы.СлабоеВыделение;			
	ВерхняяГруппаВиджета.РастягиватьПоГоризонтали	= Ложь;
	ВерхняяГруппаВиджета.ВертикальныйИнтервал 		= ИнтервалМеждуЭлементамиФормы.Нет;
	ЦветФонаГруппы									= ИсточникРеквизитов["ЦветФона"];
	ВерхняяГруппаВиджета.ЦветФона					= РаботаСЦветомКлиентСервер.HexВЦвет(ЦветФонаГруппы);	
	
	ИмяРеквизитаДиаграмма							= "РеквизитДиаграмма" + 
		СтрЗаменить(Строка(ИсточникРеквизитов["Ссылка"].УникальныйИдентификатор()), "-", "");
	
	ОтборСтруктура	= Новый Структура;
	ОтборСтруктура.Вставить("ИмяДиаграммы", ИмяРеквизитаДиаграмма);
	МассивСтрок 	= ТаблицаДиаграмм.НайтиСтроки(ОтборСтруктура);	
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		ДобавленныйРеквизитДиаграмма	= Новый РеквизитФормы(ИмяРеквизитаДиаграмма, 
			Новый ОписаниеТипов("Диаграмма"), , , Ложь);
			
		МассивДобавляемыхРеквизитов		= Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(ДобавленныйРеквизитДиаграмма);
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		НоваяСтрока 					= ТаблицаДиаграмм.Добавить();
		НоваяСтрока.ИмяДиаграммы		= ИмяРеквизитаДиаграмма;
		НоваяСтрока.ГруппаЭлемента		= ИмяГруппыМетрики;
		
	КонецЕсли;
	
	ТекущаяДиаграмма 								= ЭтаФорма[ИмяРеквизитаДиаграмма];	
	
	ТекущаяДиаграмма.ТипДиаграммы 					= 
		Перечисления.ТипыДиаграмм.ПолучитьСистемныйТипДиаграммы(ИсточникРеквизитов["ТипДиаграммы"]);
		
	ТекущаяДиаграмма.РежимСглаживания				= ВариантСглаживанияДиаграммы(ИсточникРеквизитов["РежимСглаживанияДиаграммы"]);
	ТекущаяДиаграмма.Обновление 					= Ложь;
	ТекущаяДиаграмма.Очистить();	
	ТекущаяДиаграмма.Рамка							= Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ТекущаяДиаграмма.ЦветРамки						= Новый Цвет();
	ТекущаяДиаграмма.АвтоУстановкаТекстаСерий		= Ложь;
	ТекущаяДиаграмма.АвтоУстановкаТекстаТочек		= Ложь;
	ТекущаяДиаграмма.ОтображатьЛегенду				= ИсточникРеквизитов["ОтображатьЛегенду"];
	ТекущаяДиаграмма.ПрозрачныйФон					= Истина;
	ТекущаяДиаграмма.ПрозрачныйФонПодписей			= Истина;	
	ТекущаяДиаграмма.ОбластьПостроения.ПрозрачныйФон= Истина;
	ТекущаяДиаграмма.ОбластьЛегенды.ПрозрачныйФон 	= Истина;	
	
	ОтображатьШкалуТочек							= ИсточникРеквизитов["ОтображатьШкалуТочек"];	
	
	Если ОтображатьШкалуТочек = Истина Тогда
		ТекущаяДиаграмма.ОбластьПостроения.ШкалаТочек.ПоложениеПодписейШкалы = ПоложениеПодписейШкалыДиаграммы.Авто;
	Иначе
		ТекущаяДиаграмма.ОбластьПостроения.ШкалаТочек.ПоложениеПодписейШкалы = ПоложениеПодписейШкалыДиаграммы.Нет;
	КонецЕсли;	
	
	ОтображатьШкалуЗначений							= ИсточникРеквизитов["ОтображатьШкалуЗначений"];
	Если ОтображатьШкалуЗначений = Истина Тогда
		ТекущаяДиаграмма.ОбластьПостроения.ШкалаЗначений.ПоложениеПодписейШкалы = ПоложениеПодписейШкалыДиаграммы.Авто;
	Иначе
		ТекущаяДиаграмма.ОбластьПостроения.ШкалаЗначений.ПоложениеПодписейШкалы = ПоложениеПодписейШкалыДиаграммы.Нет;
	КонецЕсли;
	
	ИмяЭлементаФормы							= "Диаграмма" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), 
		"-", "");	
	ЭлементДиаграмма							= Элементы.Добавить(ИмяЭлементаФормы, Тип("ПолеФормы"), 
		ВерхняяГруппаВиджета);	
	ЭлементДиаграмма.ПутьКДанным				= ИмяРеквизитаДиаграмма; 
	ЭлементДиаграмма.Вид						= ВидПоляФормы.ПолеДиаграммы;
	ЭлементДиаграмма.Ширина						= ИсточникРеквизитов["Ширина"];
	ЭлементДиаграмма.Высота						= ИсточникРеквизитов["Высота"];
	ЭлементДиаграмма.РастягиватьПоВертикали 	= ИсточникРеквизитов["РастягиватьПоВертикали"];
	ЭлементДиаграмма.РастягиватьПоГоризонтали 	= ИсточникРеквизитов["РастягиватьПоГоризонтали"];
	ЭлементДиаграмма.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлемента(ИсточникРеквизитов["ПоложениеЗаголовка"]);
	ЭлементДиаграмма.Заголовок					= ИсточникРеквизитов["Заголовок"];
	ЭлементДиаграмма.АвтоМаксимальнаяШирина		= Ложь;
	ЭлементДиаграмма.АвтоМаксимальнаяВысота		= Ложь;
	
	Если ЗначенияМетрики <> Неопределено И ТипЗнч(ЗначенияМетрики) = Тип("ТаблицаЗначений") Тогда
		
		Если ЗначенияМетрики.Колонки.Найти("Серия") = Неопределено Тогда
			ЗначенияМетрики.Колонки.Добавить("Серия");
			ЗначенияМетрики.ЗаполнитьЗначения("", "Серия");
		КонецЕсли;
		
		СоответствиеСерий = Новый Соответствие;		
		
		Для Каждого мСтрока Из ЗначенияМетрики Цикл
			мСерия = СоответствиеСерий.Получить(мСтрока.Серия);
			
			Если мСерия = Неопределено Тогда
				мСерия 			= ТекущаяДиаграмма.Серии.Добавить();			
				мСерия.Маркер 	= ТипМаркераДиаграммы.Круг;
				мСерия.Текст 	= мСтрока.Серия;
				СоответствиеСерий.Вставить(мСтрока.Серия, мСерия);				
			КонецЕсли;
			
			Точка 		= ТекущаяДиаграмма.Точки.Добавить();
			Точка.Текст = мСтрока.Точка;
			ТекущаяДиаграмма.УстановитьЗначение(Точка, мСерия, мСтрока.Значение);			
		КонецЦикла;		
		
	Иначе
		
		НоваяСерия				= ТекущаяДиаграмма.Серии.Добавить();			
		НоваяСерия.Маркер 		= ТипМаркераДиаграммы.Круг;		
		НоваяСерия.Цвет 		= ЦветаСтиля.ЦветДиаграммыОтсутствующиеДанные;
		ТекущаяДиаграмма.ОтображатьЛегенду 										= Ложь;
		ТекущаяДиаграмма.ОбластьПостроения.ШкалаТочек.ПоложениеПодписейШкалы 	= ПоложениеПодписейШкалыДиаграммы.Нет;
		ТекущаяДиаграмма.ОбластьПостроения.ШкалаЗначений.ПоложениеПодписейШкалы = ПоложениеПодписейШкалыДиаграммы.Нет;
		
		Для Счетчик = 1 По 5 Цикл
			
			Точка = ТекущаяДиаграмма.Точки.Добавить();
			ТекущаяДиаграмма.УстановитьЗначение(Точка, НоваяСерия, ГСЧ.СлучайноеЧисло(0, 100), , " ");
			
		КонецЦикла;
		
	КонецЕсли;	
	
	ТекущаяДиаграмма.Обновление = Истина;
	
	Возврат РодительскийЭлемент;
	
КонецФункции

&НаСервере
Функция ВариантСглаживанияДиаграммы(Знач ВариантСглаживанияДиаграммы)
	
	Если ВариантСглаживанияДиаграммы = Перечисления.РежимыСглаживанияДиаграммы.ГладкаяКривая Тогда
		Возврат РежимСглаживанияДиаграммы.ГладкаяКривая;
		
	Иначе
		Возврат РежимСглаживанияДиаграммы.Нет;
		
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ПоложениеЗаголовкаЭлемента(Знач ПоложениеЗаголовка)
	
	пПоложенияЗаголовкаЭлементаФормы = Перечисления.ПоложенияЗаголовкаЭлементаФормы;
	
	Если ПоложениеЗаголовка = пПоложенияЗаголовкаЭлементаФормы.Авто Тогда
		Возврат ПоложениеЗаголовкаЭлементаФормы.Авто;
		
	ИначеЕсли ПоложениеЗаголовка = пПоложенияЗаголовкаЭлементаФормы.Верх Тогда
		Возврат ПоложениеЗаголовкаЭлементаФормы.Верх;
		
	ИначеЕсли ПоложениеЗаголовка = пПоложенияЗаголовкаЭлементаФормы.Лево Тогда
		Возврат ПоложениеЗаголовкаЭлементаФормы.Лево;
		
	ИначеЕсли ПоложениеЗаголовка = пПоложенияЗаголовкаЭлементаФормы.Низ Тогда
		Возврат ПоложениеЗаголовкаЭлементаФормы.Низ;
		
	ИначеЕсли ПоложениеЗаголовка = пПоложенияЗаголовкаЭлементаФормы.Право Тогда
		Возврат ПоложениеЗаголовкаЭлементаФормы.Право;
		
	Иначе
		Возврат ПоложениеЗаголовкаЭлементаФормы.Нет;
		
	КонецЕсли;
	
КонецФункции	

&НаСервере
Процедура ОбновитьРабочийСтол()
	
	Если Не ЗначениеЗаполнено(РабочийСтолСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьРабочийСтол();	
	
	ОсновнаяГруппаЭлементов	= Элементы.ОсновнаяГруппаЭлементов;
	
	Запрос = Новый Запрос;
	
	Если УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") Тогда
		ТекстЗапросаДоступныеЭлементы = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Виджеты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Виджеты КАК Виджеты
			|ГДЕ
			|	Виджеты.Владелец = &Владелец
			|	И НЕ Виджеты.ПометкаУдаления";
	Иначе
		ТекстЗапросаДоступныеЭлементы = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Виджеты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Виджеты КАК Виджеты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Виджеты.Роли КАК ВиджетыРоли
			|		ПО Виджеты.Ссылка = ВиджетыРоли.Ссылка
			|ГДЕ
			|	Виджеты.Владелец = &Владелец
			|	И ВиджетыРоли.Роль ЕСТЬ NULL
			|	И НЕ Виджеты.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВиджетыРоли.Ссылка
			|ИЗ
			|	Справочник.Виджеты.Роли КАК ВиджетыРоли
			|ГДЕ
			|	ВиджетыРоли.Ссылка.Владелец = &Владелец
			|	И ВиджетыРоли.Роль В(&СписокДоступныхРолей)
			|	И НЕ ВиджетыРоли.Ссылка.ПометкаУдаления";
		
	КонецЕсли;
	
	ТекстЗапросаВиджеты = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Справочник.Виджеты КАК Виджеты
		|ГДЕ
		|	Виджеты.Владелец = &Владелец
		|	И НЕ Виджеты.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Виджеты.РеквизитДопУпорядочивания";
	
	Запрос.Текст = ТекстЗапросаДоступныеЭлементы + ";" + ТекстЗапросаВиджеты;
	
	Запрос.УстановитьПараметр("Владелец", 				РабочийСтолСсылка);
	Запрос.УстановитьПараметр("Пользователь", 			Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("СписокДоступныхРолей", 	СписокРолейТекущегоПользователя);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ДоступныеЭлементы 	= Пакет[0].Выгрузить();
	
	Если ДоступныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДочерниеЭлементы 	= Пакет[1].Выгрузить();
	ДочерниеЭлементы.Индексы.Добавить("Родитель");
	ДочерниеЭлементы.Индексы.Добавить("Ссылка");
	ТаблицаМетрик.Очистить();
	ВывестиПодчиненныеЭлементы(Неопределено, ОсновнаяГруппаЭлементов, ДочерниеЭлементы, ДоступныеЭлементы);
		
КонецПроцедуры

&НаСервере
Процедура ВывестиПодчиненныеЭлементы(Знач ВиджетСсылка, Знач ЭлементФормыРодитель, Знач ДочерниеЭлементы, 
										Знач ДоступныеЭлементы)
		
	Если ВиджетСсылка = Неопределено Тогда
		ВиджетСсылка = Справочники.Виджеты.ПустаяСсылка();
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Родитель", ВиджетСсылка);
	МассивСтрок		= ДочерниеЭлементы.НайтиСтроки(ПараметрыОтбора);		
	
	Для Каждого Строка Из МассивСтрок Цикл		
		
		// Отсекаем права доступа (по доступу к объектам).
		Если НЕ ПустаяСтрока(Строка.ИмяОбъектаФормы) Тогда
			Попытка			
				ПравоПросмотра = ПравоДоступа("Просмотр", Метаданные.НайтиПоПолномуИмени(Строка.ИмяОбъектаФормы));
			Исключение
				ПравоПросмотра = Истина;
			КонецПопытки;
				
			Если НЕ ПравоПросмотра Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Отсекаем права доступа (по пользователям).
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Ссылка", Строка.Ссылка);
		МассивСтрок2 	= ДоступныеЭлементы.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок2.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДочернийВиджет 				= Строка.Ссылка;		
		Виджет						= ДочерниеЭлементы.Найти(ДочернийВиджет, "Ссылка");
		НовыйЭлементФормыРодитель 	= НовыйЭлементФормы(Виджет, ЭлементФормыРодитель);
		ВывестиПодчиненныеЭлементы(ДочернийВиджет, НовыйЭлементФормыРодитель, ДочерниеЭлементы, ДоступныеЭлементы);
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Функция НовыйЭлементФормы(Знач Виджет, Знач ЭлементФормыРодитель)
	
	ВидыВиджетов 						= Перечисления.ВидыВиджетов;	
	ВиджетВид 							= Виджет.Вид;

	Если ВиджетВид = ВидыВиджетов.Страницы Тогда		
		Возврат ОбычнаяГруппаСтраницы(Виджет, ЭлементФормыРодитель);

	ИначеЕсли ВиджетВид = ВидыВиджетов.Страница Тогда		
		Возврат ОбычнаяГруппаСтраница(Виджет, ЭлементФормыРодитель);
		
	ИначеЕсли ВиджетВид = ВидыВиджетов.Декорация Тогда					
		
		Если Виджет.ВидДекорации = Перечисления.ВидыДекораций.Надпись Тогда
			Возврат ДекорацияТекст(Виджет, ЭлементФормыРодитель);
			
		Иначе			
			Возврат ДекорацияКартинка(Виджет, ЭлементФормыРодитель);
			
		КонецЕсли;	
		
	ИначеЕсли ВиджетВид = ВидыВиджетов.ОбычнаяГруппа Тогда		
		Возврат ОбычнаяГруппа(Виджет, ЭлементФормыРодитель);
		
	ИначеЕсли ВиджетВид = ВидыВиджетов.Метрика Тогда
		
		Если Не МетрикиДоступны Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИмяГруппыМетрики	= Виджет.Идентификатор + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		ГруппаВиджета 		= ОбычнаяГруппаБезОтображения(ИмяГруппыМетрики, ЭлементФормыРодитель);

		Если Виджет.ВидОтображенияМетрики = Перечисления.ВидыОтображенияМетрик.Надпись Тогда
			ДекорацияТекст(Виджет, ГруппаВиджета, "—");
			
		ИначеЕсли Виджет.ВидОтображенияМетрики = Перечисления.ВидыОтображенияМетрик.НадписьСУсловнымОформлением Тогда
			
			Если Виджет.НастройкиОформления.Количество() = 0 Тогда
				Возврат ГруппаВиджета;
				
			Иначе	
				МетрикаСУсловнымОформлением(Виджет, ГруппаВиджета);
				
			КонецЕсли;
			
		ИначеЕсли Виджет.ВидОтображенияМетрики = Перечисления.ВидыОтображенияМетрик.Диаграмма Тогда
			МетрикаДиаграмма(Виджет, ГруппаВиджета);
			
		КонецЕсли;
		
		НоваяСтрока 					= ТаблицаМетрик.Добавить();
		НоваяСтрока.Виджет				= Виджет.Ссылка;		
		НоваяСтрока.ГруппаЭлемента 		= ИмяГруппыМетрики;
		НоваяСтрока.СледующийЗапуск		= Дата(1,1,1);
		НоваяСтрока.ПериодАвтообновления= Виджет.ПериодАвтообновленияМетрики;
		
		Возврат ГруппаВиджета;
		
	ИначеЕсли ВиджетВид = ВидыВиджетов.Кнопка Тогда		
		Возврат КнопкаФормы(Виджет, ЭлементФормыРодитель);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВариантОтображенияКнопкиФормы(Знач мВидОтображенияКнопки)
	
	пВидОтображенияКнопки = Перечисления.ВидОтображенияКнопки;
	
	Если мВидОтображенияКнопки = пВидОтображенияКнопки.Текст Тогда
		Возврат ОтображениеКнопки.Текст;
		
	ИначеЕсли мВидОтображенияКнопки = пВидОтображенияКнопки.Картинка Тогда	
	    Возврат ОтображениеКнопки.Картинка;
		
	ИначеЕсли мВидОтображенияКнопки = пВидОтображенияКнопки.КартинкаИТекст Тогда	
	    Возврат ОтображениеКнопки.КартинкаИТекст;
		
	Иначе
		Возврат ОтображениеКнопки.Авто;
		
	КонецЕсли;	
		
КонецФункции	

&НаКлиенте
Процедура Подключаемый_ГиперссылкаНажатие(Элемент)
	
	ЭлементИмя 			= Элемент.Имя;
	УИДВиджетаСтрока	= Прав(ЭлементИмя, 32);
	ДопПараметры 		= Новый Структура;
	
	Если СтрНайти(ЭлементИмя, "ОткрытьФорму") > 0 Тогда
		ДопПараметры.Вставить("ВидДействия", "ОткрытьФорму");
		
	ИначеЕсли СтрНайти(ЭлементИмя, "ПроизвольныйАлгоритм") > 0 Тогда
		ДопПараметры.Вставить("ВидДействия", "ПроизвольныйАлгоритм");
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	СтруктураДействия 	= СтруктураДействияПоУИДНаСервере(УИДВиджетаСтрока, ДопПараметры);
	
	Если СтруктураДействия.Свойство("ИмяФормы") Тогда
		мИмяФормы 		= СтруктураДействия.ИмяФормы;
		мПараметрыФормы = СтруктураДействия.ПараметрыФормы;
		Форма = ПолучитьФорму(мИмяФормы, мПараметрыФормы, ЭтотОбъект, ЭтаФорма.УникальныйИдентификатор);
		
		Если Форма.Открыта() Тогда
			
			Если мПараметрыФормы.Свойство("ИмяСобытияОбработкиОповещения") Тогда
				ИмяСобытияОбработкиОповещения = мПараметрыФормы.ИмяСобытияОбработкиОповещения;
			Иначе
				ИмяСобытияОбработкиОповещения = мИмяФормы;
			КонецЕсли;
			
			Оповестить(ИмяСобытияОбработкиОповещения, мПараметрыФормы, ЭтаФорма);
			Форма.Активизировать();
			
		Иначе
			Форма.Открыть();
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтруктураДействияПоУИДНаСервере(Знач УИДВиджетаСтрока, Знач ДопПараметры)
	
	Результат		 	= Новый Структура;
	ВидДействия			= "";
	ДопПараметры.Свойство("ВидДействия", ВидДействия);	
	Виджет 				= Справочники.Виджеты.ПустаяСсылка();
	ФормаИмя 			= "";		
	УИД		 = Лев(УИДВиджетаСтрока, 8)
				+ "-" + Сред(УИДВиджетаСтрока, 9, 4)
				+ "-" + Сред(УИДВиджетаСтрока, 13, 4)
				+ "-" + Сред(УИДВиджетаСтрока, 17, 4)
				+ "-" + Сред(УИДВиджетаСтрока, 21);
				
	Виджет = Справочники.Виджеты.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	ХЗКодОбработчика = Виджет.КодОбработчика.Получить();
	Если ВидДействия = "ОткрытьФорму" Тогда
		
		Если ЗначениеЗаполнено(Виджет) Тогда
			ИмяОбъекта 	= Виджет.ИмяОбъектаФормы;		
			ВидФормы 	= Виджет.ВидФормы;
			
			Если СтрНайти(ИмяОбъекта, "ОбщаяФорма") > 0 Тогда
				ФормаИмя = ИмяОбъекта;
				
			ИначеЕсли СтрНайти(ИмяОбъекта, "Обработка") > 0 Тогда
				ФормаИмя = ИмяОбъекта + ".Форма";
				
			ИначеЕсли ВидФормы = Перечисления.ВидФормы.ФормаСписка Тогда
				ФормаИмя = ИмяОбъекта + ".ФормаСписка";
				
			Иначе
				ФормаИмя = ИмяОбъекта + ".ФормаОбъекта";
				
			КонецЕсли;
			
			Результат.Вставить("ИмяФормы", ФормаИмя);
			ПараметрыФормы = Новый Структура;			
			Если Не ПустаяСтрока(ХЗКодОбработчика) Тогда
				
				Попытка
					Выполнить(ХЗКодОбработчика);
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			Результат.Вставить("ПараметрыФормы", ПараметрыФормы);
			
		КонецЕсли;
		
	ИначеЕсли ВидДействия = "ПроизвольныйАлгоритм" Тогда
		
		Попытка
			Выполнить(ХЗКодОбработчика);
		Исключение
		КонецПопытки;				
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ВариантСквозногоВыравнивания(Знач мСквозноеВыравнивание)
	
	пСквозноеВыравнивание = Перечисления.ВидыИспользованияСквозногоВыравнивания;
	
	Если мСквозноеВыравнивание = пСквозноеВыравнивание.Использовать Тогда
		Возврат СквозноеВыравнивание.Использовать;
		
	ИначеЕсли мСквозноеВыравнивание = пСквозноеВыравнивание.НеИспользовать Тогда
		Возврат СквозноеВыравнивание.НеИспользовать;
		
	Иначе
		Возврат СквозноеВыравнивание.Авто;
		
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ВариантОтображенияОбычнойГруппы(Знач мОтображение)
	
	пОтображение = Перечисления.ВидыОтображенияГруппыЭлементов;
	
	Если мОтображение = пОтображение.Нет Тогда
		Возврат ОтображениеОбычнойГруппы.Нет;
		
	ИначеЕсли мОтображение = пОтображение.ОбычноеВыделение Тогда 
		Возврат ОтображениеОбычнойГруппы.ОбычноеВыделение;
		
	ИначеЕсли мОтображение = пОтображение.СильноеВыделение Тогда 
		Возврат ОтображениеОбычнойГруппы.СильноеВыделение;
		
	Иначе
		Возврат ОтображениеОбычнойГруппы.СлабоеВыделение;
		
	КонецЕсли;
	
КонецФункции	

&НаСервере
Функция ВариантОтображенияУправленияОбычнойГруппы(Знач мОтображениеУправления)
	
	пОтображениеУправления = Перечисления.ВидыОтображенияУправленияГруппыЭлементов;
	
	Если мОтображениеУправления = пОтображениеУправления.Картинка Тогда
		Возврат ОтображениеУправленияОбычнойГруппы.Картинка;
		
	Иначе
		Возврат ОтображениеУправленияОбычнойГруппы.ГиперссылкаЗаголовка;
		
	КонецЕсли;
	
КонецФункции	

&НаСервере
Функция ВариантПоведенияОбычнойГруппы(Знач мПоведение)
	
	пПоведение = Перечисления.ВидыПоведенияГруппыЭлементов;
	
	Если мПоведение = пПоведение.Всплывающая Тогда
		Возврат ПоведениеОбычнойГруппы.Всплывающая;
		
	ИначеЕсли мПоведение = пПоведение.Свертываемая Тогда	
	    Возврат ПоведениеОбычнойГруппы.Свертываемая;
		
	Иначе
		Возврат ПоведениеОбычнойГруппы.Обычное;
		
	КонецЕсли;
	
КонецФункции	

&НаСервере
Функция ВариантРазмераКартинки(Знач мРазмерКартинки)
	
	пРазмерКартинки = Перечисления.ВидыРазмеровКартинки;
	
	Если мРазмерКартинки = пРазмерКартинки.АвтоРазмер Тогда
		Возврат РазмерКартинки.АвтоРазмер;
		
	ИначеЕсли мРазмерКартинки = пРазмерКартинки.АвтоРазмерБезУчетаМасштаба Тогда
		Возврат РазмерКартинки.АвтоРазмерБезУчетаМасштаба;
		
	ИначеЕсли мРазмерКартинки = пРазмерКартинки.Пропорционально Тогда
		Возврат РазмерКартинки.Пропорционально;
		
	ИначеЕсли мРазмерКартинки = пРазмерКартинки.Растянуть Тогда
		Возврат РазмерКартинки.Растянуть;
		
	ИначеЕсли мРазмерКартинки = пРазмерКартинки.РеальныйРазмерБезУчетаМасштаба Тогда
		Возврат РазмерКартинки.РеальныйРазмерБезУчетаМасштаба;
		
	ИначеЕсли мРазмерКартинки = пРазмерКартинки.Черепица Тогда
		Возврат РазмерКартинки.Черепица;
		
	Иначе
		Возврат РазмерКартинки.РеальныйРазмер;
		
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ВариантГоризонтальногоПоложенияБезАвто(Знач мВариантГоризонтальногоПоложения)
	
	пВидыГоризонтальногоПоложенияЭлементов = Перечисления.ВидыГоризонтальногоПоложенияЭлементов;
	
	Если мВариантГоризонтальногоПоложения = пВидыГоризонтальногоПоложенияЭлементов.Лево Тогда
		Возврат ГоризонтальноеПоложениеЭлемента.Лево;
		
	ИначеЕсли мВариантГоризонтальногоПоложения = пВидыГоризонтальногоПоложенияЭлементов.Центр Тогда
		Возврат ГоризонтальноеПоложениеЭлемента.Центр;
		
	ИначеЕсли мВариантГоризонтальногоПоложения = пВидыГоризонтальногоПоложенияЭлементов.Право Тогда
		Возврат ГоризонтальноеПоложениеЭлемента.Право;
		
	Иначе	
		Возврат ГоризонтальноеПоложениеЭлемента.Лево;
		
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ВариантГоризонтальногоПоложения(Знач мВариантГоризонтальногоПоложения)
	
	пВидыГоризонтальногоПоложенияЭлементов = Перечисления.ВидыГоризонтальногоПоложенияЭлементов;
	
	Если мВариантГоризонтальногоПоложения = пВидыГоризонтальногоПоложенияЭлементов.Лево Тогда
		Возврат ГоризонтальноеПоложениеЭлемента.Лево;
		
	ИначеЕсли мВариантГоризонтальногоПоложения = пВидыГоризонтальногоПоложенияЭлементов.Центр Тогда
		Возврат ГоризонтальноеПоложениеЭлемента.Центр;
		
	ИначеЕсли мВариантГоризонтальногоПоложения = пВидыГоризонтальногоПоложенияЭлементов.Право Тогда
		Возврат ГоризонтальноеПоложениеЭлемента.Право;
		
	Иначе	
		Возврат ГоризонтальноеПоложениеЭлемента.Авто;
		
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ВариантВертикальногоПоложения(Знач мВариантВертикальногоПоложения)
	
	пВидыВертикальногоПоложенияЭлементов = Перечисления.ВидыВертикальногоПоложенияЭлементов;
	
	Если мВариантВертикальногоПоложения = пВидыВертикальногоПоложенияЭлементов.Низ Тогда
		Возврат ВертикальноеПоложениеЭлемента.Низ;
		
	ИначеЕсли мВариантВертикальногоПоложения = пВидыВертикальногоПоложенияЭлементов.Центр Тогда
		Возврат ВертикальноеПоложениеЭлемента.Центр;
		
	ИначеЕсли мВариантВертикальногоПоложения = пВидыВертикальногоПоложенияЭлементов.Верх Тогда
		Возврат ВертикальноеПоложениеЭлемента.Верх;
		
	Иначе	
		Возврат ВертикальноеПоложениеЭлемента.Авто;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВариантВыравниванияЭлементовИЗаголовков(Знач мВыравниваниеЭлементовИЗаголовков)
	
	пВыравниваниеЭлементовИЗаголовков = Перечисления.ВыравниваниеЭлементовИЗаголовков;
	
	Если мВыравниваниеЭлементовИЗаголовков = пВыравниваниеЭлементовИЗаголовков.Нет Тогда
		Возврат ВариантВыравниванияЭлементовИЗаголовков.Нет;
		
	ИначеЕсли мВыравниваниеЭлементовИЗаголовков = пВыравниваниеЭлементовИЗаголовков.ЭлементыЛевоЗаголовкиЛево Тогда	
		Возврат ВариантВыравниванияЭлементовИЗаголовков.ЭлементыЛевоЗаголовкиЛево;
		
	ИначеЕсли мВыравниваниеЭлементовИЗаголовков = пВыравниваниеЭлементовИЗаголовков.ЭлементыЛевоЗаголовкиПраво Тогда	
		Возврат ВариантВыравниванияЭлементовИЗаголовков.ЭлементыЛевоЗаголовкиПраво;
		
	ИначеЕсли мВыравниваниеЭлементовИЗаголовков = пВыравниваниеЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево Тогда	
		Возврат ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево;
		
	ИначеЕсли мВыравниваниеЭлементовИЗаголовков = пВыравниваниеЭлементовИЗаголовков.ЭлементыПравоЗаголовкиПраво Тогда	
		Возврат ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиПраво;
		
	Иначе	
		Возврат ВариантВыравниванияЭлементовИЗаголовков.Авто;
		
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ВариантИнтервалаМеждуЭлементамиФормы(Знач мГоризонтальныйИнтервал)
	
	пИнтервалМеждуЭлементамиФормы = Перечисления.ИнтервалМеждуЭлементамиФормы;
	
	Если мГоризонтальныйИнтервал = пИнтервалМеждуЭлементамиФормы.Нет Тогда
		Возврат ИнтервалМеждуЭлементамиФормы.Нет;
		
	ИначеЕсли мГоризонтальныйИнтервал = пИнтервалМеждуЭлементамиФормы.Половинный Тогда
		Возврат ИнтервалМеждуЭлементамиФормы.Половинный;
		
	ИначеЕсли мГоризонтальныйИнтервал = пИнтервалМеждуЭлементамиФормы.Одинарный Тогда
		Возврат ИнтервалМеждуЭлементамиФормы.Одинарный;
		
	ИначеЕсли мГоризонтальныйИнтервал = пИнтервалМеждуЭлементамиФормы.Полуторный Тогда
		Возврат ИнтервалМеждуЭлементамиФормы.Полуторный;
		
	ИначеЕсли мГоризонтальныйИнтервал = пИнтервалМеждуЭлементамиФормы.Двойной Тогда
		Возврат ИнтервалМеждуЭлементамиФормы.Двойной;
		
	Иначе
		Возврат ИнтервалМеждуЭлементамиФормы.Авто;
		
	КонецЕсли;	 
	
КонецФункции	

&НаСервере
Функция ВариантРастягиватьЭлемент(Знач мРастягиватьЭлемент)
	
	пРастягиватьЭлемент = Перечисления.РастягиваниеЭлементаФормы;
	
	Если мРастягиватьЭлемент = пРастягиватьЭлемент.Да Тогда
		Возврат Истина;
		
	ИначеЕсли мРастягиватьЭлемент = пРастягиватьЭлемент.Нет Тогда
		Возврат Ложь;
		
	Иначе 
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ВариантВертикальногоПоложенияЭлемента(Знач мВертикальноеПоложениеВГруппе)
	
	пВертикальноеПоложениеВГруппе = Перечисления.ВидыВертикальногоПоложенияЭлементов;
	
	Если мВертикальноеПоложениеВГруппе = пВертикальноеПоложениеВГруппе.Верх Тогда
		Возврат ВертикальноеПоложениеЭлемента.Верх;
		
	ИначеЕсли мВертикальноеПоложениеВГруппе = пВертикальноеПоложениеВГруппе.Центр Тогда
		Возврат ВертикальноеПоложениеЭлемента.Центр;
		
	ИначеЕсли мВертикальноеПоложениеВГруппе = пВертикальноеПоложениеВГруппе.Низ Тогда
		Возврат ВертикальноеПоложениеЭлемента.Низ;
		
	Иначе
		Возврат ВертикальноеПоложениеЭлемента.Авто;
		
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ВариантГоризонтальногоПоложенияЭлемента(Знач мГоризонтальноеПоложениеВГруппе)
	
	пГоризонтальноеПоложениеВГруппе = Перечисления.ВидыГоризонтальногоПоложенияЭлементов;
	
	Если мГоризонтальноеПоложениеВГруппе = пГоризонтальноеПоложениеВГруппе.Лево Тогда
		Возврат ГоризонтальноеПоложениеЭлемента.Лево;
		
	ИначеЕсли мГоризонтальноеПоложениеВГруппе = пГоризонтальноеПоложениеВГруппе.Центр Тогда
		Возврат ГоризонтальноеПоложениеЭлемента.Центр;
		
	ИначеЕсли мГоризонтальноеПоложениеВГруппе = пГоризонтальноеПоложениеВГруппе.Право Тогда
		Возврат ГоризонтальноеПоложениеЭлемента.Право;		
		
	Иначе 
		Возврат ГоризонтальноеПоложениеЭлемента.Авто;
		
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ВариантВажностиПриОтображении(Знач мВажностьПриОтображении)
	
	пВажностьПриОтображении = Перечисления.ВажностьПриОтображении;
	
	Если мВажностьПриОтображении = пВажностьПриОтображении.Высокая Тогда
		Возврат ВажностьПриОтображении.Высокая;
		
	ИначеЕсли мВажностьПриОтображении = пВажностьПриОтображении.ОченьВысокая Тогда
		Возврат ВажностьПриОтображении.ОченьВысокая;
		
	ИначеЕсли мВажностьПриОтображении = пВажностьПриОтображении.Низкая Тогда
		Возврат ВажностьПриОтображении.Низкая;
		
	ИначеЕсли мВажностьПриОтображении = пВажностьПриОтображении.ОченьНизкая Тогда
		Возврат ВажностьПриОтображении.ОченьНизкая;
		
    ИначеЕсли мВажностьПриОтображении = пВажностьПриОтображении.Обычная Тогда
		Возврат ВажностьПриОтображении.Обычная;
		
	Иначе 
		Возврат ВажностьПриОтображении.Авто;
		
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ГруппировкаЭлементовФормы(Знач ГруппировкаВиджета)
	
	ВидыГруппировокЭлементовФормы 	= Перечисления.ВидыГруппировокЭлементовФормы;
	
	Если ГруппировкаВиджета = ВидыГруппировокЭлементовФормы.Вертикальная Тогда
		Возврат ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
	ИначеЕсли ГруппировкаВиджета = ВидыГруппировокЭлементовФормы.ГоризонтальнаяВсегда Тогда	
	    Возврат ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
	Иначе 	
		Возврат ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
		
	КонецЕсли;
	
КонецФункции	

//@skip-warning
&НаСервере
Функция ВидДекорацииФормы(Знач ВидДекорации)
	
	ВидыДекораций = Перечисления.ВидыДекораций;
	
	Если ВидДекорации = ВидыДекораций.Картинка Тогда
		Возврат ВидДекорацииФормы.Картинка;
		
	Иначе
		Возврат ВидДекорацииФормы.Надпись;
		
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция СпособОтображенияСтраницФормы(Знач мОтображениеСтраниц)
	
	пОтборажениеСтраниц = Перечисления.ОтображениеСтраниц;
	
	Если мОтображениеСтраниц = пОтборажениеСтраниц.ЗакладкиСверху Тогда		
		Возврат ОтображениеСтраницФормы.ЗакладкиСверху;
		
	ИначеЕсли мОтображениеСтраниц = пОтборажениеСтраниц.ЗакладкиСнизу Тогда
		Возврат ОтображениеСтраницФормы.ЗакладкиСнизу;
		
	ИначеЕсли мОтображениеСтраниц = пОтборажениеСтраниц.ЗакладкиСлева Тогда
		Возврат ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
		
	ИначеЕсли мОтображениеСтраниц = пОтборажениеСтраниц.ЗакладкиСправа Тогда
	    Возврат ОтображениеСтраницФормы.ЗакладкиСправаГоризонтально;
		
	ИначеЕсли мОтображениеСтраниц = пОтборажениеСтраниц.Нет Тогда
		Возврат ОтображениеСтраницФормы.Нет;
		
	ИначеЕсли мОтображениеСтраниц = пОтборажениеСтраниц.Пролистывание Тогда
		Возврат ОтображениеСтраницФормы.Пролистывание;
		
	Иначе 
		Возврат ОтображениеСтраницФормы.ЗакладкиСверху;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВариантОтображенияПодсказки(Знач мОтображениеПодсказки)
	
	пОтображениеПодсказки = Перечисления.ОтображениеПодсказки;
	
	Если мОтображениеПодсказки = пОтображениеПодсказки.Авто Тогда
		Возврат ОтображениеПодсказки.Авто;
		
	ИначеЕсли мОтображениеПодсказки = пОтображениеПодсказки.Нет Тогда
		Возврат ОтображениеПодсказки.Нет;
		
	ИначеЕсли мОтображениеПодсказки = пОтображениеПодсказки.Всплывающая Тогда
		Возврат ОтображениеПодсказки.Всплывающая;
		
	ИначеЕсли мОтображениеПодсказки = пОтображениеПодсказки.Кнопка Тогда
		Возврат ОтображениеПодсказки.Кнопка;
		
	ИначеЕсли мОтображениеПодсказки = пОтображениеПодсказки.ОтображатьАвто Тогда
		Возврат ОтображениеПодсказки.ОтображатьАвто;
		
	ИначеЕсли мОтображениеПодсказки = пОтображениеПодсказки.ОтображатьСлева Тогда
		Возврат ОтображениеПодсказки.ОтображатьСлева;
		
	ИначеЕсли мОтображениеПодсказки = пОтображениеПодсказки.ОтображатьСверху Тогда
		Возврат ОтображениеПодсказки.ОтображатьСверху;
		
	ИначеЕсли мОтображениеПодсказки = пОтображениеПодсказки.ОтображатьСправа Тогда
		Возврат ОтображениеПодсказки.ОтображатьСправа;	
		
	ИначеЕсли мОтображениеПодсказки = пОтображениеПодсказки.ОтображатьСнизу Тогда
		Возврат ОтображениеПодсказки.ОтображатьСнизу;
		
	Иначе 
		Возврат ОтображениеПодсказки.Авто;
		
	КонецЕсли;		
	
КонецФункции	

&НаСервере
Процедура ОчиститьРабочийСтол()
	
	ОсновнаяГруппаЭлементов	= Элементы.ОсновнаяГруппаЭлементов;
	
	Для Каждого Элем Из ОсновнаяГруппаЭлементов.ПодчиненныеЭлементы Цикл
		Элементы.Удалить(Элем);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРамкуДекорацииФормы(Знач мТипРамки, Знач мТолщинаРамки)
	
	пТипРамки = Перечисления.ТипРамки;	
	
	Если мТолщинаРамки = 0 ИЛИ мТипРамки = пТипРамки.Нет Тогда
		Возврат Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	КонецЕсли;	
	
	Если мТипРамки = пТипРамки.Одинарная Тогда		
		Возврат Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, мТолщинаРамки);
		
	ИначеЕсли мТипРамки = пТипРамки.Двойная Тогда
		Возврат Новый Рамка(ТипРамкиЭлементаУправления.Двойная, мТолщинаРамки);
		
	ИначеЕсли мТипРамки = пТипРамки.Выпуклая Тогда
		Возврат Новый Рамка(ТипРамкиЭлементаУправления.Выпуклая, мТолщинаРамки);
		
	ИначеЕсли мТипРамки = пТипРамки.Вдавленная Тогда
		Возврат Новый Рамка(ТипРамкиЭлементаУправления.Вдавленная, мТолщинаРамки);
		
	ИначеЕсли мТипРамки = пТипРамки.Подчеркивание Тогда
		Возврат Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание, мТолщинаРамки);
		
	ИначеЕсли мТипРамки = пТипРамки.ДвойноеПодчеркивание Тогда
		Возврат Новый Рамка(ТипРамкиЭлементаУправления.ДвойноеПодчеркивание, мТолщинаРамки);
		
	ИначеЕсли мТипРамки = пТипРамки.ЧертаСверху Тогда
		Возврат Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху, мТолщинаРамки);	
		
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗапуститьФоновоеЗадание()
	
	ЗапуститьФоновоеЗадание();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание()
	
	РезультатФоновогоЗадания = ЗапуститьФоновоеЗаданиеНаСервере();
	
	Если РезультатФоновогоЗадания = Неопределено Тогда
		ЗапуститьФоновыйОбработчикОбновления();
		Возврат;
		
	КонецЕсли; 
	
	Если РезультатФоновогоЗадания.Статус = "Выполняется" Тогда
		Обработчик 								= Новый ОписаниеОповещения("ФоновоеЗаданиеВыполнено", ЭтотОбъект, 
			Истина);
		ПараметрыОжидания 						= ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания 	= Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания, Обработчик, ПараметрыОжидания);
		
	ИначеЕсли РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		ЗапуститьФоновыйОбработчикОбновления();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновыйОбработчикОбновления(Знач ИнтервалЗапускаФоновогоЗадания = Неопределено)

	Если МетрикиДоступны Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьФоновоеЗадание", 
			?(ИнтервалЗапускаФоновогоЗадания = Неопределено, 60, ИнтервалЗапускаФоновогоЗадания), Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере()
	
	Если МонопольныйРежим() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ФоновоеЗаданиеЗапущено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
	КонецЕсли;	
	
	ТекущаяДатаСеанса	= ТекущаяДатаСеанса();	
	МассивВиджетов 		= Новый Массив;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаМетрик Цикл
		
		Если СтрокаТаблицы.СледующийЗапуск <= ТекущаяДатаСеанса Тогда
			МассивВиджетов.Добавить(СтрокаТаблицы.Виджет);
		КонецЕсли;
		
	КонецЦикла;	
	
	Если МассивВиджетов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПроцедуры 					= Новый Структура;
	ПараметрыПроцедуры.Вставить("ДатаСравнения", 				ТекущаяДатаСеанса);			
	ПараметрыПроцедуры.Вставить("МассивВиджетов", 				МассивВиджетов);
	ПараметрыПроцедуры.Вставить("ВариантСтандартногоПериода", 	ВариантСтандартногоПериода);
	ПараметрыПроцедуры.Вставить("ЗаВсеВремя", 					ЗаВсеВремя);
	
	ПараметрыВыполнения 				= ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне 	= Истина;
	РезультатФоновогоЗадания 			= ДлительныеОперации.ВыполнитьВФоне(
											"Обработки.РабочийСтол.ПолучитьДанные",
											ПараметрыПроцедуры,
											ПараметрыВыполнения);
	
	ФоновоеЗаданиеАдресРезультата = РезультатФоновогоЗадания.АдресРезультата;
	ФоновоеЗаданиеИдентификатор   = РезультатФоновогоЗадания.ИдентификаторЗадания;
	
	// Если фоновое задание завершилось за время вызова, то данные уже получены.
	Если РезультатФоновогоЗадания.Статус <> "Выполняется" Тогда
		ОбновитьДанные();
	Иначе
		// иначе начнем ожидания завершения фонового задания.
		ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;	
	
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеВыполнено(Результат, ЗагрузитьРезультат) Экспорт
	
	ФоновоеЗаданиеЗапущено = Ложь;
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если Результат.Статус = "Выполнено" Тогда 
		ОбновитьДанные();		
		ЗапуститьФоновыйОбработчикОбновления();
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОшибкиВыполнения(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	
	Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		Возврат;
	КонецЕсли; 
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиВыполнения(ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки 				= КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки	= НСтр("ru = 'Ошибка при выполнении:'") + Символы.ПС + 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки 					= ПодробноеПредставлениеОшибки;
			ПодробноеПредставлениеОшибки	= "";
		КонецЕсли;
		
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
		
	КонецЕсли;
	
	ТекстСообщения = ОписаниеОшибки + ?(ПустаяСтрока(ПодробноеПредставлениеОшибки), "", ": " + 
						ПодробноеПредставлениеОшибки);
						
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные()
	
	Если НЕ ЭтоАдресВременногоХранилища(ФоновоеЗаданиеАдресРезультата) Тогда
		Возврат;
	КонецЕсли; 
	
	Данные = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресРезультата);
	
	ОбновитьЗначенияМетрик(Данные);
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресРезультата);
	ФоновоеЗаданиеАдресРезультата 	= Неопределено;
	ФоновоеЗаданиеИдентификатор 	= Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияМетрик(Знач Данные)
	
	Если ТаблицаМетрик.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого КлючИЗначение Из Данные Цикл
		
		ОтборСтруктура 	= Новый Структура;
		ОтборСтруктура.Вставить("Виджет", КлючИЗначение.Ключ);
		МассивСтрок 	= ТаблицаМетрик.НайтиСтроки(ОтборСтруктура);
		
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаВиджета = МассивСтрок[0];
			СтрокаВиджета.СледующийЗапуск = ТекущаяДатаСеанса + СтрокаВиджета.ПериодАвтообновления * 60;
			ОбновитьЗначениеПоказателяВиджета(СтрокаВиджета.ГруппаЭлемента, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеПоказателяВиджета(Знач ИмяГруппыЭлемента, Знач Виджет, Знач ЗначениеПоказателя)
	
	ЭлементФормыГруппа = Элементы.Найти(ИмяГруппыЭлемента);
	
	Если ЭлементФормыГруппа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элем Из ЭлементФормыГруппа.ПодчиненныеЭлементы Цикл
		Элементы.Удалить(Элем);
	КонецЦикла;
	
	Значение 	= ЗначениеПоказателя["Значение"];
	Реквизиты 	= ЗначениеПоказателя["Реквизиты"];
		
	Если Реквизиты["ВидОтображенияМетрики"] = Перечисления.ВидыОтображенияМетрик.Надпись
		ИЛИ  Реквизиты["ВидОтображенияМетрики"] = Перечисления.ВидыОтображенияМетрик.НадписьСУсловнымОформлением Тогда
			
		ЗначениеЧисло = 0;		
		Если Значение <> Неопределено И ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
			
			Если Значение.Колонки.Количество() = 1 И Значение.Количество() = 1 Тогда
				ЗначениеЧисло = Значение[0][0];
				
				Если Не ЗначениеЗаполнено(ЗначениеЧисло) Тогда // ЗначениеЧисло = Null
					ЗначениеЧисло = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Реквизиты["ВидОтображенияМетрики"] = Перечисления.ВидыОтображенияМетрик.Надпись Тогда			
			ДекорацияТекст(Реквизиты, ЭлементФормыГруппа, ЗначениеЧисло);
			
		ИначеЕсли Реквизиты["ВидОтображенияМетрики"] = Перечисления.ВидыОтображенияМетрик.НадписьСУсловнымОформлением Тогда			
			МетрикаСУсловнымОформлением(Реквизиты, ЭлементФормыГруппа, ЗначениеЧисло); 
			
		КонецЕсли;
		
	ИначеЕсли Реквизиты["ВидОтображенияМетрики"] = Перечисления.ВидыОтображенияМетрик.Диаграмма Тогда		
		МетрикаДиаграмма(Реквизиты, ЭлементФормыГруппа, Значение); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокДоступныхРолейТекущегоПользователя()

	СписокРолейТекущегоПользователя.Очистить();
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		
		Если РольДоступна(Роль) Тогда
			СписокРолейТекущегоПользователя.Добавить(Роль.Имя);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиТекущегоПользователя()
	
	НастройкиРабочегоСтола = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиДляРабочегоСтола", 
		"НастройкиДляРабочегоСтола");
	
	Если НастройкиРабочегоСтола = Неопределено Тогда
		
		ВидСтандартногоПериода 	= Перечисления.ВидыСтандартногоПериода.Полугодие;
		ВариантСтандартногоПериода 	= Перечисления.ВариантыСтандартногоПериода.ЭтоПолугодие;
		ЗаВсеВремя					= Ложь;
		
	Иначе
		
		Попытка
			ВидСтандартногоПериода = НастройкиРабочегоСтола.ВидСтандартногоПериода;
		Исключение	
			ВидСтандартногоПериода = Перечисления.ВидыСтандартногоПериода.Полугодие;
		КонецПопытки;
		
		Попытка
			ВариантСтандартногоПериода = НастройкиРабочегоСтола.ВариантСтандартногоПериода;
		Исключение	
			ВариантСтандартногоПериода = Перечисления.ВариантыСтандартногоПериода.ЭтоПолугодие;
		КонецПопытки;
		
		Попытка
			ЗаВсеВремя = НастройкиРабочегоСтола.ЗаВсеВремя;
		Исключение	
			ЗаВсеВремя = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
