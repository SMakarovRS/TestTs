
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастроитьПоУмолчанию();
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Подразделение = Настройки.Получить("Объект.Подразделение");	
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ЗаполнитьРуководителяПодразделенияНаСервере();
	КонецЕсли;	
	
	Календарь 	  = Настройки.Получить("Объект.Календарь");
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		Объект.Календарь = Календарь;
	Иначе
		ПроизводственныеКалендари = Справочники.ПроизводственныеКалендари.СписокПроизводственныхКалендарей();
		
		Если ПроизводственныеКалендари.Количество() > 0 Тогда
			Объект.Календарь = ПроизводственныеКалендари[0];
		КонецЕсли;
	КонецЕсли;
	
	ИзмениласьДата();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Если ПустаяСтрока(Период) Тогда
		Объект.ДатаНачала 	= Неопределено;
		Объект.ДатаОкончания= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)		
	
	СтандартнаяОбработка = Ложь;
	ПериодНачалоВыбораВыборИзСписка();

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ЗаполнитьРуководителяПодразделенияНаСервере();	
		
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)
	
	ИзмениласьДата();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ОсновнаяВидДняПриИзменении(Элемент)

	ТекущийЭлемент.ТекущиеДанные["ВидДня" + Строка(Элемент.Заголовок)] = НРег(СокрЛП(Элемент.ТекстРедактирования));
	ТекущийЭлемент.ТекущиеДанные["Часы" + Строка(Элемент.Заголовок)] 	= 0;

КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяПользовательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Основная.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Пользователь) Тогда
		ПользовательПриИзмененииНаСервере();
	Иначе
		ТекущаяСтрока 				 	  = Элементы.Основная.ТекущаяСтрока;
		СтрокаПоСотруднику  		 	  = Объект.Основная.НайтиПоИдентификатору(ТекущаяСтрока);
		СтрокаПоСотруднику.Должность 	  = ПредопределенноеЗначение("Справочник.Должности.ПустаяСсылка");
		СтрокаПоСотруднику.ТабельныйНомер = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РуководительПодразделенияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.РуководительПодразделения) Тогда
		ПодобратьДолжностьРуководителяПодразделения();
	Иначе
		Объект.ДолжностьРуководителяПодразделения = ПредопределенноеЗначение("Справочник.Должности.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникОтделаКадровПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.РаботникОтделаКадров) Тогда
		РаботникОтделаКадровПриИзмененииНаСервере();
	Иначе
		Объект.ДолжностьРаботникаОтделаКадров = ПредопределенноеЗначение("Справочник.Должности.ПустаяСсылка");
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
		ОтветственныйПриИзмененииНаСервере();
	Иначе
		Объект.ДолжностьОтветственного = ПредопределенноеЗначение("Справочник.Должности.ПустаяСсылка");		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьВсех(Команда)
	
	Если Объект.Основная.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Таблица пользователей не заполнена'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан период расчета'"));
		Возврат;
	КонецЕсли;	
	
	РассчитатьВсехНаСервере(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоматически(Команда)
	
	ОчиститьНаСервере();
	ЗаполнитьНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьТекущего(Команда)
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан период расчета'"));
		Возврат;
	КонецЕсли;
	
	РассчитатьТекущегоНаСервере(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)

	Таб = Новый ТабличныйДокумент;
	ПодготовитьПечатнуюФорму(Таб);
	Таб.Показать(НСтр("ru = 'Печатная форма табеля рабочего времени'"));

КонецПроцедуры

&НаКлиенте
Процедура СмотретьВсеКалендари(Команда)
	
	ОткрытьФорму("Справочник.ПроизводственныеКалендари.ФормаСписка");	

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоОтчетуВсех(Команда)
	
	Если Объект.Основная.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Таблица пользователей не заполнена'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан период расчета'"));
		Возврат;
	КонецЕсли;
	
	РассчитатьВсехНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоОтчетуТекущего(Команда)
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан период расчета'"));
		Возврат;
	КонецЕсли;
	
	РассчитатьТекущегоНаСервере(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПользовательПриИзмененииНаСервере()
	
	ТекущаяСтрока = Элементы.Основная.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаПоСотруднику   = Объект.Основная.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ЗначениеЗаполнено(СтрокаПоСотруднику.Пользователь) Тогда
		Сотрудник = СтрокаПоСотруднику.Пользователь.Сотрудник;
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			СтрокаПоСотруднику.Сотрудник 	  = Сотрудник; 
			СтрокаПоСотруднику.Должность 	  = Сотрудник.Должность;
			СтрокаПоСотруднику.ТабельныйНомер = Сотрудник.Код;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьФамилиюСИнициалами(Знач ФИО)

	ФИОСПереносами = СтрЗаменить(ФИО, " ", Символы.ПС);

	ЧастиСтроки = Новый Массив;
	Для Индекс = 1 По СтрЧислоСтрок(ФИОСПереносами) Цикл
		Стр = СтрПолучитьСтроку(ФИОСПереносами, Индекс);
		Если ЗначениеЗаполнено(Стр) Тогда
			ЧастиСтроки.Добавить(СокрЛП(Стр));
		КонецЕсли;
	КонецЦикла;

	Результат = "";

	Если ЧастиСтроки.Количество() > 0 Тогда
		Результат = Результат + ЧастиСтроки[0];

		Если ЧастиСтроки.Количество() > 1 Тогда
			Результат = Результат + " " + Лев(ЧастиСтроки[1], 1) + ".";

			Если ЧастиСтроки.Количество() > 2 Тогда
				Результат = Результат + " " + Лев(ЧастиСтроки[2], 1) + ".";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура НастроитьФорму()

	Для Индекс = 1 По 31 Цикл
		Идентификатор = Строка(Индекс);
		Элементы["ОсновнаяВидДня" + Идентификатор].Заголовок = Идентификатор;
		Элементы["ОсновнаяЧасы" + Идентификатор].ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура НастроитьПоУмолчанию()
	
	Объект.ПродолжительностьРабочегоДня 		= 8;
	Объект.ПродолжительностьПредпраздничногоДня = 7;
	Объект.ПродолжительностьПятницы 			= 8;
	ВидПериода 			 						= Перечисления.ДоступныеПериодыОтчета.Месяц;
	Объект.ДатаНачала 	 						= НачалоМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
	Объект.ДатаОкончания 						= КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
	
	СформироватьСписокВыбораМесяца(Год(ТекущаяДатаСеанса()));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораМесяца(Год)
    
    Элементы.Период.СписокВыбора.Очистить();
    Элементы.Период.СписокВыбора.Добавить(Формат(Год-1, "ЧГ=0")); //для смены года
    Для НомерМесяца = 1 По 12  Цикл
        ДатаМесяц = Дата(Год, НомерМесяца, 1);
        МесяцТекст = Формат(ДатаМесяц, "ДФ = ММММ_гггг");
        МесяцТекст = СтрЗаменить(МесяцТекст, "_", " ");
        Элементы.Период.СписокВыбора.Добавить(ДатаМесяц, МесяцТекст);    
    КонецЦикла;
    Элементы.Период.СписокВыбора.Добавить(Формат(Год+1, "ЧГ=0")); //для смены года
    

КонецПроцедуры

&НаСервере
Процедура РассчитатьДанныеКалендаря()

	ДанныеКалендаря = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
		|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";

	Запрос.УстановитьПараметр("НачалоПериода", 			   НачалоМесяца(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ОкончаниеПериода", 		   КонецМесяца(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Объект.Календарь);

	РезультатЗапроса = Запрос.Выполнить();	
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Производственный календарь не заполнен'"));		
	Иначе	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВидДня	= ВыборкаДетальныеЗаписи.ВидДня;
			Дата 	= ВыборкаДетальныеЗаписи.Дата;
			ДанныеКалендаря.Вставить(Дата, Новый Структура("ВидДня", ВидДня));
		КонецЦикла;
	КонецЕсли;
	
	АдресДанныхКалендаря = ПоместитьВоВременноеХранилище(ДанныеКалендаря, Новый УникальныйИдентификатор());

КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьПолей()

	СекундВСутках = 60 * 60 * 24;
	Для Индекс = 1 По 31 Цикл
		ДеньДата = Объект.ДатаНачала + (Индекс - 1) * СекундВСутках;
		ДеньСуществует = ДеньДата >= Объект.ДатаНачала И ДеньДата <= Объект.ДатаОкончания;

		Идентификатор = Строка(Индекс);
		Элементы["ОсновнаяВидДня" + Идентификатор].Доступность = ДеньСуществует;
		Элементы["ОсновнаяЧасы" + Идентификатор].Доступность   = ДеньСуществует;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()

	Объект.Основная.Очистить();

КонецПроцедуры

&НаСервере
Процедура ИзмениласьДата()
	
	ОбновитьДоступностьПолей();
	РассчитатьДанныеКалендаря();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.Сотрудник.Ссылка КАК Сотрудник,
		|	Пользователи.Сотрудник.Код КАК ТабельныйНомер,
		|	Пользователи.Сотрудник.Должность КАК Должность
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.Недействителен
		|	И НЕ Пользователи.ПометкаУдаления";	
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстЗапроса = ТекстЗапроса + " И Пользователи.Сотрудник.Организация = &Организация ";
		Запрос.УстановитьПараметр("Организация", Объект.Организация); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ТекстЗапроса = ТекстЗапроса + " И Пользователи.Сотрудник.Подразделение = &Подразделение";
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение); 
	КонецЕсли;
	
	Запрос.Текст 			= ТекстЗапроса;
	РезультатЗапроса		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаОсновная = Объект.Основная.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОсновная, ВыборкаДетальныеЗаписи); 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтрокуПоСотруднику(СтрокаПоСотруднику, ДанныеКалендаря, ДанныеПользователей, РасчетПоОтчету)

	СекундВСутках   = 60 * 60 * 24;
	
	Для Индекс = 1 По 31 Цикл
		
		Дата 			= НачалоМесяца(Объект.ДатаНачала) + (Индекс - 1) * СекундВСутках;
		ДанныеПоДню 	= ДанныеКалендаря.Получить(Дата);
		ТипЧасов 		= "";
		ЧасовОтработано = 0;

		Если ДанныеПоДню <> Неопределено Тогда
			ВидДня = ДанныеПоДню.ВидДня;
			
			Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий 
				Или ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда				
				ТипЧасов = "я";
				Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
					ЧасовОтработано = Объект.ПродолжительностьПредпраздничногоДня;
				ИначеЕсли ДеньНедели(Дата) = 5 Тогда
					ЧасовОтработано = Объект.ПродолжительностьПятницы;
				Иначе
					ЧасовОтработано = Объект.ПродолжительностьРабочегоДня;
				КонецЕсли;
			Иначе
				ТипЧасов = "в";
				ЧасовОтработано = 0;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПроставитьВидДня) Тогда
				ТипЧасов = НРег(СокрЛП(ПроставитьВидДня));
				ЧасовОтработано = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если РасчетПоОтчету Тогда
			Если ЗначениеЗаполнено(СтрокаПоСотруднику.Пользователь) И ДанныеПользователей.Количество() > 0  Тогда
				ОтборСтрок 	= Новый Структура("Период, Пользователь", Дата, СтрокаПоСотруднику.Пользователь);
				МассивСтрок = ДанныеПользователей.НайтиСтроки(ОтборСтрок);
				Если МассивСтрок.Количество() > 0 Тогда
					ЧасовОтработаноВСекундах = МассивСтрок[0].Длительность;
					ЧасовОтработано			 = ЧасовОтработаноВСекундах/3600;
				Иначе
					ЧасовОтработано = 0;
				КонецЕсли;
			Иначе
				ЧасовОтработано = 0;
			КонецЕсли;	
		КонецЕсли;
		
		Идентификатор = Строка(Индекс);
		СтрокаПоСотруднику["ВидДня" + Идентификатор] = ТипЧасов;
		СтрокаПоСотруднику["Часы" + Идентификатор] = ЧасовОтработано;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура РассчитатьВсехНаСервере(РасчетПоОтчету)

	ДанныеКалендаря 		= ПолучитьИзВременногоХранилища(АдресДанныхКалендаря);
	ДанныеПоПользователямТЗ = Новый ТаблицаЗначений;
	
	Если РасчетПоОтчету Тогда
		ДанныеПоПользователямТЗ	= ДанныеПоПользователям(Неопределено); 
	КонецЕсли;	
	
	Для Каждого СтрокаПоСотруднику Из Объект.Основная Цикл
		РассчитатьСтрокуПоСотруднику(СтрокаПоСотруднику, ДанныеКалендаря, ДанныеПоПользователямТЗ, РасчетПоОтчету);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДанныеПоПользователям(ТекПользователь)
	
	ТЗПоПользователям 	 = Новый ТаблицаЗначений;
	
	Если ЗначениеЗаполнено(ТекПользователь) Тогда
		ТаблицаПользователей = Новый Массив;
		ТаблицаПользователей.Добавить(ТекПользователь);
	Иначе	
		ТаблицаПользователей = Объект.Основная.Выгрузить(, "Пользователь");
	КонецЕсли;
	
	Если ТаблицаПользователей.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Объект.ДатаОкончания));
		Запрос.УстановитьПараметр("НачалоПериода", Объект.ДатаНачала);
		Запрос.УстановитьПараметр("Пользователи",  ТаблицаПользователей);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетВремениОбороты.Пользователь,
		|	УчетВремениОбороты.Период,
		|	УчетВремениОбороты.ДлительностьОборот КАК Длительность
		|ИЗ
		|	РегистрНакопления.УчетВремени.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			День,
		|			Пользователь В (&Пользователи) %1)КАК УчетВремениОбороты";
		
		Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ТекстЗапроса = СтрШаблон(ТекстЗапроса, " И Организация = &Организация И Подразделение = &Подразделение");
			Запрос.УстановитьПараметр("Организация",   Объект.Организация);
			Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстЗапроса = СтрШаблон(ТекстЗапроса, " И Организация = &Организация");
			Запрос.УстановитьПараметр("Организация",   Объект.Организация);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ТекстЗапроса = СтрШаблон(ТекстЗапроса, " И Подразделение = &Подразделение");
			Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
		Иначе
			ТекстЗапроса = СтрШаблон(ТекстЗапроса, "");
		КонецЕсли;
		
		Запрос.Текст 	 = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();		
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ТЗПоПользователям = РезультатЗапроса.Выгрузить();
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ТЗПоПользователям;
	
КонецФункции	

&НаСервере
Процедура РассчитатьТекущегоНаСервере(РасчетПоОтчету)

	ТекущаяСтрока = Элементы.Основная.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаПоСотруднику   = Объект.Основная.НайтиПоИдентификатору(ТекущаяСтрока);
	ДанныеПоПользователю = Новый ТаблицаЗначений;
	
	ТекПользователь = СтрокаПоСотруднику.Пользователь;
	
	Если РасчетПоОтчету И ЗначениеЗаполнено(ТекПользователь) Тогда
		ДанныеПоПользователю = ДанныеПоПользователям(ТекПользователь);
	КонецЕсли;		
	
	ДанныеКалендаря 	= ПолучитьИзВременногоХранилища(АдресДанныхКалендаря);
	РассчитатьСтрокуПоСотруднику(СтрокаПоСотруднику, ДанныеКалендаря, ДанныеПоПользователю, РасчетПоОтчету);

КонецПроцедуры

&НаСервере
Функция ПодготовитьПечатнуюФорму(Результат)

	Результат.Очистить();
	ТабДокумент 					= Результат;
	ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	Макет 							= РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	ОбластьМакета 					= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ИмяОрганизации 	= Объект.Организация;
	ОбластьМакета.Параметры.ИмяПодразделения= Объект.Подразделение;
	ОбластьМакета.Параметры.НомерДокумента 	= Месяц(Объект.ДатаНачала);
	ОбластьМакета.Параметры.ДатаЗаполнения 	= КонецМесяца(Объект.ДатаНачала);
	ОбластьМакета.Параметры.ДатаНач 		= НачалоМесяца(Объект.ДатаНачала);
	ОбластьМакета.Параметры.ДатаКон 		= КонецМесяца(Объект.ДатаОкончания);
	
	ТабДокумент.Вывести(ОбластьМакета);	
	ОбластьМакета = Макет.ПолучитьОбласть("Колонтитул");	
	ТабДокумент.Вывести(ОбластьМакета);

	НомерПоПорядку 	= 0;
	ВыбранныйСотрудник 	= Неопределено;
	ОбластьМакета 	= Неопределено;
	ДнейОтработано 	= Неопределено;
	ЧасовОтработано = Неопределено;
	ДнейВОтпуске 	= Неопределено;
	ДнейПоБолезни 	= Неопределено;

	Для Каждого СтрокаПоСотруднику Из Объект.Основная Цикл

		Для ИндексДня = 1 По 31 Цикл
		
			Если ВыбранныйСотрудник <> СтрокаПоСотруднику.Сотрудник Тогда

				Если ОбластьМакета <> Неопределено Тогда
					ВывестиОбласть(ТабДокумент, ОбластьМакета, НомерПоПорядку, ДнейОтработано, ЧасовОтработано,
						ДнейВОтпуске, ДнейПоБолезни);
				КонецЕсли;

				НомерПоПорядку	= НомерПоПорядку + 1;
				ВыбранныйСотрудник 	= СтрокаПоСотруднику.Сотрудник;

				ОбластьМакета = Макет.ПолучитьОбласть("Область1");
				ОбластьМакета.Параметры.Работник = ПолучитьФамилиюСИнициалами(СтрокаПоСотруднику.Сотрудник);
				ОбластьМакета.Параметры.Должность = СтрокаПоСотруднику.Должность;
				ОбластьМакета.Параметры.ТабельныйНомер = СтрокаПоСотруднику.ТабельныйНомер;

				ДнейОтработано = Новый Соответствие;
				ЧасовОтработано= Новый Соответствие;
				Для Индекс = 0 По 2 Цикл
					ДнейОтработано[Индекс] = 0;
					ЧасовОтработано[Индекс]= 0;
				КонецЦикла;
				ДнейВОтпуске = 0;
				ДнейПоБолезни= 0;

			КонецЕсли;

			Идентификатор = Строка(ИндексДня);

			ТипЧасов = НРег(СтрокаПоСотруднику["ВидДня" + Идентификатор]);
			КоличествоЧасов = СтрокаПоСотруднику["Часы" + Идентификатор];

			Если ТипЧасов = "я" Или ТипЧасов = "лч" Тогда
				ДнейОтработано[0] = ДнейОтработано[0] + 1;
				ЧасовОтработано[0] = ЧасовОтработано[0] + КоличествоЧасов;

				НомерПоловиныМесяца = ?(ИндексДня <= 15, 1, 2);
				ДнейОтработано[НомерПоловиныМесяца] = ДнейОтработано[НомерПоловиныМесяца] + 1;
				ЧасовОтработано[НомерПоловиныМесяца] = ЧасовОтработано[НомерПоловиныМесяца] + КоличествоЧасов;
			ИначеЕсли ТипЧасов = "от" Тогда
				ДнейВОтпуске = ДнейВОтпуске + 1;
			ИначеЕсли ТипЧасов = "б" Тогда
				ДнейПоБолезни = ДнейПоБолезни + 1;
			КонецЕсли;

			ОбластьМакета.Параметры["День" + Идентификатор] = ТипЧасов;
			ОбластьМакета.Параметры["Время" + Идентификатор] = КоличествоЧасов;

		КонецЦикла;

	КонецЦикла;

	Если ОбластьМакета <> Неопределено Тогда
		ВывестиОбласть(ТабДокумент, ОбластьМакета, НомерПоПорядку, ДнейОтработано, ЧасовОтработано,
			ДнейВОтпуске, ДнейПоБолезни);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.ДолжностьОтветственного = Объект.ДолжностьОтветственного;
	ОбластьМакета.Параметры.ФИООтветственного = ПолучитьФамилиюСИнициалами(Объект.Ответственный);
	
	ОбластьМакета.Параметры.ДолжностьКадровика = Объект.ДолжностьРаботникаОтделаКадров;
	ОбластьМакета.Параметры.ФИОКадровика = ПолучитьФамилиюСИнициалами(Объект.РаботникОтделаКадров);

	ОбластьМакета.Параметры.ДолжностьРуководителя = Объект.ДолжностьРуководителяПодразделения;
	ОбластьМакета.Параметры.ФИОРуководителя = ПолучитьФамилиюСИнициалами(Объект.РуководительПодразделения);
	
	ОбластьМакета.Параметры.дата1 = КонецМесяца(Объект.ДатаНачала);
	ОбластьМакета.Параметры.дата2 = КонецМесяца(Объект.ДатаОкончания);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ТолькоПросмотр      = Истина;
	ТабДокумент.ОтображатьСетку     = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;

	Возврат ТабДокумент;

КонецФункции

&НаСервере
Процедура ВывестиОбласть(ТабДокумент, ОбластьМакета, НомерПоПорядку, ДнейОтработано, ЧасовОтработано, ДнейВОтпуске, 
	ДнейПоБолезни)

		ОбластьМакета.Параметры.НомерПоПорядку = НомерПоПорядку;

		ОбластьМакета.Параметры.ДнейОтработано = ДнейОтработано[0]; 
		ОбластьМакета.Параметры.ЧасовОтработано = ЧасовОтработано[0];

		ОбластьМакета.Параметры.ДнейОтработано1 = ДнейОтработано[1]; 
		ОбластьМакета.Параметры.ЧасовОтработано1 = ЧасовОтработано[1];

		ОбластьМакета.Параметры.ДнейОтработано2 = ДнейОтработано[2]; 
		ОбластьМакета.Параметры.ЧасовОтработано2 = ЧасовОтработано[2];

		Если ДнейВОтпуске > 0 Тогда
			ОбластьМакета.Параметры.КодВОтпуске = "от";
			ОбластьМакета.Параметры.ДнейВОтпуске = ДнейВОтпуске;
		КонецЕсли;

		Если ДнейПоБолезни > 0 Тогда
			ОбластьМакета.Параметры.КодПоБолезни = "б";
			ОбластьМакета.Параметры.ДнейПоБолезни = ДнейПоБолезни;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

КонецПроцедуры

&НаСервере
Функция ПолучитьТекущуюДолжностьСотрудника(Сотрудник)
	
	Возврат Сотрудник.Должность;

КонецФункции

&НаСервере
Процедура ПодобратьДолжностьРуководителяПодразделения()

	Объект.ДолжностьРуководителяПодразделения = ПолучитьТекущуюДолжностьСотрудника(Объект.РуководительПодразделения);

КонецПроцедуры

&НаСервере
Процедура РаботникОтделаКадровПриИзмененииНаСервере()

	Объект.ДолжностьРаботникаОтделаКадров = ПолучитьТекущуюДолжностьСотрудника(Объект.РаботникОтделаКадров);

КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()

	Объект.ДолжностьОтветственного = ПолучитьТекущуюДолжностьСотрудника(Объект.Ответственный);

КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбораВыборИзСписка()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораВыборИзСпискаЗавершение", ЭтотОбъект);	
	ПоказатьВыборИзСписка(ОписаниеОповещения, Элементы.Период.СписокВыбора, Элементы.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбораВыборИзСпискаЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	Если СтруктураПериода <> Неопределено Тогда
		Если СтрДлина(СтруктураПериода.Значение) = 4 Тогда
			ВыбранныйГод = Число(СтруктураПериода.Значение);
			СформироватьСписокВыбораМесяца(ВыбранныйГод);
			ПериодНачалоВыбораВыборИзСписка();			
		Иначе
			Объект.ДатаНачала 	 = НачалоМесяца(СтруктураПериода.Значение);
			Объект.ДатаОкончания = КонецМесяца(Объект.ДатаНачала);
			Период 				 = СтруктураПериода;
			ИзмениласьДата();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРуководителяПодразделенияНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Если ЗначениеЗаполнено(Объект.Подразделение.Руководитель) Тогда
			Объект.РуководительПодразделения 		  = Объект.Подразделение.Руководитель;
			ПодобратьДолжностьРуководителяПодразделения(); 
		Иначе
			Объект.РуководительПодразделения 		  = Справочники.Сотрудники.ПустаяСсылка();
			Объект.ДолжностьРуководителяПодразделения = Справочники.Должности.ПустаяСсылка();
		КонецЕсли;	
	Иначе
		Объект.РуководительПодразделения 		  = Справочники.Сотрудники.ПустаяСсылка();
		Объект.ДолжностьРуководителяПодразделения = Справочники.Должности.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


