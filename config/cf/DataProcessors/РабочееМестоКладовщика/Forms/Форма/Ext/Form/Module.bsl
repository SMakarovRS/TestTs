// 
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование 	= УправлениеITОтделом8УФПовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование 		
	
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Характеристики, 
		"Объект", ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
		
	ОбновитьКомплектациюНаСервере(Неопределено);	
	УстановитьДоступностьКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, 
			УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Элементы.ОчищатьПриНовомПоиске.Пометка 	= ОчищатьФормуПриНовомПоиске;
	Элементы.ДекорацияНайденоШтук.Заголовок = "0";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
		
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда		
		ПоддерживаемыеТипыВО = Новый Массив();		
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");		
		ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриОтключении, 
			УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				// Достаем штрихкод из основных данных.
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1));
			Иначе
				// Достаем штрихкод из дополнительных данных.
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1));
			КонецЕсли;
			ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоШтрихкоду");
			ОбновитьВидимостьИДоступность();
			ОбъектПоиска = Данные[0].Штрихкод;
			Элементы.Поиск.Доступность = Истина;
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не ЗначениеЗаполнено(ТипПоиска) Тогда
		ТипПоиска =ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоИнвентарномуНомеру");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОчищатьФормуПриНовомПоиске) Тогда
		ОчищатьФормуПриНовомПоиске = Истина;
	КонецЕсли; 		
	ОбновитьВидимостьИДоступность();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТипПоиска = ВыбранноеЗначение; 
	ОбновитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПоискаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение 	= Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НоменклатураУслуга(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(,
			СтрШаблон(НСтр("ru = 'Выбранная номенклатура ""%1"" является услугой. Выберите другую номенклатуру.'"), 
				ВыбранноеЗначение));
		Возврат;
	КонецЕсли;	
	Если ОчищатьФормуПриНовомПоиске Тогда
		НоменклатураНаСкладах.Очистить();
		Объект.Номенклатура.Очистить();
		ДеревоНоменклатуры.ПолучитьЭлементы().Очистить();		
		НоменклатураАдресКартинки 	= "";
	КонецЕсли;
	Если УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(ВыбранноеЗначение) Тогда
		МассивКарточекНоменклатуры 	= ПолучитьКарточкиПоНоменклатуре(ВыбранноеЗначение);
		Если МассивКарточекНоменклатуры.Количество()>0 Тогда
			ЗаполнитьНоменклатуруНаСкладах(МассивКарточекНоменклатуры);			
		Иначе
			МассивНоменклатуры 			= Новый Массив;
			МассивНоменклатуры.Добавить(ВыбранноеЗначение);
		КонецЕсли;	
	Иначе	
		МассивНоменклатуры 			= Новый Массив;
		МассивНоменклатуры.Добавить(ВыбранноеЗначение);
		ЗаполнитьНоменклатуруНаСкладах(МассивНоменклатуры);		
	КонецЕсли;
	Элементы.НоменклатураНаСкладах.Обновить();
	Элементы.ДекорацияНайденоШтук.Заголовок = НоменклатураНаСкладах.Количество();
	УстановитьДоступностьКомандФормы()
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПоискаКарточкаНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение 	= Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Если ОчищатьФормуПриНовомПоиске Тогда
		НоменклатураНаСкладах.Очистить();
		Объект.Номенклатура.Очистить();
		ДеревоНоменклатуры.ПолучитьЭлементы().Очистить();		
		НоменклатураАдресКартинки 	= "";
	КонецЕсли;
	МассивНоменклатуры = Новый Массив;
	МассивНоменклатуры.Добавить(ВыбранноеЗначение);
	ЗаполнитьНоменклатуруНаСкладах(МассивНоменклатуры);
	Элементы.НоменклатураНаСкладах.Обновить();
	Элементы.ДекорацияНайденоШтук.Заголовок = НоменклатураНаСкладах.Количество();
	УстановитьДоступностьКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПоискаВидНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение 	= Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Если ОчищатьФормуПриНовомПоиске Тогда
		НоменклатураНаСкладах.Очистить();
		Объект.Номенклатура.Очистить();
		ДеревоНоменклатуры.ПолучитьЭлементы().Очистить();		
		НоменклатураАдресКартинки 	= "";
	КонецЕсли;
	ОбновитьДоступностьКнопкиПоиск();
	УстановитьДоступностьКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПоискаНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	Очистить(Неопределено);
	УстановитьДоступностьКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПоискаКарточкаНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	Очистить(Неопределено);
	УстановитьДоступностьКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПоискаВидНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	Очистить(Неопределено);
	УстановитьДоступностьКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Элементы.Поиск.Доступность = НЕ ПустаяСтрока(Элементы.ОбъектПоиска.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, 
	СтандартнаяОбработка)
	
	Элементы.Поиск.Доступность = НЕ ПустаяСтрока(Элементы.ОбъектПоиска.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПоискаВидНоменклатурыПриИзменении(Элемент)
	
	ОбновитьДоступностьКнопкиПоиск();
	УстановитьДоступностьКомандФормы()
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНоменклатура

&НаКлиенте
Процедура НоменклатураНаСкладахПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПодготовитьДеревоНоменклатуры", 0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладахВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТД = Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	Если ТД = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	ПоказатьЗначение(,ТД.Номенклатура);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПодготовитьКраткоеОписаниеНоменклатуры", 0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНоменклатурыПриАктивизацииЯчейки(Элемент)
	
	Если Не ЭтотОбъект.ТекущийЭлемент = Элементы.ДеревоНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.УчетПоКарточкам Тогда
		Если ТекущаяСтрока.КарточкаНоменклатуры = ТекущаяНоменклатура Тогда 
			Возврат;
		Иначе
			ТекущаяНоменклатура = ТекущаяСтрока.КарточкаНоменклатуры; 
		КонецЕсли;
	Иначе
		Если ТекущаяСтрока.Номенклатура = ТекущаяНоменклатура Тогда
			Возврат;
		Иначе
			ТекущаяНоменклатура = ТекущаяСтрока.Номенклатура;
		КонецЕсли;	
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПодготовитьКраткоеОписаниеНоменклатуры", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНаСкладахПриАктивизацииЯчейки(Элемент)
	
	Если Не ЭтотОбъект.ТекущийЭлемент = Элементы.НоменклатураНаСкладах Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.Номенклатура = ТекущаяНоменклатура Тогда 
		Возврат;
	Иначе
		ТекущаяНоменклатура = ТекущаяСтрока.Номенклатура; 
	КонецЕсли;
	ПодключитьОбработчикОжидания("ПодготовитьДеревоНоменклатуры", 0.1, Истина);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Перемещение(Команда)
	
	СтрокаТекущиеДанные = Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	Если СтрокаТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТекущиеДанные.Примечание) Тогда
		ПоказатьПредупреждениеНетНаОстаткахУчетПоКарточкам(СтрокаТекущиеДанные.Примечание, "Перемещение",
			СтрокаТекущиеДанные.Номенклатура);			
		Возврат;			
	КонецЕсли;
	
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(СтрокаТекущиеДанные.Номенклатура,
		СтрокаТекущиеДанные.МестоХранения,СтрокаТекущиеДанные.Партия);		
	Структура = Новый Структура();
	Структура.Вставить("МестоХраненияРасхода", 	СтруктураПараметров.МестоХранения);
	Структура.Вставить("ОрганизацияРасхода", 	СтруктураПараметров.Организация);
	Структура.Вставить("АдресНоменклатуры", 	СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.Перемещение.Форма.ФормаДокумента", Структура);
		
КонецПроцедуры

&НаКлиенте
Процедура Поступление(Команда)
	
	СтрокаТекущиеДанные = Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	Если СтрокаТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекущаяСтрокаСтруктура	= Новый Структура("Номенклатура,НавСсылка,МестоХранения,Комплект,"
		+ "Партия,Количество,Сумма,Примечание");		
	ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСтруктура,СтрокаТекущиеДанные);		 
	
	СтруктураПараметров 	= СтруктураНоменклатураПоступление(ТекущаяСтрокаСтруктура);
	
	Структура = Новый Структура();		
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);
	Структура.Вставить("Организация", 		СтруктураПараметров.Организация);
	Структура.Вставить("МестоХранения",		СтруктураПараметров.МестоХранения);
	ОткрытьФорму("Документ.Поступление.Форма.ФормаДокумента", Структура);
	
КонецПроцедуры

&НаСервере
Функция СтруктураНоменклатураПоступление(СтруктураНоменклатура)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("КарточкаНоменклатуры");
	ТЗ.Колонки.Добавить("ВидНоменклатуры");
	ТЗ.Колонки.Добавить("Партия");		
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Сумма");
	
	СтруктураВозврата = Новый Структура;
	Если ЗначениеЗаполнено(СтруктураНоменклатура.МестоХранения) Тогда
		СтруктураВозврата.Вставить("МестоХранения",	СтруктураНоменклатура.МестоХранения);
		СтруктураВозврата.Вставить("Организация",	СтруктураНоменклатура.МестоХранения.Организация);
	Иначе
		СтруктураВозврата.Вставить("МестоХранения",	ПредопределенноеЗначение("Справочник.МестаХранения.ПустаяСсылка"));
		СтруктураВозврата.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация"));
	КонецЕсли;	
	
	Если ТипЗНЧ(СтруктураНоменклатура.Номенклатура) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда 		
		СтрокаТЗ 						= ТЗ.Добавить();
		СтрокаТЗ.Номенклатура 			= СтруктураНоменклатура.Номенклатура.Владелец; 
		СтрокаТЗ.КарточкаНоменклатуры 	= ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
		СтрокаТЗ.ВидНоменклатуры		= СтруктураНоменклатура.Номенклатура.Владелец.ВидНоменклатуры;
		СтрокаТЗ.Партия					= ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
		СтрокаТЗ.СтавкаНДС				= ?(ЗначениеЗаполнено(СтруктураНоменклатура.Номенклатура.Владелец.СтавкаНДС),
											СтруктураНоменклатура.Номенклатура.Владелец.СтавкаНДС,
											?(ЗначениеЗаполнено(СтруктураВозврата.Организация),СтруктураВозврата.Организация.СтавкаНДСПоУмолчанию,ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")));
		СтрокаТЗ.ЕдиницаИзмерения		= СтруктураНоменклатура.Номенклатура.Владелец.ЕдиницаИзмерения;
		СтрокаТЗ.Количество				= 1;
		СтрокаТЗ.Сумма					= 0;
		АдресНоменклатуры 				= ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор());
		СтруктураВозврата.Вставить("АдресНоменклатуры",АдресНоменклатуры);
		Возврат СтруктураВозврата;
	Иначе
		СтрокаТЗ 						= ТЗ.Добавить();
		СтрокаТЗ.Номенклатура 			= СтруктураНоменклатура.Номенклатура; 
		СтрокаТЗ.КарточкаНоменклатуры 	= 
			?(УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтруктураНоменклатура.Номенклатура),
			ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"),
			УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(СтруктураНоменклатура.Номенклатура));
		СтрокаТЗ.ВидНоменклатуры		= СтруктураНоменклатура.Номенклатура.ВидНоменклатуры;
		СтрокаТЗ.Партия					= ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
		СтрокаТЗ.СтавкаНДС				= ?(ЗначениеЗаполнено(СтруктураНоменклатура.Номенклатура.СтавкаНДС),
											СтруктураНоменклатура.Номенклатура.СтавкаНДС,
											?(ЗначениеЗаполнено(СтруктураВозврата.Организация),СтруктураВозврата.Организация.СтавкаНДСПоУмолчанию,ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка")));
		СтрокаТЗ.ЕдиницаИзмерения		= СтруктураНоменклатура.Номенклатура.ЕдиницаИзмерения;
		СтрокаТЗ.Количество				= 1;
		СтрокаТЗ.Сумма					= 0;
		АдресНоменклатуры 				= ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор());
		СтруктураВозврата.Вставить("АдресНоменклатуры",АдресНоменклатуры);
		Возврат СтруктураВозврата;		
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура Очистить(Команда)
	
	ОбъектПоиска						= "";
	Объект.Номенклатура.Очистить();
	НоменклатураНаСкладах.Очистить();
	ДеревоНоменклатуры.ПолучитьЭлементы().Очистить();
	ОбъектПоискаНоменклатура			= ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	ОбъектПоискаКарточкаНоменклатуры 	= ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
	ОбъектПоискаВидНоменклатуры			= ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка");
	
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Характеристики, 
		"Объект", ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
		
	НоменклатураАдресКартинки 			= "";
	ОбновитьКомплектациюНаСервере(Неопределено);
	Элементы.ДекорацияНайденоШтук.Заголовок = "0";
	ОбновитьДоступностьКнопкиПоиск();
	УстановитьДоступностьКомандФормы()
	
КонецПроцедуры

&НаКлиенте
Процедура МестаХранения(Команда)
	
	ОткрытьФорму("Справочник.МестаХранения.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчищатьПриНовомПоиске(Команда)
	
	ОчищатьФормуПриНовомПоиске = Не ОчищатьФормуПриНовомПоиске;
	Элементы.ОчищатьПриНовомПоиске.Пометка = ОчищатьФормуПриНовомПоиске;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьЗадание(Команда)
	
	СтрокаТекущиеДанные = Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	Если СтрокаТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(СтрокаТекущиеДанные.Номенклатура) 	= Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
		ФормаЗадания 								= ОткрытьФорму("Документ.Задание.Форма.ФормаДокумента",,ЭтаФорма,
			Новый УникальныйИдентификатор);
		ФормаЗадания.Объект.МестоХранения 			= СтрокаТекущиеДанные.МестоХранения;
		ФормаЗадания.Объект.КарточкаНоменклатуры 	= СтрокаТекущиеДанные.Номенклатура;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Зарегистрировать задание можно только для карточки номенклатуры.'"));
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Списание(Команда)
	
	СтрокаТекущиеДанные = Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	Если СтрокаТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТекущиеДанные.Примечание) Тогда
		ПоказатьПредупреждениеНетНаОстаткахУчетПоКарточкам(СтрокаТекущиеДанные.Примечание, "Списание", 
			СтрокаТекущиеДанные.Номенклатура);
		Возврат;
	КонецЕсли;	
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(
		СтрокаТекущиеДанные.Номенклатура,СтрокаТекущиеДанные.МестоХранения,СтрокаТекущиеДанные.Партия);
	Структура = Новый Структура();	
	Структура.Вставить("МестоХранения", 	СтруктураПараметров.МестоХранения);
	Структура.Вставить("Организация", 		СтруктураПараметров.Организация);
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.Списание.Форма.ФормаДокумента", Структура);
		
КонецПроцедуры

&НаКлиенте
Процедура Инвентаризация(Команда)
	
	СтрокаТекущиеДанные = Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	Если СтрокаТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтрокаТекущиеДанные.Примечание) Тогда
		ПоказатьПредупреждениеНетНаОстаткахУчетПоКарточкам(СтрокаТекущиеДанные.Примечание, "Инвентаризация",
			СтрокаТекущиеДанные.Номенклатура);
		Возврат;
	КонецЕсли;

	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(
		СтрокаТекущиеДанные.Номенклатура, СтрокаТекущиеДанные.МестоХранения, СтрокаТекущиеДанные.Партия);
	Структура = Новый Структура();	
	Структура.Вставить("МестоХранения", 	СтруктураПараметров.МестоХранения);
	Структура.Вставить("Организация", 		СтруктураПараметров.Организация);
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.Инвентаризация.Форма.ФормаДокумента", Структура);
		
КонецПроцедуры

&НаКлиенте
Процедура НачалоРемонта(Команда)
	
	СтрокаТекущиеДанные = Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	Если СтрокаТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТекущиеДанные.Примечание) Тогда
		ПоказатьПредупреждениеНетНаОстаткахУчетПоКарточкам(СтрокаТекущиеДанные.Примечание, 
			НСтр("ru = 'Начало обслуживания'"), СтрокаТекущиеДанные.Номенклатура);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(
		СтрокаТекущиеДанные.Номенклатура, СтрокаТекущиеДанные.МестоХранения, СтрокаТекущиеДанные.Партия);
	Структура = Новый Структура();	
	Структура.Вставить("МестоХранения", 	СтруктураПараметров.МестоХранения);
	Структура.Вставить("Организация", 		СтруктураПараметров.Организация);
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.НачалоОбслуживания.Форма.ФормаДокумента", Структура);
		
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРемонта(Команда)
	
	СтрокаТекущиеДанные = Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	Если СтрокаТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТекущиеДанные.Примечание) Тогда
		ПоказатьПредупреждениеНетНаОстаткахУчетПоКарточкам(СтрокаТекущиеДанные.Примечание, 
			НСтр("ru = 'Окончание обслуживания'"),СтрокаТекущиеДанные.Номенклатура);
		Возврат;
	КонецЕсли;	
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(
		СтрокаТекущиеДанные.Номенклатура,СтрокаТекущиеДанные.МестоХранения, СтрокаТекущиеДанные.Партия);		
	Структура = Новый Структура();	
	Структура.Вставить("МестоХранения", 	СтруктураПараметров.МестоХранения);
	Структура.Вставить("Организация", 		СтруктураПараметров.Организация);
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.ОкончаниеОбслуживания.Форма.ФормаДокумента", Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура СборкаКомплекта(Команда)
	
	СтрокаТекущиеДанные = Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	Если СтрокаТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТекущиеДанные.Примечание) Тогда
		
		ПоказатьПредупреждениеНетНаОстаткахУчетПоКарточкам(СтрокаТекущиеДанные.Примечание, 
			НСтр("ru = 'Сборка (комплектация)'"),СтрокаТекущиеДанные.Номенклатура);
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(
		СтрокаТекущиеДанные.Номенклатура,СтрокаТекущиеДанные.МестоХранения, СтрокаТекущиеДанные.Партия);
	Структура = Новый Структура();	
	Структура.Вставить("МестоХранения", 	СтруктураПараметров.МестоХранения);
	Структура.Вставить("Организация", 		СтруктураПараметров.Организация);
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.СборкаКомплектация.Форма.ФормаДокумента", Структура);
		
КонецПроцедуры

&НаКлиенте
Процедура РазбиениеКомплекта(Команда)
	
	СтрокаТекущиеДанные = Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	Если СтрокаТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТекущиеДанные.Примечание) Тогда
		ПоказатьПредупреждениеНетНаОстаткахУчетПоКарточкам(СтрокаТекущиеДанные.Примечание, 
			НСтр("ru = 'Разбиение комплекта'"),СтрокаТекущиеДанные.Номенклатура);
		Возврат;
	КонецЕсли;
		
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(
		СтрокаТекущиеДанные.Номенклатура,СтрокаТекущиеДанные.МестоХранения,СтрокаТекущиеДанные.Партия);
	Структура = Новый Структура();	
	Структура.Вставить("МестоХранения", 	СтруктураПараметров.МестоХранения);
	Структура.Вставить("Организация", 		СтруктураПараметров.Организация);	
	
	Если ТипЗнч(СтрокаТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
		И Не ЗначениеЗаполнено(СтрокаТекущиеДанные.Партия) Тогда
			
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Не возможно создать документ ""Разбиение комплекта"", т.к. номенклатура ""%1"" не входит в комплект.'"), 
			СтрокаТекущиеДанные.Номенклатура));
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТекущиеДанные.Комплект) Тогда		
		Структура.Вставить("КарточкаНоменклатурыКомплекта", СтрокаТекущиеДанные.Комплект);
		Структура.Вставить("ТипРазукомплектации", 
			ПредопределенноеЗначение("Перечисление.ТипыРазукомплектации.РазбитьКомплект"));
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТекущиеДанные.Партия) Тогда
		УправлениеITОтделом8УФ.ПолучитьВерхнююНоменклатуруПоКомплектующей(СтрокаТекущиеДанные.Партия,
			КонецДня(ТекущаяДата()));
		Структура.Вставить("КарточкаНоменклатурыКомплекта", 
			УправлениеITОтделом8УФ.ПолучитьВерхнююНоменклатуруПоКомплектующей(СтрокаТекущиеДанные.Партия,
				КонецДня(ТекущаяДата())));
		Структура.Вставить("ТипРазукомплектации", 
			ПредопределенноеЗначение("Перечисление.ТипыРазукомплектации.РазбитьОбъединенныеКомплектующие"));
		
	Иначе
		Если ЭтоСвернутыйКомплект(СтрокаТекущиеДанные.Номенклатура) Тогда
			Структура.Вставить("КарточкаНоменклатурыКомплекта", СтрокаТекущиеДанные.Номенклатура);
			Структура.Вставить("ТипРазукомплектации", 
				ПредопределенноеЗначение("Перечисление.ТипыРазукомплектации.РазбитьКомплект"));
		Иначе
			Структура.Вставить("КарточкаНоменклатурыКомплекта", СтрокаТекущиеДанные.Номенклатура);
			Структура.Вставить("ТипРазукомплектации", 
				ПредопределенноеЗначение("Перечисление.ТипыРазукомплектации.РазбитьОбъединенныеКомплектующие"));
		КонецЕсли;			
	КонецЕсли;	
	
	ОткрытьФорму("Документ.РазбиениеКомплектации.Форма.ФормаДокумента", Структура);
		
КонецПроцедуры

&НаКлиенте
Процедура СкладскиеДокументы(Команда)
	
	ОткрытьФорму("ЖурналДокументов.СкладскиеДокументы.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоказателиОборудования(Команда)
	
	СтрокаТекущиеДанные = Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	Если СтрокаТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТекущиеДанные.Примечание) Тогда
		ПоказатьПредупреждениеНетНаОстаткахУчетПоКарточкам(СтрокаТекущиеДанные.Примечание, 
			НСтр("ru = 'Изменение показателей оборудования'"),СтрокаТекущиеДанные.Номенклатура);
		Возврат;
	КонецЕсли;
	Если ТипЗнч(СтрокаТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
		И НЕ УправлениеITОтделом8УФПовтИсп.ВестиУчетПоКарточкамНоменклатуры(СтрокаТекущиеДанные.Номенклатура) Тогда
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Не возможно создать документ ""Изменение показателей оборудования"", т.к. для номенклатуры ""%1"" не ведется учет по карточкам.'"), 
			СтрокаТекущиеДанные.Номенклатура));
		Возврат;
	КонецЕсли;	
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(
		СтрокаТекущиеДанные.Номенклатура, СтрокаТекущиеДанные.МестоХранения, СтрокаТекущиеДанные.Партия);
	Структура = Новый Структура();		
	Структура.Вставить("Организация", 		СтруктураПараметров.Организация);
	Структура.Вставить("АдресНоменклатуры", СтруктураПараметров.АдресНоменклатуры);	
	ОткрытьФорму("Документ.ИзменениеПоказателейОборудования.Форма.ФормаДокумента", Структура);
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНовыеШтрихКоды(Команда)
	
	СформироватьНовыеШтрихКодыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьВидимостьИДоступность()
	
	мНоменклатураПустаяСсылка = Справочники.Номенклатура.ПустаяСсылка();
	мКарточкиНоменклатурыПустаяСсылка = Справочники.КарточкиНоменклатуры.ПустаяСсылка();
	мВидыНоменклатурыПустаяСсылка = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	
	Если ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоНоменклатуре") Тогда
		ОбъектПоиска										= "";
		ОбъектПоискаНоменклатура							= мНоменклатураПустаяСсылка;
		ОбъектПоискаКарточкаНоменклатуры 					= мКарточкиНоменклатурыПустаяСсылка;
		ОбъектПоискаВидНоменклатуры							= мВидыНоменклатурыПустаяСсылка;
		Элементы.ОбъектПоиска.Видимость 					= Ложь;
		Элементы.ОбъектПоискаКарточкаНоменклатуры.Видимость = Ложь;		
		Элементы.ОбъектПоискаНоменклатура.Видимость 		= Истина;
		Элементы.ОбъектПоискаВидНоменклатуры.Видимость 		= Ложь;		
	ИначеЕсли ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоКарточкеНоменклатуры") Тогда
		ОбъектПоиска										= "";
		ОбъектПоискаНоменклатура							= мНоменклатураПустаяСсылка;
		ОбъектПоискаКарточкаНоменклатуры 					= мКарточкиНоменклатурыПустаяСсылка;
		ОбъектПоискаВидНоменклатуры							= мВидыНоменклатурыПустаяСсылка;
		Элементы.ОбъектПоиска.Видимость 					= Ложь;
		Элементы.ОбъектПоискаНоменклатура.Видимость 		= Ложь;
		Элементы.ОбъектПоискаКарточкаНоменклатуры.Видимость = Истина;
		Элементы.ОбъектПоискаВидНоменклатуры.Видимость 		= Ложь;		
	ИначеЕсли ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоВидуНоменклатуры") Тогда
		ОбъектПоиска										= "";
		ОбъектПоискаНоменклатура							= мНоменклатураПустаяСсылка;
		ОбъектПоискаКарточкаНоменклатуры 					= мКарточкиНоменклатурыПустаяСсылка;
		ОбъектПоискаВидНоменклатуры							= мВидыНоменклатурыПустаяСсылка;
		Элементы.ОбъектПоиска.Видимость 					= Ложь;
		Элементы.ОбъектПоискаНоменклатура.Видимость 		= Ложь;
		Элементы.ОбъектПоискаКарточкаНоменклатуры.Видимость = Ложь;
		Элементы.ОбъектПоискаВидНоменклатуры.Видимость 		= Истина;		
	Иначе
		ОбъектПоиска										= "";
		ОбъектПоискаНоменклатура							= мНоменклатураПустаяСсылка;
		ОбъектПоискаКарточкаНоменклатуры 					= мКарточкиНоменклатурыПустаяСсылка;
		ОбъектПоискаВидНоменклатуры							= мВидыНоменклатурыПустаяСсылка;
		Элементы.ОбъектПоискаНоменклатура.Видимость 		= Ложь;
		Элементы.ОбъектПоискаКарточкаНоменклатуры.Видимость = Ложь;
		Элементы.ОбъектПоискаВидНоменклатуры.Видимость 		= Ложь;
		Элементы.ОбъектПоиска.Видимость						= Истина;
	КонецЕсли;
	
	Элементы.НоменклатураНаСкладахБухНомер.Видимость		= ТипПоиска = Перечисления.ТипПоиска.ПоБухгалтерскомуНомеру;
	Элементы.НоменклатураНаСкладахИнвентарныйНомер.Видимость= ТипПоиска = Перечисления.ТипПоиска.ПоИнвентарномуНомеру;
	Элементы.НоменклатураНаСкладахСерийныйНомер.Видимость	= ТипПоиска = Перечисления.ТипПоиска.ПоСерийномуНомеру;	

	ОбновитьДоступностьКнопкиПоиск();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьКнопкиПоиск()
	
	ВыбранноеЗначение = ТипПоиска;
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоНоменклатуре") Тогда	
		Элементы.Поиск.Доступность = НЕ ПустаяСтрока(ОбъектПоискаНоменклатура);
	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоКарточкеНоменклатуры") Тогда
		Элементы.Поиск.Доступность = НЕ ПустаяСтрока(ОбъектПоискаКарточкаНоменклатуры);
	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоВидуНоменклатуры") Тогда
		Элементы.Поиск.Доступность = НЕ ПустаяСтрока(ОбъектПоискаВидНоменклатуры);	
	Иначе
		Элементы.Поиск.Доступность = НЕ ПустаяСтрока(ОбъектПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Вывод дерева номенклатуры.
Процедура ВывестиДеревоНоменклатуры()
	
	ТЗ = Объект.Номенклатура.Выгрузить();
	ТЗ.Колонки.Добавить("НавСсылка");
	Для каждого Строки Из ТЗ Цикл
		Строки.НавСсылка = УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(Строки.Номенклатура);
	КонецЦикла;
	ДЗ = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	ДЗ.Строки.Очистить();	
	УправлениеITОтделом8УФ.ВывестиДеревоНоменклатуры(ДЗ, ТЗ);
	ЗначениеВДанныеФормы(ДЗ, ДеревоНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ПоискНаСервере();
	Элементы.НоменклатураНаСкладах.Обновить();
	Элементы.ДекорацияНайденоШтук.Заголовок = НоменклатураНаСкладах.Количество();
	УстановитьДоступностьКомандФормы()
	
КонецПроцедуры

&НаСервере
Процедура ПоискНаСервере()
	
	Если ОчищатьФормуПриНовомПоиске Тогда
		НоменклатураНаСкладах.Очистить();
		Объект.Номенклатура.Очистить();
		ДеревоНоменклатуры.ПолучитьЭлементы().Очистить();
//		НоменклатураНаименование 	= ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
//		НоменклатураВид				= ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка");
//		НоменклатураКоличество 		= 0;
//		НоменклатураКомплект 		= ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
//		НоменклатураМестаХранения	= "";
		НоменклатураАдресКартинки 	= "";
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Если ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоШтрихкоду") Тогда
		мОбъектПоиска = УдалитьСимволыШаблонаИзСтроки(ОбъектПоиска);
		мОбъектПоиска = "%" + мОбъектПоиска + "%";
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ШтрихкодыНоменклатуры.Номенклатура КАК Ссылка
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &Значение";
	ИначеЕсли ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоИнвентарномуНомеру") Тогда
		мОбъектПоиска = УдалитьСимволыШаблонаИзСтроки(ОбъектПоиска);
		мОбъектПоиска = "%" + мОбъектПоиска + "%";
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КарточкиНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
			|ГДЕ
			|	КарточкиНоменклатуры.ИнвентарныйНомер ПОДОБНО &Значение";		
	ИначеЕсли ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоСерийномуНомеру") Тогда
		мОбъектПоиска = УдалитьСимволыШаблонаИзСтроки(ОбъектПоиска);
		мОбъектПоиска = "%" + мОбъектПоиска + "%";
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КарточкиНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
			|ГДЕ
			|	КарточкиНоменклатуры.СерийныйНомер ПОДОБНО &Значение";	
	ИначеЕсли ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоБухгалтерскомуНомеру") Тогда
		мОбъектПоиска = УдалитьСимволыШаблонаИзСтроки(ОбъектПоиска);
		мОбъектПоиска = "%" + мОбъектПоиска + "%";
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КарточкиНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
			|ГДЕ
			|	КарточкиНоменклатуры.БухНомер ПОДОБНО &Значение";
	ИначеЕсли ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоНаименованию") Тогда
		мОбъектПоиска = УдалитьСимволыШаблонаИзСтроки(ОбъектПоиска);
		мОбъектПоиска = "%" + мОбъектПоиска + "%";
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КарточкиНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
			|ГДЕ
			|	КарточкиНоменклатуры.Наименование ПОДОБНО &Значение
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	НЕ Номенклатура.ЭтоГруппа
			|	И Номенклатура.Наименование ПОДОБНО &Значение";
	ИначеЕсли ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоВидуНоменклатуры") Тогда
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КарточкиНоменклатуры.Ссылка
			|ИЗ
			|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
			|ГДЕ
			|	КарточкиНоменклатуры.Владелец.ВидНоменклатуры = &Значение
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ВидНоменклатуры = &Значение";
		
	КонецЕсли;
	
	Если ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоНаименованию")
		ИЛИ ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоБухгалтерскомуНомеру")
		ИЛИ ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоИнвентарномуНомеру")
		ИЛИ ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоСерийномуНомеру")
		ИЛИ ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоШтрихкоду") Тогда
		мЗначение = мОбъектПоиска;
	ИначеЕсли ТипПоиска = ПредопределенноеЗначение("Перечисление.ТипПоиска.ПоВидуНоменклатуры") Тогда
		мЗначение = ОбъектПоискаВидНоменклатуры;
	Иначе
		мЗначение = ОбъектПоиска;	
	КонецЕсли;	 
	
	Запрос.УстановитьПараметр("Значение",мЗначение); 
	Результат 			= Запрос.Выполнить().Выбрать();		
	МассивНоменклатуры 	= Новый Массив;
	Пока Результат.Следующий() Цикл
		Если ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
			Если Результат.Ссылка.Владелец.ВидНоменклатуры.ТипВидаНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыВидовНоменклатуры.Услуга") Тогда
				Продолжить;
			КонецЕсли;
		Иначе 
			Если Результат.Ссылка.ВидНоменклатуры.ТипВидаНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыВидовНоменклатуры.Услуга") Тогда
				Продолжить;
			КонецЕсли;			
		КонецЕсли;
		МассивНоменклатуры.Добавить(Результат.Ссылка);
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество() > 0 Тогда
		
		ЗаполнитьНоменклатуруНаСкладах(МассивНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьСимволыШаблонаИзСтроки(Наименование)
	НовоеНаименование = СтрЗаменить(СокрЛП(Наименование),"%","");
	НовоеНаименование = СтрЗаменить(СокрЛП(НовоеНаименование),"?","");
	НовоеНаименование = СтрЗаменить(СокрЛП(НовоеНаименование),"[","");
	НовоеНаименование = СтрЗаменить(СокрЛП(НовоеНаименование),"]","");
	НовоеНаименование = СтрЗаменить(СокрЛП(НовоеНаименование),"_","");
	Возврат НовоеНаименование;
КонецФункции

&НаСервере
Процедура ЗаполнитьНоменклатуруНаСкладах(МассивНоменклатуры)
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомплектацияОстатки.Комплект,
		|	КомплектацияОстатки.Партия КАК Партия,
		|	КомплектацияОстатки.Номенклатура КАК Номенклатура,
		|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
		|	ЕСТЬNULL(КомплектацияОстатки.СуммаОстаток, 0) КАК Сумма,
		|	"""" КАК МестоХранения,
		|	"""" КАК ИнвентарныйНомер,
		|	"""" КАК СерийныйНомер,
		|	"""" КАК БухНомер
		|ИЗ
		|	РегистрНакопления.Комплектация.Остатки(
		|			&Период,
		|			ВЫБОР
		|					КОГДА ТИПЗНАЧЕНИЯ(Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|				И Номенклатура В (&МассивНоменклатуры)) КАК КомплектацияОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ОстаткиОстатки.Партия,
		|	ОстаткиОстатки.Номенклатура,
		|	ОстаткиОстатки.КоличествоОстаток,
		|	ЕСТЬNULL(ОстаткиОстатки.СуммаОстаток, 0),
		|	ОстаткиОстатки.МестоХранения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА """"
		|		ИНАЧЕ ОстаткиОстатки.Номенклатура.ИнвентарныйНомер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА """"
		|		ИНАЧЕ ОстаткиОстатки.Номенклатура.СерийныйНомер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА """"
		|		ИНАЧЕ ОстаткиОстатки.Номенклатура.БухНомер
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.Остатки.Остатки(&Период, Номенклатура В (&МассивНоменклатуры)) КАК ОстаткиОстатки";
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Период", КонецДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса 		= Запрос.Выполнить();	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаТЗ 				= НоменклатураНаСкладах.Добавить();		
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, ВыборкаДетальныеЗаписи);		
			СтрокаТЗ.НавСсылка 		= УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(ВыборкаДетальныеЗаписи.Номенклатура);
			// номенклатура из "свернутого" комплекта
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Комплект) Тогда
				КомплектСтруктура = УправлениеITОтделом8УФ.ПолучитьОстаткиПоНоменклатуре(ВыборкаДетальныеЗаписи.Комплект,КонецДня(ТекущаяДатаСеанса()),Неопределено,Неопределено);
				Если КомплектСтруктура.Свойство("МестоХранения") Тогда
					СтрокаТЗ.МестоХранения = КомплектСтруктура.МестоХранения;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
		
		НоменклатураНаСкладах.Сортировать("Номенклатура");
		
	Иначе
		
		Для Инд = 0 По МассивНоменклатуры.Количество()-1 Цикл
			СтрокаТЗ 				= НоменклатураНаСкладах.Добавить();		
			СтрокаТЗ.Номенклатура	= МассивНоменклатуры[Инд];			
			СтрокаТЗ.НавСсылка 		= УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(МассивНоменклатуры[Инд]);
			СтрокаТЗ.Количество		= 0;
			СтрокаТЗ.Сумма 			= 0;
			Если ТипЗнч(СтрокаТЗ.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И СтрокаТЗ.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
				СтрокаТЗ.Примечание		= НСтр("ru = 'Ведется учет по карточкам'");
			Иначе
				СтрокаТЗ.Примечание		= НСтр("ru = 'Нет на остатках'");
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов)
	
	Модифицированность = Истина;
	
	НеизвестныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
		
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеизвестныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
		
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
		   
		    Если ТипЗнч(ДанныеШтрихкода.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				НоменклатураШтрихкода			= ДанныеШтрихкода.Номенклатура;
				КарточкаНоменклатурыШтрихкода	= УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(НоменклатураШтрихкода);				
		    Иначе
				НоменклатураШтрихкода			= ДанныеШтрихкода.Номенклатура.Владелец;
				КарточкаНоменклатурыШтрихкода	= ДанныеШтрихкода.Номенклатура;				
			КонецЕсли;
					   
			СтруктураДанныеНоменклатуры = Новый Структура();			
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", 			НоменклатураШтрихкода);
			СтруктураДанныеНоменклатуры.Вставить("КарточкаНоменклатуры", 	КарточкаНоменклатурыШтрихкода);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", 		ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = НоменклатураШтрихкода.ЕдиницаИзмерения;
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные 	= Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);	
	СтруктураДанные.Вставить("Дата", КонецДня(ТекущаяДата()));
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);	
	//МассивВывода 		= Новый Массив;
	мМассивНоменклатуры = Новый Массив;
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
				
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		Иначе
			мМассивНоменклатуры.Добавить(ДанныеШтрихкода.Номенклатура);				
		КонецЕсли;
	КонецЦикла;	
	
	Если ОчищатьФормуПриНовомПоиске Тогда
		Очистить(Неопределено);
	КонецЕсли;	
	
	ЗаполнитьНоменклатуруНаСкладах(мМассивНоменклатуры);
	Элементы.НоменклатураНаСкладах.Обновить();
	
	Возврат НеизвестныеШтрихкоды;
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Содержание", СтруктураДанные.Номенклатура.Наименование);	
	
	Если ТипЗнч(СтруктураДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	Иначе
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.Владелец.ЕдиницаИзмерения);
	КонецЕсли;
	
	СтруктураДанные.Вставить("НавСсылка", УправлениеITОтделом8УФПовтИсп.ПолучитьНавСсылкуНоменклатуры(СтруктураДанные.Номенклатура));
	// Проверка, что ведется учет по карточкам
	СтруктураДанные.Вставить("КарточкаНоменклатуры", УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(СтруктураДанные.Номенклатура));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Процедура ПодготовитьДеревоНоменклатуры()	
		
	ТекущаяСтрока 			= Элементы.НоменклатураНаСкладах.ТекущиеДанные;
	
	Если ТекущаяСтрока 		= Неопределено Тогда 
		
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Характеристики,
			"Объект", ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
		
		НоменклатураАдресКартинки ="";
		ОбновитьКомплектациюНаСервере(Неопределено);
		
		Возврат;
		
	КонецЕсли;	
	
	Объект.Номенклатура.Очистить();
	ДеревоНоменклатуры.ПолучитьЭлементы().Очистить();
	ОбновитьКомплектациюНаСервере(Неопределено);
	
	СтруктураТекущаяСтрока	= Новый Структура("Номенклатура,НавСсылка,МестоХранения,Комплект,Партия,Количество,Сумма,Примечание");		
	ЗаполнитьЗначенияСвойств(СтруктураТекущаяСтрока,ТекущаяСтрока);		
	ПодготовитьДеревоНоменклатурыНаСервере(СтруктураТекущаяСтрока);
	ВывестиДеревоНоменклатуры();
	УправлениеITОтделом8УФКлиент.РазвернутьДеревоНоменклатуры(ЭтаФорма);					
	ИдентификаторСтроки 	= 0;									
	
	Если ТипЗНЧ(СтруктураТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда					
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("КарточкаНоменклатуры",
		ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураТекущаяСтрока.Номенклатура,Ложь);		
		Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;
		НоменклатураАдресКартинки = ОбновитьИзображениеНаСервере(СтруктураТекущаяСтрока.Номенклатура);
		
	Иначе
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура",
		ИдентификаторСтроки,ДеревоНоменклатуры.ПолучитьЭлементы(),СтруктураТекущаяСтрока.Номенклатура,Ложь);		
		Элементы.ДеревоНоменклатуры.ТекущаяСтрока = ИдентификаторСтроки;
		НоменклатураАдресКартинки = ПолучитьНавигационнуюСсылку(ТекущаяСтрока.Номенклатура, "Картинка");
		
	КонецЕсли;
	
	РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Характеристики, 
		"Объект", СтруктураТекущаяСтрока.Номенклатура);	
	
КонецПроцедуры

&НаСервере
Функция ОбновитьИзображениеНаСервере(КарточкаНоменклатуры)
	
	Возврат ПолучитьНавигационнуюСсылку(КарточкаНоменклатуры.Владелец.Ссылка, "Картинка");
	
КонецФункции

&НаСервере
Процедура ПодготовитьДеревоНоменклатурыНаСервере(СтруктураТекущаяСтрока)
	
	Если ТипЗнч(СтруктураТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		И СтруктураТекущаяСтрока.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
		СтрокаНоменклатура 							= Объект.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатура,СтруктураТекущаяСтрока);
		СтрокаНоменклатура.ВидНоменклатуры 			= СтруктураТекущаяСтрока.Номенклатура.ВидНоменклатуры;
		СтрокаНоменклатура.ЕдиницаИзмерения 		= СтруктураТекущаяСтрока.Номенклатура.ЕдиницаИзмерения;
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Для номенклатуры %1 в ее виде указано ""Вести учет по карточкам"". Для работы с ней используйте карточку номенклатуры.'"), СтруктураТекущаяСтрока.Номенклатура));
		Возврат;
	КонецЕсли;
			
	СтруктураПараметров = УправлениеITОтделом8УФ.ПолучитьСтруктуруНоменклатураМестоХранения(СтруктураТекущаяСтрока.Номенклатура,СтруктураТекущаяСтрока.МестоХранения,СтруктураТекущаяСтрока.Партия);
	ТЗ 					= ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресНоменклатуры);	
	Объект.Номенклатура.Загрузить(ТЗ);		
	УдалитьИзВременногоХранилища(СтруктураПараметров.АдресНоменклатуры);	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьКраткоеОписаниеНоменклатуры()
	ТекущаяСтрока 		= Элементы.ДеревоНоменклатуры.ТекущиеДанные;	
	
	Если ТекущаяСтрока 	= Неопределено Тогда 
		РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Характеристики, 
			"Объект", ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка"));
			
		НоменклатураАдресКартинки ="";
		ОбновитьКомплектациюНаСервере(Неопределено);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтотОбъект.ТекущийЭлемент = Элементы.ДеревоНоменклатуры И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда		
			РаботаСОтборамиКлиентСервер.УстановитьЭлементОтбораСписка(Характеристики, 
				"Объект", ?(ТекущаяСтрока.УчетПоКарточкам, ТекущаяСтрока.КарточкаНоменклатуры, ТекущаяСтрока.Номенклатура));
				
			НоменклатураАдресКартинки = ПолучитьНавигационнуюСсылку(ТекущаяСтрока.Номенклатура, "Картинка");
			
		Если ТекущаяСтрока.УчетПоКарточкам Тогда						
			ОбновитьКомплектациюНаСервере(ТекущаяСтрока.КарточкаНоменклатуры);
			
		Иначе			
			ОбновитьКомплектациюНаСервере(Неопределено);
			
		КонецЕсли;
		
		// Разворачиваем дерево.
		КоллекцияЭлементовДерева = ДеревоКомплектации.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоКомплектации.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеНетНаОстаткахУчетПоКарточкам(ТекстПримечания, ВидДокумента, Номенклатура)
	
	Если ТекстПримечания = НСтр("ru = 'Нет на остатках'") Тогда
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Не возможно создать документ ""%1"", т.к. по номенклатуре ""%2"" остаток равен 0.'"), ВидДокумента, Номенклатура));
	ИначеЕсли ТекстПримечания = НСтр("ru = 'Ведется учет по карточкам'") Тогда
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Не возможно создать документ ""%1"", т.к. для номенклатуры ""%2"" в ее виде указано ""Вести учет по карточкам""'"), ВидДокумента, Номенклатура));
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьКарточкиПоНоменклатуре(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КарточкиНоменклатуры.Ссылка КАК КарточкаНоменклатуры
		|ИЗ
		|	Справочник.КарточкиНоменклатуры КАК КарточкиНоменклатуры
		|ГДЕ
		|	КарточкиНоменклатуры.Владелец = &Владелец
		|	И НЕ КарточкиНоменклатуры.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		МассивКарточекНоменклатуры = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивКарточекНоменклатуры.Добавить(ВыборкаДетальныеЗаписи.КарточкаНоменклатуры);
		КонецЦикла;
		Возврат МассивКарточекНоменклатуры;
	Иначе Возврат Новый Массив;	
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОбновитьКомплектациюНаСервере(Комплект)
	
	ДЗ = РеквизитФормыВЗначение("ДеревоКомплектации");
	ДЗ.Строки.Очистить();
	
	Если Комплект = Неопределено Тогда
		ЗначениеВДанныеФормы(ДЗ, ДеревоКомплектации);	
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КомплектацияОстатки.Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|			ТОГДА КомплектацияОстатки.Номенклатура.Владелец
		|		ИНАЧЕ КомплектацияОстатки.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КомплектацияОстатки.Номенклатура) = ТИП(Справочник.КарточкиНоменклатуры)
		|			ТОГДА КомплектацияОстатки.Номенклатура
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КарточкиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК КарточкаНоменклатуры,
		|	ВЫБОР
		|		КОГДА КомплектацияОстатки.Партия = &Комплект
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КарточкиНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ КомплектацияОстатки.Партия
		|	КОНЕЦ КАК Партия,
		|	КомплектацияОстатки.КоличествоОстаток КАК Количество,
		|	КомплектацияОстатки.СуммаОстаток КАК Сумма,
		|	КомплектацияОстатки.Номенклатура.ВидНоменклатуры.НавСсылка КАК НавСсылка
		|ИЗ
		|	РегистрНакопления.Комплектация.Остатки(&ДатаКон, Комплект = &Комплект) КАК КомплектацияОстатки";

	Запрос.УстановитьПараметр("Комплект", Комплект);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТЗ = РезультатЗапроса.Выгрузить();
		
		Для Каждого Строки Из ТЗ Цикл
			Если НЕ ЗначениеЗаполнено(Строки.КарточкаНоменклатуры) Тогда
				Строки.КарточкаНоменклатуры = УправлениеITОтделом8УФПовтИсп.ПолучитьКарточкуНеВедетсяУчетПоКарточкамНоменклатуры(Строки.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
		УправлениеITОтделом8УФ.ВывестиДеревоНоменклатуры(ДЗ, ТЗ);
		
		// Сортировка ДЗ.
		ДЗ.Строки.Сортировать("Номенклатура,КарточкаНоменклатуры", Истина);
		УправлениеITОтделом8УФ.ОбновитьКлючиСтрокВДеревеЗначений(ДЗ);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ДЗ, ДеревоКомплектации);
	
КонецПроцедуры

&НаСервере
Функция ЭтоСвернутыйКомплект(КарточкаНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомплектацияОстатки.Номенклатура
		|ИЗ
		|	РегистрНакопления.Комплектация.Остатки(&Период, Комплект = &Комплект) КАК КомплектацияОстатки";
	
	Запрос.УстановитьПараметр("Комплект", КарточкаНоменклатуры);
	Запрос.УстановитьПараметр("Период", КонецДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Следующий();
	
КонецФункции

&НаСервере
Функция НоменклатураУслуга(Номенклатура)
	
	Возврат Номенклатура.ВидНоменклатуры.ТипВидаНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыВидовНоменклатуры.Услуга");
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандФормы()
	
	Элементы.ДеревоНоменклатурыЗарегистрироватьЗадание.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.Задание);
    Элементы.ФормаПоступление.Видимость 						 = ПравоДоступа("Добавление", Метаданные.Документы.Поступление);
	Элементы.ДеревоНоменклатурыПеремещение.Видимость 			 = ПравоДоступа("Добавление", Метаданные.Документы.Перемещение);
	Элементы.ДеревоНоменклатурыСписание.Видимость 				 = ПравоДоступа("Добавление", Метаданные.Документы.Списание);
	Элементы.ФормаИнвентаризация.Видимость		 				 = ПравоДоступа("Добавление", Метаданные.Документы.Инвентаризация);
	Элементы.ДеревоНоменклатурыНачалоРемонта.Видимость 			 = ПравоДоступа("Добавление", Метаданные.Документы.НачалоОбслуживания);
	Элементы.ФормаОкончаниеРемонта.Видимость 			 		 = ПравоДоступа("Добавление", Метаданные.Документы.ОкончаниеОбслуживания);
	Элементы.ФормаСборкаКомплекта.Видимость 			 		 = ПравоДоступа("Добавление", Метаданные.Документы.СборкаКомплектация);
	Элементы.ДеревоНоменклатурыРазбиениеКомплекта.Видимость 	 = ПравоДоступа("Добавление", Метаданные.Документы.РазбиениеКомплектации);
	Элементы.ФормаИзменитьПоказателиОборудования.Видимость 	 	 = ПравоДоступа("Добавление", Метаданные.Документы.ИзменениеПоказателейОборудования);
	
	Если НоменклатураНаСкладах.Количество() > 0 И ТипПоиска <> Перечисления.ТипПоиска.ПоШтрихкоду Тогда
		Элементы.СформироватьНовыеШтрихКоды.Доступность = Истина;
	Иначе
		Элементы.СформироватьНовыеШтрихКоды.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область БПО

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНовыеШтрихКодыНаСервере()
	
	КоличествоШтрихкодов = 0;
	Для Каждого Строки Из Объект.Номенклатура Цикл
		
		Если Строки.Номенклатура.ВидНоменклатуры.ВестиУчетПоКарточкамНоменклатуры Тогда
			Номенклатура = Строки.КарточкаНоменклатуры;
		Иначе
			Номенклатура = Строки.Номенклатура;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			Если Строки.Номенклатура.ВидНоменклатуры.МожетИметьШтрихКод 
				И НЕ УправлениеITОтделом8УФ.ЕстьШтрихКод(Номенклатура) Тогда
				
				ТекЗапись					= РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();				
				ТекЗапись.Штрихкод         	= РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13();
				ТекЗапись.Номенклатура      = Номенклатура;
				ТекЗапись.ЕдиницаИзмерения 	= Строки.Номенклатура.ЕдиницаИзмерения;
				Попытка
					ТекЗапись.Записать();
					КоличествоШтрихкодов = КоличествоШтрихкодов + 1;
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Для %1 сформирован штрихкод ""%2""'"), Строки.КарточкаНоменклатуры, 
						Строка(ТекЗапись.Штрихкод)));
						
				Исключение
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
						НСтр("ru = 'Для строки №%1 не удалось сформировать новый штрихкод.'"), Строки.НомерСтроки));
				КонецПопытки;				
			КонецЕсли;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'Для строки №%1 нет номенклатуры или карточки.'"), Строки.НомерСтроки));
		КонецЕсли;

	КонецЦикла;
	
	Если КоличествоШтрихкодов = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для номенклатуры не сформировано ни одного штрих кода.'"));
	Иначе
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Для номенклатуры сформировано %1 штрих кодов'"), КоличествоШтрихкодов));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

