
#Область ОбработчикиСобытийФормы

&НаСервере
// При создании формы на сервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Отказ Тогда
		Попытка
			МассивСсылок = Параметры.ОбъектыНазначения;
			Для Каждого Ссылка Из МассивСсылок Цикл
				СтрокаСсылок = Объект.Ссылки.Добавить();
				СтрокаСсылок.Ссылка = Ссылка;
			КонецЦикла;
		Исключение				
		КонецПопытки;	
		
		Если НЕ ПустаяСтрока(Параметры.ПараметрыПоиска) Тогда
			СтрокаПоиска = Параметры.ПараметрыПоиска;			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// При открытии формы.
//
Процедура ПриОткрытии(Отказ)	
	
	ЗаполнитьСтрокуПоиска();
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПриОткрытииФормы",0.2,Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработка выбора формы.
// Используется для настроек прокси-сервера/
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Объект.ИспользоватьПрокси 	= ВыбранноеЗначение.ИспользоватьПрокси;
	Объект.АдресПрокси 			= ВыбранноеЗначение.АдресПрокси;
	Объект.ПарольПрокси 		= ВыбранноеЗначение.ПарольПрокси;
	Объект.ПользовательПрокси 	= ВыбранноеЗначение.ПользовательПрокси;
	Объект.ПортПрокси 			= ВыбранноеЗначение.ПортПрокси;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик нажатия на кнопку "Настройки прокси-сервера".
//
Процедура НастройкиПрокси(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера", Новый Структура("НастройкаПроксиНаКлиенте", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПоискХТМЛ(Команда)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо ввести строку поиска.'"));
		Возврат;
	КонецЕсли;
	
	ТекстПоиска = УдалитьЗапрещенныеСимволы(СтрокаПоиска);
	
	Если ЗначениеЗаполнено(ТекстПоиска) Тогда
		НайтиХТМЛ(ТекстПоиска);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Процедура заполняет строку запуска исходя из ссылки,
// для которой осуществляется поиск.
//
Процедура ЗаполнитьСтрокуПоиска()
	
	Если Объект.Ссылки.Количество() > 0 Тогда	
		СтрокаПоиска = Объект.Ссылки[0].Ссылка.Наименование;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
// Функция возвращает структуру для хранения результата по конкретной картинке.
//
Функция ПолучитьСтруктуруРезультата() Экспорт	
	
	Возврат Новый Структура(
	"Ссылка,
	|СсылкаНоменклатуры,
	|Имя,
	|ПолноеИмя,
	|Страница,
	|Миниатюра,
	|ВысотаМиниатюры,
	|ШиринаМиниатюры,
	|Ширина,
	|Высота,
	|Размер,
	|Расширение,
	|ИмяВременногоФайла,
	|Картинка,
	|АдресВХранилище,
	|Система");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Функция выполняет поиск картинок.
//
Функция НайтиКартинки(ПараметрыПоиска, КоличествоЭлементов, НачальныйЭлемент,Интерактивно) Экспорт	
		
	ПараметрыПоискаВрем 		= СокрЛП(ПараметрыПоиска);	
	СписокЗапрещенныхПодстрок = Новый СписокЗначений;
	СписокЗапрещенныхПодстрок.Добавить("+");
	СписокЗапрещенныхПодстрок.Добавить("%");
	
	Для Каждого Элемент Из СписокЗапрещенныхПодстрок Цикл
		Стр = Элемент.Значение;
		Пока СтрНайти(ПараметрыПоискаВрем, Стр) > 0 И СтрДлина(ПараметрыПоискаВрем) > 0 Цикл
			ПараметрыПоискаВрем = СтрЗаменить(ПараметрыПоискаВрем, Стр, "");
		КонецЦикла;
	КонецЦикла;	
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПоискаВрем) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатыПоиска= Новый Массив;
	ВремHTML		= Неопределено;
	
	#Если Не ВебКлиент Тогда
		ВремHTML 		= ПолучитьИмяВременногоФайла("html");
	#КонецЕсли
	
	Счетчик = 0;
	МассивЗагруженныхКартинок = Новый Массив;	
	
	Пока СтрНайти(ПараметрыПоискаВрем, "-") > 0 Цикл
		ПараметрыПоискаВрем = СтрЗаменить(ПараметрыПоискаВрем, "-", " ");
	КонецЦикла; 
	
	Пока СтрНайти(ПараметрыПоискаВрем, "+") > 0 Цикл
		ПараметрыПоискаВрем = СтрЗаменить(ПараметрыПоискаВрем, "+", " ");
	КонецЦикла; 	
	
	Пока СтрНайти(ПараметрыПоискаВрем, "  ") > 0 Цикл
		ПараметрыПоискаВрем = СтрЗаменить(ПараметрыПоискаВрем, "  ", " ");
	КонецЦикла; 
	
	Порция = 0;
	
	// Создаем объект "VBScript.RegExp" для работы с регулярными выражениями.
	Попытка
		
		мRegExp = Новый COMОбъект("VBScript.RegExp");
		
	Исключение
		
		ПолучитьСообщениеПользователю();
		
		Возврат Неопределено;
	КонецПопытки;
	
	мRegExp.IgnoreCase 		= Истина; // Игнорировать регистр.
	мRegExp.Global 			= Истина; // Поиск всех вхождений шаблона.
	
	Пока Порция < КоличествоЭлементов Цикл		
		НомерВызова			= "&start="	+ (Порция + НачальныйЭлемент);				
		ИскатьНаСайте		= "";
		ИскатьСРазмером 	= "&imgsz=medium";
		ИскатьСТипомФайла   = "";				
		ПараметрыПоискаUTF 	= ТекстUnicodeToUTF8(ПараметрыПоискаВрем);
		
		// Запрос страницы HTML		
		URL = "www.google.ru/search?q=" + ПараметрыПоискаUTF + "&newwindow=1&source=lnt&sa=G&tbm=isch&ijn=1" 
			+ НомерВызова + ИскатьНаСайте + ИскатьСРазмером + ИскатьСТипомФайла;
		
		Текст = ПолучитьСтраницу(URL, ВремHTML);
		
		Если Текст = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// РегулярноеВыражение = "(http|https)(:\/\/)([^\&\<\>]*?)(.png|.jpg|.jpeg|.gif)&amp;imgrefurl=.*?&amp;.*?h=((?:.|\n)*?)&amp;w=((?:.|\n)*?)&amp;";
		РегулярноеВыражение = "(http|https)(:\/\/)([^\&\<\>]*?)(.png|.jpg|.jpeg|.gif)";
		
		// Поиск регулярного выражения
		мRegExp.Pattern = РегулярноеВыражение;
		Matches			= мRegExp.Execute(Текст);
		Вхождений		= Matches.Count;	
		
		Для Сч = 0 По Вхождений - 1 Цикл
			SubMatches = Matches.Item(Сч).SubMatches;
			Если SubMatches.Count = 4 Тогда
				Результат = ПолучитьСтруктуруРезультата();
				ЗаполнитьРезультат(Результат, SubMatches);
				Если СтрНайти(Результат.Ссылка, "http://images.google.ru/imgres?imgurl=") = 1 Тогда
					Результат.Ссылка = Сред(Результат.Ссылка, СтрДлина("http://images.google.ru/imgres?imgurl=") + 1)
				КонецЕсли;
				// Проверяем, чтобы не загружали картинки, которые уже были загружены ранее
				Если МассивЗагруженныхКартинок.Найти(Результат.Ссылка) <> Неопределено Тогда
					Продолжить;
				Иначе
					МассивЗагруженныхКартинок.Добавить(Результат.Ссылка);
				КонецЕсли;
				// Попытка загрузить изображение
				РасширениеФайла 				= ПолучитьРасширениеФайла(Результат.Расширение);
				Результат.Расширение 			= РасширениеФайла;				
				ПолеИмениФайла					= Неопределено;
				
				#Если Не ВебКлиент Тогда
					ПолеИмениФайла				= ПолучитьИмяВременногоФайла(РасширениеФайла);
				#КонецЕсли
				
				Результат.ИмяВременногоФайла 	= ПолеИмениФайла;
				Результат.Картинка				= ПолучитьКартинку(Результат.Ссылка, РасширениеФайла,ПолеИмениФайла);				
				Если Результат.Картинка = Неопределено Тогда
					Продолжить;
				КонецЕсли;							
				Счетчик = Счетчик + 1;					
				РезультатыПоиска.Добавить(Результат);															
				Если РезультатыПоиска.Количество() = КоличествоЭлементов Тогда
					Прервать;	
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Если РезультатыПоиска.Количество() = КоличествоЭлементов Тогда
			Прервать;	
		КонецЕсли;									
		Порция = Порция + 8;			
	КонецЦикла;
	
	УдалитьФайлы(ВремHTML);	
	Возврат РезультатыПоиска;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьСообщениеПользователю()
	
	ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон(НСтр("ru = 'Не удалось создать объект ""VBScript.RegExp"". Дальнейшая работа невозможна.
                       |%1'"), ОписаниеОшибки()));	
КонецПроцедуры

&НаКлиенте
Функция НайтиКартинкиКлиентСервер(ПараметрыПоиска, КоличествоЭлементов, НачальныйЭлемент, Интерактивно) Экспорт
	
	#Если ВебКлиент Тогда
		Возврат НайтиКартинкиВебКлиент(ПараметрыПоиска, КоличествоЭлементов, НачальныйЭлемент,Интерактивно);
	#Иначе
		Возврат НайтиКартинки(ПараметрыПоиска, КоличествоЭлементов, НачальныйЭлемент,Интерактивно);
	#КонецЕсли
	
КонецФункции

&НаСервере
Функция НайтиКартинкиВебКлиент(ПараметрыПоиска, КоличествоЭлементов, НачальныйЭлемент,Интерактивно)
	
	Возврат НайтиКартинки(ПараметрыПоиска, КоличествоЭлементов, НачальныйЭлемент,Интерактивно);
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
// Функция раскладывает адрес на адрес сервера и адрес картинки.
//
Функция РазложитьАдрес(Знач Адрес) Экспорт
	
	Адрес 			= СтрЗаменить(Адрес, "http%3A", "http://");
	Адрес 			= СтрЗаменить(Адрес, "http://", "");
	Результат 		= Новый Структура();
	СтрокиАдреса	= СтрЗаменить(Адрес, "/", Символы.ПС);
	Результат.Вставить("АдресСервера", СтрПолучитьСтроку(СтрокиАдреса, 1));	
	АдресКартинки 	= "";
	Для Сч = 2 По СтрЧислоСтрок(СтрокиАдреса) Цикл
		АдресКартинки = АдресКартинки + СтрПолучитьСтроку(СтрокиАдреса, Сч) + "/";
	КонецЦикла;
	Результат.Вставить("АдресКартинки", Лев(АдресКартинки, СтрДлина(АдресКартинки)-1));	
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьАдресХТМЛ(Знач Адрес_) Экспорт
	
	Если СтрНайти(Адрес_, "http://") = 1 Тогда
		Адрес = СтрЗаменить(Адрес_, "http://", "");
	ИначеЕсли СтрНайти(Адрес_, "https://") = 1 Тогда
		Адрес = СтрЗаменить(Адрес_, "https://", "");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Результат 		= Новый Структура();
	СтрокиАдреса 	= СтрЗаменить(Адрес, "/", Символы.ПС);
	Результат.Вставить("АдресСервера", СтрПолучитьСтроку(СтрокиАдреса, 1));	
	АдресСтраницы 	= "";
	
	Для Сч = 2 По СтрЧислоСтрок(СтрокиАдреса) Цикл
		АдресСтраницы = АдресСтраницы + СтрПолучитьСтроку(СтрокиАдреса, Сч) + "/";
	КонецЦикла;
	
	Результат.Вставить("АдресСтраницы", Лев(АдресСтраницы, СтрДлина(АдресСтраницы)-1));	
	
	ПозицияПараметров 		= СтрНайти(Адрес_, "?");
	Если ПозицияПараметров > 0 Тогда
		ПараметрВременный = Сред(Адрес_, ПозицияПараметров + 1);
		ПараметрВременный = СтрЗаменить(ПараметрВременный, "&", Символы.ПС);
		Для Сч = 1 По СтрЧислоСтрок(ПараметрВременный) Цикл
			ТекСтрПарам 	= СтрПолучитьСтроку(ПараметрВременный, Сч);
			ПозРавно 		=СтрНайти(ТекСтрПарам, "=");
			ПараметрИмя 	= Лев(ТекСтрПарам, ПозРавно-1);
			ПарамЗначение 	= Сред(ТекСтрПарам, ПозРавно+1);
			Результат.Вставить(ПараметрИмя, ПарамЗначение);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает пустые настройки прокси-сервера, соответствующие не использованию прокси-сервера.
//
// Возвращаемое значение - структура:
//		ИспользоватьПрокси - использовать ли прокси-сервер.
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//		Сервер       - адрес прокси-сервера.
//		Порт         - порт прокси-сервера.
//		Пользователь - имя пользователя для авторизации на прокси-сервере.
//		Пароль       - пароль пользователя.
//
Функция ПолучитьПустыеНастройкиПроксиСервера()
	
	НастройкаПроксиСервера = Новый Соответствие;
	НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Ложь);
	НастройкаПроксиСервера.Вставить("Пользователь", "");
	НастройкаПроксиСервера.Вставить("Пароль", "");
	НастройкаПроксиСервера.Вставить("Порт", "");
	НастройкаПроксиСервера.Вставить("Сервер", "");
	НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", Ложь);
	НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", Ложь);
	Возврат НастройкаПроксиСервера;	
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает объект ИнтернетПрокси с настройками,
// или Неопределено, если прокси-сервер не используется.
//
Функция ПолучитьНастройкиПрокси()
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаКлиенте();
	
	Если НастройкаПроксиСервера = Неопределено ИЛИ НастройкаПроксиСервера.Получить("ИспользоватьПрокси") <> Истина Тогда
		НастройкаПроксиСервера = ПолучитьПустыеНастройкиПроксиСервера();
	КонецЕсли;
	
	Если НастройкаПроксиСервера["ИспользоватьПрокси"] Тогда
		Прокси = Новый ИнтернетПрокси();
		Прокси.Установить("HTTP", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
		Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
		Прокси.Пароль 		= НастройкаПроксиСервера["Пароль"];
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Функция скачивает указанную страницу.
//
Функция ПолучитьСтраницу(Адрес, ИмяФайла) Экспорт			
	
	СтруктураАдреса = РазложитьАдрес(Адрес);	
	Попытка		
		Текст = ПолучитьСодержимоеВебАдреса(СтруктураАдреса.АдресСервера, СтруктураАдреса.АдресКартинки);			
		Возврат Текст;		
	Исключение	
		Возврат "";
	КонецПопытки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Функция скачивает картинку с указанного ресурса и возвращает в виде объекта "Картинка".
//
Функция ПолучитьКартинку(Адрес, Расширение, ВремФайл) Экспорт
	
	СтруктураАдреса = РазложитьАдресХТМЛ(Адрес);
	
	Попытка				
		ВремФайл = ПолучитьСодержимоеВебАдреса(СтруктураАдреса.АдресСервера, СтруктураАдреса.АдресСтраницы,,, Истина);
		Возврат Новый Картинка(ВремФайл);		
	Исключение	
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСодержимоеВебАдреса(Знач СерверПриемник, Знач АдресСтраницы = "",
	Знач ПараметрыСоединения = Неопределено, ЗаголовкиHTTP = Неопределено,
	Знач ПолучитьКакДвоичныеДанные = Ложь, Знач ЗащищенноеСоединение = Ложь) Экспорт
	
	#Если ВебКлиент Тогда
		 
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Функционал не работает в web-клиенте'"));
	Возврат Неопределено;
	
	#Иначе
	
	Перем ИмяФайлаОтветаКодированное, ИмяФайлаОтвета, Порт, Логин, Пользователь, Пароль, Прокси, Таймаут;
	Логин = "";
	Пароль = "";
	Таймаут = 30;
	
	Если Не ЗначениеЗаполнено(СерверПриемник) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ЗаголовкиHTTP) <> Тип("Соответствие") Тогда 
		ЗаголовкиHTTP = Новый Соответствие;
		// Accept: text/html, application/xhtml+xml, image/jxr, */*
		// Accept-Language: ru,en-US;q=0.7,en;q=0.3
		// User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko
		// Accept-Encoding: gzip, deflate
		// Host: www.google.ru
		// DNT: 1
		// Connection: Keep-Alive
		// Cookie: CGIC=IjB0ZXh0L2h0bWwsIGFwcGxpY2F0aW9uL3hodG1sK3htbCwgaW1hZ2UvanhyLCAqLyo; APISID=fHJb7mDts7Ikp9Rt/At8Rmg0vjIUZPJtsH; SID=PwafrlxSLL5a_7HYFcgwkymaLnaMLt0YCwhhwOxgy1vuZn6uNSaMEyHpOEKCprjHoTsMcw.; HSID=AkL49oOyLFWchDqxt; NID=154=kOlecKdqq4DYB_tiaoevAZxuL-ijBzkc_t5R6VPcKZQ47erYuFw6xNALYybU3iMxZUS_pucfLB2ncvTkX16ssUG5PCggovezgsTR9qeJkcUts7r9OAC0GK5ktUQwquBN7O5sBh_e5lBdqikaW1QHglET6kZRI0kLMrrjwR1TKy9kTHYz4zUbgPEug3H5gSSRmydjC7-6DFDFAKNIeg8QPhs3uVtQyKppN-JT8RBDmsLajvXkDzQV; 1P_JAR=2019-01-14-09; OGPC=19008256-1:
		ЗаголовкиHTTP.Вставить("Accept", "text/html, application/xhtml+xml, image/jxr, */*");
		ЗаголовкиHTTP.Вставить("Accept-Language", "ru,en-US;q=0.7,en;q=0.3");
		ЗаголовкиHTTP.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko");
		// ЗаголовкиHTTP.Вставить("Accept-Encoding", "gzip, deflate");
		ЗаголовкиHTTP.Вставить("Connection", "Keep-Alive");
	КонецЕсли;
	
	Если СтрНайти(НРег(СерверПриемник), "https://") = 1 Тогда 
		ЗащищенноеСоединение = Истина; 
	КонецЕсли;
	
	Протокол = ?(Найти(НРег(СерверПриемник), "https://") = 1 ИЛИ ЗащищенноеСоединение, "https://", "http://");
	
	Если Лев(НРег(СерверПриемник), СтрДлина(Протокол)) = Протокол Тогда
		СерверПриемник = Сред(СерверПриемник, СтрДлина(Протокол) + 1);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресСтраницы) Тогда
		Позиция = СтрНайти(СерверПриемник, "/");
		Если Позиция > 0 Тогда
			АдресСтраницы = Сред(СерверПриемник, Позиция, СтрДлина(СерверПриемник));
			СерверПриемник= Лев(СерверПриемник, Позиция - 1);
		Иначе
			АдресСтраницы = "/";
		КонецЕсли;
	КонецЕсли;
	
	СерверПриемник = СтрЗаменить(СерверПриемник, "/", "");
	
	// Выделяем порт из доменного имени.
	ПозицияДвоеточия = СтрНайти(СерверПриемник, ":");
	
	Если ПозицияДвоеточия > 0 Тогда
		Попытка
			Порт = Число(Сред(СерверПриемник, ПозицияДвоеточия + 1));
		Исключение
			Если ЗащищенноеСоединение Тогда
				Порт = 443;
			Иначе
				Порт = 80;
			КонецЕсли;	
		КонецПопытки;	
		СерверПриемник = Лев(СерверПриемник, ПозицияДвоеточия - 1);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыСоединения) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из ПараметрыСоединения Цикл
			//@skip-warning
			Значение = КлючЗначение.Значение; 
			Выполнить(КлючЗначение.Ключ + " = Значение;");
		КонецЦикла;
		Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, Логин);
	КонецЕсли;
	
	Прокси 	= ПолучитьНастройкиПрокси();
	
	НТТР 	= Новый HTTPСоединение(СерверПриемник, Порт, Пользователь, Пароль, Прокси, Таймаут,
	?(ЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено));
	
	// Ответ от сервера получим в возвращаемом значении типа HTTPОтвет.
	// Тут тупит.
	НовыйНТТРЗапрос = Новый HTTPЗапрос(АдресСтраницы, ЗаголовкиHTTP);
	ОтветHTTP 		= НТТР.Получить(НовыйНТТРЗапрос); //
	ОшибкаЗапроса 	= (ОтветHTTP.КодСостояния >= 400);
	
	// После получения ответа сервера необходимо проверить статус или код состояния.
	// http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html.
	// Если сервер вернул один из статусов переадресации.
	// 301 Moved Permanently («перемещено навсегда») или 302 Moved Temporarily («перемещено временно»),
	// то в этом случае можно попытаться перейти на ресурс, на который переадресовал сервер.
	Если ОтветHTTP.КодСостояния = 301 ИЛИ ОтветHTTP.КодСостояния = 302 Тогда
		
		Если ОтветHTTP.Заголовки.Количество() > 0 Тогда
			// Адрес страницы переадресации содержится в поле Location заголовка ответа.
			АдресСтраницы = ОтветHTTP.Заголовки["Location"]; //
			Если ЗначениеЗаполнено(АдресСтраницы) Тогда
				Если СтрНайти(НРег(АдресСтраницы), "http://") = 0 И СтрНайти(НРег(АдресСтраницы), "https://") = 0 Тогда
					АдресСтраницы = ?(Лев(АдресСтраницы, 1) = "/", Сред(АдресСтраницы, 2), АдресСтраницы);
					Если СтрНайти(АдресСтраницы, СерверПриемник + "/") = 0  Тогда
						АдресСтраницы = Протокол + СерверПриемник + ?(ЗначениеЗаполнено(Порт), ":" + Порт, "") + "/" 
							+ АдресСтраницы;
					КонецЕсли;
				КонецЕсли;
				
				// Если сервер вернул cookies (http://ru.wikipedia.org/wiki/HTTP_cookie, http://www.faqs.org/rfcs/rfc6265.html?#41;,
				// вставим их в заголовки для передачи на страницу перехода.
				Куки = ОтветHTTP.Заголовки["Set-Cookie"];//
				Если ЗначениеЗаполнено(Куки) Тогда 
					ЗаголовкиHTTP.Вставить("Cookie", Куки); 
				КонецЕсли;
				
				// Рекурсивный вызов.
				Возврат ПолучитьСодержимоеВебАдреса(АдресСтраницы, , , ЗаголовкиHTTP, ПолучитьКакДвоичныеДанные, 
					ЗащищенноеСоединение);
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ОтветHTTP.КодСостояния >= 100 И ОтветHTTP.КодСостояния <= 200 Тогда
		// Статус ответа в интервале между 100 и 200 Ok говорит о нормальном результате HTTP-запроса.
		Если ОтветHTTP.Заголовки.Количество() > 0 Тогда
			ТипСодержимого = ОтветHTTP.Заголовки["Content-Type"];
			// http://ru.wikipedia.org/wiki/Список_MIME-типов.
			Если СтрНайти(ТипСодержимого, "text/") = 1 ИЛИ СтрНайти(ТипСодержимого, "/javascript")
				ИЛИ СтрНайти(ТипСодержимого, "+xml") ИЛИ СтрНайти(ТипСодержимого, "/xml") <> 0 
				ИЛИ СтрНайти(ТипСодержимого, "/json") <> 0 Тогда
				ПолучитьКакДвоичныеДанные = Ложь;
			ИначеЕсли СтрНайти(ТипСодержимого, "image/") = 1 ИЛИ СтрНайти(ТипСодержимого, "video/") = 1 
				ИЛИ СтрНайти(ТипСодержимого, "application/") = 1 ИЛИ СтрНайти(ТипСодержимого, "audio/") = 1 Тогда
				// Если содержимое полученного ответа представляет собой изображение, видео, приложение,
				// возвращаем двоичные данные, так как возвращать в виде строки не имеет смысла.
				ПолучитьКакДвоичныеДанные = Истина;
			КонецЕсли;
			// Некоторые сервера возвращают в типе содержимого имя отданного файла, например image/png; name="Имя файла.png".
			// или отдают в заголовке Content-Disposition: attachment; filename=Имя файла.png (http://www.http11.ru/post.php?post=2).
			Если ОтветHTTP.Заголовки["Content-Disposition"] <> Неопределено Тогда
				ТипСодержимого = ОтветHTTP.Заголовки["Content-Disposition"];
			КонецЕсли;
			ТипСодержимого = СтрЗаменить(СтрЗаменить(ТипСодержимого, """", ""), "'", "");
			
			// В ключе filename*=UTF-8'' содержится url-кодированное имя файла.
			ПозицияИмениФайла = СтрНайти(ТипСодержимого, "filename*=UTF-8");
			Если ПозицияИмениФайла <> 0 Тогда
				ИмяФайлаОтветаКодированное 	= Сред(ТипСодержимого, ПозицияИмениФайла + СтрДлина("filename*=UTF-8"));
				ПозицияДвоеточия 			= СтрНайти(ИмяФайлаОтветаКодированное, ";");
				Если ПозицияДвоеточия <> 0 Тогда
					ИмяФайлаОтветаКодированное = Лев(ИмяФайлаОтветаКодированное, ПозицияДвоеточия - 1);
				КонецЕсли;
			КонецЕсли;
			
			// В ключе filename= содержится обычное имя файла.
			ПозицияИмениФайла = СтрНайти(ТипСодержимого, "name=");
			Если ПозицияИмениФайла <> 0 Тогда
				ИмяФайлаОтвета 		= Сред(ТипСодержимого, ПозицияИмениФайла + СтрДлина("name="));
				ПозицияДвоеточия 	= СтрНайти(ИмяФайлаОтвета, ";");
				Если ПозицияДвоеточия <> 0 Тогда
					ИмяФайлаОтвета = Лев(ИмяФайлаОтвета, ПозицияДвоеточия - 1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовкиHTTP = ОтветHTTP.Заголовки;
	// Добавляем в заголовки ответа код состояния (ответа) HTTP-сервера и имя файла содержимого, если есть.
	ЗаголовкиHTTP.Вставить("StatusCode", ОтветHTTP.КодСостояния);
	
	Если ЗначениеЗаполнено(ИмяФайлаОтвета) Тогда 
		ЗаголовкиHTTP.Вставить("FileName", ИмяФайлаОтвета); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФайлаОтветаКодированное) Тогда
		ЗаголовкиHTTP.Вставить("EncodeFileName", ИмяФайлаОтветаКодированное);
	КонецЕсли;
	
	Если ОшибкаЗапроса ИЛИ НЕ ПолучитьКакДвоичныеДанные Тогда 
		Возврат ОтветHTTP.ПолучитьТелоКакСтроку(); 
	КонецЕсли;
	
	Возврат ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
	
	#КонецЕсли
	
КонецФункции // ПолучитьСодержимоеВебАдреса()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРезультат(Результат, Источник)
	
	Ссылка = "";
	Для Индекс = 0 По 3 Цикл
		Ссылка = Ссылка + Источник.Item(Индекс);
	КонецЦикла;
	
	Результат.Ссылка	= Ссылка;
	Результат.Система	= 1;
	Результат.Расширение= Источник.Item(3);	
	// Результат.Ширина	= Источник.Item(5);
	// Результат.Высота	= Источник.Item(4);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРасширениеФайла(РасширениеФайла) Экспорт
	
	пРасширениеФайла = ВРЕГ(РасширениеФайла);
	Если пРасширениеФайла = "JPEG" ИЛИ пРасширениеФайла = "JPG" ИЛИ пРасширениеФайла = "PNG" 
		ИЛИ пРасширениеФайла = "GIF" Тогда
		Возврат РасширениеФайла;
	КонецЕсли;	
	
	Если СтрНайти(пРасширениеФайла, "JPEG") > 0 Тогда 
		Возврат "JPEG";
	ИначеЕсли СтрНайти(пРасширениеФайла, "JPG") > 0 Тогда 
		Возврат "JPG";
	ИначеЕсли СтрНайти(пРасширениеФайла, "PNG") > 0 Тогда 
		Возврат "PNG";
	ИначеЕсли СтрНайти(пРасширениеФайла, "GIF") > 0 Тогда 
		Возврат "GIF";
	ИначеЕсли  СтрНайти(пРасширениеФайла,"BMP") > 0 Тогда 
		Возврат "BMP";
	КонецЕсли;
	
	Возврат "JPG";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Функция переводит текст из Unicode в UTF8.
//
Функция ТекстUnicodeToUTF8(Текст) Экспорт
	
	СимволыUTF8 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~_-.";
	Результат 	= "";
	
	Для НомерСимвола = 1 По СтрДлина(Текст) Цикл		
		ТекСимвол = Сред(Текст, НомерСимвола, 1);		
		Если ТекСимвол = " " Тогда			
			Результат = Результат + "%20";			
		ИначеЕсли СтрНайти(СимволыUTF8, ТекСимвол) > 0 Тогда			
			Результат = Результат + ТекСимвол;			
		Иначе		
			
			КодСимвола = КодСимвола(ТекСимвол);
			
			Если КодСимвола < 128 Тогда
				Результат = Результат + "%" + ЧислоDecToHex(КодСимвола);
			Иначе				
				Делитель 	= 32;	
				ГруппаБайт 	= 8;	
				HEX 		= "";				
				
				Пока Делитель > 4 Цикл					
					Остаток 	= КодСимвола % 64;					
					HEX 		= "%" + ЧислоDecToHex(128 + Остаток) + HEX;					
					Множитель 	= Цел(КодСимвола / 64);					
					Если Множитель < Делитель Тогда
						HEX = "%" + ЧислоDecToHex((ГруппаБайт-2) * Делитель + Множитель) + HEX;
						Прервать;
					КонецЕсли;					
					Делитель 	= Делитель / 2;
					ГруппаБайт 	= ГруппаБайт * 2;					
				КонецЦикла; 
				
				Результат = Результат + HEX;
				
			КонецЕсли;			
		КонецЕсли;		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Функция переводит число из формата Dec в формат Hex.
//
Функция ЧислоDecToHex(Знач Число)	
	
	ЧислаHex 	= "0123456789ABCDEF";
	Результат 	= "";
	
	Для Цифр = 1 По 2 Цикл
		ТекЦифра	= Число % 16;
		Число 		= Цел(Число / 16);
		Результат 	= Сред(ЧислаHex, ТекЦифра + 1, 1) + Результат;
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УдалитьЗапрещенныеСимволы(Знач мСтрокаПоиска, СимволЗамены = " ") Экспорт
	
	мСтрокаПоиска 			= Лев(мСтрокаПоиска, 50);
	Буквы 					= "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Цифры 					= "0123456789";
	ДополнительныеСимволы 	= ".,-_ ()";
	ВсеСимволы 				= Буквы + Цифры + ДополнительныеСимволы;	
	Результат				= "";
	
	Для Счетчик = 1 По СтрДлина(мСтрокаПоиска) Цикл
		Символ = Сред(мСтрокаПоиска, Счетчик, 1);
		Если СтрНайти(ВсеСимволы, НРег(Символ))=0 Тогда
			Результат = Результат + СимволЗамены;
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Процедура НайтиХТМЛ(ТекстПоиска)
	
	ХТМЛДокумент 			= "https://www.google.ru/search?q=" + ТекстUnicodeToUTF8(ТекстПоиска) + "&tbm=isch";	
	ЭтаФорма.ТекущийЭлемент = Элементы.ХТМЛДокумент;
	
КонецПроцедуры	

&НаКлиенте
Процедура ХТМЛДокументДокументСформирован(Элемент)
	
	Если Элементы.ХтмлДокумент.Документ.readyState = "complete" Тогда
		
		ОчиститьЭлемент("mngb");
		ОчиститьЭлемент("xjsc");
		ОчиститьЭлемент("searchform");
		ОчиститьЭлемент("rshdr");
		ОчиститьЭлемент("mngb");
		ОчиститьЭлемент("taw");
		ОчиститьЭлемент("fbar");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЭлемент(ИД)
	
	мЭлемент = Элементы.ХтмлДокумент.Документ.getElementById(ИД);
	Если мЭлемент <> Неопределено Тогда
		мЭлемент.innerHTML = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХТМЛДокументПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Попытка		
		СтруктураURL = РазложитьАдресХТМЛ(ДанныеСобытия.Href);		
		Если СтруктураURL <> Неопределено Тогда
			АдресКартинки = "";
			Если СтруктураURL.Свойство("imgurl", АдресКартинки) Тогда
				
				// двойное декодирование - особенность ссылок Google
				АдресКартинки 	= ДекодироватьURL(ДекодироватьURL(АдресКартинки));				
				СодержимоеАдреса= ПолучитьСодержимоеВебАдреса(АдресКартинки);
				
				// при неудаче получим из кэша Google
				Если ТипЗнч(СодержимоеАдреса) <> Тип("ДвоичныеДанные") Тогда
					СодержимоеАдреса = ПолучитьСодержимоеВебАдреса(ДанныеСобытия.Element.src);
				КонецЕсли;				
				
				Если ТипЗнч(СодержимоеАдреса) = Тип("ДвоичныеДанные") Тогда					
					Результат 					= ПолучитьСтруктуруРезультата();
					Результат.Ссылка 			= АдресКартинки;					
					мКартинка 					= Новый Картинка(СодержимоеАдреса);
					Результат.Расширение 		= ПолучитьРасширениеФайла(Результат.Ссылка);
					ПолеИмениФайла				= Неопределено;
					#Если Не ВебКлиент Тогда
						ПолеИмениФайла	= ПолучитьИмяВременногоФайла(Результат.Расширение);					
					#КонецЕсли	
					Результат.ИмяВременногоФайла= ПолеИмениФайла;
					Результат.Картинка			= мКартинка;					
					Закрыть(Результат);
				Иначе
					ЭтаФорма.Закрыть();
					ПоказатьПредупреждение(,
						НСтр("ru = 'Не удалось получить изображение, возможные причины:					
	                          |• Нет подключения к Интернету;
							  |• Для серверной ИБ на компьютере сервера отсутствует возможность доступа в Интернет;
	                          |• На веб-узле возникли неполадки;
	                          |• Брандмауэр или другое промежуточное ПО (антивирусы и т.п.) блокируют попытки программы подключиться к Интернету;
	                          |• Подключение к Интернету выполняется через прокси-сервер, но его параметры не заданы или не верно заданы в программе;												  
	                          |• Установлен повышенный уровень безопасности в свойствах браузера.'"));
				КонецЕсли;				
			Иначе				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ЭтаФорма.Закрыть();
		ПоказатьПредупреждение(,
			НСтр("ru = 'Не удалось получить изображение, возможные причины:					
                  |• Нет подключения к Интернету;
				  |• Для серверной ИБ на компьютере сервера отсутствует возможность доступа в Интернет;
                  |• На веб-узле возникли неполадки;
                  |• Брандмауэр или другое промежуточное ПО (антивирусы и т.п.) блокируют попытки программы подключиться к Интернету;
                  |• Подключение к Интернету выполняется через прокси-сервер, но его параметры не заданы или не верно заданы в программе;									  
                  |• Установлен повышенный уровень безопасности в свойствах браузера.'"));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ДекодироватьURL(URL, WindowsFileURI = Истина)
	
	ДлинаСтроки 	= СтрДлина(URL);
	Инд 			= 1;
	Результат 		= "";
	ПолныйКод 		= 0;
	ОсталосьСимволов= 0;
	
	Пока Инд <= ДлинаСтроки Цикл
		
		Код = КодСимвола(URL, Инд);
		
		Если Код = 37 Тогда
			// Символ(37) = "%".
			Код = Из16ВЧисло(Сред(URL, Инд+1, 2));
			Инд = Инд + 2;
		ИначеЕсли ОсталосьСимволов = 0 Тогда
			Если (Код = 43) И (НЕ WindowsFileURI) Тогда
				// Символ(43) = "+".
				Код = 32; // Символ(32) = " " (пробел).
			КонецЕсли;
			Результат = Результат + Символ(Код);
			Инд = Инд + 1;
			Продолжить;
		КонецЕсли;
		
		Если Код <= 127 Тогда
			// Код = 0b0ххххххх.
			Результат = Результат + Символ(Код);
		ИначеЕсли Код <= 191 Тогда
			// Код = 0b10хххххх.
			ПолныйКод = (ПолныйКод * 64) + (Код % 64); // shl(ПолныйКод, 6) + (Код & 0x3F).
			ОсталосьСимволов = ОсталосьСимволов - 1;
			Если ОсталосьСимволов = 0 Тогда
				Результат = Результат + Символ(ПолныйКод);
			КонецЕсли;
		ИначеЕсли Код <= 223 Тогда
			// Код = 0b110ххххх.
			ПолныйКод = Код % 32; // Код & 0x1F.
			ОсталосьСимволов = 1;
		ИначеЕсли Код <= 239 Тогда
			// Код = 0b1110хххх.
			ПолныйКод = Код % 16; // Код & 0x0F.
			ОсталосьСимволов = 2;
		ИначеЕсли Код <= 247 Тогда
			// Код = 0b11110ххх.
			ПолныйКод = Код % 8; // Код & 0x07.
			ОсталосьСимволов = 3;
		ИначеЕсли Код <= 251 Тогда
			// Код = 0b111110хх.
			ПолныйКод = Код % 4; // Код & 0x03.
			ОсталосьСимволов = 4;
		ИначеЕсли Код <= 253 Тогда
			// Код = 0b1111110х.
			ПолныйКод = Код % 2; // Код & 0x01.
			ОсталосьСимволов = 5;
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция Из16ВЧисло(Знач Значение)
	
	Результат = 0;
	Множитель = 1;
	Пока Значение <> "" Цикл
		Результат= Результат + Множитель * (СтрНайти("0123456789ABCDEF", Прав(Значение,1))-1);
		Множитель= Множитель * 16;
		Значение = Лев(Значение, СтрДлина(Значение)-1);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОжиданияПриОткрытииФормы()
	
	НачатьПоискХТМЛ(Неопределено);
	
КонецПроцедуры

#КонецОбласти