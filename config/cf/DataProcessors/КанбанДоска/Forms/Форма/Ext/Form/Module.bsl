
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаданияСервер.ЗаполнитьСписокВыбораИсполнителей(Элементы.Исполнитель.СписокВыбора);	
	ЗаданияСервер.ЗаполнитьСписокВыбораСтатусовЗаданий(Элементы.Статус.СписокВыбора);
	
	ВосстановитьНастройкиОтборов();
	ОбновитьПредставлениеПериода();	
	Попытка
		ОбновитьЭлементыОтборов(Ложь);	
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьВидимость();	
	ОбновитьКанбанДоску();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
    Если ИмяСобытия = "ОбновитьФормуСпискаЗаданий"
        ИЛИ ИмяСобытия = "Запись_ИсточникГруппыКанбанДоски"
        ИЛИ ИмяСобытия = "Запись_ИсточникКанбанДоски" Тогда
		
		Если ИмяСобытия = "ОбновитьФормуСпискаЗаданий"
			И АвтообновлениеКанбанПриИзмененииЗаданий = Ложь Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ОбновитьКанбанДоску();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
	
		СохранитьНастройкиОтборов();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КанбанПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Anchor = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрСсылки = ДанныеСобытия.Href;
	
	Если НЕ ПроверитьПраваДостуна() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нет прав на изменение задания'"));
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ПараметрСсылки, "movetotask_") > 0 Тогда
		НавигационнаяСсылка_moveto(ПараметрСсылки);
	ИначеЕсли СтрНайти(ПараметрСсылки, "change_") > 0 Тогда
		НавигационнаяСсылка_change(ПараметрСсылки);
	ИначеЕсли СтрНайти(ПараметрСсылки, "sendmess_") > 0 Тогда
		НавигационнаяСсылка_sendmess(ПараметрСсылки);
	ИначеЕсли СтрНайти(ПараметрСсылки, "includesprint_") > 0 Тогда
		НавигационнаяСсылка_includesprint(ПараметрСсылки);
	ИначеЕсли СтрНайти(ПараметрСсылки, "excludesprint_") > 0 Тогда
		НавигационнаяСсылка_excludesprint(ПараметрСсылки);
    ИначеЕсли СтрНайти(ПараметрСсылки, "opengroupkanbanformlist") > 0 Тогда
        Структура = Новый Структура;
        Структура.Вставить("Ключ", Объект.КанбанДоска);
		ОткрытьФорму("Справочник.КанбанДоски.ФормаОбъекта", Структура);
	ИначеЕсли Лев(ПараметрСсылки, 4) = "http" ИЛИ СтрНайти(ПараметрСсылки, "e1cib") Тогда
		Если СтрНайти(ПараметрСсылки, "data") > 0 Тогда
			НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/data"));
			Если НомерНачало > 0 Тогда
				Попытка
					Адрес = Сред(ПараметрСсылки, НомерНачало);	
					ПерейтиПоНавигационнойСсылке(Адрес); 
				Исключение					
					Возврат;
				КонецПопытки;	
			Иначе
				НачатьЗапускПриложения(,ПараметрСсылки);
			КонецЕсли;	
		Иначе	
			НачатьЗапускПриложения(,ПараметрСсылки);
		КонецЕсли;
	ИначеЕсли Лев(ПараметрСсылки, 6) = "e1c://" Тогда
		НавигационнаяСсылка_e1c(ПараметрСсылки);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(ПараметрСсылки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	УдалитьЭлементВТаблицеОтборов(ТаблицаОтборов, "ОтборыГруппыСтатус");
	Если Статус <> "" Тогда
		ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, Статус, "ОтборыГруппыСтатус");
	КонецЕсли;
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияЭтапаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	
	ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, ВыбранноеЗначение, "ОтборыГруппыСостоянияЭтапа");		
	ОбновитьЭлементыИУстановитьОтбор();	
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КанбанДоскаПриИзменении(Элемент)
	
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СпринтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Спринты") Тогда
		ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, ВыбранноеЗначение, "ОтборыГруппыСпринт");		
		ОбновитьЭлементыИУстановитьОтбор();
		Обновить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпринтАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.Спринт.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	МассивТипов = СформироватьСписокСпринтов();
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, ВыбранноеЗначение, "ОтборыГруппыКлиент");
		ОбновитьЭлементыИУстановитьОтбор();
		Обновить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		СтандартнаяОбработка = Ложь;		
		ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, ВыбранноеЗначение, "ОтборыГруппыИнициатор");
		ОбновитьЭлементыИУстановитьОтбор();
		Обновить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, ВыбранноеЗначение, "ОтборыГруппыТег");
	ОбновитьЭлементыИУстановитьОтбор();
	Обновить(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаЗаданийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, ВыбранноеЗначение, "ОтборыГруппыЗаданий");
	ОбновитьЭлементыИУстановитьОтбор();
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;	
	Статус 					= "";
	СтатусПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	УдалитьЭлементВТаблицеОтборов(ТаблицаОтборов, "ОтборыГруппыИсполнителей");
	Если Исполнитель <> "" Тогда 
		ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, Исполнитель, "ОтборыГруппыИсполнителей");
	КонецЕсли;
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	Исполнитель 			= "";
	ИсполнительПриИзменении(Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, ВыбранноеЗначение, "ОтборыГруппыМестоХранения");
	ОбновитьЭлементыИУстановитьОтбор();
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, ВыбранноеЗначение, "ОтборыГруппыКарточкаНоменклатуры");
	ОбновитьЭлементыИУстановитьОтбор();
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		НайденныйЭлемент = Элементы.СтрокаПоиска.СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.СтрокаПоиска.СписокВыбора.Удалить(НайденныйЭлемент);
		КонецЕсли;
		Элементы.СтрокаПоиска.СписокВыбора.Вставить(0, СтрокаПоиска);
		Если Элементы.СтрокаПоиска.СписокВыбора.Количество() > 10 Тогда
			Элементы.СтрокаПоиска.СписокВыбора.Удалить(10);
		КонецЕсли;
	КонецЕсли;
	
	УдалитьЭлементВТаблицеОтборов(ТаблицаОтборов, "ОтборыСтрокаПоиска");
	Если НЕ ПустаяСтрока(СтрокаПоиска) Тогда
		ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, СтрокаПоиска, "ОтборыСтрокаПоиска");
	КонецЕсли;
	
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, ВыбранноеЗначение, "ОтборыГруппыПроекты");
	ОбновитьЭлементыИУстановитьОтбор();
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект);	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ОтборПериод;	
	Диалог.Показать(Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(НовыйПериод, Параметры) Экспорт
	
	Если ТипЗнч(НовыйПериод) = Тип("СтандартныйПериод") Тогда
		ОтборПериод = НовыйПериод;
	ИначеЕсли ТипЗнч(НовыйПериод) = Тип("Дата") Тогда
		ОтборПериод.ДатаОкончания = НовыйПериод;
	Иначе
		ОтборПериод = Неопределено;
	КонецЕсли;	
	
	УдалитьЭлементВТаблицеОтборов(ТаблицаОтборов, "ОтборыПериоды");
	Если ОтборПериод <> Неопределено И ОтборПериод.ДатаОкончания <> Дата(1, 1, 1) Тогда 
		ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, ОтборПериод, "ОтборыПериоды");
	КонецЕсли;

	ОбновитьПредставлениеПериода();
	Обновить(Неопределено);
	
	#Если ВебКлиент Тогда
		ОбновитьОтображениеДанных();
	#КонецЕсли 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьОтображениеПанелиОтборов(Команда)
	
	ПанельОтборовСкрыта = Не ПанельОтборовСкрыта;
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСпринт(Команда)
		
	МассивВыделенныхСтрок = Новый Массив;
	МассивВыделенныхСтрок.Добавить(ТекущееЗадание);
		
	АктивныеСпринты = ЗаданияСервер.АктивныеСпринты();
	
	Если АктивныеСпринты.Количество() = 1 Тогда
	
		ЗаданияСервер.ВключитьЗаданияВСпринт(МассивВыделенныхСтрок, АктивныеСпринты[0]);
		Обновить(Неопределено);
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура("МассивВыделенныхСтрок", МассивВыделенныхСтрок);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборСпринта", ЭтаФорма, ДополнительныеПараметры);
		
		Отбор = Новый Структура("Выполнено", Ложь);
		ПараметрыОткрытияФормы = Новый Структура("Отбор, РежимВыбора", Отбор, Истина); 
		ОткрытьФорму("Справочник.Спринты.ФормаВыбора", ПараметрыОткрытияФормы, ЭтаФорма,,,,ОповещениеОЗакрытии, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСпринта(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданияСервер.ВключитьЗаданияВСпринт(ДопПараметры.МассивВыделенныхСтрок, РезультатЗакрытия);
	Оповестить("ОбновитьФормуСпискаЗаданий");
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьКанбанДоску();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаЭтап(Команда)
	
	ДокументЗадание = ТекущееЗадание;
	Если ДокументЗадание <> Неопределено И ТипЗнч(ДокументЗадание) = Тип("ДокументСсылка.Задание") Тогда
		
		Если ИзменениеЗавершенногоЗаданияЗапрещено(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, Нстр("ru = 'Задание завершено. Изменение этапа в задании не возможно.'"));
			Возврат;
		КонецЕсли;	
		
		Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя изменить этап у данного задания.'"));
			Возврат;
		КонецЕсли;		
		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПеревестиНаЭтапЗавершение", ЭтотОбъект, ДокументЗадание);
		ПараметрыФормы		= Новый Структура;
		ПараметрыФормы.Вставить("СсылкаНаОбъект", ДокументЗадание);
		ПараметрыФормы.Вставить("ЗаписатьОбъект", Истина);
		ПараметрыФормы.Вставить("ПереданаСсылка", Истина);
		ОткрытьФорму("ОбщаяФорма.ФормаПереводаЗаданияНаЭтап", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаЭтапЗавершение(Результат, ДополнительныеПараметры) Экспорт
			
	Если Результат <> Неопределено И Результат.ВыполненПеревод Тогда
		Оповестить("ОбновитьФормуСпискаЗаданий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителя(Команда)
	
	ДокументЗадание = ТекущееЗадание;
	Если ДокументЗадание <> Неопределено И ТипЗнч(ДокументЗадание) = Тип("ДокументСсылка.Задание") Тогда
		
		Если ИзменениеЗавершенногоЗаданияЗапрещено(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, Нстр("ru = 'Задание завершено. Изменение исполнителя в задании не возможно.'"));
			Возврат;
		КонецЕсли;	
		
		Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ДокументЗадание) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя изменить исполнителя у данного задания.'"));
			Возврат;
		КонецЕсли;		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИсполнителяФормаЗавершение", ЭтотОбъект, ДокументЗадание);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИсполнителя", Новый Структура("СсылкаНаОбъект", ДокументЗадание), ЭтаФорма,,,, 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьИсполнителяИзДиалогаНаСервере(Знач ЗаданиеСсылка, Знач Результат)
	
	Если ИзменениеЗавершенногоЗаданияЗапрещено(ЗаданиеСсылка) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(Нстр("ru = '%1 завершено. Изменение исполнителя в задании не возможно.'"), Результат));
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьИсполнителяПриПереводеНаЭтап(ЗаданиеСсылка) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Нельзя изменить текущего исполнителя у %1'"), Результат));
		Возврат;
	КонецЕсли;
    
    НачатьТранзакцию();
    Попытка
    	ЗаданиеОбъект 						= ЗаданиеСсылка.ПолучитьОбъект();
    	ЗаданиеОбъект.ТекущийИсполнитель 	= Результат;	
    	ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
    КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителяФормаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда		
		ВыбратьИсполнителяИзДиалогаНаСервере(ДополнительныеПараметры, Результат);			
		Оповестить("ОбновитьФормуСпискаЗаданий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителяЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = "ВыбратьПользователяИзСправочника" Тогда
			ВыбратьИсполнителяИзСправочника();
		ИначеЕсли
			ВыбранныйЭлемент.Значение = "НеВыбран" Тогда ИсполнительНеВыбран();
		Иначе
			СтруктураПользователя = Новый Структура;
			СтруктураПользователя.Вставить("Имя", ВыбранныйЭлемент.Значение);
			ВыбратьИсполнителяНаСервере(СтруктураПользователя);
		КонецЕсли;	
	КонецЕсли;
	Оповестить("ОбновитьФормуСпискаЗаданий");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьИзСпринта(Команда)
		
	МассивВыделенныхСтрок = Новый Массив;
	
	Если Команда <> Неопределено Тогда
		
		Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выделите задачи для исключения из спринтов'"));
			Возврат;	
		КонецЕсли;	
		
		МассивВыделенныхСтрок = Элементы.Список.ВыделенныеСтроки;
		Если МассивВыделенныхСтрок.Количество() = 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выделите задачи для исключения из спринтов'"));
			Возврат;
		КонецЕсли;	
	Иначе
		МассивВыделенныхСтрок.Добавить(ТекущееЗадание);
	КонецЕсли;
	
	ЗаданияСервер.ИсключитьЗаданияИзСпринтов(МассивВыделенныхСтрок);
	Оповестить("ОбновитьФормуСпискаЗаданий");
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеФильтры(Команда)
	
	ОчиститьЗначенияОтборов();	
	ОбновитьЭлементыИУстановитьОтбор();	
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	ОткрытьФорму("Документ.Задание.ФормаОбъекта");
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьИсполнителяНаСервере(Команда)
	
	// Выбор исполнителя, определяем кто будет исполнителем.
	УИД = Сред(Команда.Имя, 13);
	УИД = Лев(УИД, 8) + "-" + Сред(УИД, 9, 4) + "-" + Сред(УИД, 13, 4) + "-" + Сред(УИД, 17, 4) + "-" + Сред(УИД, 21);
	
	Структура = ПолучитьСтруктуруИсполнителяПоУИД(УИД);
	
	НачатьТранзакцию();
    Попытка
        ТекущееЗаданиеОбъект = ТекущееЗадание.ПолучитьОбъект();
		ТекущееЗаданиеОбъект.Заблокировать();
    	ТекущееЗаданиеОбъект.ТекущийИсполнитель = Структура.Исполнитель;
    	ТекущееЗаданиеОбъект.Записать();
    	ТекущееЗадание = ТекущееЗаданиеОбъект.Ссылка;
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
	    ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка изменения задания. Попробуйте позже.'"));		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеПриИзмененииЗаданий(Команда)
	
	Элементы.ФормаАвтообновлениеПриИзмененииЗаданий.Пометка = 
		НЕ Элементы.ФормаАвтообновлениеПриИзмененииЗаданий.Пометка;
	АвтообновлениеКанбанПриИзмененииЗаданий = Элементы.ФормаАвтообновлениеПриИзмененииЗаданий.Пометка;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьВидимость()
	
	Элементы.Отборы.Видимость = НЕ ПанельОтборовСкрыта;
	ИзменитьОтображениеПанелиОтборов = Команды.Найти("ИзменитьОтображениеПанелиОтборов");
	Если ПанельОтборовСкрыта Тогда
		Элементы.ИзменитьОтображениеПанелиОтборов.Картинка = БиблиотекаКартинок.СтрелкаВправо;
		ИзменитьОтображениеПанелиОтборов.Подсказка = НСтр("ru = 'Показать панель отборов'");
		ИзменитьОтображениеПанелиОтборов.Заголовок = НСтр("ru = 'Показать панель отборов'");
	Иначе
		Элементы.ИзменитьОтображениеПанелиОтборов.Картинка = БиблиотекаКартинок.СтрелкаВлево;
		ИзменитьОтображениеПанелиОтборов.Подсказка = НСтр("ru = 'Скрыть панель отборов'");
		ИзменитьОтображениеПанелиОтборов.Заголовок = НСтр("ru = 'Скрыть панель отборов'");
	КонецЕсли;
	Элементы.ФормаАвтообновлениеПриИзмененииЗаданий.Пометка = АвтообновлениеКанбанПриИзмененииЗаданий;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКанбанДоску()
	
	Заголовок		= Строка(Объект.КанбанДоска);
	Объект.Канбан	= ЗаданияСервер.ВывестиКанбанДоску(Объект.КанбанДоска, Объект.Канбан, ТаблицаОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_e1c(ПараметрСсылки)
	
	Если СтрНайти(ПараметрСсылки, "e1cib") > 0 Тогда  
		Если СтрНайти(ПараметрСсылки, "data") > 0 Тогда
			НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/data"));
			Если НомерНачало > 0 Тогда
				Попытка
					Адрес = Сред(ПараметрСсылки, НомерНачало);	
					ПерейтиПоНавигационнойСсылке(Адрес); 
				Исключение					
					Возврат;
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_moveto(ПараметрСсылки)
	
	Если СтрНайти(ПараметрСсылки, "e1cib") > 0 Тогда  
		Если СтрНайти(ПараметрСсылки, "data") > 0 Тогда
			НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/data"));
			Если НомерНачало > 0 Тогда
				Попытка
					Адрес = Сред(ПараметрСсылки, НомерНачало);
					ТекущееЗадание = УправлениеITОтделом8УФ.ПолучитьСсылкуИзНавигационной(ПараметрСсылки);
					ПеревестиНаЭтап(Неопределено);
				Исключение					
					Возврат;
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_change(ПараметрСсылки)
	
	Если СтрНайти(ПараметрСсылки, "e1cib") > 0 Тогда  
		Если СтрНайти(ПараметрСсылки, "data") > 0 Тогда
			НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/data"));
			Если НомерНачало > 0 Тогда
				Попытка
					Адрес = Сред(ПараметрСсылки, НомерНачало);
					ТекущееЗадание = УправлениеITОтделом8УФ.ПолучитьСсылкуИзНавигационной(ПараметрСсылки);
					ВыбратьИсполнителя(Неопределено);
				Исключение					
					Возврат;
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_sendmess(ПараметрСсылки)
	
	Если СтрНайти(ПараметрСсылки, "e1cib") > 0 Тогда  
		Если СтрНайти(ПараметрСсылки, "data") > 0 Тогда
			НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/data"));
			Если НомерНачало > 0 Тогда
				Попытка
					Адрес 					= Сред(ПараметрСсылки, НомерНачало);
					ТекущееЗадание 			= УправлениеITОтделом8УФ.ПолучитьСсылкуИзНавигационной(ПараметрСсылки);									
					ОписаниеОповещения      = Новый ОписаниеОповещения("ПослеОбработкиНажатияКомментарииКанбан", ЭтотОбъект);					
					ОбъектЗадание           = Новый Структура("Ссылка", ТекущееЗадание);
					ПараметрыКоманды 		= Новый Структура("Параметры", Новый Структура("name", "comment")); 
					КомментарииКлиент.ОбработатьАдресСсылки_create(ПараметрыКоманды, ОписаниеОповещения, 
						Новый Структура("Объект", ОбъектЗадание));					
				Исключение					
					Возврат;
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиНажатияКомментарииКанбан(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить("ОбновитьФормуСпискаЗаданий");
	
КонецПроцедуры	

&НаКлиенте
Процедура НавигационнаяСсылка_includesprint(ПараметрСсылки)
	
	Если СтрНайти(ПараметрСсылки, "e1cib") > 0 Тогда  
		Если СтрНайти(ПараметрСсылки, "data") > 0 Тогда
			НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/data"));
			Если НомерНачало > 0 Тогда
				Попытка
					Адрес = Сред(ПараметрСсылки, НомерНачало);
					ТекущееЗадание = УправлениеITОтделом8УФ.ПолучитьСсылкуИзНавигационной(ПараметрСсылки);
					ДобавитьВСпринт(Неопределено);
				Исключение					
					Возврат;
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_excludesprint(ПараметрСсылки)
	
	Если СтрНайти(ПараметрСсылки, "e1cib") > 0 Тогда  
		Если СтрНайти(ПараметрСсылки, "data") > 0 Тогда
			НомерНачало = СтрНайти(НРег(ПараметрСсылки), НРег("e1cib/data"));
			Если НомерНачало > 0 Тогда
				Попытка
					Адрес = Сред(ПараметрСсылки, НомерНачало);
					ТекущееЗадание = УправлениеITОтделом8УФ.ПолучитьСсылкуИзНавигационной(ПараметрСсылки);
					ИсключитьИзСпринта(Неопределено);
				Исключение					
					Возврат;
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, ВыбранноеЗначение, "ОтборыГруппыОрганизация");
	ОбновитьЭлементыИУстановитьОтбор();
	Обновить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, Знач ОтборСсылка, Знач ГруппаЭлементов)
	
	Таблица = ТаблицаОтборов;
	ЗаданияСервер.ДобавитьЭлементВТаблицуОтборов(Таблица, ОтборСсылка, ГруппаЭлементов);
	ТаблицаОтборов.Очистить();
	Для Каждого Строки Из Таблица Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОтборов.Добавить(), Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементВТаблицеОтборов(ТаблицаОтборов, Знач ГруппаЭлементов)
	
	Таблица = ТаблицаОтборов;
	ЗаданияСервер.УдалитьЭлементВТаблицеОтборов(Таблица, ГруппаЭлементов);
	ТаблицаОтборов.Очистить();
	Для Каждого Строки Из Таблица Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОтборов.Добавить(), Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеЗавершенногоЗаданияЗапрещено(Знач ЗаданиеСсылка)
	
	Результат = Ложь;
	Если ЗаданиеСсылка.Завершено И НЕ УправлениеITОтделом8УФПовтИсп.ПолучитьКонстанту("ИзменятьЗавершенныеЗадания") Тогда
		Результат = Истина; 
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьИсполнителяПриПереводеНаЭтап(Знач Задание)
			
	Возврат ЗаданияСервер.ПравоРедактированияТекущийПользователь(Задание);
	
КонецФункции

&НаКлиенте
Процедура ВыбратьИсполнителяИзСправочника()
	// Выбираем исполнителя из справочника "Пользователи"
	
	Структура = Новый Структура();
	Структура.Вставить("ЗакрыватьПриВыборе",  Истина);
	Структура.Вставить("РежимВыбора",         Истина);
	
	Результат = Неопределено;
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Структура, ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ВыбратьИсполнителяИзСправочникаЗавершение", ЭтаФорма),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсполнителяИзСправочникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда        
		ВыбратьИсполнителяИзСправочникаЗавершениеНаСервере(Результат);        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНеВыбран()	
	
	ИсполнительНеВыбранНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИсполнительНеВыбранНаСервере()
	
	НачатьТранзакцию();
    Попытка
        ТекущееЗаданиеОбъект = ТекущееЗадание.ПолучитьОбъект();
		ТекущееЗаданиеОбъект.Заблокировать();
    	ТекущееЗаданиеОбъект.ТекущийИсполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
    	ТекущееЗаданиеОбъект.Записать();
    	ТекущееЗадание = ТекущееЗаданиеОбъект.Ссылка;
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
	    ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка изменения задания. Попробуйте позже.'"));
	КонецПопытки;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруИсполнителяПоУИД(Знач УИД)
	
	ИсполнительСсылка = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	
	Результат = Новый Структура();
	Результат.Вставить("Исполнитель", ИсполнительСсылка);
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВыбратьИсполнителяИзСправочникаЗавершениеНаСервере(Результат);
	
	НачатьТранзакцию();
    Попытка
        ТекущееЗаданиеОбъект 					= ТекущееЗадание.ПолучитьОбъект(); 
		ТекущееЗаданиеОбъект.Заблокировать();
    	ТекущееЗаданиеОбъект.ТекущийИсполнитель = Результат;	
    	ТекущееЗаданиеОбъект.Записать();
    	ТекущееЗадание = ТекущееЗаданиеОбъект.Ссылка;
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
	    ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка изменения задания. Попробуйте позже.'"));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыИУстановитьОтбор()
	
	ОбновитьПредставлениеПериода();	
	ОбновитьЭлементыОтборов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеПериода()
	
	Если НЕ ЗначениеЗаполнено(ОтборПериод) ИЛИ (НЕ ЗначениеЗаполнено(ОтборПериод.ДатаНачала) 
		И НЕ ЗначениеЗаполнено(ОтборПериод.ДатаОкончания)) Тогда
		
		ПредставлениеПериода = НСтр("ru = 'Период: за все время'");
		
	Иначе
		
		ДатаОкончанияПериода = ?(ЗначениеЗаполнено(ОтборПериод.ДатаОкончания), КонецДня(ОтборПериод.ДатаОкончания), 
			ОтборПериод.ДатаОкончания);
			
		Если ДатаОкончанияПериода < ОтборПериод.ДатаНачала Тогда			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбрана дата окончания периода, которая меньше даты начала'"));			
			ПредставлениеПериода = СтрШаблон(НСтр("ru = 'с %1'"), Формат(ОтборПериод.ДатаНачала, "ДФ=dd.MM.yyyy"));
		Иначе
			ПредставлениеПериода = СтрШаблон(НСтр("ru = 'за %1'"), НРег(ПредставлениеПериода(ОтборПериод.ДатаНачала,
				ДатаОкончанияПериода)));
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	ИмяКлючаОбъекта = СтрЗаменить(ИмяФормы, ".", "");
	ДанныеОтборов 	= ТаблицаОтборов.Выгрузить();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта + "_ДанныеОтборов", 	ДанныеОтборов);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта + "_ОтборПоПериоду", 	ОтборПериод);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта + "_ОтборПоСтатусу",	Статус);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта + "_ОтборПоИсполнителю",
		Исполнитель);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	
	ИмяКлючаОбъекта = СтрЗаменить(ИмяФормы, ".", "");
	ДанныеОтборов 	= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта + "_ДанныеОтборов");
	Если ДанныеОтборов <> Неопределено Тогда
		ТаблицаОтборов.Загрузить(ДанныеОтборов);
	КонецЕсли;
	
	ОтборПериод 	= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта 
		+ "_ОтборПоПериоду");
		
	Статус			= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта 
		+ "_ОтборПоСтатусу");
		
	Исполнитель		= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта 
		+ "_ОтборПоИсполнителю");
		
	ИмяТекущейПанелиНавигации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта 
		+ "_ИмяТекущейПанелиНавигации");
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещенияУстановитьОтбор(Знач Отбор)
	
	ОчиститьЗначенияОтборов();
	ЗаполнитьОтборыИзПараметровФормы(Отбор);		
	Активизировать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыОтборов(СписокГруппЭлементовОтбора = Неопределено)
	
	УдаляемыеЭлементы = Новый Массив;
	Если СписокГруппЭлементовОтбора = Неопределено Тогда
		ТЗОтборы          = ТаблицаОтборов.Выгрузить();
		ТЗОтборы.Свернуть("ИмяГруппыЭлементов");
		СписокОтборов	  = ТЗОтборы.ВыгрузитьКолонку("ИмяГруппыЭлементов");			
		Для Каждого ЭлементСписка Из СписокОтборов Цикл
			Для Каждого ЭлементФормы Из Элементы[ЭлементСписка].ПодчиненныеЭлементы Цикл
				УдаляемыеЭлементы.Добавить(ЭлементФормы);
			КонецЦикла;	
		КонецЦикла;
	Иначе		
		Для Каждого ЭлементСписка Из СписокГруппЭлементовОтбора Цикл
			Для Каждого ЭлементФормы Из Элементы[ЭлементСписка].ПодчиненныеЭлементы Цикл
				УдаляемыеЭлементы.Добавить(ЭлементФормы);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли; 	
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалениеЭлементаОтбораФормы(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	УдалитьЭлементОтбораНаСервере(НавигационнаяСсылка);
	ОбновитьКанбанДоску();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементОтбораНаСервере(НавигационнаяСсылка)
		
	УдалитьЭлементыОтборов();	
	ОтборСтруктура 	= Новый Структура;
	ОтборСтруктура.Вставить("ИмяЭлементаФормы", НавигационнаяСсылка); 
	МассивСтрок 	= ТаблицаОтборов.НайтиСтроки(ОтборСтруктура);
	
	Для Каждого Элем Из МассивСтрок Цикл
		Попытка
			ТаблицаОтборов.Удалить(Элем);			
		Исключение
		КонецПопытки;
	КонецЦикла;			
	
	ОбновитьЭлементыОтборов(Ложь);	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыОтборов(НужноУдалитьЭлементы = Истина)
	
	Если НужноУдалитьЭлементы Тогда
		УдалитьЭлементыОтборов();
	КонецЕсли;	
			
	ГруппаРодитель 	 = Неопределено;
	НомерСтрокиГрупп = 0;
	ТекущаяШирина	 = 0;
	ШрифтПоУмолчанию = Новый Шрифт(, , Истина);
	НомерСтроки      = 0;	
	
	Для Каждого Строки Из ЭтотОбъект.ТаблицаОтборов Цикл					
		Если Строки.ИмяГруппыЭлементов = "ОтборыГруппыСтатус"
			ИЛИ Строки.ИмяГруппыЭлементов = "ОтборыГруппыИсполнителей" 
			ИЛИ Строки.ИмяГруппыЭлементов = "ОтборыПериоды"
			ИЛИ Строки.ИмяГруппыЭлементов = "ОтборыСтрокаПоиска" Тогда
			Продолжить;
		КонецЕсли;
		Если ГруппаРодитель = Неопределено 
			ИЛИ ТекущаяШирина + СтрДлина(Строка(Строки.ЭлементОтбора)) + 3 > 35
			ИЛИ СтрНайти(ГруппаРодитель.Имя, Элементы[Строки.ИмяГруппыЭлементов].Имя) = 0 Тогда
			
			ГруппаРодитель 						= Элементы.Добавить(Элементы[Строки.ИмяГруппыЭлементов].Имя + НомерСтрокиГрупп, 
				Тип("ГруппаФормы"), Элементы[Строки.ИмяГруппыЭлементов]);
				
			Строки.ГруппаЭлементаФормы			= ГруппаРодитель.Имя;			
			ГруппаРодитель.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаРодитель.Отображение 			= ОтображениеОбычнойГруппы.Нет;
			ГруппаРодитель.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаРодитель.ОтображатьЗаголовок 	= Ложь;			
			НомерСтрокиГрупп 					= НомерСтрокиГрупп + 1;
			ТекущаяШирина 						= 0;
			
		КонецЕсли;
		
		Поле = Элементы.Добавить(Строки.ИмяГруппыЭлементов + "N" + Формат(НомерСтроки, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="), 
			Тип("ДекорацияФормы"), ГруппаРодитель);
			
		МассивСтрок    			= Новый Массив;
		НавСсылкаКартинки		= Строки.ИмяГруппыЭлементов + Формат(НомерСтроки, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
		Строки.ИмяЭлементаФормы	= НавСсылкаКартинки;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.УдалитьТег,,,, НавСсылкаКартинки));			
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" " + Строка(Строки.ЭлементОтбора), ШрифтПоУмолчанию));
		Поле.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок,,);
		Поле.РастягиватьПоГоризонтали = Ложь;
		Поле.Подсказка = Поле.Заголовок;
		Поле.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_УдалениеЭлементаОтбораФормы");
		ТекущаяШирина  = ТекущаяШирина + СтрДлина(Строка(Строки.ЭлементОтбора)) + 3;
		НомерСтроки    = НомерСтроки + 1;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗначенияОтборов()
	
	Статус 		= "";
	Исполнитель = "";
	ТаблицаОтборов.Очистить();
	ОтборПериод = Новый СтандартныйПериод;
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить("ОтборыГруппыОрганизация");
	МассивГрупп.Добавить("ОтборыГруппыСостоянияЭтапа");	
	МассивГрупп.Добавить("ОтборыГруппыСпринт");
	МассивГрупп.Добавить("ОтборыГруппыКлиент");
	МассивГрупп.Добавить("ОтборыГруппыИнициатор");
	МассивГрупп.Добавить("ОтборыГруппыТег");
	МассивГрупп.Добавить("ОтборыГруппыЗаданий");
	МассивГрупп.Добавить("ОтборыГруппыМестоХранения");
	МассивГрупп.Добавить("ОтборыГруппыКарточкаНоменклатуры");
	УдалитьЭлементыОтборов(МассивГрупп);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборыИзПараметровФормы(Знач ПараметрыСтруктураОтборов = Неопределено)
	
	СтруктураОтборов = Неопределено;
	Если ПараметрыСтруктураОтборов <> Неопределено И ПараметрыСтруктураОтборов.Свойство("СтруктураОтборов") Тогда
		СтруктураОтборов = ПараметрыСтруктураОтборов.СтруктураОтборов;		
	ИначеЕсли Параметры.Свойство("СтруктураОтборов") Тогда
		СтруктураОтборов = Параметры.СтруктураОтборов;
	КонецЕсли;	
	
	Если СтруктураОтборов = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	ИмяТекущейПанелиНавигации 						= "СтраницаИнициаторы";
	Элементы.СтраницыПанелиНавигации.ТекущаяСтраница= Элементы[ИмяТекущейПанелиНавигации];	
	
	// Организация.
	мОрганизация = Неопределено;
	Если СтруктураОтборов.Свойство("Организация", мОрганизация) Тогда
		
		Если ТипЗнч(мОрганизация) = Тип("СписокЗначений") Тогда
			Для Каждого Эл Из мОрганизация Цикл 
				НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
				НоваяСтрока.ЭлементОтбора      = Эл.Значение;
				НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыОрганизация";
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(мОрганизация) = Тип("СправочникСсылка.Организации") Тогда	
			НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
			НоваяСтрока.ЭлементОтбора      = мОрганизация;
			НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыОрганизация";
			
		КонецЕсли;
		
	Иначе Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		
	КонецЕсли;
	
	// Состояние этапа.
	мСостояниеЭтапа = Неопределено;
	Если СтруктураОтборов.Свойство("СостояниеЭтапа", мСостояниеЭтапа) Тогда
		
		Если ТипЗнч(мСостояниеЭтапа) = Тип("СписокЗначений") Тогда
			Для Каждого Эл Из мСостояниеЭтапа Цикл 
				НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
				НоваяСтрока.ЭлементОтбора      = Эл.Значение;
				НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыСостоянияЭтапа";
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(мСостояниеЭтапа) = Тип("ПеречислениеСсылка.СостоянияЭтаповПроцесса") Тогда	
			НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
			НоваяСтрока.ЭлементОтбора      = мСостояниеЭтапа;
			НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыСостоянияЭтапа";
			
		КонецЕсли;
		
	Иначе 
		
		СостоянияЭтапа = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповПроцесса.ПустаяСсылка");
		
	КонецЕсли;
	
	// Спринт.
	мСпринт = Неопределено;
	Если СтруктураОтборов.Свойство("Спринт", мСпринт) Тогда
		
		Если ТипЗнч(мСпринт) = Тип("СписокЗначений") Тогда
			Для Каждого Эл Из мСпринт Цикл 
				НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
				НоваяСтрока.ЭлементОтбора      = Эл.Значение;
				НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыСпринт";
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(мСпринт) = Тип("СправочникСсылка.Спринты") Тогда	
			НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
			НоваяСтрока.ЭлементОтбора      = мСпринт;
			НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыСпринт";
			
		КонецЕсли;
		
	Иначе
		
		Спринт = ПредопределенноеЗначение("Справочник.Спринты.ПустаяСсылка");
		
	КонецЕсли;
	
	// Клиент.
	мКлиент = Неопределено;
	Если СтруктураОтборов.Свойство("Клиент", мКлиент) Тогда
		
		Если ТипЗнч(мКлиент) = Тип("СписокЗначений") Тогда
			Для Каждого Эл Из мКлиент Цикл 
				НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
				НоваяСтрока.ЭлементОтбора      = Эл.Значение;
				НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыКлиент";
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(мКлиент) = Тип("СправочникСсылка.КонтактныеЛица")
			ИЛИ ТипЗнч(мКлиент) = Тип("СправочникСсылка.Контрагенты")
			ИЛИ ТипЗнч(мКлиент) = Тип("СправочникСсылка.Организации")
			ИЛИ ТипЗнч(мКлиент) = Тип("СправочникСсылка.Подразделения")
			ИЛИ ТипЗнч(мКлиент) = Тип("СправочникСсылка.Пользователи")
			ИЛИ ТипЗнч(мКлиент) = Тип("СправочникСсылка.Сотрудники")
			ИЛИ ТипЗнч(мКлиент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда	
			НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
			НоваяСтрока.ЭлементОтбора      = мСпринт;
			НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыКлиент";
			
		КонецЕсли;
		
	Иначе Клиент = ПредопределенноеЗначение("Справочник.КонтактныеЛица.ПустаяСсылка");
		
	КонецЕсли;	
	
	// Инициатор.
	мИнициатор = Неопределено;
	Если СтруктураОтборов.Свойство("Инициатор", мИнициатор) Тогда
		
		Если ТипЗнч(мИнициатор) = Тип("СписокЗначений") Тогда
			Для Каждого Эл Из мИнициатор Цикл 
				НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
				НоваяСтрока.ЭлементОтбора      = Эл.Значение;
				НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыИнициатор";
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(мИнициатор) = Тип("СправочникСсылка.КонтактныеЛица")
			ИЛИ ТипЗнч(мИнициатор) = Тип("СправочникСсылка.Контрагенты")
			ИЛИ ТипЗнч(мИнициатор) = Тип("СправочникСсылка.Организации")
			ИЛИ ТипЗнч(мИнициатор) = Тип("СправочникСсылка.Подразделения")
			ИЛИ ТипЗнч(мИнициатор) = Тип("СправочникСсылка.Пользователи")
			ИЛИ ТипЗнч(мИнициатор) = Тип("СправочникСсылка.ПотенциальныеКлиенты")
			ИЛИ ТипЗнч(мИнициатор) = Тип("СправочникСсылка.Сотрудники")
			ИЛИ ТипЗнч(мИнициатор) = Тип("СправочникСсылка.ФизическиеЛица") Тогда	
			НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
			НоваяСтрока.ЭлементОтбора      = мИнициатор;
			НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыИнициатор";
			
		КонецЕсли;
		
	Иначе Инициатор = ПредопределенноеЗначение("Справочник.КонтактныеЛица.ПустаяСсылка");
		
	КонецЕсли;	
	
	// Тег.
	мТег = Неопределено;
	Если СтруктураОтборов.Свойство("Тег", мТег) Тогда
		
		Если ТипЗнч(мТег) = Тип("СписокЗначений") Тогда
			Для Каждого Эл Из мТег Цикл 
				НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
				НоваяСтрока.ЭлементОтбора      = Эл.Значение;
				НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыТег";
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(мТег) = Тип("СправочникСсылка.Теги") Тогда	
			НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
			НоваяСтрока.ЭлементОтбора      = мТег;
			НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыТег";
			
		КонецЕсли;
		
	Иначе Тег = ПредопределенноеЗначение("Справочник.Теги.ПустаяСсылка");
		
	КонецЕсли;
	
	// Группа задания.
	мГруппаЗадания = Неопределено;
	Если СтруктураОтборов.Свойство("ГруппаЗадания", мГруппаЗадания) Тогда
		
		Если ТипЗнч(мГруппаЗадания) = Тип("СписокЗначений") Тогда
			Для Каждого Эл Из мГруппаЗадания Цикл 
				НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
				НоваяСтрока.ЭлементОтбора      = Эл.Значение;
				НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыЗаданий";
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(мГруппаЗадания) = Тип("СправочникСсылка.ГруппыЗаданий") Тогда	
			НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
			НоваяСтрока.ЭлементОтбора      = мГруппаЗадания;
			НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыЗаданий";
			
		КонецЕсли;
		
	Иначе ГруппаЗаданий = ПредопределенноеЗначение("Справочник.ГруппыЗаданий.ПустаяСсылка");
		
	КонецЕсли;
		
	// Статус.	
	Если НЕ СтруктураОтборов.Свойство("Статус", Статус) Тогда
		Статус		= "";
	КонецЕсли;
	
	// Исполнитель.
	Если НЕ СтруктураОтборов.Свойство("Исполнитель", Исполнитель) Тогда
		Исполнитель	= "";
	КонецЕсли;
	
	// Места хранения.
	мМестоХранения = Неопределено;
	Если СтруктураОтборов.Свойство("МестоХранения", мМестоХранения) Тогда
		
		Если ТипЗнч(мМестоХранения) = Тип("СписокЗначений") Тогда
			Для Каждого Эл Из мМестоХранения Цикл 
				НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
				НоваяСтрока.ЭлементОтбора      = Эл.Значение;
				НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыМестоХранения";
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(мМестоХранения) = Тип("СправочникСсылка.МестаХранения") Тогда	
			НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
			НоваяСтрока.ЭлементОтбора      = мМестоХранения;
			НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыМестоХранения";
			
		КонецЕсли;
		
	Иначе МестоХранения = ПредопределенноеЗначение("Справочник.МестаХранения.ПустаяСсылка");
		
	КонецЕсли;
	
	// Карточка номенклатуры.
	мКарточкаНоменклатуры = Неопределено;
	Если СтруктураОтборов.Свойство("КарточкаНоменклатуры", мКарточкаНоменклатуры) Тогда
		
		Если ТипЗнч(мКарточкаНоменклатуры) = Тип("СписокЗначений") Тогда
			Для Каждого Эл Из мКарточкаНоменклатуры Цикл 
				НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
				НоваяСтрока.ЭлементОтбора      = Эл.Значение;
				НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыКарточкаНоменклатуры";
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(мКарточкаНоменклатуры) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда	
			НоваяСтрока 	               = ЭтотОбъект.ТаблицаОтборов.Добавить();
			НоваяСтрока.ЭлементОтбора      = мКарточкаНоменклатуры;
			НоваяСтрока.ИмяГруппыЭлементов = "ОтборыГруппыКарточкаНоменклатуры";
			
		КонецЕсли;
		
	Иначе КарточкаНоменклатуры = ПредопределенноеЗначение("Справочник.КарточкиНоменклатуры.ПустаяСсылка");
		
	КонецЕсли;
	
	// Период.
	Если СтруктураОтборов.Свойство("ДатаНачала") Тогда
		ОтборПериод.ДатаНачала		= СтруктураОтборов.ДатаНачала;
	КонецЕсли;
	Если СтруктураОтборов.Свойство("ДатаОкончания") Тогда
		ОтборПериод.ДатаОкончания	= СтруктураОтборов.ДатаОкончания;
	КонецЕсли;
	
	ОбновитьЭлементыИУстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПраваДостуна()
	
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.Задание);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьСписокСпринтов()
	
	Возврат Справочники.Спринты.АвтоПодборСпринтовВыполнения();
	
КонецФункции

&НаКлиенте
Процедура СпринтСозданияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Спринты") Тогда
		ДобавитьЭлементВТаблицуОтборов(ТаблицаОтборов, ВыбранноеЗначение, "ОтборыГруппыСпринтСоздания");		
		ОбновитьЭлементыИУстановитьОтбор();
		Обновить(Неопределено);
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти