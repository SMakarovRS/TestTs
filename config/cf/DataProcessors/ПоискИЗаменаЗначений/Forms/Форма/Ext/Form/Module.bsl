
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УИДСтр = ЗначениеВСтрокуВнутр(Новый УникальныйИдентификатор)+ЗначениеВСтрокуВнутр(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьХранилищеСервер(УИДСтр);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаменяемыеСсылкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеСсылкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.НайденныеСсылки.ТекущиеДанные;
	
	ПоказатьЗначение(,ТекДанные[СтрЗаменить(Поле.Имя, "НайденныеСсылки", "")]);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНайтиСсылки(Команда)
	
	МассивСтрок = ЗаменяемыеСсылки.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если МассивСтрок.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрано ни одного значения для поиска.'"));
		Возврат;
	КонецЕсли;
	
	АдресХранилища = НайтиСсылкиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьФлажки(Команда)
	
	Для Каждого СтрТЗ Из НайденныеСсылки Цикл
		СтрТЗ.Включено = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьФлажки(Команда)
	
	Для Каждого СтрТЗ Из НайденныеСсылки Цикл
		СтрТЗ.Включено = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьЗамену(Команда)
	
	НайденныеСтроки = ЗаменяемыеСсылки.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	ВсегоСтрок = НайденныеСтроки.Количество();
	
	сч = 0;
	
	Для каждого Стр Из НайденныеСтроки Цикл
		
		ОбработкаПрерыванияПользователя();
		
		сч =сч+1;
		
		Состояние(Стр.ЧтоЗаменять,(100*сч)/ВсегоСтрок);
		
		ПодготовитьсяКЗаменеСервер(Стр.ЧтоЗаменять ,Стр.НаЧтоЗаменять);
		
		Состояние(Стр.ЧтоЗаменять,(100*сч)/ВсегоСтрок);
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	ПоказатьПредупреждение(,НСтр("ru = 'Обработка завершена.'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция НайтиСсылкиСервер()
	
	МассивСтрок  = ЗаменяемыеСсылки.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	МассивСсылок = Новый Массив;
	
	Для Каждого ЭлМассива Из МассивСтрок Цикл
		Если ЭлМассива.ЧтоЗаменять <> Неопределено Тогда
			МассивСсылок.Добавить(ЭлМассива.ЧтоЗаменять);
		КонецЕсли;
	КонецЦикла;
	
	ТЗ = НайтиПоСсылкам(МассивСсылок);
	
	НайденныеСсылки.Очистить();
	
	Для Каждого СтрТЗ Из ТЗ Цикл
		
		СтрТЗНС =НайденныеСсылки.Добавить();
		СтрТЗНС.Включено   = Истина;
		СтрТЗНС.Данные     = СтрТЗ.Данные;
		СтрТЗНС.Метаданные = СтрТЗ.Метаданные.ПолноеИмя();
		СтрТЗНС.Ссылка     = СтрТЗ.Ссылка;
		СтрТЗНС.Индекс     = ТЗ.Индекс(СтрТЗ);
		
	КонецЦикла;
	
	ТЗ.Колонки.Добавить("Включено", Новый ОписаниеТипов("Булево"));	
	
	Если ТЗ.Количество()>0 Тогда	
		Возврат ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор());	
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПодготовитьсяКЗаменеСервер(ЧтоЗаменять,НаЧтоЗаменять)	
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТЗ=Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Таблица найденных ссылок отсутствует.'"));
	Иначе
		
		НайденныеСтроки	=НайденныеСсылки.НайтиСтроки(Новый Структура("Включено, Ссылка", Истина, ЧтоЗаменять));
		
		Для Каждого СтрТЗ Из НайденныеСтроки Цикл
			
			СтрТЗТЗ = ТЗ.Получить(СтрТЗ.Индекс);
			СтрТЗТЗ.Включено   = Истина;
			СтрТЗТЗ.Метаданные = Метаданные.НайтиПоПолномуИмени(СтрТЗ.Метаданные);
			
		КонецЦикла;
		
		Заменяемые = Новый Соответствие;
		Заменяемые.Вставить(ЧтоЗаменять, НаЧтоЗаменять);
		вВыполнитьЗаменуЭлементов(Заменяемые, ТЗ, , Истина);
		
	КонецЕсли;
	
	Попытка
		УдалитьИзВременногоХранилища(АдресХранилища);	
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция вВыполнитьЗаменуЭлементов(Заменяемые,ТаблицаСсылок ,ВыполнятьВТранзакции = Истина, ОтключатьКонтрольЗаписи = Ложь)
	
	БылиИсключения = Ложь;
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	ОбрабатываемаяСсылка = Неопределено;
	
	Параметры = Новый Структура;
	
	Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;
	
	Параметры.Вставить("Объект", Неопределено);
		
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		Если Не СтрокаТаблицы.Включено Тогда
			Продолжить;
		КонецЕсли;
		
		Ссылка            = СтрокаТаблицы.Ссылка;
		МетаданныеОбъекта = СтрокаТаблицы.Метаданные;
		
		ПравильныйЭлемент = Заменяемые[Ссылка];
		
		ТипЗначенияСсылки = ТипЗнч(Ссылка);
		
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			
			Если ОбрабатываемаяСсылка <> Неопределено И Параметры.Объект <> Неопределено Тогда
				
				Если ОтключатьКонтрольЗаписи Тогда
					Параметры.Объект.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
				
				Попытка
					Параметры.Объект.Записать();
				Исключение
					БылиИсключения = Истина;
					Если ВыполнятьВТранзакции Тогда
						Перейти ~ОТКАТ;
					КонецЕсли;
				КонецПопытки;
				Параметры.Объект = Неопределено;
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;
		
			
		Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			ВыполнитьЗаменуЭлементовВРеквизитахОбъекта(Параметры.Объект, Ссылка,ТипЗначенияСсылки, ПравильныйЭлемент, МетаданныеОбъекта);
			
			ВыполнитьЗаменуЭлементовВТабличныхЧастяхОбъекта(Параметры.Объект, Ссылка,ТипЗначенияСсылки, ПравильныйЭлемент, МетаданныеОбъекта);
			
			Для Каждого Движение Из МетаданныеОбъекта.Движения Цикл
				
				ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
				ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии И Параметры[Движение.Имя + "Корреспонденция"];
				
				НаборЗаписей  = Параметры.Объект.Движения[Движение.Имя];
				НаборЗаписей.Прочитать();
				НадоЗаписывать = Ложь;
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				Для Каждого Измерение Из Движение.Измерения Цикл
					Если Измерение.Тип.СодержитТип(ТипЗначенияСсылки) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Измерение.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
						КонецЦикла;
					КонецЕсли; 
				КонецЦикла;
				
				Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
					Для Каждого Ресурс Из Движение.Ресурсы Цикл
						Если Ресурс.Тип.СодержитТип(ТипЗначенияСсылки) Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Ресурс.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого Реквизит Из Движение.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗначенияСсылки) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
					
					Для ИндексСубконто = 1 По Параметры[Движение.Имя + "Субконто"] Цикл
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							КонецЦикла;
						Иначе
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
					Если Ссылка.Метаданные() = Движение.ПланСчетов Тогда
						Для Каждого СтрокаТабЧасти Из ТаблицаНабора Цикл
							Если ЕстьКорреспонденция Тогда
								Если СтрокаТабЧасти.СчетДт = Ссылка Тогда
									СтрокаТабЧасти.СчетДт = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
								Если СтрокаТабЧасти.СчетКт = Ссылка Тогда
									СтрокаТабЧасти.СчетКт = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
							Иначе
								Если СтрокаТабЧасти.Счет = Ссылка Тогда
									СтрокаТабЧасти.Счет = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
					СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
					Пока СтрокаТабЧасти <> Неопределено Цикл
						СтрокаТабЧасти["ВидРасчета"] = ПравильныйЭлемент;
						НадоЗаписывать = Истина;
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
					КонецЦикла;
				КонецЕсли;
				
				Если НадоЗаписывать Тогда
					НаборЗаписей.Загрузить(ТаблицаНабора);
					Если ОтключатьКонтрольЗаписи Тогда
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
					Попытка
						НаборЗаписей.Записать();
					Исключение
						БылиИсключения = Истина;
						Если ВыполнятьВТранзакции Тогда
							Перейти ~ОТКАТ;
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Последовательность Из Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(МетаданныеОбъекта) Тогда
					
					НадоЗаписывать = Ложь;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
					НаборЗаписи.Прочитать();
					
					Если НаборЗаписи.Количество() > 0 Тогда
						Для Каждого Измерение Из Последовательность.Измерения Цикл
							Если Измерение.Тип.СодержитТип(ТипЗначенияСсылки) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
								НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
							КонецЕсли;
						КонецЦикла;
						Если НадоЗаписывать Тогда
							Если ОтключатьКонтрольЗаписи Тогда
								НаборЗаписи.ОбменДанными.Загрузка = Истина;
							КонецЕсли;
							Попытка
								НаборЗаписи.Записать();
							Исключение
								БылиИсключения = Истина;
								Если ВыполнятьВТранзакции Тогда
									Перейти ~ОТКАТ;
								КонецЕсли;
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Если МетаданныеОбъекта.Владельцы.Содержит(Ссылка.Метаданные()) И Параметры.Объект.Владелец = Ссылка Тогда
				Параметры.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;
			
			Если МетаданныеОбъекта.Иерархический И Параметры.Объект.Родитель = Ссылка Тогда
				Параметры.Объект.Родитель = ПравильныйЭлемент;
			КонецЕсли;
			
			ВыполнитьЗаменуЭлементовВРеквизитахОбъекта(Параметры.Объект, Ссылка,ТипЗначенияСсылки, ПравильныйЭлемент, МетаданныеОбъекта);
			
			ВыполнитьЗаменуЭлементовВТабличныхЧастяхОбъекта(Параметры.Объект, Ссылка,ТипЗначенияСсылки, ПравильныйЭлемент, МетаданныеОбъекта);
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта)
				  ИЛИ Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта)
				  ИЛИ Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта)
				  ИЛИ Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			ВыполнитьЗаменуЭлементовВРеквизитахОбъекта(Параметры.Объект, Ссылка,ТипЗначенияСсылки, ПравильныйЭлемент, МетаданныеОбъекта);
			
			ВыполнитьЗаменуЭлементовВТабличныхЧастяхОбъекта(Параметры.Объект, Ссылка,ТипЗначенияСсылки, ПравильныйЭлемент, МетаданныеОбъекта);			
		
		ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			ВыполнитьЗаменуЭлементовВРеквизитахОбъекта(Параметры.Объект, Ссылка,ТипЗначенияСсылки, ПравильныйЭлемент, МетаданныеОбъекта);
			
			ВыполнитьЗаменуЭлементовВТабличныхЧастяхОбъекта(Параметры.Объект, Ссылка,ТипЗначенияСсылки, ПравильныйЭлемент, МетаданныеОбъекта);
			
			ВыполнитьЗаменуЭлементовВРеквизитахОбъекта(Параметры.Объект, Ссылка,ТипЗначенияСсылки, ПравильныйЭлемент, МетаданныеОбъекта, "РеквизитыАдресации");		
		
		ИначеЕсли Метаданные.Константы.Содержит(МетаданныеОбъекта) Тогда
			
			Константы[МетаданныеОбъекта.Имя].Установить(ПравильныйЭлемент);
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[МетаданныеОбъекта.Имя].СоздатьНаборЗаписей();
			
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
				СтруктураИзмерений.Вставить(Измерение.Имя);
			КонецЦикла;
			
			Если МетаданныеОбъекта.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
			КонецЕсли;
			
			НаборЗаписей.Прочитать();
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Если ОтключатьКонтрольЗаписи Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			Если Не ВыполнятьВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				НаборЗаписей.Записать();
				
				Для Каждого Колонка Из ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
						Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
							НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				НаборЗаписей.Записать();
				
				Если Не ВыполнятьВТранзакции Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли; 
				
			Исключение
				
				Если ВыполнятьВТранзакции Тогда
					БылиИсключения = Истина;
					Перейти ~ОТКАТ;
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;
				
			КонецПопытки;
			
		Иначе  
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ссылки типа '") + МетаданныеОбъекта + НСтр("ru = ' не заменяются.'"));
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.Объект <> Неопределено Тогда
		Если ОтключатьКонтрольЗаписи Тогда
			Параметры.Объект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		Попытка
			Параметры.Объект.Записать();
		Исключение
			БылиИсключения = Истина;
			Если ВыполнятьВТранзакции Тогда
				Перейти ~ОТКАТ;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
~ОТКАТ:
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Не БылиИсключения;
	
КонецФункции // вВыполнитьЗаменуЭлементов()

&НаСервереБезКонтекста
Процедура ВыполнитьЗаменуЭлементовВТабличныхЧастяхОбъекта(Объект, Ссылка,ТипЗначенияСсылки, ПравильныйЭлемент, МетаданныеОбъекта)
	
	Для Каждого ТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			
			Если Реквизит.Тип.СодержитТип(ТипЗначенияСсылки) Тогда
				
				СтруктураПоиска = Новый Структура(Реквизит.Имя, Ссылка);
				
				НайденныеСтрокиТабЧасти = Объект[ТЧ.Имя].НайтиСтроки(СтруктураПоиска);
				
				Для каждого СтрокаТабЧасти Из НайденныеСтрокиТабЧасти Цикл
					СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьЗаменуЭлементовВТабличныхЧастяхОбъекта()

&НаСервереБезКонтекста
Процедура ВыполнитьЗаменуЭлементовВРеквизитахОбъекта(Объект, Ссылка,ТипЗначенияСсылки, ПравильныйЭлемент, МетаданныеОбъекта, ИмяКоллекцииРеквизитов = "Реквизиты")
	
	Для Каждого Реквизит Из МетаданныеОбъекта[ИмяКоллекцииРеквизитов] Цикл
		Если Реквизит.Тип.СодержитТип(ТипЗначенияСсылки) И Объект[Реквизит.Имя] = Ссылка Тогда
			Объект[Реквизит.Имя] = ПравильныйЭлемент;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьЗаменуЭлементовВРеквизитахОбъекта()

&НаСервереБезКонтекста
Процедура ОчиститьХранилищеСервер(УИДСтр)
	
	ХранилищеСистемныхНастроек.Удалить(УИДСтр, Неопределено, Неопределено);
	
КонецПроцедуры

#КонецОбласти