
#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОрганизацияПоУмолчанию = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
	Если НЕ ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
		ОрганизацияПоУмолчанию = УправлениеITОтделом8УФПовтИсп.ПолучитьОсновнуюОрганизацию();
	КонецЕсли;
	
	ВариантИмпорта = Строка(Элементы.ВариантИмпорта.СписокВыбора[0]);
	ВариантОпроса = 0;
	СоздаватьКарточкиНоменклатурыПриИмпорте = Истина;
	Элементы.ГруппаСтраницыВидовПараметров.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаWMIВарианты.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Состояние(НСтр("ru = 'Подождите. Происходит заполнение формы начальными данными ...'"));
	ПриОткрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	Попытка
		// Информация о Домен+Комьютер+Пользователь.
		ДоменКомпьютерПользователь = LOCAL_ComputerName_UserName_UserDomain();
		Домен = ДоменКомпьютерПользователь.UserDomain;
		Компьютер = ДоменКомпьютерПользователь.ComputerName;
		Пользователь = ДоменКомпьютерПользователь.UserName;	
		// Переменные окружения.
		ПеременныеОкружения = LOCAL_SystemEnvironment();
	Исключение
	КонецПопытки;
	
	ЗагрузитьНастройкиФормы();	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("КаталогAIDA64",                           КаталогAIDA64);	
	СтруктураНастроек.Вставить("ВариантИмпорта",                          ВариантИмпорта);
	СтруктураНастроек.Вставить("ЗагружатьПрограммноеОбеспечениеAIDA",     ЗагружатьПрограммноеОбеспечениеAIDA);
	СтруктураНастроек.Вставить("ПользовательАдминистраторWMI",            ПользовательАдминистраторWMI);
	СтруктураНастроек.Вставить("ПарольАдминистраторWMI",                  ПарольАдминистраторWMI);
	СтруктураНастроек.Вставить("ВариантОпроса",                           ВариантОпроса);
	СтруктураНастроек.Вставить("ОрганизацияПоУмолчанию",                  ОрганизацияПоУмолчанию);
	СтруктураНастроек.Вставить("СоздаватьКарточкиНоменклатурыПриИмпорте", СоздаватьКарточкиНоменклатурыПриИмпорте);
	СтруктураНастроек.Вставить("ЗагружатьПрограммноеОбеспечениеAIDA",     ЗагружатьПрограммноеОбеспечениеAIDA);
	
	СохранитьНастройкиФормы(СтруктураНастроек);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогAIDA64НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Каталог = КаталогAIDA64;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите каталог с файлами AIDA64'");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		КаталогAIDA64 = ДиалогОткрытияФайла.Каталог;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМестаХранения

&НаКлиенте
Процедура МестаХраненияПриАктивизацииСтроки(Элемент)
	Если Элементы.МестаХранения.ТекущиеДанные = Неопределено Тогда
		КС = -1;
	Иначе
		КС = Элементы.МестаХранения.ТекущиеДанные.КлючМестаХранения;
	КонецЕсли;	
	Отбор = Новый ФиксированнаяСтруктура("КлючМестаХранения", КС);
	Элементы.Номенклатура.ОтборСтрок = Отбор;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНоменклатура

&НаКлиенте
Процедура НоменклатураПриАктивизацииСтроки(Элемент)
	Если Элементы.Номенклатура.ТекущиеДанные = Неопределено Тогда
		КС = -1;
	Иначе
		КС = Элементы.Номенклатура.ТекущиеДанные.КлючСтроки;
	КонецЕсли;	
	Отбор = Новый ФиксированнаяСтруктура("КлючСтроки", КС);
	Элементы.Свойства.ОтборСтрок = Отбор;	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвойства

&НаКлиенте
Процедура СвойстваПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	Для Каждого Строки Из МестаХранения Цикл
		Строки.Импортировать = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	Для Каждого Строки Из МестаХранения Цикл
		Строки.Импортировать = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступление(Команда)
	Ошибки = Неопределено;
	
	// Проверка перед созданием.
	Для Каждого Строки Из МестаХранения Цикл
		Если НЕ ЗначениеЗаполнено(Строки.МестоХранения) И Строки.Импортировать Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , СтрШаблон(НСтр("ru = 'Не заполнено место хранения для строки: %1'"), Строки.Наименование), "");
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Если Ошибки <> Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	// Каждый комплект в свое поступление.
	СозданныеДокументы = СоздатьПоступлениеНаСервере();
	
	// Откроем список созданных поступлений.
	Если СозданныеДокументы.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьПоступлениеЗавершение", ЭтотОбъект, Новый Структура("СозданныеДокументы", СозданныеДокументы)), 
			СтрШаблон(НСтр("ru = 'Создано %1 документов. 
                            |Открыть список для их просмотра?'"), Строка(СозданныеДокументы.Количество())), Режим, 0);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Обработка завершена. Документы не созданы.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    СозданныеДокументы = ДополнительныеПараметры.СозданныеДокументы;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        // Открываем список документов
        Структура = Новый Структура;
        Структура.Вставить("ОтборПоДокументам", СозданныеДокументы);
        ОткрытьФорму("Документ.Поступление.ФормаСписка", Структура);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьМестаХранения(Команда)
	Для Каждого Строки Из МестаХранения Цикл
		Если НЕ ЗначениеЗаполнено(Строки.МестоХранения) И НЕ ПустаяСтрока(Строки.Наименование) И Строки.Импортировать Тогда
			Строки.МестоХранения = СоздатьМестоХраненияНаСервере(Строки.Наименование, Строки.USER, Строки.Домен, Строки.Компьютер, Строки.IP_1, Строки.IP_2,Строки.IP_3,Строки.IP_4);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеНоменклатура(Команда)
	
	Если Элементы.МестаХранения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючМестаХранения = Элементы.МестаХранения.ТекущиеДанные.КлючМестаХранения;
	
	Для Каждого Строки Из Номенклатура Цикл
		Если Строки.КлючМестаХранения = КлючМестаХранения Тогда
			Строки.Импортировать = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеНоменклатура(Команда)
	Если Элементы.МестаХранения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючМестаХранения = Элементы.МестаХранения.ТекущиеДанные.КлючМестаХранения;
	
	Для Каждого Строки Из Номенклатура Цикл
		Если Строки.КлючМестаХранения = КлючМестаХранения Тогда
			Строки.Импортировать = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнвентаризацию(Команда)
	Ошибки = Неопределено;
	
	// Проверка перед созданием
	Для Каждого Строки Из МестаХранения Цикл
		Если НЕ ЗначениеЗаполнено(Строки.МестоХранения) И Строки.Импортировать Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , СтрШаблон(НСтр("ru = 'Не заполнено место хранения для строки: %1'"), Строки.Наименование), "");
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Если Ошибки <> Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	// Каждый комплект в свое поступление
	СозданныеДокументы = СоздатьИнвентаризациюНаСервере();
	
	// Откроем список созданных поступлений
	Если СозданныеДокументы.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьИнвентаризациюЗавершение", ЭтотОбъект, Новый Структура("СозданныеДокументы", СозданныеДокументы)), 		
			СтрШаблон(НСтр("ru = 'Создано %1 документов.
                            |Открыть список для их просмотра?'"), Строка(СозданныеДокументы.Количество())), Режим, 0);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Обработка завершена. Документы не созданы.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнвентаризациюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    СозданныеДокументы = ДополнительныеПараметры.СозданныеДокументы;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        // Открываем список документов.
        Структура = Новый Структура;
        Структура.Вставить("ОтборПоДокументам", СозданныеДокументы);
        ОткрытьФорму("Документ.Инвентаризация.ФормаСписка", Структура);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроекЗагрузкиAIDA(Команда)
	ОткрытьФорму("ПланВидовХарактеристик.ВидыХарактеристик.ФормаСписка");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	// Виды импорта.
	Если ВариантИмпорта = Строка(Элементы.ВариантИмпорта.СписокВыбора[0]) Тогда
		Элементы.ГруппаСтраницыВидовПараметров.ТекущаяСтраница = Элементы.ГруппаAIDA64Everest;
		Элементы.ОписаниеНадпись.Заголовок = НСтр("ru = 'Загрузка данных из программ AIDA 64, Everest. 
		|Нельзя выбирать каталог, из которого загружаются все файлы выгрузки *.ini. Данные файлы можно получить только 
		|из версии Corporate Edition.'");
	ИначеЕсли ВариантИмпорта = Строка(Элементы.ВариантИмпорта.СписокВыбора[1]) Тогда
		Элементы.ГруппаСтраницыВидовПараметров.ТекущаяСтраница = Элементы.ГруппаWMI;
		Элементы.ОписаниеНадпись.Заголовок = НСтр("ru = 'Загрузка производится на основе данных полученных 
		|Windows Management Instrumentation (WMI).'");
	КонецЕсли;
	
	// Варианты опроса WMI.
	Если ВариантОпроса = 0 Тогда
		Элементы.ГруппаWMIВарианты.ТекущаяСтраница = Элементы.ГруппаWMIВариантДиапазонIP;
	ИначеЕсли ВариантОпроса = 1 Тогда
		Элементы.ГруппаWMIВарианты.ТекущаяСтраница = Элементы.ГруппаWMIВариантОпределенныйКомпьютерВСети;
	ИначеЕсли ВариантОпроса = 2 Тогда
		Элементы.ГруппаWMIВарианты.ТекущаяСтраница = Элементы.ГруппаWMIВариантСканироватьСетевоеОкружение;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает время в миллисекундах или секундах.
//
// Пример использования:
//
// Начало = ВремяВМиллисекундах();
// КоличествоСтрок = 0;
// Для Каждого Элемент Из Массив Цикл
// 	  КоличествоСтрок = КоличествоСтрок  + 1;
//    ...
// КонецЦикла;
// Конец  = ВремяВМиллисекундах();
// ВремяВыполнения = (Конец - Начало) / 1000;
//
// РезультСтрока = НСтр("ru = 'Результат процесса (количество строк = %КоличествоСтрок%,
// время выполнения = %ВремяВыполнения% с)'").
// РезультСтрока = СтрЗаменить(РезультСтрока, "%КоличествоСтрок%", Строка(КоличествоСтрок)).
// РезультСтрока = СтрЗаменить(РезультСтрока, "%ВремяВыполнения%", Строка(ВремяВыполнения)).
//
&НаКлиентеНаСервереБезКонтекста
Функция ВремяВМиллисекундах()
	Попытка
		Script = Новый COMОбъект("MSScriptControl.ScriptControl");
		Script.Language = "javascript";
		Script.Timeout	= -1;
		Время = Script.Eval("var d = new Date(); d.getTime()");
	Исключение
		// Попытка
		// Время = ТекущаяУниверсальнаяДатаВМиллисекундах();	// Версия Платформы 8.2.17.153 и выше.
		// Исключение
		Время = ТекущаяДата();
		// КонецПопытки;
	КонецПопытки;	
	
	Возврат Время;
КонецФункции

&НаКлиенте
Процедура ВариантИмпортаПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВариантОпросаПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьИдентичностьМассивов(ПервыйМассив, ВторойМассив) 
	
	НаибольшийИндекс = ПервыйМассив.ВГраница(); 
	Если НаибольшийИндекс > ВторойМассив.ВГраница () Тогда 
		Возврат Ложь; 
	КонецЕсли; 
	
	Для Счетчик = 0 По НаибольшийИндекс Цикл 
		Если ПервыйМассив[Счетчик] <> ВторойМассив[Счетчик] Тогда 
			Возврат Ложь; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина; 
	
КонецФункции

&НаСервере
Процедура СканироватьДиапазонIPАдресов()
	
	КлючМестаХранения = 0;
	winmgmts = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}");
	Для И1 = ИП11 По ИП21 Цикл
		Для И2 = ИП12 По ИП22 Цикл
			Для И3 = ИП13 По ИП23 Цикл
				Для И4 = ИП14 По ИП24 Цикл
					// Проверяем есть ли компьютер с таким IP
					// Методика http://www.script-coding.com/Ping.html
					IPСтр = СокрЛП(И1) + "." + СокрЛП(И2) + "." + СокрЛП(И3) + "." + СокрЛП(И4);
					Ping = winmgmts.ExecQuery("Select * From Win32_PingStatus Where address = '" + IPСтр + "'");
					Для Каждого С Из Ping Цикл
						Если С.StatusCode = 0 Тогда
							// IP-есть!							
							// Добавляем компьютер
							НоваяСтрока = МестаХранения.Добавить();
							НоваяСтрока.Импортировать = Истина;
							НоваяСтрока.Наименование = IPСтр;
							НоваяСтрока.IP_1 = IPСтр;
							НоваяСтрока.КлючМестаХранения = КлючМестаХранения;
							
							КлючМестаХранения = КлючМестаХранения + 1;
							
						КонецЕсли;						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СканироватьСетевоеОкружение()
	
	КлючМестаХранения = 0;
	Для Каждого Строки Из СетевоеОкружение Цикл
		// Добавляем компьютер
		НоваяСтрока = МестаХранения.Добавить();
		НоваяСтрока.Импортировать = Истина;
		НоваяСтрока.Наименование = Строки.Компьютер;
		НоваяСтрока.КлючМестаХранения = КлючМестаХранения;
		КлючМестаХранения = КлючМестаХранения + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНоменклатуруПоМестамХраненияWMI()
	
	Номенклатура.Очистить();
	Свойства.Очистить();
	
	// Запрос ко всем объектам WMI
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыХарактеристик.Ссылка,
		|	ВидыХарактеристик.КлассWMI,
		|	ВидыХарактеристик.СвойствоWMI,
		|	ВидыХарактеристик.ВидНоменклатуры,
		|	ВидыХарактеристик.СерийныйНомерWMI,
		|	ВидыХарактеристик.ПроизводительWMI,
		|	ВидыХарактеристик.ИсключенияWMI
		|ИЗ
		|	ПланВидовХарактеристик.ВидыХарактеристик КАК ВидыХарактеристик
		|ГДЕ
		|	ВидыХарактеристик.КлассWMI <> """"
		|	И ВидыХарактеристик.ЭтоГруппа = ИСТИНА
		|	И ВидыХарактеристик.КлассWMI <> """"
		|	И ВидыХарактеристик.СвойствоWMI <> """"
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	РезультатWMI = Запрос.Выполнить();
	ВыборкаWMI = РезультатWMI.Выбрать();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыХарактеристик.Ссылка,
		|	ВидыХарактеристик.СвойствоWMI,
		|	ВидыХарактеристик.ДелитьНаЧислоWMI,
		|	ВидыХарактеристик.ИсключенияWMI
		|ИЗ
		|	ПланВидовХарактеристик.ВидыХарактеристик КАК ВидыХарактеристик
		|ГДЕ
		|	ВидыХарактеристик.Родитель В ИЕРАРХИИ(&СписокНоменклатуры)
		|	И ВидыХарактеристик.ЭтоГруппа = ЛОЖЬ
		|	И ВидыХарактеристик.СвойствоWMI <> """"";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", РезультатWMI.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ВыборкаСвойстваWMI = Запрос.Выполнить().Выбрать();
	
	
	Для Каждого Строки Из МестаХранения Цикл
		
		Computer 			= СокрЛП(Строки.Наименование);
		КлючМестаХранения 	= Строки.КлючМестаХранения;
		КлючСтроки 			= 0;
		
		// Методика http://www.script-coding.com/index.html
		Попытка
			
			SWbemLocator = Новый COMОбъект("WbemScripting.SWbemLocator");
			WinMGMT = SWbemLocator.ConnectServer(Computer, "root\CIMV2", ПользовательАдминистраторWMI, ПарольАдминистраторWMI);
			WinMGMT.Security_.ImpersonationLevel 	= 3;
			WinMGMT.Security_.AuthenticationLevel 	= 6;
			
		Исключение
			
			Попытка
				WinMGMT = ПолучитьCOMОбъект("winmgmts:\\" + Computer + "\root\cimv2");
			Исключение
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка получения данных через WMI. ""%1""'"), Computer));
				Продолжить;				
			КонецПопытки;
			
		КонецПопытки;
		
		// Обходим объекты WMI.
		ВыборкаWMI.Сбросить();
		Пока ВыборкаWMI.Следующий() Цикл
			
			// Обходим класс WMI.
			Win32 = WinMGMT.ExecQuery("SELECT * FROM " + СокрЛП(ВыборкаWMI.КлассWMI));
			
			Для Каждого W Из Win32 Цикл
				
				ЗначениеНоменклатуры = СокрЛП(W[ВыборкаWMI.СвойствоWMI]);
				
				// Проверка есть ли подстроки исключения в значении номенклатуры.
				Если НЕ ПустаяСтрока(ВыборкаWMI.ИсключенияWMI) Тогда
					ЕстьИсключения = Ложь;
					Для Индекс = 1 По СтрЧислоСтрок(ВыборкаWMI.ИсключенияWMI) Цикл
						Если СтрНайти(ЗначениеНоменклатуры, СтрПолучитьСтроку(ВыборкаWMI.ИсключенияWMI, Индекс)) > 0 Тогда
							ЕстьИсключения = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;			
					Если ЕстьИсключения Тогда
						Продолжить;				
					КонецЕсли;
				КонецЕсли;
				
				// Добавляем номенклатуру.
				НоваяНоменклатура 					= Номенклатура.Добавить();
				НоваяНоменклатура.Импортировать 	= Истина;
				НоваяНоменклатура.КлючМестаХранения = КлючМестаХранения;
				НоваяНоменклатура.КлючСтроки 		= КлючСтроки;
				НоваяНоменклатура.ВидНоменклатуры 	= ВыборкаWMI.ВидНоменклатуры;
				НоваяНоменклатура.Номенклатура 		= ЗначениеНоменклатуры;
				НоваяНоменклатура.Количество 		= 1;
				Попытка
					Если НЕ ПустаяСтрока(ВыборкаWMI.ПроизводительWMI) Тогда
						НоваяНоменклатура.Производитель = СокрЛП(W[ВыборкаWMI.ПроизводительWMI]);
					КонецЕсли;
				Исключение
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не найдено свойство производителя ""%1"" для ""%2""'"), ВыборкаWMI.ПроизводительWMI, СокрЛП(ВыборкаWMI.КлассWMI)));
				КонецПопытки;
				
				Попытка
					Если НЕ ПустаяСтрока(ВыборкаWMI.СерийныйНомерWMI) Тогда
						НоваяНоменклатура.СерийныйНомер = СокрЛП(W[ВыборкаWMI.СерийныйНомерWMI]);
					КонецЕсли;					
				Исключение
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не найдено свойство серийного номера ""%1"" для ""%2""'"), ВыборкаWMI.СерийныйНомерWMI, СокрЛП(ВыборкаWMI.КлассWMI)));
				КонецПопытки;
				
				// Теперь добавляем свойства номенклатуры.
				ВыборкаСвойстваWMI.Сбросить();
				Пока ВыборкаСвойстваWMI.Следующий() Цикл					
					Если ВыборкаСвойстваWMI.Ссылка.ПринадлежитЭлементу(ВыборкаWMI.Ссылка) Тогда
						// Свойство является дочерним для текущей номенклатуры.
						НовоеСвойство = Свойства.Добавить();
						НовоеСвойство.КлючСтроки = КлючСтроки;
						НовоеСвойство.Импортировать = Истина;
						НовоеСвойство.Характеристика = ВыборкаСвойстваWMI.Ссылка;
						Попытка
							Если ВыборкаСвойстваWMI.ДелитьНаЧислоWMI <> 0 Тогда
								НовоеСвойство.Значение = Окр(Число(W[ВыборкаСвойстваWMI.СвойствоWMI]) / ВыборкаСвойстваWMI.ДелитьНаЧислоWMI);
							Иначе
								НовоеСвойство.Значение = СокрЛП(W[ВыборкаСвойстваWMI.СвойствоWMI]);
							КонецЕсли;						
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
				
				
				КлючСтроки = КлючСтроки + 1;
			КонецЦикла;			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СканироватьКомпьютерВСети()
	НоваяСтрока = МестаХранения.Добавить();
	НоваяСтрока.Наименование = ИмяКомпьютераWMI;
	НоваяСтрока.Импортировать = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзКаталогаAIDA64(Знач ТекстФайла, КлючСтроки, КлючМестаХранения)
		
	ИмяСекции = "";
	СекцииФайла = Новый СписокЗначений;
	ТекстСекции = Новый ТаблицаЗначений;
			
	// Чтение строк файла данных
	КолвоСтрок = ТекстФайла.КоличествоСтрок();
	Для СчСтрок = 1 По КолвоСтрок Цикл
		ТекстСтроки = ТекстФайла.ПолучитьСтроку(СчСтрок);
		Если Лев(ТекстСтроки, 1) = "[" И СтрНайти(ТекстСтроки, "EVALUATION") = 0 Тогда
			// Начался новый раздел
			Если НЕ ПустаяСтрока(ИмяСекции) Тогда
				СекцииФайла.Добавить(ТекстСекции, ИмяСекции);
			КонецЕсли;
			// Fix ошибки с триальной версией
			Если СтрНайти(ТекстСтроки, "[ TRIAL VERSION ]") > 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ini-файл получен из версии Trial, некоторые данные могут быть не доступны'"));
				Продолжить;
			КонецЕсли;
			
			Если Прав(ТекстСтроки, 1) <> "]" Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ini-файл поврежден'"));
				Продолжить;
			КонецЕсли;
			
			ИмяСекции = Сред(ТекстСтроки, 2, СтрДлина(ТекстСтроки)-2);
			ТекстСекции = Новый ТаблицаЗначений;
			ТекстСекции.Колонки.Добавить("СтрокаИспользовалась");
			ТекстСекции.Колонки.Добавить("Значение");
		Иначе
			Если НЕ ПустаяСтрока(ТекстСтроки) И Лев(ТекстСтроки, 1) <> ";" Тогда
				Строка = ТекстСекции.Добавить();
				Строка.Значение = ТекстСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ИмяСекции) Тогда
		СекцииФайла.Добавить(ТекстСекции, ИмяСекции);
	КонецЕсли;
	
	ИниФайл = СекцииФайла;
	
	// В СекцииФайла все данные по загруженному файлу
	// Запрос ко всем объектам WMI
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыХарактеристик.Ссылка,
		|	ВидыХарактеристик.КлассAIDA,
		|	ВидыХарактеристик.СвойствоAIDA,
		|	ВидыХарактеристик.ВидНоменклатуры,
		|	ВидыХарактеристик.СерийныйНомерAIDA,
		|	ВидыХарактеристик.ПроизводительAIDA,
		|	ВидыХарактеристик.ОпределениеБезРодительскойСекцииAIDA,
		|	ВидыХарактеристик.ПриПоискеВключатьЗначениеПеременнойСекцииAIDA,
		|	ВидыХарактеристик.ИсключенияAIDA
		|ИЗ
		|	ПланВидовХарактеристик.ВидыХарактеристик КАК ВидыХарактеристик
		|ГДЕ
		|	ВидыХарактеристик.КлассAIDA <> """"
		|	И ВидыХарактеристик.ЭтоГруппа = ИСТИНА
		|	И ВидыХарактеристик.КлассAIDA <> """"
		|	И ВидыХарактеристик.СвойствоAIDA <> """"
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если НЕ ЗагружатьПрограммноеОбеспечениеAIDA Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АВТОУПОРЯДОЧИВАНИЕ", " И НЕ ВидыХарактеристик.Ссылка В (&ПрограммноеОбеспечение)  АВТОУПОРЯДОЧИВАНИЕ");
		ПрограммноеОбеспечение = Новый Массив;
		ПрограммноеОбеспечение.Добавить(ПланыВидовХарактеристик.ВидыХарактеристик.ПрограммноеОбеспечение);
		ПрограммноеОбеспечение.Добавить(ПланыВидовХарактеристик.ВидыХарактеристик.Лицензия);
		ПрограммноеОбеспечение.Добавить(ПланыВидовХарактеристик.ВидыХарактеристик.ОперационнаяСистема);
		Запрос.УстановитьПараметр("ПрограммноеОбеспечение", ПрограммноеОбеспечение);
	КонецЕсли;
	
	РезультатAIDA = Запрос.Выполнить();
	ВыборкаAIDA = РезультатAIDA.Выбрать();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыХарактеристик.Ссылка,
		|	ВидыХарактеристик.СвойствоAIDA,
		|	ВидыХарактеристик.ДелитьНаЧислоAIDA,
		|	ВидыХарактеристик.ОпределениеБезРодительскойСекцииAIDA,
		|	ВидыХарактеристик.ПриПоискеВключатьЗначениеПеременнойСекцииAIDA,
		|	ВидыХарактеристик.ИсключенияAIDA
		|ИЗ
		|	ПланВидовХарактеристик.ВидыХарактеристик КАК ВидыХарактеристик
		|ГДЕ
		|	ВидыХарактеристик.Родитель В ИЕРАРХИИ(&СписокНоменклатуры)
		|	И ВидыХарактеристик.ЭтоГруппа = ЛОЖЬ
		|	И ВидыХарактеристик.СвойствоAIDA <> """"";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", РезультатAIDA.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ВыборкаСвойстваAIDA = Запрос.Выполнить().Выбрать();
	
	ПерваяСекция							= ИниФайл.Получить(0).Значение;
	СекцияСуммарнаяИнформация				= УправлениеITОтделом8УФКлиентСервер.ПолучитьСекциюИниФайла(ИниФайл, "Суммарная информация");
	НовоеМестоХранения						= МестаХранения.Добавить();
	НовоеМестоХранения.Импортировать		= Истина;
	НовоеМестоХранения.Наименование			= УправлениеITОтделом8УФКлиентСервер.ПолучитьЗначениеПеременнойСекцииИниФайла(ПерваяСекция, "Компьютер");
	НовоеМестоХранения.КлючМестаХранения	= КлючМестаХранения;
	НовоеМестоХранения.IP_1					= УправлениеITОтделом8УФКлиентСервер.ПолучитьЗначениеПеременнойСекцииИниФайла(СекцияСуммарнаяИнформация, "Сеть|Первичный адрес IP");
	
	// Обходим объекты AIDA.
	Пока ВыборкаAIDA.Следующий() Цикл
		// Обходим класс AIDA.
		
		Секция = УправлениеITОтделом8УФКлиентСервер.ПолучитьСекциюИниФайла(ИниФайл, ВыборкаAIDA.КлассAIDA);
		
		Если Секция = Ложь Тогда
			Продолжить;			
		КонецЕсли;
		
		Для Каждого Стр Из Секция Цикл
			
			Значение = Стр.Значение;
			
			// Пропускаем если свойство не найдено.
			Если СтрНайти(Значение, ВыборкаAIDA.СвойствоAIDA) = 0  Тогда
				Продолжить;				
			КонецЕсли;
			
			ГлавныйРаздел = Лев(Значение, СтрНайти(Значение, "|"));
			ЗначениеНоменклатуры = УправлениеITОтделом8УФКлиентСервер.ПолучитьЗначениеСекцииИниФайлаПоНомеру(Секция, Значение);
			
			// Провека есть ли подстроки исключения в значении номенклатуры.
			Если НЕ ПустаяСтрока(ВыборкаAIDA.ИсключенияAIDA) Тогда
				ЕстьИсключения = Ложь;
				Для Индекс = 1 По СтрЧислоСтрок(ВыборкаAIDA.ИсключенияAIDA) Цикл
					Если СтрНайти(ЗначениеНоменклатуры, СтрПолучитьСтроку(ВыборкаAIDA.ИсключенияAIDA, Индекс)) > 0 Тогда
						ЕстьИсключения = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;			
				Если ЕстьИсключения Тогда
					Продолжить;				
				КонецЕсли;
			КонецЕсли;
			
			// Добавляем номенклатуру.
			НоваяНоменклатура					= Номенклатура.Добавить();
			НоваяНоменклатура.Импортировать		= Истина;
			НоваяНоменклатура.КлючМестаХранения	= КлючМестаХранения;
			НоваяНоменклатура.КлючСтроки		= КлючСтроки;
			НоваяНоменклатура.ВидНоменклатуры	= ВыборкаAIDA.ВидНоменклатуры;
			НоваяНоменклатура.Номенклатура		= ЗначениеНоменклатуры;
			НоваяНоменклатура.Количество		= 1;
			Попытка
				Если НЕ ПустаяСтрока(ВыборкаAIDA.ПроизводительAIDA) Тогда
					НоваяНоменклатура.Производитель = УправлениеITОтделом8УФКлиентСервер.ПолучитьЗначениеПеременнойСекцииИниФайлаСГлавнымРазделом(Секция, ГлавныйРаздел, ВыборкаAIDA.ПроизводительAIDA, ВыборкаAIDA.ОпределениеБезРодительскойСекцииAIDA, ВыборкаAIDA.ПриПоискеВключатьЗначениеПеременнойСекцииAIDA);
				КонецЕсли;
			Исключение
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не найдено свойство производителя ""%1"" для ""%2""'"), ВыборкаAIDA.ПроизводительAIDA, СокрЛП(ВыборкаAIDA.КлассAIDA)));
			КонецПопытки;
			
			Попытка
				Если НЕ ПустаяСтрока(ВыборкаAIDA.СерийныйНомерAIDA) Тогда
					НоваяНоменклатура.СерийныйНомер = УправлениеITОтделом8УФКлиентСервер.ПолучитьЗначениеПеременнойСекцииИниФайлаСГлавнымРазделом(Секция, ГлавныйРаздел, ВыборкаAIDA.СерийныйНомерAIDA, ВыборкаAIDA.ОпределениеБезРодительскойСекцииAIDA, ВыборкаAIDA.ПриПоискеВключатьЗначениеПеременнойСекцииAIDA);
				КонецЕсли;					
			Исключение
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не найдено свойство серийного номера ""%1"" для ""%2""'"), ВыборкаAIDA.СерийныйНомерAIDA, СокрЛП(ВыборкаAIDA.КлассAIDA)));
			КонецПопытки;
			
			// Теперь добавляем свойства номенклатуры.
			ВыборкаСвойстваAIDA.Сбросить();
			Пока ВыборкаСвойстваAIDA.Следующий() Цикл					
				Если ВыборкаСвойстваAIDA.Ссылка.ПринадлежитЭлементу(ВыборкаAIDA.Ссылка) Тогда
					
					// Свойство является дочерним для текущей номенклатуры.
					НовоеСвойство = Свойства.Добавить();
					НовоеСвойство.КлючСтроки = КлючСтроки;
					НовоеСвойство.Импортировать = Истина;
					НовоеСвойство.Характеристика = ВыборкаСвойстваAIDA.Ссылка;
					
					Попытка
						Если ВыборкаСвойстваAIDA.ДелитьНаЧислоAIDA <> 0 Тогда
							НовоеСвойство.Значение = Окр(Число(УправлениеITОтделом8УФКлиентСервер.ПолучитьЗначениеПеременнойСекцииИниФайлаСГлавнымРазделом(Секция, ГлавныйРаздел, ВыборкаСвойстваAIDA.СвойствоAIDA, ВыборкаСвойстваAIDA.ОпределениеБезРодительскойСекцииAIDA, ВыборкаAIDA.ПриПоискеВключатьЗначениеПеременнойСекцииAIDA, НоваяНоменклатура.Номенклатура)) / ВыборкаСвойстваAIDA.ДелитьНаЧислоAIDA);
						Иначе
							НовоеСвойство.Значение = СокрЛП(УправлениеITОтделом8УФКлиентСервер.ПолучитьЗначениеПеременнойСекцииИниФайлаСГлавнымРазделом(Секция, ГлавныйРаздел, ВыборкаСвойстваAIDA.СвойствоAIDA, ВыборкаСвойстваAIDA.ОпределениеБезРодительскойСекцииAIDA, ВыборкаAIDA.ПриПоискеВключатьЗначениеПеременнойСекцииAIDA, НоваяНоменклатура.Номенклатура));
						КонецЕсли;
					Исключение
					КонецПопытки;
					
					// Для лицензий.
					Если ВыборкаСвойстваAIDA.Ссылка = ПланыВидовХарактеристик.ВидыХарактеристик.КлючПродукта Тогда
						НоваяНоменклатура.СерийныйНомер = НовоеСвойство.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
						
			КлючСтроки = КлючСтроки + 1;
		КонецЦикла;
		
	КонецЦикла;	
	
	КлючМестаХранения = КлючМестаХранения + 1;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьМестаХраненияНаСервере()
	Для Каждого Строки Из МестаХранения Цикл
		Строки.Организация = ОрганизацияПоУмолчанию;
		НайденнаяСсылка = Справочники.МестаХранения.НайтиПоНаименованию(Строки.Наименование);
		Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
			Строки.МестоХранения = НайденнаяСсылка;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	#Если ВебКлиент Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Работа в веб-клиенте не поддерживается'"));
		
	#Иначе		
	
	МестаХранения.Очистить();
	Номенклатура.Очистить();
	Свойства.Очистить();
	
	Если ВариантИмпорта = Строка(Элементы.ВариантИмпорта.СписокВыбора[0]) Тогда		
		
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			НачатьУстановкуРасширенияРаботыСФайлами();
			ПодключитьРасширениеРаботыСФайлами();
		КонецЕсли;
		
		// Выбираем все файлы в каталоге *.ini		
		НайденныеФайлы		= НайтиФайлы(КаталогAIDA64, "*.ini", Истина);
		КлючМестаХранения	= 0;
		КлючСтроки			= 0;
		ОбработаноФайлов	= 0;
		Пояснение			= НСтр("ru = 'Для прерывания нажмите Ctrl+Break'");
		
		Для Каждого Файл Из НайденныеФайлы Цикл			
			
			ТекстФайла = Новый ТекстовыйДокумент;
			ТекстФайла.Прочитать(Файл.ПолноеИмя, КодировкаТекста.ANSI);			
				
			// Загружаем данные из текстового документа.
			ЗагрузитьДанныеИзКаталогаAIDA64(ТекстФайла, КлючСтроки, КлючМестаХранения);
			
			// Отображаем прогресс загрузки.	
			ОбработаноФайлов = ОбработаноФайлов + 1;
			Состояние(СтрШаблон(НСтр("ru = 'Загрузка файла %1...'"), Файл.Имя),
				Окр(ОбработаноФайлов * 100 / НайденныеФайлы.Количество(), 0), Пояснение);			
			ОбработкаПрерыванияПользователя();
			
		КонецЦикла;		
		
	ИначеЕсли ВариантИмпорта = Строка(Элементы.ВариантИмпорта.СписокВыбора[1]) Тогда
		
		Если ВариантОпроса = 0 Тогда
			Состояние(НСтр("ru = 'Сканирование диапазона IP-адресов...'"));
			СканироватьДиапазонIPАдресов();
		ИначеЕсли ВариантОпроса = 1 Тогда
			Состояние(НСтр("ru = 'Сканирование компьютера в сети...'"));
			СканироватьКомпьютерВСети();
		ИначеЕсли ВариантОпроса = 2 Тогда
			Состояние(НСтр("ru = 'Сканирование сетевого окружения...'"));
			СканироватьСетевоеОкружение();
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Вариант сканирования не найден'"));
		КонецЕсли;
		
		Состояние(НСтр("ru = 'Загрузка номенклатуры для найденных компьютеров (WMI)...'"));
		
		// Загрузить
		ОбновитьНоменклатуруПоМестамХраненияWMI();
		
	КонецЕсли;
	
	// Заполняем места хранения и организацию.
	ОбработатьМестаХраненияНаСервере();
		
	// Делаем текущую страницу.
	Элементы.Страницы.ТекущаяСтраница = Элементы.РезультатИмпорта;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСетевоеОкружение(Команда)
		
	Состояние(НСтр("ru = 'Подождите. Происходит формирование сетевого окружения ...'"));	
	ПолучитьСетевоеОкружениеНаСервере(ДоменКомпьютерПользователь, ПеременныеОкружения, "PING");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСетевоеОкружениеНаСервере(ДоменКомпьютерПользователь, ПеременныеОкружения, ВидОпроса)
	
	// Сетевое окружение.
	СО = LOCAL_NetworkNeighborhood(ДоменКомпьютерПользователь, ПеременныеОкружения, ВидОпроса);
	СетевоеОкружение.Очистить();
	Для Каждого Строки Из СО Цикл
		ЗаполнитьЗначенияСвойств(СетевоеОкружение.Добавить(), Строки);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренестиИзТаблицыВТабличнуюЧасть(Источник, Приемник)
	
	Для Каждого СтрокаИсточника Из Источник Цикл
		
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), СтрокаИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура загружает настройки формы.
//
Процедура ЗагрузитьНастройкиФормы()
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("ИмпортДанныхИзСтороннихПрограммФорма", "СтруктураНастроек");
		
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("КаталогAIDA64") Тогда
			КаталогAIDA64 = СтруктураНастроек.КаталогAIDA64;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ВариантИмпорта") Тогда
			ВариантИмпорта = СтруктураНастроек.ВариантИмпорта;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ЗагружатьПрограммноеОбеспечениеAIDA") Тогда
			ЗагружатьПрограммноеОбеспечениеAIDA = СтруктураНастроек.ЗагружатьПрограммноеОбеспечениеAIDA;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ПользовательАдминистраторWMI") Тогда
			ПользовательАдминистраторWMI = СтруктураНастроек.ПользовательАдминистраторWMI;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ПарольАдминистраторWMI") Тогда
			ПарольАдминистраторWMI = СтруктураНастроек.ПарольАдминистраторWMI;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ВариантОпроса") Тогда
			ВариантОпроса = СтруктураНастроек.ВариантОпроса;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ОрганизацияПоУмолчанию") Тогда
			ОрганизацияПоУмолчанию = СтруктураНастроек.ОрганизацияПоУмолчанию;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("СоздаватьКарточкиНоменклатурыПриИмпорте") Тогда
			СоздаватьКарточкиНоменклатурыПриИмпорте = СтруктураНастроек.СоздаватьКарточкиНоменклатурыПриИмпорте;
		КонецЕсли;		
		Если СтруктураНастроек.Свойство("ЗагружатьПрограммноеОбеспечениеAIDA") Тогда
			ЗагружатьПрограммноеОбеспечениеAIDA = СтруктураНастроек.ЗагружатьПрограммноеОбеспечениеAIDA;
		КонецЕсли;
		
		УстановитьВидимостьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьНастройкиФормы()

&НаСервере
// Процедура сохраняет настройки формы.
//
Процедура СохранитьНастройкиФормы(СтруктураНастроек)
	
	ХранилищеНастроекДанныхФорм.Сохранить("ИмпортДанныхИзСтороннихПрограммФорма", "СтруктураНастроек", СтруктураНастроек);
	
КонецПроцедуры // СохранитьНастройкиФормы()

////////////////////////////////////////////////////////////////////////////////
// Информация о Компьютере и Текущем Пользователе.
////////////////////////////////////////////////////////////////////////////////

// Функция возвращает Имя: Компьютера, Пользователя, Домена.
//
&НаСервере
Функция LOCAL_ComputerName_UserName_UserDomain() Экспорт
	Перем Network;
	Перем C_U_D;
	
	C_U_D = Новый Структура;
	
	Попытка
		Network = Новый COMobject("Wscript.Network");
		C_U_D.Вставить("ComputerName", Network.ComputerName);
		C_U_D.Вставить("UserName", Network.UserName);
		C_U_D.Вставить("UserDomain", Network.UserDomain);
	Исключение
	КонецПопытки;
	
	Возврат C_U_D;
	
КонецФункции

// Функция, позволяющая получить Переменные окружения.
// Параметры:
//	НЕТ.
// Возвращаемое значение:
//	Структура.
//
&НаСервере
Функция LOCAL_SystemEnvironment() Экспорт
	
	ПеременныеОкружения = Новый Структура;
	Попытка
		WshShell = Новый COMОбъект("WScript.Shell");
		WshSysEnv = WshShell.Environment("Process");
		
		ПеременныеОкружения.Вставить("COMPUTERNAME"				, WshSysEnv.Item("COMPUTERNAME"));				// Имя компьютера.
		ПеременныеОкружения.Вставить("USERDOMAIN"				, WshSysEnv.Item("USERDOMAIN"));				// Домен Windows компьютера.
		ПеременныеОкружения.Вставить("LOGONSERVER"				, WshSysEnv.Item("LOGONSERVER"));				// Имя контроллера домена, использовавшегося для авторизации текущего пользователя.
		ПеременныеОкружения.Вставить("SESSIONNAME"				, WshSysEnv.Item("SESSIONNAME"));				// Хранит имя активного пользовательского сеанса. При локальном входе имеет значение "Console", при удаленном доступе имеет вид RDP-Tcp#<номер сеанса>
		
		ПеременныеОкружения.Вставить("NUMBER_OF_PROCESSORS"		, WshSysEnv.Item("NUMBER_OF_PROCESSORS"));		// Количество процессоров компьютера.
		ПеременныеОкружения.Вставить("PROCESSOR_ARCHITECTURE"	, WshSysEnv.Item("PROCESSOR_ARCHITECTURE"));	// Архитектура процессора. Возможные варианты: x86, IA64, AMD64.
		ПеременныеОкружения.Вставить("PROCESSOR_IDENTIFIER"		, WshSysEnv.Item("PROCESSOR_IDENTIFIER"));		// Описание процессора.
		ПеременныеОкружения.Вставить("PROCESSOR_LEVEL"			, WshSysEnv.Item("PROCESSOR_LEVEL"));			// Номер модели процессора.
		ПеременныеОкружения.Вставить("PROCESSOR_REVISION"		, WshSysEnv.Item("PROCESSOR_REVISION"));		// Ревизия процессора.
		
		ПеременныеОкружения.Вставить("OS"						, WshSysEnv.Item("OS"));						// Операционная Система.
		ПеременныеОкружения.Вставить("WINDIR"					, WshSysEnv.Item("WINDIR"));					// Каталог, в котором установлена Windows.
		ПеременныеОкружения.Вставить("SYSTEMDRIVE"				, WshSysEnv.Item("SYSTEMDRIVE"));				// Диск, на котором расположен корневой каталог Windows.
		ПеременныеОкружения.Вставить("SYSTEMROOT"				, WshSysEnv.Item("SYSTEMROOT"));				// Путь к корневому каталогу Windows.
		ПеременныеОкружения.Вставить("COMMONPROGRAMFILES"		, WshSysEnv.Item("COMMONPROGRAMFILES"));		// Каталог "Common Files" (обычно %ProgramFiles%\Common Files).
		ПеременныеОкружения.Вставить("COMMONPROGRAMFILESx86"	, WshSysEnv.Item("COMMONPROGRAMFILES(x86)"));	// Каталога "Common Files" в Program Files (x86) для 64-разрядной ОС (обычно %ProgramFiles(x86)%\Common Files).
		ПеременныеОкружения.Вставить("COMSPEC"					, WshSysEnv.Item("COMSPEC"));       			// Командный интерпретатор Windows.
		ПеременныеОкружения.Вставить("PATH"						, WshSysEnv.Item("PATH"));						// Путь поиска исполняемых файлов.
		ПеременныеОкружения.Вставить("TEMP"						, WshSysEnv.Item("TEMP"));						// Каталог временных файлов Windows TEMP.
		ПеременныеОкружения.Вставить("TMP"						, WshSysEnv.Item("TMP"));						// Каталог временных файлов Windows TMP.
		ПеременныеОкружения.Вставить("PUBLIC"					, WshSysEnv.Item("PUBLIC"));					// В Windows 7 возвращает путь к каталогу C:\Users\Public.
		ПеременныеОкружения.Вставить("ALLUSERSPROFILE"			, WshSysEnv.Item("ALLUSERSPROFILE"));			// Каталог общих для всех пользователей документов и настроек.
		
		ПеременныеОкружения.Вставить("USERNAME"					, WshSysEnv.Item("USERNAME"));					// Имя пользователя Windows.
		ПеременныеОкружения.Вставить("USERPROFILE"				, WshSysEnv.Item("USERPROFILE"));				// Путь к профилю текущего пользователя Windows.
		ПеременныеОкружения.Вставить("HOMEDRIVE"				, WshSysEnv.Item("HOMEDRIVE"));					// Имя диска локальной рабочей станции, связанного с основным каталогом пользователя.
		ПеременныеОкружения.Вставить("HOMEPATH"					, WshSysEnv.Item("HOMEPATH"));					// Полный путь к основному каталогу пользователя. Задается на основании расположения основного каталога.
		ПеременныеОкружения.Вставить("HOMESHARE"				, WshSysEnv.Item("HOMESHARE"));					// Сетевой путь к общему основному каталогу пользователя. Задается на основании расположения основного каталога.
	Исключение
	КонецПопытки;
	
	Возврат ПеременныеОкружения;
	
КонецФункции

// Функция получения данных сетевого окружения.
// Возвращает:
// Таблица значений со структурой: 
// №, Домен, Компьютер, IP-адрес, Комментарий.
//
// Рекомендация:
// Перед применением проверить на компьютерах
// Windows Management Instrumentation (WMI):
// 1. Состояние служб.
// 2. Разрешение в брандмауэре.
//
// Примечание:
// 1. WMI - медленнее, PING - быстрее.
// 2. WMI - безоконный, PING - с формированием окна.
//
&НаСервере
Функция LOCAL_NetworkNeighborhood(ДоменКомпьютерПользователь, ПеременныеОкружения, ВидОпроса) Экспорт
	
	Перем WshShell, ShellApplication;
	Перем Network, EntireNetwork, MicrosoftWindowsNetwork, MicrosoftWindowsNetworkItem;
	Перем Domain, Домен, DomainItem, Компьютер;
	Перем Ошибка;
	Перем ТСетевоеОкружение;
	
	ТСетевоеОкружение = Новый ТаблицаЗначений;
	ТСетевоеОкружение.Колонки.Добавить("нПП", ,"№");
	ТСетевоеОкружение.Колонки.Добавить("Домен");
	ТСетевоеОкружение.Колонки.Добавить("Компьютер");
	ТСетевоеОкружение.Колонки.Добавить("IP_1");
	ТСетевоеОкружение.Колонки.Добавить("IP_2");
	ТСетевоеОкружение.Колонки.Добавить("IP_3");
	ТСетевоеОкружение.Колонки.Добавить("IP_4");
	ТСетевоеОкружение.Колонки.Добавить("OS");
	ТСетевоеОкружение.Колонки.Добавить("USER");
	ТСетевоеОкружение.Колонки.Добавить("WMI");
	ТСетевоеОкружение.Колонки.Добавить("Комментарий");
	ТСетевоеОкружение.Колонки.Добавить("Флаг");
	
	Попытка
		
		WshShell = Новый COMОбъект("WScript.Shell");
		
		ShellApplication = Новый COMОбъект("Shell.Application");
		// Сетевое окружение.
		Network = ShellApplication.NameSpace(18);
		// Вся сеть.
		MicrosoftWindowsNetwork = Неопределено;
		
		Попытка
			// Windows XP, Windows 2003.
			
			EntireNetwork = Network.Items().Item("EntireNetwork").GetFolder;
			
			Для Каждого EntireNetworkItem Из EntireNetwork.Items() Цикл
				Если EntireNetworkItem.Name = "Microsoft Windows Network" Тогда
					MicrosoftWindowsNetwork = EntireNetworkItem.GetFolder.Items();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого MicrosoftWindowsNetworkItem Из MicrosoftWindowsNetwork Цикл
				// Рабочая группа или Домен.
				Domain = MicrosoftWindowsNetworkItem.GetFolder;
				Домен = ВРег(Domain.Title);
				Domain_Items = Domain.Items();
				Для Каждого DomainItem Из Domain_Items Цикл
					// Компьютер.
					Компьютер = ВРег(DomainItem.Name);
					Если ВидОпроса = "СПИСОК" Тогда
						НоваяСтрока = ТСетевоеОкружение.Добавить();
						НоваяСтрока.нПП = ТСетевоеОкружение.Количество();
						НоваяСтрока.Домен = Домен;
						НоваяСтрока.Компьютер = Компьютер;
						НоваяСтрока.Комментарий = НСтр("ru = 'Доступность WMI не проверялась.'");
						Продолжить;
					КонецЕсли;
					NetworkNeighborhood_Computer(ДоменКомпьютерПользователь, Домен, Компьютер, ВидОпроса, WshShell, ТСетевоеОкружение);
				КонецЦикла;
			КонецЦикла;
			
		Исключение
			// Windows Vista и выше.
			
			MicrosoftWindowsNetwork = Network.Items();
			
			Для Каждого MicrosoftWindowsNetworkItem Из MicrosoftWindowsNetwork Цикл
				// Рабочая группа или Домен.
				Домен = ПеременныеОкружения.USERDOMAIN;
				Компьютер = ВРег(MicrosoftWindowsNetworkItem.Name);
				Если ВидОпроса = "СПИСОК" Тогда
					НоваяСтрока = ТСетевоеОкружение.Добавить();
					НоваяСтрока.нПП = ТСетевоеОкружение.Количество();
					НоваяСтрока.Домен = Домен;
					НоваяСтрока.Компьютер = Компьютер;
					НоваяСтрока.Комментарий = НСтр("ru = 'Доступность WMI не проверялась.'");
					Продолжить;
				КонецЕсли;
				NetworkNeighborhood_Computer(ДоменКомпьютерПользователь, Домен, Компьютер, ВидОпроса, WshShell, ТСетевоеОкружение);
			КонецЦикла;
			
		КонецПопытки;
		
	Исключение
	КонецПопытки;
	ТСетевоеОкружение.Сортировать("Компьютер Возр");
	
	Возврат ТСетевоеОкружение;
	
КонецФункции

&НаСервере
Процедура NetworkNeighborhood_Computer(ДоменКомпьютерПользователь, Домен, Компьютер, ВидОпроса, WshShell, ТСетевоеОкружение)
	Перем Win32_NetworkAdapterConfiguration, NetworkAdapterConfiguration;
	Перем НоваяСтрока, IPAddress, Win32_OperatingSystem, ОС;
	Перем TextStreamPING, СтрокаIP, ПозицияСкобкиЛевая;
	
	Если ДоменКомпьютерПользователь.ComputerName = Компьютер Тогда
		НоваяСтрока = ТСетевоеОкружение.Добавить();
		НоваяСтрока.нПП = ТСетевоеОкружение.Количество();
		НоваяСтрока.Домен = Домен;
		НоваяСтрока.Компьютер = Компьютер;
		НоваяСтрока.IP_1 = "LocalHost";
		НоваяСтрока.WMI = NetworkNeighborhood_Computer_VerifyWMI(НоваяСтрока, Компьютер);
		Если НЕ НоваяСтрока.WMI Тогда
			НоваяСтрока.Комментарий = НСтр("ru = 'LocalHost. Проверьте настройку WMI.'");
		Иначе
			НоваяСтрока.Комментарий = НСтр("ru = 'LocalHost. WMI доступен.'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// БЫСТРО, НО ЯВНО (ВЫВОДИТ ОКНО).
	// Exec - выводит окно на экран. TextStreamPING.ReadAll()
	WshExecPING = WshShell.Exec("ping -n 1 """ + Компьютер + """");
	TextStreamPING = WshExecPING.StdOut;
	
	// IP-адреса. TTL НЕ РАССМАТРИВАЕМ.
	Пока НЕ TextStreamPING.AtEndOfStream Цикл
		СтрокаIP = TextStreamPING.ReadLine();
		ПозицияСкобкиЛевая = СтрНайти(СтрокаIP, "[");
		Если ПозицияСкобкиЛевая > 0 Тогда
			ПозицияСкобкиПравая = СтрНайти(СтрокаIP, "]");
			IPAddress = Сред(СтрокаIP, ПозицияСкобкиЛевая+1, ПозицияСкобкиПравая-ПозицияСкобкиЛевая-1);
			СтрокаТЗ = ТСетевоеОкружение.СтрНайти(IPAddress, "IP_1");
			Если НЕ СтрокаТЗ = Неопределено Тогда
				Если СтрокаТЗ.Компьютер = Компьютер Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока = ТСетевоеОкружение.Добавить();
			НоваяСтрока.нПП = ТСетевоеОкружение.Количество();
			НоваяСтрока.Домен = Домен;
			НоваяСтрока.Компьютер = Компьютер;
			НоваяСтрока.IP_1 = IPAddress;
			
			НоваяСтрока.WMI = Ложь;
			Если ВидОпроса = "PING+WMI" Тогда
				// Проверка доступности WMI на удаленном компьютере.
				// ЗАМЕДЛЕНИЕ, СКРЫТНО (Без вывода окна на экран).
				НоваяСтрока.WMI = NetworkNeighborhood_Computer_VerifyWMI(НоваяСтрока, Компьютер);
			КонецЕсли;
			
			Если ВидОпроса = "PING" Тогда
				НоваяСтрока.Комментарий = НСтр("ru = 'PING. Доступность WMI не проверялась.'");
			Иначе
				Если НЕ НоваяСтрока.WMI Тогда
					НоваяСтрока.Комментарий = НСтр("ru = 'PING. Проверьте настройку WMI.'");
				Иначе
					НоваяСтрока.Комментарий = НСтр("ru = 'PING. WMI доступен.'");
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция NetworkNeighborhood_Computer_VerifyWMI(НоваяСтрока, Компьютер)
	Перем WinMGMT, Win32_OperatingSystem, Win32_ComputerSystem;
	Перем SWbemLocator, ConnectServer;
	
	Попытка
		
		// Проверка доступности WMI на удаленном компьютере.
		// ЗАМЕДЛЕНИЕ, СКРЫТНО (Без вывода окна на экран).
		WinMGMT = ПолучитьCOMОбъект("winmgmts:\\" + Компьютер + "\root\cimv2");
				
		Win32_NetworkAdapterConfiguration = WinMGMT.ExecQuery("SELECT IPAddress from Win32_NetworkAdapterConfiguration where ipenabled = true");
		// IP-адреса.
		Для Каждого NetworkAdapterConfiguration Из Win32_NetworkAdapterConfiguration Цикл
			Если ЗначениеЗаполнено(NetworkAdapterConfiguration.IPAddress) Тогда
				Для Каждого IPAddress Из NetworkAdapterConfiguration.IPAddress Цикл
					Если НоваяСтрока.IP_1  = IPAddress Тогда
						Продолжить;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.IP_2) Тогда
						НоваяСтрока.IP_2 = IPAddress;
						Продолжить;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.IP_3) Тогда
						НоваяСтрока.IP_2 = IPAddress;
						Продолжить;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.IP_4) Тогда
						НоваяСтрока.IP_2 = IPAddress;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Win32_OperatingSystem = WinMGMT.ExecQuery("SELECT * FROM Win32_OperatingSystem");
		
		Для Каждого OperatingSystem Из Win32_OperatingSystem Цикл
			
			НоваяСтрока.OS = "" + OperatingSystem.Caption + " " + OperatingSystem.CSDVersion;
			
		КонецЦикла;
		
		Win32_ComputerSystem = WinMGMT.ExecQuery("SELECT * FROM Win32_ComputerSystem");

		Для Каждого ComputerSystem Из Win32_ComputerSystem Цикл
			
			НоваяСтрока.User = "" + ComputerSystem.UserName;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

// Создает по наименованию место хранения или возвращает найденное место хранения
&НаСервере
Функция СоздатьМестоХраненияНаСервере(Наименование, СетевоеИмя, Домен, Компьютер, ip1, ip2, ip3, ip4)
	
	НайденнаяСсылка = Справочники.МестаХранения.НайтиПоНаименованию(Наименование);
	
	Если НЕ ЗначениеЗаполнено(НайденнаяСсылка) Тогда
		НовыйЭлемент = Справочники.МестаХранения.СоздатьЭлемент();
		НовыйЭлемент.ВидМестаХранения = Справочники.ВидыМестХранения.РабочееМесто;
		НовыйЭлемент.Наименование = Наименование;
		НовыйЭлемент.СетевоеИмя = Компьютер;
		НовыйЭлемент.СетевойПользователь = СетевоеИмя;
		
		Если НЕ ПустаяСтрока(ip1) Тогда
			НоваяСтрока = НовыйЭлемент.СетевыеИнтерфейсы.Добавить();
			НоваяСтрока.IPАдрес = ip1;			
		КонецЕсли;
		Если НЕ ПустаяСтрока(ip2) Тогда
			НоваяСтрока = НовыйЭлемент.СетевыеИнтерфейсы.Добавить();
			НоваяСтрока.IPАдрес = ip2;			
		КонецЕсли;
		Если НЕ ПустаяСтрока(ip3) Тогда
			НоваяСтрока = НовыйЭлемент.СетевыеИнтерфейсы.Добавить();
			НоваяСтрока.IPАдрес = ip3;			
		КонецЕсли;
		Если НЕ ПустаяСтрока(ip4) Тогда
			НоваяСтрока = НовыйЭлемент.СетевыеИнтерфейсы.Добавить();
			НоваяСтрока.IPАдрес = ip4;			
		КонецЕсли;
		
		НовыйЭлемент.Картинка = Новый ХранилищеЗначения(БиблиотекаКартинок.вмхРабочееМесто);		
		НовыйЭлемент.НавСсылка = ПолучитьНавигационнуюСсылку(НовыйЭлемент, "Картинка");
		НовыйЭлемент.Записать();
		// Необходимо записать второй раз!
		НовыйЭлемент.Записать();
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		Возврат НайденнаяСсылка;
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПроизводителяПоНаименованию(Наименование)
	
	Результат = Справочники.Производители.НайтиПоНаименованию(Наименование, Истина);
	Если Результат = Неопределено Тогда
		Результат = Справочники.Производители.СоздатьЭлемент();
		Результат.Наименование = Наименование;
		Результат.Записать();
		
		Результат = Результат.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеХарактеристики(Наименование, Владелец)
	
	Результат = Справочники.ЗначенияХарактеристик.НайтиПоНаименованию(Наименование, Истина,, Владелец);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Справочники.ЗначенияХарактеристик.СоздатьЭлемент();
		Результат.Наименование = Наименование;
		Результат.Владелец = Владелец;
		Результат.Записать();
		
		Результат = Результат.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьКЧислу(ЧислоСтрокой)
	// Удаляем лишние символы из строки
	Результат = "";
	Для Индекс = 1 По СтрДлина(ЧислоСтрокой) Цикл
		Если СтрНайти("0123456789.", Сред(ЧислоСтрокой, Индекс, 1)) > 0 Тогда
			Результат = Результат + Сред(ЧислоСтрокой, Индекс, 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		РезультатЧисло = Число(Результат);
	Исключение
		РезультатЧисло = 0;
	КонецПопытки;	
	
	Возврат РезультатЧисло;
КонецФункции

&НаСервере
Функция СоздатьПоступлениеНаСервере()
	
	СозданныеДокументы = Новый Массив();
	
	Для Каждого Строки Из МестаХранения Цикл
		Если Строки.Импортировать Тогда
			НовыйДок = Неопределено;
			Для Каждого Строки2 Из Номенклатура Цикл
				
				Если Строки.КлючМестаХранения = Строки2.КлючМестаХранения И Строки2.Импортировать Тогда
					
					Если НовыйДок = Неопределено Тогда
						НовыйДок = Документы.Поступление.СоздатьДокумент();
						НовыйДок.Дата = ТекущаяДатаСеанса();
						НовыйДок.Комментарий = "<" + НСтр("ru = 'Импортировано обработкой 'Импорт данных из сторонних программ'") + ">";
												
						СЛС.ЗаполнитьШапкуОбъекта(НовыйДок);
						
						НовыйДок.Организация = Строки.Организация;
						НовыйДок.МестоХранения = Строки.МестоХранения;
						НовыйДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
						НовыйДок.ВалютаДокумента = УправлениеITОтделом8УФПовтИсп.ПолучитьОсновнуюВалюту();
						НовыйДок.Курс = 1;
						НовыйДок.Кратность = 1;						
					КонецЕсли;
										
					// Получаем номенклатуру, если надо создаем.
					НоменклатураДок = Справочники.Номенклатура.НайтиПоНаименованию(Строки2.Номенклатура, Истина);
					Если НЕ ЗначениеЗаполнено(НоменклатураДок) Тогда						
						НоменклатураДок 					= Справочники.Номенклатура.СоздатьЭлемент();
						НоменклатураДок.Родитель 			= Строки2.ВидНоменклатуры.ГруппаЗаписиНоменклатуры;
						НоменклатураДок.Наименование 		= Строки2.Номенклатура;
						НоменклатураДок.ВидНоменклатуры 	= Строки2.ВидНоменклатуры;
						НоменклатураДок.ЕдиницаИзмерения 	= Справочники.КлассификаторЕдиницИзмерения.шт;
						НоменклатураДок.Производитель 		= ПолучитьПроизводителяПоНаименованию(СокрЛП(Строки2.Производитель));
						НоменклатураДок.СтавкаНДС 			= УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
						НоменклатураДок.Записать();
						
						НоменклатураДок = НоменклатураДок.Ссылка;
						
						// Добавляем характеристики к номенклатуре.
						Попытка
							НаборЗаписей					= РегистрыСведений.Характеристики.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Объект.Установить(НоменклатураДок);
							Записать = Ложь;
							Для Каждого Строки3 Из Свойства Цикл
								Если Строки3.Импортировать И Строки3.КлючСтроки = Строки2.КлючСтроки Тогда
									Запись                   = НаборЗаписей.Добавить();
									Запись.Объект            = НоменклатураДок;
									Запись.ВидХарактеристики = Строки3.Характеристика;
									
									Если Строки3.Характеристика.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияХарактеристик")) Тогда
										Запись.Значение      = ПолучитьЗначениеХарактеристики(СокрЛП(Строки3.Значение), Строки3.Характеристика);
									ИначеЕсли Строки3.Характеристика.ТипЗначения.СодержитТип(Тип("Число")) Тогда
										Запись.Значение      = ПреобразоватьКЧислу(Строки3.Значение);
									Иначе
										Запись.Значение      = Строки3.Значение;
									КонецЕсли;
									
									Записать = Истина;
								КонецЕсли;
							КонецЦикла;
						
							// Запишем набор записей.
							Если Записать Тогда
								НаборЗаписей.Записать();
							КонецЕсли;
						Исключение
						КонецПопытки;							
						
					КонецЕсли;
					
					
					// Добавляем в документ.
					НоваяСтрока 						= НовыйДок.Номенклатура.Добавить();
					НоваяСтрока.Номенклатура 			= НоменклатураДок;
					// Создаем карточку если необходимо и вставляем в документ.
					Если СоздаватьКарточкиНоменклатурыПриИмпорте Тогда
						КарточкаНоменклатуры			= УправлениеITОтделом8УФ.СоздатьКарточкуНоменклатуры(НоменклатураДок, Строки2.СерийныйНомер);
						НоваяСтрока.КарточкаНоменклатуры= КарточкаНоменклатуры;
						
						Попытка							
							// Установка характеристик для карточки.
							НаборЗаписей                 = РегистрыСведений.Характеристики.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Объект.Установить(КарточкаНоменклатуры);
							Записать = Ложь;
							Для Каждого Строки3 Из Свойства Цикл
								Если Строки3.Импортировать И Строки3.КлючСтроки = Строки2.КлючСтроки Тогда
									Запись                   = НаборЗаписей.Добавить();
									Запись.Объект            = КарточкаНоменклатуры;
									Запись.ВидХарактеристики = Строки3.Характеристика;
									
									Если Строки3.Характеристика.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияХарактеристик")) Тогда
										Запись.Значение      = ПолучитьЗначениеХарактеристики(СокрЛП(Строки3.Значение), Строки3.Характеристика);
									ИначеЕсли Строки3.Характеристика.ТипЗначения.СодержитТип(Тип("Число")) Тогда
										Запись.Значение      = ПреобразоватьКЧислу(Строки3.Значение);
									Иначе
										Запись.Значение      = Строки3.Значение;
									КонецЕсли;
									
									Записать = Истина;
								КонецЕсли;
							КонецЦикла;
							
							// Запишем набор записей.
							Если Записать Тогда
								НаборЗаписей.Записать();
							КонецЕсли;
						Исключение
						КонецПопытки;
						
					КонецЕсли;															
					НоваяСтрока.СтавкаНДС 				= НоменклатураДок.СтавкаНДС;
					НоваяСтрока.Количество 				= Строки2.Количество;
					НоваяСтрока.ЕдиницаИзмерения 		= НоменклатураДок.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если надо записываем.
			Если НовыйДок <> Неопределено Тогда
				НовыйДок.Записать(РежимЗаписиДокумента.Запись);
				СозданныеДокументы.Добавить(НовыйДок.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СозданныеДокументы;
	
КонецФункции

&НаСервере
Функция СоздатьИнвентаризациюНаСервере()
	
	СозданныеДокументы = Новый Массив();
	
	Для Каждого Строки Из МестаХранения Цикл
		Если Строки.Импортировать Тогда
			НовыйДок = Неопределено;
			Для Каждого Строки2 Из Номенклатура Цикл
				
				Если Строки.КлючМестаХранения = Строки2.КлючМестаХранения И Строки2.Импортировать Тогда
					
					Если НовыйДок = Неопределено Тогда
						НовыйДок				= Документы.Инвентаризация.СоздатьДокумент();
						НовыйДок.Дата 			= ТекущаяДатаСеанса();
						НовыйДок.Комментарий 	= "<" + НСтр("ru = 'Импортировано обработкой ""Импорт данных из сторонних программ""'") + ">";
										
						СЛС.ЗаполнитьШапкуОбъекта(НовыйДок);
						
						НовыйДок.Организация 	= Строки.Организация;
						НовыйДок.МестоХранения 	= Строки.МестоХранения;			
						
						// Заполняем по остаткам
						НовыйДок.Номенклатура.Загрузить(Документы.Инвентаризация.ТаблицаИнвентаризацииПоОстаткам(НовыйДок));
						
						// Обнулим фактические остатки.
						Для Каждого Строки3 Из НовыйДок.Номенклатура Цикл
							Строки3.Количество 	= 0;
							Строки3.Сумма 		= 0;
							Строки3.Отклонение 	= Строки3.Количество - Строки3.КоличествоУчет;
							Строки3.МестоХранения = Строки.МестоХранения;
						КонецЦикла;
					КонецЕсли;
										
					// Получаем номенклатуру, если надо создаем.
					НоменклатураДок = Справочники.Номенклатура.НайтиПоНаименованию(Строки2.Номенклатура, Истина);
					Если НЕ ЗначениеЗаполнено(НоменклатураДок) Тогда						
						НоменклатураДок 					= Справочники.Номенклатура.СоздатьЭлемент();
						НоменклатураДок.Родитель 			= Строки2.ВидНоменклатуры.ГруппаЗаписиНоменклатуры;
						НоменклатураДок.Наименование 		= Строки2.Номенклатура;
						НоменклатураДок.ВидНоменклатуры 	= Строки2.ВидНоменклатуры;
						НоменклатураДок.ЕдиницаИзмерения 	= Справочники.КлассификаторЕдиницИзмерения.шт;
						НоменклатураДок.Производитель 		= ПолучитьПроизводителяПоНаименованию(СокрЛП(Строки2.Производитель));
						НоменклатураДок.СтавкаНДС 			= УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
						НоменклатураДок.Записать();
						
						НоменклатураДок = НоменклатураДок.Ссылка;
						
						// Добавляем характеристики к номенклатуре						
						НаборЗаписей                 = РегистрыСведений.Характеристики.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Объект.Установить(НоменклатураДок);
						Записать = Ложь;
						Для Каждого Строки3 Из Свойства Цикл
							Если Строки3.Импортировать И Строки3.КлючСтроки = Строки2.КлючСтроки Тогда
								Запись                   = НаборЗаписей.Добавить();
								Запись.Объект            = НоменклатураДок;
								Запись.ВидХарактеристики = Строки3.Характеристика;
								
								Если Строки3.Характеристика.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияХарактеристик")) Тогда
									Запись.Значение      = ПолучитьЗначениеХарактеристики(СокрЛП(Строки3.Значение), Строки3.Характеристика);
								ИначеЕсли Строки3.Характеристика.ТипЗначения.СодержитТип(Тип("Число")) Тогда
									Запись.Значение      = ПреобразоватьКЧислу(Строки3.Значение);
								Иначе
									Запись.Значение      = Строки3.Значение;
								КонецЕсли;
								
								Записать = Истина;
							КонецЕсли;
						КонецЦикла;
						
						// Запишем набор записей.
						Если Записать Тогда
							НаборЗаписей.Записать();
						КонецЕсли;						
						
					КонецЕсли;
					
					// Ищем в документе указанную номенклатуру.
					Найдена = Ложь;
					Добавлена = Ложь;
					Для Каждого Строки3 Из НовыйДок.Номенклатура Цикл
						Если Строки3.Номенклатура = НоменклатураДок Тогда
							Найдена = Истина;
							Если Строки3.Количество < Строки3.КоличествоУчет Тогда
								Строки3.Количество = Строки3.Количество + Строки2.Количество;
								Строки3.Отклонение = Строки3.Количество - Строки3.КоличествоУчет;
								Добавлена = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					// Нашли но не добавили т.к. везде переизбыток, значит это излишки.
					Если (Найдена И Не Добавлена) ИЛИ (Не Найдена) Тогда
						// Добавляем в документ
						НоваяСтрока 						= НовыйДок.Номенклатура.Добавить();
						НоваяСтрока.Номенклатура 			= НоменклатураДок;
						// Создаем карточку если необходимо и вставляем в документ.
						Если СоздаватьКарточкиНоменклатурыПриИмпорте Тогда
							КарточкаНоменклатуры			= УправлениеITОтделом8УФ.СоздатьКарточкуНоменклатуры(НоменклатураДок, Строки2.СерийныйНомер);
							НоваяСтрока.КарточкаНоменклатуры= КарточкаНоменклатуры;
							
							// Установка характеристик для карточки.
							НаборЗаписей                 = РегистрыСведений.Характеристики.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Объект.Установить(КарточкаНоменклатуры);
							Записать = Ложь;
							Для Каждого Строки3 Из Свойства Цикл
								Если Строки3.Импортировать И Строки3.КлючСтроки = Строки2.КлючСтроки Тогда
									Запись                   = НаборЗаписей.Добавить();
									Запись.Объект            = КарточкаНоменклатуры;
									Запись.ВидХарактеристики = Строки3.Характеристика;
									
									Если Строки3.Характеристика.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияХарактеристик")) Тогда
										Запись.Значение      = ПолучитьЗначениеХарактеристики(СокрЛП(Строки3.Значение), Строки3.Характеристика);
									ИначеЕсли Строки3.Характеристика.ТипЗначения.СодержитТип(Тип("Число")) Тогда
										Запись.Значение      = ПреобразоватьКЧислу(Строки3.Значение);
									Иначе
										Запись.Значение      = Строки3.Значение;
									КонецЕсли;
									
									Записать = Истина;
								КонецЕсли;
							КонецЦикла;
							
							// Запишем набор записей.
							Если Записать Тогда
								НаборЗаписей.Записать();
							КонецЕсли;
							
						КонецЕсли;															
						НоваяСтрока.Количество 				= Строки2.Количество;
						НоваяСтрока.Отклонение				= НоваяСтрока.Количество - НоваяСтрока.КоличествоУчет;
						НоваяСтрока.ЕдиницаИзмерения 		= НоменклатураДок.ЕдиницаИзмерения;
						НоваяСтрока.РазрешатьУдалять		= Истина;
					КонецЕсли;
					
				КонецЕсли;
					
			КонецЦикла;
			
			// Если надо записываем.
			Если НовыйДок <> Неопределено Тогда
				НовыйДок.Записать(РежимЗаписиДокумента.Запись);
				СозданныеДокументы.Добавить(НовыйДок.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СозданныеДокументы;
	
КонецФункции

#КонецОбласти
