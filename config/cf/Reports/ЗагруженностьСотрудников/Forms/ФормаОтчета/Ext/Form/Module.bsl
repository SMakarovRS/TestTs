
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Период.Вариант		= ВариантСтандартногоПериода.Последние7Дней;
	Детализация			= НСтр("ru = 'Час'");
	Кратность			= 1;
	ЗаполнитьЭтапы();
	ЗагрузитьНастройкиФормы();
	СформироватьНаСервере();
	ПоказыватьСкрыватьЭтапы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиОтчета();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияСкрытьНажатие(Элемент)
	
	ПоказатьСкрытьЭтапы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьНажатие(Элемент)
	
	ПоказатьСкрытьЭтапы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если Период.ДатаНачала > Период.ДатаОкончания Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дата начала больше даты окончания периода'"));	
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Период не задан'"));
		Возврат;
	КонецЕсли;
	Если Кратность = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Кратность больше нуля'"));
		Возврат;
	КонецЕсли;
	
	СформироватьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьУстановитьОтметку(Команда)	
	
	Если Этапы.Количество() > 0 Тогда
		Для Каждого СтрокаЭтапы Из Этапы Цикл			
			СтрокаЭтапы.Отметка = Команда.Имя = "ОтметитьВсеЭтапы";	
		КонецЦикла;			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьЦветЭтапа(Этап)
	
	Попытка
		РедактируемыйЦветТекста = РаботаСЦветомКлиентСервер.HexВЦвет(Этап.ЦветТекста);			
	Исключение
		РедактируемыйЦветТекста = WebЦвета.Черный;
	КонецПопытки;
	
	Возврат РедактируемыйЦветТекста;
	
КонецФункции

&НаСервере
Процедура СформироватьНаСервере()
	
	// Строим даты.
	Диаграмма.Очистить();
	Диаграмма.ПоддержкаМасштаба					= ПоддержкаМасштабаДиаграммыГанта.Авто;
	Диаграмма.АвтоОпределениеПолногоИнтервала	= Ложь;
	Диаграмма.АвтоУстановкаТекстаТочек			= Ложь;
	Диаграмма.ОтображатьЛегенду					= Ложь;
	Диаграмма.ОбластьЗаголовка.Право			= 0;
	Диаграмма.ОбластьПостроения.Право			= 1;	
	Диаграмма.УстановитьПолныйИнтервал(Период.ДатаНачала, Период.ДатаОкончания);
	
	// Даты и время.
	Если Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Количество() = 0 Тогда
		Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	КонецЕсли;	
	Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы[0].Единица		= ТипЕдиницыШкалыВремени.День;
	Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы[0].ЛинииДелений	= Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
	Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы[0].ЦветЛиний		= WebЦвета.Черный;
	
	Если Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Количество() = 1 Тогда
		Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	КонецЕсли;
	
	Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы[1].Единица		= ТипЕдиницыШкалыВремени[Детализация];
	Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы[1].Кратность		= Кратность;
	
	Диаграмма.ИнтервалыФона.Очистить();
	
	// Отображаем текущую дату +15 минут.
	Диаграмма.ИнтервалыФона.Добавить(ТекущаяДатаСеанса(), ТекущаяДатаСеанса() + 900).Цвет = WebЦвета.ЗеленаяЛужайка;
	
	МассивЭтапов = Новый Массив;
	Если Этапы.Количество() > 0 Тогда
		Для Каждого СтрокаЭтап Из Этапы Цикл
			Если СтрокаЭтап.Отметка Тогда
				МассивЭтапов.Добавить(СтрокаЭтап.Этап);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
		
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаданиеЭтапы.Ссылка КАК Документ,
		|	ВЫБОР
		|		КОГДА ЗаданиеЭтапы.ДатаНачала < &ДатаНачала
		|			ТОГДА &ДатаНачала
		|		ИНАЧЕ ЗаданиеЭтапы.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ЗаданиеЭтапы.ДатаОкончания > &ДатаОкончания
		|			ТОГДА &ДатаОкончания
		|		ИНАЧЕ ЗаданиеЭтапы.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания,
		|	ЗаданиеЭтапы.Этап КАК Этап,
		|	ВЫБОР
		|		КОГДА ЗаданиеЭтапы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА 0
		|		ИНАЧЕ РАЗНОСТЬДАТ(ЗаданиеЭтапы.ДатаНачала, ЗаданиеЭтапы.ДатаОкончания, ЧАС)
		|	КОНЕЦ КАК ВремяВыполнения,
		|	ЗаданиеЭтапы.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ЗаданиеЭтапы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтапВыполнен
		|ИЗ
		|	Документ.Задание.Этапы КАК ЗаданиеЭтапы
		|ГДЕ
		|	(ЗаданиеЭтапы.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИЛИ ЗаданиеЭтапы.ДатаОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|	И ЗаданиеЭтапы.Ссылка.Проведен = ИСТИНА
		|	И ЗаданиеЭтапы.Ссылка.Организация = &Организация
		|	И ЗаданиеЭтапы.Этап В(&МассивЭтапов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаданиеЭтапы.Ссылка.Дата,
		|	ДатаНачала,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданиеИсполнители.Исполнитель КАК Исполнитель,
		|	ЗаданиеИсполнители.ДатаНачала КАК ДатаНачала,
		|	ЗаданиеИсполнители.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Документ.Задание.Исполнители КАК ЗаданиеИсполнители
		|ГДЕ
		|	(ЗаданиеИсполнители.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИЛИ ЗаданиеИсполнители.ДатаОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|	И ЗаданиеИсполнители.Ссылка.Проведен = ИСТИНА
		|	И НЕ ЗаданиеИсполнители.Исполнитель В (&МассивПустыхИсполнителей)
		|	И ЗаданиеИсполнители.Ссылка.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаданиеЭтапы.Ссылка.Организация = &Организация", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаданиеИсполнители.Ссылка.Организация = &Организация", "");
	КонецЕсли;
	
	Если МассивЭтапов.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("МассивЭтапов", МассивЭтапов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаданиеЭтапы.Этап В(&МассивЭтапов)", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	МассивПустыхИсполнителей = Новый Массив;
	МассивПустыхИсполнителей.Добавить(Справочники.Пользователи.ПустаяСсылка());
	МассивПустыхИсполнителей.Добавить(Справочники.ГруппыПользователей.ПустаяСсылка());
	МассивПустыхИсполнителей.Добавить(Неопределено);
	Запрос.УстановитьПараметр("МассивПустыхИсполнителей", МассивПустыхИсполнителей);
	
	МассивРезультатов		= Запрос.ВыполнитьПакет();
	ТЗДанные				= МассивРезультатов[0].Выгрузить();
	ТЗИсполнители			= МассивРезультатов[1].Выгрузить(); 
	ТЗДанные.Колонки.Добавить("Исполнитель");
	
	Для Каждого Строка Из ТЗДанные Цикл
		Для Каждого Стр Из ТЗИсполнители Цикл 	
			Если  Строка.ДатаОкончания = Стр.ДатаОкончания Тогда  
				Строка.Исполнитель = Стр.Исполнитель;
				Продолжить;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	СерияНагрузка		= Диаграмма.Серии.Добавить(); 
	СерияНагрузка.Текст	= "Нагрузка";
	СерияНагрузка.Цвет	= WebЦвета.Зеленый;
	
	Исполнители = ТЗДанные.Скопировать();
	Исполнители.Свернуть("Исполнитель", "ВремяВыполнения");
	Исполнители.Сортировать("Исполнитель");	
	Для Каждого Строки Из Исполнители Цикл
		Если Строки.Исполнитель <> Неопределено Тогда 
			ТочкаИсполнитель = Диаграмма.УстановитьТочку(ЗначениеВСтрокуВнутр(Строки.Исполнитель));
			ТочкаИсполнитель.Текст = Строка(Строки.Исполнитель) + " (" + СтрШаблон(НСтр("ru = 'Нагрузка: %1 ч.)'"), Строки.ВремяВыполнения) + ")";
			ТочкаИсполнитель.Расшифровка = Строки.Исполнитель;
				
			Для Каждого Нагрузка Из ТЗДанные Цикл
				
				// Добавляем точку процесса.
				ТочкаПроцесс			= Диаграмма.УстановитьТочку(ТочкаИсполнитель.Значение + ЗначениеВСтрокуВнутр(Нагрузка.Документ), ТочкаИсполнитель.Значение);
				ТочкаПроцесс.Текст		= Нагрузка.Документ;
				ТочкаПроцесс.Расшифровка= Нагрузка.Документ;
				ТочкаПроцесс.ЦветФона	= WebЦвета.АнтикБелый;
				
				// Добавляем точку этапа.
				ТочкаЭтап				= Диаграмма.УстановитьТочку(ТочкаПроцесс.Значение + ЗначениеВСтрокуВнутр(Нагрузка.Этап), ТочкаПроцесс.Значение);
				ТочкаЭтап.Текст			= ?(ЗначениеЗаполнено(Нагрузка.Этап), Нагрузка.Этап, НСтр("ru = 'Не задан этап'"));
				ТочкаЭтап.Расшифровка	= Нагрузка.Документ;
				ТочкаЭтап.ЦветФона		= WebЦвета.Роса;
				
				ТочкаФакта				= Диаграмма.ПолучитьЗначение(ТочкаИсполнитель, СерияНагрузка);
				
				// Добавляем фактическую нагрузку.
				Интервал				= ТочкаФакта.Добавить(); 
				Интервал.Расшифровка	= Нагрузка.Документ;
				Интервал.Текст			= Строка(Нагрузка.Документ) + "_" + Строка(Нагрузка.Этап) + "_" + Строка(Нагрузка.Исполнитель);
				Интервал.Начало			= Нагрузка.ДатаНачала; 
				Интервал.Конец			= Нагрузка.ДатаОкончания; 
				Интервал.Цвет			= ПолучитьЦветЭтапа(Нагрузка.Этап);	
				
				ТочкаФакта				= Диаграмма.ПолучитьЗначение(ТочкаПроцесс, СерияНагрузка);
				
				// Добавляем фактическую нагрузку.
				Интервал				= ТочкаФакта.Добавить(); 
				Интервал.Расшифровка	= Нагрузка.Документ;
				Интервал.Текст			= Строка(Нагрузка.Документ) + "_" + Строка(Нагрузка.Этап) + "_" + Строка(Нагрузка.Исполнитель);
				Интервал.Начало			= Нагрузка.ДатаНачала; 
				Интервал.Конец			= Нагрузка.ДатаОкончания;
				Интервал.Цвет			= ПолучитьЦветЭтапа(Нагрузка.Этап);
				
				ТочкаФакта				= Диаграмма.ПолучитьЗначение(ТочкаЭтап, СерияНагрузка);
				
				// Добавляем фактическую нагрузку.
				Интервал				= ТочкаФакта.Добавить(); 
				Интервал.Расшифровка	= Нагрузка.Документ;
				Интервал.Текст			= Строка(Нагрузка.Документ) + "_" + Строка(Нагрузка.Этап) + "_" + Строка(Нагрузка.Исполнитель);
				Интервал.Начало			= Нагрузка.ДатаНачала; 
				Интервал.Конец			= Нагрузка.ДатаОкончания;
				Интервал.Цвет			= ПолучитьЦветЭтапа(Нагрузка.Этап);
				
			КонецЦикла;
			
			Если Разворачивать Тогда
				Диаграмма.РазвернутьТочку(ТочкаИсполнитель,Истина );
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПроцессов.Ссылка,
		|	ЭтапыПроцессов.НавСсылка
		|ИЗ
		|	Справочник.ЭтапыПроцессов КАК ЭтапыПроцессов
		|ГДЕ
		|	НЕ ЭтапыПроцессов.ЭтоГруппа
		|	И НЕ ЭтапыПроцессов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтапыПроцессов.Наименование";
	
	РезультатЗапроса 	   	= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока 		  = Этапы.Добавить();		
		НоваяСтрока.Этап	  = ВыборкаДетальныеЗаписи.Ссылка;
		НоваяСтрока.НавСсылка = ВыборкаДетальныеЗаписи.НавСсылка;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиОтчета()
	
	СтруктураНастроек = Новый Структура;
	МассивЭтапов	  = Новый Массив;
	Для Каждого СтрокаТаблицы Из Этапы Цикл
		Если СтрокаТаблицы.Отметка Тогда
			МассивЭтапов.Добавить(СтрокаТаблицы.Этап);
		КонецЕсли;	
	КонецЦикла;	
	СтруктураНастроек.Вставить("МассивЭтапов", МассивЭтапов);
	СохранитьНастройкиФормы(СтруктураНастроек);
	
КонецПроцедуры	

&НаСервере
// Процедура сохраняет настройки формы.
//
Процедура СохранитьНастройкиФормы(СтруктураНастроек)
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь 			= Пользователи.ТекущийПользователь();
	НастройкиТекущегоПользователя 	= "ОтчетЗагруженностьСотрудников_Настройки_"+ ТекущийПользователь.Наименование;
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, НастройкиТекущегоПользователя, СтруктураНастроек);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // СохранитьНастройкиФормы

&НаСервере
// Загружает настройки формы. 
Процедура ЗагрузитьНастройкиФормы()
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь 			= Пользователи.ТекущийПользователь();
	НастройкиТекущегоПользователя 	= "ОтчетЗагруженностьСотрудников_Настройки_"+ ТекущийПользователь.Наименование;
	Настройки 						= ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы, НастройкиТекущегоПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Настройки <> Неопределено И Настройки.Свойство("МассивЭтапов") Тогда		
		МассивЭтапов = Настройки.МассивЭтапов;
		Для Каждого мЭтап Из МассивЭтапов Цикл
			ОтборСтрок  = Новый Структура("Этап", мЭтап);
			МассивСтрок = Этапы.НайтиСтроки(ОтборСтрок);
			Если МассивСтрок.Количество() > 0 Тогда
				МассивСтрок[0].Отметка = Истина;
			КонецЕсли;	
		КонецЦикла;		
	Иначе
		Для Каждого СтрокаЭтап Из Этапы Цикл
			СтрокаЭтап.Отметка = Истина;
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьЭтапы()
	
	ПоказыватьСкрыватьЭтапы = Не ПоказыватьСкрыватьЭтапы;
	Если ПоказыватьСкрыватьЭтапы Тогда
		Элементы.ГруппаПанельРазвернуть.Видимость	= Ложь;
		Элементы.ГруппаПраво.Видимость				= Истина;
	Иначе
		Элементы.ГруппаПанельРазвернуть.Видимость	= Истина;
		Элементы.ГруппаПраво.Видимость				= Ложь;
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти



