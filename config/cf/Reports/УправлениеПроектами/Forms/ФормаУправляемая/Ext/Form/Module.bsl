
#Область ОписаниеПеременных

&НаКлиенте
Перем пОбластьПриемникПриПеретаскивании;

&НаКлиенте
Перем НеСпрашиватьОСохраненииПроектаВФайл;

&НаКлиенте
Перем пПланировщикТекущийРесурс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Справочники.ПроектныеЗадачи) Тогда
		ТолькоПросмотр = Истина;
		Элементы.СохранениеПроекта.Доступность = Ложь;
	КонецЕсли;
	
	// Номерка колонок
	НомерКолонкиНазвание 		= 2;
	НомерКолонкиДлительность	= 3;
	НомерКолонкиНачало 			= 4;
	НомерКолонкиОкончание 		= 5;

	НомерКолонкиПроцентЗавершения=6;

	НомерКолонкиНачалоФакт 		= 7;
	НомерКолонкиОкончаниеФакт 	= 8;

	НомерКолонкиДиаграммыГанта 	= 28;
	НомерКолонкиИмяРисунка 		= 10;
	НомерКолонкиРодитель 		= 11;
	НомерКолонкиПредшествинники = 12;
	НомерКолонкиЗадача 			= 13;
	НомерКолонкиНачалоПриРучномВводе = 14;
	НомерКолонкиРесурсыПредставление = 15;
	НомерКолонкиРесурсы 		= 16;
	НомерКолонкиЗатраты 		= 17;
	НомерКолонкиДопЗатраты 		= 18;

	НомерКолонкиСтоимость 		= 19;
	НомерКолонкиДопСтоимость	= 20;

	НомерКолонкиЗатратыФакт 	= 21;
	НомерКолонкиСтоимостьФакт	= 22;

	НомерКолонкиОписание        = 25;
	НомерКолонкиGUID        	= 26;
	НомерКолонкиВеха			= 27;

	НомерКолонкиДатаОграничения = 24;
	НомерКолонкиВидОграничения  = 23;

	// Вспомогательные переменные
	ПоследняяСтрока 			= 10;
	КоэффициентШириныКолонки 	= 1.85;
	КоэффициентВысотыСтроки 	= 3.8805555;

	пОбластьПриемникПриПеретаскивании = Неопределено;
	ПустаяДата 					= Дата('00010101');
	ТекущийПользовательСтрока 	= Пользователи.ТекущийПользователь();

	// Различные флаги
	ОтображатьДиаграммуГанта 	= Истина;
	пИзменятьОтступ 			= Ложь;
	Модифицированность			= Ложь;

	БылоПереключениеНаГлавнуюСтраницу = Истина;
	
	Элементы.ТабличноеПолеРесурсыТипРесурса.СписокВыбора.Добавить(Перечисления.ТипыРесурсовПроектов.Трудовой, , , 
		БиблиотекаКартинок.Пользователь);
	Элементы.ТабличноеПолеРесурсыТипРесурса.СписокВыбора.Добавить(Перечисления.ТипыРесурсовПроектов.Материальный, , ,
		БиблиотекаКартинок.Справочник);
	
	ЦветФонаФормы  = ЦветаСтиля.ЦветФонаФормы;
	ЦветФонаКнопки = ЦветаСтиля.ЦветФонаКнопки;
	
	Элементы.ПерейтиНаСтраницуДиаграммыГанта.ЦветФона = ЦветФонаФормы;
	Элементы.ПерейтиНаСтраницуОтчетов.ЦветФона 		  = ЦветФонаКнопки;
	Элементы.ПерейтиНаСтраницуРесурсов.ЦветФона 	  = ЦветФонаКнопки;
	Элементы.ПерейтиНаСтраницуКалендарь.ЦветФона 	  = ЦветФонаКнопки;
	
	тдПроект.Очистить();
	ОбработкаОбъект 		= РеквизитФормыВЗначение("Объект"); 
	тдПроект.Вывести(ОбработкаОбъект.ПолучитьМакет("пмГант_Гант"));
	тдПроект.ФиксацияСверху = 2;
	тдПроект.ФиксацияСлева 	= 1;
	тдПроект.Защита 		= Ложь;
	тдПроект.ТолькоПросмотр = Ложь;
	Элементы.тдПроект.Редактирование = Истина;	
	ВосстановитьЦветаНаСервере();
	
	Если Параметры.Свойство("Проект") Тогда
		Объект.Проект = Параметры.Проект;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	пСоответствиеКартинокПоОбластям  = Новый Соответствие;
	СоответствиеКартинокПоОбластям   = Новый ФиксированноеСоответствие(пСоответствиеКартинокПоОбластям);
	пСоответствиеОбластейПоКартинкам = Новый Соответствие;
	СоответствиеОбластейПоКартинкам  = Новый ФиксированноеСоответствие(пСоответствиеОбластейПоКартинкам);
	
	пВидыСвязей = Новый Структура;
	пВидыСвязей.Вставить("ОН", 0);
	пВидыСвязей.Вставить("ОО", 1);
	пВидыСвязей.Вставить("НО", 2);
	пВидыСвязей.Вставить("НН", 3);
	ВидыСвязей = Новый ФиксированнаяСтруктура(пВидыСвязей);

	пВидыОграничений = Новый Структура;
	пВидыОграничений.Вставить("КМР", 0);
	пВидыОграничений.Вставить("КМП", 1);
	пВидыОграничений.Вставить("ОНП", 2); // Начало
	пВидыОграничений.Вставить("ННП", 3); // Начало
	пВидыОграничений.Вставить("ОНР", 4); // Начало
	пВидыОграничений.Вставить("ННР", 5); // Начало 
	пВидыОграничений.Вставить("ФН" , 6); // Начало - конец
	пВидыОграничений.Вставить("ФО ", 7); // Начало - конец
	ВидыОграничений = Новый ФиксированнаяСтруктура(пВидыОграничений);
	
	КартинкаМинус = Элементы.ПолеКартинкиМинус.Картинка;
	КартинкаПлюс  = Элементы.ПолеКартинкиПлюс.Картинка;
	
	НастроитьОбработкуПодКонфигурацию();
	
	ОбновитьЗаголовок();
	
	// Настройка табличного документа
	тдПроект.Область(,НомерКолонкиИмяРисунка, ,НомерКолонкиИмяРисунка).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиЗадача, ,НомерКолонкиЗадача).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиРодитель, ,НомерКолонкиРодитель).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиПредшествинники, ,НомерКолонкиПредшествинники).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиНачалоПриРучномВводе, ,НомерКолонкиНачалоПриРучномВводе).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиРесурсы, ,НомерКолонкиРесурсы).Видимость = Ложь;
	
	тдПроект.Область(,НомерКолонкиВеха, ,НомерКолонкиВеха).Видимость = Ложь;
	
	тдПроект.Область(,НомерКолонкиДопЗатраты, ,НомерКолонкиДопЗатраты).Видимость = Ложь;
		
	тдПроект.Область(,НомерКолонкиОписание, ,НомерКолонкиОписание).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиGUID, ,НомерКолонкиGUID).Видимость = Ложь;
	тдПроект.Область(2,,2,).Видимость = Ложь;
	
	тдПроект.Область(,9, ,9).Видимость = Ложь;
	
	тдПроект.Область(,19, ,26).Видимость = Ложь;
	
	тдПроект.Область(,НомерКолонкиСтоимость, ,НомерКолонкиСтоимость).Видимость = Истина;
	
	тдПроект.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	тдПроект.АвтоМасштаб  		= Истина;

	НачальноеЗаполнениеПроекта();
	
	Диаграмма   = тдПроект.Рисунки.получить(0).Объект;
	Диаграмма.Обновление = Истина;
	Серия = Диаграмма.Серии.Добавить();
	
	ТекущийЭлемент = Элементы.тдПроект;
	Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(3, НомерКолонкиНазвание,3, НомерКолонкиНазвание);
	
	тдПроект.Область(3, , ПоследняяСтрока ).ВысотаСтроки = 11;
	
	ПослеВводаОпускатьсяВнизПриИзменении(Неопределено);	
	ОбновлениеОтображения();
	ОбновитьДиаграмму();
	
	ОткрытьПроект();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ВосстановитьЦветаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Автосохранение");
		
	Если Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Проект изменен. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьПроект();
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПереченьРесурсов

&НаКлиенте
Процедура ТабличноеПолеРесурсыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока = Элементы.ТабличноеПолеРесурсы.ТекущиеДанные;
		ТекущаяСтрока.GUID_Ресурса = Новый УникальныйИдентификатор;		
		ТекущаяСтрока.ТипРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой");
		ТекущаяСтрока.ЕдиницаИзмерения = "шт";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРесурсыПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРесурсыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРесурсыНазваниеРесурсаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТабличноеПолеРесурсы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КраткоеНазвание) Тогда
		Элементы.ТабличноеПолеРесурсы.ТекущиеДанные.КраткоеНазвание = Лев(ТекущиеДанные.НазваниеРесурса, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРесурсыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		Модифицированность = Истина;
		ОбновитьЗаголовок();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

//////////////////////////////////////////////////////////
// Команды

#Область Команды

&НаКлиенте
Процедура СохранениеПроекта(Команда)
	
	СохранитьПроект();	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКопиюПроекта(Команда)
	
	СохранитьПроект();
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьСлево(Команда)
	
	Для Каждого ВыделеннаяОбласть Из тдПроект.ВыделенныеОбласти Цикл
		пВерх = ВыделеннаяОбласть.Верх;
		пНиз  = ВыделеннаяОбласть.Низ;
		
		НачальнаяДатаДляПересчетаСвязей = СдвинутьВлевоЦиклически(пВерх, пНиз);
		
		СтруктураГраницы = Новый Структура("Верх, Низ", Макс(НачальнаяДатаДляПересчетаСвязей,3), Макс(пВерх, пНиз));
		ПересчитатьДатыВСвязанныхЗадачах(Макс(НачальнаяДатаДляПересчетаСвязей,3),,СтруктураГраницы);
		
		Для НомерСтроки = Макс(пВерх-1, 3) По пНиз Цикл
			РаскраситьСтроку(НомерСтроки);
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьИтоги(Истина, Макс(3, пВерх-1), пНиз+1);
	Модифицированность = Истина;
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВправо(Команда)
	
	пВерх = 0;
	пНиз = 0;
	
	МассивОбрабатываемыхСтрокПоСвязям = Новый Массив;
	
	ТаблицаВыделенныхОбластей.Очистить();
	Для Каждого ВыделеннаяСтрока Из тдПроект.ВыделенныеОбласти Цикл
		МассивОбрабатываемыхСтрокПоСвязям.Добавить(ВыделеннаяСтрока.Верх);
		
		Строка = ТаблицаВыделенныхОбластей.Добавить();
		Строка.Верх = ВыделеннаяСтрока.Верх;
		Строка.Низ = ВыделеннаяСтрока.Низ;
	КонецЦикла;
	
	ТаблицаВыделенныхОбластей.Сортировать("Верх");
	
	Для Индекс = 0 По ТаблицаВыделенныхОбластей.Количество()-1 Цикл
		Если пВерх = 0 Тогда
			пВерх = ТаблицаВыделенныхОбластей[Индекс].Верх;
		КонецЕсли;
		
		Если Индекс < ТаблицаВыделенныхОбластей.Количество()-1 Тогда
			Если ТаблицаВыделенныхОбластей[Индекс].Низ+1 = ТаблицаВыделенныхОбластей[Индекс+1].Верх Тогда
				пНиз = ТаблицаВыделенныхОбластей[Индекс+1].Низ;
				Продолжить;
			Иначе
				пНиз  = ТаблицаВыделенныхОбластей[Индекс].Низ;
				СдвинутьВправоЦиклически(пВерх,пНиз);
				пВерх = 0;
			КонецЕсли;
		Иначе
			пНиз  = ТаблицаВыделенныхОбластей[Индекс].Низ;
			СдвинутьВправоЦиклически(пВерх,пНиз);
		КонецЕсли;
		
	КонецЦикла;
	
	Для НомерСтроки = Макс(пВерх-1, 3) По пНиз Цикл
		РаскраситьСтроку(НомерСтроки);
	КонецЦикла;
	
	// Обработать связи
	Для Каждого Строка Из МассивОбрабатываемыхСтрокПоСвязям Цикл
		Если Строка = 3 Тогда 
			Продолжить; 
		КонецЕсли;
		
		СвязаннаяСтрока = Строка - 1;
		ОбластьНазваниеСтроки 				= тдПроект.Область(Строка, НомерКолонкиНазвание, Строка, НомерКолонкиНазвание);
		ОбластьНазваниеСтрокиНаУровеньВыше  = тдПроект.Область(СвязаннаяСтрока, НомерКолонкиНазвание, СвязаннаяСтрока, 
			НомерКолонкиНазвание);
			
		Если ОбластьНазваниеСтроки.Отступ > ОбластьНазваниеСтрокиНаУровеньВыше.Отступ Тогда
			// поехали...
			
			Пока СоответствиеКартинокПоОбластям.Получить(Строка) <> Неопределено Цикл
				Строка = Строка + 1;
			КонецЦикла;
			
			СписокПредшественников = ТаблицаСвязей.НайтиСтроки(Новый Структура("Начало, Конец", СвязаннаяСтрока, Строка));
			СписокПредшественниковСвязаннойСтроки = ПолучитьСписокПредшественников(СвязаннаяСтрока);
			Если СписокПредшественников.Количество() > 0 Тогда
				
				Для Каждого УдаляемаяСвязь Из СписокПредшественников Цикл
					ТаблицаСвязей.Удалить(УдаляемаяСвязь);
				КонецЦикла;
				
				Если СписокПредшественниковСвязаннойСтроки.Количество() > 0 Тогда
					
					Для Каждого СтрокаСвязи Из СписокПредшественниковСвязаннойСтроки Цикл
						СтрокаСвязи.Конец = Строка;
					КонецЦикла;
			
				КонецЕсли;	
				
				Для Каждого СтрокаПредшественника Из СписокПредшественниковСвязаннойСтроки Цикл
					СтруктураГраницы = Новый Структура("Верх, Низ", Мин(пВерх, СвязаннаяСтрока), пНиз);
					ПересчитатьДатыВСвязанныхЗадачах(Число(СтрокаПредшественника.Начало),,СтруктураГраницы);
					пВерх = Мин(СвязаннаяСтрока, СтруктураГраницы.Верх);
					пНиз  = СтруктураГраницы.Низ;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаВыделенныхОбластей.Очистить();
	// Пересчитать связи
	ОбновитьИтоги(Истина, Макс(3, пВерх - 1), пНиз);
	Модифицированность = Истина;
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	
	Если ЗначениеЗаполнено(СоответствиеКартинокПоОбластям.Получить(тдПроект.ТекущаяОбласть.Верх)) Тогда
		СтруктураОбласти = Новый Структура("ТекущаяОбласть",
			тдПроект.Рисунки[СоответствиеКартинокПоОбластям.Получить(тдПроект.ТекущаяОбласть.Верх)]);
		тдПроект.Область(тдПроект.ТекущаяОбласть.Верх+1, , тдПроект.ТекущаяОбласть.Верх+1).Видимость = Истина;
		СтруктураОбласти.ТекущаяОбласть.Картинка = Элементы.ПолеКартинкиМинус.Картинка;
		ПолеПроектаПриАктивизацииОбласти(СтруктураОбласти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	
	Если ЗначениеЗаполнено(СоответствиеКартинокПоОбластям.Получить(тдПроект.ТекущаяОбласть.Верх)) Тогда
		СтруктураОбласти = Новый Структура("ТекущаяОбласть",
			тдПроект.Рисунки[СоответствиеКартинокПоОбластям.Получить(тдПроект.ТекущаяОбласть.Верх)]);
		тдПроект.Область(тдПроект.ТекущаяОбласть.Верх+1, , тдПроект.ТекущаяОбласть.Верх+1).Видимость = Ложь;
		СтруктураОбласти.ТекущаяОбласть.Картинка = Элементы.ПолеКартинкиПлюс.Картинка;
		ПолеПроектаПриАктивизацииОбласти(СтруктураОбласти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьЗадачи(Команда)
	
	СоздатьСвязи();
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязьЗадач(Команда)
	
	СоздатьСвязи(Истина);
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСвязь(Команда)
	
	СтруктураГраницы = Новый Структура("Верх, Низ", 3, ПоследняяСтрока);
	ПересчитатьДатыВСвязанныхЗадачах(3, , СтруктураГраницы, , , Истина);
	ОбновитьИтоги();
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПроекта(Команда)
	
	ОтключитьОбработчикОжидания("Автосохранение");

	ФормаНастройкиПроектаУправляемая =  ПолучитьФорму("Отчет.УправлениеПроектами.Форма.ФормаНастройкиПроектаУправляемая",
		Новый Структура("Ключ", Объект), ЭтаФорма);

	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПрименитьИзмененияНастроекПроекта", ЭтаФорма,
		Новый Структура("ФормаНастройкиПроектаУправляемая", ФормаНастройкиПроектаУправляемая));
	
	ФормаНастройкиПроектаУправляемая.ОписаниеОповещенияОЗакрытии 	= ОписаниеОповещенияОЗакрытии;
	ФормаНастройкиПроектаУправляемая.ОсновнойЦветФонаЗадач 			= ОсновнойЦветФонаЗадач;
	ФормаНастройкиПроектаУправляемая.ОсновнойЦветТекстаЗадач 		= ОсновнойЦветТекстаЗадач;
	ФормаНастройкиПроектаУправляемая.ОсновнойЦветФонаСуммирующихЗадач = ОсновнойЦветФонаСуммирующихЗадач;
	ФормаНастройкиПроектаУправляемая.ОсновнойЦветТекстаСуммирующихЗадач = ОсновнойЦветТекстаСуммирующихЗадач;
	ФормаНастройкиПроектаУправляемая.ЦветФонаЗавершенныхЗадач 		= ЦветФонаЗавершенныхЗадач;
	ФормаНастройкиПроектаУправляемая.ЦветТекстаЗавершенныхЗадач 	= ЦветТекстаЗавершенныхЗадач;
	ФормаНастройкиПроектаУправляемая.ЦветФонаВыполняющихсяЗадач 	= ЦветФонаВыполняющихсяЗадач;
	ФормаНастройкиПроектаУправляемая.ЦветТекстаВыполняющихсяЗадач 	= ЦветТекстаВыполняющихсяЗадач;
	ФормаНастройкиПроектаУправляемая.СубботаРабочий 				= Объект.СубботаРабочий;
	ФормаНастройкиПроектаУправляемая.ВоскресеньеРабочий				= Объект.ВоскресеньеРабочий;
	ФормаНастройкиПроектаУправляемая.КоличествоРабочихЧасовВДне		= Объект.КоличествоРабочихЧасовВДне;
	ФормаНастройкиПроектаУправляемая.НачалоРабочегоДня				= Объект.НачалоРабочегоДня;
	ФормаНастройкиПроектаУправляемая.ИспользоватьАвтосохранение		= Объект.ИспользоватьАвтосохранение;
	ФормаНастройкиПроектаУправляемая.ПериодАвтосохранения			= Объект.ПериодАвтосохранения;
	
	ФормаНастройкиПроектаУправляемая.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияНастроекПроекта(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ФормаНастройкиПроектаУправляемая = ДополнительныеПараметры.ФормаНастройкиПроектаУправляемая;
	
	Если РезультатЗакрытия = 2 Тогда
		Объект.СубботаРабочий	 			= ФормаНастройкиПроектаУправляемая.СубботаРабочий;
		Объект.ВоскресеньеРабочий			= ФормаНастройкиПроектаУправляемая.ВоскресеньеРабочий;
		Объект.КоличествоРабочихЧасовВДне	= ФормаНастройкиПроектаУправляемая.КоличествоРабочихЧасовВДне;
		ПересчитатьДатыВСвязанныхЗадачах(3, , , , , Истина);
		ОбновитьИтоги();
	КонецЕсли;
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		ОписаниеОповещенияОЗакрытии 	= ФормаНастройкиПроектаУправляемая.ОписаниеОповещенияОЗакрытии;
		ОсновнойЦветФонаЗадач 			= ФормаНастройкиПроектаУправляемая.ОсновнойЦветФонаЗадач;
		ОсновнойЦветТекстаЗадач 		= ФормаНастройкиПроектаУправляемая.ОсновнойЦветТекстаЗадач;
		ОсновнойЦветФонаСуммирующихЗадач= ФормаНастройкиПроектаУправляемая.ОсновнойЦветФонаСуммирующихЗадач;
		ОсновнойЦветТекстаСуммирующихЗадач = ФормаНастройкиПроектаУправляемая.ОсновнойЦветТекстаСуммирующихЗадач;
		ЦветФонаЗавершенныхЗадач 		= ФормаНастройкиПроектаУправляемая.ЦветФонаЗавершенныхЗадач;
		ЦветТекстаЗавершенныхЗадач 		= ФормаНастройкиПроектаУправляемая.ЦветТекстаЗавершенныхЗадач;
		ЦветФонаВыполняющихсяЗадач 		= ФормаНастройкиПроектаУправляемая.ЦветФонаВыполняющихсяЗадач;
		ЦветТекстаВыполняющихсяЗадач 	= ФормаНастройкиПроектаУправляемая.ЦветТекстаВыполняющихсяЗадач;
		Объект.ИспользоватьАвтосохранение = ФормаНастройкиПроектаУправляемая.ИспользоватьАвтосохранение;
		Объект.ПериодАвтосохранения 	= ФормаНастройкиПроектаУправляемая.ПериодАвтосохранения;
		СохранитьЦветаНаСервере();
				
		Для НомерСтроки = 3 По ПоследняяСтрока Цикл
			РаскраситьСтроку(НомерСтроки);
		КонецЦикла;
		
		Модифицированность = Истина;
		ОбновитьЗаголовок();
		
	КонецЕсли;
	
	Если Объект.ИспользоватьАвтосохранение Тогда
		ПодключитьОбработчикОжидания("Автосохранение", Макс(Объект.ПериодАвтосохранения, 1) * 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводПланов(Команда)
	
	// Видимые 
	тдПроект.Область(,НомерКолонкиНачало, ,НомерКолонкиНачало).Видимость 				= Истина;
	тдПроект.Область(,НомерКолонкиОкончание, ,НомерКолонкиОкончание).Видимость 			= Истина;
	тдПроект.Область(,НомерКолонкиПроцентЗавершения, ,НомерКолонкиПроцентЗавершения).Видимость 		= Истина;
	тдПроект.Область(,НомерКолонкиРесурсыПредставление, ,НомерКолонкиРесурсыПредставление).Видимость = Истина;
	тдПроект.Область(,НомерКолонкиДлительность, ,НомерКолонкиДлительность).Видимость 	= Истина;
		
	// НЕ видимые
	тдПроект.Область(,НомерКолонкиНачалоФакт, ,НомерКолонкиНачалоФакт).Видимость 		= Ложь;
	тдПроект.Область(,НомерКолонкиОкончаниеФакт, ,НомерКолонкиОкончаниеФакт).Видимость 	= Ложь;
	тдПроект.Область(,НомерКолонкиДопЗатраты, ,НомерКолонкиДопЗатраты).Видимость 		= Ложь;
	тдПроект.Область(,НомерКолонкиСтоимостьФакт, ,НомерКолонкиСтоимостьФакт).Видимость 	= Ложь;
	тдПроект.Область(,НомерКолонкиСтоимость, ,НомерКолонкиСтоимость).Видимость 			= Истина;	
	тдПроект.Область(,НомерКолонкиЗатратыФакт, ,НомерКолонкиЗатратыФакт).Видимость 		= Ложь;
	тдПроект.Область(,НомерКолонкиДопСтоимость, ,НомерКолонкиДопСтоимость).Видимость 	= Ложь;
	
	Для Каждого КнопкаКоманднойПанели Из Элементы.ГруппаРежимОтображения.ПодчиненныеЭлементы Цикл
	 
		КнопкаКоманднойПанели.Пометка = Ложь;
	
	КонецЦикла;
		
	Элементы.ВводПланов.Пометка = Истина;
	РежимОтображения = 0;
	Модифицированность = Истина;
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура Отслеживание(Команда)
	
	// Видимые 
	тдПроект.Область(,НомерКолонкиНачалоФакт, ,НомерКолонкиНачалоФакт).Видимость = Истина;
	тдПроект.Область(,НомерКолонкиОкончаниеФакт, ,НомерКолонкиОкончаниеФакт).Видимость = Истина;
	тдПроект.Область(,НомерКолонкиПроцентЗавершения, ,НомерКолонкиПроцентЗавершения).Видимость = Истина;
	тдПроект.Область(,НомерКолонкиРесурсыПредставление, ,НомерКолонкиРесурсыПредставление).Видимость = Истина;	
	тдПроект.Область(,НомерКолонкиСтоимостьФакт, ,НомерКолонкиСтоимостьФакт).Видимость = Истина;
	тдПроект.Область(,НомерКолонкиСтоимость, ,НомерКолонкиСтоимость).Видимость = Истина;	
	тдПроект.Область(,НомерКолонкиЗатратыФакт, ,НомерКолонкиЗатратыФакт).Видимость = Истина;
	тдПроект.Область(,НомерКолонкиДопСтоимость, ,НомерКолонкиДопСтоимость).Видимость = Истина;
	
	// НЕ видимые
	тдПроект.Область(,НомерКолонкиНачало, ,НомерКолонкиНачало).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиОкончание, ,НомерКолонкиОкончание).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиДопЗатраты, ,НомерКолонкиДопЗатраты).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиДлительность, ,НомерКолонкиДлительность).Видимость = Ложь;
		
	Для Каждого КнопкаКоманднойПанели Из Элементы.ГруппаРежимОтображения.ПодчиненныеЭлементы Цикл
	 
		КнопкаКоманднойПанели.Пометка = Ложь;
	
	КонецЦикла;
		
	Элементы.Отслеживание.Пометка = Истина;
	РежимОтображения = 1;
	Модифицированность = Истина;
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура Затраты(Команда)
	
	// Видимые 
	тдПроект.Область(,НомерКолонкиЗатраты, ,НомерКолонкиЗатраты).Видимость = Истина;
	тдПроект.Область(,НомерКолонкиДопЗатраты, ,НомерКолонкиДопЗатраты).Видимость = Истина;
	
	тдПроект.Область(,НомерКолонкиСтоимостьФакт, ,НомерКолонкиСтоимостьФакт).Видимость = Истина;
	тдПроект.Область(,НомерКолонкиСтоимость, ,НомерКолонкиСтоимость).Видимость = Истина;
	
	тдПроект.Область(,НомерКолонкиЗатратыФакт, ,НомерКолонкиЗатратыФакт).Видимость = Истина;
	тдПроект.Область(,НомерКолонкиДопСтоимость, ,НомерКолонкиДопСтоимость).Видимость = Истина;
		
	// НЕ видимые
	тдПроект.Область(,НомерКолонкиНачало, ,НомерКолонкиНачало).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиОкончание, ,НомерКолонкиОкончание).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиНачалоФакт, ,НомерКолонкиНачалоФакт).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиОкончаниеФакт, ,НомерКолонкиОкончаниеФакт).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиДлительность, ,НомерКолонкиДлительность).Видимость = Ложь;
	тдПроект.Область(,НомерКолонкиПроцентЗавершения, ,НомерКолонкиПроцентЗавершения).Видимость = Ложь;
		
	Для Каждого КнопкаКоманднойПанели Из Элементы.ГруппаРежимОтображения.ПодчиненныеЭлементы Цикл
	 
		КнопкаКоманднойПанели.Пометка = Ложь;
	
	КонецЦикла;
		
	Элементы.Затраты.Пометка = Истина;
	РежимОтображения = 2;
	Модифицированность = Истина;
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеКолонки(Команда)
	
	// Видимые 	
	тдПроект.Область(,НомерКолонкиЗатраты, ,НомерКолонкиЗатраты).Видимость 				= Истина;
	тдПроект.Область(,НомерКолонкиДопЗатраты, ,НомерКолонкиДопЗатраты).Видимость 		= Истина;
	
	тдПроект.Область(,НомерКолонкиСтоимостьФакт, ,НомерКолонкиСтоимостьФакт).Видимость 	= Истина;
	тдПроект.Область(,НомерКолонкиСтоимость, ,НомерКолонкиСтоимость).Видимость 			= Истина;
	
	тдПроект.Область(,НомерКолонкиЗатратыФакт, ,НомерКолонкиЗатратыФакт).Видимость 		= Истина;
	тдПроект.Область(,НомерКолонкиДопСтоимость, ,НомерКолонкиДопСтоимость).Видимость 	= Истина;
	
	тдПроект.Область(,НомерКолонкиПроцентЗавершения, ,НомерКолонкиПроцентЗавершения).Видимость = Истина;
	
	тдПроект.Область(,НомерКолонкиНачало, ,НомерКолонкиНачало).Видимость 				= Истина;
	тдПроект.Область(,НомерКолонкиОкончание, ,НомерКолонкиОкончание).Видимость 			= Истина;
	тдПроект.Область(,НомерКолонкиНачалоФакт, ,НомерКолонкиНачалоФакт).Видимость 		= Истина;
	тдПроект.Область(,НомерКолонкиОкончаниеФакт, ,НомерКолонкиОкончаниеФакт).Видимость 	= Истина;
	тдПроект.Область(,НомерКолонкиДлительность, ,НомерКолонкиДлительность).Видимость 	= Истина;
	
	// НЕ видимые
	Для Каждого КнопкаКоманднойПанели Из Элементы.ГруппаРежимОтображения.ПодчиненныеЭлементы Цикл
 		КнопкаКоманднойПанели.Пометка = Ложь; 
	КонецЦикла;
	
	Элементы.ВсеКолонки.Пометка = Истина;
	РежимОтображения = 3;
	Модифицированность = Истина;
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиКолонок(Команда)
	
	ФормаНастройкаВидимостиКолонокУправляемая = 
		ПолучитьФорму("Отчет.УправлениеПроектами.Форма.НастройкаВидимостиКолонокУправляемая",
			Новый Структура("Ключ", Объект), ЭтаФорма);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НастройкаВидимостиКолонокОбработкаРезультатаОткрытияФормы", 
		ЭтаФорма, Новый Структура("ФормаНастройкаВидимостиКолонокУправляемая", ФормаНастройкаВидимостиКолонокУправляемая));
	ФормаНастройкаВидимостиКолонокУправляемая.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии;
	ФормаНастройкаВидимостиКолонокУправляемая.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура НастройкаВидимостиКолонокОбработкаРезультатаОткрытияФормыНаСервере(Знач  ТаблицаКолонокФормы, 
	Знач СтруктураПозиций, Знач СоответствиеПозицийПоИндексамТаблицы) 
	
	пСтруктураПозиций = Новый Структура(СтруктураПозиций);
	ТаблицаКолонок = ТаблицаКолонокФормы.Выгрузить();
	Для Каждого ЭлементСписка Из ТаблицаКолонок Цикл
		тдПроект.Область(, ЭлементСписка.Значение, ,ЭлементСписка.Значение).Видимость = ЭлементСписка.Пометка;
		
		Попытка
			Индекс = ТаблицаКолонок.Индекс(ЭлементСписка);
			ЗначениеПриемник = СоответствиеПозицийПоИндексамТаблицы.Получить(Индекс);
			
			ЗначениеИсточник = пСтруктураПозиций[ЭлементСписка.Ключ];
			Если ЭлементСписка.ПервоначальныйИндекс  <> Индекс Тогда
							
				// Еще раз пройдемся
				Для Каждого ЭлементСписка2 Из ТаблицаКолонок Цикл
					Если ЭлементСписка2.ПервоначальныйИндекс >= Индекс 
						И ЭлементСписка2.ПервоначальныйИндекс < ЭлементСписка.ПервоначальныйИндекс Тогда
						ЭлементСписка2.ПервоначальныйИндекс = ЭлементСписка2.ПервоначальныйИндекс + 1;
					КонецЕсли;
				КонецЦикла;
				ЭлементСписка.ПервоначальныйИндекс = Индекс;
				
				
				
				Для Каждого КлючИЗначение Из пСтруктураПозиций Цикл
					Если пСтруктураПозиций[КлючИЗначение.Ключ] >= ЗначениеПриемник 
						И пСтруктураПозиций[КлючИЗначение.Ключ] < ЗначениеИсточник Тогда
						пСтруктураПозиций[КлючИЗначение.Ключ] = пСтруктураПозиций[КлючИЗначение.Ключ] + 1;
					КонецЕсли;
				КонецЦикла;
				
				пСтруктураПозиций[ЭлементСписка.Ключ] = ЗначениеПриемник;
				
				тдПроект.ВставитьОбласть(тдПроект.Область(, ЗначениеИсточник, , ЗначениеИсточник), 
					тдПроект.Область(, ЗначениеПриемник, , ЗначениеПриемник), ТипСмещенияТабличногоДокумента.ПоВертикали);
				тдПроект.УдалитьОбласть(тдПроект.Область(, ЗначениеИсточник+1, , ЗначениеИсточник+1), 
					ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из пСтруктураПозиций Цикл
		ЭтаФорма[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиКолонокОбработкаРезультатаОткрытияФормы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Истина Тогда
		НастройкаВидимостиКолонокОбработкаРезультатаОткрытияФормыНаСервере(
			ДополнительныеПараметры.ФормаНастройкаВидимостиКолонокУправляемая.ТаблицаКолонок, 
			ДополнительныеПараметры.ФормаНастройкаВидимостиКолонокУправляемая.СтруктураПозиций, 
			ДополнительныеПараметры.ФормаНастройкаВидимостиКолонокУправляемая.СоответствиеПозицийПоИндексамТаблицы);
	
		Для Каждого КнопкаКоманднойПанели Из Элементы.ГруппаРежимОтображения.ПодчиненныеЭлементы Цикл
	 		КнопкаКоманднойПанели.Пометка = Ложь;	 
		КонецЦикла;
		
		Элементы.НастройкаВидимостиКолонок.Пометка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОПрограмме(Команда)
	
	Результат = ОткрытьФорму("Отчет.УправлениеПроектами.Форма.ОПрограммеУправляема",
		Новый Структура("Ключ", Объект), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияШириныДиаграммыГантаПриИзменении(Элемент)
	
	Диаграмма = тдПроект.Рисунки.Получить(0).Объект;
	Диаграмма.Обновление = Ложь;
	тдПроект.Область(, НомерКолонкиДиаграммыГанта, ,
		НомерКолонкиДиаграммыГанта).ШиринаКолонки = ПолосаРегулированияШириныДиаграммыГанта;
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Пустышка(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////
// Контекстное меню

#Область КонтекстноеМеню

&НаКлиенте
Процедура НовыйПроект(Команда)
	
	ОткрытьФорму("Отчет.УправлениеПроектами.Форма.ФормаУправляемая",,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Раздвинуть(Команда)
	
	РаздвинутьСтроки();
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	УдалитьСтроки();
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВниз1(Команда)
	
	ЗаполнитьВниз();
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ОчиститьПроект();
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеЗадачи(Команда)
	
	ОткрытьФормуЗадачи();
	
КонецПроцедуры

#КонецОбласти

#Область ПереходПоСтраницам

&НаКлиенте
Процедура ПерейтиНаСтраницуДиаграммыГанта(Команда)
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаДиаграммаГанта Тогда
		Возврат;
	Иначе
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаДиаграммаГанта;
		БылоПереключениеНаГлавнуюСтраницу = Истина;
		Элементы.ПерейтиНаСтраницуДиаграммыГанта.ЦветФона = ЦветФонаФормы;
		Элементы.ПерейтиНаСтраницуОтчетов.ЦветФона 		  = ЦветФонаКнопки;
		Элементы.ПерейтиНаСтраницуРесурсов.ЦветФона 	  = ЦветФонаКнопки;
		Элементы.ПерейтиНаСтраницуКалендарь.ЦветФона 	  = ЦветФонаКнопки;
		
		Если Модифицированность = Истина Тогда
			ОбновитьИтоги();
			Модифицированность = Ложь; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуРесурсов(Команда)
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаПереченьРесурсов Тогда
		Возврат;
	Иначе
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаПереченьРесурсов;
		Элементы.ПерейтиНаСтраницуДиаграммыГанта.ЦветФона = ЦветФонаКнопки;
		Элементы.ПерейтиНаСтраницуОтчетов.ЦветФона 		  = ЦветФонаКнопки;
		Элементы.ПерейтиНаСтраницуРесурсов.ЦветФона 	  = ЦветФонаФормы;
		Элементы.ПерейтиНаСтраницуКалендарь.ЦветФона 	  = ЦветФонаКнопки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОтчетов(Команда)
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаОтчеты Тогда
		Возврат;
	Иначе
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаОтчеты;
		
		Элементы.ПерейтиНаСтраницуДиаграммыГанта.ЦветФона = ЦветФонаКнопки;
		Элементы.ПерейтиНаСтраницуОтчетов.ЦветФона 		  = ЦветФонаФормы;
		Элементы.ПерейтиНаСтраницуРесурсов.ЦветФона 	  = ЦветФонаКнопки;
		Элементы.ПерейтиНаСтраницуКалендарь.ЦветФона 	  = ЦветФонаКнопки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

/////////////////////////////////////////////////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ

#Область ОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
Функция ИзСтрокиВЧисло(Знач Строчка, Знач УчитыватьЗапятую = Истина) Экспорт
	
	Количество = СтрДлина(строчка);
	НоваяСтрочка = "";
	Попытка
		Для Индекс = 1 По количество  Цикл
			Символ = Сред(Строчка, Индекс, 1);
			Если Символ <> "0" И Символ <> "1" И Символ <> "2" И Символ <> "3" И Символ <> "4" И Символ <> "5" И
				Символ <> "6" И Символ <> "7" И Символ <> "8" И Символ <> "9" И НЕ Символ = "," И УчитыватьЗапятую Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрочка = НоваяСтрочка + Символ;
		КонецЦикла;
		Если НоваяСтрочка = "" ИЛИ НоваяСтрочка = " " Тогда
			НоваяСтрочка = "0";
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат НоваяСтрочка;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеПоКолонке(Знач Строка, Знач НомерКолонки) Экспорт
	
	Попытка
		Возврат тдПроект.Область(Строка, НомерКолонки, Строка, НомерКолонки).Значение;
	Исключение
		Возврат тдПроект.Область(Строка, НомерКолонки, Строка, НомерКолонки).Текст;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура НастроитьСтроку(Знач пВерх, Знач пНиз, Знач Принудительно = Ложь, Знач Раскрашивать = Ложь) Экспорт
	
	Если пНиз > ПоследняяСтрока ИЛИ Принудительно Тогда
		НачальныйИндекс = Мин(пВерх, ПоследняяСтрока);
		Индекс 			= НачальныйИндекс;
		Индекс2 		= пНиз+1;
					
		тдПроект.Область(Индекс, НомерКолонкиДлительность, Индекс2, НомерКолонкиДлительность).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиДлительность, Индекс2, НомерКолонкиДлительность).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиДлительность, 3, НомерКолонкиДлительность).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс2, НомерКолонкиНачало).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс2, НомерКолонкиНачало).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиНачало, 3, НомерКолонкиНачало).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиОкончание, Индекс2, НомерКолонкиОкончание).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиОкончание, Индекс2, НомерКолонкиОкончание).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиОкончание, 3, НомерКолонкиОкончание).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиНачалоФакт, Индекс2, НомерКолонкиНачалоФакт).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиНачалоФакт, Индекс2, НомерКолонкиНачалоФакт).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиНачалоФакт, 3, НомерКолонкиНачалоФакт).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиОкончаниеФакт, Индекс2, НомерКолонкиОкончаниеФакт).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиОкончаниеФакт, Индекс2, НомерКолонкиОкончаниеФакт).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиОкончаниеФакт, 3, НомерКолонкиОкончаниеФакт).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиПроцентЗавершения, Индекс2, НомерКолонкиПроцентЗавершения).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиПроцентЗавершения, Индекс2, НомерКолонкиПроцентЗавершения).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиПроцентЗавершения, 3, НомерКолонкиПроцентЗавершения).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиИмяРисунка, Индекс2, НомерКолонкиИмяРисунка).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиИмяРисунка, Индекс2, НомерКолонкиИмяРисунка).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиИмяРисунка, 3, НомерКолонкиИмяРисунка).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиЗадача, Индекс2, НомерКолонкиЗадача).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиЗадача, Индекс2, НомерКолонкиЗадача).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиЗадача, 3, НомерКолонкиЗадача).ТипЗначения;
		тдПроект.Область(Индекс, НомерКолонкиЗадача, Индекс2, НомерКолонкиЗадача).РазмещениеТекста = 
			тдПроект.Область(3, НомерКолонкиЗадача, 3, НомерКолонкиЗадача).РазмещениеТекста;
		
		тдПроект.Область(Индекс, НомерКолонкиНачалоПриРучномВводе, Индекс2, НомерКолонкиНачалоПриРучномВводе).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиНачалоПриРучномВводе, Индекс2, НомерКолонкиНачалоПриРучномВводе).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиНачалоПриРучномВводе, 3, НомерКолонкиНачалоПриРучномВводе).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиЗатраты, Индекс2, НомерКолонкиЗатраты).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиЗатраты, Индекс2, НомерКолонкиЗатраты).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиЗатраты, 3, НомерКолонкиЗатраты).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиДопЗатраты, Индекс2, НомерКолонкиДопЗатраты).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиДопЗатраты, Индекс2, НомерКолонкиДопЗатраты).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиДопЗатраты, 3, НомерКолонкиДопЗатраты).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиСтоимость, Индекс2, НомерКолонкиСтоимость).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиСтоимость, Индекс2, НомерКолонкиСтоимость).ТипЗначения =
			тдПроект.Область(3, НомерКолонкиСтоимость, 3, НомерКолонкиСтоимость).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиДопСтоимость, Индекс2, НомерКолонкиДопСтоимость).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиДопСтоимость, Индекс2, НомерКолонкиДопСтоимость).ТипЗначения =
			тдПроект.Область(3, НомерКолонкиДопСтоимость, 3, НомерКолонкиДопСтоимость).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиЗатратыФакт, Индекс2, НомерКолонкиЗатратыФакт).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиЗатратыФакт, Индекс2, НомерКолонкиЗатратыФакт).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиЗатратыФакт, 3, НомерКолонкиЗатратыФакт).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиСтоимостьФакт, Индекс2, НомерКолонкиСтоимостьФакт).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиСтоимостьФакт, Индекс2, НомерКолонкиСтоимостьФакт).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиСтоимостьФакт, 3, НомерКолонкиСтоимостьФакт).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиДатаОграничения, Индекс2, НомерКолонкиДатаОграничения).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиДатаОграничения, Индекс2, НомерКолонкиДатаОграничения).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиДатаОграничения, 3, НомерКолонкиДатаОграничения).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиВидОграничения, Индекс2, НомерКолонкиВидОграничения).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиВидОграничения, Индекс2, НомерКолонкиВидОграничения).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиВидОграничения, 3, НомерКолонкиВидОграничения).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиДопЗатраты, Индекс2, НомерКолонкиДопЗатраты).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиДопЗатраты, Индекс2, НомерКолонкиДопЗатраты).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиДопЗатраты, 3, НомерКолонкиДопЗатраты).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиВеха, Индекс2, НомерКолонкиВеха).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиВеха, Индекс2, НомерКолонкиВеха).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиВеха, 3, НомерКолонкиВеха).ТипЗначения;
		
		Для н = 1 По НомерКолонкиДиаграммыГанта Цикл
			ОбластьКолонки = тдПроект.Область(3, н, 3, н);
			тдПроект.Область(Индекс, н, Индекс2, н).ГраницаСверху 	= ОбластьКолонки.ГраницаСверху;
			тдПроект.Область(Индекс, н, Индекс2, н).ГраницаСлева 	= ОбластьКолонки.ГраницаСлева;
			тдПроект.Область(Индекс, н, Индекс2, н).ГраницаСнизу 	= ОбластьКолонки.ГраницаСнизу;
			тдПроект.Область(Индекс, н, Индекс2, н).ГраницаСправа 	= ОбластьКолонки.ГраницаСправа;
			тдПроект.Область(Индекс, н, Индекс2, н).ЦветРамки 		= ОбластьКолонки.ЦветРамки;
			тдПроект.Область(Индекс, н, Индекс2, н).Шрифт 			= Новый Шрифт(ОбластьКолонки.Шрифт,,, Ложь);
			тдПроект.Область(Индекс, н, Индекс2, н).Формат 			= ОбластьКолонки.Формат;
			тдПроект.Область(Индекс, н, Индекс2, н).ГоризонтальноеПоложение = ОбластьКолонки.ГоризонтальноеПоложение;
			РаскраситьСтроку(Индекс);
		КонецЦикла;
		
		тдПроект.Область(Индекс, 0, Индекс2, НомерКолонкиДиаграммыГанта).АвтоВысотаСтроки = Ложь;
		тдПроект.Область(Индекс, 0, Индекс2, НомерКолонкиДиаграммыГанта).ВысотаСтроки = 
			тдПроект.Область(3, , 3, ).ВысотаСтроки;
		
		НачальныйИндекс = Мин(пВерх, ПоследняяСтрока - 1);
		НачальныйИндекс = Макс(3, НачальныйИндекс);
		Для Индекс = НачальныйИндекс По пНиз + 1 Цикл
			
			Если Индекс = 3 Тогда
				тдПроект.Область(Индекс, 1, Индекс, 1).Текст = "1";
			Иначе
				тдПроект.Область(Индекс, 1, Индекс, 1).Текст = Число(тдПроект.Область(Индекс - 1, 1, Индекс - 1, 1).Текст) + 1;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиGUID, Индекс, НомерКолонкиGUID).Текст) Тогда
				тдПроект.Область(Индекс, НомерКолонкиGUID, Индекс, НомерКолонкиGUID).Текст = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПоследняяСтрока < пНиз Тогда		
			ПоследняяСтрока = пНиз;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьСтрокуНаСервере(Знач пВерх, Знач пНиз, Знач Принудительно = Ложь) Экспорт
	
	Если пНиз > ПоследняяСтрока ИЛИ Принудительно Тогда
		НачальныйИндекс = Мин(пВерх, ПоследняяСтрока);
		Индекс 			= НачальныйИндекс;
		Индекс2 		= пНиз+1;
					
		тдПроект.Область(Индекс, НомерКолонкиДлительность, Индекс2, НомерКолонкиДлительность).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиДлительность, Индекс2, НомерКолонкиДлительность).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиДлительность, 3, НомерКолонкиДлительность).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс2, НомерКолонкиНачало).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс2, НомерКолонкиНачало).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиНачало, 3, НомерКолонкиНачало).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиОкончание, Индекс2, НомерКолонкиОкончание).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиОкончание, Индекс2, НомерКолонкиОкончание).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиОкончание, 3, НомерКолонкиОкончание).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиНачалоФакт, Индекс2, НомерКолонкиНачалоФакт).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиНачалоФакт, Индекс2, НомерКолонкиНачалоФакт).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиНачалоФакт, 3, НомерКолонкиНачалоФакт).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиОкончаниеФакт, Индекс2, НомерКолонкиОкончаниеФакт).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиОкончаниеФакт, Индекс2, НомерКолонкиОкончаниеФакт).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиОкончаниеФакт, 3, НомерКолонкиОкончаниеФакт).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиПроцентЗавершения, Индекс2, НомерКолонкиПроцентЗавершения).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиПроцентЗавершения, Индекс2, НомерКолонкиПроцентЗавершения).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиПроцентЗавершения, 3, НомерКолонкиПроцентЗавершения).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиИмяРисунка, Индекс2, НомерКолонкиИмяРисунка).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиИмяРисунка, Индекс2, НомерКолонкиИмяРисунка).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиИмяРисунка, 3, НомерКолонкиИмяРисунка).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиЗадача, Индекс2, НомерКолонкиЗадача).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиЗадача, Индекс2, НомерКолонкиЗадача).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиЗадача, 3, НомерКолонкиЗадача).ТипЗначения;
		тдПроект.Область(Индекс, НомерКолонкиЗадача, Индекс2, НомерКолонкиЗадача).РазмещениеТекста =
			тдПроект.Область(3, НомерКолонкиЗадача, 3, НомерКолонкиЗадача).РазмещениеТекста;
		
		тдПроект.Область(Индекс, НомерКолонкиНачалоПриРучномВводе, Индекс2, НомерКолонкиНачалоПриРучномВводе).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиНачалоПриРучномВводе, Индекс2, НомерКолонкиНачалоПриРучномВводе).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиНачалоПриРучномВводе, 3, НомерКолонкиНачалоПриРучномВводе).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиЗатраты, Индекс2, НомерКолонкиЗатраты).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиЗатраты, Индекс2, НомерКолонкиЗатраты).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиЗатраты, 3, НомерКолонкиЗатраты).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиДопЗатраты, Индекс2, НомерКолонкиДопЗатраты).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиДопЗатраты, Индекс2, НомерКолонкиДопЗатраты).ТипЗначения =
			тдПроект.Область(3, НомерКолонкиДопЗатраты, 3, НомерКолонкиДопЗатраты).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиСтоимость, Индекс2, НомерКолонкиСтоимость).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиСтоимость, Индекс2, НомерКолонкиСтоимость).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиСтоимость, 3, НомерКолонкиСтоимость).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиДопСтоимость, Индекс2, НомерКолонкиДопСтоимость).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиДопСтоимость, Индекс2, НомерКолонкиДопСтоимость).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиДопСтоимость, 3, НомерКолонкиДопСтоимость).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиЗатратыФакт, Индекс2, НомерКолонкиЗатратыФакт).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиЗатратыФакт, Индекс2, НомерКолонкиЗатратыФакт).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиЗатратыФакт, 3, НомерКолонкиЗатратыФакт).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиСтоимостьФакт, Индекс2, НомерКолонкиСтоимостьФакт).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиСтоимостьФакт, Индекс2, НомерКолонкиСтоимостьФакт).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиСтоимостьФакт, 3, НомерКолонкиСтоимостьФакт).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиДатаОграничения, Индекс2, НомерКолонкиДатаОграничения).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиДатаОграничения, Индекс2, НомерКолонкиДатаОграничения).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиДатаОграничения, 3, НомерКолонкиДатаОграничения).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиВидОграничения, Индекс2, НомерКолонкиВидОграничения).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиВидОграничения, Индекс2, НомерКолонкиВидОграничения).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиВидОграничения, 3, НомерКолонкиВидОграничения).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиДопЗатраты, Индекс2, НомерКолонкиДопЗатраты).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиДопЗатраты, Индекс2, НомерКолонкиДопЗатраты).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиДопЗатраты, 3, НомерКолонкиДопЗатраты).ТипЗначения;
		
		тдПроект.Область(Индекс, НомерКолонкиВеха, Индекс2, НомерКолонкиВеха).СодержитЗначение = Истина;
		тдПроект.Область(Индекс, НомерКолонкиВеха, Индекс2, НомерКолонкиВеха).ТипЗначения = 
			тдПроект.Область(3, НомерКолонкиВеха, 3, НомерКолонкиВеха).ТипЗначения;
		
		Для н = 1 По НомерКолонкиДиаграммыГанта Цикл
			ОбластьНомера = тдПроект.Область(3, н, 3, н);
			тдПроект.Область(Индекс, н, Индекс2, н).ГраницаСверху 	= ОбластьНомера.ГраницаСверху;
			тдПроект.Область(Индекс, н, Индекс2, н).ГраницаСлева 	= ОбластьНомера.ГраницаСлева;
			тдПроект.Область(Индекс, н, Индекс2, н).ГраницаСнизу 	= ОбластьНомера.ГраницаСнизу;
			тдПроект.Область(Индекс, н, Индекс2, н).ГраницаСправа 	= ОбластьНомера.ГраницаСправа;
			тдПроект.Область(Индекс, н, Индекс2, н).ЦветРамки 		= ОбластьНомера.ЦветРамки;
			тдПроект.Область(Индекс, н, Индекс2, н).ЦветТекста 		= ОбластьНомера.ЦветТекста;
			тдПроект.Область(Индекс, н, Индекс2, н).ЦветФона 		= ОбластьНомера.ЦветФона;
			тдПроект.Область(Индекс, н, Индекс2, н).Шрифт 			= Новый Шрифт(ОбластьНомера.Шрифт,,, Ложь);
			тдПроект.Область(Индекс, н, Индекс2, н).Формат 			= тдПроект.Область(3, н, 3, н).Формат;
			тдПроект.Область(Индекс, н, Индекс2, н).ГоризонтальноеПоложение = ОбластьНомера.ГоризонтальноеПоложение;
		КонецЦикла;
		
		тдПроект.Область(Индекс, 0, Индекс2, НомерКолонкиДиаграммыГанта).АвтоВысотаСтроки = Ложь;
		тдПроект.Область(Индекс, 0, Индекс2, НомерКолонкиДиаграммыГанта).ВысотаСтроки = 
			тдПроект.Область(3, , 3, ).ВысотаСтроки;
		
		НачальныйИндекс = Мин(пВерх, ПоследняяСтрока-1);
		НачальныйИндекс = Макс(3, НачальныйИндекс);
		Для Индекс = НачальныйИндекс По пНиз+1 Цикл
			
			Если Индекс = 3 Тогда
				тдПроект.Область(Индекс, 1, Индекс, 1).Текст = "1";
			Иначе
				тдПроект.Область(Индекс, 1, Индекс, 1).Текст = Число(тдПроект.Область(Индекс-1, 1, Индекс-1, 1).Текст) + 1;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиGUID, Индекс, НомерКолонкиGUID).Текст) Тогда
				тдПроект.Область(Индекс, НомерКолонкиGUID, Индекс, НомерКолонкиGUID).Текст = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПоследняяСтрока < пНиз Тогда		
			ПоследняяСтрока = пНиз;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НачалоРабочегоДня(Знач пДата)
	
	Если Час(пДата) < Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне Тогда
		Возврат НачалоДня(пДата) + Час(Объект.НачалоРабочегоДня) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60;
	Иначе
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + 24 * 3600 + Час(Объект.НачалоРабочегоДня) * 3600 
			+ Минута(Объект.НачалоРабочегоДня) * 60, Ложь);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СкорректироватьДатуНачала(Знач пДата)
	
	Если Час(пДата) < Час(Объект.НачалоРабочегоДня) Тогда
		Возврат НачалоДня(пДата) + Час(Объект.НачалоРабочегоДня) * 3600 
			+ Минута(Объект.НачалоРабочегоДня) * 60;
	ИначеЕсли Час(пДата) >= Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + 24 * 3600 
			+ Час(Объект.НачалоРабочегоДня) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60, Ложь);
	Иначе
		Возврат ВернутьДатуСУчетомВыходных(пДата, Ложь);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СкорректироватьДатуОкончания(Знач пДата, Знач СдвигатьНазад = Истина)
	
	Если Час(пДата) <= Час(Объект.НачалоРабочегоДня) И СдвигатьНазад = Истина Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) - 24 * 3600 
			+ (Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне) * 3600 
			+ Минута(Объект.НачалоРабочегоДня) * 60, Истина);
	ИначеЕсли Час(пДата) <= Час(Объект.НачалоРабочегоДня) И СдвигатьНазад = Ложь Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + (Час(Объект.НачалоРабочегоДня) 
			+ Объект.КоличествоРабочихЧасовВДне) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60, Истина);
	ИначеЕсли Час(пДата) > Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне И СдвигатьНазад = Ложь Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + 24*3600 + (Час(Объект.НачалоРабочегоДня) 
			+ Объект.КоличествоРабочихЧасовВДне)*3600 + Минута(Объект.НачалоРабочегоДня)*60, Ложь);
	ИначеЕсли Час(пДата) > Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне И СдвигатьНазад = Истина Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + (Час(Объект.НачалоРабочегоДня) 
			+ Объект.КоличествоРабочихЧасовВДне) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60, Ложь);
	Иначе
		Возврат ВернутьДатуСУчетомВыходных(пДата, СдвигатьНазад);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СкорректироватьДатуНачалаНаСервере(Знач пДата)
	
	Если Час(пДата) < Час(Объект.НачалоРабочегоДня) Тогда
		Возврат НачалоДня(пДата) + Час(Объект.НачалоРабочегоДня) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60;
	ИначеЕсли Час(пДата) >= Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне Тогда
		Возврат НачалоДня(пДата) + 24 * 3600 + Час(Объект.НачалоРабочегоДня) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60;
	Иначе
		Возврат пДата;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СкорректироватьДатуОкончанияНаСервере(Знач пДата, Знач СдвигатьНазад = Истина)
	
	Если Час(пДата) <= Час(Объект.НачалоРабочегоДня) И СдвигатьНазад = Истина Тогда
		Возврат НачалоДня(пДата) - 24 * 3600 + (Час(Объект.НачалоРабочегоДня) 
			+ Объект.КоличествоРабочихЧасовВДне) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60;
	ИначеЕсли Час(пДата) <= Час(Объект.НачалоРабочегоДня) И СдвигатьНазад = Ложь Тогда
		Возврат НачалоДня(пДата) + (Час(Объект.НачалоРабочегоДня) 
			+ Объект.КоличествоРабочихЧасовВДне) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60;
	ИначеЕсли Час(пДата) > Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне И СдвигатьНазад = Ложь Тогда
		Возврат НачалоДня(пДата) + 24*3600 + (Час(Объект.НачалоРабочегоДня) 
			+ Объект.КоличествоРабочихЧасовВДне) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60;
	ИначеЕсли Час(пДата) > Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне И СдвигатьНазад = Истина Тогда
		Возврат НачалоДня(пДата) + (Час(Объект.НачалоРабочегоДня) 
			+ Объект.КоличествоРабочихЧасовВДне) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60;
	Иначе
		Возврат пДата;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ВернутьДатуСУчетомВыходных(Знач пДата, Знач СдвигатьНазад = Истина)
	
	Если СдвигатьНазад = Истина Тогда
		Пока (ДеньНедели(пДата) = 6 И НЕ Объект.СубботаРабочий) 
			ИЛИ (ДеньНедели(пДата) = 7 И НЕ Объект.ВоскресеньеРабочий) Цикл
			пДата = пДата - 3600 * 24;
		КонецЦикла;
	Иначе
		Пока (ДеньНедели(пДата) = 6 И НЕ Объект.СубботаРабочий) 
			ИЛИ (ДеньНедели(пДата) = 7 И НЕ Объект.ВоскресеньеРабочий) Цикл
			пДата = пДата + 3600 * 24;
		КонецЦикла;
	КонецЕсли;
	
	Возврат пДата;
	
КонецФункции

&НаКлиенте
Функция ЭтоВыходной(Знач пДата)
	
	Возврат (ДеньНедели(пДата) = 6 И НЕ Объект.СубботаРабочий) ИЛИ (ДеньНедели(пДата) = 7 И НЕ Объект.ВоскресеньеРабочий);
	
КонецФункции

&НаКлиенте
Процедура ДлительностьИлиНачалоПриИзменении(Знач пВерх, Знач НеОбнулятьЗапаздывание = Ложь) Экспорт
	
	Начало 	  		= тдПроект.Область(пВерх, НомерКолонкиНачало, пВерх, НомерКолонкиНачало).Значение;	
	Длительность 	= тдПроект.Область(пВерх, НомерКолонкиДлительность, пВерх, НомерКолонкиДлительность).Значение;	
	Начало 			= ВернутьДатуСУчетомВыходных(Начало, Ложь);
		
	ДатаОграничения = ПолучитьЗначениеПоКолонке(пВерх, НомерКолонкиДатаОграничения);
	ВидОграничения 	= ПолучитьЗначениеПоКолонке(пВерх, НомерКолонкиВидОграничения);
	
	Если ВидОграничения = ВидыОграничений.ФН Тогда
		Начало = НачалоДня(ДатаОграничения) + Час(Объект.НачалоРабочегоДня) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60;
	ИначеЕсли ВидОграничения = ВидыОграничений.ННП Тогда
		Начало = Мин(Начало, НачалоДня(ДатаОграничения) 
			+ Час(Объект.НачалоРабочегоДня) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60);
	ИначеЕсли ВидОграничения = ВидыОграничений.ННР Тогда
		Начало = Макс(Начало, НачалоДня(ДатаОграничения) 
			+ Час(Объект.НачалоРабочегоДня) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60);
	КонецЕсли;
	
	Окончание = СкорректироватьДатуОкончания(РасчитатьОкончание(Начало, Длительность));
	
	Если ВидОграничения = ВидыОграничений.ФО Тогда
		Окончание = ПолучитьЗначениеПоКолонке(пВерх, НомерКолонкиДатаОграничения);
		Начало = РасчитатьОкончание(Окончание, -Длительность);
		Начало = СкорректироватьДатуНачала(Начало);
	ИначеЕсли ВидОграничения = ВидыОграничений.ОНП Тогда
		Окончание = Мин(Окончание, НачалоДня(ДатаОграничения) + (Час(Объект.НачалоРабочегоДня) 
			+ Объект.КоличествоРабочихЧасовВДне) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60);
		Начало = РасчитатьОкончание(Окончание, -Длительность);
		Начало = СкорректироватьДатуНачала(Начало);
	ИначеЕсли ВидОграничения = ВидыОграничений.ОНР Тогда
		Окончание = Макс(Окончание, НачалоДня(ДатаОграничения) + (Час(Объект.НачалоРабочегоДня) 
			+ Объект.КоличествоРабочихЧасовВДне) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60);
		Начало = РасчитатьОкончание(Окончание, -Длительность);
		Начало = СкорректироватьДатуНачала(Начало);
	КонецЕсли;
	
	// Смотрим запаздывание
	Если НЕ НеОбнулятьЗапаздывание Тогда
		ТаблицаПредшественников = ПолучитьСписокПредшественников(пВерх);
		Если ТаблицаПредшественников.Количество() > 0 Тогда
			Попытка
				МаксимальноеОкончаниеСтрока = ТаблицаПредшественников[0];
				МаксимальноеОкончаниеСтрока.Запаздывание = 0;
				Если МаксимальноеОкончаниеСтрока.ВидСвязи = ВидыСвязей.ОН
					ИЛИ МаксимальноеОкончаниеСтрока.ВидСвязи = ВидыСвязей.ОО Тогда 
					МаксимальноеОкончаниеДата   = тдПроект.Область(Число(МаксимальноеОкончаниеСтрока.Начало), НомерКолонкиОкончание, 
						Число(МаксимальноеОкончаниеСтрока.Начало), НомерКолонкиОкончание).Значение;
				Иначе
					МаксимальноеОкончаниеДата   = тдПроект.Область(Число(МаксимальноеОкончаниеСтрока.Начало), НомерКолонкиНачало, 
						Число(МаксимальноеОкончаниеСтрока.Начало), НомерКолонкиНачало).Значение;
				КонецЕсли;
				
				Если МаксимальноеОкончаниеСтрока.ВидСвязи = ВидыСвязей.НО
					 ИЛИ МаксимальноеОкончаниеСтрока.ВидСвязи = ВидыСвязей.ОО Тогда 
					 МаксимальноеОкончаниеДата = РасчитатьОкончание(МаксимальноеОкончаниеДата, -Длительность);
					 МаксимальноеОкончаниеДата = СкорректироватьДатуОкончания(МаксимальноеОкончаниеДата);
				КонецЕсли;
				
				Для Индекс = 1 По ТаблицаПредшественников.количество()-1 Цикл
					Попытка
						СтрокаТаблицы = ТаблицаПредшественников[Индекс];
						СтрокаТаблицы.Запаздывание = 0;
						Если СтрокаТаблицы.ВидСвязи = ВидыСвязей.ОН
							ИЛИ СтрокаТаблицы.ВидСвязи = ВидыСвязей.ОО Тогда 
							ДатаОкончанияПредшественника = тдПроект.Область(Число(СтрокаТаблицы.Начало), НомерКолонкиОкончание, 
								Число(СтрокаТаблицы.Начало), НомерКолонкиОкончание).Значение;
						Иначе
							ДатаОкончанияПредшественника = тдПроект.Область(Число(СтрокаТаблицы.Начало), НомерКолонкиНачало, 
								Число(СтрокаТаблицы.Начало), НомерКолонкиНачало).Значение;
						КонецЕсли;
						
						Если СтрокаТаблицы.ВидСвязи = ВидыСвязей.НО ИЛИ 
					 		 СтрокаТаблицы.ВидСвязи = ВидыСвязей.ОО Тогда 
							 ДатаОкончанияПредшественника = РасчитатьОкончание(ДатаОкончанияПредшественника, -Длительность);
							 ДатаОкончанияПредшественника = СкорректироватьДатуОкончания(ДатаОкончанияПредшественника);
						КонецЕсли;
						
						Если ДатаОкончанияПредшественника > МаксимальноеОкончаниеДата Тогда
							МаксимальноеОкончаниеСтрока = СтрокаТаблицы;
							МаксимальноеОкончаниеДата   = ДатаОкончанияПредшественника;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЦикла;
				
				// Высчитываем запаздывание
				Если МаксимальноеОкончаниеДата > Начало И НачалоДня(МаксимальноеОкончаниеДата) = НачалоДня(Начало) Тогда
					// продолжить
				ИначеЕсли МаксимальноеОкончаниеДата > Начало Тогда
					МаксимальноеОкончаниеСтрока.Запаздывание = -РасчитатьРазницуМеждуДатами(Начало, МаксимальноеОкончаниеДата);	
				ИначеЕсли МаксимальноеОкончаниеДата < Начало Тогда
					МаксимальноеОкончаниеСтрока.Запаздывание = РасчитатьРазницуМеждуДатами(МаксимальноеОкончаниеДата, Начало);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////////
	
	тдПроект.Область(пВерх, НомерКолонкиНачало, пВерх, НомерКолонкиНачало).Значение	      = Начало;
	
	Если Длительность = 0 Тогда
		Окончание = Начало;
	КонецЕсли;
	
	тдПроект.Область(пВерх, НомерКолонкиОкончание, пВерх, НомерКолонкиОкончание).Значение = Окончание;
	
	тдПроект.Область(пВерх, НомерКолонкиОкончание, пВерх, НомерКолонкиОкончание).Примечание.Текст = "";
	тдПроект.Область(пВерх, НомерКолонкиНачало, пВерх, НомерКолонкиНачало).Примечание.Текст = "";
	
	Если ВидОграничения = ВидыОграничений.ФО ИЛИ ВидОграничения = ВидыОграничений.ОНП ИЛИ ВидОграничения = ВидыОграничений.ОНР Тогда
		тдПроект.Область(пВерх, НомерКолонкиОкончание, пВерх, НомерКолонкиОкончание).Примечание.Текст = 
			НСтр("ru = 'Вид ограничения'") + ": " + Символы.Таб + """" 
				+ ПолучитьСтроковоеПредставленияВидаОграничения(ВидОграничения) + """" + Символы.ПС
				+ НСтр("ru = 'Дата ограничения'") + ":" + Символы.Таб + Формат(ДатаОграничения, "ДФ=dd.MM.yyyy");
	ИначеЕсли ВидОграничения = ВидыОграничений.ФН ИЛИ ВидОграничения = ВидыОграничений.ННП ИЛИ ВидОграничения = ВидыОграничений.ННР Тогда
		тдПроект.Область(пВерх, НомерКолонкиНачало, пВерх, НомерКолонкиНачало).Примечание.Текст = 
			НСтр("ru = 'Вид ограничения'") + ": " + Символы.Таб + """" 
				+ ПолучитьСтроковоеПредставленияВидаОграничения(ВидОграничения) + """" + Символы.ПС
				+ НСтр("ru = 'Дата ограничения'") + ":" + Символы.Таб + Формат(ДатаОграничения, "ДФ=dd.MM.yyyy");
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция РасчитатьОкончание(Знач пНачало, Знач пДлительность) Экспорт
	
	Перем Начало, Длительность;
	
	Начало = пНачало;
	Длительность = пДлительность;
	Счетчик = Длительность;
	Окончание = Начало;
	
	Если Длительность >= 0 Тогда
		Пока Счетчик > 0 Цикл
			
			Если Счетчик >= Объект.КоличествоРабочихЧасовВДне / 10 Тогда
				Окончание = Окончание + 3600 * 24;
			Иначе
				Окончание = Окончание + 3600 * Счетчик * 10;
			КонецЕсли;
			
			Если Окончание>НачалоДня(Окончание)+Час(Объект.НачалоРабочегоДня) * 3600 + Минута(Объект.НачалоРабочегоДня) * 60 
				+ (Объект.КоличествоРабочихЧасовВДне * 3600) Тогда
				
				Окончание = НачалоДня(Окончание + 24 * 3600) + Час(Объект.НачалоРабочегоДня) * 3600 
					+ Минута(Объект.НачалоРабочегоДня) * 60 
					+ (Окончание - (НачалоДня(Окончание) + Час(Объект.НачалоРабочегоДня) * 3600 
					+ Минута(Объект.НачалоРабочегоДня) * 60 + (Объект.КоличествоРабочихЧасовВДне * 3600)))
				
			КонецЕсли;
			
			Пока (ДеньНедели(Окончание) = 7 И НЕ Объект.ВоскресеньеРабочий)
				ИЛИ ((ДеньНедели(Окончание) = 6 И НЕ Объект.СубботаРабочий) И Час(Окончание)>0) Цикл
				
				Окончание = Окончание + (3600 * 24);
				
			КонецЦикла;
			
			Счетчик = Счетчик - 1;
			
		КонецЦикла;
	Иначе
		Пока Счетчик < 0 Цикл
			
			Если Счетчик <= -Объект.КоличествоРабочихЧасовВДне/10 Тогда
				Окончание = Окончание - (3600 * 24);
			Иначе
				
				Пока Счетчик < 0 Цикл
					Если Час(Окончание - 3600) >= Час(Объект.НачалоРабочегоДня) 
						И Час(Окончание - 3600) < Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне Тогда
						
						Окончание = Окончание - 3600;
						
					Иначе
						
						Окончание = НачалоДня(Окончание - 24 * 3600) + (Час(Объект.НачалоРабочегоДня) - 1) * 3600 
							+ Минута(Объект.НачалоРабочегоДня) * 3600;
						
					КонецЕсли;
					
					Счетчик = Счетчик + 0.1;
				КонецЦикла;
				
				
			КонецЕсли;
			
			Пока (ДеньНедели(Окончание) = 7 И НЕ Объект.ВоскресеньеРабочий) 
				ИЛИ ((ДеньНедели(Окончание) = 6 И НЕ Объект.СубботаРабочий) И Час(Окончание) > 0) Цикл
				
				Окончание = Окончание - 3600 * 24;
				
			КонецЦикла;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
	КонецЕсли;

	Возврат Окончание;
	
КонецФункции

&НаКлиенте
Функция РасчитатьРазницуМеждуДатами(Знач пНачало, Знач пОкончание) Экспорт 
	
	Перем Начало, Окончание;
	Начало = пНачало;
	Окончание = пОкончание;
	
	Длительность = 0;
	Если Год(Начало) <> 1 Тогда
		Пока Начало < Окончание Цикл
			
			Если НачалоДня(Начало) <> НачалоДня(Окончание) 
				И Начало + (3600 * 24) <> ВернутьДатуСУчетомВыходных(Начало + 3600 * 24, Ложь) Тогда
				
				Начало = Начало + (3600 * 24);
				Продолжить;
				
			ИначеЕсли Окончание - Начало >= 3600 * 24 Тогда
				Длительность = Длительность + 1;
			
			ИначеЕсли (Окончание - Начало >= 24 * 3600) ИЛИ
				(Окончание - Начало >= (3600 * Объект.КоличествоРабочихЧасовВДне) 
				И НачалоДня(Окончание)= НачалоДня(Начало)) Тогда
				
				Если НЕ (Час(Окончание) <= Час(Объект.НачалоРабочегоДня) 
					ИЛИ Час(Начало) >= Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне) Тогда
					Длительность = Длительность + 1;
				КонецЕсли;
				
			ИначеЕсли (Окончание - Начало >= 3600 * Объект.КоличествоРабочихЧасовВДне
				И НачалоДня(Окончание) <> НачалоДня(Начало)) 
				И Окончание - Начало < 24 * 3600 Тогда // переход на следующий день, но еще не прошло полностью сутки
				
				КонецРабочегоДня = Объект.НачалоРабочегоДня + 3600 * Объект.КоличествоРабочихЧасовВДне;
				ВремяВСекундах = ((НачалоДня(Начало) + Час(КонецРабочегоДня) * 3600 + Минута(КонецРабочегоДня) * 60) - Начало)
					+ (Окончание - (НачалоДня(Окончание) + Час(Объект.НачалоРабочегоДня) * 3600 
					+ Минута(Объект.НачалоРабочегоДня) * 60));
				Длительность = Длительность + Мин(Окр(ВремяВСекундах/(3600 * 10), 1), 1);
				
			Иначе
				Длительность = Длительность + Окр((Окончание - Начало)/(3600 * 10), 1);
				
			КонецЕсли;
			
			Начало = Начало + (3600 * 24);
			
			Начало = ВернутьДатуСУчетомВыходных(Начало, Ложь);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Длительность;
КонецФункции

&НаКлиенте
Процедура ОкончаниеПриИзменении(Знач пВерх, Знач РедактированиеВДиаграммеГанта = Ложь) Экспорт
	
	Начало 	  	= тдПроект.Область(пВерх, НомерКолонкиНачало, пВерх, НомерКолонкиНачало).Значение;
	Окончание 	= тдПроект.Область(пВерх, НомерКолонкиОкончание, пВерх, НомерКолонкиОкончание).Значение;
	
	Начало 		= ВернутьДатуСУчетомВыходных(Начало, Ложь);
	Окончание 	= СкорректироватьДатуОкончания(Окончание, Ложь);
		
	Если Начало >= Окончание Тогда
		Окончание = Начало  + 3600 * 24;
		СкорректироватьДатуОкончания(Окончание, Ложь);
	КонецЕсли;
	
	ДатаОграничения = ПолучитьЗначениеПоКолонке(пВерх, НомерКолонкиДатаОграничения);
	ВидОграничения 	= ПолучитьЗначениеПоКолонке(пВерх, НомерКолонкиВидОграничения);
	Длительность 	= ПолучитьЗначениеПоКолонке(пВерх, НомерКолонкиДлительность);
	
	тдПроект.Область(пВерх, НомерКолонкиОкончание, пВерх, НомерКолонкиОкончание).Примечание.Текст = "";
	тдПроект.Область(пВерх, НомерКолонкиНачало, пВерх, НомерКолонкиНачало).Примечание.Текст = "";
	
	Если ВидОграничения = ВидыОграничений.ФО ИЛИ ВидОграничения = ВидыОграничений.ОНП ИЛИ ВидОграничения = ВидыОграничений.ОНР Тогда
		тдПроект.Область(пВерх, НомерКолонкиОкончание, пВерх, НомерКолонкиОкончание).Примечание.Текст = 
			НСтр("ru = 'Вид ограничения'") + ": " + Символы.Таб + """" 
				+ ПолучитьСтроковоеПредставленияВидаОграничения(ВидОграничения) + """" + Символы.ПС + 
			НСтр("ru = 'Дата ограничения'") + ":" + Символы.Таб 
				+ Формат(ДатаОграничения, "ДФ=dd.MM.yyyy");
	ИначеЕсли ВидОграничения = ВидыОграничений.ФН ИЛИ ВидОграничения = ВидыОграничений.ННП ИЛИ ВидОграничения = ВидыОграничений.ННР Тогда
		тдПроект.Область(пВерх, НомерКолонкиНачало, пВерх, НомерКолонкиНачало).Примечание.Текст = 
			НСтр("ru = 'Вид ограничения'") + ": " + Символы.Таб + """" 
				+ ПолучитьСтроковоеПредставленияВидаОграничения(ВидОграничения) + """" + Символы.ПС + 
			НСтр("ru = 'Дата ограничения'") + ":" + Символы.Таб + Формат(ДатаОграничения, "ДФ=dd.MM.yyyy");
			
	КонецЕсли;
	
	Если (ВидОграничения = ВидыОграничений.ФН ИЛИ ВидОграничения = ВидыОграничений.ННП 
			ИЛИ ВидОграничения = ВидыОграничений.ННР) И Начало > Окончание Тогда
		Окончание = РасчитатьОкончание(Начало, Длительность);
	КонецЕсли;
	
	Если ВидОграничения = ВидыОграничений.ФО Тогда
		Окончание = ПолучитьЗначениеПоКолонке(пВерх, НомерКолонкиДатаОграничения);
		Если Начало > Окончание Тогда
			Начало = РасчитатьОкончание(Окончание, -Длительность);
		КонецЕсли;
	ИначеЕсли ВидОграничения = ВидыОграничений.ОНП Тогда
		Окончание = Мин(Окончание, ДатаОграничения);
		Если Начало > Окончание Тогда
			Начало = РасчитатьОкончание(Окончание, -Длительность);
		КонецЕсли;
	ИначеЕсли ВидОграничения = ВидыОграничений.ОНР Тогда
		Окончание = Макс(Окончание, ДатаОграничения);
		Если Начало > Окончание Тогда
			Начало = РасчитатьОкончание(Окончание, -Длительность);
		КонецЕсли;
	КонецЕсли;
	
	тдПроект.Область(пВерх, НомерКолонкиНачало, 	пВерх, НомерКолонкиНачало).Значение		= Начало;
	тдПроект.Область(пВерх, НомерКолонкиОкончание, 	пВерх, НомерКолонкиОкончание).Значение	= Окончание;
	
	Длительность = РасчитатьРазницуМеждуДатами(Начало, Окончание);
	
	Если РедактированиеВДиаграммеГанта Тогда
		ТаблицаПредшественников = ПолучитьСписокПредшественников(пВерх);
		Если ТаблицаПредшественников.Количество()>0 Тогда
			МаксимальноеОкончаниеСтрока = ТаблицаПредшественников[0];
			МаксимальноеОкончаниеСтрока.Запаздывание = 0;
			Если МаксимальноеОкончаниеСтрока.ВидСвязи = ВидыСвязей.ОН ИЛИ 
				 МаксимальноеОкончаниеСтрока.ВидСвязи = ВидыСвязей.ОО Тогда 
				МаксимальноеОкончаниеДата   = тдПроект.Область(Число(МаксимальноеОкончаниеСтрока.Начало), НомерКолонкиОкончание, 
					Число(МаксимальноеОкончаниеСтрока.Начало), НомерКолонкиОкончание).Значение;
			Иначе
				МаксимальноеОкончаниеДата   = тдПроект.Область(Число(МаксимальноеОкончаниеСтрока.Начало), НомерКолонкиНачало,
					Число(МаксимальноеОкончаниеСтрока.Начало), НомерКолонкиНачало).Значение;
			КонецЕсли;
			
			Если МаксимальноеОкончаниеСтрока.ВидСвязи = ВидыСвязей.НО ИЛИ 
				 МаксимальноеОкончаниеСтрока.ВидСвязи = ВидыСвязей.ОО Тогда 
				 МаксимальноеОкончаниеДата = РасчитатьОкончание(МаксимальноеОкончаниеДата, -Длительность);
			КонецЕсли;
			
			Для Индекс = 1 По ТаблицаПредшественников.количество()-1 Цикл
				СтрокаТаблицы = ТаблицаПредшественников[Индекс];
				СтрокаТаблицы.Запаздывание = 0;
				Если СтрокаТаблицы.ВидСвязи = ВидыСвязей.ОН ИЛИ 
					 СтрокаТаблицы.ВидСвязи = ВидыСвязей.ОО Тогда 
					ДатаОкончанияПредшественника = тдПроект.Область(Число(СтрокаТаблицы.Начало), НомерКолонкиОкончание,
						Число(СтрокаТаблицы.Начало), НомерКолонкиОкончание).Значение;
				Иначе
					ДатаОкончанияПредшественника = тдПроект.Область(Число(СтрокаТаблицы.Начало), НомерКолонкиНачало,
						Число(СтрокаТаблицы.Начало), НомерКолонкиНачало).Значение;
				КонецЕсли;
				
				Если СтрокаТаблицы.ВидСвязи = ВидыСвязей.НО ИЛИ 
					  СтрокаТаблицы.ВидСвязи = ВидыСвязей.ОО Тогда 
					 ДатаОкончанияПредшественника = РасчитатьОкончание(ДатаОкончанияПредшественника, -Длительность);
				КонецЕсли;
				
				Если ДатаОкончанияПредшественника > МаксимальноеОкончаниеДата Тогда
					МаксимальноеОкончаниеСтрока = СтрокаТаблицы;
					МаксимальноеОкончаниеДата   = ДатаОкончанияПредшественника;
				КонецЕсли;
			КонецЦикла;
			
			// Высчитываем запаздывание
			Если МаксимальноеОкончаниеДата > Начало Тогда
				МаксимальноеОкончаниеСтрока.Запаздывание = -РасчитатьРазницуМеждуДатами(Начало, МаксимальноеОкончаниеДата);	
			ИначеЕсли МаксимальноеОкончаниеДата < Начало Тогда
				МаксимальноеОкончаниеСтрока.Запаздывание = РасчитатьРазницуМеждуДатами(МаксимальноеОкончаниеДата, Начало);
			КонецЕсли;
		КонецЕсли;
    КонецЕсли;
	
	тдПроект.Область(пВерх, НомерКолонкиДлительность, пВерх, НомерКолонкиДлительность).Значение = Длительность;
	
КонецПроцедуры					

&НаКлиенте
Функция ПолучитьСтроковоеПредставленияВидаОграничения(Знач ВидОграничения) Экспорт
	
	Если ВидОграничения = ВидыОграничений.КМР Тогда
		Возврат НСтр("ru = 'Как можно раньше'");
	ИначеЕсли ВидОграничения = ВидыОграничений.КМП Тогда
		Возврат НСтр("ru = 'Как можно позже'");
	ИначеЕсли ВидОграничения = ВидыОграничений.ОНП Тогда
		Возврат НСтр("ru = 'Окончание не позже'");
	ИначеЕсли ВидОграничения = ВидыОграничений.ННП Тогда
		Возврат НСтр("ru = 'Начало не позже'");
	ИначеЕсли ВидОграничения = ВидыОграничений.ОНР Тогда
		Возврат НСтр("ru = 'Окончание не раньше'");
	ИначеЕсли ВидОграничения = ВидыОграничений.ННР Тогда
		Возврат НСтр("ru = 'Начало не раньше'");
	ИначеЕсли ВидОграничения = ВидыОграничений.ФН Тогда
		Возврат НСтр("ru = 'Фиксированное начало'");
	ИначеЕсли ВидОграничения = ВидыОграничений.ФО Тогда
		Возврат НСтр("ru = 'Фиксированное окончание'");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗаголовок();
	
	Заголовок = СтрШаблон(НСтр("ru = 'Управление проектом [%1]'"), Объект.Проект);
	Элементы.СохранениеПроекта.Картинка = ?(Модифицированность, 		
		БиблиотекаКартинок.СохранитьИзмененныйПроект,
		БиблиотекаКартинок.СохранитьПроект);
		
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// Работа с иерархией

#Область РаботаСИерархией

&НаКлиенте
Функция НайтиРодителяВерхнейИерархии(Знач Строка, Знач Отступ)Экспорт
	
	Попытка
		НомерСтрокиРодителя = Число(тдПроект.Область(Строка, НомерКолонкиРодитель, Строка, НомерКолонкиРодитель).Текст);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Если тдПроект.Область(НомерСтрокиРодителя, НомерКолонкиНазвание, НомерСтрокиРодителя, НомерКолонкиНазвание).Отступ + 2 = Отступ Тогда
		Возврат НомерСтрокиРодителя;
	Иначе
		Возврат НайтиРодителяВерхнейИерархии(НомерСтрокиРодителя, Отступ);
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ЭтоСуммирующаяЗадача(Знач Строка) Экспорт
	Возврат тдПроект.Область(Строка, НомерКолонкиНазвание, Строка, НомерКолонкиНазвание).Отступ < 
	тдПроект.Область(Число(Строка)+1, НомерКолонкиНазвание, Число(Строка)+1, НомерКолонкиНазвание).Отступ;
КонецФункции

&НаКлиенте
Процедура ЗанулитьРодителя(Знач пВерх) Экспорт
	тдПроект.Область(пВерх, НомерКолонкиДлительность, пВерх,НомерКолонкиДлительность).Значение = 1;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРодителей(Знач НачальныйИндекс, Знач КонечныйИндекс)
	
	ТекРодитель = "";
	ОтступПредыдущейСтроки = 2;     
	ВывестиСостояние(НСтр("ru = 'Обновляем иерархию задач...'"));
	Для Строка = НачальныйИндекс По КонечныйИндекс Цикл
		Отступ = тдПроект.Область(Строка, НомерКолонкиНазвание, Строка, НомерКолонкиНазвание).Отступ;
		Если Отступ <=2 Тогда
			ТекРодитель = "";
		ИначеЕсли ОтступПредыдущейСтроки = Отступ Тогда
			//
		ИначеЕсли  ОтступПредыдущейСтроки < Отступ Тогда
			ТекРодитель = Строка - 1;
		ИначеЕсли  ОтступПредыдущейСтроки > Отступ Тогда
			ТекРодитель = НайтиРодителяВерхнейИерархии(Строка-1, Отступ);
		КонецЕсли;
		
		тдПроект.Область(Строка, НомерКолонкиРодитель, Строка, НомерКолонкиРодитель).Текст = ТекРодитель;
		
		ОтступПредыдущейСтроки = Отступ;
	КонецЦикла;
	
	ВывестиСостояние("");
	
КонецПроцедуры

&НаСервере
Процедура ВернутьРезультатПостроителяОтчетаНаСервере()
	
	Построитель = Новый ПостроительОтчета;
	ИсточникДанных = Новый ОписаниеИсточникаДанных(тдПроект.Область(1, 1, ПоследняяСтрока, НомерКолонкиОписание));
	
	ИсточникДанных.Колонки.Родитель.Измерение = Истина;
		
	ИсточникДанных.Колонки.Длит_Дн_.Итог 	= " Сумма(Длит_Дн_) ";
	
	Построитель.ИсточникДанных = ИсточникДанных;
	Построитель.Параметры.Вставить("ПустаяДата", Дата('00010101'));
	Построитель.Параметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	Построитель.ЗаполнитьНастройки();
	Построитель.ВыбранныеПоля.Очистить();
	Построитель.ВыбранныеПоля.Добавить("Затраты", "Затраты");
	Построитель.ВыбранныеПоля.Добавить("Стоимость", "Стоимость");
	
	Построитель.ВыбранныеПоля.Добавить("Факт_Затраты", "Факт_Затраты");
	Построитель.ВыбранныеПоля.Добавить("Факт_Стоимость", "Факт_Стоимость");
	
	Построитель.ВыбранныеПоля.Добавить("Начало", "Начало");
	Построитель.ВыбранныеПоля.Добавить("Родитель", "Родитель");
	Построитель.ВыбранныеПоля.Добавить("Окончание", "Окончание");
	Построитель.ВыбранныеПоля.Добавить("_", "_");
	Построитель.ВыбранныеПоля.Добавить("РесурсыЗначение", "РесурсыЗначение");
	Построитель.ВыбранныеПоля.Добавить("Длит_Дн_", "Длит_Дн_");
	Построитель.ВыбранныеПоля.Добавить("_Завершения", "_Завершения");
	Построитель.ВыбранныеПоля.Добавить("ВспомогательноеПоле", "ВспомогательноеПоле");
	
	Построитель.ВыбранныеПоля.Добавить("Дополнительные_затраты", "Дополнительные_затраты");
	Построитель.ВыбранныеПоля.Добавить("Доп_стоимость", "Доп_стоимость");
	Построитель.ИзмеренияСтроки.Очистить();
		
	Построитель.Выполнить();
	РезультатЗапроса = Построитель.Результат.Выгрузить();
	РезультатЗапроса.Удалить(0);
	
	ЗначениеВРеквизитФормы(РезультатЗапроса, "ТаблицаДляПостроителяЗапроса");
	
	Построитель = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоги(Знач ОбновлятьВсюДиаграмму = Ложь, Знач ВерхняяПозиция = 0, Знач НижняяПозиция = 0) Экспорт
	
	ПустаяДата = Дата(1, 1, 1);
	СоответствиеОбработанныхРодителей = Новый Соответствие;	
	ВерхняяГраница = 3;
	НижняяГраница = ПоследняяСтрока;
	
	Если ВерхняяПозиция > 0 Тогда
		//Определяем верхнюю границу
		Отступ = тдПроект.Область(ВерхняяПозиция, НомерКолонкиНазвание, ВерхняяПозиция, НомерКолонкиНазвание).Отступ;
		Если Отступ <= 2 Тогда
			ВерхняяГраница = ВерхняяПозиция
		Иначе
			Строка = ВерхняяПозиция - 1;
			Пока Строка >= 3 Цикл
				Если тдПроект.Область(Строка, НомерКолонкиНазвание, Строка, НомерКолонкиНазвание).Отступ = 2 Тогда
					ВерхняяГраница = Строка;
					Прервать;
				КонецЕсли;
				Строка = Строка - 1;
			КонецЦикла;
		КонецЕсли;
		
		//Определяем нижнюю границу
		Отступ = тдПроект.Область(НижняяПозиция, НомерКолонкиНазвание, НижняяПозиция, НомерКолонкиНазвание).Отступ;
		Если Отступ <= 2 Тогда
			НижняяГраница = НижняяПозиция
		Иначе
			Строка = НижняяПозиция + 1;
			Пока Строка <= ПоследняяСтрока Цикл
				Если тдПроект.Область(Строка, НомерКолонкиНазвание, Строка, НомерКолонкиНазвание).Отступ = 2 Тогда
					НижняяГраница = Строка-1;
					Прервать;
				КонецЕсли;
				Строка = Строка + 1;
			КонецЦикла;
		КонецЕсли;
		
		НижняяГраница = Мин(ПоследняяСтрока, НижняяГраница);
	КонецЕсли;
	
	ОпределитьРодителей(Макс(ВерхняяГраница, 3), НижняяГраница);
	ВывестиСостояние(НСтр("ru = 'Обновление иготов в суммирующих задачах...'"));

	//Сервер
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		Построитель = Новый ПостроительОтчета;
		ИсточникДанных = Новый ОписаниеИсточникаДанных(тдПроект.Область(1, 1, ПоследняяСтрока, НомерКолонкиОписание));
		
		ИсточникДанных.Колонки.Родитель.Измерение = Истина;
			
		ИсточникДанных.Колонки.Длит_Дн_.Итог 	= " Сумма(Длит_Дн_) ";
				
		Построитель.ИсточникДанных = ИсточникДанных;
		Построитель.Параметры.Вставить("ПустаяДата", Дата('00010101'));
		Построитель.Параметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
		Построитель.ЗаполнитьНастройки();
		Построитель.ВыбранныеПоля.Очистить();
		Построитель.ВыбранныеПоля.Добавить("Затраты", "Затраты");
		Построитель.ВыбранныеПоля.Добавить("Стоимость", "Стоимость");
		
		Построитель.ВыбранныеПоля.Добавить("Факт_Затраты", "Факт_Затраты");
		Построитель.ВыбранныеПоля.Добавить("Факт_Стоимость", "Факт_Стоимость");
		
		Построитель.ВыбранныеПоля.Добавить("Начало", "Начало");
		Построитель.ВыбранныеПоля.Добавить("Родитель", "Родитель");
		Построитель.ВыбранныеПоля.Добавить("Окончание", "Окончание");
		Построитель.ВыбранныеПоля.Добавить("_", "_");
		Построитель.ВыбранныеПоля.Добавить("РесурсыЗначение", "РесурсыЗначение");
		Построитель.ВыбранныеПоля.Добавить("Длит_Дн_", "Длит_Дн_");
		Построитель.ВыбранныеПоля.Добавить("_Завершения", "_Завершения");
		Построитель.ВыбранныеПоля.Добавить("ВспомогательноеПоле", "ВспомогательноеПоле");
		
		Построитель.ВыбранныеПоля.Добавить("Дополнительные_затраты", "Дополнительные_затраты");
		Построитель.ВыбранныеПоля.Добавить("Доп_стоимость", "Доп_стоимость");
		Построитель.ИзмеренияСтроки.Очистить();
			
		Построитель.Выполнить();
		РезультатЗапроса = Построитель.Результат.Выгрузить();
		РезультатЗапроса.Удалить(0);
		
		Построитель = Неопределено;
	#Иначе
		ТаблицаДляПостроителяЗапроса.Очистить();
		// Обходим - так быстрее, чем через сервер
		НоваяСтрока = ТаблицаДляПостроителяЗапроса.Добавить();
		Для Строка = 3 По НижняяГраница Цикл
			НоваяСтрока = ТаблицаДляПостроителяЗапроса.Добавить();
			НоваяСтрока.Затраты 		= ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиЗатраты);
			НоваяСтрока.Стоимость 		= ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиСтоимость);
			
			НоваяСтрока.Факт_Затраты 	= ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиЗатратыФакт);
			НоваяСтрока.Факт_Стоимость 	= ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиСтоимостьФакт);
			
			НоваяСтрока.Начало 			= ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиНачало);
			НоваяСтрока.Родитель		= ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиРодитель);
			НоваяСтрока.Окончание 		= ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиОкончание);
			НоваяСтрока._ 				= ПолучитьЗначениеПоКолонке(Строка, 1);
			НоваяСтрока.РесурсыЗначение = ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиРесурсы);
			НоваяСтрока.Длит_Дн_ 		= ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиДлительность);
			НоваяСтрока._Завершения 	= ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиПроцентЗавершения);
			НоваяСтрока.ВспомогательноеПоле = 0;
			
			НоваяСтрока.Дополнительные_затраты 	= ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиДопЗатраты);
			НоваяСтрока.Доп_стоимость 	= ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиДопСтоимость);
		КонецЦикла;
		РезультатЗапроса =  ТаблицаДляПостроителяЗапроса;
	#КонецЕсли

	Строка = НижняяГраница;
		
	Пока Строка >= ВерхняяГраница Цикл
		СтрокаТаблицы = РезультатЗапроса[Строка-2];
		Длительность 				= СтрокаТаблицы["Длит_Дн_"];
		Завершено 					= СтрокаТаблицы["_Завершения"];
		КоличествоПодчиненныхЗадач 	= СтрокаТаблицы["ВспомогательноеПоле"];;
		СтруктураСтоимостныйПоказателей = ПолучитьЗатратыЗадачи2(Строка-2, ,РезультатЗапроса);
		Затраты 	= СтруктураСтоимостныйПоказателей.Затраты;
		Стоимость 	= СтруктураСтоимостныйПоказателей.Стоимость;
		СтрокаТаблицы["Затраты"] = Затраты;
		СтрокаТаблицы["Стоимость"] = Стоимость;
		УстановитьЗатраты(Строка, Затраты);
		УстановитьСтоимость(Строка, Стоимость);
		
		ЗатратыФакт 	= СтрокаТаблицы["Факт_Затраты"];
		СтоимостьФакт	= СтрокаТаблицы["Факт_Стоимость"];
		
		тдПроект.Область(Строка, НомерКолонкиЗатратыФакт, Строка, НомерКолонкиЗатратыФакт).Значение = ЗатратыФакт;
		тдПроект.Область(Строка, НомерКолонкиСтоимостьФакт, Строка, НомерКолонкиСтоимостьФакт).Значение = СтоимостьФакт;
		
		Если СоответствиеОбработанныхРодителей.Получить(Строка) = Неопределено Тогда
			КоличествоПодчиненныхЗадач = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КоличествоПодчиненныхЗадач) Тогда
			
			Завершено 					= Завершено / КоличествоПодчиненныхЗадач;
			тдПроект.Область(Строка, НомерКолонкиПроцентЗавершения, Строка, НомерКолонкиПроцентЗавершения).Значение = Завершено;
			тдПроект.Область(Строка, НомерКолонкиНачало, Строка, НомерКолонкиНачало).Значение = СтрокаТаблицы["Начало"];
			тдПроект.Область(Строка, НомерКолонкиОкончание, Строка, НомерКолонкиОкончание).Значение = СтрокаТаблицы["Окончание"];
			СтрокаТаблицы["_Завершения"] = Завершено;
			ОкончаниеПриИзменении(Строка);
			СтрокаТаблицы["Длит_Дн_"] = ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиДлительность);
			
			КоличествоПодчиненныхЗадач 	= Длительность;
			Завершено 				   	= Завершено * Длительность;
		Иначе
			КоличествоПодчиненныхЗадач 	= Длительность;
			Завершено 				   	= Завершено * Длительность;
		КонецЕсли;
		
		// Дополнительные флаги
		БылМинус 				= Ложь;
		БылЗаворот 				= Ложь;
		Индекс 					= Строка-1;
		ОтнималиОтКоличества 	= Истина;
		Отступ 					= тдПроект.Область(Строка, НомерКолонкиНазвание, Строка, НомерКолонкиНазвание).Отступ;
		
		///////////////////////////
		Попытка
			Индекс = Число(СтрокаТаблицы["Родитель"]);
		Исключение
			Индекс = 0;
		КонецПопытки;
		
		Если НЕ ЗначениеЗаполнено(Индекс) Тогда
			
		Иначе
			СтрокаРодителя = РезультатЗапроса[Индекс-2];
					
			Если СоответствиеОбработанныхРодителей.Получить(Индекс) = Неопределено Тогда
										
				СтрокаРодителя["Начало"] = СтрокаТаблицы["Начало"];
				СтрокаРодителя["Окончание"] = СтрокаТаблицы["Окончание"];
				
				СтрокаРодителя["_Завершения"] = 0;//Завершено;
				СтрокаРодителя["ВспомогательноеПоле"] = 0;//Завершено;
				СтрокаРодителя["Затраты"] = 0;		
				СтрокаРодителя["Факт_Затраты"] = 0;		
				СтрокаРодителя["Стоимость"] = 0;		
				СтрокаРодителя["Факт_Стоимость"] = 0;		
				СоответствиеОбработанныхРодителей.Вставить(Индекс, Истина)
			КонецЕсли;
				
			// Основной расчет
			
			Если СтрокаРодителя["Начало"] > ПустаяДата И СтрокаТаблицы["Начало"] > ПустаяДата Тогда
				СтрокаРодителя["Начало"] = Мин(СтрокаРодителя["Начало"], СтрокаТаблицы["Начало"]);
			ИначеЕсли СтрокаТаблицы["Начало"] > ПустаяДата Тогда
				СтрокаРодителя["Начало"] = СтрокаТаблицы["Начало"];
			КонецЕсли;
			
			Если СтрокаРодителя["Окончание"] > ПустаяДата И СтрокаРодителя["Окончание"] > ПустаяДата Тогда
				СтрокаРодителя["Окончание"] = Макс(СтрокаРодителя["Окончание"], СтрокаТаблицы["Окончание"]);
			ИначеЕсли СтрокаТаблицы["Окончание"] > ПустаяДата Тогда
				СтрокаРодителя["Окончание"] = СтрокаТаблицы["Окончание"];
			КонецЕсли;
			
			СтрокаРодителя["_Завершения"] = СтрокаРодителя["_Завершения"] + Завершено;
			СтрокаРодителя["ВспомогательноеПоле"] = СтрокаРодителя["ВспомогательноеПоле"] + КоличествоПодчиненныхЗадач;
			СтрокаРодителя["Затраты"] = СтрокаРодителя["Затраты"] + Затраты;
			СтрокаРодителя["Стоимость"] = СтрокаРодителя["Стоимость"] + Стоимость;
			
			СтрокаРодителя["Факт_Затраты"] = СтрокаРодителя["Факт_Затраты"] + ЗатратыФакт;
			СтрокаРодителя["Факт_Стоимость"] = СтрокаРодителя["Факт_Стоимость"] + СтоимостьФакт;
		КонецЕсли;
				
		Строка = Строка - 1;
			
	КонецЦикла;
	
	РезультатЗапроса.Очистить();
	
	Если ВерхняяГраница > 3 И НижняяГраница < ПоследняяСтрока И НЕ ОбновлятьВсюДиаграмму Тогда
		ОбновитьДиаграмму(ВерхняяГраница, НижняяГраница);
	Иначе
		ОбновитьДиаграмму();
	КонецЕсли;
		
	Модифицированность = Истина;
	ВывестиСостояние("");
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////
// Работа со сдвигами

#Область РаботаСоСдвигами

&НаКлиенте
Функция СдвинутьПозициюВлево(Знач пВерх, Знач КонецОбласти) Экспорт
	
	ЕстьПодчиненные   = тдПроект.Область(пВерх + 1, НомерКолонкиНазвание, пВерх + 1,НомерКолонкиНазвание).Отступ 
		> тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ;
	ПредыдущаяОбласть = тдПроект.Область(пВерх - 1, НомерКолонкиНазвание, пВерх-1,НомерКолонкиНазвание);
	МинимальнаяДатаНачала = пВерх;
	
	Если тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ  = 2 Тогда
		Возврат МинимальнаяДатаНачала;
	ИначеЕсли ПредыдущаяОбласть.Отступ = тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ Тогда
		тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх, НомерКолонкиНазвание).Отступ 
			= тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх, НомерКолонкиНазвание).Отступ - 2;
		СвязиДляУдаления = ТаблицаСвязей.НайтиСтроки(Новый Структура("Начало, Конец", пВерх-1, пВерх));
	ИначеЕсли  ПредыдущаяОбласть.Отступ + 2 = тдПроект.Область(пВерх, НомерКолонкиНазвание, 
		пВерх, НомерКолонкиНазвание).Отступ Тогда
		
		// Перекинем связь на предыдующу строку и свяжем предыдущую с текущей
		НижняяНеСуммирующаяЗадача = пВерх;
		Пока ЭтоСуммирующаяЗадача(НижняяНеСуммирующаяЗадача) Цикл
			НижняяНеСуммирующаяЗадача	= НижняяНеСуммирующаяЗадача + 1;
		КонецЦикла;
		ПредшественникиДляИзменения = ПолучитьСписокПредшественников(НижняяНеСуммирующаяЗадача);
		
		Если ПредшественникиДляИзменения.Количество() > 0 Тогда
			
			Для Каждого СтрокаСвязи Из ПредшественникиДляИзменения Цикл
				МинимальнаяДатаНачала = Мин(СтрокаСвязи.Начало, МинимальнаяДатаНачала);
				СтрокаСвязи.Конец = пВерх-1;
				
				Если СтрокаСвязи.Начало = СтрокаСвязи.Конец Тогда
					ТаблицаСвязей.Удалить(СтрокаСвязи);
				КонецЕсли;
			КонецЦикла;
			МинимальнаяДатаНачала = Мин(пВерх-1, МинимальнаяДатаНачала);
			
			НоваяСтрокаСвязи = ТаблицаСвязей.Добавить();
			НоваяСтрокаСвязи.Начало = пВерх-1;
			НоваяСтрокаСвязи.Конец  = НижняяНеСуммирующаяЗадача;
			
		КонецЕсли;
		
		тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ = тдПроект.Область(пВерх, 
			НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ - 2;
		УдалитьРисунокСверткиРазвертки(пВерх-1);
				
	Иначе
		тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ = тдПроект.Область(пВерх, 
			НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ - 2;
	КонецЕсли;	
	
	Если ПредыдущаяОбласть.Отступ < тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ Тогда
		ВставитьРисунокСверткиИРазвертки(пВерх-1);
	КонецЕсли;
	
	Если ЕстьПодчиненные И пВерх = КонецОбласти Тогда 
		Индекс = пВерх + 1;
		Пока Истина Цикл
			Если тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх, НомерКолонкиНазвание).Отступ + 2 
				>= тдПроект.Область(Индекс, НомерКолонкиНазвание, Индекс,НомерКолонкиНазвание).Отступ Тогда
				
				Индекс = Индекс - 1;
				Прервать;
				
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
		МинимальнаяДатаНачала = Мин(МинимальнаяДатаНачала, СдвинутьВлевоЦиклически(пВерх + 1, Индекс));
		
	КонецЕсли;
	
	Возврат МинимальнаяДатаНачала;
КонецФункции

&НаКлиенте
Функция СдвинутьПозициюВправо(Знач пВерх, Знач КонецОбласти) Экспорт
	
	ЕстьПодчиненные   = тдПроект.Область(пВерх + 1, НомерКолонкиНазвание, пВерх + 1, 
		НомерКолонкиНазвание).Отступ > тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ;
	ПредыдущаяОбласть = тдПроект.Область(пВерх - 1, НомерКолонкиНазвание, пВерх - 1,НомерКолонкиНазвание);
	СледующаяОбласть  = тдПроект.Область(пВерх + 1, НомерКолонкиНазвание, пВерх + 1,НомерКолонкиНазвание);
	ТекущаяОбласть    = тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание);
	Если ТекущаяОбласть.Отступ = ПредыдущаяОбласть.Отступ Тогда
		тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ = тдПроект.Область(пВерх, 
			НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ + 2;
	ИначеЕсли ТекущаяОбласть.Отступ < ПредыдущаяОбласть.Отступ Тогда	
		тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ = тдПроект.Область(пВерх, 
			НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Отступ + 2;
	ИначеЕсли ТекущаяОбласть.Отступ > ПредыдущаяОбласть.Отступ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПредыдущаяОбласть.Отступ < ТекущаяОбласть.Отступ Тогда
		ВставитьРисунокСверткиИРазвертки(пВерх - 1);
	КонецЕсли;
	
	Если ЕстьПодчиненные И пВерх = КонецОбласти Тогда 
		Индекс = пВерх + 1;
		Пока Истина Цикл
			Если ТекущаяОбласть.Отступ > тдПроект.Область(Индекс, НомерКолонкиНазвание, 
				Индекс,НомерКолонкиНазвание).Отступ Тогда
				
				Индекс = Индекс - 1;
				Прервать;
				
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		СдвинутьВправоЦиклически(пВерх+1, Индекс);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СдвинутьВлевоЦиклически(Знач пВерх, Знач пНиз)Экспорт
	
	НачальныйИндексДляПересчета = пВерх;
	Для Индекс = пВерх По пНиз Цикл
		НачальныйИндексДляПересчета = Мин(НачальныйИндексДляПересчета, СдвинутьПозициюВлево(Индекс, пНиз));
	КонецЦикла;
	
	ПредыдущаяОбласть = тдПроект.Область(Индекс-1, НомерКолонкиНазвание, Индекс - 1,НомерКолонкиНазвание);
	Если ПредыдущаяОбласть.Отступ < тдПроект.Область(Индекс, НомерКолонкиНазвание, Индекс, 
		НомерКолонкиНазвание).Отступ Тогда
		
		ВставитьРисунокСверткиИРазвертки(Индекс-1);
		
	КонецЕсли;
	
	Возврат НачальныйИндексДляПересчета;
	
КонецФункции

&НаКлиенте
Процедура СдвинутьВправоЦиклически(Знач пВерх, Знач пНиз)Экспорт
	
	Для Индекс = пВерх По пНиз Цикл
		Если НЕ СдвинутьПозициюВправо(Индекс, пНиз) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ РИСУНКАМИ СВЕРТКИ И РАЗВЕРТК

#Область УправлениеРисункамиСверткиРазвертки

&НаКлиенте
Процедура ВставитьРисунокСверткиИРазвертки(Знач пВерх) Экспорт
	Если пВерх < 3 Тогда
		Возврат;
	КонецЕсли;
	УдалитьРисунокСверткиРазвертки(пВерх);
	тдПроект.Область(пВерх,, пВерх, ).Шрифт = Новый Шрифт(тдПроект.Область(пВерх,НомерКолонкиНазвание, пВерх, ).Шрифт,,,Истина);
	тдПроект.Область(пВерх,НомерКолонкиНазвание-1, пВерх,НомерКолонкиНазвание-1).Шрифт = Новый Шрифт(тдПроект.Область(пВерх,НомерКолонкиНазвание-1, пВерх, НомерКолонкиНазвание-1).Шрифт,,, Ложь);
	ИмяРисунока = СоответствиеКартинокПоОбластям.Получить(пВерх);
	Если ЗначениеЗаполнено(ИмяРисунока) Тогда
		Рисунок 			= тдПроект.Рисунки[ИмяРисунока];
		Если тдПроект.Область(пВерх+1,1, пВерх+1,1 ).Видимость Тогда
			Рисунок.Картинка= КартинкаМинус;
		Иначе
			Рисунок.Картинка= КартинкаПлюс;
		КонецЕсли;
	Иначе
		Рисунок 			= тдПроект.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Если тдПроект.Область(пВерх+1,НомерКолонкиНазвание, пВерх+1,НомерКолонкиНазвание ).Видимость Тогда
			Рисунок.Картинка= КартинкаМинус;
		Иначе
			Рисунок.Картинка= КартинкаПлюс;
		КонецЕсли;
	КонецЕсли;
	Рисунок.Расположить(тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх, НомерКолонкиНазвание));
	Рисунок.РазмерКартинки 	= РазмерКартинки.РеальныйРазмер;
	Рисунок.Линия 			= Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	Рисунок.Лево  			= Рисунок.Лево + 0.5 + (тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх, НомерКолонкиНазвание).Отступ-2) * КоэффициентШириныКолонки;
	Рисунок.Верх  			= Рисунок.Верх + 0.5;
	Рисунок.Ширина 			= 2.4;
	Рисунок.Высота 			= 2.4;	
	
	пСоответствиеКартинокПоОбластям = Новый Соответствие(СоответствиеКартинокПоОбластям);
	пСоответствиеКартинокПоОбластям.Вставить(пВерх, Рисунок.Имя);
	СоответствиеКартинокПоОбластям = Новый ФиксированноеСоответствие(пСоответствиеКартинокПоОбластям);
	
	
	пСоответствиеОбластейПоКартинкам= Новый Соответствие(СоответствиеОбластейПоКартинкам);
	пСоответствиеОбластейПоКартинкам.Вставить(Рисунок.Имя, пВерх);
	СоответствиеОбластейПоКартинкам = Новый ФиксированноеСоответствие(пСоответствиеОбластейПоКартинкам);
КонецПроцедуры

&НаКлиенте
Функция   ПолучитьВерхОбластиПоКартинке(Рисунок) Экспорт
	Возврат Окр((Рисунок.Верх - 4.8506945)/КоэффициентВысотыСтроки)+2;
КонецФункции

&НаКлиенте
Процедура УдалитьРисунокСверткиРазвертки(Знач пВерх) Экспорт
	
	Попытка
		Если тдПроект.Область(пВерх,НомерКолонкиНазвание, пВерх,НомерКолонкиНазвание).Шрифт.Жирный Тогда
			тдПроект.Область(пВерх,, пВерх, ).Шрифт = Новый Шрифт(тдПроект.Область(пВерх,НомерКолонкиНазвание, пВерх, НомерКолонкиНазвание).Шрифт,,, Ложь);
		КонецЕсли;
		
		ИмяРисунка = СоответствиеКартинокПоОбластям.Получить(пВерх);
			
		пСоответствиеКартинокПоОбластям = Новый Соответствие(СоответствиеКартинокПоОбластям);
		пСоответствиеКартинокПоОбластям.Вставить(пВерх, Неопределено);
		СоответствиеКартинокПоОбластям = Новый ФиксированноеСоответствие(пСоответствиеКартинокПоОбластям);
	    	
		пСоответствиеОбластейПоКартинкам= Новый Соответствие(СоответствиеОбластейПоКартинкам);
		пСоответствиеОбластейПоКартинкам.Вставить(ИмяРисунка, Неопределено);
		СоответствиеОбластейПоКартинкам = Новый ФиксированноеСоответствие(пСоответствиеОбластейПоКартинкам);
		
		тдПроект.Рисунки.Удалить(ИмяРисунка);
		ЗанулитьРодителя(пВерх);
	Исключение
	КонецПопытки
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДиапазонРисунков(Знач пВерх, Знач пНиз) Экспорт
	
	пСоответствиеКартинокПоОбластям = Новый Соответствие(СоответствиеКартинокПоОбластям);
	пСоответствиеОбластейПоКартинкам= Новый Соответствие(СоответствиеОбластейПоКартинкам);
	
	МассивУдаляемыхРисунков = Новый Массив;
	Для Каждого Рисунок Из тдПроект.Рисунки Цикл
		Если Рисунок.Имя = "ДиаграммаГанта" ИЛИ СтрНайти(Рисунок.Имя, "Фильтр") > 0  Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = СоответствиеОбластейПоКартинкам.Получить(Рисунок.Имя);
		Если ЗначениеЗаполнено(Индекс) Тогда
			Если Индекс >=пВерх И Индекс <=пНиз Тогда
				пСоответствиеКартинокПоОбластям.Вставить(Индекс, Неопределено);
				пСоответствиеОбластейПоКартинкам.Вставить(Рисунок.Имя, Неопределено);
				МассивУдаляемыхРисунков.Добавить(Рисунок);
			КонецЕсли;
		Иначе
			МассивУдаляемыхРисунков.Добавить(Рисунок);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеКартинокПоОбластям = Новый ФиксированноеСоответствие(пСоответствиеКартинокПоОбластям);
	СоответствиеОбластейПоКартинкам = Новый ФиксированноеСоответствие(пСоответствиеОбластейПоКартинкам);
	
	Для Каждого ЭлементМассива Из МассивУдаляемыхРисунков Цикл
	    тдПроект.Рисунки.Удалить(ЭлементМассива);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////
// Работа с ресурсами

#Область РаботаСРесурсами

&НаКлиенте
Функция ПолучитьСписокТрудовыхРесурсовЗадачи(Знач Строка)  Экспорт
	
	Значение = ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиGUID);
	Если ПустаяСтрока(Значение) Тогда
		GUID_Строки = Новый УникальныйИдентификатор();
	Иначе
		GUID_Строки = Новый УникальныйИдентификатор(Значение);
	КонецЕсли;
	Возврат ТаблицаРесурсовЗадачи.НайтиСтроки(Новый Структура("GUID_Задачи, ТипРесурса", GUID_Строки, 
		ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой")));
	
КонецФункции

&НаКлиенте
Функция ПолучитьСписокРесурсовЗадачи(Знач Строка) Экспорт
	
	Значение = ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиGUID);
	Если ПустаяСтрока(Значение) Тогда
		GUID_Строки = Новый УникальныйИдентификатор();
	Иначе
		GUID_Строки = Новый УникальныйИдентификатор(Значение);
	КонецЕсли;
	Возврат ТаблицаРесурсовЗадачи.НайтиСтроки(Новый Структура("GUID_Задачи", GUID_Строки));
	
КонецФункции

&НаКлиенте
Процедура УстановитьТаблицуРесурсов(Знач Строка, Знач СтрокаКонец, СтрокиРесурсов, Знач Удаление = Ложь, 
	ОчищатьТолькоТрудовые = Ложь) Экспорт
	
	ПредставлениеРесурсов = "";
	Для Каждого СтрокаРесурсов Из СтрокиРесурсов Цикл
		Если ЗначениеЗаполнено(СтрокаРесурсов.КраткоеНазвание) Тогда
			ПредставлениеРесурсов = ПредставлениеРесурсов + СтрокаРесурсов.КраткоеНазвание + ";";
		КонецЕсли;
	КонецЦикла;
	
	Для СтрокаДляОбхода = Строка По СтрокаКонец Цикл
		
		Значение = ПолучитьЗначениеПоКолонке(СтрокаДляОбхода, НомерКолонкиGUID);
		Если ПустаяСтрока(Значение) Тогда
			GUID_Строки = Новый УникальныйИдентификатор();
		Иначе
			GUID_Строки = Новый УникальныйИдентификатор(Значение);
		КонецЕсли;
		
		СтрокиДляУдаления = ТаблицаРесурсовЗадачи.НайтиСтроки(Новый Структура("GUID_Задачи", GUID_Строки));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			Если ОчищатьТолькоТрудовые = Истина 
				И НЕ СтрокаДляУдаления.ВидРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой") Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаРесурсовЗадачи.Удалить(СтрокаДляУдаления);
			
		КонецЦикла;
		
		Для Каждого СтрокаДляДобавления Из СтрокиРесурсов Цикл
			НоваяСтрокаРесурсов = ТаблицаРесурсовЗадачи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРесурсов, СтрокаДляДобавления);
			НоваяСтрокаРесурсов.GUID_Задачи = GUID_Строки;
			Если НоваяСтрокаРесурсов.Единицы = 0 Тогда
				Если НоваяСтрокаРесурсов.ТипРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой") Тогда
					НоваяСтрокаРесурсов.Единицы = 100;
				Иначе
					НоваяСтрокаРесурсов.Единицы = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ Удаление = Истина Тогда
		Если СтрДлина(ПредставлениеРесурсов) > 0 Тогда
			ПредставлениеРесурсов = Лев(ПредставлениеРесурсов, СтрДлина(ПредставлениеРесурсов) - 1);
		КонецЕсли;
		тдПроект.Область(Строка, НомерКолонкиРесурсыПредставление, СтрокаКонец, 
			НомерКолонкиРесурсыПредставление).Текст = ПредставлениеРесурсов;
		тдПроект.Область(Строка, НомерКолонкиРесурсы, СтрокаКонец, НомерКолонкиРесурсы).Текст = ПредставлениеРесурсов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СоответствиеСтрокРесурсовПоGUIDамПолучить(Знач GUID_Ресурса)
	
	МассивНайденныхСтрок = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", GUID_Ресурса));
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		Возврат МассивНайденныхСтрок[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НазначениеРесурсов(Команда)
	
	ОткрытьФормуЗадачи(Истина);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////
// Форма задачи

#Область ФормаЗадачи

&НаКлиенте
Процедура ОткрытьФормуЗадачи(Знач РедактированиеРесурсов = Ложь)
	
	НомерСтрокиЗадачи 		= тдПроект.ТекущаяОбласть.Верх;
	НомерСтрокиЗадачиКонец 	= тдПроект.ТекущаяОбласть.Низ;
	
	НастроитьСтроку(НомерСтрокиЗадачи, НомерСтрокиЗадачиКонец);
	
	МассивНазванийЗадач = Новый Массив;
	Для Индекс = 3 По ПоследняяСтрока Цикл
		МассивНазванийЗадач.Добавить(тдПроект.Область(Индекс, НомерКолонкиНазвание, Индекс, НомерКолонкиНазвание).Текст);
	КонецЦикла;
	
	ФормаЗадачи = ПолучитьФорму("Отчет.УправлениеПроектами.Форма.ФормаЗадачиУправляемая",
		Новый Структура("Ключ, МассивНазванийЗадач", Объект, МассивНазванийЗадач), ЭтаФорма);
	ФормаЗадачи.НомерСтроки = НомерСтрокиЗадачи;
	ФормаЗадачи.НомерСтрокиЗадачи = НомерСтрокиЗадачи;
	ФормаЗадачи.НомерСтрокиЗадачиКонец = НомерСтрокиЗадачиКонец;
	
	ФормаЗадачи.ВидыОграничений = ВидыОграничений;
	ФормаЗадачи.ПоследняяСтрока = ПоследняяСтрока;
	// Осноные поля
	Если НомерСтрокиЗадачи = НомерСтрокиЗадачиКонец Тогда
		ФормаЗадачи.Описание            = тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиОписание, НомерСтрокиЗадачи,
			НомерКолонкиОписание).Текст;
		ФормаЗадачи.НазваниеЗадачи 		= тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиНазвание, НомерСтрокиЗадачи,
			НомерКолонкиНазвание).Текст;
		ФормаЗадачи.ДатаНачалаПлан 		= ПолучитьЗначениеПоКолонке(НомерСтрокиЗадачи, НомерКолонкиНачало);
		ФормаЗадачи.ДатаЗавершенияПлан 	= ПолучитьЗначениеПоКолонке(НомерСтрокиЗадачи, НомерКолонкиОкончание);
		ФормаЗадачи.ДатаНачалаФакт 		= ПолучитьЗначениеПоКолонке(НомерСтрокиЗадачи, НомерКолонкиНачалоФакт);
		ФормаЗадачи.ДатаЗавершенияФакт 	= ПолучитьЗначениеПоКолонке(НомерСтрокиЗадачи, НомерКолонкиОкончаниеФакт);
		ФормаЗадачи.Длительность		= ПолучитьЗначениеПоКолонке(НомерСтрокиЗадачи, НомерКолонкиДлительность);
		ФормаЗадачи.ПроцентЗавершения   = ПолучитьЗначениеПоКолонке(НомерСтрокиЗадачи, НомерКолонкиПроцентЗавершения);
		
		ФормаЗадачи.ВидОграничения		= ПолучитьЗначениеПоКолонке(НомерСтрокиЗадачи, НомерКолонкиВидОграничения);
		ФормаЗадачи.ДатаОграничения     = ПолучитьЗначениеПоКолонке(НомерСтрокиЗадачи, НомерКолонкиДатаОграничения);
		
		Попытка
			ФормаЗадачи.Веха     		= ПолучитьЗначениеПоКолонке(НомерСтрокиЗадачи, НомерКолонкиВеха);
		Исключение
		КонецПопытки;
		
		СписокПредшественников = ПолучитьСписокПредшественников(НомерСтрокиЗадачи);
		Для Каждого Предшественник Из СписокПредшественников Цикл
			НоваяСтрока 				= ФормаЗадачи.ТабличноеПолеПредшественники.Добавить();
			НоваяСтрока.Начало 			= Число(Предшественник.Начало) - 2;
			НоваяСтрока.Запаздывание 	= Число(Предшественник.Запаздывание);
			НоваяСтрока.ВидСвязи 		= ПолучитьПредставлениеВидСвязиДляProject(Число(Предшественник.ВидСвязи));
			НоваяСтрока.НазваниеЗадачи	= тдПроект.Область(Предшественник.Начало, НомерКолонкиНазвание, 
				Предшественник.Начало, НомерКолонкиНазвание).Текст;
		КонецЦикла;
	Иначе
		ФормаЗадачи.Элементы.Предшественники.Доступность = Ложь;
		ФормаЗадачи.Элементы.Дополнительно.Доступность = Ложь;
	КонецЕсли;
		
	////// Ресурсы
	ТаблицаРесурсов = ПолучитьСписокРесурсовЗадачи(НомерСтрокиЗадачи);
			
	Для Каждого СтрокаРесурсовЗадачи Из ТаблицаРесурсов Цикл
		Если ЗначениеЗаполнено(СтрокаРесурсовЗадачи.GUID_Ресурса) Тогда
			СтрокаТаблицыРесурсов = СоответствиеСтрокРесурсовПоGUIDамПолучить(СтрокаРесурсовЗадачи.GUID_Ресурса);
			Если НЕ СтрокаТаблицыРесурсов = Неопределено Тогда
				НоваяСтрока = ФормаЗадачи.ТабличноеПолеРесурсовЗадачи.Добавить();
				НоваяСтрока.GUID_Ресурса 		= СтрокаРесурсовЗадачи.GUID_Ресурса;
				НоваяСтрока.НазваниеРесурса 	= СтрокаТаблицыРесурсов.НазваниеРесурса;
				НоваяСтрока.КраткоеНазвание 	= СтрокаТаблицыРесурсов.КраткоеНазвание;
				НоваяСтрока.Единицы 			= СтрокаРесурсовЗадачи.Единицы;
				НоваяСтрока.ТипРесурса 			= СтрокаТаблицыРесурсов.ТипРесурса;
				ФормаЗадачи.ТекущийЭлемент 		= ФормаЗадачи.Элементы.ТабличноеПолеРесурсовЗадачи;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаРесурсов Из ТабличноеПолеРесурсы Цикл
		НоваСтрока = ФормаЗадачи.ТабличноеПолеРесурсы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваСтрока, СтрокаРесурсов);
	КонецЦикла;
	
	Если ЭтоСуммирующаяЗадача(НомерСтрокиЗадачи) Тогда
		ФормаЗадачи.Элементы.ДатаНачалаПлан.ТолькоПросмотр 		= Истина;
		ФормаЗадачи.Элементы.ДатаЗавершенияПлан.ТолькоПросмотр 	= Истина;
		ФормаЗадачи.Элементы.Длительность.ТолькоПросмотр 		= Истина;
		ФормаЗадачи.Элементы.ПроцентЗавершения.ТолькоПросмотр 	= Истина;
		ФормаЗадачи.Элементы.ДатаНачалаФакт.ТолькоПросмотр 		= Истина;
		ФормаЗадачи.Элементы.ДатаЗавершенияФакт.ТолькоПросмотр 	= Истина;
		
		Попытка
			ФормаЗадачи.Элементы.Веха.ТолькоПросмотр     		= Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если РедактированиеРесурсов Тогда
		ФормаЗадачи.Элементы.Панель.ТекущаяСтраница = ФормаЗадачи.Элементы.Ресурсы;
	КонецЕсли;
	
	ФормаЗадачи.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПрименитьИзмененияЗадачиВФорме", ЭтаФорма,
		Новый Структура("НомерСтрокиЗадачи, НомерСтрокиЗадачиКонец, ФормаЗадачи", 
			НомерСтрокиЗадачи, НомерСтрокиЗадачиКонец, ФормаЗадачи));
	ФормаЗадачи.Открыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияЗадачиВФорме(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	НомерСтрокиЗадачи = ДополнительныеПараметры.НомерСтрокиЗадачи;
	НомерСтрокиЗадачиКонец = ДополнительныеПараметры.НомерСтрокиЗадачиКонец;
	Если РезультатЗакрытия <> Неопределено Тогда
		
		ФормаЗадачи = ДополнительныеПараметры.ФормаЗадачи;
	    		
		ИсходнаяОбласть = тдПроект.ТекущаяОбласть;
		
		Если НомерСтрокиЗадачиКонец <> НомерСтрокиЗадачи Тогда
			НачальнаяСтрока = НомерСтрокиЗадачи;
			Для НомерСтрокиЗадачи = НачальнаяСтрока По НомерСтрокиЗадачиКонец Цикл
				Если ЗначениеЗаполнено(ФормаЗадачи.НазваниеЗадачи) Тогда
					тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиНазвание, 
						НомерСтрокиЗадачи, НомерКолонкиНазвание).Текст = ФормаЗадачи.НазваниеЗадачи;
				КонецЕсли;
				Если ЗначениеЗаполнено(ФормаЗадачи.ДатаНачалаПлан) Тогда	
					тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиНачало, 
						НомерСтрокиЗадачи, НомерКолонкиНачало).Значение  = ФормаЗадачи.ДатаНачалаПлан;
				КонецЕсли;
				Если ЗначениеЗаполнено(ФормаЗадачи.ДатаЗавершенияПлан) Тогда	
					тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиОкончание, 
						НомерСтрокиЗадачи, НомерКолонкиОкончание).Значение = ФормаЗадачи.ДатаЗавершенияПлан;
				КонецЕсли;
				Если ЗначениеЗаполнено(ФормаЗадачи.ДатаНачалаФакт) Тогда	
					тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиНачалоФакт, 
						НомерСтрокиЗадачи, НомерКолонкиНачалоФакт).Значение = ФормаЗадачи.ДатаНачалаФакт;
				КонецЕсли;
				Если ЗначениеЗаполнено(ФормаЗадачи.ДатаЗавершенияФакт) Тогда	
					тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиОкончаниеФакт, 
						НомерСтрокиЗадачи, НомерКолонкиОкончаниеФакт).Значение = ФормаЗадачи.ДатаЗавершенияФакт;
				КонецЕсли;
				Если ЗначениеЗаполнено(ФормаЗадачи.Длительность) Тогда	
					тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиДлительность,
						НомерСтрокиЗадачи, НомерКолонкиДлительность).Значение = ФормаЗадачи.Длительность;
				КонецЕсли;
				Если ЗначениеЗаполнено(ФормаЗадачи.ПроцентЗавершения) Тогда	
					тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиПроцентЗавершения,
						НомерСтрокиЗадачи, НомерКолонкиПроцентЗавершения).Значение = ФормаЗадачи.ПроцентЗавершения;
				КонецЕсли;
				Если ЗначениеЗаполнено(ФормаЗадачи.Описание) Тогда
					тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиОписание, 
						НомерСтрокиЗадачи, НомерКолонкиОписание).Текст = ФормаЗадачи.Описание;
				КонецЕсли;
				
				// Ресурсы
				ТаблицаРесурсов = ПолучитьСписокРесурсовЗадачи(НомерСтрокиЗадачи);
				Для Каждого УдаляемаяСтрока Из ТаблицаРесурсов Цикл
					ТаблицаРесурсовЗадачи.Удалить(УдаляемаяСтрока);
				КонецЦикла;
			
				Значение = ПолучитьЗначениеПоКолонке(НомерСтрокиЗадачи, НомерКолонкиGUID);
				Если ПустаяСтрока(Значение) Тогда
					GUID_Строки = Новый УникальныйИдентификатор();
				Иначе
					GUID_Строки = Новый УникальныйИдентификатор(Значение);
				КонецЕсли;
				
				ПредставлениеРесурсов = "";
				Для Каждого ДобавляемаяСтрока Из ФормаЗадачи.ТабличноеПолеРесурсовЗадачи Цикл
					НоваяСтрока = ТаблицаРесурсовЗадачи.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДобавляемаяСтрока);
					НоваяСтрока.НазваниеРесурса = ДобавляемаяСтрока.НазваниеРесурса;
					НоваяСтрока.Единицы			= ДобавляемаяСтрока.Единицы;
					НоваяСтрока.GUID_Ресурса 	= ДобавляемаяСтрока.GUID_Ресурса;
					НоваяСтрока.ТипРесурса 		= ДобавляемаяСтрока.ТипРесурса;
					НоваяСтрока.ТипРесурса 		= ДобавляемаяСтрока.ТипРесурса;
					НоваяСтрока.GUID_Задачи 	= GUID_Строки;
					НоваяСтрока.КраткоеНазвание = ?(ЗначениеЗаполнено(ДобавляемаяСтрока.КраткоеНазвание), 
						ДобавляемаяСтрока.КраткоеНазвание, ДобавляемаяСтрока.НазваниеРесурса);
					ПредставлениеРесурсов = ПредставлениеРесурсов + НоваяСтрока.КраткоеНазвание + ";";
				КонецЦикла;
				
				Если СтрДлина(ПредставлениеРесурсов) > 0 Тогда
					ПредставлениеРесурсов = Лев(ПредставлениеРесурсов, СтрДлина(ПредставлениеРесурсов)-1);
				КонецЕсли;
				тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиРесурсыПредставление, НомерСтрокиЗадачи,
					НомерКолонкиРесурсыПредставление).Текст = ПредставлениеРесурсов;
		
			КонецЦикла;
			НомерСтрокиЗадачи = НачальнаяСтрока;
		ИначеЕсли ЭтоСуммирующаяЗадача(НомерСтрокиЗадачиКонец) Тогда
			СписокПредшественников = ПолучитьСписокПредшественников(НомерСтрокиЗадачи);
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиОписание, 
				НомерСтрокиЗадачи, НомерКолонкиОписание).Текст = ФормаЗадачи.Описание;
			
			НомерСтрокиПодчиненнойЗадачи = НомерСтрокиЗадачиКонец;
			Пока ЭтоСуммирующаяЗадача(НомерСтрокиПодчиненнойЗадачи) Цикл
				НомерСтрокиПодчиненнойЗадачи = НомерСтрокиПодчиненнойЗадачи + 1;
			КонецЦикла;
			
			Для Каждого Предшественник Из СписокПредшественников Цикл
				ТаблицаСвязей.Удалить(Предшественник);
			КонецЦикла;
			
			Для Каждого СтрокаВФорме Из ФормаЗадачи.ТабличноеПолеПредшественники Цикл
				НоваяСтрокаПредшественников = ТаблицаСвязей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПредшественников, СтрокаВФорме);
				НоваяСтрокаПредшественников.ВидСвязи = ПолучитьНомерВидаСвязиПоПредставлению(СтрокаВФорме.ВидСвязи);
				НоваяСтрокаПредшественников.Начало = НоваяСтрокаПредшественников.Начало + 2;
				НоваяСтрокаПредшественников.Конец = НомерСтрокиПодчиненнойЗадачи;
			КонецЦикла;
			
			// Ресурсы
			ТаблицаРесурсов = ПолучитьСписокРесурсовЗадачи(НомерСтрокиЗадачи);
			Для Каждого УдаляемаяСтрока Из ТаблицаРесурсов Цикл
				ТаблицаРесурсовЗадачи.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		
			Значение = ПолучитьЗначениеПоКолонке(НомерСтрокиЗадачи, НомерКолонкиGUID);
			Если ПустаяСтрока(Значение) Тогда
				GUID_Строки = Новый УникальныйИдентификатор();
			Иначе
				GUID_Строки = Новый УникальныйИдентификатор(Значение);
			КонецЕсли;
			
			ПредставлениеРесурсов = "";
			Для Каждого ДобавляемаяСтрока Из ФормаЗадачи.ТабличноеПолеРесурсовЗадачи Цикл
				НоваяСтрока = ТаблицаРесурсовЗадачи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДобавляемаяСтрока);
				НоваяСтрока.НазваниеРесурса = ДобавляемаяСтрока.НазваниеРесурса;
				НоваяСтрока.Единицы			= ДобавляемаяСтрока.Единицы;
				НоваяСтрока.GUID_Ресурса 	= ДобавляемаяСтрока.GUID_Ресурса;
				НоваяСтрока.ТипРесурса 		= ДобавляемаяСтрока.ТипРесурса;
				НоваяСтрока.GUID_Задачи 	= GUID_Строки;
				НоваяСтрока.КраткоеНазвание = ?(ЗначениеЗаполнено(ДобавляемаяСтрока.КраткоеНазвание), 
					ДобавляемаяСтрока.КраткоеНазвание, ДобавляемаяСтрока.НазваниеРесурса);
				ПредставлениеРесурсов = ПредставлениеРесурсов + НоваяСтрока.КраткоеНазвание + ";";
			КонецЦикла;
			
			Если СтрДлина(ПредставлениеРесурсов) > 0 Тогда
				ПредставлениеРесурсов = Лев(ПредставлениеРесурсов, СтрДлина(ПредставлениеРесурсов)-1);
			КонецЕсли;
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиРесурсыПредставление, 
				НомерСтрокиЗадачи, НомерКолонкиРесурсыПредставление).Текст = ПредставлениеРесурсов;
			
			СоответствиеОбработанныхСтрок = Новый Соответствие;
			СоответствиеОбработанныхСтрок.Вставить(0, Ложь);
			СтруктураГраницы = Новый Структура("Верх, Низ", НомерСтрокиЗадачи, НомерСтрокиПодчиненнойЗадачи);
			ПересчитатьДатыВСвязанныхЗадачах(НомерСтрокиПодчиненнойЗадачи,СоответствиеОбработанныхСтрок, СтруктураГраницы);
		Иначе
			СписокПредшественников = ПолучитьСписокПредшественников(НомерСтрокиЗадачи);
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиНазвание, 
				НомерСтрокиЗадачи, НомерКолонкиНазвание).Текст = ФормаЗадачи.НазваниеЗадачи;
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиНачало, 
				НомерСтрокиЗадачи, НомерКолонкиНачало).Значение  = ФормаЗадачи.ДатаНачалаПлан;
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиОкончание, 
				НомерСтрокиЗадачи, НомерКолонкиОкончание).Значение = ФормаЗадачи.ДатаЗавершенияПлан;
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиНачалоФакт,
				НомерСтрокиЗадачи, НомерКолонкиНачалоФакт).Значение = ФормаЗадачи.ДатаНачалаФакт;
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиОкончаниеФакт,
				НомерСтрокиЗадачи, НомерКолонкиОкончаниеФакт).Значение = ФормаЗадачи.ДатаЗавершенияФакт;
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиДлительность, 
				НомерСтрокиЗадачи, НомерКолонкиДлительность).Значение = ФормаЗадачи.Длительность;
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиПроцентЗавершения, 
				НомерСтрокиЗадачи, НомерКолонкиПроцентЗавершения).Значение = ФормаЗадачи.ПроцентЗавершения;
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиОписание, 
				НомерСтрокиЗадачи, НомерКолонкиОписание).Текст = ФормаЗадачи.Описание;
			
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиДатаОграничения, 
				НомерСтрокиЗадачи, НомерКолонкиДатаОграничения).Значение = ФормаЗадачи.ДатаОграничения;
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиВидОграничения, 
				НомерСтрокиЗадачи, НомерКолонкиВидОграничения).Значение = ФормаЗадачи.ВидОграничения;
			
			Попытка
				тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиВеха, НомерСтрокиЗадачи,
					НомерКолонкиВеха).Значение = ФормаЗадачи.Веха;
			Исключение
				
			КонецПопытки;
			
			// Ресурсы
			ТаблицаРесурсов = ПолучитьСписокРесурсовЗадачи(НомерСтрокиЗадачи);
			Для Каждого УдаляемаяСтрока Из ТаблицаРесурсов Цикл
				ТаблицаРесурсовЗадачи.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		
			Значение = ПолучитьЗначениеПоКолонке(НомерСтрокиЗадачи, НомерКолонкиGUID);
			Если ПустаяСтрока(Значение) Тогда
				GUID_Строки = Новый УникальныйИдентификатор();
			Иначе
				GUID_Строки = Новый УникальныйИдентификатор(Значение);
			КонецЕсли;
			
			ПредставлениеРесурсов = "";
			Для Каждого ДобавляемаяСтрока Из ФормаЗадачи.ТабличноеПолеРесурсовЗадачи Цикл
				НоваяСтрока = ТаблицаРесурсовЗадачи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДобавляемаяСтрока);
				НоваяСтрока.НазваниеРесурса = ДобавляемаяСтрока.НазваниеРесурса;
				НоваяСтрока.Единицы			= ДобавляемаяСтрока.Единицы;
				НоваяСтрока.GUID_Ресурса 	= ДобавляемаяСтрока.GUID_Ресурса;
				НоваяСтрока.ТипРесурса 		= ДобавляемаяСтрока.ТипРесурса;
				НоваяСтрока.GUID_Задачи 	= GUID_Строки;
				НоваяСтрока.КраткоеНазвание = ?(ЗначениеЗаполнено(ДобавляемаяСтрока.КраткоеНазвание),
					ДобавляемаяСтрока.КраткоеНазвание, ДобавляемаяСтрока.НазваниеРесурса);
				ПредставлениеРесурсов = ПредставлениеРесурсов + НоваяСтрока.КраткоеНазвание + ";";
			КонецЦикла;
			Если СтрДлина(ПредставлениеРесурсов) > 0 Тогда
				ПредставлениеРесурсов = Лев(ПредставлениеРесурсов, СтрДлина(ПредставлениеРесурсов)-1);
			КонецЕсли;
			тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиРесурсыПредставление,
				НомерСтрокиЗадачи, НомерКолонкиРесурсыПредставление).Текст = ПредставлениеРесурсов;
			
			// Связи
			Для Каждого Предшественник Из СписокПредшественников Цикл
				ТаблицаСвязей.Удалить(Предшественник);
			КонецЦикла;
			
			Для Каждого СтрокаВФорме Из ФормаЗадачи.ТабличноеПолеПредшественники Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаВФорме.Начало) Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрокаПредшественников = ТаблицаСвязей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПредшественников, СтрокаВФорме);
				НоваяСтрокаПредшественников.ВидСвязи = ПолучитьНомерВидаСвязиПоПредставлению(СтрокаВФорме.ВидСвязи);
				НоваяСтрокаПредшественников.Начало = Число(НоваяСтрокаПредшественников.Начало) + 2; 				
				НоваяСтрокаПредшественников.Конец = НомерСтрокиЗадачи;
			КонецЦикла;
			
			СоответствиеОбработанныхСтрок = Новый Соответствие;
			СоответствиеОбработанныхСтрок.Вставить(0, Ложь);
			СтруктураГраницы = Новый Структура("Верх, Низ", НомерСтрокиЗадачи, НомерСтрокиЗадачи);
			ПересчитатьДатыВСвязанныхЗадачах(НомерСтрокиЗадачи,СоответствиеОбработанныхСтрок);

		КонецЕсли;
		
		Область = тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиНазвание, НомерСтрокиЗадачиКонец,  НомерКолонкиДлительность);
		ПолеПроектаПриИзмененииСодержимогоОбласти(Неопределено, Область);
		Элементы.тдПроект.ТекущаяОбласть = ИсходнаяОбласть;
		
		Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаКалендарь Тогда
			НастроитьПланировщик();
		КонецЕсли;
	Иначе
		Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаКалендарь 
			И НЕ ЗначениеЗаполнено(тдПроект.Область(НомерСтрокиЗадачи, НомерКолонкиНазвание, 
				НомерСтрокиЗадачиКонец,НомерКолонкиНазвание).Текст) Тогда
			УдалитьСтроки(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивНазванийЗадач()
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	НовыйИсточникДанных = Новый ОписаниеИсточникаДанных(тдПроект.Область(1, НомерКолонкиНазвание,
		ПоследняяСтрока, НомерКолонкиНазвание));
	ПостроительЗапроса.ИсточникДанных = НовыйИсточникДанных;
	ПостроительЗапроса.ЗаполнитьНастройки();
	ПостроительЗапроса.Выполнить();
	
	МассивЗадач = ПостроительЗапроса.Результат.Выгрузить().ВыгрузитьКолонку("НазваниеЗадачи");
	МассивЗадач.Удалить(0);
	
	Возврат МассивЗадач;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// Удаление, добавление строк табличного документа

#Область УдалениеДобавлениеСтрокТабличногоДокумента

&НаСервере
Процедура ВставитьОбластьНаСервере(Знач ИсходнаяОбластьВерх = Неопределено, Знач ИсходнаяОбластьЛево = Неопределено,
	Знач ИсходнаяОбластьНиз = Неопределено, Знач ИсходнаяОбластьПраво = Неопределено,
	Знач ОбластьПриемникВерх = Неопределено, Знач ОбластьПриемникЛево = Неопределено, 
	Знач ОбластьПриемникНиз = Неопределено, Знач ОбластьПриемникПраво = Неопределено)
	
	Выполнить("тдПроект.ВставитьОбласть(тдПроект.Область(" 
		+ ?(ИсходнаяОбластьВерх = Неопределено, "", Формат(ИсходнаяОбластьВерх, "ЧН=0; ЧГ=")) 
		+ "," + ?(ИсходнаяОбластьЛево = Неопределено, "", Формат(ИсходнаяОбластьЛево, "ЧН=0; ЧГ="))
		+ ","+?(ИсходнаяОбластьНиз = Неопределено, "",  Формат(ИсходнаяОбластьНиз, "ЧН=0; ЧГ="))
		+ ","+?(ИсходнаяОбластьПраво = Неопределено, "",Формат(ИсходнаяОбластьПраво, "ЧН=0; ЧГ=")) 
		+ "), тдПроект.Область("+?(ОбластьПриемникВерх = Неопределено, "", Формат(ОбластьПриемникВерх, "ЧН=0; ЧГ="))
		+ ","+?(ОбластьПриемникЛево = Неопределено, "", Формат(ОбластьПриемникЛево, "ЧН=0; ЧГ="))
		+ ","+?(ОбластьПриемникНиз = Неопределено, "",  Формат(ОбластьПриемникНиз, "ЧН=0; ЧГ="))
		+ ","+?(ОбластьПриемникПраво = Неопределено, "",Формат(ОбластьПриемникПраво, "ЧН=0; ЧГ=")) + "));");
		
КонецПроцедуры
												   
&НаСервере
Процедура УдалитьОбластьНаСервере(ИсходнаяОбластьВерх = Неопределено, ИсходнаяОбластьЛево = Неопределено,
	ИсходнаяОбластьНиз = Неопределено, ИсходнаяОбластьПраво = Неопределено)
	
	Выполнить("тдПроект.УдалитьОбласть(тдПроект.Область(" 
		+ ?(ИсходнаяОбластьВерх = Неопределено, "", Формат(ИсходнаяОбластьВерх, "ЧН=0; ЧГ="))
		+ "," + ?(ИсходнаяОбластьЛево = Неопределено, "", Формат(ИсходнаяОбластьЛево, "ЧН=0; ЧГ="))
		+ "," + ?(ИсходнаяОбластьНиз = Неопределено, "",  Формат(ИсходнаяОбластьНиз, "ЧН=0; ЧГ=")) 
		+ "," + ?(ИсходнаяОбластьПраво = Неопределено, "",Формат(ИсходнаяОбластьПраво, "ЧН=0; ЧГ="))
		+ "), ТипСмещенияТабличногоДокумента.ПоГоризонтали);");
КонецПроцедуры

&НаКлиенте
Процедура РаздвинутьСтроки()
	
	// Запомним положение
	ТекущийВерх = тдПроект.ТекущаяОбласть.Верх;
	ТекущийНиз  = тдПроект.ТекущаяОбласть.Низ;
	
	// 1. Очистить рисунки
	пВерх = Макс(тдПроект.ТекущаяОбласть.Верх, 3);
	Если тдПроект.ТекущаяОбласть.Низ = 0 Тогда
		Возврат;
	Иначе
		пНиз  = тдПроект.ТекущаяОбласть.Низ;
	КонецЕсли;

	УдалитьДиапазонРисунков(пВерх, ПоследняяСтрока);
	
	// 2. Добавить строки
	КоличествоДобавляемыхСтрок = пНиз - пВерх+1;
	
	// Работа со связями
	НачальнаяСтрока = пВерх;
	БудемСвязыватьРаздвигаемуюОбласть = Ложь;
	Если (ПроверитьСтрокуВПредшественниках(НачальнаяСтрока, НачальнаяСтрока - 1) ИЛИ НачальнаяСтрока=3) Тогда
		БудемСвязыватьРаздвигаемуюОбласть = Истина;
	КонецЕсли;

	
	СдвинутьСвязиВниз(пВерх, КоличествоДобавляемыхСтрок);  
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		тдПроект.ВставитьОбласть(тдПроект.Область(пВерх, ,ПоследняяСтрока), 
			тдПроект.Область(пВерх+КоличествоДобавляемыхСтрок, ,ПоследняяСтрока+КоличествоДобавляемыхСтрок));
	#Иначе
		ВставитьОбластьНаСервере(пВерх, ,ПоследняяСтрока, ,
			пВерх+КоличествоДобавляемыхСтрок, ,ПоследняяСтрока+КоличествоДобавляемыхСтрок);
	#КонецЕсли
	тдПроект.Область(пВерх, , пНиз, ).Очистить();
	
	Если БудемСвязыватьРаздвигаемуюОбласть Тогда
		Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(НачальнаяСтрока-1, 
			тдПроект.ТекущаяОбласть.Лево, НачальнаяСтрока+КоличествоДобавляемыхСтрок);
		СоздатьСвязи();
		Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(ТекущийВерх, тдПроект.ТекущаяОбласть.Лево, ТекущийНиз);
	КонецЕсли;
	
	ПоследняяСтрока = ПоследняяСтрока + КоличествоДобавляемыхСтрок;
	
	НастроитьСтроку(пВерх, ПоследняяСтрока - 1, Истина, Истина);
		
	// 3. Обновить рисунки
	Для Индекс = пВерх По ПоследняяСтрока + 1 Цикл
		Если тдПроект.Область(Индекс - 1, НомерКолонкиНазвание, Индекс - 1, НомерКолонкиНазвание).Отступ < тдПроект.Область(
			Индекс, НомерКолонкиНазвание, Индекс, НомерКолонкиНазвание).Отступ Тогда
			
			ВставитьРисунокСверткиИРазвертки(Индекс - 1);
			
		КонецЕсли;
	КонецЦикла;
	ОбновитьИтоги(, пВерх, ПоследняяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроки(Знач ЗадаватьВопрос = Истина)
	
	пВерх = Макс(тдПроект.ТекущаяОбласть.Верх, 3);
	Если тдПроект.ТекущаяОбласть.Низ = 0 Тогда
		пНиз  = ПоследняяСтрока;
	Иначе
		пНиз  = тдПроект.ТекущаяОбласть.Низ;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Удалить выделенные строки?'");
	
	// Проверяем на подчинные строки
	Если тдПроект.Область(пНиз, НомерКолонкиНазвание, пНиз,НомерКолонкиНазвание).Отступ < 
		тдПроект.Область(пНиз + 1, НомерКолонкиНазвание, пНиз + 1,НомерКолонкиНазвание).Отступ Тогда
			
		Индекс = пНиз + 1;
		Пока Истина Цикл
			Если тдПроект.Область(пНиз, НомерКолонкиНазвание, пНиз,НомерКолонкиНазвание).Отступ >= тдПроект.Область(Индекс, 
				НомерКолонкиНазвание, Индекс,НомерКолонкиНазвание).Отступ Тогда
				
				Индекс = Индекс - 1;
				Прервать;
				
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		пНиз = Индекс;
		ТекстВопроса = НСтр("ru = 'Удалить выделенные строки вместе с подчиненными задачами?'");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("пВерх, пНиз, ЗадаватьВопрос", пВерх, пНиз, ЗадаватьВопрос);
	Если ЗадаватьВопрос Тогда
		ОписаниеОповещенияВопроса = Новый ОписаниеОповещения("УдалитьСтрокиПродолжение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещенияВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		УдалитьСтрокиПродолжение(Неопределено, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат
	КонецЕсли;
	
	пВерх = ДополнительныеПараметры.пВерх;
	пНиз  = ДополнительныеПараметры.пНиз;
	ЗадаватьВопрос  = ДополнительныеПараметры.ЗадаватьВопрос;
	
	КоличествоУдаляемыхСтрок = пНиз - пВерх;
	
	пПоследняяСтрока = Макс(3, Макс(ПоследняяСтрока, пНиз) - КоличествоУдаляемыхСтрок);
	
	пНиз  = Мин(пНиз, ПоследняяСтрока);
		
	// 1. Очистить рисунки и ресурсы
	УдалитьДиапазонРисунков(пВерх, ПоследняяСтрока);
	
	УстановитьТаблицуРесурсов(пВерх, пНиз, Новый Массив, Истина);

	СдвинутьСвязиВверх(пВерх, КоличествоУдаляемыхСтрок+1);
	
	// 2. Удалить строки
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		тдПроект.УдалитьОбласть(тдПроект.Область(пВерх, , пНиз),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	#Иначе
		УдалитьОбластьНаСервере(пВерх, , пНиз,);
	#КонецЕсли
	
	СоответствиеОбработанныхСтрок = Новый Соответствие;
	СоответствиеОбработанныхСтрок.Вставить(0, Ложь); // пустышка
	ПересчитатьДатыВСвязанныхЗадачах(пВерх,СоответствиеОбработанныхСтрок,
		Новый Структура("Верх, Низ", пВерх, ПоследняяСтрока));
	
	Если ЗадаватьВопрос ИЛИ Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаКалендарь Тогда
		// 3. Обновить рисунки
		
		Если пВерх > ПоследняяСтрока Тогда
			
		Иначе
			ПоследняяСтрока = пПоследняяСтрока;//Макс(ПоследняяСтрока, 4);
		КонецЕсли;
		
		пВерх = Мин(тдПроект.ТекущаяОбласть.Верх, ПоследняяСтрока); 
		
		НастроитьСтроку(пВерх, ПоследняяСтрока - 1, Истина);
		
		Для Индекс = пВерх По ПоследняяСтрока + 1 Цикл
			Если тдПроект.Область(Индекс-1, НомерКолонкиНазвание, Индекс - 1, НомерКолонкиНазвание).Отступ < тдПроект.Область(
				Индекс, НомерКолонкиНазвание, Индекс, НомерКолонкиНазвание).Отступ Тогда
				
				ВставитьРисунокСверткиИРазвертки(Индекс-1);
				
			КонецЕсли;
		КонецЦикла;
	
		ОбновитьИтоги(, пВерх, ПоследняяСтрока);
	Иначе
		ПоследняяСтрока = 4;
	КонецЕсли;
	ОбновитьДиаграмму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПроект()
	
	МинВерх = 3;
	МаксНиз = 3;
	Для Каждого ВыделеннаяОбласть Из тдПроект.ВыделенныеОбласти  Цикл
		пЛево = Макс(ВыделеннаяОбласть.Лево, НомерКолонкиНазвание);
		пВерх = Макс(ВыделеннаяОбласть.Верх, 3);
		пНиз  = Мин(ВыделеннаяОбласть.Низ, ПоследняяСтрока);
		
		Если пНиз = 0 Тогда
			пНиз  = ПоследняяСтрока;
		КонецЕсли;
		
		пПраво= ВыделеннаяОбласть.Право;
		тдПроект.Область(пВерх, пЛево, пНиз, пПраво).Очистить();
		
		МинВерх = Мин(пВерх, МинВерх);
		МаксНиз = Мин(пНиз,  МаксНиз);
		
		Если (пЛево <= НомерКолонкиРесурсы И пПраво >= НомерКолонкиРесурсы) ИЛИ 
			(пЛево <= НомерКолонкиРесурсыПредставление И пПраво >= НомерКолонкиРесурсыПредставление) Тогда
			
		  	УстановитьТаблицуРесурсов(ВыделеннаяОбласть.Верх, ВыделеннаяОбласть.Верх, Новый Массив);
			
	    КонецЕсли;
		
	КонецЦикла;
	
	ПолеПроектаПриИзмененииСодержимогоОбласти(Неопределено, тдПроект.Область(МинВерх, пЛево, МаксНиз, пПраво));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВниз()
	
	пЛево = Макс(тдПроект.ТекущаяОбласть.Лево, НомерКолонкиНазвание);
	пВерх = Макс(тдПроект.ТекущаяОбласть.Верх, 3);
		
	Если тдПроект.ТекущаяОбласть.Низ = 0 Тогда
		пНиз  = ПоследняяСтрока;
	Иначе
		пНиз  = тдПроект.ТекущаяОбласть.Низ;
	КонецЕсли;	
	
	пПраво= тдПроект.ТекущаяОбласть.Право;
	Если пПраво = НомерКолонкиРесурсыПредставление Тогда
		пПраво = НомерКолонкиРесурсы;
	КонецЕсли;
	
	НастроитьСтроку(пВерх, пНиз);
	
	СтрокиРесурсов = Неопределено;
	Для Индекс = пВерх+1 По пНиз Цикл
		Для Колонка =  пЛево По пПраво Цикл
			Если Колонка = НомерКолонкиВеха Тогда
				Продолжить;
			ИначеЕсли Колонка = НомерКолонкиРесурсы Тогда
				Если СтрокиРесурсов = Неопределено Тогда
					СтрокиРесурсов = ПолучитьСписокРесурсовЗадачи(пВерх);
				КонецЕсли;
				УстановитьТаблицуРесурсов(Индекс, Индекс, СтрокиРесурсов);
				Продолжить;
			КонецЕсли;
			
			Если тдПроект.Область(пВерх, Колонка, пВерх, Колонка).СодержитЗначение Тогда
				тдПроект.Область(Индекс, Колонка, Индекс, Колонка).Значение = тдПроект.Область(пВерх, Колонка, пВерх, 
					Колонка).Значение;
			Иначе
				тдПроект.Область(Индекс, Колонка, Индекс, Колонка).Текст = тдПроект.Область(пВерх, Колонка, пВерх, 
					Колонка).Текст;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПолеПроектаПриИзмененииСодержимогоОбласти(Неопределено, тдПроект.Область(пВерх, пЛево, пНиз, пПраво), 
		пПраво = НомерКолонкиДлительность);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного документа

#Область ОбработчикиСобытийТабличногоДокумента

&НаКлиенте
Процедура ПолеПроектаПриИзмененииСодержимогоОбласти(Элемент, Область, ПриЗаполненииВнизДлительности = Ложь)
	
	пВерх 				= Область.Верх;
	пНиз  				= Область.Низ;
	БылоИзменениеДат 	= Ложь;
	мТекущаяДата 		= ТекущаяДатаНаСервере();
	
	Если (Область.Лево <= НомерКолонкиДлительность И Область.Право >= НомерКолонкиДлительность) ИЛИ 
		 (Область.Лево <= НомерКолонкиНачало И Область.Право >= НомерКолонкиНачало) ИЛИ
		 (Область.Лево <= НомерКолонкиОкончание И Область.Право >= НомерКолонкиОкончание) Тогда
		 БылоИзменениеДат = Истина;
	КонецЕсли;
	
	НастроитьСтроку(пВерх, пНиз);
	
	Если пИзменятьОтступ Тогда
		Если пВерх = пНиз И пВерх > 3 Тогда
			Область.Отступ = тдПроект.Область(Область.Верх - 1, НомерКолонкиНазвание, Область.Верх - 1, НомерКолонкиНазвание).Отступ;
		КонецЕсли;
		пИзменятьОтступ = Ложь;
	КонецЕсли;
	
	УдалитьДиапазонРисунков(пВерх - 1, пНиз);
	Для Индекс = пВерх По пНиз + 1 Цикл
		Если тдПроект.Область(Индекс - 1, НомерКолонкиНазвание, Индекс - 1, НомерКолонкиНазвание).Отступ < тдПроект.Область(
			Индекс, НомерКолонкиНазвание, Индекс, НомерКолонкиНазвание).Отступ Тогда
			
			ВставитьРисунокСверткиИРазвертки(Индекс - 1);
			
		КонецЕсли;
	КонецЦикла;
		
	Для Индекс = пВерх По пНиз Цикл
		
		Если НЕ ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиGUID, Индекс, НомерКолонкиGUID).Текст) Тогда
			тдПроект.Область(Индекс, НомерКолонкиGUID, Индекс, НомерКолонкиGUID).Текст = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиДлительность, Индекс, НомерКолонкиДлительность).Значение) И 
			(НЕ ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение) ИЛИ
			НЕ ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение)) Тогда
			
			Если НЕ ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение) Тогда
				тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение = НачалоРабочегоДня(мТекущаяДата);
			КонецЕсли;
			ДлительностьИлиНачалоПриИзменении(Индекс);
						
		ИначеЕсли НЕ ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиДлительность, Индекс, НомерКолонкиДлительность).Значение) И
					(ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение) И 
					 ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение)) Тогда
							
		КонецЕсли;
		
		Если Область.Лево = НомерКолонкиПроцентЗавершения ИЛИ Область.Право = НомерКолонкиПроцентЗавершения Тогда
			Если тдПроект.Область(Индекс, НомерКолонкиПроцентЗавершения, Индекс, 
				НомерКолонкиПроцентЗавершения).Значение > 100 Тогда
				
				тдПроект.Область(Индекс, НомерКолонкиПроцентЗавершения, Индекс, НомерКолонкиПроцентЗавершения).Значение = 100;
				
			ИначеЕсли тдПроект.Область(Индекс, НомерКолонкиПроцентЗавершения, Индекс, 
				НомерКолонкиПроцентЗавершения).Значение = 100 Тогда
				
				Если ПолучитьЗначениеПоКолонке(Индекс, НомерКолонкиЗатратыФакт)=0 Тогда
					тдПроект.Область(Индекс, НомерКолонкиЗатратыФакт, Индекс, НомерКолонкиЗатратыФакт).Значение = 
						тдПроект.Область(Индекс, НомерКолонкиЗатраты, Индекс, НомерКолонкиЗатраты).Значение;
				КонецЕсли;
					
				Если ПолучитьЗначениеПоКолонке(Индекс, НомерКолонкиСтоимостьФакт)=0 Тогда
					тдПроект.Область(Индекс, НомерКолонкиСтоимостьФакт, Индекс, НомерКолонкиСтоимостьФакт).Значение = 
						тдПроект.Область(Индекс, НомерКолонкиСтоимость, Индекс, НомерКолонкиСтоимость).Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Область.Лево = НомерКолонкиНазвание Тогда
						
			Если НЕ ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение) И 
				ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиНазвание, Индекс, НомерКолонкиНазвание).Текст) Тогда
				тдПроект.Область(Индекс, НомерКолонкиДлительность, Индекс, НомерКолонкиДлительность).Значение = 1;
				тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение = НачалоРабочегоДня(мТекущаяДата);
				ДлительностьИлиНачалоПриИзменении(Индекс);
				тдПроект.Область(Индекс, НомерКолонкиПроцентЗавершения, Индекс, НомерКолонкиПроцентЗавершения).Значение = 0;
			КонецЕсли;
		
		КонецЕсли;
		
		Если Область.Лево = НомерКолонкиДлительность ИЛИ Область.Право = НомерКолонкиДлительность ИЛИ 
			(Область.Лево = НомерКолонкиНачало И Область.Право = НомерКолонкиНачало) Тогда
				Если НЕ ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение) Тогда
					тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение = НачалоРабочегоДня(мТекущаяДата);
				КонецЕсли;
				
				Если Час(тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение) = 0 Тогда
					тдПроект.Область(Индекс, НомерКолонкиНачало, 
						Индекс, НомерКолонкиНачало).Значение = НачалоРабочегоДня(тдПроект.Область(Индекс, НомерКолонкиНачало, 
							Индекс, НомерКолонкиНачало).Значение);
				КонецЕсли;
				
				ДлительностьИлиНачалоПриИзменении(Индекс, ПриЗаполненииВнизДлительности);
		ИначеЕсли Область.Лево = НомерКолонкиОкончание И Область.Право = НомерКолонкиОкончание Тогда
			
				пОкончание  = тдПроект.Область(Индекс, НомерКолонкиОкончание, Индекс, НомерКолонкиОкончание).Значение;
				пНачало  = тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение;
				
				Если НЕ ЗначениеЗаполнено(пНачало) Тогда
					тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение = НачалоРабочегоДня(мТекущаяДата);
				КонецЕсли;
				
				ОкончаниеПриИзменении(Индекс);
				
		ИначеЕсли Область.Лево = НомерКолонкиНачалоФакт И Область.Право = НомерКолонкиНачалоФакт Тогда					
				
			Если Час(тдПроект.Область(Индекс, НомерКолонкиНачалоФакт, Индекс, НомерКолонкиНачалоФакт).Значение) = 0 Тогда
				тдПроект.Область(Индекс, НомерКолонкиНачалоФакт,
					Индекс, НомерКолонкиНачалоФакт).Значение = НачалоРабочегоДня(тдПроект.Область(Индекс, НомерКолонкиНачалоФакт,
						Индекс, НомерКолонкиНачалоФакт).Значение);
			КонецЕсли;
				
			Если тдПроект.Область(пВерх, НомерКолонкиПроцентЗавершения, пВерх, НомерКолонкиПроцентЗавершения).Значение = 0 Тогда
				тдПроект.Область(пВерх, НомерКолонкиПроцентЗавершения, пВерх, НомерКолонкиПроцентЗавершения).Значение = 10;
			КонецЕсли;
		ИначеЕсли Область.Лево = НомерКолонкиОкончаниеФакт И Область.Право = НомерКолонкиОкончаниеФакт Тогда
			
			пНачалоФакт  = тдПроект.Область(Индекс, НомерКолонкиНачалоФакт, Индекс, НомерКолонкиНачалоФакт).Значение;
			
			Если Час(тдПроект.Область(Индекс, НомерКолонкиОкончаниеФакт, Индекс, НомерКолонкиОкончаниеФакт).Значение) = 0 Тогда
				тдПроект.Область(Индекс, НомерКолонкиОкончаниеФакт, 
					Индекс, НомерКолонкиОкончаниеФакт).Значение = СкорректироватьДатуОкончания(тдПроект.Область(Индекс, НомерКолонкиОкончаниеФакт, 
						Индекс, НомерКолонкиОкончаниеФакт).Значение, Ложь);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(пНачалоФакт) Тогда
				тдПроект.Область(Индекс, НомерКолонкиНачалоФакт, Индекс, НомерКолонкиНачалоФакт).Значение = 
					РасчитатьОкончание(ПолучитьЗначениеПоКолонке(пВерх, НомерКолонкиОкончаниеФакт),	
						-ПолучитьЗначениеПоКолонке(пВерх, НомерКолонкиДлительность));
			КонецЕсли;
			
			тдПроект.Область(пВерх, НомерКолонкиПроцентЗавершения, пВерх, НомерКолонкиПроцентЗавершения).Значение = 100;	
			
			Если ПолучитьЗначениеПоКолонке(Индекс, НомерКолонкиЗатратыФакт) = 0 Тогда
				тдПроект.Область(Индекс, НомерКолонкиЗатратыФакт, Индекс, НомерКолонкиЗатратыФакт).Значение =
					тдПроект.Область(Индекс, НомерКолонкиЗатраты, Индекс, НомерКолонкиЗатраты).Значение;
			КонецЕсли;
				
			Если ПолучитьЗначениеПоКолонке(Индекс, НомерКолонкиСтоимостьФакт) = 0 Тогда
				тдПроект.Область(Индекс, НомерКолонкиСтоимостьФакт, Индекс, НомерКолонкиСтоимостьФакт).Значение = 
					тдПроект.Область(Индекс, НомерКолонкиСтоимость, Индекс, НомерКолонкиСтоимость).Значение;
			КонецЕсли;
		КонецЕсли;
		
		Затраты = 0;
		Стоимость = 0;
		Если Область.Лево <= НомерКолонкиЗатраты И Область.Право >= НомерКолонкиЗатраты Тогда
			ПолучитьЗатратыЗадачи(Индекс, Истина, Затраты, Стоимость);
			тдПроект.Область(Индекс, НомерКолонкиДопЗатраты, Индекс, НомерКолонкиДопЗатраты).Значение = 
				ПолучитьЗначениеПоКолонке(Индекс, НомерКолонкиЗатраты) - Затраты;
				
		ИначеЕсли Область.Лево <= НомерКолонкиСтоимость И Область.Право >= НомерКолонкиСтоимость Тогда
			ПолучитьЗатратыЗадачи(Индекс, Истина, Затраты, Стоимость);
			тдПроект.Область(Индекс, НомерКолонкиДопСтоимость, Индекс, НомерКолонкиДопСтоимость).Значение = 
				ПолучитьЗначениеПоКолонке(Индекс, НомерКолонкиСтоимость) - Стоимость;
			
		КонецЕсли;
		
		Если Область.Лево <= НомерКолонкиРесурсыПредставление И Область.Право >= НомерКолонкиРесурсыПредставление Тогда
			Если НЕ ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиРесурсыПредставление, Индекс, 
					НомерКолонкиРесурсыПредставление).Текст) Тогда
				УстановитьТаблицуРесурсов(Индекс, Индекс, Новый Массив);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(тдПроект.Область(Индекс, НомерКолонкиНазвание, Индекс, НомерКолонкиНазвание).Текст) Тогда
			тдПроект.Область(Индекс, НомерКолонкиДлительность, Индекс, НомерКолонкиДлительность).Значение = 0;
			тдПроект.Область(Индекс, НомерКолонкиНачало, Индекс, НомерКолонкиНачало).Значение = Дата('00010101');
			тдПроект.Область(Индекс, НомерКолонкиОкончание, Индекс, НомерКолонкиОкончание).Значение = Дата('00010101');
			тдПроект.Область(Индекс, НомерКолонкиПроцентЗавершения, Индекс, НомерКолонкиПроцентЗавершения).Значение = 0;
		КонецЕсли;
	КонецЦикла;
		
	тдПроект.ОбластьПечати = тдПроект.Область(1, 1 , ПоследняяСтрока + 1, НомерКолонкиДиаграммыГанта);
	
	Для НомерСтроки = пВерх По пНиз Цикл
		РаскраситьСтроку(НомерСтроки);
	КонецЦикла;
	
	СтруктураГраницы = Новый Структура("Верх, Низ", пВерх, пНиз);
	Если БылоИзменениеДат Тогда
		ПересчитатьДатыВСвязанныхЗадачах(пВерх,,СтруктураГраницы);
	КонецЕсли;
	пВерх = СтруктураГраницы.Верх;
	пНиз  = СтруктураГраницы.Низ;
		
	ОбновитьИтоги(, пВерх, пНиз);
	Модифицированность = Истина;
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура тдПроектПриИзменении(Элемент)
	
	ПолеПроектаПриИзмененииСодержимогоОбласти(Неопределено, тдПроект.ТекущаяОбласть)
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПроектаПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		
		Если Элемент.ТекущаяОбласть.Имя = "ДиаграммаГанта" Тогда 
			Элементы.тдПроект.Редактирование  = Ложь;
			Возврат;
		Иначе
			Если  Элементы.тдПроект.Редактирование = ЛОжь Тогда
				Элементы.тдПроект.Редактирование = Истина;
			КонецЕсли;
		
			 Попытка
				пВерх = СоответствиеОбластейПоКартинкам.Получить(Элемент.ТекущаяОбласть.Имя);
				
				ТекОбласть = тдПроект.Область(пВерх, НомерКолонкиНазвание, пВерх, НомерКолонкиНазвание);
				Отступ = ТекОбласть.Отступ;
				СледующаяОбласть = тдПроект.Область(пВерх+1, НомерКолонкиНазвание, пВерх+1, НомерКолонкиНазвание);
				
				Рисунок = Элемент.ТекущаяОбласть;
			Исключение
				Возврат;
			КонецПопытки;
			Если СледующаяОбласть.Видимость Тогда
				Индекс = пВерх+1;
				Пока Истина Цикл                                                                                    
	              	Если тдПроект.Область(Индекс, НомерКолонкиНазвание, Индекс, НомерКолонкиНазвание).Отступ<=Отступ Тогда
						Прервать;
					ИначеЕсли тдПроект.Область(Индекс, НомерКолонкиНазвание, Индекс, НомерКолонкиНазвание).Отступ=Отступ-2 Тогда
					КонецЕсли;
					тдПроект.Область(Индекс, , Индекс).Видимость = Ложь;
					
					Индекс = Индекс + 1;
				КонецЦикла;
				Рисунок.Картинка = Элементы.ПолеКартинкиПлюс.Картинка;
				Диаграмма   	 = тдПроект.Рисунки.получить(0).Объект;
				Диаграмма.СвернутьТочку(Диаграмма.УстановитьТочку(Формат(пВерх, "ЧН=' '; ЧГ=")), Истина);
			Иначе
				Индекс = пВерх+1;
				Пока Истина Цикл
					Если тдПроект.Область(Индекс, НомерКолонкиНазвание, Индекс, НомерКолонкиНазвание).Отступ<=Отступ Тогда
						Прервать;
					КонецЕсли;
					тдПроект.Область(Индекс, , Индекс, ).Видимость = Истина;
					Если ЗначениеЗаполнено(СоответствиеКартинокПоОбластям.Получить(Индекс)) Тогда
						РисунокПодчиненныхСтрок = тдПроект.Рисунки[СоответствиеКартинокПоОбластям.Получить(Индекс)];
						РисунокПодчиненныхСтрок.Картинка = Элементы.ПолеКартинкиМинус.Картинка;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
				Рисунок.Картинка = Элементы.ПолеКартинкиМинус.Картинка;
				Диаграмма   	 = тдПроект.Рисунки.получить(0).Объект;
				Диаграмма.РазвернутьТочку(Диаграмма.УстановитьТочку(Формат(пВерх, "ЧН=0; ЧГ=")), Истина);
			КонецЕсли;
			
			Элементы.тдПроект.ТекущаяОбласть = ТекОбласть;
		КонецЕсли;
		
	Иначе
		Если  Элементы.тдПроект.Редактирование = Ложь Тогда
			Элементы.тдПроект.Редактирование = Истина;
			ПерестроитьТаблицуПоДиаграмме();
		КонецЕсли;
		
		Если Элемент.ТекущаяОбласть.Лево = 1 Тогда
			Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(Элемент.ТекущаяОбласть.Верх,,Элемент.ТекущаяОбласть.Низ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПроектаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТипЗнч(Область) <> Тип("РисунокТабличногоДокумента") Тогда
		
		Если Область.Лево = НомерКолонкиРесурсыПредставление И Область.Право = НомерКолонкиРесурсыПредставление И
			Область.Верх >= 3 Тогда
			СтандартнаяОбработка = Ложь;
			
			ОткрытьФормуЗадачи(Истина);
			
		ИначеЕсли Область.Лево = 0 //ИЛИ Область.Верх <= 2 
			ИЛИ ((Область.Лево = НомерКолонкиДлительность И Область.Право = НомерКолонкиДлительность ИЛИ 
			      Область.Лево = НомерКолонкиЗатраты И Область.Право = НомерКолонкиЗатраты ИЛИ
				  
				  Область.Лево = НомерКолонкиСтоимостьФакт И Область.Право = НомерКолонкиСтоимостьФакт ИЛИ
			      Область.Лево = НомерКолонкиЗатратыФакт И Область.Право = НомерКолонкиЗатратыФакт ИЛИ
				  Область.Лево = НомерКолонкиСтоимость И Область.Право = НомерКолонкиСтоимость
			      ) И ЭтоСуммирующаяЗадача(Область.Верх)) Тогда
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Область.Верх <= 2 Тогда
			СтандартнаяОбработка = Ложь;
			ВыборЗначенияФильтра(Область.Лево);
		ИначеЕсли Область.Лево = НомерКолонкиНазвание И НЕ ЗначениеЗаполнено(Область.Текст) И Область.Отступ = 2 Тогда
			пИзменятьОтступ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////
// Работа с затратами

#Область РаботаСЗатратами

&НаКлиенте
Функция ПолучитьЗатратыЗадачи(Знач Строка, Знач РасчитатьБезДополнительныхЗатрат = Ложь, 
	Затраты = 0, Стоимость = 0) Экспорт
	
	Длительность = тдПроект.Область(Строка, НомерКолонкиДлительность, Строка, НомерКолонкиДлительность).Значение;
	
	Если НЕ ЭтоСуммирующаяЗадача(Строка) Тогда
		// обычная задача
		ТаблицаРесурсов = ПолучитьСписокРесурсовЗадачи(Строка);
		
		МассивУдаляемыхСтрок = Новый Массив;
		НужноОбновлятьТаблицуРесурсовВЗадаче = Ложь;
		Для Каждого СтрокаРесурсовЗадачи Из ТаблицаРесурсов Цикл
			Если ЗначениеЗаполнено(СтрокаРесурсовЗадачи.GUID_Ресурса) Тогда
				СтрокаТаблицыРесурсов = СоответствиеСтрокРесурсовПоGUIDамПолучить(СтрокаРесурсовЗадачи.GUID_Ресурса);
				Если СтрокаТаблицыРесурсов = Неопределено Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаРесурсовЗадачи);
					НужноОбновлятьТаблицуРесурсовВЗадаче = Истина;
					Продолжить;
				ИначеЕсли СтрокаТаблицыРесурсов.ТипРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой") Тогда
					Затраты = Затраты + (Длительность * Объект.КоличествоРабочихЧасовВДне 
						* (СтрокаРесурсовЗадачи.Единицы / 100) * СтрокаТаблицыРесурсов.СтоимостьЗатрат)
						+ СтрокаТаблицыРесурсов.ЗатратыНаИспользование;
					Стоимость = Стоимость + (Длительность * Объект.КоличествоРабочихЧасовВДне 
						* (СтрокаРесурсовЗадачи.Единицы / 100) * СтрокаТаблицыРесурсов.ОтпускнаяСтоимость) 
						+ СтрокаТаблицыРесурсов.СтоимостьНаИспользование;
				Иначе
					Затраты = Затраты + (СтрокаРесурсовЗадачи.Единицы * СтрокаТаблицыРесурсов.СтоимостьЗатрат) 
						+ СтрокаТаблицыРесурсов.ЗатратыНаИспользование;
					Стоимость = Стоимость + (СтрокаРесурсовЗадачи.Единицы * СтрокаТаблицыРесурсов.ОтпускнаяСтоимость)
						+ СтрокаТаблицыРесурсов.СтоимостьНаИспользование;
				КонецЕсли;
				
				Если СтрокаТаблицыРесурсов.НазваниеРесурса <> СтрокаРесурсовЗадачи.НазваниеРесурса Тогда
					СтрокаРесурсовЗадачи.НазваниеРесурса = СтрокаТаблицыРесурсов.НазваниеРесурса;
					НужноОбновлятьТаблицуРесурсовВЗадаче = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НужноОбновлятьТаблицуРесурсовВЗадаче Тогда
			Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
				ТаблицаРесурсов.Удалить(ЭлементМассива);
				ТаблицаРесурсовЗадачи.Удалить(ЭлементМассива);
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ РасчитатьБезДополнительныхЗатрат Тогда
			Затраты = Затраты + ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиДопЗатраты);
			Стоимость = Стоимость + ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиДопСтоимость);
		КонецЕсли;
	Иначе
		Затраты = тдПроект.Область(Строка, НомерКолонкиЗатраты, Строка, НомерКолонкиЗатраты).Значение;
		Стоимость = тдПроект.Область(Строка, НомерКолонкиСтоимость, Строка, НомерКолонкиСтоимость).Значение;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗатратыЗадачи2(Знач Строка, РасчитатьБезДополнительныхЗатрат = Ложь, Таблица) Экспорт
	
	СтрокаТаблицы = Таблица[Строка];
	Длительность = СтрокаТаблицы["Длит_Дн_"];
	Затраты 	= 0;
	Стоимость 	= 0;
	
	Если НЕ ЭтоСуммирующаяЗадача(Строка+2) Тогда
		// обычная задача
		ТаблицаРесурсов = ПолучитьСписокРесурсовЗадачи(Строка + 2);
			
		МассивУдаляемыхСтрок = Новый Массив;
		НужноОбновлятьТаблицуРесурсовВЗадаче = Ложь;
		Для Каждого СтрокаРесурсовЗадачи Из ТаблицаРесурсов Цикл
			Если ЗначениеЗаполнено(СтрокаРесурсовЗадачи.GUID_Ресурса) Тогда
				СтрокаТаблицыРесурсов = СоответствиеСтрокРесурсовПоGUIDамПолучить(СтрокаРесурсовЗадачи.GUID_Ресурса);
				Если СтрокаТаблицыРесурсов = Неопределено Тогда
					ТаблицаРесурсовЗадачи.Удалить(СтрокаРесурсовЗадачи);
					НужноОбновлятьТаблицуРесурсовВЗадаче = Истина;
					Продолжить;
				ИначеЕсли СтрокаТаблицыРесурсов.ТипРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой") Тогда
					Затраты = Затраты + (Длительность*Объект.КоличествоРабочихЧасовВДне*(СтрокаРесурсовЗадачи.Единицы / 100)
						* СтрокаТаблицыРесурсов.СтоимостьЗатрат)+СтрокаТаблицыРесурсов.ЗатратыНаИспользование;
					Стоимость = Стоимость + (Длительность*Объект.КоличествоРабочихЧасовВДне*(СтрокаРесурсовЗадачи.Единицы / 100)
						* СтрокаТаблицыРесурсов.ОтпускнаяСтоимость)+СтрокаТаблицыРесурсов.СтоимостьНаИспользование;
				Иначе
					Затраты = Затраты + (СтрокаРесурсовЗадачи.Единицы*СтрокаТаблицыРесурсов.СтоимостьЗатрат) 
						+ СтрокаТаблицыРесурсов.ЗатратыНаИспользование;
					Стоимость = Стоимость + (СтрокаРесурсовЗадачи.Единицы*СтрокаТаблицыРесурсов.ОтпускнаяСтоимость) 
						+ СтрокаТаблицыРесурсов.СтоимостьНаИспользование;
				КонецЕсли;
				
				Если СтрокаТаблицыРесурсов.НазваниеРесурса <> СтрокаРесурсовЗадачи.НазваниеРесурса 
						ИЛИ СтрокаТаблицыРесурсов.КраткоеНазвание <> СтрокаРесурсовЗадачи.КраткоеНазвание Тогда
					ЗаполнитьЗначенияСвойств(СтрокаРесурсовЗадачи, СтрокаТаблицыРесурсов);
					НужноОбновлятьТаблицуРесурсовВЗадаче = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НужноОбновлятьТаблицуРесурсовВЗадаче Тогда
			пТаблицаРесурсовЗадачи = ПолучитьСписокРесурсовЗадачи(Строка+2);
			ПредставлениеРесурсов = "";
			Для Каждого СтрокаРесурсов Из пТаблицаРесурсовЗадачи Цикл
				
				СтрокаИзСпискаРесурсов = СоответствиеСтрокРесурсовПоGUIDамПолучить(СтрокаРесурсов.GUID_Ресурса);
				Если НЕ СтрокаИзСпискаРесурсов = Неопределено Тогда
					КраткоеНазвание = ?(ЗначениеЗаполнено(СтрокаРесурсов.КраткоеНазвание), СтрокаРесурсов.КраткоеНазвание, 
						СтрокаРесурсов.НазваниеРесурса);
					ПредставлениеРесурсов = ПредставлениеРесурсов + КраткоеНазвание + ";";
				КонецЕсли;
			КонецЦикла;
			
			Если СтрДлина(ПредставлениеРесурсов) > 0 Тогда
				ПредставлениеРесурсов = Лев(ПредставлениеРесурсов, СтрДлина(ПредставлениеРесурсов)-1);
			КонецЕсли;
			
			тдПроект.Область(Строка + 2, НомерКолонкиРесурсыПредставление,Строка + 2, 
				НомерКолонкиРесурсыПредставление).текст = ПредставлениеРесурсов;
			тдПроект.Область(Строка + 2, НомерКолонкиРесурсы,Строка + 2, НомерКолонкиРесурсы).Текст = ПредставлениеРесурсов;
		КонецЕсли;
		
		Если НЕ РасчитатьБезДополнительныхЗатрат Тогда
			Затраты = Затраты + СтрокаТаблицы["Дополнительные_затраты"];
			Стоимость = Стоимость + СтрокаТаблицы["Доп_стоимость"];
		КонецЕсли;
	Иначе
		Затраты = СтрокаТаблицы["Затраты"];
		Стоимость = СтрокаТаблицы["Стоимость"];
	КонецЕсли;
	
	Возврат Новый Структура("Затраты, Стоимость", Затраты, Стоимость);
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗатраты(Знач Строка, Знач Затраты) Экспорт
	
	тдПроект.Область(Строка, НомерКолонкиЗатраты, Строка, НомерКолонкиЗатраты).Значение = Затраты;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтоимость(Знач Строка, Знач Стоимость) Экспорт
	
	тдПроект.Область(Строка, НомерКолонкиСтоимость, Строка, НомерКолонкиСтоимость).Значение = Стоимость;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////
// Работа со связями

#Область РаботаСоСвязями

&НаКлиенте
Процедура ПрименитьИзмененияВСвязях()
	
	ИзмененныеСвязи = ТаблицаСвязей.НайтиСтроки(Новый Структура("БылиИзменения", Истина));
	Для Каждого ИзменнаяСвязь Из ИзмененныеСвязи Цикл
		ИзменнаяСвязь.БылиИзменения = Ложь;
		Если ЗначениеЗаполнено(ИзменнаяСвязь.НовыйКонец) Тогда
			ИзменнаяСвязь.Конец = ИзменнаяСвязь.НовыйКонец;
			ИзменнаяСвязь.НовыйКонец = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИзменнаяСвязь.НовыйНачало) Тогда
			ИзменнаяСвязь.Начало = ИзменнаяСвязь.НовыйНачало;
			ИзменнаяСвязь.НовыйНачало = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьСвязиВверх(Знач НачальнаяСтрока, Знач КоличествоУдаляемыхСтрок,  НижнийПредел = 0 ) Экспорт// При удалении
	
	НижнийПредел = Макс(НижнийПредел, ПоследняяСтрока);
	
	Для Строка = 3 По НижнийПредел Цикл
		СписокЗначений = ТаблицаСвязей.НайтиСтроки(Новый Структура("Конец, БылиИзменения", Строка, Ложь));
		Для Каждого ЭлементЗначения Из СписокЗначений Цикл
			
			Если (Число(ЭлементЗначения.Начало) >= НачальнаяСтрока 
				И Число(ЭлементЗначения.Начало) < НачальнаяСтрока + КоличествоУдаляемыхСтрок) 
				ИЛИ ЭтоСуммирующаяЗадача(ЭлементЗначения.Начало) Тогда
				
				ТаблицаСвязей.Удалить(ЭлементЗначения);
				Продолжить;
				
			КонецЕсли;
			
			Если Число(ЭлементЗначения.Начало) >= НачальнаяСтрока+КоличествоУдаляемыхСтрок Тогда
				ЭлементЗначения.НовыйНачало = (Число(ЭлементЗначения.Начало) - КоличествоУдаляемыхСтрок);
				ЭлементЗначения.БылиИзменения = Истина;
			КонецЕсли;			
			
			Если Число(ЭлементЗначения.Конец) >= НачальнаяСтрока+КоличествоУдаляемыхСтрок Тогда
				ЭлементЗначения.НовыйКонец = (Число(ЭлементЗначения.Конец) - КоличествоУдаляемыхСтрок);
				ЭлементЗначения.БылиИзменения = Истина;
			Иначе
				СтрокаСНовойСвязью = ЭлементЗначения.Конец-1;
				Пока ЭтоСуммирующаяЗадача(СтрокаСНовойСвязью) И СтрокаСНовойСвязью >= ЭлементЗначения.Начало Цикл
					СтрокаСНовойСвязью = СтрокаСНовойСвязью - 1;
				КонецЦикла;
				
				Если Число(ЭлементЗначения.Конец) <> СтрокаСНовойСвязью + 1 Тогда
					ЭлементЗначения.НовыйКонец = СтрокаСНовойСвязью + 1;
					ЭлементЗначения.БылиИзменения = Истина;
					Пока ЭтоСуммирующаяЗадача(Число(ЭлементЗначения.НовыйКонец)+КоличествоУдаляемыхСтрок) Цикл
						ЭлементЗначения.НовыйКонец = Число(ЭлементЗначения.НовыйКонец) + 1;
					КонецЦикла;
				КонецЕсли;				
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	ПрименитьИзмененияВСвязях();
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьСвязиВниз(Знач НачальнаяСтрока, Знач КоличествоДобавляемыхСтрок, НижнийПредел = 0 ) Экспорт// При добавлении строки
	
	НижнийПредел = Макс(НижнийПредел, ПоследняяСтрока);
	Для Строка = 3 По НижнийПредел Цикл
		СписокЗначений = ТаблицаСвязей.НайтиСтроки(Новый Структура("Конец, БылиИзменения", Строка, Ложь));
		
		Для Каждого ЭлементЗначения Из СписокЗначений Цикл
			Если Число(ЭлементЗначения.Начало) >= НачальнаяСтрока Тогда
				ЭлементЗначения.НовыйНачало = (Число(ЭлементЗначения.Начало) + КоличествоДобавляемыхСтрок);
				ЭлементЗначения.БылиИзменения = Истина;
			КонецЕсли;			
			
			Если Число(ЭлементЗначения.Конец) >= НачальнаяСтрока+КоличествоДобавляемыхСтрок Тогда
				ЭлементЗначения.НовыйКонец = (Число(ЭлементЗначения.Конец) + КоличествоДобавляемыхСтрок);
			КонецЕсли;			
		КонецЦикла;

	КонецЦикла;
	
	ПрименитьИзмененияВСвязях();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗацикливанияСвязейВариант1(ИсходнаяСтрока, ПотенциальнаяПредшествующая) Экспорт
	
	Строка = Число(ИсходнаяСтрока);
	
	МассивНомеровСтрокДляПересчета = Новый Массив;
	МассивНомеровСтрокДляПересчета.Добавить(Строка);
	
	СоответствиеОбработанныхСтрок = Новый Соответствие;

	Индекс = 0;
	Пока Индекс < МассивНомеровСтрокДляПересчета.Количество() Цикл
		Строка = МассивНомеровСтрокДляПересчета[Индекс];

		СписокСледующихЗадач = ПолучитьСписокСледующихЗадачПоСвязям(Строка);
		
		Для Каждого ЭлементЗначения Из СписокСледующихЗадач Цикл
			ЧисловоеЗначение = Число(ЭлементЗначения.Конец);
			Если ЧисловоеЗначение = ПотенциальнаяПредшествующая Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если СоответствиеОбработанныхСтрок.Получить(ЧисловоеЗначение) = Неопределено Тогда
				МассивНомеровСтрокДляПересчета.Добавить(ЧисловоеЗначение);
			КонецЕсли;
				
		КонецЦикла;
		
		СоответствиеОбработанныхСтрок.Вставить(Строка, Истина);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПроверкаЗацикливанияСвязейВариант2(ИсходнаяСтрока, ПотенциальнаяПредшествующая) Экспорт
	
	Строка = Число(ПотенциальнаяПредшествующая);
	
	МассивНомеровСтрокДляПересчета = Новый Массив;
	МассивНомеровСтрокДляПересчета.Добавить(Строка);
	
	СоответствиеОбработанныхСтрок = Новый Соответствие;

	Индекс = 0;
	Пока Индекс < МассивНомеровСтрокДляПересчета.Количество() Цикл
		ПредшествующаяСтрока = МассивНомеровСтрокДляПересчета[Индекс];
		СписокПредыдущихЗадач = ПолучитьСписокПредшественников(ПредшествующаяСтрока);
	
		Для Каждого ЭлементЗначения Из СписокПредыдущихЗадач Цикл
			ЧисловоеЗначение = Число(ЭлементЗначения.Начало);
			Если ЧисловоеЗначение = Число(ИсходнаяСтрока) Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если СоответствиеОбработанныхСтрок.Получить(ЧисловоеЗначение) = Неопределено Тогда
				МассивНомеровСтрокДляПересчета.Добавить(ЧисловоеЗначение);
			КонецЕсли;
		КонецЦикла;
		
		СоответствиеОбработанныхСтрок.Вставить(Строка, Истина);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПроверкаЗацикливанияСвязей(ИсходнаяСтрока, ПотенциальнаяПредшествующая) Экспорт
	
	Если ПотенциальнаяПредшествующая <= ПоследняяСтрока/2 Тогда
		// Для ускорения обработки берем верхнюю часть
		Возврат ПроверкаЗацикливанияСвязейВариант2(ИсходнаяСтрока, ПотенциальнаяПредшествующая);
	Иначе
		// Для ускорения обработки берем нижнюю часть
		Возврат ПроверкаЗацикливанияСвязейВариант1(ИсходнаяСтрока, ПотенциальнаяПредшествующая);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеВидСвязиДляProject(Знач ВидСвязи)
	Если ВидСвязи = 1 Тогда
		Возврат "Окончание-Окончание";
	ИначеЕсли ВидСвязи = 2 Тогда
		Возврат "Начало-Окончание";
	ИначеЕсли ВидСвязи = 3 Тогда
		Возврат "Начало-Начало";
	Иначе
		Возврат "Окончание-Начало";
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьНомерВидаСвязиПоПредставлению(Знач Строка)
	Если Строка = "Окончание-Окончание" Тогда
		Возврат 1;
	ИначеЕсли Строка = "Начало-Окончание" Тогда
		Возврат 2;
	ИначеЕсли Строка = "Начало-Начало" Тогда
		Возврат 3;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////
// События формы

&НаКлиенте
Процедура ВывестиСостояние(Знач Текст)
	
	НадписьСостояние = Текст;
	
КонецПроцедуры

#Область ОтображениеИНачальнаяНастройкаПроекта

&НаСервере
Процедура ВосстановитьЦветаНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи						= РегистрыСведений.НастройкиПроектов.СоздатьМенеджерЗаписи();
   	МенеджерЗаписи.Проект				= Объект.Проект;
   	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		ОсновнойЦветФонаЗадач			= РаботаСЦветомКлиентСервер.HexВЦвет(МенеджерЗаписи.ОсновнойЦветФонаЗадач);
		ОсновнойЦветТекстаЗадач			= РаботаСЦветомКлиентСервер.HexВЦвет(МенеджерЗаписи.ОсновнойЦветТекстаЗадач);
		ОсновнойЦветФонаСуммирующихЗадач 	= РаботаСЦветомКлиентСервер.HexВЦвет(МенеджерЗаписи.ОсновнойЦветФонаСуммирующихЗадач);
		ОсновнойЦветТекстаСуммирующихЗадач	= РаботаСЦветомКлиентСервер.HexВЦвет(МенеджерЗаписи.ОсновнойЦветТекстаСуммирующихЗадач);
		ЦветФонаЗавершенныхЗадач		= РаботаСЦветомКлиентСервер.HexВЦвет(МенеджерЗаписи.ЦветФонаЗавершенныхЗадач);
		ЦветТекстаЗавершенныхЗадач		= РаботаСЦветомКлиентСервер.HexВЦвет(МенеджерЗаписи.ЦветТекстаЗавершенныхЗадач);
		ЦветФонаВыполняющихсяЗадач		= РаботаСЦветомКлиентСервер.HexВЦвет(МенеджерЗаписи.ЦветФонаВыполняющихсяЗадач);
		ЦветТекстаВыполняющихсяЗадач 	= РаботаСЦветомКлиентСервер.HexВЦвет(МенеджерЗаписи.ЦветТекстаВыполняющихсяЗадач);
	Иначе
		ЗаполнитьЦветаПоУмолчаниюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦветаПоУмолчаниюНаСервере() Экспорт
	
	ОсновнойЦветФонаЗадач 				= Новый Цвет(255, 255, 255);
	ОсновнойЦветТекстаЗадач 			= Новый Цвет(0, 0, 0);
	ОсновнойЦветФонаСуммирующихЗадач 	= Новый Цвет(255, 251, 240);
	ОсновнойЦветТекстаСуммирующихЗадач	= Новый Цвет(0, 0, 0);
	ЦветФонаЗавершенныхЗадач 			= Новый Цвет(240, 240, 240);
	ЦветТекстаЗавершенныхЗадач 	 		= Новый Цвет(0, 0, 0);
	ЦветФонаВыполняющихсяЗадач 			= Новый Цвет(211, 255, 226);
	ЦветТекстаВыполняющихсяЗадач 		= Новый Цвет(0, 0, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦветаПоУмолчанию() Экспорт
	
	ОсновнойЦветФонаЗадач 				= Новый Цвет(255, 255, 255);
	ОсновнойЦветТекстаЗадач 			= Новый Цвет(0, 0, 0);
	ОсновнойЦветФонаСуммирующихЗадач 	= Новый Цвет(255, 251, 240);
	ОсновнойЦветТекстаСуммирующихЗадач	= Новый Цвет(0, 0, 0);
	ЦветФонаЗавершенныхЗадач 			= Новый Цвет(240, 240, 240);
	ЦветТекстаЗавершенныхЗадач 	 		= Новый Цвет(0, 0, 0);
	ЦветФонаВыполняющихсяЗадач 			= Новый Цвет(211, 255, 226);
	ЦветТекстаВыполняющихсяЗадач 		= Новый Цвет(0, 0, 0);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЦветаНаСервере()
	
	МенеджерЗаписи								= РегистрыСведений.НастройкиПроектов.СоздатьМенеджерЗаписи();
   	МенеджерЗаписи.Проект						= Объект.Проект;
   	МенеджерЗаписи.Прочитать();
	
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		СохранитьПроектНаСервере();
		МенеджерЗаписи							= РегистрыСведений.НастройкиПроектов.СоздатьМенеджерЗаписи();
	   	МенеджерЗаписи.Проект					= Объект.Проект;
	   	МенеджерЗаписи.Прочитать();
	КонецЕсли;
	
	МенеджерЗаписи.ОсновнойЦветФонаЗадач		= РаботаСЦветомКлиентСервер.ЦветВHex(ОсновнойЦветФонаЗадач);
	МенеджерЗаписи.ОсновнойЦветТекстаЗадач		= РаботаСЦветомКлиентСервер.ЦветВHex(ОсновнойЦветТекстаЗадач);
	МенеджерЗаписи.ОсновнойЦветФонаСуммирующихЗадач 	= РаботаСЦветомКлиентСервер.ЦветВHex(ОсновнойЦветФонаСуммирующихЗадач);
	МенеджерЗаписи.ОсновнойЦветТекстаСуммирующихЗадач	= РаботаСЦветомКлиентСервер.ЦветВHex(ОсновнойЦветТекстаСуммирующихЗадач);
	МенеджерЗаписи.ЦветФонаЗавершенныхЗадач		= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветФонаЗавершенныхЗадач);
	МенеджерЗаписи.ЦветТекстаЗавершенныхЗадач	= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветТекстаЗавершенныхЗадач);
	МенеджерЗаписи.ЦветФонаВыполняющихсяЗадач	= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветФонаВыполняющихсяЗадач);
	МенеджерЗаписи.ЦветТекстаВыполняющихсяЗадач = РаботаСЦветомКлиентСервер.ЦветВHex(ЦветТекстаВыполняющихсяЗадач);
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура РаскраситьСтроку(Знач НомерСтроки) Экспорт
	ПроцентЗавершения = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиПроцентЗавершения);
	Если НЕ ЗначениеЗаполнено(ПроцентЗавершения) Тогда
		ПроцентЗавершения = 0;
	КонецЕсли;
	
	Если ПроцентЗавершения = 100 Тогда
		тдПроект.Область(НомерСтроки, 2, НомерСтроки, НомерКолонкиДиаграммыГанта).ЦветФона 	 = ЦветФонаЗавершенныхЗадач;
		тдПроект.Область(НомерСтроки, 2, НомерСтроки, НомерКолонкиДиаграммыГанта).ЦветТекста = ЦветТекстаЗавершенныхЗадач;
	ИначеЕсли ЭтоСуммирующаяЗадача(НомерСтроки) Тогда
		тдПроект.Область(НомерСтроки, 2, НомерСтроки, НомерКолонкиДиаграммыГанта).ЦветФона 	 = ОсновнойЦветФонаСуммирующихЗадач;
		тдПроект.Область(НомерСтроки, 2, НомерСтроки, НомерКолонкиДиаграммыГанта).ЦветТекста = ОсновнойЦветТекстаСуммирующихЗадач;
	ИначеЕсли ПроцентЗавершения > 0 Тогда
		тдПроект.Область(НомерСтроки, 2, НомерСтроки, НомерКолонкиДиаграммыГанта).ЦветФона 	 = ЦветФонаВыполняющихсяЗадач;
		тдПроект.Область(НомерСтроки, 2, НомерСтроки, НомерКолонкиДиаграммыГанта).ЦветТекста = ЦветТекстаВыполняющихсяЗадач;
	Иначе
		тдПроект.Область(НомерСтроки, 2, НомерСтроки, НомерКолонкиДиаграммыГанта).ЦветФона 	 = ОсновнойЦветФонаЗадач;
		тдПроект.Область(НомерСтроки, 2, НомерСтроки, НомерКолонкиДиаграммыГанта).ЦветТекста = ОсновнойЦветТекстаЗадач;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаОпускатьсяВнизПриИзменении(Элемент)
	
	Если Объект.ПослеВводаОпускатьсяВниз Тогда
		тдПроект.НаправлениеПерехода = ТипНаправленияПереходаТабличногоДокумента.ПоСтрокам;
	Иначе
		тдПроект.НаправлениеПерехода = ТипНаправленияПереходаТабличногоДокумента.ПоКолонкам;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальноеЗаполнениеПроекта()
	Если НЕ ЗначениеЗаполнено(Объект.КоличествоРабочихЧасовВДне) Тогда
		Объект.КоличествоРабочихЧасовВДне = 8;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦветКолонок(ТекущийФильтр = Неопределено)
	
	тдПроект.Область(1, 1, 2, 20).ЦветФона = Новый Цвет(255, 251, 240);
	Для НомерКолонки = 2 По 20 Цикл
		тдПроект.Область(1, НомерКолонки, 2, НомерКолонки).Примечание.Текст = "";
	КонецЦикла;
	
	Если НЕ ТекущийФильтр = Неопределено Тогда
		Для Каждого ЭлементОтбора Из ТекущийФильтр.Отбор Цикл
			Если ЭлементОтбора.Использование = Истина Тогда
				Если ЭлементОтбора.Имя = "_" Тогда
					Продолжить;
				КонецЕсли;
				Если ЭлементОтбора.Имя = "НазваниеЗадачи" Тогда
					тдПроект.Область(1, НомерКолонкиНазвание, 2, НомерКолонкиНазвание).ЦветФона = Новый Цвет(255, 238, 192);
					тдПроект.Область(1, НомерКолонкиНазвание, 2, НомерКолонкиНазвание).Примечание.Текст = "" 
						+ ЭлементОтбора.ВидСравнения + " """ + ЭлементОтбора.Значение  + """";
				ИначеЕсли ЭлементОтбора.Имя = "Длит_Дн_" Тогда
					тдПроект.Область(1, НомерКолонкиДлительность, 2, НомерКолонкиДлительность).ЦветФона = Новый Цвет(255, 238, 192);
					тдПроект.Область(1, НомерКолонкиДлительность, 2, НомерКолонкиДлительность).Примечание.Текст = "" 
						+ ЭлементОтбора.ВидСравнения + " """ + ЭлементОтбора.Значение + НСтр("ru = ' дн.""'");
				ИначеЕсли ЭлементОтбора.Имя = "Начало" Тогда
					тдПроект.Область(1, НомерКолонкиНачало, 2, НомерКолонкиНачало).ЦветФона = Новый Цвет(255, 238, 192);
					тдПроект.Область(1, НомерКолонкиНачало, 2, НомерКолонкиНачало).Примечание.Текст = НСтр("ru = 'между '") 
						+ " """ + ЭлементОтбора.ЗначениеС  + НСтр("ru = '"" и ""'") +  ЭлементОтбора.ЗначениеПо  + """";
				ИначеЕсли ЭлементОтбора.Имя = "Окончание" Тогда
					тдПроект.Область(1, НомерКолонкиОкончание, 2, НомерКолонкиОкончание).ЦветФона = Новый Цвет(255, 238, 192);
					тдПроект.Область(1, НомерКолонкиОкончание, 2, НомерКолонкиОкончание).Примечание.Текст = НСтр("ru = 'между '") 
						+ " """ + ЭлементОтбора.ЗначениеС  + НСтр("ru = '"" и ""'") +  ЭлементОтбора.ЗначениеПо  + """";
				ИначеЕсли ЭлементОтбора.Имя = "_Завершения" Тогда
					тдПроект.Область(1, НомерКолонкиПроцентЗавершения, 2, НомерКолонкиПроцентЗавершения).ЦветФона = 
						Новый Цвет(255, 238, 192);
					тдПроект.Область(1, НомерКолонкиПроцентЗавершения, 2, НомерКолонкиПроцентЗавершения).Примечание.Текст = "" 
						+ ЭлементОтбора.ВидСравнения + " """ + ЭлементОтбора.Значение  + "%""";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДиаграммуГанта(Команда)
	
	ОтображатьДиаграммуГанта = НЕ ОтображатьДиаграммуГанта;
	ОбновлениеОтображения();
	ОбновитьДиаграмму();
	Модифицированность = Истина;
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеОтображения()
	
	Элементы.ЗнакМодифицированности.Видимость = Модифицированность;
	Элементы.ОтображатьДиаграммуГанта.Пометка = ОтображатьДиаграммуГанта;
	Попытка
		Элементы.НадписьИсполнительПоУмолчанию.Заголовок = 
			СтрШаблон(НСтр("ru = 'Ответственный по умолчанию (для новых задач): %1'"),
				Строка(?(ЗначениеЗаполнено(Объект.Проект.ОтветственныйЗаПроект), Объект.Проект.ОтветственныйЗаПроект, ТекущийПользовательСтрока)));
	Исключение
		Элементы.НадписьИсполнительПоУмолчанию.Заголовок = "";
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////////
// Взаимодействие с задачами произвольной конфигурации

#Область ВзаимодействиеСзадачамиПроизвольнойКонфигурации

&НаКлиенте
Процедура НастроитьОбработкуПодКонфигурацию()
	
	Элементы.ГруппаПапкаСЗадачамиИОтветственный.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроектПоЗадачамИБНаСервере()
		
	ТаблицаСвязей.Очистить();
	ТаблицаРесурсовЗадачи.Очистить();
	ТабличноеПолеРесурсы.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РесурсыПроектов.GUID_Ресурса КАК GUID_Ресурса,
		|	РесурсыПроектов.СтоимостьЗатрат КАК СтоимостьЗатрат,
		|	РесурсыПроектов.ЗатратыНаИспользование КАК ЗатратыНаИспользование,
		|	РесурсыПроектов.ОтпускнаяСтоимость КАК ОтпускнаяСтоимость,
		|	РесурсыПроектов.КраткоеНазвание КАК КраткоеНазвание,
		|	РесурсыПроектов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РесурсыПроектов.НазваниеРесурса КАК НазваниеРесурса,
		|	РесурсыПроектов.ТипРесурса КАК ТипРесурса,
		|	РесурсыПроектов.НомерСтрокиЗаписи КАК НомерСтрокиЗаписи
		|ИЗ
		|	РегистрСведений.РесурсыПроектов КАК РесурсыПроектов
		|ГДЕ
		|	РесурсыПроектов.Проект = &Проект
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиЗаписи";
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТабличноеПолеРесурсы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.GUID_Ресурса) Тогда
			НоваяСтрока.GUID_Ресурса = Новый УникальныйИдентификатор;
		КонецЕсли;		
	КонецЦикла;
	
	Результат = ПолучитьРезультатЗапросаПоЗадачамПапки(Объект.ПапкаСЗадачами);
	КоличествоЗадач = Результат.Выбрать().Количество();
	
	ПоследняяСтрока = КоличествоЗадач + 5;
	НастроитьСтрокуНаСервере(3, ПоследняяСтрока, Истина);
	ДеревоЗначений = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	СоответствиеНомеровСтрокПоСсылкам  = Новый Соответствие;
	
	ТекущийНомерСтроки = 2;
	ОбойтиРезультатЗапросаПоЗадачам(ТекущийНомерСтроки, ДеревоЗначений.Строки, СоответствиеНомеровСтрокПоСсылкам);
	
	Индекс = 0;
	Для Каждого КлючИЗначение Из СоответствиеНомеровСтрокПоСсылкам Цикл
		
		Индекс = Индекс + 1;
		
		Строка = Число(КлючИЗначение.Значение);
		Задача = КлючИЗначение.Ключ;
				
		Выборка = РегистрыСведений.СвязанныеПроектныеЗадачи.Выбрать(Новый Структура("ПроектнаяЗадача", Задача));
		
		Пока Выборка.Следующий() Цикл
			НомерСвязаннойЗадачи = СоответствиеНомеровСтрокПоСсылкам.Получить(Выборка.СвязаннаяЗадача);
			Если ЗначениеЗаполнено(НомерСвязаннойЗадачи) Тогда
				СтрокаТаблицы 			= ТаблицаСвязей.Добавить();
				СтрокаТаблицы.Начало 	= НомерСвязаннойЗадачи;
				СтрокаТаблицы.ВидСвязи 	= ПолучитьЧисловойВидСвязи(Выборка.ВидСвязи);
				Попытка
					СтрокаТаблицы.Запаздывание = Выборка.Запаздывание;
				Исключение
					СтрокаТаблицы.Запаздывание = 0;
				КонецПопытки;
				СтрокаТаблицы.Конец = Строка;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьЧисловойВидСвязи(Знач ВидСвязи) Экспорт
	
	Попытка
		Если ВидСвязи = Перечисления.ВидыСвязей.ОН Тогда
			Возврат 0;
		ИначеЕсли ВидСвязи = Перечисления.ВидыСвязей.ОО Тогда
			Возврат 1;
		ИначеЕсли ВидСвязи = Перечисления.ВидыСвязей.НО Тогда
			Возврат 2;
		ИначеЕсли ВидСвязи = Перечисления.ВидыСвязей.НН Тогда
			Возврат 3;
		Иначе
			Возврат 0;
		КонецЕсли;
	Исключение
		Возврат 0;
	Конецпопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьВидСвязиПеречислением(Знач ВидСвязи) Экспорт
	
	Попытка
		Если ВидСвязи = 0 Тогда
			Возврат Перечисления.ВидыСвязей.ОН;
		ИначеЕсли ВидСвязи = 1 Тогда
			Возврат Перечисления.ВидыСвязей.ОО;
		ИначеЕсли ВидСвязи = 2 Тогда
			Возврат Перечисления.ВидыСвязей.НО;
		ИначеЕсли ВидСвязи = 3 Тогда
			Возврат Перечисления.ВидыСвязей.НН;
		Иначе
			Возврат Перечисления.ВидыСвязей.ОН;
		КонецЕсли;
	Исключение
		Возврат Перечисления.ВидыСвязей.ОН;
	Конецпопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРезультатЗапросаПоЗадачамПапки(Знач пПапкаСЗадачами)   Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	*
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Родитель В ИЕРАРХИИ(&ПапкаЗадач)
		|	И ПроектныеЗадачи.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Группа ИЕРАРХИЯ УБЫВ,
		|	Порядок ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ПапкаЗадач", пПапкаСЗадачами);
	
	Возврат Запрос.Выполнить();

КонецФункции

&НаСервере
Процедура ОбойтиРезультатЗапросаПоЗадачам(ТекущийНомерСтроки, Строки, СоответствиеНомеровСтрокПоСсылкам)
	
	Для Каждого Строка Из  Строки Цикл
				
		ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
		СоответствиеНомеровСтрокПоСсылкам.Вставить(Строка.ссылка, ТекущийНомерСтроки);
		
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиЗадача, ТекущийНомерСтроки, 
			НомерКолонкиЗадача).Значение = Строка.Ссылка;	 	
		
		GUID_Задачи = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиGUID, ТекущийНомерСтроки, НомерКолонкиGUID).Текст;
		
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиНазвание, ТекущийНомерСтроки,
			НомерКолонкиНазвание).Текст = Строка.Наименование;
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиНазвание, ТекущийНомерСтроки, 
			НомерКолонкиНазвание).Отступ = (Строка.Уровень() * 2) + 2;
		
		Если ТекущийНомерСтроки > 4 Тогда
			тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиРодитель, ТекущийНомерСтроки, 
				НомерКолонкиРодитель).Текст = СоответствиеНомеровСтрокПоСсылкам.Получить(Строка.Родитель);
		Иначе
			тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиРодитель, ТекущийНомерСтроки, 
				НомерКолонкиРодитель).Текст = "";
		КонецЕсли;
		
		ДатаНачалаПлан = Строка.ДатаНачалаПлан;	 	
		ДатаЗавершенияПлан = Строка.ДатаЗавершенияПлан;	 	
		Попытка
			Часов	= Число(ИзСтрокиВЧисло(Сред(Строка.ПОИ, 4, 2)));
    		Дней	= Число(ИзСтрокиВЧисло(Лев(Строка.ПОИ, 2)));
			Минут	= Число(ИзСтрокиВЧисло(Прав(Строка.ПОИ, 2)));
			Длительность = ((Дней * 3600 * 24) + (Часов * 3600) + (Минут * 60)) / (3600 * 24);
			Если Длительность = 0 Тогда
				Длительность = 3600 * 24;
			КонецЕсли;
		Исключение
			Длительность = 3600 * 24;
		КонецПопытки;
		
		Если НЕ ЗначениеЗаполнено(ДатаНачалаПлан) И НЕ ЗначениеЗаполнено(ДатаЗавершенияПлан) Тогда
			ДатаНачалаПлан = НачалоДня(ТекущаяДатаСеанса());
			// + 1 день
			ДатаЗавершенияПлан = ДатаНачалаПлан + Длительность;
		ИначеЕсли ЗначениеЗаполнено(ДатаНачалаПлан) И НЕ ЗначениеЗаполнено(ДатаЗавершенияПлан) 
			ИЛИ ДатаНачалаПлан = ДатаЗавершенияПлан Тогда
			// + 1 день
			ДатаЗавершенияПлан = ДатаНачалаПлан+Длительность;
		ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачалаПлан) И ЗначениеЗаполнено(ДатаЗавершенияПлан) Тогда
			// - 1 день
			ДатаНачалаПлан = ДатаЗавершенияПлан - Длительность;
		КонецЕсли;
		
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиНачало, ТекущийНомерСтроки,
			НомерКолонкиНачало).Значение = ДатаНачалаПлан;
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиОкончание, ТекущийНомерСтроки, 
			НомерКолонкиОкончание).Значение = ДатаЗавершенияПлан;
		
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиВеха, ТекущийНомерСтроки, НомерКолонкиВеха).Значение = Строка.Веха;	 	
					
		Если Строка.Завершена Тогда
			тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиПроцентЗавершения, ТекущийНомерСтроки, 
				НомерКолонкиПроцентЗавершения).Значение = 100;	 	
			
			тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиНачалоФакт, ТекущийНомерСтроки,
				НомерКолонкиНачалоФакт).Значение = Строка.ДатаНачалаФакт;
			тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиОкончаниеФакт, ТекущийНомерСтроки, 
				НомерКолонкиОкончаниеФакт).Значение = Строка.ДатаЗавершенияФакт;
		КонецЕсли;
		
		// Денежные показатели
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиЗатраты, ТекущийНомерСтроки,
			НомерКолонкиЗатраты).Значение = Строка.СебестоимостьПлан;	 	
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиЗатратыФакт, ТекущийНомерСтроки,
			НомерКолонкиЗатратыФакт).Значение = Строка.СебестоимостьФакт;
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиДопЗатраты, ТекущийНомерСтроки,
			НомерКолонкиДопЗатраты).Значение = Строка.СебестоимостьПланДоп;
		
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиСтоимость, ТекущийНомерСтроки,
			НомерКолонкиСтоимость).Значение = Строка.ОтпускнаяСтоимостьПлан;
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиСтоимостьФакт, ТекущийНомерСтроки,
			НомерКолонкиСтоимостьФакт).Значение = Строка.ОтпускнаяСтоимостьФакт;
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиДопСтоимость, ТекущийНомерСтроки,
			НомерКолонкиДопСтоимость).Значение = Строка.ОтпускнаяСтоимостьПланДоп;
		
		// Ресурсы
		НаборТаблицаРесурсов = РегистрыСведений.РесурсыПроектныхЗадач.СоздатьНаборЗаписей();
   		НаборТаблицаРесурсов.Отбор.ПроектнаяЗадача.Установить(Строка.Ссылка);
   		НаборТаблицаРесурсов.Прочитать();
		пТаблицаРесурсовЗадачи = НаборТаблицаРесурсов.Выгрузить(, "GUID_Ресурса, Единицы, НазваниеРесурса");
		
		ПредставлениеРесурсов = "";
		Для Каждого СтрокаРесурсов Из пТаблицаРесурсовЗадачи Цикл
			
			НоваяСтрокаРесурсов = ТаблицаРесурсовЗадачи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРесурсов, СтрокаРесурсов);
			НоваяСтрокаРесурсов.GUID_Задачи = GUID_Задачи;
			
			Если ЗначениеЗаполнено(СтрокаРесурсов.КраткоеНазвание) Тогда
				ПредставлениеРесурсов = ПредставлениеРесурсов + СтрокаРесурсов.КраткоеНазвание + ";";
			КонецЕсли;
		КонецЦикла;
		
		Если СтрДлина(ПредставлениеРесурсов) > 0 Тогда
			ПредставлениеРесурсов = Лев(ПредставлениеРесурсов, СтрДлина(ПредставлениеРесурсов)-1);
		КонецЕсли;
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиРесурсыПредставление, ТекущийНомерСтроки,
			НомерКолонкиРесурсыПредставление).Текст = ПредставлениеРесурсов;
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиРесурсы, ТекущийНомерСтроки, 
			НомерКолонкиРесурсы).Текст = ПредставлениеРесурсов;

		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиОписание,ТекущийНомерСтроки, 
			НомерКолонкиОписание).Текст = Строка.Ссылка.Описание;
		
		Если Строка.Строки.Количество() > 0 Тогда
			ОбойтиРезультатЗапросаПоЗадачам(ТекущийНомерСтроки, Строка.Строки, СоответствиеНомеровСтрокПоСсылкам);	
		КонецЕсли;
		 
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПроверитьУдаленныеЗадачи(Знач МассивЗадачПроекта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроектныеЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Проект = &Проект 
		|	И ПроектныеЗадачи.Ссылка НЕ В (&МассивЗадачПроекта)
		|	И ПроектныеЗадачи.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Группа ИЕРАРХИЯ УБЫВ,
		|	Порядок ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Запрос.УстановитьПараметр("МассивЗадачПроекта", МассивЗадачПроекта);
	
	Возврат Запрос.Выполнить();

КонецФункции

&НаКлиенте
Процедура ЗаполнитьПроектПоЗадачамИБ(Команда)
	
	Если Модифицированность И НеСпрашиватьОСохраненииПроектаВФайл <> Истина Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПроектПоЗадачамИБЗавершение", ЭтаФорма), 
			?(ЗначениеЗаполнено(ВыходнойФайлКраткоеИмя), 
				СтрШаблон(НСтр("ru = 'Сохранить изменения проекта в ""%1""?'"), ВыходнойФайлКраткоеИмя),
				НСтр("ru = 'Сохранить проект в файл?'")),
				РежимДиалогаВопрос.ДаНетОтмена);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьПроектПоЗадачамИБФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПроектПоЗадачамИБЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьПроект();
	КонецЕсли;
	Модифицированность = Ложь;
	
	ЗаполнитьПроектПоЗадачамИБФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПроектПоЗадачамИБФрагмент()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПапкаСЗадачами) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Укажите папку с задачами'"));
		ТекущийЭлемент = Элементы.ПапкаСЗадачами;
		Возврат;
	КонецЕсли;
	
	ВывестиСостояние(НСтр("ru = 'Очистка строк'"));
	Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(4, 2, ПоследняяСтрока, НомерКолонкиЗадача);
	УдалитьСтроки(Ложь);
	
	ВывестиСостояние(НСтр("ru = 'Вычитка из информационной базы'"));
	
	ЗаполнитьПроектПоЗадачамИБНаСервере();
	
	БылоПереключениеНаГлавнуюСтраницу = Истина;
	
	ОбновитьИтоги();
	
	Для НомерСтроки = 3 По ПоследняяСтрока Цикл
		РаскраситьСтроку(НомерСтроки);
	КонецЦикла;
	
	РоднаяПапкаЗадач = Объект.ПапкаСЗадачами;

КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////
// Работа с предшественниками

#Область РаботаСПредшественниками

&НаКлиенте
Функция ПолучитьСписокПредшественников(Знач Строка) Экспорт 
	
	СписокПредшественников = ТаблицаСвязей.НайтиСтроки(Новый Структура("Конец", Строка));
	Возврат СписокПредшественников;

КонецФункции

&НаКлиенте
Функция ПолучитьСписокСледующихЗадачПоСвязям(Знач Строка, Знач АльтернативныйСпособ = Ложь) Экспорт 
	
	СписокСледующихЗадач = ТаблицаСвязей.НайтиСтроки(Новый Структура("Начало", Строка));
	Возврат СписокСледующихЗадач;
	
КонецФункции

&НаКлиенте
Функция ПроверитьСтрокуВПредшественниках(Знач ИсходнаяСтрокаСПредшественниками, Знач ИскомаяСтрока) Экспорт
	
	Возврат (НайтиСтрокуВПредшественниках(ИсходнаяСтрокаСПредшественниками, ИскомаяСтрока) <> Истина);
	
КонецФункции

&НаКлиенте
Функция НайтиСтрокуВПредшественниках(Знач ИсходнаяСтрокаСПредшественниками, Знач ИскомаяСтрока) Экспорт
	
	СписокПредшественников = ТаблицаСвязей.НайтиСтроки(Новый Структура("Начало, Конец", ИскомаяСтрока, 
		ИсходнаяСтрокаСПредшественниками));
	Возврат СписокПредшественников.Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьСтрокуВПредшественниках(Знач Предшественник, Знач УдаляемаяСтрока) Экспорт
	
	СписокПредшественников = ТаблицаСвязей.НайтиСтроки(Новый Структура("Начало, Конец", Предшественник, УдаляемаяСтрока));
	Для Каждого СтрокаТаблицы Из СписокПредшественников Цикл
		ТаблицаСвязей.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// Сохранение и открытие проекта

#Область СохранениеИОткрытиеПроекта

&НаСервере
Процедура СохранитьПроектНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеНомеровСтрокПоСсылкам    = Новый Соответствие;
	СоответствиеНомеровСсылкамПоСтрокам  = Новый Соответствие;
	СоответствиеСвязей  			     = Новый Соответствие;
	
	#Область СохранениеЗадачПроектов
	
	НачатьТранзакцию();
	Попытка	
		
		// Ресурсы проекта.
		НаборЗаписейРесурсовПроекта = РегистрыСведений.РесурсыПроектов.СоздатьНаборЗаписей();
		НаборЗаписейРесурсовПроекта.Отбор.Проект.Установить(Объект.Проект);
		НаборЗаписейРесурсовПроекта.Прочитать();
		НаборЗаписейРесурсовПроекта.Очистить();
		нпп = 0;	
		Для Каждого Строки Из ТабличноеПолеРесурсы Цикл
			НоваяЗапись = НаборЗаписейРесурсовПроекта.Добавить();
			НоваяЗапись.Проект = Объект.Проект;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строки);
			Если НЕ ЗначениеЗаполнено(НоваяЗапись.GUID_Ресурса) Тогда
				НоваяЗапись.GUID_Ресурса = Новый УникальныйИдентификатор;
			КонецЕсли;
			НоваяЗапись.НомерСтрокиЗаписи = нпп;
			нпп = нпп + 1;
		КонецЦикла;
		НаборЗаписейРесурсовПроекта.Записать();
		
		// Записываем задачи
		МассивЗадачПроекта 	= Новый Массив;
		Для ТекущийНомерСтроки = 3 По ПоследняяСтрока Цикл
			
			ОбластьНазвание = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиНазвание, ТекущийНомерСтроки, 
				НомерКолонкиНазвание);
			Описание 		= тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиОписание, ТекущийНомерСтроки, 
				НомерКолонкиОписание).Текст;
			ОбластьЗадача   = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиЗадача, ТекущийНомерСтроки, 
				НомерКолонкиЗадача);
			
			Если НЕ ЗначениеЗаполнено(ОбластьНазвание.Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбластьЗадача.Значение) Тогда
				Попытка
					ЗадачаОбъект = ОбластьЗадача.Значение.ПолучитьОбъект();
					ЗадачаОбъект.Описание = Описание;
				Исключение
					ЗадачаОбъект = Справочники.ПроектныеЗадачи.СоздатьЭлемент();
					ЗадачаОбъект.Автор = Пользователи.ТекущийПользователь();
					
					ЗадачаОбъект.ДатаПостановки = ТекущаяДатаСеанса();
					
					Если ЗначениеЗаполнено(Объект.Проект.ОтветственныйЗаПроект) Тогда
						ЗадачаОбъект.Исполнитель = Объект.Проект.ОтветственныйЗаПроект;
					Иначе
						ЗадачаОбъект.Исполнитель = Пользователи.ТекущийПользователь();
					КонецЕсли;
					
					Если СтрДлина(ОбластьНазвание.Текст) > 150 Тогда
		            	ЗадачаОбъект.Описание = ОбластьНазвание.Текст + Символы.ПС + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" 
							+ Символы.ПС + Описание;
					Иначе
						ЗадачаОбъект.Описание = Описание;
					КонецЕсли;
				КонецПопытки;
			Иначе
				ЗадачаОбъект 				= Справочники.ПроектныеЗадачи.СоздатьЭлемент();
				ЗадачаОбъект.Автор 			= Пользователи.ТекущийПользователь();
				ЗадачаОбъект.ДатаПостановки = ТекущаяДатаСеанса();
				
				Если ЗначениеЗаполнено(Объект.Проект.ОтветственныйЗаПроект) Тогда
					ЗадачаОбъект.Исполнитель = Объект.Проект.ОтветственныйЗаПроект;
				Иначе
					ЗадачаОбъект.Исполнитель = Пользователи.ТекущийПользователь();
				КонецЕсли;
				
				Если СтрДлина(ОбластьНазвание.Текст) > 150 Тогда
	            	ЗадачаОбъект.Описание = ОбластьНазвание.Текст + Символы.ПС + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" 
						+ Символы.ПС + Описание;
				Иначе
					ЗадачаОбъект.Описание = Описание;
				КонецЕсли;
			КонецЕсли;
			
			ЗадачаОбъект.Проект				= Объект.Проект;
			ЗадачаОбъект.Порядок 			= ТекущийНомерСтроки * 10;
			ЗадачаОбъект.Наименование 		= СтрЗаменить(ОбластьНазвание.Текст, "...", "");
			
			Если ЗначениеЗаполнено(ЗадачаОбъект.Описание) Тогда
				ЗадачаОбъект.Наименование = ЗадачаОбъект.Наименование + "...";
			КонецЕсли;
			
			ЗадачаОбъект.Группа		  		= (тдПроект.Область(ТекущийНомерСтроки + 1, НомерКолонкиНазвание,ТекущийНомерСтроки + 1,
				НомерКолонкиНазвание).Отступ > ОбластьНазвание.Отступ);
			
			ЗадачаОбъект.ДатаНачалаПлан 	= тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиНачало, ТекущийНомерСтроки, 
				НомерКолонкиНачало).Значение;
			ЗадачаОбъект.ДатаЗавершенияПлан = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиОкончание,ТекущийНомерСтроки, 
				НомерКолонкиОкончание).Значение;
			
			ЗадачаОбъект.ДатаНачалаФакт 	= тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиНачалоФакт, ТекущийНомерСтроки, 
				НомерКолонкиНачалоФакт).Значение;
			ЗадачаОбъект.ДатаЗавершенияФакт = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиОкончаниеФакт, ТекущийНомерСтроки, 
				НомерКолонкиОкончаниеФакт).Значение;
			
			Если ЗадачаОбъект.ДатаНачалаПлан < Дата(1990, 1, 1) ИЛИ ЗадачаОбъект.ДатаНачалаПлан > Дата(2100, 1, 1) Тогда
				ЗадачаОбъект.ДатаНачалаПлан = Дата('00010101');
			КонецЕсли;
			
			Если ЗадачаОбъект.ДатаЗавершенияПлан < Дата(1990, 1, 1) ИЛИ ЗадачаОбъект.ДатаЗавершенияПлан > Дата(2100, 1, 1) Тогда
				ЗадачаОбъект.ДатаЗавершенияПлан = Дата('00010101');
			КонецЕсли;
			
			ЗадачаОбъект.Завершена = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиПроцентЗавершения, ТекущийНомерСтроки, 
				НомерКолонкиПроцентЗавершения).Значение = 100;
			ЗадачаОбъект.ПроцентЗавершения = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиПроцентЗавершения, ТекущийНомерСтроки, 
				НомерКолонкиПроцентЗавершения).Значение;
			ЗадачаОбъект.Веха = (НЕ ЗадачаОбъект.Группа) И тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиВеха, 
				ТекущийНомерСтроки, НомерКолонкиВеха).Значение;
				
			ЗадачаОбъект.ДатаОграничения = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиДатаОграничения, ТекущийНомерСтроки, 
				НомерКолонкиДатаОграничения).Значение;
			ЗадачаОбъект.ВидОграничения = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиВидОграничения, ТекущийНомерСтроки, 
				НомерКолонкиВидОграничения).Значение;
			
			ТекРодитель = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиРодитель, ТекущийНомерСтроки, НомерКолонкиРодитель).Текст;
			Если НЕ ЗначениеЗаполнено(ТекРодитель) Тогда
				ЗадачаОбъект.Родитель = Объект.ПапкаСЗадачами;
			Иначе
				ЗадачаОбъект.Родитель = тдПроект.Область(Число(ТекРодитель), НомерКолонкиЗадача, Число(ТекРодитель), 
					НомерКолонкиЗадача).Значение;
				Если ((НЕ РоднаяПапкаЗадач = Объект.ПапкаСЗадачами) И ЗадачаОбъект.Родитель = РоднаяПапкаЗадач)Тогда
					ЗадачаОбъект.Родитель = Объект.ПапкаСЗадачами;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЗадачаОбъект.Родитель) Тогда
				ЗадачаОбъект.Родитель = Объект.ПапкаСЗадачами;
			КонецЕсли;
			
			ЗадачаОбъект.СебестоимостьПлан = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиЗатраты, ТекущийНомерСтроки, 
				НомерКолонкиЗатраты).Значение;
			ЗадачаОбъект.СебестоимостьФакт = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиЗатратыФакт, ТекущийНомерСтроки, 
				НомерКолонкиЗатратыФакт).Значение;
			ЗадачаОбъект.СебестоимостьПланДоп = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиДопЗатраты, ТекущийНомерСтроки, 
				НомерКолонкиДопЗатраты).Значение;
			
			ЗадачаОбъект.ОтпускнаяСтоимостьПлан = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиСтоимость, ТекущийНомерСтроки, 
				НомерКолонкиСтоимость).Значение;
			ЗадачаОбъект.ОтпускнаяСтоимостьФакт = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиСтоимостьФакт, ТекущийНомерСтроки, 
				НомерКолонкиСтоимостьФакт).Значение;
			ЗадачаОбъект.ОтпускнаяСтоимостьПланДоп = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиДопСтоимость, ТекущийНомерСтроки, 
				НомерКолонкиДопСтоимость).Значение;
			
			ЗадачаОбъект.Записать();
			
			ОбластьЗадача.Значение = ЗадачаОбъект.Ссылка;
			СоответствиеНомеровСтрокПоСсылкам.Вставить(ЗадачаОбъект.Ссылка, ТекущийНомерСтроки);
			СоответствиеНомеровСсылкамПоСтрокам.Вставить(ТекущийНомерСтроки, ЗадачаОбъект.Ссылка);
			СоответствиеСвязей.Вставить(ЗадачаОбъект.Ссылка, тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиПредшествинники, 
				ТекущийНомерСтроки, НомерКолонкиПредшествинники).Текст);
			
	        МассивЗадачПроекта.Добавить(ЗадачаОбъект.Ссылка);
			
			// Ресурсы задач проектов
			НаборЗаписейРесурсовЗадачи = РегистрыСведений.РесурсыПроектныхЗадач.СоздатьНаборЗаписей();
			НаборЗаписейРесурсовЗадачи.Отбор.ПроектнаяЗадача.Установить(ЗадачаОбъект.Ссылка);
			НаборЗаписейРесурсовЗадачи.Прочитать();
			НаборЗаписейРесурсовЗадачи.Очистить();
			Значение = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиGUID, ТекущийНомерСтроки, НомерКолонкиGUID).Текст;
			Если ПустаяСтрока(Значение) Тогда
				GUID_Строки = Новый УникальныйИдентификатор();
			Иначе
				GUID_Строки = Новый УникальныйИдентификатор(Значение);
			КонецЕсли;
			пТаблицаРесурсовЗадачи = ТаблицаРесурсовЗадачи.НайтиСтроки(Новый Структура("GUID_Задачи", GUID_Строки));
			Для Каждого СтрокаСРесурсом Из пТаблицаРесурсовЗадачи Цикл
				ЗаписьНабора = НаборЗаписейРесурсовЗадачи.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаСРесурсом);
				ЗаписьНабора.ПроектнаяЗадача = ЗадачаОбъект.Ссылка;
			КонецЦикла;
			НаборЗаписейРесурсовЗадачи.Записать();
			
		КонецЦикла;
		
		// Связи
		ТекущийНомерСтроки = 0;
		Для Каждого КлючИЗначение Из СоответствиеСвязей Цикл
			ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
				
			НаборЗаписейРегистра = РегистрыСведений.СвязанныеПроектныеЗадачи.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.ПроектнаяЗадача.Установить(КлючИЗначение.Ключ);
			НаборЗаписейРегистра.Очистить();
			СписокПредшественников = ТаблицаСвязей.НайтиСтроки(Новый Структура("Конец", ТекущийНомерСтроки));
			
			Для Каждого ЭлементЗначения Из СписокПредшественников Цикл
				Если ЗначениеЗаполнено(СоответствиеНомеровСсылкамПоСтрокам.Получить(Число(ЭлементЗначения.Начало))) Тогда
					Запись = НаборЗаписейРегистра.Добавить();
					Запись.ПроектнаяЗадача = КлючИЗначение.Ключ;
					Запись.СвязаннаяЗадача = СоответствиеНомеровСсылкамПоСтрокам.Получить(Число(ЭлементЗначения.Начало));
					Попытка
						Запись.Запаздывание = ЭлементЗначения.Запаздывание;
						Запись.ВидСвязи     = ПолучитьВидСвязиПеречислением(ЭлементЗначения.ВидСвязи);
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			НаборЗаписейРегистра.Записать();
		КонецЦикла;
		
		РезультатЗапроса = ПроверитьУдаленныеЗадачи(МассивЗадачПроекта);
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаЗадач = РезультатЗапроса.Выбрать();
			Индекс = 0;
			Пока ВыборкаЗадач.Следующий() Цикл
				ЗадачаОбъект = ВыборкаЗадач.Ссылка.ПолучитьОбъект();
				ЗадачаОбъект.ПометкаУдаления = Истина;
				ЗадачаОбъект.Записать();				
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
	
	#КонецОбласти
	
	#Область СохранениеНастроек
	
	СтруктураПараметров = Новый Структура;
	
	пСоответствиеКартинокПоОбластям = Новый Соответствие(СоответствиеКартинокПоОбластям);
	СтруктураПараметров.Вставить("СоответствиеКартинокПоОбластям", пСоответствиеКартинокПоОбластям);
	
	пСоответствиеОбластейПоКартинкам = Новый Соответствие(СоответствиеОбластейПоКартинкам);
	СтруктураПараметров.Вставить("СоответствиеОбластейПоКартинкам", пСоответствиеОбластейПоКартинкам);
		
	ИмяВерменногоФайла 	= ПолучитьИмяВременногоФайла();
	тдПроект.Записать(ИмяВерменногоФайла);
	Макет 				= Новый ДвоичныеДанные(ИмяВерменногоФайла);
	
	СтруктураПараметров.Вставить("Макет", Макет);
		
	СтруктураПараметров.Вставить("ЦветаБылиСохранены", Истина);
	
	// Таблицы
	//СтруктураПараметров.Вставить("ТабличноеПолеРесурсы", ТабличноеПолеРесурсы.Выгрузить());
	НаборТаблицаРесурсов						= РегистрыСведений.РесурсыПроектов.СоздатьНаборЗаписей();
   	НаборТаблицаРесурсов.Отбор.Проект.Установить(Объект.Проект);
   	НаборТаблицаРесурсов.Прочитать();
	НаборТаблицаРесурсов.Очистить();
	НомерСтрокиЗаписи = 0;
	Для Каждого Строки Из ТабличноеПолеРесурсы Цикл
		НоваяЗапись = НаборТаблицаРесурсов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строки);
		НоваяЗапись.Проект = Объект.Проект;
		НоваяЗапись.НомерСтрокиЗаписи = НомерСтрокиЗаписи;
		НомерСтрокиЗаписи = НомерСтрокиЗаписи + 1;
	КонецЦикла;
	НаборТаблицаРесурсов.Записать();
	
	СтруктураПараметров.Вставить("Фильтр", Фильтр.Выгрузить());
	СтруктураПараметров.Вставить("ТекущийФильтрОтбор", ТекущийФильтрОтбор.Выгрузить());
	СтруктураПараметров.Вставить("ТаблицаСвязей", ЗначениеВСтрокуВнутр(ТаблицаСвязей.Выгрузить()));
	СтруктураПараметров.Вставить("ТаблицаРесурсовЗадачи", ЗначениеВСтрокуВнутр(ТаблицаРесурсовЗадачи.Выгрузить()));
	
	МенеджерЗаписи 								= РегистрыСведений.НастройкиПроектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Проект 						= Объект.Проект;
	МенеджерЗаписи.Настройки 					= Новый ХранилищеЗначения(СтруктураПараметров);
	МенеджерЗаписи.РежимОтображения 			= РежимОтображения;
	МенеджерЗаписи.СубботаРабочий				= Объект.СубботаРабочий;
	МенеджерЗаписи.ВоскресеньеРабочий			= Объект.ВоскресеньеРабочий;
	МенеджерЗаписи.КоличествоРабочихЧасовВДне	= Объект.КоличествоРабочихЧасовВДне;
	
	МенеджерЗаписи.ПоследняяСтрока 				= ПоследняяСтрока;
	МенеджерЗаписи.НомерКолонкиНазвание 		= НомерКолонкиНазвание;
	МенеджерЗаписи.НомерКолонкиНачало 			= НомерКолонкиНачало;
	МенеджерЗаписи.НомерКолонкиОкончание 		= НомерКолонкиОкончание;
	МенеджерЗаписи.НомерКолонкиДлительность 	= НомерКолонкиДлительность;
	МенеджерЗаписи.НомерКолонкиПроцентЗавершения = НомерКолонкиПроцентЗавершения;
	МенеджерЗаписи.НомерКолонкиДиаграммыГанта 	= НомерКолонкиДиаграммыГанта;
	МенеджерЗаписи.НомерКолонкиРодитель 		= НомерКолонкиРодитель;
	МенеджерЗаписи.НомерКолонкиИмяРисунка 		= НомерКолонкиИмяРисунка;
	МенеджерЗаписи.НомерКолонкиЗадача 			= НомерКолонкиЗадача;
	МенеджерЗаписи.НомерКолонкиПредшествинники 	= НомерКолонкиПредшествинники;
	МенеджерЗаписи.НомерКолонкиНачалоПриРучномВводе = НомерКолонкиНачалоПриРучномВводе;
	МенеджерЗаписи.НомерКолонкиРесурсыПредставление = НомерКолонкиРесурсыПредставление;
	МенеджерЗаписи.НомерКолонкиРесурсы 			= НомерКолонкиРесурсы;
	МенеджерЗаписи.НомерКолонкиЗатраты 			= НомерКолонкиЗатраты;
	МенеджерЗаписи.НомерКолонкиДопЗатраты 		= НомерКолонкиДопЗатраты;
	МенеджерЗаписи.НомерКолонкиОписание 		= НомерКолонкиОписание;
	МенеджерЗаписи.НомерКолонкиДатаОграничения 	= НомерКолонкиДатаОграничения;
	МенеджерЗаписи.НомерКолонкиВидОграничения 	= НомерКолонкиВидОграничения;
	МенеджерЗаписи.НомерКолонкиСтоимость 		= НомерКолонкиСтоимость;
	МенеджерЗаписи.НомерКолонкиДопСтоимость 	= НомерКолонкиДопСтоимость;
	МенеджерЗаписи.НомерКолонкиСтоимостьФакт 	= НомерКолонкиСтоимостьФакт;
	МенеджерЗаписи.НомерКолонкиЗатратыФакт 		= НомерКолонкиЗатратыФакт;
	МенеджерЗаписи.НомерКолонкиВеха 			= НомерКолонкиВеха;
	МенеджерЗаписи.НомерКолонкиGUID 			= НомерКолонкиGUID;
	
	МенеджерЗаписи.ИспользоватьАвтосохранение	= Объект.ИспользоватьАвтосохранение;
	МенеджерЗаписи.ПериодАвтосохранения			= Объект.ПериодАвтосохранения;
	МенеджерЗаписи.КоэффициентШириныКолонки		= КоэффициентШириныКолонки;
	МенеджерЗаписи.КоэффициентВысотыСтроки		= КоэффициентВысотыСтроки;
	МенеджерЗаписи.ПослеВводаОпускатьсяВниз		= Объект.ПослеВводаОпускатьсяВниз;
	МенеджерЗаписи.ТекущаяОбластьЛево			= тдПроект.ТекущаяОбласть.Лево;
	МенеджерЗаписи.ТекущаяОбластьПраво			= тдПроект.ТекущаяОбласть.Право;
	МенеджерЗаписи.ТекущаяОбластьНиз			= тдПроект.ТекущаяОбласть.Низ;
	МенеджерЗаписи.ТекущаяОбластьВерх			= тдПроект.ТекущаяОбласть.Верх;
	МенеджерЗаписи.ОтображатьДиаграммуГанта		= ОтображатьДиаграммуГанта;
	
	МенеджерЗаписи.ОсновнойЦветФонаЗадач		= РаботаСЦветомКлиентСервер.ЦветВHex(ОсновнойЦветФонаЗадач);
	МенеджерЗаписи.ОсновнойЦветТекстаЗадач		= РаботаСЦветомКлиентСервер.ЦветВHex(ОсновнойЦветТекстаЗадач);
	МенеджерЗаписи.ОсновнойЦветФонаСуммирующихЗадач 	= РаботаСЦветомКлиентСервер.ЦветВHex(ОсновнойЦветФонаСуммирующихЗадач);
	МенеджерЗаписи.ОсновнойЦветТекстаСуммирующихЗадач 	= РаботаСЦветомКлиентСервер.ЦветВHex(ОсновнойЦветТекстаСуммирующихЗадач);
	МенеджерЗаписи.ЦветФонаЗавершенныхЗадач		= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветФонаЗавершенныхЗадач);
	МенеджерЗаписи.ЦветТекстаЗавершенныхЗадач	= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветТекстаЗавершенныхЗадач);
	МенеджерЗаписи.ЦветФонаВыполняющихсяЗадач	= РаботаСЦветомКлиентСервер.ЦветВHex(ЦветФонаВыполняющихсяЗадач);
	МенеджерЗаписи.ЦветТекстаВыполняющихсяЗадач = РаботаСЦветомКлиентСервер.ЦветВHex(ЦветТекстаВыполняющихсяЗадач);
	МенеджерЗаписи.НачалоРабочегоДня			= Объект.НачалоРабочегоДня;
	
	МенеджерЗаписи.Записать(Истина);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьПроектНаСервере()
	
	ТаблицаСвязей.Очистить();
	ТаблицаРесурсовЗадачи.Очистить();
	
	#Область ОткрытиеНастроек
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.НастройкиПроектов КАК НастройкиПроектов
		|ГДЕ
		|	НастройкиПроектов.Проект = &Проект";
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураПараметров 				= Выборка.Настройки.Получить();
		РежимОтображения					= Выборка.РежимОтображения;
		Объект.СубботаРабочий 				= Выборка.СубботаРабочий;
		ВоскресеньеРабочий					= Выборка.ВоскресеньеРабочий;
		КоличествоРабочихЧасовВДне			= Выборка.КоличествоРабочихЧасовВДне;		
		
		ПоследняяСтрока 					= Выборка.ПоследняяСтрока;
		НомерКолонкиНазвание 				= Выборка.НомерКолонкиНазвание;
		НомерКолонкиНачало 					= Выборка.НомерКолонкиНачало;
		НомерКолонкиОкончание				= Выборка.НомерКолонкиОкончание;
		НомерКолонкиДлительность 			= Выборка.НомерКолонкиДлительность;
		НомерКолонкиПроцентЗавершения 		= Выборка.НомерКолонкиПроцентЗавершения;
		НомерКолонкиДиаграммыГанта 			= Выборка.НомерКолонкиДиаграммыГанта;
		НомерКолонкиРодитель 				= Выборка.НомерКолонкиРодитель;
		НомерКолонкиИмяРисунка 				= Выборка.НомерКолонкиИмяРисунка;
		НомерКолонкиПредшествинники		 	= Выборка.НомерКолонкиПредшествинники;
		НомерКолонкиНачалоПриРучномВводе 	= Выборка.НомерКолонкиНачалоПриРучномВводе;
		НомерКолонкиРесурсыПредставление 	= Выборка.НомерКолонкиРесурсыПредставление;
		НомерКолонкиРесурсы				 	= Выборка.НомерКолонкиРесурсы;
		НомерКолонкиЗатраты				 	= Выборка.НомерКолонкиЗатраты;
		НомерКолонкиДопЗатраты			 	= Выборка.НомерКолонкиДопЗатраты;
		НомерКолонкиЗадача		   		 	= Выборка.НомерКолонкиЗадача;
		НомерКолонкиОписание			 	= Выборка.НомерКолонкиОписание;
		НомерКолонкиДатаОграничения		 	= Выборка.НомерКолонкиДатаОграничения;
		НомерКолонкиВидОграничения		 	= Выборка.НомерКолонкиВидОграничения;
		НомерКолонкиСтоимость 				= Выборка.НомерКолонкиСтоимость;
		НомерКолонкиДопСтоимость 			= Выборка.НомерКолонкиДопСтоимость;
		НомерКолонкиСтоимостьФакт 			= Выборка.НомерКолонкиСтоимостьФакт;
		НомерКолонкиЗатратыФакт 			= Выборка.НомерКолонкиЗатратыФакт;
		НомерКолонкиВеха 					= Выборка.НомерКолонкиВеха;
		НомерКолонкиGUID 		 			= Выборка.НомерКолонкиGUID;
		
		КоэффициентШириныКолонки 			= Выборка.КоэффициентШириныКолонки;
		КоэффициентВысотыСтроки 			= Выборка.КоэффициентВысотыСтроки;
		Объект.ПослеВводаОпускатьсяВниз 	= Выборка.ПослеВводаОпускатьсяВниз;
		Объект.ИспользоватьАвтосохранение  	= Выборка.ИспользоватьАвтосохранение;
		Объект.ПериодАвтосохранения 	 	= Выборка.ПериодАвтосохранения;
		ОтображатьДиаграммуГанта   		 	= Выборка.ОтображатьДиаграммуГанта;
		
		пЛево 								= Выборка.ТекущаяОбластьЛево;
		пПраво 								= Выборка.ТекущаяОбластьПраво;
		пНиз 								= Выборка.ТекущаяОбластьНиз;
		пВерх  								= Выборка.ТекущаяОбластьВерх;
		
		Объект.НачалоРабочегоДня			= Выборка.НачалоРабочегоДня;
		
		Если ПустаяСтрока(Выборка.ОсновнойЦветФонаЗадач) Тогда
			ЗаполнитьЦветаПоУмолчаниюНаСервере();
		Иначе
			ОсновнойЦветФонаЗадач			= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ОсновнойЦветФонаЗадач);
			ОсновнойЦветТекстаЗадач			= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ОсновнойЦветТекстаЗадач);
			ОсновнойЦветФонаСуммирующихЗадач= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ОсновнойЦветФонаСуммирующихЗадач);
			ОсновнойЦветТекстаСуммирующихЗадач = РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ОсновнойЦветТекстаСуммирующихЗадач);
			ЦветФонаЗавершенныхЗадач		= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ЦветФонаЗавершенныхЗадач);
			ЦветТекстаЗавершенныхЗадач		= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ЦветТекстаЗавершенныхЗадач);
			ЦветФонаВыполняющихсяЗадач		= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ЦветФонаВыполняющихсяЗадач);
			ЦветТекстаВыполняющихсяЗадач 	= РаботаСЦветомКлиентСервер.HexВЦвет(Выборка.ЦветТекстаВыполняющихсяЗадач);
		КонецЕсли;
		
	Иначе		
		Возврат;
	КонецЕсли;	
	
	Если Объект.КоличествоРабочихЧасовВДне = 0 Тогда
		Объект.КоличествоРабочихЧасовВДне 	= 8;
		Объект.СубботаРабочий 				= Ложь;
		Объект.ВоскресеньеРабочий 			= Ложь;
		Объект.ПослеВводаОпускатьсяВниз 	= Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НачалоРабочегоДня) Тогда
		Объект.НачалоРабочегоДня = Дата(1, 1, 1, 9, 0, 0);
	КонецЕсли;
	
	пСоответствиеКартинокПоОбластям 	= СтруктураПараметров.СоответствиеКартинокПоОбластям;
	СоответствиеКартинокПоОбластям 		= Новый ФиксированноеСоответствие(пСоответствиеКартинокПоОбластям);
	
	пСоответствиеОбластейПоКартинкам 	= СтруктураПараметров.СоответствиеОбластейПоКартинкам;
	СоответствиеОбластейПоКартинкам 	= Новый ФиксированноеСоответствие(пСоответствиеОбластейПоКартинкам);
	
	// Ресурсы проекта.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РесурсыПроектов.Проект КАК Проект,
		|	РесурсыПроектов.GUID_Ресурса КАК GUID_Ресурса,
		|	РесурсыПроектов.СтоимостьЗатрат КАК СтоимостьЗатрат,
		|	РесурсыПроектов.ЗатратыНаИспользование КАК ЗатратыНаИспользование,
		|	РесурсыПроектов.ОтпускнаяСтоимость КАК ОтпускнаяСтоимость,
		|	РесурсыПроектов.КраткоеНазвание КАК КраткоеНазвание,
		|	РесурсыПроектов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РесурсыПроектов.НазваниеРесурса КАК НазваниеРесурса,
		|	РесурсыПроектов.ТипРесурса КАК ТипРесурса,
		|	РесурсыПроектов.НомерСтрокиЗаписи КАК НомерСтрокиЗаписи
		|ИЗ
		|	РегистрСведений.РесурсыПроектов КАК РесурсыПроектов
		|ГДЕ
		|	РесурсыПроектов.Проект = &Проект
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиЗаписи";
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	ТабличноеПолеРесурсы.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТабличноеПолеРесурсы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	Попытка
		
		Попытка
			тзФильтр = СтруктураПараметров.Фильтр;
			ЗначениеВРеквизитФормы(тзФильтр, "Фильтр");
		Исключение
			// нет фильтра
		КонецПопытки;
		
		Попытка
			тзТекущийФильтрОтбор = СтруктураПараметров.ТекущийФильтрОтбор;
			ЗначениеВРеквизитФормы(тзТекущийФильтрОтбор, "ТекущийФильтрОтбор");
		Исключение
			// нет фильтра
		КонецПопытки;
		
		Попытка
			тзТаблицаСвязей = ЗначениеИзСтрокиВнутр(СтруктураПараметров.ТаблицаСвязей);
			ЗначениеВРеквизитФормы(тзТаблицаСвязей, "ТаблицаСвязей");
		Исключение
			// нет фильтра
		КонецПопытки;	
		
		Попытка
			тзТаблицаРесурсовЗадачи = ЗначениеИзСтрокиВнутр(СтруктураПараметров.ТаблицаРесурсовЗадачи);
			ЗначениеВРеквизитФормы(тзТаблицаРесурсовЗадачи, "ТаблицаРесурсовЗадачи");
		Исключение
			// нет фильтра
		КонецПопытки;	
		
	Исключение
		
	КонецПопытки;
	
	Макет = СтруктураПараметров.Макет;	
	ИмяВерменногоФайла = ПолучитьИмяВременногоФайла();
	Макет.Записать(ИмяВерменногоФайла);	
	тдПроект.Прочитать(ИмяВерменногоФайла);
		
	#КонецОбласти
	
	Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(пВерх, пЛево, пНиз, пПраво);
	СохранитьЦветаНаСервере();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПроект()
	
	СохранитьПроектНаСервере();
	Модифицированность = Ложь;
	ОбновитьЗаголовок();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроект()
	
	ОчиститьПроект();
	ОткрытьПроектНаСервере();	
	
	Если РежимОтображения = 1 Тогда
		Отслеживание(Неопределено);
	ИначеЕсли РежимОтображения = 2 Тогда
		Затраты(Неопределено);
	ИначеЕсли РежимОтображения = 3 Тогда
		ВсеКолонки(Неопределено);
	Иначе
		ВводПланов(Неопределено);
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Автосохранение");
	Модифицированность = Ложь;
	Если Объект.ИспользоватьАвтосохранение Тогда
		ПодключитьОбработчикОжидания("Автосохранение", Макс(Объект.ПериодАвтосохранения, 1) * 60);
	КонецЕсли;	
	ПослеВводаОпускатьсяВнизПриИзменении(Неопределено);
	БылоПереключениеНаГлавнуюСтраницу = Истина;
	НеСпрашиватьОСохраненииПроектаВФайл = Ложь;
	Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(3, НомерКолонкиНазвание,3, НомерКолонкиНазвание);	
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура Автосохранение()
	
	Если Открыта() Тогда
		СохранитьПроект();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////
// Обмен с MS Project

#Область ОбменСMSProject

// Команда формирует текстовый файл с расширением CSV (кодировка "Win 1251")

&НаКлиенте
Процедура ВыгрузитьВProject(Команда)
	
	ИмяФайла = Строка(Объект.Проект) + ".csv";
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = НСтр("ru = 'Сохранение проекта'");
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр = НСтр("ru = 'CSV (разделители-запятые) (*.csv)|*.csv'");
	Диалог.ПолноеИмяФайла = ИмяФайла;
	Диалог.Показать(Новый ОписаниеОповещения("ВыгрузитьВProjectЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог))); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВProjectЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	ИмяФайла = Диалог.ПолноеИмяФайла;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку("Ид;Название_задачи;Длительность;Уровень_структуры;Предшественники;Начало;"
		+ "Окончание;Раннее_начало;Раннее_окончание;Позднее_начало;Позднее_окончание;"
		+ "Свободный_временной_резерв;Процент_завершения;Фактическое_начало;Фактическое_окончание;"
		+ "Тип_ограничения;Дата_ограничения;"
		+ "Приоритет;Суммарная_задача;Сведение;Названия_ресурсов");
	
	// Сначала проставим у всех работ Ид (так как понадобиться в основном цикле при записи предшественников).
	Для НомерСтроки = 3 По ПоследняяСтрока Цикл
		
		Строка = Строка(НомерСтроки-2)+";"+
		тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки, НомерКолонкиНазвание).Текст+";"+
		ПреобразоватьДлительность(тдПроект.Область(НомерСтроки, НомерКолонкиДлительность, НомерСтроки,
			НомерКолонкиДлительность).Значение, Объект.КоличествоРабочихЧасовВДне) + ";"
			+ тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки, НомерКолонкиНазвание).Отступ / 2 + ";";
		
		ТаблицаПредшественников = ТаблицаСвязей.НайтиСтроки(Новый Структура("Конец", НомерСтроки));
		Предшественники = """";
		
		НомерПредшественника = 0;
		Для Каждого СтрокаТаблицыПредшественников Из ТаблицаПредшественников Цикл
			Предшественники = Предшественники+(Число(СтрокаТаблицыПредшественников.Начало) - 2) 
				+ ПолучитьВидСвязиДляProject(СтрокаТаблицыПредшественников.ВидСвязи);
			
			Запаздывание = СтрокаТаблицыПредшественников.Запаздывание;
			
			Если Запаздывание >=0 Тогда
				Предшественники = Предшественники + "+" + Запаздывание;
			ИначеЕсли Запаздывание < 0 Тогда
				Предшественники = Предшественники + Запаздывание;
			КонецЕсли;
			
			НомерПредшественника = НомерПредшественника + 1;
			Если НомерПредшественника <> ТаблицаПредшественников.Количество() Тогда
				Предшественники = Предшественники + ";";
			КонецЕсли; 
		КонецЦикла;
		Предшественники = Предшественники + """";
		
		Строка = Строка	+ Предшественники;
		
		Строка = Строка + ";"
			+ Формат(тдПроект.Область(НомерСтроки, НомерКолонкиНачало, НомерСтроки, НомерКолонкиНачало).Значение,"ДЛФ=Д") + ";"
			+ Формат(тдПроект.Область(НомерСтроки, НомерКолонкиОкончание, НомерСтроки, НомерКолонкиОкончание).Значение,"ДЛФ=Д") + ";"
			+ Формат(Дата(1, 1, 1),"ДЛФ=Д") + ";" // Раннее_начало
			+ Формат(Дата(1, 1, 1),"ДЛФ=Д") + ";" // Раннее_окончание
			+ Формат(Дата(1, 1, 1),"ДЛФ=Д") + ";" // Позднее_начало
			+ Формат(Дата(1, 1, 1),"ДЛФ=Д") + ";" // Позднее_окончание
			+ 0 + ";"; // Свободный_временной_резерв
		
		ДатаОграничения = тдПроект.Область(НомерСтроки, НомерКолонкиДатаОграничения, НомерСтроки, 
			НомерКолонкиДатаОграничения).Значение;
		Строка = Строка + Формат(тдПроект.Область(НомерСтроки, НомерКолонкиПроцентЗавершения, НомерСтроки, НомерКолонкиПроцентЗавершения).Значение, "ЧН=0; ЧГ=") + "%;;;"
			+ ПолучитьТипОграничения(тдПроект.Область(НомерСтроки, НомерКолонкиВидОграничения,НомерСтроки, НомерКолонкиВидОграничения).Значение) + ";"
			+ ?(ЗначениеЗаполнено(ДатаОграничения), Формат(ДатаОграничения,"ДЛФ=Д"), "НД")										//ДатаОграничения
			+ ";500;"
			+ ?(тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки, НомерКолонкиНазвание).Отступ 
				< тдПроект.Область(Число(НомерСтроки) + 1, НомерКолонкиНазвание, Число(НомерСтроки) + 1, 
					НомерКолонкиНазвание).Отступ, "Да", "Нет") + ";"
			+ ?(тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки, НомерКолонкиНазвание).Отступ 
				< тдПроект.Область(Число(НомерСтроки) + 1, НомерКолонкиНазвание, Число(НомерСтроки) + 1, 
					НомерКолонкиНазвание).Отступ,"Да", "Нет");
						
	
		Значение = тдПроект.Область(НомерСтроки, НомерКолонкиGUID, НомерСтроки, НомерКолонкиGUID).Текст;
		Если ПустаяСтрока(Значение) Тогда
			GUID_Строки = Новый УникальныйИдентификатор();
		Иначе
			GUID_Строки = Новый УникальныйИдентификатор(Значение);
		КонецЕсли;		
		пТаблицаРесурсовЗадачи = ТаблицаРесурсовЗадачи.НайтиСтроки(Новый Структура("GUID_Задачи", GUID_Строки));
		
		Ресурсы = """";
		НомерРесурса = 0;
		Для Каждого СтрокаТаблицыРесурсовЗадачи Из пТаблицаРесурсовЗадачи Цикл
			ИскомыеСтроки = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", 
				СтрокаТаблицыРесурсовЗадачи.GUID_Ресурса));
			
			Если ИскомыеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицыРесурсов = ИскомыеСтроки[0];
			Индекс  =  ТаблицаРесурсовЗадачи.Индекс(СтрокаТаблицыРесурсовЗадачи);
			Если СтрокаТаблицыРесурсов.ТипРесурса = 
				ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой") Тогда
				Ресурсы = Ресурсы + СтрокаТаблицыРесурсовЗадачи.НазваниеРесурса + "["
					+ (СтрокаТаблицыРесурсовЗадачи.Единицы) + "%]";
			Иначе
				Ресурсы = Ресурсы + СтрокаТаблицыРесурсовЗадачи.НазваниеРесурса + "["
					+ (СтрокаТаблицыРесурсовЗадачи.Единицы) + "]";
			КонецЕсли;
			
			НомерРесурса = НомерРесурса + 1;
			Если НомерРесурса <> ТаблицаРесурсовЗадачи.Количество() Тогда
				Ресурсы = Ресурсы + ";";
			КонецЕсли; 
		КонецЦикла; 
		Ресурсы = Ресурсы + """";
		
		Строка = Строка + ";" + СтрЗаменить(Ресурсы, Символ(160), "");
		
		Текст.ДобавитьСтроку(Строка);
	КонецЦикла;
	
	#Если ВебКлиент Тогда
	Текст.Записать(ИмяФайла);
	#Иначе
	Текст.Записать(ИмяФайла, КодировкаТекста.ANSI);
	#КонецЕсли
	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьВидСвязиДляProject(ВидСвязи)
	
	Если ВидСвязи = 1 Тогда
		Возврат "ОО";
	ИначеЕсли ВидСвязи = 2 Тогда
		Возврат "НО";
	ИначеЕсли ВидСвязи = 3 Тогда
		Возврат "НН";
	Иначе
		Возврат "ОН";
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьДлительность(Знач пДлительность, Знач пКоличествоЧасовВдне)
	
	Возврат Цел(пДлительность) + ((пДлительность - Цел(пДлительность)) / пКоличествоЧасовВдне * 10);
	
КонецФункции

&НаКлиенте
Функция ПолучитьТипОграничения(Знач ВидОграничения)Экспорт
	
	Если ВидОграничения = ВидыОграничений.КМР Тогда
		Возврат НСтр("ru = 'Как можно раньше'");
	ИначеЕсли ВидОграничения = ВидыОграничений.КМП Тогда
		Возврат НСтр("ru = 'Как можно позже'");
	ИначеЕсли ВидОграничения = ВидыОграничений.ННР Тогда
		Возврат НСтр("ru = 'Начало не ранее'");
	ИначеЕсли ВидОграничения = ВидыОграничений.ННП Тогда
		Возврат НСтр("ru = 'Начало не позднее'");
	ИначеЕсли ВидОграничения = ВидыОграничений.ОНР Тогда
		Возврат НСтр("ru = 'Окончание не ранее'");
	ИначеЕсли ВидОграничения = ВидыОграничений.ОНП Тогда
		Возврат НСтр("ru = 'Окончание не позднее'");
	ИначеЕсли ВидОграничения = ВидыОграничений.ФН Тогда
		Возврат НСтр("ru = 'Фиксированное начало'");
	ИначеЕсли ВидОграничения = ВидыОграничений.ФО Тогда
		Возврат НСтр("ru = 'Фиксированное окончание'");
	КонецЕсли;
  
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзProject(Команда)
	
	Текст = Новый ТекстовыйДокумент;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл csv для импорта из Project'");
	ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'CSV (разделители-запятые) (*.csv)|*.csv'");
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ЗагрузитьИзProjectЗавершение1", ЭтаФорма, 
		Новый Структура("ДиалогОткрытияФайла, Текст", ДиалогОткрытияФайла, Текст)));
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзProjectЗавершение1(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогОткрытияФайла = ДополнительныеПараметры.ДиалогОткрытияФайла;
	Текст = ДополнительныеПараметры.Текст;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Текст.Прочитать(ДиалогОткрытияФайла.ПолноеИмяФайла);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТабличноеПолеРесурсы.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьИзProjectЗавершение", ЭтаФорма, 
			Новый Структура("Текст", Текст)), НСтр("ru = 'Очистить перечень ресурсов?'"),РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		ЗагрузитьИзProjectЗавершение(КодВозвратаДиалога.Нет, Новый Структура("Текст", Текст));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзProjectЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВывестиСостояние(НСтр("ru = 'Очистка задач'"));
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТабличноеПолеРесурсы.Очистить();
	КонецЕсли;
	
	ТаблицаСвязей.Очистить();
	ТаблицаРесурсовЗадачи.Очистить();
	
	УдалитьДиапазонРисунков(3, ПоследняяСтрока);
	УдалитьСтроки(Ложь);
	
	ВывестиСостояние(НСтр("ru = 'Загрузка задач'"));
	Текст = ДополнительныеПараметры.Текст;
	ЗагрузитьИзProjectЗавершениеНаСервере(Текст);
	
	ВывестиСостояние(НСтр("ru = 'Обновление итогов'"));
	ОбновитьИтоги();
	
	ВывестиСостояние(НСтр("ru = 'Примененеие цвета к задачам'"));
	Для НомерСтроки = 3 По ПоследняяСтрока Цикл
		Индекс = НомерСтроки + 1;
		Если тдПроект.Область(Индекс-1, НомерКолонкиНазвание, Индекс-1,
			НомерКолонкиНазвание).Отступ < тдПроект.Область(Индекс, НомерКолонкиНазвание, Индекс, 
			НомерКолонкиНазвание).Отступ Тогда
			
			ВставитьРисунокСверткиИРазвертки(Индекс-1);
			
		КонецЕсли;
		
		РаскраситьСтроку(НомерСтроки);
	КонецЦикла;
	
	ВывестиСостояние("");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзProjectЗавершениеНаСервере(Текст)
	
	тзРаботы = Новый ТаблицаЗначений;
	тзРаботы.Колонки.Добавить("НомерСтроки");  //
	тзРаботы.Колонки.Добавить("НазваниеЗадачи"); //
	тзРаботы.Колонки.Добавить("Длительность");  //
	тзРаботы.Колонки.Добавить("Уровень");       //
	тзРаботы.Колонки.Добавить("Предшественники");//
    тзРаботы.Колонки.Добавить("ДатаНачала");     //
    тзРаботы.Колонки.Добавить("ДатаОкончания");  //
    тзРаботы.Колонки.Добавить("ТипОграничения");
	тзРаботы.Колонки.Добавить("ДатаОграничения");
    тзРаботы.Колонки.Добавить("Ресурсы");        //
    тзРаботы.Колонки.Добавить("Суммарная_задача");//
	тзРаботы.Колонки.Добавить("Процент_завершения");//
	тзРаботы.Колонки.Добавить("Фактическое_начало");
	тзРаботы.Колонки.Добавить("Фактическое_окончание");
	тзРаботы.Колонки.Добавить("Приоритет");
	тзРаботы.Колонки.Добавить("Сведение");
	тзРаботы.Колонки.Добавить("Веха");
	тзРаботы.Колонки.Добавить("GUID");

	
	Строка = Текст.ПолучитьСтроку(1);
	СтруктураПозиций = ПолучитьСтруктуруПозиций(Строка);
	
	Для Индекс = 2 По (Текст.КоличествоСтрок()) Цикл
		
		Строка = Текст.ПолучитьСтроку(Индекс);
		// Разбираем строку	
		РазобратьСтрокуProject(Строка,тзРаботы, СтруктураПозиций, ТабличноеПолеРесурсы);
	КонецЦикла; 
	
	СоздатьНовыеЗадачи(тзРаботы);
	
	БылоПереключениеНаГлавнуюСтраницу = Истина;

КонецПроцедуры

&НаСервере
Процедура РазобратьСтрокуProject(Строка,тзРаботы, СтруктураПозицииОбщая, ТаблицаРесурсов)Экспорт
	
	СтрокаТзРаботы = тзРаботы.Добавить();
	
	СтрокаТзРаботы.GUID = Строка(Новый УникальныйИдентификатор);
	СтруктураПозиции = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураПозицииОбщая Цикл
		СтруктураПозиции.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если СтруктураПозицииОбщая.Предшественники < СтруктураПозицииОбщая.Названия_ресурсов Тогда
		КоличествоПредшественников = ВычитатьПредшественниковProject(Строка, СтрокаТзРаботы,СтруктураПозиции);
		КоличествоРесурсов 		   = ВычитатьРесурсыЗадачиProject(Строка,  СтрокаТзРаботы,СтруктураПозиции, 
			КоличествоПредшественников-1);
	Иначе
		КоличествоРесурсов 		   = ВычитатьРесурсыЗадачиProject(Строка,  СтрокаТзРаботы,СтруктураПозиции,);
		КоличествоПредшественников = ВычитатьПредшественниковProject(Строка, СтрокаТзРаботы,СтруктураПозиции, 
			КоличествоРесурсов - 1);
	КонецЕсли;
	
	СтруктураПозиции = ОбновитьСтруктуруСУчетомСмещения(СтруктураПозиции, КоличествоРесурсов, КоличествоПредшественников);
	
    Если СтруктураПозиции.Ид > 0 Тогда
		СтрокаТзРаботы.НомерСтроки = Число(ПолучитьСтроковоеЗначениеПоПозиции(Строка, СтруктураПозиции.Ид))+3;
	КонецЕсли;
	
	Если СтруктураПозиции.Название_Задачи > 0 Тогда
		СтрокаТзРаботы.НазваниеЗадачи = ПолучитьСтроковоеЗначениеПоПозиции(Строка, СтруктураПозиции.Название_Задачи)
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТзРаботы.НазваниеЗадачи) Тогда
		возврат
	КонецЕсли;
	
	Если СтруктураПозиции.Длительность > 0 Тогда
		СтрокаТзРаботы.Длительность = ИзСтрокиВЧисло(ПолучитьСтроковоеЗначениеПоПозиции(Строка, 
			СтруктураПозиции.Длительность));
	КонецЕсли;
	
	Если СтруктураПозиции.Уровень_структуры > 0 Тогда
		СтрокаТзРаботы.Уровень = (Число(ПолучитьСтроковоеЗначениеПоПозиции(Строка, СтруктураПозиции.Уровень_структуры))*2)+2;
	КонецЕсли;
	
	Если СтруктураПозиции.Дата_начала > 0 Тогда
		СтрокаТзРаботы.ДатаНачала = ПреобразоватьВДату(ПолучитьСтроковоеЗначениеПоПозиции(Строка, 
			СтруктураПозиции.Дата_начала));
	КонецЕсли;
	
	Если СтруктураПозиции.Дата_окончания > 0 Тогда
		СтрокаТзРаботы.ДатаОкончания = ПреобразоватьВДату(ПолучитьСтроковоеЗначениеПоПозиции(Строка, 
			СтруктураПозиции.Дата_окончания));
	КонецЕсли;
	
	Если СтруктураПозиции.Тип_ограничения > 0 Тогда
		СтрокаТзРаботы.ТипОграничения = ПолучитьСтроковоеЗначениеПоПозиции(Строка, СтруктураПозиции.Тип_ограничения);
	КонецЕсли;
	
	Если СтруктураПозиции.Дата_ограничения > 0 Тогда
		СтрокаТзРаботы.ДатаОграничения = ПреобразоватьВДату(ПолучитьСтроковоеЗначениеПоПозиции(Строка, 
			СтруктураПозиции.Дата_ограничения));
	КонецЕсли;	
	
	Если СтруктураПозиции.Суммарная_задача > 0 Тогда
		СтрокаТзРаботы.Суммарная_задача = ПолучитьСтроковоеЗначениеПоПозиции(Строка, СтруктураПозиции.Суммарная_задача);
	КонецЕсли;	
	
	Если СтруктураПозиции.Веха > 0 Тогда
		СтрокаТзРаботы.Веха = ПолучитьСтроковоеЗначениеПоПозиции(Строка, СтруктураПозиции.Веха);
	КонецЕсли;	
	
	Если СтруктураПозиции.Процент_завершения > 0 Тогда
		СтрокаТзРаботы.Процент_завершения = ИзСтрокиВЧисло(ПолучитьСтроковоеЗначениеПоПозиции(Строка, 
			СтруктураПозиции.Процент_завершения));
	КонецЕсли;	
	
	Если СтруктураПозиции.Фактическое_начало > 0 Тогда
		СтрокаТзРаботы.Фактическое_начало = ПреобразоватьВДату(ПолучитьСтроковоеЗначениеПоПозиции(Строка, 
			СтруктураПозиции.Фактическое_начало));
	КонецЕсли;	
	
	Если СтруктураПозиции.Фактическое_начало > 0 Тогда
		СтрокаТзРаботы.Фактическое_окончание = ПреобразоватьВДату(ПолучитьСтроковоеЗначениеПоПозиции(Строка, 
			СтруктураПозиции.Фактическое_окончание));
	КонецЕсли;	
	
	Если СтруктураПозиции.Сведение > 0 Тогда
		СтрокаТзРаботы.Сведение = ПолучитьСтроковоеЗначениеПоПозиции(Строка, СтруктураПозиции.Сведение);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСтруктуруСУчетомСмещения(СтруктураПозиции, КоличествоРесурсов, КоличествоПредшественников) Экспорт
	
	Для Каждого КлючИЗначение Из СтруктураПозиции Цикл
		ИсходноЗначение = КлючИЗначение.Значение;
		Если ИсходноЗначение = 0 ИЛИ КлючИЗначение.ключ = "Предшественники" 
			ИЛИ КлючИЗначение.ключ = "Названия_ресурсов" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИсходноЗначение > СтруктураПозиции.Предшественники И КоличествоПредшественников > 1 Тогда
			СтруктураПозиции[КлючИЗначение.Ключ] = СтруктураПозиции[КлючИЗначение.Ключ] + КоличествоПредшественников - 1;
		КонецЕсли;
		
		Если ИсходноЗначение > СтруктураПозиции.Названия_ресурсов И КоличествоРесурсов > 1 Тогда
			СтруктураПозиции[КлючИЗначение.Ключ] = СтруктураПозиции[КлючИЗначение.Ключ] + КоличествоРесурсов - 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПозиции;
	
КонецФункции

&НаСервере
Функция ВычитатьРесурсыЗадачиProject(ИсходнаяСтрока, СтрокаТзРаботы, СтруктураПозиции, Смещение = 0) Экспорт
	
	КоличествоРесурсов = 1;
	Если СтруктураПозиции.Названия_ресурсов > 0 Тогда
		
		// Разбираем ресурсы	
		Строка = ИсходнаяСтрока;
		
		Для Индекс = 0 По СтруктураПозиции.Названия_ресурсов + Смещение -2 Цикл
			Позиция = СтрНайти(Строка,";");
			Если Позиция = 0 Тогда
				Возврат 0;
			КонецЕсли;
			Строка = Прав(Строка,СтрДлина(Строка)-Позиция);
		КонецЦикла;
		
		Символ = Сред(Строка,1,1);
		Если Символ = """" Тогда
			Строка = Прав(Строка,СтрДлина(Строка)-1);
			Поз = СтрНайти(Строка,"""");
			Ресурсы = Лев(Строка,Поз-1);
			Строка = Прав(Строка,СтрДлина(Строка)-Поз-1);//убираем так же последнюю кавычку
		Иначе
			Поз = СтрНайти(Строка,";");
			Ресурсы = Лев(Строка,Поз-1);
			Строка = Прав(Строка,СтрДлина(Строка)-Поз);	
		КонецЕсли; 	
		
		Поз0 = СтрНайти(Ресурсы,";");
		Пока Поз0 > 0 Цикл
			СтрокаРесурса = ТаблицаРесурсовЗадачи.Добавить();
			
			Наименование = Лев(Ресурсы,Поз0-1);
			ПозСкобка = СтрНайти(Наименование,"[");
			Если ПозСкобка = 0 Тогда
				Единиц = 100;
			Иначе
				ПозСкобка2 = СтрНайти(Ресурсы,"]");
				Единиц = ИзСтрокиВЧисло(Лев(Наименование,ПозСкобка2-1));
			КонецЕсли;
				
			Если ПозСкобка>0 Тогда
			   Наименование = Лев(Наименование,ПозСкобка-1);
			КонецЕсли; 
			
			СтрокаРесурса.НазваниеРесурса = Наименование;
			
			ИскомыеСтрокиРесурсов = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("НазваниеРесурса", Наименование));
			Если ИскомыеСтрокиРесурсов.Количество() = 0 Тогда
				ИскомаяСтрокаРесурсов 					= ТабличноеПолеРесурсы.Добавить();
				ИскомаяСтрокаРесурсов.НазваниеРесурса 	= Наименование;
				ИскомаяСтрокаРесурсов.КраткоеНазвание 	= Лев(Наименование, 1);
				ИскомаяСтрокаРесурсов.GUID_Ресурса 		= Новый УникальныйИдентификатор;
				Если ПозСкобка = 0 Тогда
					// трудовой
					ИскомаяСтрокаРесурсов.ТипРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой");
				ИначеЕсли СтрНайти(Лев(Ресурсы,ПозСкобка-1), "%") <> 0 Тогда 
					// материальный
					ИскомаяСтрокаРесурсов.ТипРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Материальный");
				Иначе
					// трудовой
					ИскомаяСтрокаРесурсов.ТипРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой");
				КонецЕсли;
			Иначе
				ИскомаяСтрокаРесурсов = ИскомыеСтрокиРесурсов[0];
			КонецЕсли;
			
			СтрокаРесурса.Единицы = Единиц;
			СтрокаРесурса.GUID_Ресурса    = ИскомаяСтрокаРесурсов.GUID_Ресурса;
			СтрокаРесурса.GUID_Задачи     = СтрокаТзРаботы.GUID;
			СтрокаРесурса.КраткоеНазвание = ИскомаяСтрокаРесурсов.КраткоеНазвание;
			СтрокаРесурса.ТипРесурса 	  = ИскомаяСтрокаРесурсов.ТипРесурса;
			
			Ресурсы = Прав(Ресурсы,СтрДлина(Ресурсы)-Поз0);			
			
			Поз0 = СтрНайти(Ресурсы,";");
		КонецЦикла; 
		
		Если СокрЛП(Ресурсы)<>"" Тогда
			
			СтрокаРесурса = ТаблицаРесурсовЗадачи.Добавить();
			Наименование = Ресурсы;
			ПозСкобка = СтрНайти(Наименование,"[");
			Если ПозСкобка = 0 Тогда
				Единиц = 100;
			Иначе
				ПозСкобка2 = СтрНайти(Ресурсы,"]");
				Единиц = ИзСтрокиВЧисло(Сред(Ресурсы,ПозСкобка+1, ПозСкобка2-1))
			КонецЕсли;
			
			Если ПозСкобка>0 Тогда
				Наименование = Лев(Наименование,ПозСкобка-1);
			КонецЕсли; 	
			СтрокаРесурса.НазваниеРесурса = Наименование;		
			
			ИскомыеСтрокиРесурсов = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("НазваниеРесурса", Наименование));
			Если ИскомыеСтрокиРесурсов.Количество() = 0 Тогда
				ИскомаяСтрокаРесурсов 					= ТабличноеПолеРесурсы.Добавить();
				ИскомаяСтрокаРесурсов.НазваниеРесурса 	= Наименование;
				ИскомаяСтрокаРесурсов.КраткоеНазвание 	= Лев(Наименование, 1);
				ИскомаяСтрокаРесурсов.GUID_Ресурса 		= Новый УникальныйИдентификатор;
				Если ПозСкобка = 0 Тогда
					// трудовой
					ИскомаяСтрокаРесурсов.ТипРесурса = Перечисления.ТипыРесурсовПроектов.Трудовой;
				ИначеЕсли  СтрНайти(Сред(Ресурсы,ПозСкобка+1, ПозСкобка2-1), "%") <> 0 Тогда 
					// материальный
					ИскомаяСтрокаРесурсов.ТипРесурса = Перечисления.ТипыРесурсовПроектов.Материальный;
				Иначе
					// трудовой
					ИскомаяСтрокаРесурсов.ТипРесурса = Перечисления.ТипыРесурсовПроектов.Трудовой;
				КонецЕсли;
			Иначе
				ИскомаяСтрокаРесурсов = ИскомыеСтрокиРесурсов[0];
			КонецЕсли;
			
			СтрокаРесурса.Единицы = Единиц;
			СтрокаРесурса.GUID_Ресурса    = ИскомаяСтрокаРесурсов.GUID_Ресурса;
			СтрокаРесурса.GUID_Задачи     = СтрокаТзРаботы.GUID;
			СтрокаРесурса.КраткоеНазвание = ИскомаяСтрокаРесурсов.КраткоеНазвание;
			СтрокаРесурса.ТипРесурса 	  = ИскомаяСтрокаРесурсов.ТипРесурса;
			
		КонецЕсли; 
		
		КоличествоРесурсов = Макс(1, ТаблицаРесурсовЗадачи.НайтиСтроки(Новый Структура("GUID_Задачи", 
			СтрокаТзРаботы.GUID)).Количество());
		// Конец разбора ресурсов
		
	КонецЕсли;	
	
	Возврат КоличествоРесурсов;
	
КонецФункции

&НаСервере
Функция ВычитатьПредшественниковProject(ИсходнаяСтрока, СтрокаТзРаботы, СтруктураПозиции, Смещение = 0)Экспорт
	
	НомерТекущейСтроки = Число(ПолучитьСтроковоеЗначениеПоПозиции(ИсходнаяСтрока, СтруктураПозиции.Ид))+3;
	КоличествоПредшественников = 1;
	Если СтруктураПозиции.Предшественники > 0 Тогда
		
		Строка = ИсходнаяСтрока;
		
		Для Индекс = 0 По СтруктураПозиции.Предшественники + Смещение - 2 Цикл
			Позиция = СтрНайти(Строка,";");
			Если Позиция = 0 Тогда
				Возврат 0;
			КонецЕсли;
			Строка = Прав(Строка,СтрДлина(Строка)-Позиция);
		КонецЦикла;
		
		//Предшественники
		Символ = Сред(Строка,1,1);
		Если Символ = """" Тогда
			Строка = Прав(Строка,СтрДлина(Строка)-1);
			Поз = СтрНайти(Строка,"""");
			Предшественники = Лев(Строка,Поз-1);
			Строка = Прав(Строка,СтрДлина(Строка)-Поз-1);//убираем так же последнюю кавычку
		Иначе
			Поз = СтрНайти(Строка,";");
			Предшественники = Лев(Строка,Поз-1);
			Строка = Прав(Строка,СтрДлина(Строка)-Поз);	
		КонецЕсли; 
		
		// Заполняем таблицу предшественников
		Индекс = СтрНайти(Предшественники,";");
		Пока Индекс > 0 Цикл
			СтрокаСвязи = ТаблицаСвязей.Добавить();
			
			ОдинПредшественник = Лев(Предшественники,Индекс-1);
		    Предшественники = Прав(Предшественники,СтрДлина(Предшественники)-Индекс);
			Индекс = СтрНайти(Предшественники,";");
			
			Если СтрНайти(ОдинПредшественник,"О")>0 Тогда
			    Если СтрНайти(ОдинПредшественник,"Н")>0 Тогда
				   ПозОН = Мин(Найти(ОдинПредшественник,"О"),Найти(ОдинПредшественник,"Н"));
				Иначе	
				   ПозОН = СтрНайти(ОдинПредшественник,"О");
				КонецЕсли; 
			Иначе	
			    ПозОН = СтрНайти(ОдинПредшественник,"Н");
			КонецЕсли; 
			
			Если ПозОН>0 Тогда
				НомерСтроки = Число(Лев(ОдинПредшественник,ПозОН-1));
				ТипСвязи = Сред(ОдинПредшественник,ПозОН,2);
				ОдинПредшественник = Прав(ОдинПредшественник,СтрДлина(ОдинПредшественник)-ПозОН-2);//захватываем последующий плюс
				СтрокаСвязи.Начало = Число(НомерСтроки)+3;
				СтрокаСвязи.ВидСвязи = ПолучитьВидСвязиИзProject(ТипСвязи);
	            СтрокаСвязи.Запаздывание = ИзСтрокиВЧисло(ОдинПредшественник);		
				СтрокаСвязи.Конец = НомерТекущейСтроки;
			Иначе	
				СтрокаСвязи.Начало = Число(ОдинПредшественник)+3;
				СтрокаСвязи.ВидСвязи = ПолучитьВидСвязиИзProject("ОН");
	            СтрокаСвязи.Запаздывание = 0;		
				СтрокаСвязи.Конец = НомерТекущейСтроки;
			КонецЕсли; 
					
		КонецЦикла; 
		
		Если СокрЛП(Предшественники)<>"" Тогда
			ОдинПредшественник = Предшественники;
			СтрокаСвязи = ТаблицаСвязей.Добавить();
			Если СтрНайти(ОдинПредшественник,"О")>0 Тогда
				Если СтрНайти(ОдинПредшественник,"Н")>0 Тогда
					ПозОН = Мин(Найти(ОдинПредшественник,"О"),Найти(ОдинПредшественник,"Н"));
				Иначе	
					ПозОН = СтрНайти(ОдинПредшественник,"О");
				КонецЕсли; 
			Иначе	
				ПозОН = СтрНайти(ОдинПредшественник,"Н");
			КонецЕсли; 
			Если ПозОН>0 Тогда
				НомерСтроки = Число(Лев(ОдинПредшественник,ПозОН-1));
				ТипСвязи = Сред(ОдинПредшественник,ПозОН,2);
				ОдинПредшественник = Прав(ОдинПредшественник,СтрДлина(ОдинПредшественник)-ПозОН-2);//захватываем последующий плюс
				СтрокаСвязи.Начало = Число(НомерСтроки)+3;
				СтрокаСвязи.ВидСвязи = ПолучитьВидСвязиИзProject(ТипСвязи);
				СтрокаСвязи.Запаздывание = ИзСтрокиВЧисло(ОдинПредшественник);		
				СтрокаСвязи.Конец = НомерТекущейСтроки;
			Иначе	
				СтрокаСвязи.Начало = Число(ОдинПредшественник)+3;
				СтрокаСвязи.ВидСвязи = ПолучитьВидСвязиИзProject("ОН");
				СтрокаСвязи.Запаздывание = 0;		
				СтрокаСвязи.Конец = НомерТекущейСтроки;
			КонецЕсли; 
			
		КонецЕсли; 
		
		КоличествоПредшественников = Макс(1, ТаблицаСвязей.НайтиСтроки(Новый Структура("Конец", НомерТекущейСтроки)).Количество());
		/////////////////////////////////////////////////////////////////////////
	КонецЕсли;

	Возврат КоличествоПредшественников;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьВДату(Знач Стр)Экспорт
	
	Если Стр = "НД" Тогда
	   Возврат Неопределено;
	КонецЕсли; 
	
	Попытка
		Поз = СтрНайти(Стр," ");//удаляем первый пробел
	    Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		
	    Поз = СтрНайти(Стр,".");
		День = Число(Лев(Стр,Поз-1));
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		
		Поз = СтрНайти(Стр,".");
		Месяц = Число(Лев(Стр,Поз-1));
		Год = Число(Прав(Стр,СтрДлина(Стр)-Поз));

		Если Год <90 Тогда
			Год = 2000+Год; 
		ИначеЕсли Год < 100 Тогда
			Год = 1900+Год;
		КонецЕсли; 
		
		Возврат Дата(Год,Месяц,День);
	Исключение
		Возврат Неопределено;	
	КонецПопытки;

КонецФункции //ПреобразоватьВДату 

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеВидСвязиДляProjectНаСервере(ВидСвязи)Экспорт
	
	Если ВидСвязи = 1 Тогда
		Возврат "Окончание-Окончание";
	ИначеЕсли ВидСвязи = 2 Тогда
		Возврат "Начало-Окончание";
	ИначеЕсли ВидСвязи = 3 Тогда
		Возврат "Начало-Начало";
	Иначе
		Возврат "Окончание-Начало";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция	ПолучитьВидСвязиИзProject(ВидСвязи) Экспорт
	
	Если ВидСвязи = "ОО" Тогда
		Возврат 1;
	ИначеЕсли ВидСвязи = "НО" Тогда
		Возврат 2;
	ИначеЕсли ВидСвязи = "НН" Тогда
		Возврат 3;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СоздатьНовыеЗадачи(тзРаботы)
	тдПроект.ТекущаяОбласть = тдПроект.Область(4, 2, ПоследняяСтрока, НомерКолонкиЗадача);
	
	КоличествоЗадач = тзРаботы.Количество();
	ПоследняяСтрока = КоличествоЗадач+5;
	НастроитьСтрокуНаСервере(3, ПоследняяСтрока, Истина);
	
	Для Каждого СтрокаТабличнойЧасти Из тзРаботы Цикл
		ТекущийНомерСтроки = СтрокаТабличнойЧасти.НомерСтроки;
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиGUID, ТекущийНомерСтроки, 
			НомерКолонкиGUID).Текст  = СтрокаТабличнойЧасти.GUID;	 				
	    тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиНазвание, ТекущийНомерСтроки, 
			НомерКолонкиНазвание).Текст  = СтрокаТабличнойЧасти.НазваниеЗадачи;	 	
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиНазвание, ТекущийНомерСтроки, 
			НомерКолонкиНазвание).Отступ = СтрокаТабличнойЧасти.Уровень;	 	
		
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиДлительность, ТекущийНомерСтроки,
			НомерКолонкиДлительность).Значение = СтрокаТабличнойЧасти.Длительность;	 	
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиНачало, ТекущийНомерСтроки, 
			НомерКолонкиНачало).Значение = СкорректироватьДатуНачалаНаСервере(СтрокаТабличнойЧасти.ДатаНачала);	 	
		Если НЕ (СтрокаТабличнойЧасти.Длительность = "0") Тогда
			тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиОкончание, ТекущийНомерСтроки, 
				НомерКолонкиОкончание).Значение = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончания),
					СкорректироватьДатуОкончанияНаСервере(СтрокаТабличнойЧасти.ДатаОкончания, Ложь),СтрокаТабличнойЧасти.ДатаОкончания);
		Иначе
			тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиОкончание, ТекущийНомерСтроки, 
				НомерКолонкиОкончание).Значение = тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиНачало, 
					ТекущийНомерСтроки, НомерКолонкиНачало).Значение;	 	
		КонецЕсли;
		
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиДатаОграничения, ТекущийНомерСтроки, 
			НомерКолонкиДатаОграничения).Значение = СтрокаТабличнойЧасти.ДатаОграничения;	 	
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиВидОграничения, ТекущийНомерСтроки, 
			НомерКолонкиВидОграничения).Значение = ПреобразоватьСтроковоеЗначениеТипаОграничения(СтрокаТабличнойЧасти.ТипОграничения);	 	
						
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиПроцентЗавершения, ТекущийНомерСтроки, 
			НомерКолонкиПроцентЗавершения).Значение = СтрокаТабличнойЧасти.Процент_Завершения;	 	
		
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиВеха, ТекущийНомерСтроки,
			НомерКолонкиВеха).Значение = ВРег(СтрокаТабличнойЧасти.Веха) = "ДА";
		
		пТаблицаРесурсовЗадачи = ТаблицаРесурсовЗадачи.НайтиСтроки(Новый Структура("GUID_Задачи", СтрокаТабличнойЧасти.GUID));
		ПредставлениеРесурсов = "";
		Для Каждого СтрокаРесурсов Из пТаблицаРесурсовЗадачи Цикл
			КраткоеНазвание = ?(ЗначениеЗаполнено(СтрокаРесурсов.КраткоеНазвание), СтрокаРесурсов.КраткоеНазвание, 
				СтрокаРесурсов.НазваниеРесурса);
			ПредставлениеРесурсов = ПредставлениеРесурсов + КраткоеНазвание + ";";
		КонецЦикла;
		
		Если СтрДлина(ПредставлениеРесурсов) > 0 Тогда
			ПредставлениеРесурсов = Лев(ПредставлениеРесурсов, СтрДлина(ПредставлениеРесурсов)-1);
		КонецЕсли;
		
		тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиРесурсыПредставление,ТекущийНомерСтроки, 
			НомерКолонкиРесурсыПредставление).Текст = ПредставлениеРесурсов;
		
	КонецЦикла;
	
	// Вставим предшественников
	Для Каждого СтрокаТабличнойЧасти Из тзРаботы Цикл
				
		ТекущийНомерСтроки = СтрокаТабличнойЧасти.НомерСтроки;
		Пока тдПроект.Область(ТекущийНомерСтроки, НомерКолонкиНазвание, ТекущийНомерСтроки, 
			НомерКолонкиНазвание).Отступ < тдПроект.Область(Число(ТекущийНомерСтроки)+1, НомерКолонкиНазвание, 
			Число(ТекущийНомерСтроки)+1, НомерКолонкиНазвание).Отступ Цикл
			
			ТекущийНомерСтроки = Число(ТекущийНомерСтроки) + 1;
			
		КонецЦикла;
		
		ТаблицаСвязейЗадачи = ТаблицаСвязей.НайтиСтроки(Новый Структура("Конец",ТекущийНомерСтроки)); 
		
		Для Каждого СтрокаПредшественника Из ТаблицаСвязейЗадачи Цикл
			Если тдПроект.Область(СтрокаПредшественника.Начало, НомерКолонкиНазвание, СтрокаПредшественника.Начало, 
				НомерКолонкиНазвание).Отступ < тдПроект.Область(Число(СтрокаПредшественника.Начало)+1, 
				НомерКолонкиНазвание, Число(СтрокаПредшественника.Начало)+1, НомерКолонкиНазвание).Отступ Тогда
				
				ОтступПредшественника = тдПроект.Область(СтрокаПредшественника.Начало, НомерКолонкиНазвание,СтрокаПредшественника.Начало, НомерКолонкиНазвание).отступ;
				ПодчиненнаяСтрока = Число(СтрокаПредшественника.Начало) + 1;
				Пока ОтступПредшественника < тдПроект.Область(ПодчиненнаяСтрока, НомерКолонкиНазвание,ПодчиненнаяСтрока, НомерКолонкиНазвание).отступ Цикл
					ПодчиненнаяСтрока = Число(ПодчиненнаяСтрока) + 1;
				КонецЦикла;
				
				СтрокаПредшественника.Начало = Число(ПодчиненнаяСтрока)-1;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПозиций(Строка) Экспорт
	// ("Ид;Название_задачи;Длительность;Уровень_структуры;Предшественники;Начало;"+
	// "Окончание;"+
	// "Тип_ограничения;Дата_ограничения;Названия_ресурсов;Суммарная_задача;");
    СтруктураПозиций = Новый Структура;
	СтруктураПозиций.Вставить("Ид", 0);
	СтруктураПозиций.Вставить("Название_задачи", 0);
	СтруктураПозиций.Вставить("Длительность", 0);
	СтруктураПозиций.Вставить("Уровень_структуры", 0);
	СтруктураПозиций.Вставить("Предшественники", 0);
	СтруктураПозиций.Вставить("Дата_начала", 0);
	СтруктураПозиций.Вставить("Дата_окончания", 0);
	СтруктураПозиций.Вставить("Тип_ограничения", 0);
	СтруктураПозиций.Вставить("Дата_ограничения", 0);
	СтруктураПозиций.Вставить("Названия_ресурсов", 0);
	СтруктураПозиций.Вставить("Суммарная_задача", 0);
	СтруктураПозиций.Вставить("Процент_завершения", 0);
	СтруктураПозиций.Вставить("Фактическое_начало", 0);
	СтруктураПозиций.Вставить("Фактическое_окончание", 0);
	СтруктураПозиций.Вставить("Тип_ограничения", 0);
	СтруктураПозиций.Вставить("Дата_ограничения", 0);
	СтруктураПозиций.Вставить("Приоритет", 0);
	СтруктураПозиций.Вставить("Сведение", 0);
	СтруктураПозиций.Вставить("Веха", 0);
	н = 0;
	Пока Истина Цикл
		н = н + 1;
		НазваниеКолонки = СтрЗаменить(ПолучитьСтроковоеЗначениеПоПозиции(Строка, н), ".", "");
		НазваниеКолонки = СтрЗаменить(НазваниеКолонки, " ", "_");
		
		Если НазваниеКолонки = "0" Тогда
			Прервать;
		КонецЕсли;
		
		Попытка
			СтруктураПозиций[НазваниеКолонки] = н;
		Исключение
			// Нет такого ключа идем дальше...
		КонецПопытки;
	КонецЦикла;
	
	Возврат СтруктураПозиций;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтроковоеЗначениеПоПозиции(Знач Строка, Знач НомерВхождения)Экспорт
	
	ВременнаяСтрока = Строка;
	
	Индекс = 0;
	Пока Истина Цикл
		Позиция = СтрНайти(ВременнаяСтрока, ";");
		Если Позиция = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		Если Индекс >= НомерВхождения - 1 Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс + 1;
		ВременнаяСтрока = Прав(ВременнаяСтрока, СтрДлина(ВременнаяСтрока) - Позиция);
	КонецЦикла;
	
	Возврат Лев(ВременнаяСтрока,Позиция - 1);
	
КонецФункции

&НаСервере
Функция ПреобразоватьСтроковоеЗначениеТипаОграничения(ВидОграничения) Экспорт
	
	Если ВидОграничения = НСтр("ru = 'Как можно раньше'") Тогда
		Возврат ВидыОграничений.КМР;
	ИначеЕсли ВидОграничения = НСтр("ru = 'Как можно позже'") Тогда
		Возврат ВидыОграничений.КМП;
	ИначеЕсли ВидОграничения = НСтр("ru = 'Начало не ранее'") Тогда
		Возврат ВидыОграничений.ННР;
	ИначеЕсли ВидОграничения = НСтр("ru = 'Начало не позднее'") Тогда
		Возврат ВидыОграничений.ННП;
	ИначеЕсли ВидОграничения = НСтр("ru = 'Окончание не ранее'") Тогда
		Возврат ВидыОграничений.ОНР;
	ИначеЕсли ВидОграничения = НСтр("ru = 'Окончание не позднее'") Тогда
		Возврат ВидыОграничений.ОНП;
	ИначеЕсли ВидОграничения = НСтр("ru = 'Фиксированное начало'") Тогда
		Возврат ВидыОграничений.ФН;
	ИначеЕсли ВидОграничения = НСтр("ru = 'Фиксированное окончание'") Тогда
		Возврат ВидыОграничений.ФО;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// Работа с диаграммой Ганта

#Область РаботаСДиаграммойГанта

&НаКлиенте
Процедура ОбновитьДиаграмму(пВерх = Неопределено, пНиз = Неопределено) Экспорт
	
	// Заводим переменные для определения максимальной и минимальной дат работ.
	МаксимальнаяДата = NULL;
	МинимальнаяДата = NULL;
	
	Рисунок = тдПроект.Рисунки.Получить(0);
	Рисунок.Расположить(тдПроект.Область(1,НомерКолонкиДиаграммыГанта, ПоследняяСтрока, НомерКолонкиДиаграммыГанта));
	Диаграмма = Рисунок.Объект;
	Диаграмма.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;	
	Диаграмма.Обновление = Ложь;
	
	Если НЕ ОтображатьДиаграммуГанта Тогда
		Диаграмма.Очистить();
		тдПроект.Область(,НомерКолонкиДиаграммыГанта, , НомерКолонкиДиаграммыГанта).Видимость = Ложь;
		Возврат;
	ИначеЕсли тдПроект.Область(,НомерКолонкиДиаграммыГанта, , НомерКолонкиДиаграммыГанта).Видимость = Ложь Тогда
		тдПроект.Область(,НомерКолонкиДиаграммыГанта, , НомерКолонкиДиаграммыГанта).Видимость = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(пВерх) И НЕ ЗначениеЗаполнено(пНиз) Тогда
		Диаграмма.Очистить();
		Серия = Диаграмма.Серии.Добавить();
	КонецЕсли;
	
	// Создаем таблицу значений, в которую, по мере обхода запроса, будем заносить связи.
	Связи.Очистить();
		
	// Серия будет одна.
	Серия = Диаграмма.Серии.Получить(0);
	Серия.ШтриховкаМеждуИнтервалами = Истина;
	
	// Заводим переменные для определения максимальной и минимальной дат работ.
	МаксимальнаяДата = NULL;
	МинимальнаяДата = NULL;
	
	ЦветВыполненого 	= WebЦвета.ТемноОранжевый;
	ЦветНевыполненого 	= WebЦвета.Зеленый;
	ЦветПросроченного 	= WebЦвета.ТемноКрасный;              
	ЦветФакт          	= WebЦвета.СинийСоСтальнымОттенком;
	
	НачальныйИндекс = 3;
	Если ЗначениеЗаполнено(пВерх) Тогда
		НачальныйИндекс = Макс(3, пВерх);
	КонецЕсли;
	
	КонечныйИндекс = ПоследняяСтрока;
	Если ЗначениеЗаполнено(пНиз) Тогда
		КонечныйИндекс = пНиз;
	КонецЕсли;
	
	ВывестиСостояние(НСтр("ru = 'Обновление диаграммы Ганта...'"));	
	Для н = НачальныйИндекс По КонечныйИндекс Цикл
		
		Наименование = тдПроект.Область(н, НомерКолонкиНазвание, н, НомерКолонкиНазвание).Текст;
		Начало 		 = тдПроект.Область(н, НомерКолонкиНачало, н, НомерКолонкиНачало).Значение;
		Окончание 	 = тдПроект.Область(н, НомерКолонкиОкончание, н, НомерКолонкиОкончание).Значение;
		Если Начало = "" Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоФакт 		 = тдПроект.Область(н, НомерКолонкиНачалоФакт, н, НомерКолонкиНачалоФакт).Значение;
		ОкончаниеФакт 	 = тдПроект.Область(н, НомерКолонкиОкончаниеФакт, н, НомерКолонкиОкончаниеФакт).Значение;
		ПроцентЗавершения= тдПроект.Область(н, НомерКолонкиПроцентЗавершения, н, НомерКолонкиПроцентЗавершения).Значение;
		Длительность = тдПроект.Область(н, НомерКолонкиДлительность, н, НомерКолонкиДлительность).Значение;
		
		// Подправим для более удобного отображения в диаграмме Ганта
		Если Час(Начало) <= Час(Объект.НачалоРабочегоДня) И (Длительность >= 1 ИЛИ Длительность = 0) Тогда
			Начало = НачалоДня(Начало);
		КонецЕсли;
		
		ДлительностьФакт = 1;
		Если ЗначениеЗаполнено(НачалоФакт) И ЗначениеЗаполнено(ОкончаниеФакт) Тогда
			ДлительностьФакт = РасчитатьРазницуМеждуДатами(НачалоФакт, ОкончаниеФакт);
		КонецЕсли;
				
		Если Час(НачалоФакт) <= Час(Объект.НачалоРабочегоДня) И (ДлительностьФакт >= 1 ИЛИ ДлительностьФакт = 0) Тогда
			НачалоФакт = НачалоДня(НачалоФакт);
		КонецЕсли;
		
		Если Длительность = 0 Тогда
			Окончание = Начало;
		ИначеЕсли Цел(Длительность) = Длительность И Час(Окончание) <= Час(Объект.НачалоРабочегоДня)
			И ЗначениеЗаполнено(Окончание) Тогда
			Окончание = ВернутьДатуСУчетомВыходных(НачалоДня(Окончание) - 1);
		ИначеЕсли Час(Окончание)>=Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне 
			И ЗначениеЗаполнено(Окончание) И Длительность >= 1 Тогда
			Окончание = КонецДня(Окончание);
		КонецЕсли;
		
		Если Длительность = 0 Тогда
			ОкончаниеФакт = НачалоФакт;
		ИначеЕсли Цел(Длительность) = Длительность И Час(ОкончаниеФакт) <= Час(Объект.НачалоРабочегоДня) 
			И ЗначениеЗаполнено(ОкончаниеФакт) Тогда
			ОкончаниеФакт = ВернутьДатуСУчетомВыходных(НачалоДня(ОкончаниеФакт) - 1);
		ИначеЕсли Час(ОкончаниеФакт) >= Час(Объект.НачалоРабочегоДня) 
			+ Объект.КоличествоРабочихЧасовВДне И ЗначениеЗаполнено(ОкончаниеФакт) И ДлительностьФакт >= 1 Тогда
			ОкончаниеФакт = КонецДня(ОкончаниеФакт);
		КонецЕсли;
		
		Отступ = тдПроект.Область(н, НомерКолонкиНазвание, н, НомерКолонкиНазвание).Отступ;
		СуммирующаяЗадача = ЭтоСуммирующаяЗадача(н);
		Попытка
			Веха = тдПроект.Область(н, НомерКолонкиВеха, н, НомерКолонкиВеха).Значение; 
		Исключение
			Веха = Ложь;
		КонецПопытки;
			
		ТекРодитель       = тдПроект.Область(н, НомерКолонкиРодитель, н, НомерКолонкиРодитель).Текст;
		ТекРодитель 	  = СтрЗаменить(ТекРодитель,Символ(160), "");
		
		Точка = Диаграмма.УстановитьТочку(Формат(н, "ЧН=0; ЧГ="), ТекРодитель);
		
		Точка.Текст = тдПроект.Область(н, НомерКолонкиРесурсыПредставление,н, НомерКолонкиРесурсыПредставление).Текст;
		Если НЕ ЗначениеЗаполнено(Точка.Текст) Тогда
			Точка.Текст = "-";
		ИначеЕсли СтрДлина(Точка.Текст) > 27 Тогда
			Точка.Текст = Лев(Точка.Текст, 25) + "...";
		КонецЕсли;
		
		Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
		Значение.Очистить();
		Если НЕ ЗначениеЗаполнено(Начало) И Длительность >=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Начало < Дата(1990, 1, 1) ИЛИ (Начало + Длительность * 24 * 3600) > Дата(2100, 1, 1) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если надо, корректируем максимальную и минимальную даты.
		Если МаксимальнаяДата = NULL Или МаксимальнаяДата < Начало + (Длительность * 24 * 3600) Тогда
			МаксимальнаяДата = Начало + (Длительность * 24 * 3600);
		КонецЕсли;
		
		Если МинимальнаяДата = NULL Или МинимальнаяДата > Начало Тогда
			МинимальнаяДата = Начало;
		КонецЕсли;	
		
		Интервал = Значение.Добавить();
		Интервал.Начало = Начало;
		Интервал.Конец  = Окончание;
		
		Если СуммирующаяЗадача Тогда 
			Интервал.Цвет= WebЦвета.ТусклоСерый;
			Значение.Редактирование = Ложь;
		ИначеЕсли Веха = Истина Тогда 
			Интервал.Цвет= WebЦвета.Черный;
			Значение.Редактирование = Ложь;
		Иначе
			Интервал.Цвет= WebЦвета.Васильковый;
			Значение.Редактирование = Истина;
		КонецЕсли;
		
		// Факт
		
		Если ПроцентЗавершения > 0 И НЕ СуммирующаяЗадача И НЕ Веха Тогда
			
			Значение.Редактирование = Ложь;
			Значение.ДополнительныйЦвет = WebЦвета.ЛимонноЗеленый;
			
			Интервал = Значение.Добавить();
			Если ЗначениеЗаполнено(НачалоФакт) Тогда
				Интервал.Начало = НачалоФакт;
			Иначе
				Интервал.Начало = Начало;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОкончаниеФакт) Тогда
				Интервал.Конец = ОкончаниеФакт;
			Иначе
				Интервал.Конец = Интервал.Начало + ((Окончание - Начало)/100)*ПроцентЗавершения;
			КонецЕсли;
			
			Интервал.Цвет= WebЦвета.Красный;
			Значение.Редактирование = Ложь;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////
		
		// Заполняем связи
		СписокЗначений = ПолучитьСписокПредшественников(н);
		Для Каждого ЭлементЗначения Из  СписокЗначений Цикл
			Связь = Связи.Добавить();
			Связь.ВидСвязи = ЭлементЗначения.ВидСвязи;
			Связь.Начало = Формат(ЭлементЗначения.Начало, "ЧГ=");
			Конец = н;
			// Делаем вид, что связь идет к суммирующей задаче
			Если ЗначениеЗаполнено(ТекРодитель) Тогда
				Пока тдПроект.Область(Конец-1, НомерКолонкиНазвание, Конец-1, НомерКолонкиНазвание).Отступ 
					< тдПроект.Область(Конец, НомерКолонкиНазвание, Конец, НомерКолонкиНазвание).Отступ  Цикл
					Конец = Конец-1;
				КонецЦикла;
			КонецЕсли;
			Связь.Конец  = Формат(Конец, "ЧГ=");
			
		КонецЦикла;	
		
		
		Если ЗначениеЗаполнено(пВерх) И ЗначениеЗаполнено(пНиз) Тогда
			СписокЗначений = ПолучитьСписокСледующихЗадачПоСвязям(н);
			Если СписокЗначений.Количество()>0 Тогда
				
				Конец = СписокЗначений[СписокЗначений.Количество()-1].Конец;
				// Делаем вид, что связь идет к суммирующей задаче
				Если ЗначениеЗаполнено(ТекРодитель) Тогда
					Пока тдПроект.Область(Конец-1, НомерКолонкиНазвание, Конец-1, НомерКолонкиНазвание).Отступ < 
						тдПроект.Область(Конец, НомерКолонкиНазвание, Конец, НомерКолонкиНазвание).Отступ  Цикл
						Конец = Конец-1;
					КонецЦикла;
				КонецЕсли;
				
				Если Связи.НайтиСтроки(Новый Структура("Начало, Конец", Формат(н, "ЧГ="), 
					Формат(Конец, "ЧГ="))).Количество() = 0 Тогда
					Связь = Связи.Добавить();
					Связь.ВидСвязи = СписокЗначений[СписокЗначений.Количество()-1].ВидСвязи;
					Связь.Начало = Формат(н, "ЧГ=");
					Связь.Конец  = Формат(Конец, "ЧГ=");
				КонецЕсли;;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	// Теперь в интервале минимальной и максимальной дат заполняем интервалы выходных дней.
	// Конечно, это только пример, в "реальных" программах нерабочие дни с учетом праздников
	// и переносов выходных должны браться из базы данных.
	// Здесь, для простоты, создаются интервалы суббота - воскресенье.
	Если НачальныйИндекс = 3 И КонечныйИндекс = ПоследняяСтрока Тогда
		Диаграмма.ИнтервалыФона.Очистить();
	КонецЕсли;
	
	пМаксимальнаяДата = МаксимальнаяДата;
	Если МинимальнаяДата <> NULL Тогда
		Неделя = 3600 * 24 * 7;
		Если НЕ Объект.СубботаРабочий И НЕ Объект.ВоскресеньеРабочий Тогда
			Выходные = 3600 * 48;
		ИначеЕсли НЕ Объект.СубботаРабочий ИЛИ НЕ Объект.ВоскресеньеРабочий Тогда
			Выходные = 3600 * 24;
		Иначе
			Выходные = 0;
		КонецЕсли;
		
		МаксимальнаяДата = МаксимальнаяДата + Неделя * 4;
		ТекДата = МинимальнаяДата;
		Пока ТекДата <= МаксимальнаяДата Цикл;
			Если Объект.ВоскресеньеРабочий Тогда
				Кон = НачалоНедели(ТекДата)-(24*3600);
			Иначе
				Кон = НачалоНедели(ТекДата);
			КонецЕсли;
			
			Нач = Кон - Выходные;
			Диаграмма.ИнтервалыФона.Добавить(Нач, Кон);
			
			ТекДата = ТекДата + Неделя;
		КонецЦикла;		
	КонецЕсли;
	
	Пока Истина Цикл
		Попытка
			Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Получить(0).Видимость = Ложь;
			Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Удалить(
				Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Получить(1));
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	ШиринаКолонки = Рисунок.Ширина;
	Попытка
		Дни    = (МаксимальнаяДата - МинимальнаяДата) / (24*3600);
	Исключение
		Дни = 7;
	КонецПопытки;
	Если НЕ ((ШиринаКолонки >= 283 И Дни <= 78)	ИЛИ (ШиринаКолонки >= 181 И Дни <= 58)
		ИЛИ (ШиринаКолонки >= 140 И Дни <= 48) ИЛИ (ШиринаКолонки >= 74 И Дни <= 38)
		ИЛИ (ШиринаКолонки >= 85 И Дни <= 33) ИЛИ (ШиринаКолонки >= 38 И Дни <= 29)
		ИЛИ (ШиринаКолонки >= 48 И Дни <= 31) ИЛИ (ШиринаКолонки >= 85 И Дни <= 33)
		ИЛИ (ШиринаКолонки >= 555 И Дни <= 133)) Тогда
		
		ЭлементШкалы = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Месяц;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.Формат	= "ДФ='ddd d'";
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	Иначе
		ЭлементШкалы = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.День;
		ЭлементШкалы.ФорматДня = ФорматДняШкалыВремени.ДеньНедели;
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
	КонецЕсли;
	
	СоздатьСвязиВДиаграмме(Связи, Диаграмма, Серия);
	
	Диаграмма.ПоказатьУровеньТочек(0); 
	
	ПолосаРегулированияШириныДиаграммыГанта = тдПроект.Область(,НомерКолонкиДиаграммыГанта, , 
		НомерКолонкиДиаграммыГанта).ШиринаКолонки;
	
	Для Каждого КлючИЗначение Из СоответствиеОбластейПоКартинкам Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			
			Если тдПроект.Область(КлючИЗначение.Значение + 1, 1,КлючИЗначение.Значение + 1,1).Видимость = Ложь Тогда
				Диаграмма.СвернутьТочку(Диаграмма.УстановитьТочку(Формат(КлючИЗначение.Значение, "ЧН=0; ЧГ=")), Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Диаграмма.Обновление = Истина;	
	ВывестиСостояние("");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерестроитьТаблицуПоДиаграмме() Экспорт
	
	Рисунок   = тдПроект.Рисунки.получить(0);
	Рисунок.Расположить(тдПроект.Область(1,НомерКолонкиДиаграммыГанта, ПоследняяСтрока, НомерКолонкиДиаграммыГанта));
	Диаграмма = Рисунок.Объект;
	Серия = Диаграмма.Серии.Получить(0);
	Индекс = 3;
	МассивИзмененных = Новый Массив;
	СтруктураГраниц = РекурсивнаяФункцияПерестроенияТаблицыПоДиаграмме(Диаграмма, Диаграмма.Точки,,МассивИзмененных);
	Для Каждого Строка Из МассивИзмененных Цикл
		ПересчитатьДатыВСвязанныхЗадачах(Число(Строка),,СтруктураГраниц);
	КонецЦикла;
	ОбновитьИтоги(Истина, Макс(СтруктураГраниц.Верх, 3), Мин(СтруктураГраниц.Низ, ПоследняяСтрока));
	
КонецПроцедуры

&НаКлиенте
Функция РекурсивнаяФункцияПерестроенияТаблицыПоДиаграмме(Диаграмма, пТочки, СтруктураГраниц = Неопределено, 
	МассивИзмененных)
	
	Если СтруктураГраниц = Неопределено Тогда
		СтруктураГраниц = Новый Структура("Верх, Низ",ПоследняяСтрока, 3);
	КонецЕсли;
	
	Для Каждого Точка Из пТочки Цикл
		
		Индекс = Число(Точка.Значение);
			
		Серия = Диаграмма.Серии.Получить(0);
		Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
		пНачало 	= Дата('00010101');
		пОкончание 	= Дата('00010101');
		Для Каждого Интервал Из Значение Цикл
			
			Если Интервал.Цвет = WebЦвета.Красный Тогда
				Продолжить;
			КонецЕсли;
			// Если надо, корректируем максимальную и минимальную даты.
			Если НЕ ЗначениеЗаполнено(пНачало) Или пНачало < Интервал.Начало Тогда
				пНачало 	= СкорректироватьДатуНачала(Интервал.Начало);
			КонецЕсли;
			
			Если Интервал.Начало = Интервал.Конец Тогда
				пОкончание 	= пНачало;
			ИначеЕсли НЕ ЗначениеЗаполнено(пОкончание) Или пОкончание > Интервал.Конец Тогда
				пОкончание 	= СкорректироватьДатуОкончания(Интервал.Конец, Истина);
			КонецЕсли;	
                                                                                                                 
 		КонецЦикла;
		
		Если тдПроект.Область(Индекс,НомерКолонкиНачало,Индекс,НомерКолонкиНачало).Значение = пНачало 
			И тдПроект.Область(Индекс,НомерКолонкиОкончание,Индекс,НомерКолонкиОкончание).Значение = пОкончание Тогда
			// Ни чего не меняем
		ИначеЕсли ЗначениеЗаполнено(пНачало) И ЗначениеЗаполнено(пОкончание) Тогда
			тдПроект.Область(Индекс,НомерКолонкиНачало,Индекс,НомерКолонкиНачало).Значение = пНачало;
			тдПроект.Область(Индекс,НомерКолонкиОкончание,Индекс,НомерКолонкиОкончание).Значение = пОкончание;
			Если НЕ пНачало = пОкончание Тогда
				ОкончаниеПриИзменении(Индекс, Истина);
			КонецЕсли;
			СтруктураГраниц.Верх = Мин(СтруктураГраниц.Верх, Индекс);
			СтруктураГраниц.Низ  = Макс(СтруктураГраниц.Низ, Индекс);
			МассивИзмененных.Добавить(Индекс);
		Иначе
			тдПроект.Область(Индекс,НомерКолонкиНачало,Индекс,НомерКолонкиНачало).Значение = Дата('00010101');
			тдПроект.Область(Индекс,НомерКолонкиОкончание,Индекс,НомерКолонкиОкончание).Значение = Дата('00010101');
			тдПроект.Область(Индекс,НомерКолонкиДлительность,Индекс,НомерКолонкиДлительность).Значение = 0;
		КонецЕсли;
		
		Если Точка.Точки.Количество() > 0 Тогда
			 РекурсивнаяФункцияПерестроенияТаблицыПоДиаграмме(Диаграмма, Точка.Точки, СтруктураГраниц, МассивИзмененных);
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураГраниц;
	
КонецФункции

&НаКлиенте
Процедура СоздатьСвязиВДиаграмме(Связи, Диаграмма, Серия)
	
	ТекущаяТочка = NULL;
	Для Каждого Связь Из Связи Цикл 
		
		Если ТекущаяТочка = NULL Или ТекущаяТочка.Значение <> Связь.Конец Тогда
			ТекущаяТочка = Диаграмма.УстановитьТочку(Связь.Конец);
		КонецЕсли;			
		
		ТочкаНачала = Диаграмма.УстановитьТочку(Связь.Начало);
		Значение = Диаграмма.ПолучитьЗначение(ТочкаНачала, Серия);
		Для Каждого Интервал Из Значение Цикл
			ИнтервалНачала = Интервал;
			Прервать;
		КонецЦикла;				
		Значение = Диаграмма.ПолучитьЗначение(ТекущаяТочка, Серия);
		Для Каждого Интервал Из Значение Цикл
			ИнтервалКонца = Интервал;
			Прервать;
		КонецЦикла;	
		
		н = Число(Связь.Конец);
			
		Попытка
			СвязьДиаграммы = ИнтервалНачала.Добавить(ИнтервалКонца);
			СвязьДиаграммы.ТипСвязи = ПолучитьТипСвязиДляДиаграммыГанта(Связь.ВидСвязи);
			Если (ИнтервалНачала.Конец <= ИнтервалКонца.Начало И Связь.ВидСвязи = ВидыСвязей.ОН)
				ИЛИ (ИнтервалНачала.Конец <= ИнтервалКонца.Конец И Связь.ВидСвязи = ВидыСвязей.ОО)
				ИЛИ (ИнтервалНачала.Начало <= ИнтервалКонца.Начало И Связь.ВидСвязи = ВидыСвязей.НН)
				ИЛИ (ИнтервалНачала.Начало <= ИнтервалКонца.Конец И Связь.ВидСвязи = ВидыСвязей.НО) Тогда
				СвязьДиаграммы.Цвет = WebЦвета.Васильковый;
			Иначе			
				СвязьДиаграммы.Цвет = WebЦвета.Красный;
			КонецЕсли;			
		Исключение
		КонецПопытки
	
	КонецЦикла;
	
КонецПроцедуры // СоздатьСвязиВДиаграмме(Связи, Диаграмма, Серия)

&НаКлиенте
Функция ПолучитьТипСвязиДляДиаграммыГанта(ВидСвязи)
	
	Если ВидСвязи = ПредопределенноеЗначение("Перечисление.ВидыСвязей.НН") Тогда
		Возврат ТипСвязиДиаграммыГанта.НачалоНачало;
	ИначеЕсли ВидСвязи = ПредопределенноеЗначение("Перечисление.ВидыСвязей.ОН") Тогда
		Возврат ТипСвязиДиаграммыГанта.КонецНачало;
	ИначеЕсли ВидСвязи = ПредопределенноеЗначение("Перечисление.ВидыСвязей.ОО") Тогда
		Возврат ТипСвязиДиаграммыГанта.КонецКонец;
	ИначеЕсли ВидСвязи = ПредопределенноеЗначение("Перечисление.ВидыСвязей.НО") Тогда
		Возврат ТипСвязиДиаграммыГанта.НачалоКонец;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// Работа со связями

#Область РаботаСоСвязями

&НаКлиенте
Процедура СоздатьСвязи(Знач РежимОчистки = Ложь, Знач ОчиститьСледующиеЗадачи = Ложь)
	
	// Колонка: дата начала без связи
	МинВерх = ПоследняяСтрока;
	МаксНиз = 3;
	
	СоответствиеНеОчищаемыхСвязей = Новый Соответствие;
	ОбщийИндексированныйМассив = Новый Массив;
	СоответствиеМассивовПоРесурсам = Новый Соответствие;
	СоответствиеМассивовПоРесурсам.Вставить("", Новый Массив);
	
	Для Каждого ВыделеннаяОбласть Из тдПроект.ВыделенныеОбласти Цикл
		
		Строка = ВыделеннаяОбласть.Низ;
		
		Если ВыделеннаяОбласть.Верх > ПоследняяСтрока ИЛИ ВыделеннаяОбласть.Верх < 3 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВерх = ВыделеннаяОбласть.Верх;
		
		Если СтрокаВерх > ПоследняяСтрока ИЛИ СтрокаВерх < 3 Тогда
			СтрокаВерх = СтрокаВерх - 1;
			Продолжить;
		КонецЕсли;
		
		СоответствиеНеОчищаемыхСвязей.Вставить(СтрокаВерх, Истина);
		
		МинВерх = Мин(МинВерх, Строка);
		МаксНиз = Макс(МаксНиз, Строка);
		
		// Область может быть единичная, а может быть и нет...
		Пока Строка >= ВыделеннаяОбласть.Верх  Цикл
			
			Если Строка > ПоследняяСтрока ИЛИ Строка < 3 Тогда
				Строка = Строка - 1;
				Продолжить;
			КонецЕсли;
			
			ПредСтрока = Строка;
			Пока СоответствиеКартинокПоОбластям.получить(Строка) <> Неопределено Цикл
				
				Если Строка > ПоследняяСтрока ИЛИ Строка < 3 Тогда
					Прервать;
				КонецЕсли;
				
				Строка = Строка + 1;
			КонецЦикла;
			
			// Код ниже нужен для того, чтобы связи создавались не прямолинейно сверху вниз (как MS Project), а
			// с учетом ресурсов
			Если ОбщийИндексированныйМассив.Найти(Строка) = Неопределено Тогда
				Если  РежимОчистки Тогда  
					Массив = СоответствиеМассивовПоРесурсам.Получить("");
					Массив.Добавить(Строка);
					СоответствиеМассивовПоРесурсам.Вставить("", Массив);
				Иначе
					МассивСтрокРесурсов = ПолучитьСписокТрудовыхРесурсовЗадачи(Строка);
					Если МассивСтрокРесурсов.Количество() = 0 Тогда
						Массив = СоответствиеМассивовПоРесурсам.Получить("");
						Массив.Добавить(Строка);
						СоответствиеМассивовПоРесурсам.Вставить("", Массив);
					Иначе
						Если Строка = ВыделеннаяОбласть.Верх Тогда
							Массив = СоответствиеМассивовПоРесурсам.Получить("");
							Массив.Добавить(Строка);
							СоответствиеМассивовПоРесурсам.Вставить("", Массив);
						КонецЕсли;
							      						
						Для Каждого пGUID Из МассивСтрокРесурсов Цикл
							Массив = СоответствиеМассивовПоРесурсам.Получить(пGUID.GUID_Ресурса);
							Если Массив = Неопределено Тогда
								Массив = Новый Массив;
							КонецЕсли;
							Массив.Добавить(Строка);
							СоответствиеМассивовПоРесурсам.Вставить(пGUID.GUID_Ресурса, Массив);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				ОбщийИндексированныйМассив.Добавить(Строка);
			КонецЕсли;
			
			Строка = ПредСтрока - 1;
			
			МинВерх = Мин(МинВерх, Строка);
		КонецЦикла;
	КонецЦикла;
	
	// Проверка на зацикливание
	Если СоответствиеНеОчищаемыхСвязей.Количество() > 1 Тогда 
		ИсходнаяСтрока = Неопределено;
		Для Каждого КлючИЗначение Из СоответствиеНеОчищаемыхСвязей Цикл
			Если ИсходнаяСтрока <> Неопределено Тогда
				Если ПроверкаЗацикливанияСвязей(Число(ИсходнаяСтрока), Число(КлючИЗначение.Ключ)) Тогда
					ПоказатьПредупреждение(,НСтр("ru = 'Указанная связь невозможна, так как она может привести к циклической зависимости между указанными задачами'"));		
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ИсходнаяСтрока = КлючИЗначение.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	СоответствиеСписокРазрывов = Новый Соответствие; // ИнициализироватьНовуюТаблицуПредшественников();
	Разрывы = Новый Соответствие;
	
	// Сначала обходим ресурсы
	Для Каждого КсючИЗначение Из СоответствиеМассивовПоРесурсам Цикл
		пGUID = КсючИЗначение.Ключ;
		ИндексированныйМассив = КсючИЗначение.Значение;
		Количество = ИндексированныйМассив.Количество();
		Индекс = Количество;
		
		// Потом обходим строки, связанные с этим ресурсов (снизу-вверх)
		Для Индекс = 0 По Количество - 2 Цикл
			Строка = ИндексированныйМассив[Индекс]; // Строка - 1;
								
			Если Индекс = 0 Тогда
				Разрывы.Вставить(пGUID, Строка);
				СоответствиеСписокРазрывов.Вставить(пGUID, ПолучитьСписокСледующихЗадачПоСвязям(Строка));
			КонецЕсли;
			
			ОбластьНазванияЗадачи = тдПроект.Область(Строка, НомерКолонкиНазвание, Строка, НомерКолонкиНазвание);
			
			ПредшествующаяСтрока = ИндексированныйМассив[Индекс+1];
			СтрокаРодитель = Строка;
			Пока ПредшествующаяСтрока >=3 Цикл
				
				Попытка
					СтрокаРодитель = Число(тдПроект.Область(Строка, НомерКолонкиРодитель, Строка, НомерКолонкиРодитель).Текст);
				Исключение
					СтрокаРодитель = 0;
				КонецПопытки;
				
				Попытка
					СтрокаРодительПредшественника = Число(тдПроект.Область(ПредшествующаяСтрока, НомерКолонкиРодитель, 
						ПредшествующаяСтрока, НомерКолонкиРодитель).Текст)
				Исключение
					СтрокаРодительПредшественника = 0;
				КонецПопытки;
				
				Пока СоответствиеКартинокПоОбластям.получить(ПредшествующаяСтрока) <> Неопределено Цикл
					ПредшествующаяСтрока = ПредшествующаяСтрока - 1;
					
					Если ПредшествующаяСтрока > ПоследняяСтрока ИЛИ ПредшествующаяСтрока < 3 Тогда
						ПредшествующаяСтрока = 0;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЦикла;
			
			Если СоответствиеНеОчищаемыхСвязей.Получить(строка) = Неопределено И пGUID = "" Тогда
				
				СписокПредшественников = ТаблицаСвязей.НайтиСтроки(Новый Структура("Конец", строка));
				Для Каждого УдаляемаяСтрока Из СписокПредшественников Цикл
					ТаблицаСвязей.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ПредшествующаяСтрока) И НЕ РежимОчистки Тогда
					СтрокаТаблицы = ТаблицаСвязей.Добавить();
					СтрокаТаблицы.Начало = ПредшествующаяСтрока;
					СтрокаТаблицы.Конец  = строка;
				КонецЕсли;
			Иначе
				СписокПредшественников = ТаблицаСвязей.НайтиСтроки(Новый Структура("Начало, Конец", ПредшествующаяСтрока, строка));
				
				Если СписокПредшественников.Количество() = 0  Тогда
					СтрокаТаблицы = ТаблицаСвязей.Добавить();
					СтрокаТаблицы.Начало = ПредшествующаяСтрока;
					СтрокаТаблицы.Конец  = строка;
				ИначеЕсли РежимОчистки Тогда
					Для Каждого СтрокаТЗ Из СписокПредшественников Цикл
						ТаблицаСвязей.Удалить(СтрокаТЗ);
					КонецЦикла
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
		// Если режим очистки, то обрабатываем последнюю строку и очищаем связи на следующие задачи в этой задаче
		Если РежимОчистки И ИндексированныйМассив.Количество() = 1 Тогда
			Индекс = 0;
			Строка = ИндексированныйМассив[Индекс];//Строка - 1;
			Пока СоответствиеКартинокПоОбластям.получить(Строка) <> Неопределено Цикл
				
				Если Строка > ПоследняяСтрока-1 ИЛИ Строка < 2 Тогда
					Прервать;
				КонецЕсли;
				
				Строка = Строка + 1;
			КонецЦикла;
					
			Разрывы.Вставить(пGUID, Строка);
			СоответствиеСписокРазрывов.Вставить(пGUID, ПолучитьСписокСледующихЗадачПоСвязям(Строка));
				
			СписокПредшественников = ПолучитьСписокПредшественников(Строка);
			Для Каждого СтрокаТЗ Из СписокПредшественников Цикл
				ТаблицаСвязей.Удалить(СтрокаТЗ);
			КонецЦикла;
		КонецЕсли;
		
		Если (РежимОчистки ИЛИ ОчиститьСледующиеЗадачи) Тогда
		
			Строка = ИндексированныйМассив[ИндексированныйМассив.Количество()-1];
			Пока СоответствиеКартинокПоОбластям.получить(Строка) <> Неопределено Цикл
				Строка = Строка + 1;
				Если Строка >= ПоследняяСтрока ИЛИ Строка < 3 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если  Индекс > 0 Тогда
				СписокСледующихЗадачПоСвязям = ПолучитьСписокСледующихЗадачПоСвязям(Строка);
				Для Каждого СтрокаТЗ Из СписокСледующихЗадачПоСвязям Цикл
					ТаблицаСвязей.Удалить(СтрокаТЗ);
				КонецЦикла;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ИндексированныйМассив = ОбщийИндексированныйМассив;
	
	Индекс = Количество;
	Если РежимОчистки Тогда
		// Режим очистки связей
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			
			Строка = ИндексированныйМассив[Индекс];
			
			ДополнительнаяСтрока = Строка;
			Пока СоответствиеКартинокПоОбластям.получить(ДополнительнаяСтрока) <> Неопределено Цикл
				ДополнительнаяСтрока = ДополнительнаяСтрока + 1;
				Если ДополнительнаяСтрока > ПоследняяСтрока - 1 ИЛИ ДополнительнаяСтрока < 2 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ДополнительнаяСтрока<>Строка Тогда
				ИндексированныйМассив.Вставить(0,ДополнительнаяСтрока);
				Индекс = Индекс + 1;
			КонецЕсли;
			
			Если ПолучитьСписокПредшественников(Строка).Количество()>0 Тогда;
				Продолжить;
			КонецЕсли;
			
			ОбластьНачало	= тдПроект.Область(Строка, НомерКолонкиНачало, Строка, НомерКолонкиНачало);
			ОбластьНачалоПриРучномРедактировании = тдПроект.Область(Строка, НомерКолонкиНачалоПриРучномВводе,
				Строка, НомерКолонкиНачалоПриРучномВводе);
			
			Попытка
				ТекРодитель = Число(тдПроект.Область(Строка, НомерКолонкиРодитель, Строка, НомерКолонкиРодитель).Текст);
				ДатаНачала  = тдПроект.Область(ТекРодитель, НомерКолонкиНачало, ТекРодитель, НомерКолонкиНачало).Значение;
			Исключение
				ДатаНачала  = ОбластьНачалоПриРучномРедактировании.Значение;
			КонецПопытки;
			
			ОбластьНачало.Значение = ДатаНачала;
			ДлительностьИлиНачалоПриИзменении(Строка);
		КонецЦикла;
		
		// Если область сплошная, то очищаем все связи в этой области, иначе очищаем связь только между выделенными областями
		Для Каждого КлючИЗначениеРазрывов Из Разрывы Цикл
			Разрыв = КлючИЗначениеРазрывов.Значение;
			СписокРазрывов = СоответствиеСписокРазрывов.Получить(КлючИЗначениеРазрывов.Ключ);
			Если ЗначениеЗаполнено(Разрыв) И СписокРазрывов.Количество()>0 Тогда
							
				Строка = Число(Разрыв);
				Попытка
					ТекРодитель = Число(тдПроект.Область(Строка, НомерКолонкиРодитель, Строка,
						НомерКолонкиРодитель).Текст);
					ДатаОкончанияРазрыва = тдПроект.Область(ТекРодитель, НомерКолонкиНачало, ТекРодитель, 
						НомерКолонкиНачало).Значение;
				Исключение
					ДатаОкончанияРазрыва = тдПроект.Область(Строка, НомерКолонкиНачалоПриРучномВводе, 
						Строка, НомерКолонкиНачалоПриРучномВводе).Значение;
				КонецПопытки;
			        			
				тдПроект.Область(Строка, НомерКолонкиНачало, Строка, НомерКолонкиНачало).Значение = ДатаОкончанияРазрыва;
				ДлительностьИлиНачалоПриИзменении(Строка);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Разрыв) Тогда
				Строка = Число(Разрыв);
				СтруктураГраницы = Новый Структура("Верх, Низ", МинВерх, МаксНиз);
				СоответствиеОбработанныхСтрок = Новый Соответствие;
				СоответствиеОбработанныхСтрок.Вставить(0, Ложь);
				ПересчитатьДатыВСвязанныхЗадачах(Строка,СоответствиеОбработанныхСтрок,СтруктураГраницы);
				МинВерх = Мин(СтруктураГраницы.Верх,  МинВерх);
				МаксНиз = Макс(СтруктураГраницы.Низ,  МаксНиз);
			КонецЕсли;

		КонецЦикла;
				
	Иначе
		// Режим установки связей 
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			
			Если Индекс >= ИндексированныйМассив.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			Строка = ИндексированныйМассив[Индекс];
			
			ДополнительнаяСтрока = Строка;
			Пока СоответствиеКартинокПоОбластям.Получить(ДополнительнаяСтрока) <> Неопределено Цикл
				ДополнительнаяСтрока = ДополнительнаяСтрока + 1;
				Если ДополнительнаяСтрока > ПоследняяСтрока-1 ИЛИ ДополнительнаяСтрока < 2 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ДополнительнаяСтрока <> Строка Тогда
				ИндексированныйМассив.Вставить(0, ДополнительнаяСтрока);
				Индекс = Индекс + 1;
			КонецЕсли;
			
			ОбластьНачало			= тдПроект.Область(Строка, НомерКолонкиНачало, Строка, НомерКолонкиНачало);
			ОбластьНачалоПриРучномРедактировании = тдПроект.Область(Строка, НомерКолонкиНачалоПриРучномВводе, Строка,
				НомерКолонкиНачалоПриРучномВводе);
			
			СписокЗначений = ПолучитьСписокПредшественников(Строка);
					
			Если НЕ ЗначениеЗаполнено(ОбластьНачалоПриРучномРедактировании.Значение) Тогда
				ОбластьНачалоПриРучномРедактировании.Значение = ОбластьНачало.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого КсючИЗначение Из СоответствиеМассивовПоРесурсам Цикл
			ИндексированныйМассив = КсючИЗначение.Значение;
			
			Если ИндексированныйМассив.Количество() > 0 Тогда
				СтруктураГраницы = Новый Структура("Верх, Низ", Макс(МинВерх, 3), Мин(МаксНиз, ПоследняяСтрока));
				ПересчитатьДатыВСвязанныхЗадачах(ИндексированныйМассив[ИндексированныйМассив.Количество() - 1],,СтруктураГраницы);
				МинВерх = Мин(СтруктураГраницы.Верх,  МинВерх);
				МаксНиз = Макс(СтруктураГраницы.Низ,  МаксНиз);
			Иначе
				МинВерх = 3;
				МаксНиз = ПоследняяСтрока;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьИтоги(,Макс(МинВерх, 3), Мин(МаксНиз+1, ПоследняяСтрока));
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДатыВСвязанныхЗадачах(ПараметрСтрока, СоответствиеОбработанныхСтрок = Неопределено, 
	СтруктураГраницы = Неопределено, ДобавлятьСтрокуВСоответствиеОбработанных = Истина, Индекс = 0, 
	ПолныйПересчет = Ложь) Экспорт
	
	Строка = Число(ПараметрСтрока);
	
	Если СоответствиеОбработанныхСтрок = Неопределено Тогда
		СоответствиеОбработанныхСтрок = Новый Соответствие;
	КонецЕсли;
	
	Если СтруктураГраницы = Неопределено Тогда
		СтруктураГраницы = Новый Структура("Верх, Низ", 3, ПоследняяСтрока);
	КонецЕсли;
		
	Если НЕ ДобавлятьСтрокуВСоответствиеОбработанных Тогда
		СоответствиеОбработанныхСтрок.Вставить(Строка, Ложь);
	КонецЕсли;
	
	МассивНомеровСтрокДляПересчета = Новый Массив;
	Если НЕ ПолныйПересчет Тогда
		МассивНомеровСтрокДляПересчета.Добавить(Строка);
	Иначе
		Для ИндексСтроки = 3 По ПоследняяСтрока Цикл
			МассивНомеровСтрокДляПересчета.Добавить(ИндексСтроки);
		КонецЦикла;
	КонецЕсли;

	Пока Индекс < МассивНомеровСтрокДляПересчета.Количество() Цикл
		Строка = МассивНомеровСтрокДляПересчета[Индекс];
		
		Если СоответствиеОбработанныхСтрок.Получить(Строка) = Неопределено Тогда
			
			
			Если ДобавлятьСтрокуВСоответствиеОбработанных Тогда
				СоответствиеОбработанныхСтрок.Вставить(Строка, Истина);
			КонецЕсли;
			
			ПроцентЗавершения = ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиПроцентЗавершения);
			
			Если ПроцентЗавершения = 0 Тогда
				ОбластьНачало = тдПроект.Область(Строка, НомерКолонкиНачало, Строка, НомерКолонкиНачало);
				
				ДлительностьЗадачи = ПолучитьЗначениеПоКолонке(Строка, НомерКолонкиДлительность);
				
				СписокЗначений = ПолучитьСписокПредшественников(строка);
				
				СтруктураГраницы.Верх = Мин(СтруктураГраницы.Верх, Строка);
				СтруктураГраницы.Низ  = Макс(СтруктураГраницы.Низ, Строка);
				
				Если СписокЗначений.Количество() > 0 И НЕ СоответствиеОбработанныхСтрок.Количество() = 0 Тогда 
					МаксимальнаяДатаОкончания = Дата('00010101');
					
					Для Каждого ЭлементЗначения Из СписокЗначений Цикл
						СтрокаПредшественника = ЭлементЗначения.Начало;
						
						Если СтрокаПредшественника < 3 ИЛИ СтрокаПредшественника = Строка Тогда
							ТаблицаСвязей.Удалить(ЭлементЗначения);
							Продолжить;
						КонецЕсли;
						
						Если ЭлементЗначения.ВидСвязи = ВидыСвязей.ОН
							ИЛИ ЭлементЗначения.ВидСвязи = ВидыСвязей.ОО Тогда 
							ДатаОкончанияСтрока = тдПроект.Область(СтрокаПредшественника, НомерКолонкиОкончание, 
								СтрокаПредшественника, НомерКолонкиОкончание).Значение;
						Иначе
							ДатаОкончанияСтрока = тдПроект.Область(СтрокаПредшественника, НомерКолонкиНачало, 
								СтрокаПредшественника, НомерКолонкиНачало).Значение;
						КонецЕсли;
						
						Если ЭлементЗначения.ВидСвязи = ВидыСвязей.ОН
							 ИЛИ ЭлементЗначения.ВидСвязи = ВидыСвязей.НН Тогда 
							Если ЭлементЗначения.Запаздывание = 0 Тогда
								МаксимальнаяДатаОкончания = Макс(МаксимальнаяДатаОкончания, ДатаОкончанияСтрока);
							Иначе
								МаксимальнаяДатаОкончания = Макс(МаксимальнаяДатаОкончания, 
									РасчитатьОкончание(ДатаОкончанияСтрока, ЭлементЗначения.Запаздывание));
							КонецЕсли;
						Иначе
							Если ЭлементЗначения.Запаздывание = 0 Тогда
								МаксимальнаяДатаОкончания = Макс(МаксимальнаяДатаОкончания, 
									РасчитатьОкончание(ДатаОкончанияСтрока, -ДлительностьЗадачи));
							Иначе
								МаксимальнаяДатаОкончания = Макс(МаксимальнаяДатаОкончания, 
									РасчитатьОкончание(ДатаОкончанияСтрока, ЭлементЗначения.Запаздывание - ДлительностьЗадачи));
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					ОбластьНачало.Значение = СкорректироватьДатуНачала(МаксимальнаяДатаОкончания);	
					
					Если НЕ ПолныйПересчет Тогда
						ДлительностьИлиНачалоПриИзменении(Строка, Истина);
					КонецЕсли;
							
				КонецЕсли;
				
				Если ПолныйПересчет Тогда
					ДлительностьИлиНачалоПриИзменении(Строка, Истина);
				КонецЕсли;
				
				СписокСледующихЗадач = ПолучитьСписокСледующихЗадачПоСвязям(Строка);
				Для Каждого ЭлементЗначения Из СписокСледующихЗадач Цикл
					Если ЭтоСуммирующаяЗадача(Строка) Тогда
						
						ВерхняяНеСуммирующаяЗадача = Строка-1;
						Пока ЭтоСуммирующаяЗадача(ВерхняяНеСуммирующаяЗадача)  Цикл
							Если ВерхняяНеСуммирующаяЗадача = 3 Тогда
								ТаблицаСвязей.Удалить(ЭлементЗначения);
								Прервать;
							КонецЕсли;
							ВерхняяНеСуммирующаяЗадача = ВерхняяНеСуммирующаяЗадача - 1;
						КонецЦикла;
						
						Если ТаблицаСвязей.НайтиСтроки(Новый Структура("Начало, Конец", ВерхняяНеСуммирующаяЗадача, 
							ЭлементЗначения.Конец)).Количество() = 0 Тогда
							ЭлементЗначения.Начало = ВерхняяНеСуммирующаяЗадача;
						Иначе
							ТаблицаСвязей.Удалить(ЭлементЗначения);
						КонецЕсли;
					КонецЕсли;
					
					ЧисловоеЗначение = Число(ЭлементЗначения.Конец);
					Если СоответствиеОбработанныхСтрок.Получить(ЧисловоеЗначение) = Неопределено Тогда
						МассивНомеровСтрокДляПересчета.Добавить(ЧисловоеЗначение);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ПолныйПересчет Тогда
				СписокСледующихЗадач = ПолучитьСписокСледующихЗадачПоСвязям(Строка);
				Для Каждого ЭлементЗначения Из СписокСледующихЗадач Цикл
					ЧисловоеЗначение = Число(ЭлементЗначения.Конец);
					Если СоответствиеОбработанныхСтрок.Получить(ЧисловоеЗначение) = Неопределено Тогда
						МассивНомеровСтрокДляПересчета.Добавить(ЧисловоеЗначение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		
		КонецЕсли;	
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////
// Фильтры

#Область Фильтры

&НаКлиенте
Процедура ВыборЗначенияФильтра(Знач НомерКолонки)
	
	Если НомерКолонки = НомерКолонкиДлительность  Тогда
						
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(0, НСтр("ru = 'Все'"));
		СписокЗначений.Добавить(1, НСтр("ru = ' <= 1 дн.'"));
		СписокЗначений.Добавить(2, НСтр("ru = ' > 1 дн.'"));
		СписокЗначений.Добавить(3, НСтр("ru = ' <= недели'"));
		СписокЗначений.Добавить(4, НСтр("ru = ' > недели'"));
		СписокЗначений.Добавить(5, " <= ...");
		СписокЗначений.Добавить(6, " > ...");
		
		ОписаниеОповещанияВыборИзМеню = Новый ОписаниеОповещения("ОбработкаВыбораФильтраНаКлиенте", ЭтаФорма, 
			Новый Структура("НомерКолонки", НомерКолонки));
		ПоказатьВыборИзМеню(ОписаниеОповещанияВыборИзМеню, СписокЗначений, ); 
	ИначеЕсли НомерКолонки = НомерКолонкиНазвание Тогда
	
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(0, НСтр("ru = 'Все'"));
		СписокЗначений.Добавить(1, НСтр("ru = 'Равно....'"));
		СписокЗначений.Добавить(2, НСтр("ru = 'Содержит...'"));

		ОписаниеОповещанияВыборИзМеню = Новый ОписаниеОповещения("ОбработкаВыбораФильтраНаКлиенте", ЭтаФорма, 
			Новый Структура("НомерКолонки", НомерКолонки));
		ПоказатьВыборИзМеню(ОписаниеОповещанияВыборИзМеню, СписокЗначений, ); 
	ИначеЕсли НомерКолонки = НомерКолонкиНачало ИЛИ НомерКолонки = НомерКолонкиОкончание Тогда
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(0, НСтр("ru = 'Все'"));
		СписокЗначений.Добавить(1, НСтр("ru = 'Сегодня'"));
		СписокЗначений.Добавить(2, НСтр("ru = 'Завтра'"));
		СписокЗначений.Добавить(3, НСтр("ru = 'Текущая неделя'"));
		СписокЗначений.Добавить(4, НСтр("ru = 'Следующая неделя'"));
		СписокЗначений.Добавить(5, НСтр("ru = 'Текущий месяц'"));
		СписокЗначений.Добавить(6, НСтр("ru = 'Следующий месяц'"));
		СписокЗначений.Добавить(7, НСтр("ru = ' >= ...'"));
		СписокЗначений.Добавить(8, НСтр("ru = ' < ...'"));
		ОписаниеОповещанияВыборИзМеню = Новый ОписаниеОповещения("ОбработкаВыбораФильтраНаКлиенте", ЭтаФорма, 
			Новый Структура("НомерКолонки", НомерКолонки));
		ПоказатьВыборИзМеню(ОписаниеОповещанияВыборИзМеню, СписокЗначений, ); 
	ИначеЕсли НомерКолонки = НомерКолонкиПроцентЗавершения Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(0, НСтр("ru = 'Все'"));
		СписокЗначений.Добавить(3, " = 0%");
		СписокЗначений.Добавить(4, " = 100%");
		СписокЗначений.Добавить(1, " <= 50%");
		СписокЗначений.Добавить(2, " > 50%");
		СписокЗначений.Добавить(5, " <= ...");
		СписокЗначений.Добавить(6, " > ...");
		ОписаниеОповещанияВыборИзМеню = Новый ОписаниеОповещения("ОбработкаВыбораФильтраНаКлиенте", ЭтаФорма, 
			Новый Структура("НомерКолонки", НомерКолонки));
		ПоказатьВыборИзМеню(ОписаниеОповещанияВыборИзМеню, СписокЗначений, ); 
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФильтраНаКлиенте(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	НомерКолонки = ДополнительныеПараметры.НомерКолонки;
	ЭлементЗначения = РезультатВыбора;
	Если ЭлементЗначения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НомерКолонки = НомерКолонкиДлительность И (ЭлементЗначения.Значение = 5 ИЛИ ЭлементЗначения.Значение = 6) Тогда
		ОписаниеОповещанияВводаДительности = Новый ОписаниеОповещения("ОбработкаВыбораФильтраДлительностьНаКлиенте", 
			ЭтаФорма, Новый Структура("НомерКолонки, Значение", НомерКолонки, ЭлементЗначения.Значение));
		ПоказатьВводЧисла(ОписаниеОповещанияВводаДительности, , НСтр("ru = 'Введите длительность в днях'"), 15, 1);
		Возврат;
	ИначеЕсли НомерКолонки = НомерКолонкиНазвание  И (ЭлементЗначения.Значение = 1 ИЛИ ЭлементЗначения.Значение = 2) Тогда
		ОписаниеОповещанияВводаДительности = Новый ОписаниеОповещения("ОбработкаВыбораФильтраДлительностьНаКлиенте", 
			ЭтаФорма, Новый Структура("НомерКолонки, Значение", НомерКолонки, ЭлементЗначения.Значение));
		ПоказатьВводСтроки(ОписаниеОповещанияВводаДительности, , НСтр("ru = 'Введите искомую строку'"), 200);
		Возврат;
	ИначеЕсли (НомерКолонки = НомерКолонкиНачало ИЛИ НомерКолонки = НомерКолонкиОкончание) 
		И (ЭлементЗначения.Значение = 7 ИЛИ ЭлементЗначения.Значение = 8) Тогда
		ОписаниеОповещанияВводаДительности = Новый ОписаниеОповещения("ОбработкаВыбораФильтраДлительностьНаКлиенте", 
			ЭтаФорма, Новый Структура("НомерКолонки, Значение", НомерКолонки, ЭлементЗначения.Значение));
		ПоказатьВводДаты(ОписаниеОповещанияВводаДительности, ТекущаяДатаНаСервере(), 
			НСтр("ru = 'Введите длительность в днях'"), ЧастиДаты.Дата);
		Возврат;
	ИначеЕсли НомерКолонки = НомерКолонкиПроцентЗавершения 
		И (ЭлементЗначения.Значение = 5 ИЛИ ЭлементЗначения.Значение = 6) Тогда
		ОписаниеОповещанияВводаДительности = Новый ОписаниеОповещения("ОбработкаВыбораФильтраДлительностьНаКлиенте", 
			ЭтаФорма, Новый Структура("НомерКолонки, Значение", НомерКолонки, ЭлементЗначения.Значение));
		ПоказатьВводЧисла(ОписаниеОповещанияВводаДительности, , НСтр("ru = 'Введите процент завершения'"), 5, 2);
		Возврат;
	Иначе
		ОбработкаВыбораФильтраНаСервере(ДополнительныеПараметры.НомерКолонки, ЭлементЗначения.Значение);
		ОбновитьДиаграмму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФильтраДлительностьНаКлиенте(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	НомерКолонки = ДополнительныеПараметры.НомерКолонки;
	Значение = ДополнительныеПараметры.Значение;
	Если РезультатВыбора = Неопределено Тогда
		ДопЗначение = Неопределено;
	Иначе
		Попытка
			ДопЗначение = РезультатВыбора.Значение;
		Исключение
			ДопЗначение = РезультатВыбора;
		КонецПопытки
	КонецЕсли;
	
	ОбработкаВыбораФильтраНаСервере(ДополнительныеПараметры.НомерКолонки, Значение, ДопЗначение);
	ОбновитьДиаграмму();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораФильтраНаСервере(НомерКолонки, Значение, ДопЗначение = Неопределено)
				
		ИсточникДанных = Новый ОписаниеИсточникаДанных(тдПроект.Область(1, 1, ПоследняяСтрока, НомерКолонкиОписание));
		ТекущийФильтр = Новый ПостроительЗапроса;
		ТекущийФильтр.ИсточникДанных = ИсточникДанных;
		ТекущийФильтр.ЗаполнитьНастройки();
		Для Каждого СтрокаСохраненнойТаблицыОтбора Из ТекущийФильтрОтбор Цикл
			ЭлементОтбора = ТекущийФильтр.Отбор.Добавить(СтрокаСохраненнойТаблицыОтбора.Имя, 
				СтрокаСохраненнойТаблицыОтбора.Имя, СтрокаСохраненнойТаблицыОтбора.Имя);
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, СтрокаСохраненнойТаблицыОтбора);
		КонецЦикла;
				
		Если НомерКолонки = НомерКолонкиДлительность  Тогда
			
			ЭлементОтбора = ТекущийФильтр.Отбор.Найти("Длит_Дн_");
			Если ЭлементОтбора = Неопределено Тогда
				ЭлементОтбора = ТекущийФильтр.Отбор.Добавить("Длит_Дн_", "Длит_Дн_", "Длит_Дн_");
			КонецЕсли;
			
			Если Значение = 0 Тогда
				ЭлементОтбора.Использование = Ложь;
			Иначе
				ЭлементОтбора.Использование = Истина;
			КонецЕсли;
			
			Если Значение = 1 ИЛИ Значение = 3 ИЛИ Значение = 5 Тогда
				ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
			ИначеЕсли Значение = 2 ИЛИ Значение = 4 ИЛИ Значение = 6 Тогда
				ЭлементОтбора.ВидСравнения = ВидСравнения.Больше;
			КонецЕсли;
			
			Если Значение = 1 ИЛИ Значение = 2 Тогда
				ЭлементОтбора.Значение = 1;
			ИначеЕсли Значение = 3 ИЛИ Значение = 4 Тогда
				ЭлементОтбора.Значение = 5;
			ИначеЕсли (Значение = 5 ИЛИ Значение = 6)  Тогда
				ЭлементОтбора.Значение = ДопЗначение;
				ЭлементОтбора.Использование = НЕ ДопЗначение = Неопределено;
			КонецЕсли;
		ИначеЕсли НомерКолонки = НомерКолонкиНазвание Тогда
								
			ЭлементОтбора = ТекущийФильтр.Отбор.Найти("НазваниеЗадачи");
			Если ЭлементОтбора = Неопределено Тогда
				ЭлементОтбора = ТекущийФильтр.Отбор.Добавить("НазваниеЗадачи", "НазваниеЗадачи", "НазваниеЗадачи");
			КонецЕсли;
							
			Название = "";
			Если Значение = 0 Тогда
				ЭлементОтбора.Использование = Ложь;
			Иначе
				Если ЗначениеЗаполнено(ДопЗначение) Тогда
					ЭлементОтбора.Использование = Истина;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Если Значение = 1  Тогда
				ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
				ЭлементОтбора.Значение = ДопЗначение;
			ИначеЕсли Значение = 2 Тогда
				ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
				ЭлементОтбора.Значение = ДопЗначение;
			КонецЕсли;
			
		ИначеЕсли НомерКолонки = НомерКолонкиНачало ИЛИ НомерКолонки = НомерКолонкиОкончание Тогда
									
			Если НомерКолонки = НомерКолонкиНачало Тогда
				ЭлементОтбора = ТекущийФильтр.Отбор.Найти("Начало");
				Если ЭлементОтбора = Неопределено Тогда
					ЭлементОтбора = ТекущийФильтр.Отбор.Добавить("Начало", "Начало", "Начало");
				КонецЕсли;
			Иначе
				ЭлементОтбора = ТекущийФильтр.Отбор.Найти("Окончание");
				Если ЭлементОтбора = Неопределено Тогда
					ЭлементОтбора = ТекущийФильтр.Отбор.Добавить("Окончание", "Окончание", "Окончание");
				КонецЕсли;
			КонецЕсли;
			
			ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
			
			Если Значение = 7 Тогда
							
				Если ДопЗначение = Неопределено Тогда
					Возврат;
				Иначе
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ВидСравнения = ВидСравнения.БольшеИлиРавно;
					ЭлементОтбора.Значение  = НачалоДня(ДопЗначение);
				КонецЕсли;
			ИначеЕсли Значение = 8 Тогда
							
				Если ДопЗначение = Неопределено Тогда
					Возврат;
				Иначе
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
					ЭлементОтбора.Значение  = НачалоДня(ДопЗначение);
				КонецЕсли;
			ИначеЕсли Значение = 0  Тогда
				ЭлементОтбора.Использование = Ложь;
			ИначеЕсли Значение = 1  Тогда
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЗначениеС = НачалоДня(ТекущаяДатаСеанса());
				ЭлементОтбора.ЗначениеПо = КонецДня(ТекущаяДатаСеанса());
			ИначеЕсли Значение = 2  Тогда
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЗначениеС = НачалоДня(КонецДня(ТекущаяДатаСеанса()) + 1);
				ЭлементОтбора.ЗначениеПо = КонецДня(КонецДня(ТекущаяДатаСеанса()) + 1);
			ИначеЕсли Значение = 3  Тогда
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЗначениеС = НачалоНедели(ТекущаяДатаСеанса());
				ЭлементОтбора.ЗначениеПо = КонецДня(КонецНедели(ТекущаяДатаСеанса()));
			ИначеЕсли Значение = 4  Тогда
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЗначениеС = НачалоНедели(ТекущаяДатаСеанса() + 7 * 3600 * 24);
				ЭлементОтбора.ЗначениеПо = КонецДня(КонецНедели(ТекущаяДатаСеанса() + 7 * 3600 * 24));
			ИначеЕсли Значение = 5 Тогда
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЗначениеС  = НачалоМесяца(ТекущаяДатаСеанса());
				ЭлементОтбора.ЗначениеПо = КонецДня(КонецМесяца(ТекущаяДатаСеанса()));
			ИначеЕсли Значение = 6 Тогда
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЗначениеС  = НачалоМесяца(КонецМесяца(ТекущаяДатаСеанса()) + 3600*24);
				ЭлементОтбора.ЗначениеПо = КонецДня(КонецМесяца(КонецМесяца(ТекущаяДатаСеанса()) + 3600*24));
			КонецЕсли;
			
		ИначеЕсли НомерКолонки = НомерКолонкиПроцентЗавершения Тогда
			
			ЭлементОтбора = ТекущийФильтр.Отбор.Найти("_Завершения");
			Если ЭлементОтбора = Неопределено Тогда
				ЭлементОтбора = ТекущийФильтр.Отбор.Добавить("_Завершения", "_Завершения", "_Завершения");
			КонецЕсли;
			
			Если Значение = 0 Тогда
				ЭлементОтбора.Использование = Ложь;
			Иначе
				ЭлементОтбора.Использование = Истина;
			КонецЕсли;
			
			Если Значение = 1  ИЛИ Значение = 5 Тогда
				ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
			ИначеЕсли Значение = 2  ИЛИ Значение = 6 Тогда
				ЭлементОтбора.ВидСравнения = ВидСравнения.Больше;
			ИначеЕсли Значение = 3 ИЛИ Значение = 4 Тогда
				ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
			КонецЕсли;
			
			Если Значение = 1 ИЛИ Значение = 2 Тогда
				ЭлементОтбора.Значение = 50;
			ИначеЕсли Значение = 4 Тогда
				ЭлементОтбора.Значение = 100;
			ИначеЕсли Значение = 3 Тогда
				ЭлементОтбора.Значение = 0;
			ИначеЕсли (Значение = 5 ИЛИ Значение = 6)  Тогда
				Если НЕ ЗначениеЗаполнено(ДопЗначение) Тогда
					ЭлементОтбора.Использование = Ложь;
				Иначе
					ЭлементОтбора.Значение = ДопЗначение;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////////////////
		
		ЭлементОтбора = ТекущийФильтр.Отбор.Найти("_");
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = ТекущийФильтр.Отбор.Добавить("_", "_", "_");
			ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.Значение = "";
		КонецЕсли;
		
		Для Каждого ЭлементФильтра Из Фильтр Цикл
			Попытка
				НомерСтроки = Число(ЭлементФильтра._);
			Исключение
				Продолжить;
			КонецПопытки;
			тдПроект.Область(НомерСтроки + 2, , НомерСтроки + 2, ).Видимость = Истина;
		КонецЦикла;
					
		ТекущийФильтр.Выполнить();			
		пФильтр = ТекущийФильтр.Результат.Выгрузить();
		
		Запрос = Новый ПостроительЗапроса;
		Запрос.ИсточникДанных = ИсточникДанных;
		Запрос.ЗаполнитьНастройки();
		ЭлементОтбора = Запрос.Отбор.Добавить("_", "_", "_");
		ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение.ЗагрузитьЗначения(пФильтр.ВыгрузитьКолонку("_"));
		Запрос.Выполнить();			
		пФильтр = Запрос.Результат.Выгрузить();
		
		Для Каждого ЭлементФильтра Из пФильтр Цикл
			Попытка
				НомерСтроки = Число(ЭлементФильтра._);
			Исключение
				Продолжить;
			КонецПопытки;
			тдПроект.Область(НомерСтроки + 2, , НомерСтроки + 2, ).Видимость = Ложь;
		КонецЦикла;
			
		ОбновитьЦветКолонок(ТекущийФильтр);		
		ЗначениеВРеквизитФормы(пФильтр, "Фильтр");
		ТекущийФильтрОтбор.Очистить();
		Для Каждого СтрокаТаблицыОтбора Из ТекущийФильтр.Отбор Цикл
			СохраняемаСтрокаОтбора = ТекущийФильтрОтбор.Добавить();
			ЗаполнитьЗначенияСвойств(СохраняемаСтрокаОтбора, СтрокаТаблицыОтбора);
		КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьАвтофильтр(Команда)
	
	Если Фильтр.Количество()>0 Тогда
		ОтключитьАвтофильтрНаСервере();		
		ОбновитьДиаграмму();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьАвтофильтрНаСервере()
	
	ТекущийФильтрОтбор.Очистить();
	
	Для Каждого ЭлементФильтра Из Фильтр Цикл
		Попытка
			НомерСтроки = Число(ЭлементФильтра._);
		Исключение
			Продолжить;
		КонецПопытки;
		тдПроект.Область(НомерСтроки + 2, , НомерСтроки + 2, ).Видимость = Истина;
	КонецЦикла;
	
	Фильтр.Очистить();	
	ОбновитьЦветКолонок();

КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////
// Перетаскивание

#Область Перетаскивание

&НаКлиенте
Процедура тдПроектПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	пОбластьПриемникПриПеретаскивании = Область;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКодПеретаскиванияНаСервере(пВерх, пНиз, пВерхПриемник, пНизПриемник, КоличествоДобавляемыхСтрок)
	
	ВставитьОбластьНаСервере(пВерхПриемник, ,ПоследняяСтрока, ,пВерхПриемник + КоличествоДобавляемыхСтрок,,
		ПоследняяСтрока + КоличествоДобавляемыхСтрок);
		
	Если пВерхПриемник < пВерх Тогда
		пВерх 		=  пВерх + КоличествоДобавляемыхСтрок;
		пНиз  		=  пНиз  + КоличествоДобавляемыхСтрок;
		Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(пВерхПриемник,,пНизПриемник);
	Иначе				
		Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(пВерхПриемник-КоличествоДобавляемыхСтрок,,
			пНизПриемник - КоличествоДобавляемыхСтрок);
	КонецЕсли;			
	
	ВставитьОбластьНаСервере(пВерх, ,пНиз, , пВерхПриемник, ,пНизПриемник,);
	
КонецПроцедуры

&НаКлиенте
Процедура тдПроектОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Попытка
		СтандартнаяОбработка = Ложь;
		пВерх 	=  Макс(Элемент.ТекущаяОбласть.Верх, 3);
		пНиз  	=  Мин(Элемент.ТекущаяОбласть.Низ, ПоследняяСтрока);
		пЛево 	=  Макс(Элемент.ТекущаяОбласть.Лево, 1);
		пПраво 	= Элемент.ТекущаяОбласть.Право;
		Если пПраво = НомерКолонкиРесурсыПредставление Тогда
			пПраво = НомерКолонкиРесурсы;
		КонецЕсли;
	Исключение
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецПопытки;
	
	Если пОбластьПриемникПриПеретаскивании <> Неопределено Тогда
		Если Элемент.ТекущаяОбласть.Лево = 0 Тогда
			пВерхПриемник 	=  Макс(пОбластьПриемникПриПеретаскивании.Верх, 3);
			пНизПриемник  	=  пОбластьПриемникПриПеретаскивании.Низ;
			пЛевоПриемник 	=  пЛево;
			пПравоПриемник 	= пПраво;
			
			Если пВерх 		= пВерхПриемник Тогда
				Возврат;
			КонецЕсли;
			КоличествоДобавляемыхСтрок = (пНизПриемник - пВерхПриемник)+1;
			
			МинВерх 		= Мин(пВерх, пВерхПриемник);
			МаксНиз 		= Макс(пНиз , пНизПриемник);
			УдалитьДиапазонРисунков(МинВерх, ПоследняяСтрока);
			
			// Работа со связями
			НачальнаяСтрока = пВерхПриемник;
			БудемСвязыватьРаздвигаемуюОбласть = Ложь;
			Если (ПроверитьСтрокуВПредшественниках(НачальнаяСтрока, НачальнаяСтрока - 1) ИЛИ НачальнаяСтрока = 3) Тогда
				БудемСвязыватьРаздвигаемуюОбласть = Истина;
			КонецЕсли;
			
			СдвинутьСвязиВниз(НачальнаяСтрока, КоличествоДобавляемыхСтрок, ПоследняяСтрока + КоличествоДобавляемыхСтрок);  
			
			#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				тдПроект.ВставитьОбласть(тдПроект.Область(пВерхПриемник, ,ПоследняяСтрока),
					тдПроект.Область(пВерхПриемник + КоличествоДобавляемыхСтрок,,ПоследняяСтрока+КоличествоДобавляемыхСтрок));
				Если пВерхПриемник < пВерх Тогда
					пВерх 		=  пВерх + КоличествоДобавляемыхСтрок;
					пНиз  		=  пНиз  + КоличествоДобавляемыхСтрок;
					Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(пВерхПриемник,,пНизПриемник);
				Иначе				
					Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(пВерхПриемник - КоличествоДобавляемыхСтрок,,
						пНизПриемник - КоличествоДобавляемыхСтрок);
				КонецЕсли;			
				
				тдПроект.ВставитьОбласть(тдПроект.Область(пВерх,  ,пНиз,), тдПроект.Область(пВерхПриемник, ,пНизПриемник,));
			#Иначе
				ВыполнитьКодПеретаскиванияНаСервере(пВерх, пНиз, пВерхПриемник, пНизПриемник, КоличествоДобавляемыхСтрок);
			#КонецЕсли			
			
			тдПроект.Область(НачальнаяСтрока, НомерКолонкиПредшествинники,пНизПриемник,НомерКолонкиПредшествинники).Очистить();
			
			Если БудемСвязыватьРаздвигаемуюОбласть Тогда
				Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(НачальнаяСтрока-1, тдПроект.ТекущаяОбласть.Лево, 
					НачальнаяСтрока + КоличествоДобавляемыхСтрок);
				СоздатьСвязи(, Истина);
			КонецЕсли;
			
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
				СдвинутьСвязиВверх(пВерх, КоличествоДобавляемыхСтрок,ПоследняяСтрока + КоличествоДобавляемыхСтрок);
			КонецЕсли;
			
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
				
				#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
					тдПроект.УдалитьОбласть(тдПроект.Область(пВерх, , пНиз),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
				#Иначе
					УдалитьОбластьНаСервере(пВерх, , пНиз);
				#КонецЕсли
				
				Если пВерхПриемник < пВерх Тогда
					Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(пВерхПриемник,,пНизПриемник);
				Иначе
					Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(пВерхПриемник - КоличествоДобавляемыхСтрок,,
						пНизПриемник - КоличествоДобавляемыхСтрок);
				КонецЕсли;
			Иначе
				МаксНиз = Макс(МаксНиз, ПоследняяСтрока + КоличествоДобавляемыхСтрок-1);
				Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(пВерхПриемник,,пНизПриемник);
			КонецЕсли;
			
			НастроитьСтроку(МинВерх, МаксНиз, Истина);
            ПолеПроектаПриИзмененииСодержимогоОбласти(Неопределено, тдПроект.Область(МинВерх, пЛево, МаксНиз, пПраво));
			
		Иначе
			пВерхПриемник 	=  Макс(пОбластьПриемникПриПеретаскивании.Верх, 3);
			пНизПриемник  	=  пОбластьПриемникПриПеретаскивании.Низ;
			пЛевоПриемник 	=  пЛево;
			пПравоПриемник 	= пПраво;
			
			НастроитьСтроку(пВерхПриемник, пНизПриемник, Истина);
			
			#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				тдПроект.ВставитьОбласть(тдПроект.Область(пВерх, пЛево ,пНиз,пПраво), тдПроект.Область(пВерхПриемник, 
					пЛевоПриемник ,пНизПриемник,пПравоПриемник));
			#Иначе
				ВставитьОбластьНаСервере(пВерх, пЛево ,пНиз,пПраво,пВерхПриемник, пЛевоПриемник, пНизПриемник, пПравоПриемник);
			#КонецЕсли
			
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
				тдПроект.Область(пВерх, пЛево, пНиз, ).Очистить();
			КонецЕсли;
			
			МинВерх 		= Мин(пВерх, пВерхПриемник);
			МаксНиз 		= Макс(пНиз , пНизПриемник);
			
			НастроитьСтроку(пВерх, пНиз, Истина);
			
	        ПолеПроектаПриИзмененииСодержимогоОбласти(Неопределено, тдПроект.Область(МинВерх, пЛево, МаксНиз, пПраво));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура тдПроектПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////
// Отчеты

#Область Отчеты

&НаКлиенте
Процедура Сформировать(Команда)
	
	ИнициализацияОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияОтчета()
	
	ТабличныйДокументОтчет.Очистить();
	СоответствиеЗатратПоНеделям = Новый Соответствие;
	СоответствиеЗатратПоМесяцам = Новый Соответствие;
	
	Рисунок   = тдПроект.Рисунки["ДиаграммаГанта"];
	Диаграмма = Рисунок.Объект;

	НачалоИнтервала = Диаграмма.НачалоПолногоИнтервала;
	КонецИнтервала = Диаграмма.КонецПолногоИнтервала;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НазваниеЗадачи", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(150)));
	ТаблицаЗначений.Колонки.Добавить("НазваниеЗадачиБезНомераСтроки", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(150)));
	
	ТаблицаЗначений.Колонки.Добавить("Показатель", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаЗначений.Колонки.Добавить("ВидПоказателя");
	ТаблицаЗначений.Колонки.Добавить("Неделя");
	ТаблицаЗначений.Колонки.Добавить("Месяц");
	ТаблицаЗначений.Колонки.Добавить("Ресурс");
	
	Для н = 3 По ПоследняяСтрока Цикл
		Если тдПроект.Область(н, НомерКолонкиНазвание, н, НомерКолонкиНазвание).Отступ < тдПроект.Область(Число(н)+1, 
			НомерКолонкиНазвание, Число(н)+1, НомерКолонкиНазвание).Отступ Тогда
			Продолжить;
		КонецЕсли;
		НазваниеЗадачиБезНомераСтроки= тдПроект.Область(н, НомерКолонкиНазвание, н, НомерКолонкиНазвание).Текст;
		НазваниеЗадачи	= Формат(н, "ЧЦ=7; ЧВН=; ЧГ=0") + НазваниеЗадачиБезНомераСтроки;
		
		НачалоИнтервала	= тдПроект.Область(н, НомерКолонкиНачало, н, НомерКолонкиНачало).Значение;
		пОкончание 		= тдПроект.Область(н, НомерКолонкиОкончание, н, НомерКолонкиОкончание).Значение;
		Длительность	= тдПроект.Область(н, НомерКолонкиДлительность, н, НомерКолонкиДлительность).Значение;;
		Затраты     	= тдПроект.Область(н, НомерКолонкиЗатраты, н, НомерКолонкиЗатраты).Значение;;
		Стоимость     	= тдПроект.Область(н, НомерКолонкиСтоимость, н, НомерКолонкиСтоимость).Значение;
		ЗатратыФакт     = тдПроект.Область(н, НомерКолонкиЗатратыФакт, н, НомерКолонкиЗатратыФакт).Значение;
		СтоимостьФакт	= тдПроект.Область(н, НомерКолонкиСтоимостьФакт, н, НомерКолонкиСтоимостьФакт).Значение;
					
		Значение = тдПроект.Область(н, НомерКолонкиGUID, н, НомерКолонкиGUID).Текст;
		Если ПустаяСтрока(Значение) Тогда
			GUID_Строки = Новый УникальныйИдентификатор();
		Иначе
			GUID_Строки = Новый УникальныйИдентификатор(Значение);
		КонецЕсли;		
		ТаблицаРесурсов = ТаблицаРесурсовЗадачи.НайтиСтроки(Новый Структура("GUID_Задачи", GUID_Строки));
		
		Для Каждого СтрокаРесурсовЗадачи Из ТаблицаРесурсов Цикл
			Если ЗначениеЗаполнено(СтрокаРесурсовЗадачи.GUID_Ресурса) Тогда
				МассивРесурсов = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", 
					СтрокаРесурсовЗадачи.GUID_Ресурса));
				Если МассивРесурсов.Количество() > 0 Тогда
					СтрокаТаблицыРесурсов = МассивРесурсов[0];
				КонецЕсли;
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.НазваниеЗадачи = НазваниеЗадачи;
				НоваяСтрока.НазваниеЗадачиБезНомераСтроки = НазваниеЗадачиБезНомераСтроки;
				НоваяСтрока.Неделя = НачалоНедели(НачалоИнтервала);
				НоваяСтрока.Месяц  = НачалоМесяца(НачалоИнтервала);
				НоваяСтрока.Ресурс = СтрокаРесурсовЗадачи.НазваниеРесурса;
				НоваяСтрока.ВидПоказателя = "Затраты (план)";
				
				Если СтрокаТаблицыРесурсов.ТипРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой") Тогда
					Затраты = (Длительность * Объект.КоличествоРабочихЧасовВДне * (СтрокаРесурсовЗадачи.Единицы / 100)
						* СтрокаТаблицыРесурсов.СтоимостьЗатрат) + СтрокаТаблицыРесурсов.ЗатратыНаИспользование;
				Иначе
					Затраты = (СтрокаРесурсовЗадачи.Единицы * СтрокаТаблицыРесурсов.СтоимостьЗатрат) 
						+ СтрокаТаблицыРесурсов.ЗатратыНаИспользование;
				КонецЕсли;
				НоваяСтрока.Показатель = Затраты;
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.НазваниеЗадачи = НазваниеЗадачи;
				НоваяСтрока.НазваниеЗадачиБезНомераСтроки = НазваниеЗадачиБезНомераСтроки;
				НоваяСтрока.Неделя = НачалоНедели(НачалоИнтервала);
				НоваяСтрока.Месяц  = НачалоМесяца(НачалоИнтервала);
				НоваяСтрока.Ресурс = СтрокаРесурсовЗадачи.НазваниеРесурса;
				НоваяСтрока.ВидПоказателя = "Отпускная стоимость (план)";
				
				Если СтрокаТаблицыРесурсов.ТипРесурса = ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой") Тогда
					Стоимость = (Длительность * Объект.КоличествоРабочихЧасовВДне * (СтрокаРесурсовЗадачи.Единицы / 100)
						* СтрокаТаблицыРесурсов.ОтпускнаяСтоимость) + СтрокаТаблицыРесурсов.СтоимостьНаИспользование;
				Иначе
					Стоимость = (СтрокаРесурсовЗадачи.Единицы * СтрокаТаблицыРесурсов.ОтпускнаяСтоимость) 
						+ СтрокаТаблицыРесурсов.СтоимостьНаИспользование;
				КонецЕсли;
				НоваяСтрока.Показатель = Стоимость;

			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.НазваниеЗадачи = НазваниеЗадачи;
		НоваяСтрока.НазваниеЗадачиБезНомераСтроки = НазваниеЗадачиБезНомераСтроки;
		НоваяСтрока.Неделя = НачалоНедели(НачалоИнтервала);
		НоваяСтрока.Месяц  = НачалоМесяца(НачалоИнтервала);
		НоваяСтрока.Ресурс = " Другие ресурсы";
		НоваяСтрока.Показатель 	= тдПроект.Область(н, НомерКолонкиДопЗатраты, н, НомерКолонкиДопЗатраты).Значение;;
		НоваяСтрока.ВидПоказателя = "Затраты (план)";
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.НазваниеЗадачи = НазваниеЗадачи;
		НоваяСтрока.НазваниеЗадачиБезНомераСтроки = НазваниеЗадачиБезНомераСтроки;
		НоваяСтрока.Неделя = НачалоНедели(НачалоИнтервала);
		НоваяСтрока.Месяц  = НачалоМесяца(НачалоИнтервала);
		НоваяСтрока.Ресурс = " Другие ресурсы";
		НоваяСтрока.Показатель 	= тдПроект.Область(н, НомерКолонкиДопСтоимость, н, НомерКолонкиДопСтоимость).Значение;;;
		НоваяСтрока.ВидПоказателя = "Отпускная стоимость (план)";
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.НазваниеЗадачи = НазваниеЗадачи;
		НоваяСтрока.НазваниеЗадачиБезНомераСтроки = НазваниеЗадачиБезНомераСтроки;
		НоваяСтрока.Неделя = НачалоНедели(НачалоИнтервала);
		НоваяСтрока.Месяц  = НачалоМесяца(НачалоИнтервала);
		НоваяСтрока.Ресурс = " Другие ресурсы";
		НоваяСтрока.Показатель 	= тдПроект.Область(н, НомерКолонкиЗатратыФакт, н, НомерКолонкиЗатратыФакт).Значение;;;
		НоваяСтрока.ВидПоказателя = "Затраты (факт)";
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.НазваниеЗадачи = НазваниеЗадачи;
		НоваяСтрока.НазваниеЗадачиБезНомераСтроки = НазваниеЗадачиБезНомераСтроки;
		НоваяСтрока.Неделя = НачалоНедели(НачалоИнтервала);
		НоваяСтрока.Месяц  = НачалоМесяца(НачалоИнтервала);
		НоваяСтрока.Ресурс = " Другие ресурсы";
		НоваяСтрока.Показатель 	= тдПроект.Область(н, НомерКолонкиСтоимостьФакт, н, НомерКолонкиСтоимостьФакт).Значение;;;
		НоваяСтрока.ВидПоказателя = "Отпускная стоимость (факт)";
					
	КонецЦикла;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("СхемаКомпоновкиДанных");
			
	Настройки = Объект.КомпоновщикНастроек.ПолучитьНастройки();//Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки);
	   
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Новый Структура("ТЗ_Gant", ТаблицаЗначений));


	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокументОтчет);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	БылоПереключениеНаГлавнуюСтраницу = Ложь;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////
// Планировщик

#Область Планировщик

&НаКлиенте
Процедура ПерейтиНаСтраницуКалендарь(Команда)
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаКалендарь Тогда
		Возврат;
	Иначе
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаКалендарь;
		Элементы.ПерейтиНаСтраницуДиаграммыГанта.ЦветФона = ЦветФонаКнопки;
		Элементы.ПерейтиНаСтраницуОтчетов.ЦветФона 		  = ЦветФонаКнопки;
		Элементы.ПерейтиНаСтраницуРесурсов.ЦветФона 	  = ЦветФонаКнопки;
		Элементы.ПерейтиНаСтраницуКалендарь.ЦветФона 	  = ЦветФонаФормы;
		
		НастроитьПланировщик();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПланировщик()
	
	ПланировщикОтображатьНеРабочиеДни = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПланировщикПериодС) Тогда
		ДатаНачалаПервойЗадачи = ПолучитьЗначениеПоКолонке(3, НомерКолонкиНачало);
		Если НЕ ЗначениеЗаполнено(ДатаНачалаПервойЗадачи) Тогда
			ДатаНачалаПервойЗадачи = ТекущаяДатаНаСервере();
		КонецЕсли;
		ПланировщикПериодС = НачалоНедели(ДатаНачалаПервойЗадачи);
		ПланировщикПериодПо = ?(ПланировщикОтображатьНеРабочиеДни = Истина, КонецНедели(ПланировщикПериодС), 
			ВернутьДатуСУчетомВыходных(КонецНедели(ПланировщикПериодС), Истина));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПланировщикРежимОтображения) Тогда
		ПланировщикРежимОтображения = НСтр("ru = 'Две недели'");
		ПланировщикПериодПо = (ПланировщикПериодС + 14 * 24 * 3600) - 1;
	КонецЕсли;
	
	Планировщик.ШкалаВремени.Элементы[0].Метки.Очистить();
	Планировщик.ШкалаВремени.Элементы[1].Метки.Очистить();
	Планировщик.ШкалаВремени.Элементы[3].Метки.Очистить();
	
	Если ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - месяц'") Тогда
		ПланировщикОтображатьВРазрезеРесурсов = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
		Планировщик.КратностьПериодическогоВарианта = 1;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Ложь;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='MMMM yyyy ""г.""'";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[1];
		МаксимальнаяДлинаВехи = 20;
	ИначеЕсли ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - неделями'") Тогда
		ПланировщикОтображатьВРазрезеРесурсов = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
		Планировщик.КратностьПериодическогоВарианта = 1;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Истина;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dd.MM.yyyy ""г.""'";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[0];
		МаксимальнаяДлинаВехи = 40;
	ИначеЕсли ПланировщикРежимОтображения = НСтр("ru = 'Две недели'") Тогда
		ПланировщикОтображатьВРазрезеРесурсов = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
		Планировщик.КратностьПериодическогоВарианта = 1;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Истина;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dd.MM.yyyy ""г.""'";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[0];
		МаксимальнаяДлинаВехи = 40;
	ИначеЕсли ПланировщикРежимОтображения = НСтр("ru = 'Месяц'") Тогда
		ПланировщикОтображатьВРазрезеРесурсов = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = ЛОжь;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Ложь;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ=' '";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[3];
		МаксимальнаяДлинаВехи = 40;
	КонецЕсли;
	
	Планировщик.НачалоПериодаОтображения = НачалоДня(ПланировщикПериодС) 
		+ (Час(Объект.НачалоРабочегоДня) * 3600) + (Минута(Объект.НачалоРабочегоДня) * 60);
	Планировщик.КонецПериодаОтображения  = НачалоДня(ПланировщикПериодПо) 
		+ (Час(Объект.НачалоРабочегоДня) * 3600) + (Минута(Объект.НачалоРабочегоДня) * 60) 
		+ Объект.КоличествоРабочихЧасовВДне * 3600 - 1;
	Планировщик.ТекущиеПериодыОтображения.Очистить();	
	
	пТекущийПериод = ПланировщикПериодС;
	Планировщик.ИнтервалыФона.Очистить();
	Пока пТекущийПериод < ПланировщикПериодПо  + 24*3600 Цикл
		Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоДня(пТекущийПериод) 
			+ (Час(Объект.НачалоРабочегоДня) * 3600) + (Минута(Объект.НачалоРабочегоДня) * 60), 
			НачалоДня(пТекущийПериод) + (Час(Объект.НачалоРабочегоДня) * 3600) 
			+ (Минута(Объект.НачалоРабочегоДня) * 60) + Объект.КоличествоРабочихЧасовВДне * 3600 - 1);
		Если (НЕ Объект.СубботаРабочий И ДеньНедели(пТекущийПериод) =6) 
			ИЛИ (НЕ Объект.ВоскресеньеРабочий И ДеньНедели(пТекущийПериод) =7) Тогда
			ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(НачалоДня(пТекущийПериод) 
				+ (Час(Объект.НачалоРабочегоДня) * 3600) + (Минута(Объект.НачалоРабочегоДня) * 60),	НачалоДня(пТекущийПериод) 
				+ (Час(Объект.НачалоРабочегоДня) * 3600) 
				+ (Минута(Объект.НачалоРабочегоДня) * 60) + Объект.КоличествоРабочихЧасовВДне * 3600-1) ;
			ИнтервалФона.Цвет = Новый Цвет(255, 240, 240);
		ИначеЕсли (ПланировщикРежимОтображения = НСтр("ru = 'Месяц'"))
			И Месяц(пТекущийПериод)%2 = 0 Тогда
			ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(НачалоДня(пТекущийПериод) 
				+ (Час(Объект.НачалоРабочегоДня) * 3600) + (Минута(Объект.НачалоРабочегоДня) * 60), 
				НачалоДня(пТекущийПериод) + (Час(Объект.НачалоРабочегоДня) * 3600) 
				+ (Минута(Объект.НачалоРабочегоДня) * 60) + Объект.КоличествоРабочихЧасовВДне * 3600-1) ;
			ИнтервалФона.Цвет = Новый Цвет(252, 252, 247);
		ИначеЕсли НЕ (ПланировщикРежимОтображения = НСтр("ru = 'Месяц'") 
			ИЛИ ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - месяц'"))
			И ДеньНедели(пТекущийПериод) % 2 = 0 Тогда
			ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(НачалоДня(пТекущийПериод) 
				+ (Час(Объект.НачалоРабочегоДня) * 3600) + (Минута(Объект.НачалоРабочегоДня) * 60), 
				НачалоДня(пТекущийПериод) + (Час(Объект.НачалоРабочегоДня) * 3600) 
				+ (Минута(Объект.НачалоРабочегоДня) * 60) + Объект.КоличествоРабочихЧасовВДне * 3600-1) ;
			ИнтервалФона.Цвет = Новый Цвет(252, 252, 248);
		КонецЕсли;
		пТекущийПериод = пТекущийПериод + 24*3600;
	КонецЦикла;
	
	МассивДляОбходаИзмерений = Новый Массив;
	Планировщик.Измерения.Очистить();
	Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
		Измерения =  Планировщик.Измерения.Добавить("Ресурсы");			
				
		Для Каждого ЭлементМассиваРесурсов Из ТабличноеПолеРесурсы Цикл
			Если ЭлементМассиваРесурсов.ТипРесурса =ПредопределенноеЗначение("Перечисление.ТипыРесурсовПроектов.Трудовой") Тогда
				ЭлементИзмеренеия = Измерения.Элементы.Добавить(ЭлементМассиваРесурсов.GUID_Ресурса);
				ЭлементИзмеренеия.Текст = Лев(ЭлементМассиваРесурсов.НазваниеРесурса + "                        ", 22);
				МассивДляОбходаИзмерений.Добавить(ЭлементМассиваРесурсов.НазваниеРесурса);
			КонецЕсли;
		КонецЦикла;			
		
		
		ЭлементИзмеренеия = Измерения.Элементы.Добавить(НСтр("ru = '<Без ресурсов>'"));
		ЭлементИзмеренеия.Текст = НСтр("ru = '<Без ресурсов>'");
	КонецЕсли;
	МассивДляОбходаИзмерений.Добавить(НСтр("ru = '<Без ресурсов>'"));
	
	// План-факт
	
	// Элементы
	Планировщик.Элементы.Очистить();
	
	Для НомерСтроки = 3 По ПоследняяСтрока Цикл
		НачалоЗадачи 	= ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиНачало);
		ОкончанияЗадачи = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиОкончание);
		
		Если НачалоЗадачи < ПланировщикПериодПо И ОкончанияЗадачи > ПланировщикПериодС И НЕ ЭтоСуммирующаяЗадача(НомерСтроки) Тогда
			НазваниеЗадачи  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиНазвание);
			Веха 			  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиВеха);
			
			Если Веха ИЛИ (НачалоЗадачи = ОкончанияЗадачи) Тогда
				МеткаУжеЕсть = Ложь;
				Для Каждого Метка Из ШкалаВремениДни.Метки Цикл
					Если Метка.Дата = НачалоЗадачи Тогда
						Метка.Текст		  = Метка.Текст + ", " + ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиНазвание);
						МеткаУжеЕсть = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если МеткаУжеЕсть = Ложь Тогда
					Метка = ШкалаВремениДни.Метки.Добавить(НачалоЗадачи);
					Метка.Текст		  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиНазвание);
					Метка.Расшифровка = Метка.Текст;
					Метка.ЦветТекста  = WebЦвета.Черный;
					Метка.ЦветЛинии   = WebЦвета.Черный;
				КонецЕсли;
				
				Если СтрДлина(Метка.Текст) > МаксимальнаяДлинаВехи Тогда
					Метка.Текст = СокрЛП(Лев(Метка.Текст,МаксимальнаяДлинаВехи)) + "...";
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ПроцентЗавершения = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиПроцентЗавершения);
			РесурсыЗадачи 	  = ПолучитьСписокТрудовыхРесурсовЗадачи(НомерСтроки);
			Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
				РесурсыЗадачиДляИзмерений 	  = ПолучитьСписокТрудовыхРесурсовЗадачи(НомерСтроки);
			Иначе 
				РесурсыЗадачиДляИзмерений 	  = Новый Массив;
			КонецЕсли;
			
			Если РесурсыЗадачиДляИзмерений.Количество() = 0 Тогда
				РесурсыЗадачиДляИзмерений.Добавить(Новый Структура("GUID_Ресурса", НСтр("ru = '<Без ресурсов>'")));
			КонецЕсли;
			
			Описание 		  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиОписание);
			
			Для Каждого ЭлементИзмерения Из РесурсыЗадачиДляИзмерений Цикл
				
				НовыйЭлемент = Планировщик.Элементы.Добавить(НачалоЗадачи, ?(ОкончанияЗадачи = НачалоЗадачи, 
					НачалоЗадачи + 3600, ОкончанияЗадачи));
							
				Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
					СоответствиеЗначений = Новый Соответствие;
					СоответствиеЗначений.Вставить("Ресурсы", ЭлементИзмерения.GUID_Ресурса);
					НовыйЭлемент.ЗначенияИзмерений  = Новый ФиксированноеСоответствие(СоответствиеЗначений);
				КонецЕсли;
				НовыйЭлемент.Значение = НомерСтроки;
				
				СформироватьНазваниеЗадачиИПодсказкуДляПланировщика(НомерСтроки, НовыйЭлемент, НазваниеЗадачи, 
					РесурсыЗадачи, Описание);
				
				Если ПроцентЗавершения = 100 Тогда
					НовыйЭлемент.ЦветФона = ЦветФонаЗавершенныхЗадач; 
					НовыйЭлемент.ЦветТекста=ЦветТекстаЗавершенныхЗадач;
					Если Не (ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - месяц'")
						ИЛИ ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - неделями'")) Тогда
						НовыйЭлемент.Картинка = БиблиотекаКартинок.ВыполнитьЗадачу;
					КонецЕсли;
					
				ИначеЕсли ПроцентЗавершения > 0 Тогда
					НовыйЭлемент.ЦветФона = ЦветФонаВыполняющихсяЗадач; 
					НовыйЭлемент.ЦветТекста=ЦветТекстаВыполняющихсяЗадач;
					Если Не (ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - месяц'")
						ИЛИ ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - неделями'")) Тогда
						НовыйЭлемент.Картинка = БиблиотекаКартинок.СформироватьОтчет;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНазваниеЗадачиИПодсказкуДляПланировщика(Знач НомерСтроки, НовыйЭлемент, Знач НазваниеЗадачи,
	Знач РесурсыЗадачи, Знач Описание)
	
	НовыйЭлемент.Текст = "" + (НомерСтроки - 2) + ": " + НазваниеЗадачи;
	СтрокаРесурсы = "";
	Если РесурсыЗадачи.Количество() > 0 Тогда
		Для Каждого РесурсЗадачи Из РесурсыЗадачи Цикл
			СтрокаРесурсы = СтрокаРесурсы + РесурсЗадачи.НазваниеРесурса + ", ";
		КонецЦикла;
		
		СтрокаРесурсы = Лев(СтрокаРесурсы, СтрДлина(СтрокаРесурсы)-2);
	КонецЕсли;
	
	Если ПланировщикОтображатьРесурсы И ЗначениеЗаполнено(СтрокаРесурсы) 
		И ПланировщикОтображатьВРазрезеРесурсов = Ложь Тогда
		НовыйЭлемент.Текст = НовыйЭлемент.Текст + Символы.ПС + "["+СтрокаРесурсы+"]";
	КонецЕсли;
	
	#Область ОтображениеСвязе
	
	
	Предшественники = ПолучитьСписокПредшественников(НомерСтроки);
	СледующиеЗадачи = ПолучитьСписокСледующихЗадачПоСвязям(НомерСтроки);
	СтрокаСвязи = "";
	Если Предшественники.Количество() > 0 ИЛИ СледующиеЗадачи.Количество() > 0 Тогда
		
		Для Каждого СтрокаПредшественники Из Предшественники Цикл
			СтрокаСвязи = СтрокаСвязи + (СтрокаПредшественники.Начало-2) + ",";
		КонецЦикла;
		
		Если СтрДлина(СтрокаСвязи) > 0 Тогда
			СтрокаСвязи = Лев(СтрокаСвязи, СтрДлина(СтрокаСвязи)-1) + "→"; //"─►";
		КонецЕсли;
		СтрокаСвязи = СтрокаСвязи + "{ " + (НомерСтроки-2) + " }";
		
		Если СледующиеЗадачи.Количество() > 0 Тогда
			СтрокаСвязи = СтрокаСвязи + "→";//"─►";
		КонецЕсли;
		
		Для Каждого СтрокаСледующиеЗадачи Из СледующиеЗадачи Цикл
			СтрокаСвязи = СтрокаСвязи + (СтрокаСледующиеЗадачи.Конец-2) + ",";
		КонецЦикла;
		
		Если СледующиеЗадачи.Количество() > 0 Тогда
			СтрокаСвязи = Лев(СтрокаСвязи, СтрДлина(СтрокаСвязи)-1);
		КонецЕсли;
		Если ПланировщикОтображатьСвязи Тогда
			НовыйЭлемент.Текст = НовыйЭлемент.Текст + Символы.ПС + "["+СтрокаСвязи+"]";
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	НовыйЭлемент.Подсказка = "" + (НомерСтроки-2) + ": " + НазваниеЗадачи;
	Если ЗначениеЗаполнено(СтрокаРесурсы) Тогда
		НовыйЭлемент.Подсказка = НовыйЭлемент.Подсказка + Символы.ПС + Символы.ПС 
			+ СтрШаблон(НСтр("ru = 'Ресурсы:   %1'"), СтрокаРесурсы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСвязи) Тогда
		НовыйЭлемент.Подсказка = НовыйЭлемент.Подсказка + Символы.ПС + Символы.ПС + "Связи: " 
			+ Символы.Таб + "    " + СтрокаСвязи;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Описание) Тогда
		НовыйЭлемент.Подсказка = НовыйЭлемент.Подсказка + Символы.ПС + Символы.ПС 
			+ СтрШаблон(НСтр("ru = 'Описание: %1'"), Описание);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПериодСПриИзменении(Элемент)
	НастроитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПериодПоПриИзменении(Элемент)
	НастроитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикОтображатьВРазрезеРесурсовПриИзменении(Элемент)
	НастроитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикОтображатьНеРабочиеДниПриИзменении(Элемент)
	НастроитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикРежимОтображенияПриИзменении(Элемент)
	Если ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - месяц'") Тогда
		ПланировщикПериодС = НачалоМесяца(ПланировщикПериодС);
		ПланировщикПериодПо = КонецМесяца(ПланировщикПериодС);
	ИначеЕсли ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - неделями'") Тогда
		ПланировщикПериодС  = НачалоНедели(ПланировщикПериодС);
		ПланировщикПериодПо = (ПланировщикПериодС + 7*24*3600)-1;
	ИначеЕсли ПланировщикРежимОтображения = НСтр("ru = 'Две недели'") Тогда
		ПланировщикПериодС = НачалоНедели(ПланировщикПериодС);
		ПланировщикПериодПо = (ПланировщикПериодС + 14*24*3600)-1;
	ИначеЕсли ПланировщикРежимОтображения = НСтр("ru = 'Месяц'") Тогда
		ПланировщикПериодС = НачалоНедели(ПланировщикПериодС);
		ПланировщикПериодПо = (ПланировщикПериодС + 35*24*3600)-1;
	КонецЕсли;

	НастроитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПериодВперед(Команда)
	
	Если ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - месяц'") Тогда
		ПланировщикПериодС = ДобавитьМесяц(ПланировщикПериодС,1);
		ПланировщикПериодПо = КонецМесяца(ПланировщикПериодС);
	ИначеЕсли ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - неделями'") Тогда
		ПланировщикПериодС  = КонецНедели(ПланировщикПериодС)+1;
		ПланировщикПериодПо = ПланировщикПериодПо + (7 * 24*3600);
	ИначеЕсли ПланировщикРежимОтображения = НСтр("ru = 'Две недели'") Тогда
		ПланировщикПериодС = КонецНедели(ПланировщикПериодС)+1;;
		ПланировщикПериодПо = (ПланировщикПериодС + 14*24*3600)-1;
	ИначеЕсли ПланировщикРежимОтображения = НСтр("ru = 'Месяц'") Тогда
		ПланировщикПериодС = (ПланировщикПериодС + 28*24*3600);
		ПланировщикПериодПо = (ПланировщикПериодС + 35*24*3600)-1;
	КонецЕсли;
	НастроитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПериодНазад(Команда)
	
	Если ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - месяц'") Тогда
		ПланировщикПериодС = ДобавитьМесяц(ПланировщикПериодС,-1);
		ПланировщикПериодПо = КонецМесяца(ПланировщикПериодС);
	ИначеЕсли ПланировщикРежимОтображения = НСтр("ru = 'По ресурсам - неделями'") Тогда
		ПланировщикПериодС  = НачалоНедели(НачалоНедели(ПланировщикПериодС)-1);
		ПланировщикПериодПо = ПланировщикПериодПо - (7 * 24*3600);
	ИначеЕсли ПланировщикРежимОтображения = НСтр("ru = 'Две недели'") Тогда
		ПланировщикПериодС = НачалоНедели(НачалоНедели(ПланировщикПериодС)-1);
		ПланировщикПериодПо = (ПланировщикПериодС + 14*24*3600)-1;
	ИначеЕсли ПланировщикРежимОтображения = НСтр("ru = 'Месяц'") Тогда
		ПланировщикПериодС = (ПланировщикПериодС - 28*24*3600);
		ПланировщикПериодПо = (ПланировщикПериодС + 35*24*3600)-1;
	КонецЕсли;
	НастроитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НомерСтроки = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки,
		НомерКолонкиНазвание);
	ОткрытьФормуЗадачи(ПланировщикОтображатьВРазрезеРесурсов);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьПозициюПоследнейЗадачи()
	
	НомерСтроки = ПоследняяСтрока;
	Пока НомерСтроки >= 3 Цикл
		Если ЗначениеЗаполнено(тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки,
			НомерКолонкиНазвание).Текст) Тогда
			Прервать;
		КонецЕсли;
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
	Возврат НомерСтроки;
	
КонецФункции

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НовыйЭлемент = Истина Тогда
		ЭлементПланировщика = Элементы.Планировщик.ВыделенныеЭлементы[0];
		НомерСтроки = ОпределитьПозициюПоследнейЗадачи()+1;
		НастроитьСтроку(НомерСтроки,НомерСтроки, Истина);
		тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки, 
			НомерКолонкиНазвание).Текст = Элементы.Планировщик.ВыделенныеЭлементы[0].Текст;
		тдПроект.Область(НомерСтроки, НомерКолонкиНачало, НомерСтроки, 
			НомерКолонкиНачало).Значение = Элементы.Планировщик.ВыделенныеЭлементы[0].Начало;
		тдПроект.Область(НомерСтроки, НомерКолонкиОкончание, НомерСтроки, 
			НомерКолонкиОкончание).Значение = Элементы.Планировщик.ВыделенныеЭлементы[0].Конец;
		ОкончаниеПриИзменении(НомерСтроки, Истина);
		Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки, 
			НомерКолонкиНазвание);
		
		GUID_Ресурса = ЭлементПланировщика.ЗначенияИзмерений.Получить("Ресурсы");
		Если Не GUID_Ресурса = Неопределено Тогда
			НайденныеРесурсы = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", GUID_Ресурса));
			Если НайденныеРесурсы.Количество() > 0 Тогда
				УстановитьТаблицуРесурсов(НомерСтроки, НомерСтроки, НайденныеРесурсы);				
			КонецЕсли;
		КонецЕсли;
		
		ОткрытьФормуЗадачи();
		
		тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки, НомерКолонкиНазвание).Текст = "";
	Иначе
		НомерСтроки = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
		Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки, 
			НомерКолонкиНазвание);
		ОткрытьФормуЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ЭлементПланировщика = Элементы.Планировщик.ВыделенныеЭлементы[0];
	Если ОтменаРедактирования Тогда
		Возврат
	ИначеЕсли НовыйЭлемент = Истина Тогда
		НомерСтроки = ОпределитьПозициюПоследнейЗадачи()+1;
		НастроитьСтроку(НомерСтроки,НомерСтроки, Истина);
		НазваниеЗадачи = ОтсечьДополнительнуюИнформацию(Элементы.Планировщик.ВыделенныеЭлементы[0].Текст);
		тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки,
			НомерКолонкиНазвание).Текст = НазваниеЗадачи;
		тдПроект.Область(НомерСтроки, НомерКолонкиНачало, НомерСтроки,
			НомерКолонкиНачало).Значение = Элементы.Планировщик.ВыделенныеЭлементы[0].Начало;
		тдПроект.Область(НомерСтроки, НомерКолонкиОкончание, НомерСтроки, 
			НомерКолонкиОкончание).Значение = Элементы.Планировщик.ВыделенныеЭлементы[0].Конец;
		ОкончаниеПриИзменении(НомерСтроки, Истина);
		Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки, 
			НомерКолонкиНазвание);
		
		GUID_Ресурса = ЭлементПланировщика.ЗначенияИзмерений.Получить("Ресурсы");
		Если Не GUID_Ресурса = Неопределено Тогда
			НайденныеРесурсы = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", GUID_Ресурса));
			Если НайденныеРесурсы.Количество() > 0 Тогда
				УстановитьТаблицуРесурсов(НомерСтроки, НомерСтроки, НайденныеРесурсы);
			КонецЕсли;
		КонецЕсли;
		
		Область = тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки,  НомерКолонкиДлительность);
		ПолеПроектаПриИзмененииСодержимогоОбласти(Неопределено, Область);
		Элементы.Планировщик.ВыделенныеЭлементы[0].Начало = тдПроект.Область(НомерСтроки,
			НомерКолонкиНачало, НомерСтроки, НомерКолонкиНачало).Значение;
		Элементы.Планировщик.ВыделенныеЭлементы[0].Конец  = тдПроект.Область(НомерСтроки, 
			НомерКолонкиОкончание, НомерСтроки, НомерКолонкиОкончание).Значение;
		Элементы.Планировщик.ВыделенныеЭлементы[0].Значение = НомерСтроки;
	Иначе
		НомерСтроки = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
		НазваниеЗадачи = ОтсечьДополнительнуюИнформацию(Элементы.Планировщик.ВыделенныеЭлементы[0].Текст);
		тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки, НомерКолонкиНазвание).Текст = НазваниеЗадачи;
		
		НачалоЗадачи = тдПроект.Область(НомерСтроки, НомерКолонкиНачало, НомерСтроки, НомерКолонкиНачало).Значение;
		ОкончаниеЗадачи = тдПроект.Область(НомерСтроки, НомерКолонкиОкончание, НомерСтроки, НомерКолонкиОкончание).Значение;
		
		ДатаНачалаЭлемента 	= Элементы.Планировщик.ВыделенныеЭлементы[0].Начало;
		ДатаКонцаЭлемента 	= Элементы.Планировщик.ВыделенныеЭлементы[0].Конец;
			
		ИзменяласьДатаНачала = Не НачалоЗадачи = ДатаНачалаЭлемента;
		ИзменяласьДатаОкончания = Не ОкончаниеЗадачи = ДатаКонцаЭлемента;
		
		Если ИзменяласьДатаНачала ИЛИ ИзменяласьДатаОкончания Тогда
			тдПроект.Область(НомерСтроки, НомерКолонкиНачало, 
				НомерСтроки, НомерКолонкиНачало).Значение = СкорректироватьДатуНачала(ДатаНачалаЭлемента);
			тдПроект.Область(НомерСтроки, НомерКолонкиОкончание, 
				НомерСтроки, НомерКолонкиОкончание).Значение = СкорректироватьДатуОкончания(ДатаКонцаЭлемента, 
					Не ЭтоВыходной(ДатаКонцаЭлемента));	
			Если ИзменяласьДатаОкончания Тогда
				ОкончаниеПриИзменении(НомерСтроки, Истина);
			КонецЕсли;
			Если ИзменяласьДатаНачала Тогда
				ДлительностьИлиНачалоПриИзменении(НомерСтроки, Ложь);
				тдПроект.Область(НомерСтроки, НомерКолонкиОкончание, НомерСтроки, 
					НомерКолонкиОкончание).Значение = СкорректироватьДатуОкончания(ДатаКонцаЭлемента, 
						Не ЭтоВыходной(ДатаКонцаЭлемента));
				ОкончаниеПриИзменении(НомерСтроки, Истина);
			КонецЕсли;
			Элементы.тдПроект.ТекущаяОбласть = тдПроект.Область(НомерСтроки, НомерКолонкиНазвание, НомерСтроки,
				НомерКолонкиНазвание);
			Область = тдПроект.Область(НомерСтроки, НомерКолонкиОкончание, НомерСтроки,  НомерКолонкиОкончание);
			
			БылоИзменениеРесурсов = Ложь;
			GUID_Ресурса = ЭлементПланировщика.ЗначенияИзмерений.Получить("Ресурсы");
			Если ЗначениеЗаполнено(пПланировщикТекущийРесурс) И ЗначениеЗаполнено(GUID_Ресурса) 
				И пПланировщикТекущийРесурс <> GUID_Ресурса Тогда
				НайденныеРесурсы = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", GUID_Ресурса));
				УстановитьТаблицуРесурсов(НомерСтроки, НомерСтроки, НайденныеРесурсы);
				БылоИзменениеРесурсов = Истина;
			КонецЕсли;

			
			БылПересчетСвязей = ЛОжь;
			СтруктураГраниц = Новый Структура("Верх, Низ",НомерСтроки, НомерСтроки);
			Если ПолучитьСписокПредшественников(НомерСтроки).Количество() > 0
				ИЛИ ПолучитьСписокСледующихЗадачПоСвязям(НомерСтроки).Количество() > 0 Тогда
				ПересчитатьДатыВСвязанныхЗадачах(НомерСтроки,,СтруктураГраниц);
				БылПересчетСвязей = Истина;
			КонецЕсли;
			ОбновитьИтоги(Истина, Макс(СтруктураГраниц.Верх, 3), Мин(СтруктураГраниц.Низ, ПоследняяСтрока));
			Если БылПересчетСвязей ИЛИ БылоИзменениеРесурсов Тогда
				НастроитьПланировщик();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РесурсыЗадачи 	  = ПолучитьСписокТрудовыхРесурсовЗадачи(НомерСтроки);
	Описание 		  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиОписание);
	СформироватьНазваниеЗадачиИПодсказкуДляПланировщика(НомерСтроки, Элементы.Планировщик.ВыделенныеЭлементы[0], 
		НазваниеЗадачи, РесурсыЗадачи, Описание);
	
КонецПроцедуры

&НаКлиенте
Функция ОтсечьДополнительнуюИнформацию(Знач Строка)
	
	ПерваяПозиция = СтрНайти(Строка, ": ") + 2;
	Если ПерваяПозиция > 7 ИЛИ ПерваяПозиция = 2 Тогда 
		ПерваяПозиция = 1;
	КонецЕсли;
	
	ВтораяПозиция = СтрНайти(Строка, "[");
	
	Если ВтораяПозиция = 0 Тогда
		Возврат СокрЛП(Сред(Строка, ПерваяПозиция));
	Иначе
		Возврат СокрЛП(Сред(Строка, ПерваяПозиция,  ВтораяПозиция-ПерваяПозиция));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПланировщикОтображатьСвязиПриИзменении(Элемент)
	
	НастроитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикОтображатьРесурсыПриИзменении(Элемент)
	
	НастроитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриАктивизации(Элемент, СтандартнаяОбработка)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() > 0 Тогда
		пПланировщикТекущийРесурс = Элементы.Планировщик.ВыделенныеЭлементы[0].ЗначенияИзмерений.Получить("Ресурсы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяДатаНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

#КонецОбласти

#КонецОбласти

