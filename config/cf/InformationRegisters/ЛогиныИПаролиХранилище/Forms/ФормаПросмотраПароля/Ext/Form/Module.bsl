
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УИД	= Строка(Новый УникальныйИдентификатор());
	УИД	= СтрЗаменить(УИД, "-", "");
		
	Если Параметры.Свойство("Владелец")
		И Параметры.Свойство("Период") Тогда
		ПолучитьДанныеИзХранилища(Параметры.Владелец, Параметры.Период);
		
	ИначеЕсли Параметры.Свойство("Владелец") Тогда		
		ПолучитьДанныеИзХранилища(Параметры.Владелец);
		
	Иначе
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Пароль = ?(ШифрованныйПароль = Неопределено ИЛИ ШифрованныйПароль.Количество() = 0,	"",
		ДешифрованиеXor(ШифрованныйПароль, УИД));

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СкрытьПоказатьПароль(Команда)
	
	Элементы.СкрытьПоказатьПароль.Пометка = НЕ Элементы.СкрытьПоказатьПароль.Пометка;	
	Элементы.Пароль.РежимПароля = НЕ Элементы.СкрытьПоказатьПароль.Пометка;
	Если Элементы.Пароль.РежимПароля = Ложь Тогда
		ТекущийЭлемент = Элементы.Пароль;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьДанныеИзХранилища(Знач ВладелецЗаписи, Знач ПериодЗаписи = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПериодЗаписи = Неопределено Тогда
		Данные	= РегистрыСведений.ЛогиныИПаролиХранилище.ПрочитатьДанныеИзХранилища(ВладелецЗаписи);
	Иначе	
		Данные	= РегистрыСведений.ЛогиныИПаролиХранилище.ПрочитатьДанныеИзХранилищаНаПериод(ВладелецЗаписи, ПериодЗаписи);
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Ложь);
	
	Период				= Данные.Период;
	Логин				= Данные.Логин; 	
	ШифрованныйПароль	= ШифрованиеXor(Данные.Пароль, УИД);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ШифрованиеXor(Знач СтрокаДляШифрования, Знач Ключ)
	
	Результат = Новый СписокЗначений;
	Если ПустаяСтрока(СтрокаДляШифрования) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивДляОбработки = Новый Массив;
	Для Индекс = 1 По СтрДлина(СтрокаДляШифрования) Цикл
		МассивДляОбработки.Добавить(КодСимвола(Сред(СтрокаДляШифрования, Индекс, 1)));
	КонецЦикла;
	
	БуферКлюча	= ПолучитьБуферДвоичныхДанныхИзСтроки(Ключ);
	СчетчикКлюча= 0;
	ДлинаКлюча	= СтрДлина(Ключ);
	
	РезультатСписок = Новый СписокЗначений;
	Для Каждого Число1 Из МассивДляОбработки Цикл
		Число2		= БуферКлюча.Получить(СчетчикКлюча);			
		РезультатСписок.Добавить(ПобитовоеИсключительноеИли(Число1, Число2));
		СчетчикКлюча= (СчетчикКлюча + 1) % ДлинаКлюча;
	КонецЦикла;
	
	Возврат РезультатСписок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДешифрованиеXor(Знач мСписокЗначений, Знач Ключ)
	
	Результат = "";
	Если мСписокЗначений = Неопределено ИЛИ мСписокЗначений.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	БуферКлюча	= ПолучитьБуферДвоичныхДанныхИзСтроки(Ключ);
	СчетчикКлюча= 0;
	ДлинаКлюча	= СтрДлина(Ключ);
	
	Для Каждого Число1 Из мСписокЗначений Цикл
		Число2		= БуферКлюча.Получить(СчетчикКлюча);
		Результат	= Результат + Символ(ПобитовоеИсключительноеИли(Число1.Значение, Число2)); 
		СчетчикКлюча= (СчетчикКлюча + 1) % ДлинаКлюча;
	КонецЦикла;	
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти
