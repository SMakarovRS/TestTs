
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Запись.Автор) Тогда
		
		Запись.Автор		= Пользователи.ТекущийПользователь();
		Модифицированность	= Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.ТипПароля) Тогда
		
		Запись.ТипПароля = УправлениеITОтделом8УФПовтИсп.ПолучитьЗначениеНастройки("ОсновнойТипПароляПриСоздании");
		Если НЕ ЗначениеЗаполнено(Запись.ТипПароля) Тогда
			Запись.ТипПароля = Перечисления.ТипыПаролей.Личный;
		КонецЕсли;
			
	КонецЕсли;
	
	ВидимостьПаролей = УправлениеITОтделом8УФПовтИсп.Право("ЧтениеПаролей") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ПолныеПрава") 
		ИЛИ УправлениеITОтделом8УФПовтИсп.Право("ДобавлениеИзменениеПаролей");
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСписокВыбораЛогинов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
 	Если Запись.ТипПароля = ПредопределенноеЗначение("Перечисление.ТипыПаролей.ГруппыПользователей")
		И НЕ ЗначениеЗаполнено(Запись.ГруппаПользователей) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнена группа пользователей'"),
			, "ГруппаПользователей", "Запись.ГруппаПользователей", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьСписокВыбораЛогинов();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОбновитьЛогинОбъекта();
	ОбновитьСписокВыбораЛогинов();
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПриИзменении(Элемент)
	
	ОбновитьЛогинОбъекта();
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ДанныеВыбора = Запись.Программа;
	
	Структура = Новый Структура();
	Структура.Вставить("Ключ", ДанныеВыбора);
	Структура.Вставить("ПросмотрСписком", Истина);
	Структура.Вставить("ВыбранноеЗначение", ДанныеВыбора);
	Структура.Вставить("СписокДляОтбораПоВидуНоменклатуры", ПолучитьВидыНоменклатурыПоПО());
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", 
		Структура, 
		Элемент, 
		Новый УникальныйИдентификатор(),);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПароляПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СкрытьПоказатьПароль(Команда)
	
	Элементы.СкрытьПоказатьПароль.Пометка = НЕ Элементы.СкрытьПоказатьПароль.Пометка;
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПароль(Команда)
	                 
	Результат = Неопределено;
	ОткрытьФорму("Обработка.ФормированиеПароля.Форма",,,,,,
		Новый ОписаниеОповещения("СформироватьПарольЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПарольЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	Результат = Результат1;
	Если Результат <> Ложь И Результат <> Неопределено Тогда
		// Меняем значение.
		ИзменитьПароль(Запись.Период, Запись.Объект, Запись.Программа, Результат);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьВидимостьДоступность()
	
	Элементы.СформироватьПароль.Видимость		= ВидимостьПаролей;
	Элементы.СкрытьПоказатьПароль.Видимость		= ВидимостьПаролей;
	
	Элементы.Объект.Заголовок = НСтр("ru = 'Владелец'");
	Если ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Сотрудник'");
	ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.МестаХранения") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Место хранения'");
	ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.Подразделения") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Подразделение'");
	ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.КарточкиНоменклатуры") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Карточка номенклатуры'");
	ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Физическое лицо'");
	ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Контрагент'");
	ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Контактное лицо'");
	ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.Организации") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Организация'");
	ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.ПотенциальныеКлиенты") Тогда
		Элементы.Объект.Заголовок = НСтр("ru = 'Потенциальный клиент'");
	Иначе
		Элементы.Объект.Заголовок = НСтр("ru = 'Владелец'");
	КонецЕсли;
	
	Элементы.ГруппаПользователей.Видимость = Запись.ТипПароля = Перечисления.ТипыПаролей.ГруппыПользователей;
	
	Элементы.Пароль.Видимость  = НЕ Элементы.СкрытьПоказатьПароль.Пометка;
	Элементы.Пароль1.Видимость = Элементы.СкрытьПоказатьПароль.Пометка;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПароль(Период, Объект, Программа, Структура)
	
	Запись.Пароль = Структура.Пароль;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЛогинОбъекта()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛогиныИПаролиСрезПоследних.Логин
		|ИЗ
		|	РегистрСведений.УдалитьЛогиныИПароли.СрезПоследних(
		|			&ДатаКон,
		|			Программа = &Программа
		|				И Объект = &Объект) КАК ЛогиныИПаролиСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаКон", Запись.Период);
	Запрос.УстановитьПараметр("Программа", Запись.Программа);
	Запрос.УстановитьПараметр("Объект", Запись.Объект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Запись.Логин = Выборка.Логин;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидыНоменклатурыПоПО()
	
	СписокДляОтбораПоВидуНоменклатуры = Новый СписокЗначений;
	СписокДляОтбораПоВидуНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.ПрограммноеОбеспечение);
	СписокДляОтбораПоВидуНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.Лицензия);
	СписокДляОтбораПоВидуНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.СетевоеОборудование);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.МожетИметьIPАдрес = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокДляОтбораПоВидуНоменклатуры.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокДляОтбораПоВидуНоменклатуры;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокВыбораЛогинов()
	
	Если НЕ ЗначениеЗаполнено(Запись.Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдалитьЛогиныИПароли.Логин КАК Логин
		|ИЗ
		|	РегистрСведений.УдалитьЛогиныИПароли КАК УдалитьЛогиныИПароли
		|ГДЕ
		|	УдалитьЛогиныИПароли.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Логин";
	
	Запрос.УстановитьПараметр("Объект", Запись.Объект);
	
	СписокВыбора = Элементы.Логин.СписокВыбора;
	СписокВыбора.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Логин);
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

