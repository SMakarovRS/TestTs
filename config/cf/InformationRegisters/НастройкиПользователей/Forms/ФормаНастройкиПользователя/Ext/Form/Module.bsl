#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("Пользователь") Тогда

		Пользователь = Параметры.Пользователь;

		Если ЗначениеЗаполнено(Пользователь) Тогда

			ОсновноеПодразделение 	= ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделение;
			ОсновноеМестоХранения 	= ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеМестоХранения;
			НачалоРабочегоДня		= ПланыВидовХарактеристик.НастройкиПользователей.НачалоРабочегоДня;
			ОкончаниеРабочегоДня	= ПланыВидовХарактеристик.НастройкиПользователей.ОкончаниеРабочегоДня;

			ПараметрыВыбораПодразделение = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;

			ПараметрыВыбораСклад = Новый СписокЗначений;
			ПараметрыВыбораСклад.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);

		КонецЕсли;

	КонецЕсли;
	ТекущийПользователь	= Параметры.Пользователь;
	сфпПривязкаНомера = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпПривязатьВнутреннийНомер");

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если Не (ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь()) Тогда
		Заголовок = Заголовок + "(" + Строка(ТекущийПользователь) + ")";
	КонецЕсли;
	МассивАвтоматическихДействий = сфпСофтФонПроСерверПереопределяемый.сфпПолучитьМассивДоступныхДействий();
	Для Каждого ЭлементМассива Из МассивАвтоматическихДействий Цикл
		СписокАвтоматическихДействий.Добавить(ЭлементМассива.Наименование);
	КонецЦикла;

	ЗаполнитьДерево();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

	ОбновитьНастройки();

	Если сфпПереподключитьСофтФон Тогда
		Если Не сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
			сфпСофтФонПроКлиент.сфпОтключитьСофтФон();
		ИначеЕсли Не сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
			сфпСофтФонПроКлиент.сфпОтключитьСофтФон();
		Иначе
			Оповестить("СофтФон_ЗакрытьВнутреннююПанель");
			Если сфпПанельУправления = Неопределено Тогда
				сфпСофтФонПроКлиент.сфпПодключитьСофтФон();
			Иначе
				сфпСофтФонПроКлиент.сфпПодключитьСофтФон();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриЗакрытии() 

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения"
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ВыбранТелефонныйНомерПользователя" Тогда
		ТД = Элементы.ДеревоНастроек.ТекущиеДанные;
		Если ТД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если Не (ТД.Значение = Параметр) Тогда
			// Если изменился текущий внутренний номер пользователя
			ТД.Значение = Параметр;
			УстановитьУсловноеОформлениеПоля(ТД.Настройка);		
			// Запишем внутренний номер для текущего пользователя
			МассивПользователей = сфпСофтФонПроСервер.сфпЗаписатьНомерПользователю(Параметр, ТекущийПользователь);
			Если сфпСофтФонПроСервер.сфпИспользоватьМаршрутизацию() Тогда
				// Изменим маршрутизацию в АТС
				СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации( , ТекущийПользователь);
				Для Каждого ПользовательМассива Из МассивПользователей Цикл
					НаборПользователя	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации( , ПользовательМассива);
					Для Каждого СтрокаНабора Из НаборПользователя Цикл
						СтарыйНабор.Добавить(СтрокаНабора);
					КонецЦикла;
				КонецЦикла;
				НовыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации( , ТекущийПользователь);
				// Изменяем внутренний номер на новый
				Для Каждого СтрокаНабора Из НовыйНабор Цикл
					СтрокаНабора.ВнутреннийНомер = Параметр;
				КонецЦикла;
				СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
				сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
			КонецЕсли;
			сфпПереподключитьСофтФон = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаОповещения()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНастроек

&НаКлиенте
Процедура ДеревоНастроекПередНачаломИзменения(Элемент, Отказ)

	ТД = Элемент.ТекущиеДанные;
	сфпИспользоватьСофтФон = ПредопределенноеЗначение(
		"ПланВидовХарактеристик.НастройкиПользователей.сфпИспользоватьСофтФон");
	сфпИспользоватьВнутреннююПанель = ПредопределенноеЗначение(
		"ПланВидовХарактеристик.НастройкиПользователей.сфпИспользоватьВнутреннююПанель");
	сфпАвторизацияНаСерверСофтфона = ПредопределенноеЗначение(
		"ПланВидовХарактеристик.НастройкиПользователей.сфпАвторизацияНаСерверСофтфона");
	сфпНастройкиСофтФон = ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.сфпНастройкиСофтФон");

	Если ТД = Неопределено Или ТД.ЭтоГруппа Тогда

		Отказ = Истина;
		Возврат;

	ИначеЕсли ТД.Настройка = сфпИспользоватьСофтФон Тогда
		Если ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь() Тогда
			сфпПереподключитьСофтФон = Истина;
		КонецЕсли;

	ИначеЕсли ТД.Настройка = сфпИспользоватьВнутреннююПанель Тогда
		Если ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь() Тогда
			сфпПереподключитьСофтФон = Истина;
		КонецЕсли;

	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ОсновноеПодразделение Тогда

		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", ПараметрыВыбораПодразделение));
		Элементы.ДеревоНастроекЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		;
		
	ИначеЕсли ТД.Настройка = ОсновноеМестоХранения Тогда

		НовыйМассив = Новый Массив;
		Для Каждого ЭлементСписка Из ПараметрыВыбораСклад Цикл
			НовыйМассив.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		МассивСклад = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивСклад);
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(НовыйПараметр);
		Элементы.ДеревоНастроекЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);

	КонецЕсли;

	Если ТД.Настройка = ПредопределенноеЗначение(
		"ПланВидовХарактеристик.НастройкиПользователей.сфпТекущийВнутреннийНомер") Тогда
		Если ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь() И Не сфпПривязкаНомера Тогда
			Отказ = Истина;

		ИначеЕсли Не сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией")
			И Не сфпПривязкаНомера Тогда
			Отказ = Истина;

		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекущийНомер", ТД.Значение);
			ОткрытьФорму("ОбщаяФорма.сфпСписокВнутреннихНомеров", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;

	ИначеЕсли ТД.Настройка = ПредопределенноеЗначение(
		"ПланВидовХарактеристик.НастройкиПользователей.сфпДействиеПриВходящемЗвонке") Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение" Тогда
			ВыбранныйЭлемент		= СписокАвтоматическихДействий.НайтиПоЗначению(ТД.Значение);
			ДополнительныеПараметры	= Новый Структура;
			ОповещениеВыбора		= Новый ОписаниеОповещения("ОбработкаВыбораАктивногоДействия", ЭтаФорма,
				ДополнительныеПараметры);
			ПоказатьВыборИзСписка(ОповещениеВыбора, СписокАвтоматическихДействий, Элементы.ДеревоНастроекЗначение,
				ВыбранныйЭлемент);
		КонецЕсли;

	ИначеЕсли ТД.Настройка = ПредопределенноеЗначение(
		"ПланВидовХарактеристик.НастройкиПользователей.сфпДействиеПриИсходящемЗвонке") Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение" Тогда
			ВыбранныйЭлемент		= СписокАвтоматическихДействий.НайтиПоЗначению(ТД.Значение);
			ДополнительныеПараметры	= Новый Структура;
			ОповещениеВыбора		= Новый ОписаниеОповещения("ОбработкаВыбораАктивногоДействия", ЭтаФорма,
				ДополнительныеПараметры);
			ПоказатьВыборИзСписка(ОповещениеВыбора, СписокАвтоматическихДействий, Элементы.ДеревоНастроекЗначение,
				ВыбранныйЭлемент);
		КонецЕсли;

	ИначеЕсли ТД.Настройка = ПредопределенноеЗначение(
		"ПланВидовХарактеристик.НастройкиПользователей.сфпЛогинНаСерверСофтФон") Тогда
		Если Не сфпПривязкаНомера Тогда
			Отказ = Истина;
		КонецЕсли;
		сфпПереподключитьСофтФон = Истина;

	ИначеЕсли ТД.Настройка = ПредопределенноеЗначение(
		"ПланВидовХарактеристик.НастройкиПользователей.сфпПарольНаСерверСофтФон") Тогда
		Если Не сфпПривязкаНомера Тогда
			Отказ = Истина;
		КонецЕсли;
		сфпПереподключитьСофтФон = Истина;

	ИначеЕсли ТипЗнч(ТД.Значение) = Тип("Булево") Тогда
		Отказ = Истина;
		ТД.Значение = Не ТД.Значение;
		УстановитьУсловноеОформлениеПоля(ТД.Настройка);
		Если ТД.Настройка = ПредопределенноеЗначение(
			"ПланВидовХарактеристик.НастройкиПользователей.сфпПривязатьВнутреннийНомер") Тогда
			сфпПривязкаНомера = ТД.Значение;

			сфпПереподключитьСофтФон = Истина;

			ЭлементыДерева = ДеревоНастроек.ПолучитьЭлементы();
			Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
				Если ЭлементДерева.Настройка = сфпНастройкиСофтФон Тогда
					ЭлементыДереваСофтфон = ЭлементДерева.ПолучитьЭлементы();
					Для Каждого ЭлементДереваСофтфон Из ЭлементыДереваСофтфон Цикл
						Если ЭлементДереваСофтфон.Настройка = сфпАвторизацияНаСерверСофтфона Тогда
							ЭлементДереваСофтфон.СкрыватьКолонку = Не сфпПривязкаНомера;
							ЭлементыДереваАвторизация = ЭлементДереваСофтфон.ПолучитьЭлементы();
							Для Каждого ЭлементДереваАвторизация Из ЭлементыДереваАвторизация Цикл
								ЭлементДереваАвторизация.СкрыватьКолонку = Не сфпПривязкаНомера;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ТД.Настройка = НачалоРабочегоДня Или ТД.Настройка = ОкончаниеРабочегоДня Тогда

		Элементы.ДеревоНастроекЗначение.ФорматРедактирования = "ДФ=ЧЧ:мм";
		Элементы.ДеревоНастроекЗначение.Формат = "ДФ=ЧЧ:мм";

	Иначе

		Элементы.ДеревоНастроекЗначение.ФорматРедактирования = "";
		Элементы.ДеревоНастроекЗначение.Формат = "";

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЗначениеПриИзменении(Элемент)

	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора активного действия
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Выбранное действие
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура ОбработкаВыбораАктивногоДействия(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТД = Элементы.ДеревоНастроек.ТекущиеДанные;
	ТД.Значение = ВыбранныйЭлемент.Значение;
	УстановитьУсловноеОформлениеПоля(ТД.Настройка);

КонецПроцедуры // ОбработкаВыбораАктивногоДействия()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура обновляет информацию в таблице настроек.
//
Процедура ЗаполнитьДерево()

	НастройкиЭлементы = ДеревоНастроек.ПолучитьЭлементы();
	НастройкиЭлементы.Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Настройки.Родитель,
	|	Настройки.Ссылка,
	|	Настройки.ЭтоГруппа КАК ЭтоГруппа,
	|	(НЕ Настройки.ЭтоГруппа) КАК НомерКартинки,
	|	ЗначениеНастроек.Значение
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
	|		ПО (ЗначениеНастроек.Настройка = Настройки.Ссылка)
	|			И (ЗначениеНастроек.Пользователь = &Пользователь),
	|	Константы КАК Константы
	|ГДЕ
	|	Настройки.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ,
	|	Настройки.Наименование";

	Выборка = Запрос.Выполнить().Выбрать();

	МассивДобавленныхГрупп = Новый Массив;

	Пока Выборка.Следующий() Цикл

		Если Выборка.ЭтоГруппа Тогда
			СтрокаГруппы = НастройкиЭлементы;
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
				НайденныйРодитель = НайтиНастройкуВДереве(СтрокаГруппы, Выборка.Родитель);
				Если НайденныйРодитель <> Неопределено Тогда
					СтрокаГруппы = НайденныйРодитель.ПолучитьЭлементы();
				КонецЕсли;
			КонецЕсли;

			СтрокаНастройки = СтрокаГруппы.Добавить();
			СтрокаНастройки.Настройка = Выборка.Ссылка;
			СтрокаНастройки.ЭтоГруппа = Выборка.ЭтоГруппа;
			СтрокаНастройки.НомерКартинки = Выборка.НомерКартинки;
			Если Выборка.Ссылка = ПланыВидовХарактеристик.НастройкиПользователей.сфпАвторизацияНаСерверСофтфона Тогда
				СтрокаНастройки.СкрыватьКолонку = Не сфпПривязкаНомера;
			Иначе
				СтрокаНастройки.СкрыватьКолонку = Ложь;
			КонецЕсли;
			СтрокаГруппыЭлементы = СтрокаНастройки.ПолучитьЭлементы();
		Иначе
			СтрокаНастройки = СтрокаГруппыЭлементы.Добавить();
			СтрокаНастройки.Настройка = Выборка.Ссылка;
			//СтрокаНастройки.Значение  = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
			Если СтрокаНастройки.Настройка
				= ПланыВидовХарактеристик.НастройкиПользователей.сфпДействиеПриВходящемЗвонке Тогда
				ЭлементСписка = СписокАвтоматическихДействий.НайтиПоЗначению(Выборка.Значение);
				Если ЭлементСписка = Неопределено Тогда
					ЭлементСписка = СписокАвтоматическихДействий[0];
				КонецЕсли;
				СтрокаНастройки.Значение  = ЭлементСписка.Значение;

			ИначеЕсли СтрокаНастройки.Настройка
				= ПланыВидовХарактеристик.НастройкиПользователей.сфпДействиеПриИсходящемЗвонке Тогда
				ЭлементСписка = СписокАвтоматическихДействий.НайтиПоЗначению(Выборка.Значение);
				Если ЭлементСписка = Неопределено Тогда
					ЭлементСписка = СписокАвтоматическихДействий[0];
				КонецЕсли;
				СтрокаНастройки.Значение  = ЭлементСписка.Значение;

			Иначе
				СтрокаНастройки.Значение  = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
			КонецЕсли;
			СтрокаНастройки.ЭтоГруппа = Выборка.ЭтоГруппа;
			СтрокаНастройки.НомерКартинки = Выборка.НомерКартинки;

			Если Выборка.Ссылка = ПланыВидовХарактеристик.НастройкиПользователей.сфпЛогинНаСерверСофтФон
				Или Выборка.Ссылка = ПланыВидовХарактеристик.НастройкиПользователей.сфпПарольНаСерверСофтФон Тогда
				СтрокаНастройки.СкрыватьКолонку = Не сфпПривязкаНомера;
			Иначе
				СтрокаНастройки.СкрыватьКолонку = Ложь;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
// Процедура выполняет запись значений настроек в регистр сведений.
//
Процедура ОбновитьНастройки()

	ДобавитьПодчиненныеНастройки(ДеревоНастроек.ПолучитьЭлементы());
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры // ОбновитьНастройки()

&НаСервере
// Процедура выполняет рекурсивный поиск настройки в дереве настроек
//
// Параметры:
//	СтрокиДерева	- КоллекцияСтрокДереваЗначений	- Строки дерева, в которых выполняется поиск
//	Настройка		- ПланВидовХарактеристикСсылка	- Настройка для поиска
//	ТолькоГруппы	- Булево						- Признак поиска только групп
//
// Возвращаемое значение:
//	СтрокаДереваЗначений	- Строка настройки
//
Функция НайтиНастройкуВДереве(СтрокиДерева, Настройка, ТолькоГруппы = Истина)
	НайденныйЭлемент = Неопределено;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если ТолькоГруппы И Не СтрокаДерева.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаДерева.Настройка = Настройка Тогда
			НайденныйЭлемент = СтрокаДерева;
		Иначе
			ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
			НайденныйЭлемент = НайтиНастройкуВДереве(ПодчиненныеСтрокиДерева, Настройка, ТолькоГруппы);
		КонецЕсли;
		Если Не (НайденныйЭлемент = Неопределено) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НайденныйЭлемент;
КонецФункции // НайтиНастройкуВДереве()

&НаСервере
// Процедура устанавливает условное оформление поля (цвет и шрифт)
//
// Параметры:
//	ИмяНастройки	- Строка	- Имя настройки
//
Процедура УстановитьУсловноеОформлениеПоля(ИмяНастройки)
	;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНастроек.Настройка");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ПравоеЗначение = ИмяНастройки;

	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоНастроекЗначение");

	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "сфпСофтФон";
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0, 170, 0));
	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));

КонецПроцедуры // УстановитьУсловноеОформлениеПоля()

&НаСервере
// Процедура снимает оформление изменённых ячеек
//
// Параметры:
//	Нет.
//
Процедура СнятьУсловноеОформлениеПолей()
	КоличествоЭлементов = УсловноеОформление.Элементы.Количество();
	Для Сч = 1 По КоличествоЭлементов Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Получить(КоличествоЭлементов - Сч);
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "сфпСофтФон" Тогда
			УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // СнятьУсловноеОформлениеПолей()

&НаСервере
// Процедура добавляет записи в регистр настроек пользователей
//
// Параметры:
//	НастройкиЭлементы	- КоллекцияСтрокДереваЗначений	- Строки настроек
//
Процедура ДобавитьПодчиненныеНастройки(НастройкиЭлементы)

	Для Каждого СтрокаНастроек Из НастройкиЭлементы Цикл
		Если СтрокаНастроек.ЭтоГруппа Тогда
			ДобавитьПодчиненныеНастройки(СтрокаНастроек.ПолучитьЭлементы());
		Иначе
			ЗаписьРегистра = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Пользователь	= ТекущийПользователь;
			ЗаписьРегистра.Настройка = СтрокаНастроек.Настройка;
			ЗаписьРегистра.Значение	= СтрокаНастроек.Настройка.ТипЗначения.ПривестиЗначение(СтрокаНастроек.Значение);
			ЗаписьРегистра.Записать(Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

 // ДобавитьПодчиненныеНастройки()
 
 &НаКлиенте
Процедура ДеревоНастроекЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.СтилиОформления") Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект, ВыбранноеЗначение), НСтр(
				"ru = 'Приложение будет перезапущено. Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ВыбранноеЗначение = ДополнительныеПараметры;
	
	Если ВыбранноеЗначение = Неопределено Или Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Результат) Тогда 
		ТекущиеДанные.Значение	= ВыбранноеЗначение;		
	КонецЕсли;
	
	ЗавершитьРаботуСистемы(Ложь,Истина);

КонецПроцедуры

#КонецОбласти