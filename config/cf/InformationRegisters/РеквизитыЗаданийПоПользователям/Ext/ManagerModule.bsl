#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура УстановитьОтметки(Объект, Пользователь, Отметка) Экспорт
	
	Запись 		  			= РегистрыСведений.РеквизитыЗаданийПоПользователям.СоздатьМенеджерЗаписи();
	Запись.Объект 			= Объект;
	Запись.Пользователь	= Пользователь;
	Запись.Прочитать();	
	Если Запись.Выбран() Тогда
		Запись.Отметка = Отметка;
		Попытка
			Запись.Записать(Истина);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при установке отметки объекту.'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
		КонецПопытки;
	Иначе
		Запись.Объект 			= Объект;
		Запись.Пользователь	= Пользователь;
		Запись.Отметка 		= Отметка;
		Запись.Подсветка 		= Ложь;
		Попытка
			Запись.Записать(Истина);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при установке отметки объекту.'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОчиститьОтметки(Объект, Пользователь) Экспорт
	
	Запись 				= РегистрыСведений.РеквизитыЗаданийПоПользователям.СоздатьМенеджерЗаписи();
	Запись.Объект 		= Объект;
	Запись.Пользователь = Пользователь;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		Если Запись.Подсветка Тогда
			Запись.Отметка = Перечисления.ОтметкиОбъектов.ПустаяСсылка();
			Попытка
				Запись.Записать(Истина);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при установке отметки объекту.'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
			КонецПопытки;
		Иначе	
			Попытка
				Запись.Удалить();
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при отключении отметки у объекта.'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОтметкуИПодсветку(Объект, Пользователь) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Отметка",   Перечисления.ОтметкиОбъектов.ПустаяСсылка());
	СтруктураВозврата.Вставить("Подсветка", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОтметкиОбъектов.Отметка,
		|	ОтметкиОбъектов.Подсветка
		|ИЗ
		|	РегистрСведений.РеквизитыЗаданийПоПользователям КАК ОтметкиОбъектов
		|ГДЕ
		|	ОтметкиОбъектов.Объект = &Объект
		|	И ОтметкиОбъектов.Пользователь = &Пользователь";
		
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда		
		СтруктураВозврата.Вставить("Отметка",   Выборка.Отметка);
		СтруктураВозврата.Вставить("Подсветка", Выборка.Подсветка);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура УстановитьПодсветкуОбъекту(Объект, Пользователь) Экспорт
	
	Запись 				= РегистрыСведений.РеквизитыЗаданийПоПользователям.СоздатьМенеджерЗаписи();
	Запись.Объект 		= Объект;
	Запись.Пользователь = Пользователь;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		Запись.Подсветка = Не Запись.Подсветка;
		Если ЗначениеЗаполнено(Запись.Отметка) ИЛИ Запись.Подсветка Тогда
			Попытка
				Запись.Записать(Истина);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при установке подсветки объекту.'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
			КонецПопытки;
		Иначе
			Попытка
				Запись.Удалить();
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при отключении подсветки у объекта.'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
			КонецПопытки;
		КонецЕсли;
	Иначе
		Запись.Объект 		= Объект;
		Запись.Пользователь = Пользователь;
		Запись.Подсветка	= Истина;		
		Попытка
			Запись.Записать(Истина);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при установке подсветки объекту.'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
		КонецПопытки;		
	КонецЕсли;	
	
КонецПроцедуры	

// Устанавливает дату открытия задания.
//
// Параметры:
//		Объект - ДокументСсылка.Задание;
//		Пользователь - СправочникСсылка.Пользователи.
//
//	Возвращаемое значение:
//		Результат - Булево - признак установки даты открытия.
//		
Функция УстановитьДатуОткрытия(Знач Объект, Знач Пользователь = Неопределено, 
	Знач ДатаОткрытия = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;	
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;	 
	
	Если ДатаОткрытия = Неопределено Тогда
		ДатаОткрытия = ТекущаяДатаСеанса();
	КонецЕсли;
		
	МенеджерЗаписи				= РегистрыСведений.РеквизитыЗаданийПоПользователям.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект 		= Объект;
	МенеджерЗаписи.Пользователь	= Пользователь;	
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ДатаОткрытия = ДатаОткрытия;
		Попытка
			МенеджерЗаписи.Записать(Истина);
			Результат = Истина;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при установке даты открытия.'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
		КонецПопытки;			
	Иначе
		МенеджерЗаписи.Объект 			= Объект;		
		МенеджерЗаписи.Пользователь	= Пользователь;
		МенеджерЗаписи.ДатаОткрытия	= ДатаОткрытия;
		Попытка
			МенеджерЗаписи.Записать(Истина);
			Результат = Истина;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при установке даты открытия.'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
		КонецПопытки;
	КонецЕсли;		 	
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение указанного реквизита задания для указанного пользователя.
//
// Параметры:
//	Объект - ДокументСсылка.Задание - владелец реквизита;
//	ИмяРеквизита - Строка - имя реквизита;
//	Пользователь - СправочникСсылка.Пользователи - пользователь, по которому требуется получить значение реквизита.
//
// Возвращаемое значение:
//	Произвольный тип, Неопределено - значение реквизита.
// 
Функция ПолучитьРеквизитЗаданияПоПользователю(Знач Объект, Знач ИмяРеквизита, Знач Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	МенеджерЗаписи			= РегистрыСведений.РеквизитыЗаданийПоПользователям.СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.Объект		= Объект;
	МенеджерЗаписи.Пользователь= Пользователь;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Возврат МенеджерЗаписи[ИмяРеквизита];
	Иначе
		Возврат Неопределено;
	КонецЕсли;		
	
КонецФункции

#КонецОбласти

#КонецЕсли