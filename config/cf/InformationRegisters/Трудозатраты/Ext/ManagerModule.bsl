#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

// Функция записывает в регистр данные о 
// пользователе и объекте при включении хронометража, либо если передана дата окончания - то фиксируются трудозатраты.
// 
// Параметры:
//  ПараметрыЗаписи - Структура - сведения об объекте, пользователе, моменте времени.
//  Возвращаемое значение:
//		Истина - Хронометраж включен;
//		Ложь   - Хронометраж не удалось включить.
//
Функция ВключитьТрудозатраты(Знач ПараметрыЗаписи)Экспорт
	
	НаборЗаписей = РегистрыСведений.Трудозатраты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ПараметрыЗаписи.Объект);
	
	Если ПараметрыЗаписи.Свойство("Исполнитель") Тогда
		НаборЗаписей.Отбор.Исполнитель.Установить(ПараметрыЗаписи.Исполнитель);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Инициатор") Тогда
		НаборЗаписей.Отбор.Инициатор.Установить(ПараметрыЗаписи.Инициатор);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("КлючУникальности") Тогда
		НаборЗаписей.Отбор.КлючУникальности.Установить(ПараметрыЗаписи.КлючУникальности);
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
	
	СтруктураНабора	= Новый Структура;
	СтруктураНабора.Вставить("Объект", ПараметрыЗаписи.Объект);
	
	Если ПараметрыЗаписи.Свойство("Инициатор") Тогда
		СтруктураНабора.Вставить("Инициатор", ПараметрыЗаписи.Инициатор);
	КонецЕсли;	
	
	Если ПараметрыЗаписи.Свойство("Исполнитель") Тогда
		СтруктураНабора.Вставить("Исполнитель", ПараметрыЗаписи.Исполнитель);
	КонецЕсли;	
	
	Если ПараметрыЗаписи.Свойство("КлючУникальности") Тогда
		СтруктураНабора.Вставить("КлючУникальности", ПараметрыЗаписи.КлючУникальности);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("МоментВремени") Тогда
		СтруктураНабора.Вставить("ДатаНачала", ПараметрыЗаписи.МоментВремени);
	КонецЕсли;

	Если ПараметрыЗаписи.Свойство("ДатаОкончания") Тогда
    	СтруктураНабора.Вставить("ДатаОкончания", ПараметрыЗаписи.ДатаОкончания);		
	Иначе	
		СтруктураНабора.Вставить("ДатаОкончания", Дата(1, 1, 1));
	КонецЕсли;	
	
	Если ПараметрыЗаписи.Свойство("Длительность") Тогда
		СтруктураНабора.Вставить("Длительность", ПараметрыЗаписи.Длительность);
	КонецЕсли;
			
	Если ПараметрыЗаписи.Свойство("ВидРаботы") Тогда
		СтруктураНабора.Вставить("ВидРаботы", ПараметрыЗаписи.ВидРаботы);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Описание") Тогда
		СтруктураНабора.Вставить("Описание", ПараметрыЗаписи.Описание);
	КонецЕсли;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураНабора); 
	Попытка
		НаборЗаписей.Записать();
		Возврат Истина;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка включения автоматического расчета трудозатрат'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Функция записивает в регистр данные о 
// пользователе и объекте при выключении хронометража.
// 
// Параметры:
//  ПараметрыЗаписи - Структура - сведения об объекте, пользователе, моменте времени.
//  Возвращаемое значение:
//		Истина - Хронометраж выключен;
//		Ложь   - Хронометраж не удалось выключить.
//
Функция ВыключитьТрудозатраты(Знач ПараметрыЗаписи)Экспорт
	
	ПроверятьИсполнителя = Ложь;
	Если ПараметрыЗаписи.Свойство("НовыйИсполнитель") Тогда
		ПроверятьИсполнителя  = Истина;
		ИсполнительИсключение = ПараметрыЗаписи.НовыйИсполнитель;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.Трудозатраты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ПараметрыЗаписи.Объект);
	
	Если ПараметрыЗаписи.Свойство("Исполнитель") Тогда
		НаборЗаписей.Отбор.Исполнитель.Установить(ПараметрыЗаписи.Исполнитель);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Инициатор") Тогда
		НаборЗаписей.Отбор.Инициатор.Установить(ПараметрыЗаписи.Инициатор);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("КлючУникальности") Тогда
		НаборЗаписей.Отбор.КлючУникальности.Установить(ПараметрыЗаписи.КлючУникальности);
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда 
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если Не ЗначениеЗаполнено(ЗаписьНабора.ДатаОкончания) Тогда
				Если ПроверятьИсполнителя И ЗаписьНабора.Исполнитель = ИсполнительИсключение Тогда
					Продолжить;
				КонецЕсли;					
				ЗаписьНабора.ДатаОкончания 			 = ПараметрыЗаписи.МоментВремени;				
				ЗаписьНабора.Длительность 			 = ЗаписьНабора.ДатаОкончания - ЗаписьНабора.ДатаНачала;
				Если ПараметрыЗаписи.Свойство("ВидРаботы") Тогда
					ЗаписьНабора.ВидРаботы = ПараметрыЗаписи.ВидРаботы;					 
				КонецЕсли;
				Если ПараметрыЗаписи.Свойство("Описание") Тогда
					ЗаписьНабора.Описание = ПараметрыЗаписи.Описание;					 
				КонецЕсли;
			КонецЕсли;	                                                     
		КонецЦикла;
		Попытка
			НаборЗаписей.Записать();
			Возврат Истина;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выключения хронометража'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
			Возврат Ложь;         
		КонецПопытки;	
	КонецЕсли;          
	
КонецФункции

// Функция возвращает состояние хронометража для 
// переданного пользователя и объекта.
//
// Параметры:
//  ПараметрыЗаписи - Структура - сведения об объекте и пользователе.
//  Возвращаемое значение:
//		Истина - Хронометраж включен;
//		Ложь   - Хронометраж не запущен.
//
Функция ТрудозатратыВключены(Знач ПараметрыЗаписи)Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Трудозатраты.Длительность
	               |ИЗ
	               |	РегистрСведений.Трудозатраты КАК Трудозатраты
	               |ГДЕ
	               |	Трудозатраты.Объект = &Объект				   
	               |	И Трудозатраты.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		
	Если ПараметрыЗаписи.Свойство("Исполнитель") Тогда
		ТекстЗапроса = ТекстЗапроса + " И Трудозатраты.Исполнитель = &Исполнитель ";
        Запрос.УстановитьПараметр("Исполнитель", ПараметрыЗаписи.Исполнитель);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Инициатор") Тогда
		ТекстЗапроса = ТекстЗапроса + " И Трудозатраты.Инициатор = &Инициатор ";
        Запрос.УстановитьПараметр("Инициатор", ПараметрыЗаписи.Инициатор);
	КонецЕсли;
	
	Запрос.Текст 			= ТекстЗапроса;	
	Запрос.УстановитьПараметр("Объект", ПараметрыЗаписи.Объект);	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();	
	
	Возврат ВыборкаДетальныеЗаписи.Следующий();
	
КонецФункции

// Функция вызывается перед записью объекта, 
// закрывает незакрытые записи, создает новые записи. 
// 
// Параметры:
//  ПараметрыЗаписи - Структура - сведения об объекте, пользователе, моменте времени.
//  Возвращаемое значение:
//		Истина - Запись успешна;
//		Ложь   - Запись не удалась.
//
Функция ТрудозатратыПриИзмененииОбъекта(Знач ПараметрыЗаписи)Экспорт
	
	ПроверятьИсполнителя   = Ложь;
	Если ПараметрыЗаписи.Свойство("НовыйИсполнитель") Тогда
		ПроверятьИсполнителя   = Истина;
		ИсполнительНовогоЭтапа = ПараметрыЗаписи.НовыйИсполнитель;
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.Трудозатраты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ПараметрыЗаписи.Объект);	
	НаборЗаписей.Прочитать();
		
	Если НаборЗаписей.Количество() > 0 Тогда
		МассивЗаписей = Новый Массив;
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если (НЕ ЗначениеЗаполнено(ЗаписьНабора.ДатаОкончания)) Тогда
				ДатаОкончания						 = ПараметрыЗаписи.МоментВремени;
				Длительность			 			 = ЗаписьНабора.Длительность + (ДатаОкончания - ЗаписьНабора.ДатаНачала);				
				ЗаписьНабора.ДатаОкончания 			 = ДатаОкончания;				
				ЗаписьНабора.Длительность			 = Длительность;				
				Если ПроверятьИсполнителя Тогда
					Если  ИсполнительНовогоЭтапа = ЗаписьНабора.Исполнитель Тогда
						СтруктураНовойЗаписи = Новый Структура;
						СтруктураНовойЗаписи.Вставить("Объект", 	ПараметрыЗаписи.Объект);
						СтруктураНовойЗаписи.Вставить("Исполнитель",ЗаписьНабора.Исполнитель);
						СтруктураНовойЗаписи.Вставить("Инициатор",	ЗаписьНабора.Инициатор);
						СтруктураНовойЗаписи.Вставить("ДатаНачала", ПараметрыЗаписи.МоментВремени);					
						МассивЗаписей.Добавить(СтруктураНовойЗаписи);
					КонецЕсли;	
				Иначе
					СтруктураНовойЗаписи = Новый Структура;
					СтруктураНовойЗаписи.Вставить("Объект", 	ПараметрыЗаписи.Объект);
					СтруктураНовойЗаписи.Вставить("Исполнитель",ЗаписьНабора.Исполнитель);
					СтруктураНовойЗаписи.Вставить("Инициатор",	ЗаписьНабора.Инициатор);
					СтруктураНовойЗаписи.Вставить("ДатаНачала", ПараметрыЗаписи.МоментВремени);						
					МассивЗаписей.Добавить(СтруктураНовойЗаписи);					
				КонецЕсли;				
			КонецЕсли;	
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();			
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи авторасчета трудозатрат'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;		
		
		Если МассивЗаписей.Количество() > 0 Тогда
			Для Каждого ЭлементМассива Из МассивЗаписей Цикл
				НаборЗаписей = РегистрыСведений.Трудозатраты.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(ЭлементМассива.Объект);
				НаборЗаписей.Отбор.Инициатор.Установить(ЭлементМассива.Инициатор);
				НаборЗаписей.Отбор.Исполнитель.Установить(ЭлементМассива.Исполнитель);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() > 0 Тогда
					Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
						ЗаписьНабора.ДатаНачала    = ЭлементМассива.ДатаНачала;
						ЗаписьНабора.ДатаОкончания = Дата(1, 1, 1);
					КонецЦикла;
				Иначе	
					НоваяЗапись 	= НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЭлементМассива);
				КонецЕсли;
				
				Попытка
					НаборЗаписей.Записать();					
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи авторасчета трудозатрат'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
					Возврат Ложь;
				КонецПопытки;				
			КонецЦикла;	
		КонецЕсли;				
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает массив, 
// содержащий записи о трудозатратах пользователя на переданный объект. 
// 
// Параметры:
//  ПараметрыЗаписи - Структура - сведения об объекте, пользователе.
//  Возвращаемое значение:
//		массив - сведения о трудозатратах.
//
Функция ПолучитьТрудозатратыПользователя(Знач ПараметрыЗаписи)Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Трудозатраты.Объект,
		|	Трудозатраты.Исполнитель,
		|	Трудозатраты.Инициатор,
		|	Трудозатраты.КлючУникальности,
		|	Трудозатраты.ДатаНачала,
		|	Трудозатраты.ДатаОкончания,
		|	Трудозатраты.Длительность		
		|ИЗ
		|	РегистрСведений.Трудозатраты КАК Трудозатраты
		|ГДЕ
		|	Трудозатраты.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", ПараметрыЗаписи.Объект);
	
	Если ПараметрыЗаписи.Свойство("Инициатор") Тогда 
		ТекстЗапроса = ТекстЗапроса + " И Трудозатраты.Инициатор = &Инициатор ";		
		Запрос.УстановитьПараметр("Инициатор", ПараметрыЗаписи.Инициатор);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Исполнитель") Тогда 
		ТекстЗапроса = ТекстЗапроса + " И Трудозатраты.Исполнитель = &Исполнитель ";		
		Запрос.УстановитьПараметр("Исполнитель", ПараметрыЗаписи.Исполнитель);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("КлючУникальности") Тогда 
		ТекстЗапроса = ТекстЗапроса + " И Трудозатраты.КлючУникальности = &КлючУникальности ";		
		Запрос.УстановитьПараметр("КлючУникальности", ПараметрыЗаписи.КлючУникальности);
	КонецЕсли;
	МассивРезультатов 	   = Новый Массив;
	Запрос.Текст 	 	   = ТекстЗапроса;
	РезультатЗапроса 	   = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Объект", 				ВыборкаДетальныеЗаписи.Объект);
		СтруктураЗаписи.Вставить("Исполнитель", 		ВыборкаДетальныеЗаписи.Исполнитель);
		СтруктураЗаписи.Вставить("Инициатор", 			ВыборкаДетальныеЗаписи.Инициатор);
		СтруктураЗаписи.Вставить("КлючУникальности",	ВыборкаДетальныеЗаписи.КлючУникальности);
		СтруктураЗаписи.Вставить("ДатаНачала", 			ВыборкаДетальныеЗаписи.ДатаНачала);
		СтруктураЗаписи.Вставить("ДатаОкончания", 		ВыборкаДетальныеЗаписи.ДатаОкончания);		
		СтруктураЗаписи.Вставить("Длительность", 		ВыборкаДетальныеЗаписи.Длительность);		
		МассивРезультатов.Добавить(СтруктураЗаписи);
	КонецЦикла;
	
	Возврат МассивРезультатов;
	
КонецФункции

// Функция возвращает КлючУникальности для записи по переданным параметрам, 
// либо новый уникальный идентификатор.
// Параметры:
//  ПараметрыЗаписи - Структура - сведения об Объекте, Исполнителе, Данным.
//		* Исполнитель - ОпределяемыйТип.Пользователь - исполнитель по трудозатратам.
//		* Инициатор - ОпределяемыйТип.ИнициаторЗадания - кто инициировал трудозатраты.
//		* Объект - ОпределяемыйТип.ТрудозатратыОбъект - исходный объект
//  Возвращаемое значение:
//		КлючУникальности - сведения о трудозатратах.
//
Функция КлючЗаписиТрудозатрат(Знач ПараметрыЗаписи)Экспорт	
		
	Запрос 		 = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Трудозатраты.КлючУникальности
		|ИЗ
		|	РегистрСведений.Трудозатраты КАК Трудозатраты
		|ГДЕ
		|	Трудозатраты.Объект = &Объект
		|	И Трудозатраты.Исполнитель = &Исполнитель
		|	И Трудозатраты.Инициатор = &Инициатор
		|	И Трудозатраты.ДатаОкончания = ДАТАВРЕМЯ(1,1,1)";
		
	Запрос.УстановитьПараметр("Исполнитель",ПараметрыЗаписи.Исполнитель);
	Запрос.УстановитьПараметр("Инициатор",ПараметрыЗаписи.Инициатор);
	Запрос.УстановитьПараметр("Объект", 	ПараметрыЗаписи.Объект);	
	Запрос.Текст 		   = ТекстЗапроса;
	РезультатЗапроса 	   = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.КлючУникальности;
	Иначе
		Возврат Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
	
#КонецЕсли